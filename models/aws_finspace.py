from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_finspace.CfnEnvironment.AttributeMapItemsProperty
class CfnEnvironment_AttributeMapItemsPropertyDef(BaseStruct):
    key: typing.Optional[str] = pydantic.Field(None, description='``CfnEnvironment.AttributeMapItemsProperty.Key``.')
    value: typing.Optional[str] = pydantic.Field(None, description='``CfnEnvironment.AttributeMapItemsProperty.Value``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-finspace-environment-attributemapitems.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_finspace as finspace\n\n    attribute_map_items_property = finspace.CfnEnvironment.AttributeMapItemsProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_finspace.CfnEnvironment.AttributeMapItemsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_finspace.CfnEnvironment.FederationParametersProperty
class CfnEnvironment_FederationParametersPropertyDef(BaseStruct):
    application_call_back_url: typing.Optional[str] = pydantic.Field(None, description='The redirect or sign-in URL that should be entered into the SAML 2.0 compliant identity provider configuration (IdP).\n')
    attribute_map: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_finspace.CfnEnvironment_AttributeMapItemsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='SAML attribute name and value. The name must always be ``Email`` and the value should be set to the attribute definition in which user email is set. For example, name would be ``Email`` and value ``http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress`` . Please check your SAML 2.0 compliant identity provider (IdP) documentation for details.\n')
    federation_provider_name: typing.Optional[str] = pydantic.Field(None, description='Name of the identity provider (IdP).\n')
    federation_urn: typing.Optional[str] = pydantic.Field(None, description='The Uniform Resource Name (URN). Also referred as Service Provider URN or Audience URI or Service Provider Entity ID.\n')
    saml_metadata_document: typing.Optional[str] = pydantic.Field(None, description='SAML 2.0 Metadata document from identity provider (IdP).\n')
    saml_metadata_url: typing.Optional[str] = pydantic.Field(None, description='Provide the metadata URL from your SAML 2.0 compliant identity provider (IdP).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-finspace-environment-federationparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_finspace as finspace\n\n    federation_parameters_property = finspace.CfnEnvironment.FederationParametersProperty(\n        application_call_back_url="applicationCallBackUrl",\n        attribute_map=[finspace.CfnEnvironment.AttributeMapItemsProperty(\n            key="key",\n            value="value"\n        )],\n        federation_provider_name="federationProviderName",\n        federation_urn="federationUrn",\n        saml_metadata_document="samlMetadataDocument",\n        saml_metadata_url="samlMetadataUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_call_back_url', 'attribute_map', 'federation_provider_name', 'federation_urn', 'saml_metadata_document', 'saml_metadata_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_finspace.CfnEnvironment.FederationParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_finspace.CfnEnvironment.SuperuserParametersProperty
class CfnEnvironment_SuperuserParametersPropertyDef(BaseStruct):
    email_address: typing.Optional[str] = pydantic.Field(None, description='The email address of the superuser.\n')
    first_name: typing.Optional[str] = pydantic.Field(None, description='The first name of the superuser.\n')
    last_name: typing.Optional[str] = pydantic.Field(None, description='The last name of the superuser.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-finspace-environment-superuserparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_finspace as finspace\n\n    superuser_parameters_property = finspace.CfnEnvironment.SuperuserParametersProperty(\n        email_address="emailAddress",\n        first_name="firstName",\n        last_name="lastName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email_address', 'first_name', 'last_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_finspace.CfnEnvironment.SuperuserParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_finspace.CfnEnvironment
class CfnEnvironmentDef(BaseCfnResource):
    name: str = pydantic.Field(..., description='The name of the FinSpace environment.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the FinSpace environment.\n')
    federation_mode: typing.Optional[str] = pydantic.Field(None, description='The authentication mode for the environment.\n')
    federation_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_finspace.CfnEnvironment_FederationParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information when authentication mode is FEDERATED.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The KMS key id used to encrypt in the FinSpace environment.\n')
    superuser_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_finspace.CfnEnvironment_SuperuserParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for the superuser.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='``AWS::FinSpace::Environment.Tags``.')
    _init_params: typing.ClassVar[list[str]] = ['name', 'description', 'federation_mode', 'federation_parameters', 'kms_key_id', 'superuser_parameters', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AttributeMapItemsProperty', 'FederationParametersProperty', 'SuperuserParametersProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_finspace.CfnEnvironment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnEnvironmentDefConfig] = pydantic.Field(None)


class CfnEnvironmentDefConfig(pydantic.BaseModel):
    AttributeMapItemsProperty: typing.Optional[list[CfnEnvironmentDefAttributemapitemspropertyParams]] = pydantic.Field(None, description='')
    FederationParametersProperty: typing.Optional[list[CfnEnvironmentDefFederationparameterspropertyParams]] = pydantic.Field(None, description='')
    SuperuserParametersProperty: typing.Optional[list[CfnEnvironmentDefSuperuserparameterspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnEnvironmentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnEnvironmentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnEnvironmentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnEnvironmentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnEnvironmentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnEnvironmentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnEnvironmentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnEnvironmentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnEnvironmentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnEnvironmentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnEnvironmentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnEnvironmentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnEnvironmentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnEnvironmentDefAttributemapitemspropertyParams(pydantic.BaseModel):
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEnvironmentDefFederationparameterspropertyParams(pydantic.BaseModel):
    application_call_back_url: typing.Optional[str] = pydantic.Field(None, description='')
    attribute_map: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_finspace.CfnEnvironment_AttributeMapItemsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    federation_provider_name: typing.Optional[str] = pydantic.Field(None, description='')
    federation_urn: typing.Optional[str] = pydantic.Field(None, description='')
    saml_metadata_document: typing.Optional[str] = pydantic.Field(None, description='')
    saml_metadata_url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEnvironmentDefSuperuserparameterspropertyParams(pydantic.BaseModel):
    email_address: typing.Optional[str] = pydantic.Field(None, description='')
    first_name: typing.Optional[str] = pydantic.Field(None, description='')
    last_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEnvironmentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEnvironmentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEnvironmentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEnvironmentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEnvironmentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEnvironmentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEnvironmentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEnvironmentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEnvironmentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEnvironmentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEnvironmentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnEnvironmentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEnvironmentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEnvironmentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_finspace.CfnEnvironmentProps
class CfnEnvironmentPropsDef(BaseCfnProperty):
    name: str = pydantic.Field(..., description='The name of the FinSpace environment.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the FinSpace environment.\n')
    federation_mode: typing.Optional[str] = pydantic.Field(None, description='The authentication mode for the environment.\n')
    federation_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_finspace.CfnEnvironment_FederationParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information when authentication mode is FEDERATED.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The KMS key id used to encrypt in the FinSpace environment.\n')
    superuser_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_finspace.CfnEnvironment_SuperuserParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for the superuser.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='``AWS::FinSpace::Environment.Tags``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-finspace-environment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_finspace as finspace\n\n    cfn_environment_props = finspace.CfnEnvironmentProps(\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        federation_mode="federationMode",\n        federation_parameters=finspace.CfnEnvironment.FederationParametersProperty(\n            application_call_back_url="applicationCallBackUrl",\n            attribute_map=[finspace.CfnEnvironment.AttributeMapItemsProperty(\n                key="key",\n                value="value"\n            )],\n            federation_provider_name="federationProviderName",\n            federation_urn="federationUrn",\n            saml_metadata_document="samlMetadataDocument",\n            saml_metadata_url="samlMetadataUrl"\n        ),\n        kms_key_id="kmsKeyId",\n        superuser_parameters=finspace.CfnEnvironment.SuperuserParametersProperty(\n            email_address="emailAddress",\n            first_name="firstName",\n            last_name="lastName"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'description', 'federation_mode', 'federation_parameters', 'kms_key_id', 'superuser_parameters', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_finspace.CfnEnvironmentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnEnvironment_AttributeMapItemsProperty: typing.Optional[dict[str, CfnEnvironment_AttributeMapItemsPropertyDef]] = pydantic.Field(None)
    CfnEnvironment_FederationParametersProperty: typing.Optional[dict[str, CfnEnvironment_FederationParametersPropertyDef]] = pydantic.Field(None)
    CfnEnvironment_SuperuserParametersProperty: typing.Optional[dict[str, CfnEnvironment_SuperuserParametersPropertyDef]] = pydantic.Field(None)
    CfnEnvironment: typing.Optional[dict[str, CfnEnvironmentDef]] = pydantic.Field(None)
    CfnEnvironmentProps: typing.Optional[dict[str, CfnEnvironmentPropsDef]] = pydantic.Field(None)
    ...
