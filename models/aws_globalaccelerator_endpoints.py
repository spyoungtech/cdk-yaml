from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_globalaccelerator_endpoints.ApplicationLoadBalancerEndpoint
class ApplicationLoadBalancerEndpointDef(BaseClass):
    load_balancer: typing.Union[models.aws_elasticloadbalancingv2.ApplicationLoadBalancerDef] = pydantic.Field(..., description='-')
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Forward the client IP address in an ``X-Forwarded-For`` header. GlobalAccelerator will create Network Interfaces in your VPC in order to preserve the client IP address. Client IP address preservation is supported only in specific AWS Regions. See the GlobalAccelerator Developer Guide for a list. Default: true if available\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer', 'preserve_client_ip', 'weight']
    _method_names: typing.ClassVar[list[str]] = ['render_endpoint_configuration']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator_endpoints.ApplicationLoadBalancerEndpoint'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ApplicationLoadBalancerEndpointDefConfig] = pydantic.Field(None)


class ApplicationLoadBalancerEndpointDefConfig(pydantic.BaseModel):
    render_endpoint_configuration: typing.Optional[bool] = pydantic.Field(None, description='Render the endpoint to an endpoint configuration.')


#  autogenerated from aws_cdk.aws_globalaccelerator_endpoints.CfnEipEndpoint
class CfnEipEndpointDef(BaseClass):
    eip: models.aws_ec2.CfnEIPDef = pydantic.Field(..., description='-')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128')
    _init_params: typing.ClassVar[list[str]] = ['eip', 'weight']
    _method_names: typing.ClassVar[list[str]] = ['render_endpoint_configuration']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator_endpoints.CfnEipEndpoint'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnEipEndpointDefConfig] = pydantic.Field(None)


class CfnEipEndpointDefConfig(pydantic.BaseModel):
    render_endpoint_configuration: typing.Optional[bool] = pydantic.Field(None, description='Render the endpoint to an endpoint configuration.')


#  autogenerated from aws_cdk.aws_globalaccelerator_endpoints.InstanceEndpoint
class InstanceEndpointDef(BaseClass):
    instance: typing.Union[models.aws_ec2.BastionHostLinuxDef, models.aws_ec2.InstanceDef] = pydantic.Field(..., description='-')
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Forward the client IP address. GlobalAccelerator will create Network Interfaces in your VPC in order to preserve the client IP address. Client IP address preservation is supported only in specific AWS Regions. See the GlobalAccelerator Developer Guide for a list. Default: true if available\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128')
    _init_params: typing.ClassVar[list[str]] = ['instance', 'preserve_client_ip', 'weight']
    _method_names: typing.ClassVar[list[str]] = ['render_endpoint_configuration']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator_endpoints.InstanceEndpoint'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[InstanceEndpointDefConfig] = pydantic.Field(None)


class InstanceEndpointDefConfig(pydantic.BaseModel):
    render_endpoint_configuration: typing.Optional[bool] = pydantic.Field(None, description='Render the endpoint to an endpoint configuration.')


#  autogenerated from aws_cdk.aws_globalaccelerator_endpoints.NetworkLoadBalancerEndpoint
class NetworkLoadBalancerEndpointDef(BaseClass):
    load_balancer: typing.Union[models.aws_elasticloadbalancingv2.NetworkLoadBalancerDef] = pydantic.Field(..., description='-')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer', 'weight']
    _method_names: typing.ClassVar[list[str]] = ['render_endpoint_configuration']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator_endpoints.NetworkLoadBalancerEndpoint'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[NetworkLoadBalancerEndpointDefConfig] = pydantic.Field(None)


class NetworkLoadBalancerEndpointDefConfig(pydantic.BaseModel):
    render_endpoint_configuration: typing.Optional[bool] = pydantic.Field(None, description='Render the endpoint to an endpoint configuration.')


#  autogenerated from aws_cdk.aws_globalaccelerator_endpoints.ApplicationLoadBalancerEndpointOptions
class ApplicationLoadBalancerEndpointOptionsDef(BaseStruct):
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Forward the client IP address in an ``X-Forwarded-For`` header. GlobalAccelerator will create Network Interfaces in your VPC in order to preserve the client IP address. Client IP address preservation is supported only in specific AWS Regions. See the GlobalAccelerator Developer Guide for a list. Default: true if available\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128\n\n:exampleMetadata: infused\n\nExample::\n\n    # alb: elbv2.ApplicationLoadBalancer\n    # listener: globalaccelerator.Listener\n\n\n    listener.add_endpoint_group("Group",\n        endpoints=[\n            ga_endpoints.ApplicationLoadBalancerEndpoint(alb,\n                weight=128,\n                preserve_client_ip=True\n            )\n        ]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['preserve_client_ip', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator_endpoints.ApplicationLoadBalancerEndpointOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator_endpoints.InstanceEndpointProps
class InstanceEndpointPropsDef(BaseStruct):
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Forward the client IP address. GlobalAccelerator will create Network Interfaces in your VPC in order to preserve the client IP address. Client IP address preservation is supported only in specific AWS Regions. See the GlobalAccelerator Developer Guide for a list. Default: true if available\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128\n\n:exampleMetadata: infused\n\nExample::\n\n    # listener: globalaccelerator.Listener\n    # instance: ec2.Instance\n\n\n    listener.add_endpoint_group("Group",\n        endpoints=[\n            ga_endpoints.InstanceEndpoint(instance,\n                weight=128,\n                preserve_client_ip=True\n            )\n        ]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['preserve_client_ip', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator_endpoints.InstanceEndpointProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator_endpoints.NetworkLoadBalancerEndpointProps
class NetworkLoadBalancerEndpointPropsDef(BaseStruct):
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128\n\n:exampleMetadata: infused\n\nExample::\n\n    # nlb: elbv2.NetworkLoadBalancer\n    # listener: globalaccelerator.Listener\n\n\n    listener.add_endpoint_group("Group",\n        endpoints=[\n            ga_endpoints.NetworkLoadBalancerEndpoint(nlb,\n                weight=128\n            )\n        ]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator_endpoints.NetworkLoadBalancerEndpointProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator_endpoints.CfnEipEndpointProps
class CfnEipEndpointPropsDef(BaseCfnProperty):
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128\n\n:exampleMetadata: infused\n\nExample::\n\n    # listener: globalaccelerator.Listener\n    # eip: ec2.CfnEIP\n\n\n    listener.add_endpoint_group("Group",\n        endpoints=[\n            ga_endpoints.CfnEipEndpoint(eip,\n                weight=128\n            )\n        ]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator_endpoints.CfnEipEndpointProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    ApplicationLoadBalancerEndpoint: typing.Optional[dict[str, ApplicationLoadBalancerEndpointDef]] = pydantic.Field(None)
    CfnEipEndpoint: typing.Optional[dict[str, CfnEipEndpointDef]] = pydantic.Field(None)
    InstanceEndpoint: typing.Optional[dict[str, InstanceEndpointDef]] = pydantic.Field(None)
    NetworkLoadBalancerEndpoint: typing.Optional[dict[str, NetworkLoadBalancerEndpointDef]] = pydantic.Field(None)
    ApplicationLoadBalancerEndpointOptions: typing.Optional[dict[str, ApplicationLoadBalancerEndpointOptionsDef]] = pydantic.Field(None)
    InstanceEndpointProps: typing.Optional[dict[str, InstanceEndpointPropsDef]] = pydantic.Field(None)
    NetworkLoadBalancerEndpointProps: typing.Optional[dict[str, NetworkLoadBalancerEndpointPropsDef]] = pydantic.Field(None)
    CfnEipEndpointProps: typing.Optional[dict[str, CfnEipEndpointPropsDef]] = pydantic.Field(None)
    ...
