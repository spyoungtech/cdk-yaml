from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_route53.RecordTarget
class RecordTargetDef(BaseClass):
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="correspond with the chosen record type (e.g. for 'A' Type, specify one or more IP addresses).")
    alias_target: typing.Optional[typing.Union[models.aws_route53_targets.ApiGatewayDef, models.aws_route53_targets.ApiGatewayDomainDef, models.aws_route53_targets.ApiGatewayv2DomainPropertiesDef, models.aws_route53_targets.BucketWebsiteTargetDef, models.aws_route53_targets.ClassicLoadBalancerTargetDef, models.aws_route53_targets.CloudFrontTargetDef, models.aws_route53_targets.ElasticBeanstalkEnvironmentEndpointTargetDef, models.aws_route53_targets.GlobalAcceleratorDomainTargetDef, models.aws_route53_targets.GlobalAcceleratorTargetDef, models.aws_route53_targets.InterfaceVpcEndpointTargetDef, models.aws_route53_targets.LoadBalancerTargetDef, models.aws_route53_targets.Route53RecordTargetDef, models.aws_route53_targets.UserPoolDomainTargetDef]] = pydantic.Field(None, description='alias for targets such as CloudFront distribution to route traffic to.')
    _init_params: typing.ClassVar[list[str]] = ['values', 'alias_target']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['from_alias', 'from_ip_addresses', 'from_values']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.RecordTarget'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[RecordTargetDefConfig] = pydantic.Field(None)


class RecordTargetDefConfig(pydantic.BaseModel):
    from_alias: typing.Optional[list[RecordTargetDefFromAliasParams]] = pydantic.Field(None, description='Use an alias as target.')
    from_ip_addresses: typing.Optional[list[RecordTargetDefFromIpAddressesParams]] = pydantic.Field(None, description='Use ip addresses as target.')
    from_values: typing.Optional[list[RecordTargetDefFromValuesParams]] = pydantic.Field(None, description='Use string values as target.')

class RecordTargetDefFromAliasParams(pydantic.BaseModel):
    alias_target: typing.Union[models.aws_route53_targets.ApiGatewayDef, models.aws_route53_targets.ApiGatewayDomainDef, models.aws_route53_targets.ApiGatewayv2DomainPropertiesDef, models.aws_route53_targets.BucketWebsiteTargetDef, models.aws_route53_targets.ClassicLoadBalancerTargetDef, models.aws_route53_targets.CloudFrontTargetDef, models.aws_route53_targets.ElasticBeanstalkEnvironmentEndpointTargetDef, models.aws_route53_targets.GlobalAcceleratorDomainTargetDef, models.aws_route53_targets.GlobalAcceleratorTargetDef, models.aws_route53_targets.InterfaceVpcEndpointTargetDef, models.aws_route53_targets.LoadBalancerTargetDef, models.aws_route53_targets.Route53RecordTargetDef, models.aws_route53_targets.UserPoolDomainTargetDef] = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_route53.RecordTargetDefConfig]] = pydantic.Field(None)
    ...

class RecordTargetDefFromIpAddressesParams(pydantic.BaseModel):
    ip_addresses: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_route53.RecordTargetDefConfig]] = pydantic.Field(None)
    ...

class RecordTargetDefFromValuesParams(pydantic.BaseModel):
    values: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_route53.RecordTargetDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_route53.AaaaRecord
class AaaaRecordDef(BaseConstruct):
    target: models.aws_route53.RecordTargetDef = pydantic.Field(..., description='The target.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['target', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.AaaaRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[AaaaRecordDefConfig] = pydantic.Field(None)


class AaaaRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class AaaaRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.ARecord
class ARecordDef(BaseConstruct):
    target: models.aws_route53.RecordTargetDef = pydantic.Field(..., description='The target.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['target', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.ARecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ARecordDefConfig] = pydantic.Field(None)


class ARecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class ARecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.CaaAmazonRecord
class CaaAmazonRecordDef(BaseConstruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CaaAmazonRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CaaAmazonRecordDefConfig] = pydantic.Field(None)


class CaaAmazonRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class CaaAmazonRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.CaaRecord
class CaaRecordDef(BaseConstruct):
    values: typing.Sequence[typing.Union[models.aws_route53.CaaRecordValueDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The values.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['values', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CaaRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CaaRecordDefConfig] = pydantic.Field(None)


class CaaRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class CaaRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.CnameRecord
class CnameRecordDef(BaseConstruct):
    domain_name: str = pydantic.Field(..., description='The domain name of the target that this record should point to.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['domain_name', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CnameRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CnameRecordDefConfig] = pydantic.Field(None)


class CnameRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class CnameRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.CrossAccountZoneDelegationRecord
class CrossAccountZoneDelegationRecordDef(BaseConstruct):
    delegated_zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The zone to be delegated.\n')
    delegation_role: typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef] = pydantic.Field(..., description='The delegation role in the parent account.\n')
    parent_hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The hosted zone id in the parent account. Default: - no zone id\n')
    parent_hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description='The hosted zone name in the parent account. Default: - no zone name\n')
    removal_policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='The removal policy to apply to the record set. Default: RemovalPolicy.DESTROY\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.days(2)')
    _init_params: typing.ClassVar[list[str]] = ['delegated_zone', 'delegation_role', 'parent_hosted_zone_id', 'parent_hosted_zone_name', 'removal_policy', 'ttl']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CrossAccountZoneDelegationRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.DsRecord
class DsRecordDef(BaseConstruct):
    values: typing.Sequence[str] = pydantic.Field(..., description='The DS values.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['values', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.DsRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[DsRecordDefConfig] = pydantic.Field(None)


class DsRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class DsRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.HostedZone
class HostedZoneDef(BaseConstruct):
    vpcs: typing.Optional[typing.Sequence[typing.Union[models.aws_ec2.VpcDef]]] = pydantic.Field(None, description='A VPC that you want to associate with this hosted zone. When you specify this property, a private hosted zone will be created. You can associate additional VPCs to this private zone using ``addVpc(vpc)``. Default: public (no VPCs associated)\n')
    zone_name: str = pydantic.Field(..., description='The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name.\n')
    add_trailing_dot: typing.Optional[bool] = pydantic.Field(None, description='Whether to add a trailing dot to the zone name. Default: true\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments that you want to include about the hosted zone. Default: none\n')
    query_logs_log_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the log group that you want Amazon Route 53 to send query logs to. Default: disabled')
    _init_params: typing.ClassVar[list[str]] = ['vpcs', 'zone_name', 'add_trailing_dot', 'comment', 'query_logs_log_group_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_vpc', 'apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_hosted_zone_attributes', 'from_hosted_zone_id', 'from_lookup']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.HostedZone'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_hosted_zone_attributes', 'from_hosted_zone_id', 'from_lookup']
    ...


    from_hosted_zone_attributes: typing.Optional[HostedZoneDefFromHostedZoneAttributesParams] = pydantic.Field(None, description='Imports a hosted zone from another stack.\nUse when both hosted zone ID and hosted zone name are known.')
    from_hosted_zone_id: typing.Optional[HostedZoneDefFromHostedZoneIdParams] = pydantic.Field(None, description='Import a Route 53 hosted zone defined either outside the CDK, or in a different CDK stack.\nUse when hosted zone ID is known. If a HostedZone is imported with this method the zoneName cannot be referenced.\nIf the zoneName is needed then the HostedZone should be imported with ``fromHostedZoneAttributes()`` or ``fromLookup()``')
    from_lookup: typing.Optional[HostedZoneDefFromLookupParams] = pydantic.Field(None, description='Lookup a hosted zone in the current account/region based on query parameters.\nRequires environment, you must specify env for the stack.\n\nUse to easily query hosted zones.')
    resource_config: typing.Optional[HostedZoneDefConfig] = pydantic.Field(None)


class HostedZoneDefConfig(pydantic.BaseModel):
    add_vpc: typing.Optional[list[HostedZoneDefAddVpcParams]] = pydantic.Field(None, description='Add another VPC to this private hosted zone.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class HostedZoneDefAddVpcParams(pydantic.BaseModel):
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='the other VPC to add.')
    ...

class HostedZoneDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class HostedZoneDefFromHostedZoneAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='the parent Construct for this Construct.\n')
    id: str = pydantic.Field(..., description='the logical name of this Construct.\n')
    hosted_zone_id: str = pydantic.Field(..., description='Identifier of the hosted zone.\n')
    zone_name: str = pydantic.Field(..., description='Name of the hosted zone.')
    ...

class HostedZoneDefFromHostedZoneIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='the parent Construct for this Construct.\n')
    id: str = pydantic.Field(..., description='the logical name of this Construct.\n')
    hosted_zone_id: str = pydantic.Field(..., description='the ID of the hosted zone to import.')
    ...

class HostedZoneDefFromLookupParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    domain_name: str = pydantic.Field(..., description='The zone domain e.g. example.com.\n')
    private_zone: typing.Optional[bool] = pydantic.Field(None, description='Whether the zone that is being looked up is a private hosted zone. Default: false\n')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='Specifies the ID of the VPC associated with a private hosted zone. If a VPC ID is provided and privateZone is false, no results will be returned and an error will be raised Default: - No VPC ID\n\n:see: https://docs.aws.amazon.com/cdk/latest/guide/environments.html\n')
    ...


#  autogenerated from aws_cdk.aws_route53.MxRecord
class MxRecordDef(BaseConstruct):
    values: typing.Sequence[typing.Union[models.aws_route53.MxRecordValueDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The values.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['values', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.MxRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[MxRecordDefConfig] = pydantic.Field(None)


class MxRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class MxRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.NsRecord
class NsRecordDef(BaseConstruct):
    values: typing.Sequence[str] = pydantic.Field(..., description='The NS values.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['values', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.NsRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[NsRecordDefConfig] = pydantic.Field(None)


class NsRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class NsRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.PrivateHostedZone
class PrivateHostedZoneDef(BaseConstruct):
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='A VPC that you want to associate with this hosted zone. Private hosted zones must be associated with at least one VPC. You can associated additional VPCs using ``addVpc(vpc)``.\n')
    zone_name: str = pydantic.Field(..., description='The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name.\n')
    add_trailing_dot: typing.Optional[bool] = pydantic.Field(None, description='Whether to add a trailing dot to the zone name. Default: true\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments that you want to include about the hosted zone. Default: none\n')
    query_logs_log_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the log group that you want Amazon Route 53 to send query logs to. Default: disabled')
    _init_params: typing.ClassVar[list[str]] = ['vpc', 'zone_name', 'add_trailing_dot', 'comment', 'query_logs_log_group_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_vpc', 'apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_hosted_zone_attributes', 'from_hosted_zone_id', 'from_lookup', 'from_private_hosted_zone_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.PrivateHostedZone'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_hosted_zone_attributes', 'from_hosted_zone_id', 'from_lookup', 'from_private_hosted_zone_id']
    ...


    from_hosted_zone_attributes: typing.Optional[PrivateHostedZoneDefFromHostedZoneAttributesParams] = pydantic.Field(None, description='Imports a hosted zone from another stack.\nUse when both hosted zone ID and hosted zone name are known.')
    from_hosted_zone_id: typing.Optional[PrivateHostedZoneDefFromHostedZoneIdParams] = pydantic.Field(None, description='Import a Route 53 hosted zone defined either outside the CDK, or in a different CDK stack.\nUse when hosted zone ID is known. If a HostedZone is imported with this method the zoneName cannot be referenced.\nIf the zoneName is needed then the HostedZone should be imported with ``fromHostedZoneAttributes()`` or ``fromLookup()``')
    from_lookup: typing.Optional[PrivateHostedZoneDefFromLookupParams] = pydantic.Field(None, description='Lookup a hosted zone in the current account/region based on query parameters.\nRequires environment, you must specify env for the stack.\n\nUse to easily query hosted zones.')
    from_private_hosted_zone_id: typing.Optional[PrivateHostedZoneDefFromPrivateHostedZoneIdParams] = pydantic.Field(None, description='Import a Route 53 private hosted zone defined either outside the CDK, or in a different CDK stack.\nUse when hosted zone ID is known. If a HostedZone is imported with this method the zoneName cannot be referenced.\nIf the zoneName is needed then you cannot import a PrivateHostedZone.')
    resource_config: typing.Optional[PrivateHostedZoneDefConfig] = pydantic.Field(None)


class PrivateHostedZoneDefConfig(pydantic.BaseModel):
    add_vpc: typing.Optional[list[PrivateHostedZoneDefAddVpcParams]] = pydantic.Field(None, description='Add another VPC to this private hosted zone.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class PrivateHostedZoneDefAddVpcParams(pydantic.BaseModel):
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='the other VPC to add.')
    ...

class PrivateHostedZoneDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class PrivateHostedZoneDefFromHostedZoneAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='the parent Construct for this Construct.\n')
    id: str = pydantic.Field(..., description='the logical name of this Construct.\n')
    hosted_zone_id: str = pydantic.Field(..., description='Identifier of the hosted zone.\n')
    zone_name: str = pydantic.Field(..., description='Name of the hosted zone.')
    ...

class PrivateHostedZoneDefFromHostedZoneIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='the parent Construct for this Construct.\n')
    id: str = pydantic.Field(..., description='the logical name of this Construct.\n')
    hosted_zone_id: str = pydantic.Field(..., description='the ID of the hosted zone to import.')
    ...

class PrivateHostedZoneDefFromLookupParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    domain_name: str = pydantic.Field(..., description='The zone domain e.g. example.com.\n')
    private_zone: typing.Optional[bool] = pydantic.Field(None, description='Whether the zone that is being looked up is a private hosted zone. Default: false\n')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='Specifies the ID of the VPC associated with a private hosted zone. If a VPC ID is provided and privateZone is false, no results will be returned and an error will be raised Default: - No VPC ID\n\n:see: https://docs.aws.amazon.com/cdk/latest/guide/environments.html\n')
    ...

class PrivateHostedZoneDefFromPrivateHostedZoneIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='the parent Construct for this Construct.\n')
    id: str = pydantic.Field(..., description='the logical name of this Construct.\n')
    private_hosted_zone_id: str = pydantic.Field(..., description='the ID of the private hosted zone to import.')
    ...


#  autogenerated from aws_cdk.aws_route53.PublicHostedZone
class PublicHostedZoneDef(BaseConstruct):
    caa_amazon: typing.Optional[bool] = pydantic.Field(None, description='Whether to create a CAA record to restrict certificate authorities allowed to issue certificates for this domain to Amazon only. Default: false\n')
    cross_account_zone_delegation_principal: typing.Optional[typing.Union[models.aws_eks.ServiceAccountDef, models.aws_iam.UnknownPrincipalDef]] = pydantic.Field(None, description="(deprecated) A principal which is trusted to assume a role for zone delegation. If supplied, this will create a Role in the same account as the Hosted Zone, which can be assumed by the ``CrossAccountZoneDelegationRecord`` to create a delegation record to a zone in a different account. Be sure to indicate the account(s) that you trust to create delegation records, using either ``iam.AccountPrincipal`` or ``iam.OrganizationPrincipal``. If you are planning to use ``iam.ServicePrincipal``s here, be sure to include region-specific service principals for every opt-in region you are going to be delegating to; or don't use this feature and create separate roles with appropriate permissions for every opt-in region instead. Default: - No delegation configuration\n")
    cross_account_zone_delegation_role_name: typing.Optional[str] = pydantic.Field(None, description='(deprecated) The name of the role created for cross account delegation. Default: - A role name is generated automatically\n')
    zone_name: str = pydantic.Field(..., description='The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name.\n')
    add_trailing_dot: typing.Optional[bool] = pydantic.Field(None, description='Whether to add a trailing dot to the zone name. Default: true\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments that you want to include about the hosted zone. Default: none\n')
    query_logs_log_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the log group that you want Amazon Route 53 to send query logs to. Default: disabled')
    _init_params: typing.ClassVar[list[str]] = ['caa_amazon', 'cross_account_zone_delegation_principal', 'cross_account_zone_delegation_role_name', 'zone_name', 'add_trailing_dot', 'comment', 'query_logs_log_group_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_delegation', 'add_vpc', 'apply_removal_policy', 'grant_delegation']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_hosted_zone_attributes', 'from_hosted_zone_id', 'from_lookup', 'from_public_hosted_zone_attributes', 'from_public_hosted_zone_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.PublicHostedZone'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_hosted_zone_attributes', 'from_hosted_zone_id', 'from_lookup', 'from_public_hosted_zone_attributes', 'from_public_hosted_zone_id']
    ...


    from_hosted_zone_attributes: typing.Optional[PublicHostedZoneDefFromHostedZoneAttributesParams] = pydantic.Field(None, description='Imports a hosted zone from another stack.\nUse when both hosted zone ID and hosted zone name are known.')
    from_hosted_zone_id: typing.Optional[PublicHostedZoneDefFromHostedZoneIdParams] = pydantic.Field(None, description='Import a Route 53 hosted zone defined either outside the CDK, or in a different CDK stack.\nUse when hosted zone ID is known. If a HostedZone is imported with this method the zoneName cannot be referenced.\nIf the zoneName is needed then the HostedZone should be imported with ``fromHostedZoneAttributes()`` or ``fromLookup()``')
    from_lookup: typing.Optional[PublicHostedZoneDefFromLookupParams] = pydantic.Field(None, description='Lookup a hosted zone in the current account/region based on query parameters.\nRequires environment, you must specify env for the stack.\n\nUse to easily query hosted zones.')
    from_public_hosted_zone_attributes: typing.Optional[PublicHostedZoneDefFromPublicHostedZoneAttributesParams] = pydantic.Field(None, description='Imports a public hosted zone from another stack.\nUse when both hosted zone ID and hosted zone name are known.')
    from_public_hosted_zone_id: typing.Optional[PublicHostedZoneDefFromPublicHostedZoneIdParams] = pydantic.Field(None, description='Import a Route 53 public hosted zone defined either outside the CDK, or in a different CDK stack.\nUse when hosted zone ID is known. If a PublicHostedZone is imported with this method the zoneName cannot be referenced.\nIf the zoneName is needed then the PublicHostedZone should be imported with ``fromPublicHostedZoneAttributes()``.')
    resource_config: typing.Optional[PublicHostedZoneDefConfig] = pydantic.Field(None)


class PublicHostedZoneDefConfig(pydantic.BaseModel):
    add_delegation: typing.Optional[list[PublicHostedZoneDefAddDelegationParams]] = pydantic.Field(None, description='Adds a delegation from this zone to a designated zone.')
    add_vpc: typing.Optional[list[PublicHostedZoneDefAddVpcParams]] = pydantic.Field(None, description='Add another VPC to this private hosted zone.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    grant_delegation: typing.Optional[list[PublicHostedZoneDefGrantDelegationParams]] = pydantic.Field(None, description='Grant permissions to add delegation records to this zone.')

class PublicHostedZoneDefAddDelegationParams(pydantic.BaseModel):
    delegate: typing.Union[models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='the zone being delegated to.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the DNS record created to incorporate the delegation. Default: none\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The TTL (Time To Live) of the DNS delegation record in DNS caches. Default: 172800')
    ...

class PublicHostedZoneDefAddVpcParams(pydantic.BaseModel):
    _vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='-')
    ...

class PublicHostedZoneDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class PublicHostedZoneDefFromHostedZoneAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='the parent Construct for this Construct.\n')
    id: str = pydantic.Field(..., description='the logical name of this Construct.\n')
    hosted_zone_id: str = pydantic.Field(..., description='Identifier of the hosted zone.\n')
    zone_name: str = pydantic.Field(..., description='Name of the hosted zone.')
    ...

class PublicHostedZoneDefFromHostedZoneIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='the parent Construct for this Construct.\n')
    id: str = pydantic.Field(..., description='the logical name of this Construct.\n')
    hosted_zone_id: str = pydantic.Field(..., description='the ID of the hosted zone to import.')
    ...

class PublicHostedZoneDefFromLookupParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    domain_name: str = pydantic.Field(..., description='The zone domain e.g. example.com.\n')
    private_zone: typing.Optional[bool] = pydantic.Field(None, description='Whether the zone that is being looked up is a private hosted zone. Default: false\n')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='Specifies the ID of the VPC associated with a private hosted zone. If a VPC ID is provided and privateZone is false, no results will be returned and an error will be raised Default: - No VPC ID\n\n:see: https://docs.aws.amazon.com/cdk/latest/guide/environments.html\n')
    ...

class PublicHostedZoneDefFromPublicHostedZoneAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='the parent Construct for this Construct.\n')
    id: str = pydantic.Field(..., description='the logical name of this Construct.\n')
    hosted_zone_id: str = pydantic.Field(..., description='Identifier of the hosted zone.\n')
    zone_name: str = pydantic.Field(..., description='Name of the hosted zone.')
    ...

class PublicHostedZoneDefFromPublicHostedZoneIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='the parent Construct for this Construct.\n')
    id: str = pydantic.Field(..., description='the logical name of this Construct.\n')
    public_hosted_zone_id: str = pydantic.Field(..., description='the ID of the public hosted zone to import.')
    ...

class PublicHostedZoneDefGrantDelegationParams(pydantic.BaseModel):
    grantee: typing.Union[models.aws_appsync.BackedDataSourceDef, models.aws_appsync.DynamoDbDataSourceDef, models.aws_appsync.ElasticsearchDataSourceDef, models.aws_appsync.EventBridgeDataSourceDef, models.aws_appsync.HttpDataSourceDef, models.aws_appsync.LambdaDataSourceDef, models.aws_appsync.OpenSearchDataSourceDef, models.aws_appsync.RdsDataSourceDef, models.aws_backup.BackupSelectionDef, models.aws_codebuild.UntrustedCodeBoundaryPolicyDef, models.aws_ec2.LaunchTemplateDef, models.aws_iam.ManagedPolicyDef, models.aws_iam.PolicyDef, models.aws_stepfunctions_tasks.EmrContainersStartJobRunDef, models.aws_stepfunctions_tasks.SageMakerCreateModelDef, models.aws_stepfunctions_tasks.SageMakerCreateTrainingJobDef, models.custom_resources.AwsCustomResourceDef] = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_iam.GrantDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_route53.RecordSet
class RecordSetDef(BaseConstruct):
    record_type: aws_cdk.aws_route53.RecordType = pydantic.Field(..., description='The record type.\n')
    target: models.aws_route53.RecordTargetDef = pydantic.Field(..., description='The target for this record, either ``RecordTarget.fromValues()`` or ``RecordTarget.fromAlias()``.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['record_type', 'target', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.RecordSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[RecordSetDefConfig] = pydantic.Field(None)


class RecordSetDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class RecordSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.SrvRecord
class SrvRecordDef(BaseConstruct):
    values: typing.Sequence[typing.Union[models.aws_route53.SrvRecordValueDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The values.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['values', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.SrvRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[SrvRecordDefConfig] = pydantic.Field(None)


class SrvRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class SrvRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.TxtRecord
class TxtRecordDef(BaseConstruct):
    values: typing.Sequence[str] = pydantic.Field(..., description='The text values.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['values', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.TxtRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[TxtRecordDefConfig] = pydantic.Field(None)


class TxtRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class TxtRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.VpcEndpointServiceDomainName
class VpcEndpointServiceDomainNameDef(BaseConstruct):
    domain_name: str = pydantic.Field(..., description='The domain name to use. This domain name must be owned by this account (registered through Route53), or delegated to this account. Domain ownership will be verified by AWS before private DNS can be used.\n')
    endpoint_service: typing.Union[models.aws_ec2.VpcEndpointServiceDef] = pydantic.Field(..., description='The VPC Endpoint Service to configure Private DNS for.\n')
    public_hosted_zone: typing.Union[models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The public hosted zone to use for the domain.')
    _init_params: typing.ClassVar[list[str]] = ['domain_name', 'endpoint_service', 'public_hosted_zone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.VpcEndpointServiceDomainName'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.ZoneDelegationRecord
class ZoneDelegationRecordDef(BaseConstruct):
    name_servers: typing.Sequence[str] = pydantic.Field(..., description='The name servers to report in the delegation records.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)')
    _init_params: typing.ClassVar[list[str]] = ['name_servers', 'zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.ZoneDelegationRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ZoneDelegationRecordDefConfig] = pydantic.Field(None)


class ZoneDelegationRecordDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class ZoneDelegationRecordDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_route53.AaaaRecordProps
class AaaaRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    target: models.aws_route53.RecordTargetDef = pydantic.Field(..., description='The target.\n\n:exampleMetadata: infused\n\nExample::\n\n    import aws_cdk.aws_cloudfront as cloudfront\n\n    # my_zone: route53.HostedZone\n    # distribution: cloudfront.CloudFrontWebDistribution\n\n    route53.AaaaRecord(self, "Alias",\n        zone=my_zone,\n        target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'target']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.AaaaRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[AaaaRecordPropsDefConfig] = pydantic.Field(None)


class AaaaRecordPropsDefConfig(pydantic.BaseModel):
    target_config: typing.Optional[models.aws_route53.RecordTargetDefConfig] = pydantic.Field(None)
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.AliasRecordTargetConfig
class AliasRecordTargetConfigDef(BaseStruct):
    dns_name: str = pydantic.Field(..., description='DNS name of the target.\n')
    hosted_zone_id: str = pydantic.Field(..., description='Hosted zone ID of the target.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    alias_record_target_config = route53.AliasRecordTargetConfig(\n        dns_name="dnsName",\n        hosted_zone_id="hostedZoneId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dns_name', 'hosted_zone_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.AliasRecordTargetConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.ARecordProps
class ARecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    target: models.aws_route53.RecordTargetDef = pydantic.Field(..., description='The target.\n\n:exampleMetadata: infused\n\nExample::\n\n    import aws_cdk.aws_apigateway as apigw\n\n    # zone: route53.HostedZone\n    # rest_api: apigw.LambdaRestApi\n\n\n    route53.ARecord(self, "AliasRecord",\n        zone=zone,\n        target=route53.RecordTarget.from_alias(targets.ApiGateway(rest_api))\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'target']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.ARecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ARecordPropsDefConfig] = pydantic.Field(None)


class ARecordPropsDefConfig(pydantic.BaseModel):
    target_config: typing.Optional[models.aws_route53.RecordTargetDefConfig] = pydantic.Field(None)
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.CaaAmazonRecordProps
class CaaAmazonRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_route53 as route53\n\n    # hosted_zone: route53.HostedZone\n\n    caa_amazon_record_props = route53.CaaAmazonRecordProps(\n        zone=hosted_zone,\n\n        # the properties below are optional\n        comment="comment",\n        delete_existing=False,\n        record_name="recordName",\n        ttl=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CaaAmazonRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CaaAmazonRecordPropsDefConfig] = pydantic.Field(None)


class CaaAmazonRecordPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.CaaRecordProps
class CaaRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    values: typing.Sequence[typing.Union[models.aws_route53.CaaRecordValueDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The values.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_route53 as route53\n\n    # hosted_zone: route53.HostedZone\n\n    caa_record_props = route53.CaaRecordProps(\n        values=[route53.CaaRecordValue(\n            flag=123,\n            tag=route53.CaaTag.ISSUE,\n            value="value"\n        )],\n        zone=hosted_zone,\n\n        # the properties below are optional\n        comment="comment",\n        delete_existing=False,\n        record_name="recordName",\n        ttl=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CaaRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CaaRecordPropsDefConfig] = pydantic.Field(None)


class CaaRecordPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.CaaRecordValue
class CaaRecordValueDef(BaseStruct):
    flag: typing.Union[int, float] = pydantic.Field(..., description='The flag.\n')
    tag: aws_cdk.aws_route53.CaaTag = pydantic.Field(..., description='The tag.\n')
    value: str = pydantic.Field(..., description='The value associated with the tag.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    caa_record_value = route53.CaaRecordValue(\n        flag=123,\n        tag=route53.CaaTag.ISSUE,\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['flag', 'tag', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CaaRecordValue'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnCidrCollection.LocationProperty
class CfnCidrCollection_LocationPropertyDef(BaseStruct):
    cidr_list: typing.Sequence[str] = pydantic.Field(..., description='List of CIDR blocks.\n')
    location_name: str = pydantic.Field(..., description='The CIDR collection location name.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-cidrcollection-location.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    location_property = route53.CfnCidrCollection.LocationProperty(\n        cidr_list=["cidrList"],\n        location_name="locationName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cidr_list', 'location_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnCidrCollection.LocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnHealthCheck.AlarmIdentifierProperty
class CfnHealthCheck_AlarmIdentifierPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description="The name of the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy. .. epigraph:: Route 53 supports CloudWatch alarms with the following features: - Standard-resolution metrics. High-resolution metrics aren't supported. For more information, see `High-Resolution Metrics <https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/publishingMetrics.html#high-resolution-metrics>`_ in the *Amazon CloudWatch User Guide* . - Statistics: Average, Minimum, Maximum, Sum, and SampleCount. Extended statistics aren't supported.\n")
    region: str = pydantic.Field(..., description='For the CloudWatch alarm that you want Route 53 health checkers to use to determine whether this health check is healthy, the region that the alarm was created in. For the current list of CloudWatch regions, see `Amazon CloudWatch endpoints and quotas <https://docs.aws.amazon.com/general/latest/gr/cw_region.html>`_ in the *Amazon Web Services General Reference* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-alarmidentifier.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    alarm_identifier_property = route53.CfnHealthCheck.AlarmIdentifierProperty(\n        name="name",\n        region="region"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHealthCheck.AlarmIdentifierProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnHealthCheck.HealthCheckConfigProperty
class CfnHealthCheck_HealthCheckConfigPropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description="The type of health check that you want to create, which indicates how Amazon Route 53 determines whether an endpoint is healthy. .. epigraph:: You can't change the value of ``Type`` after you create a health check. You can create the following types of health checks: - *HTTP* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400. - *HTTPS* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400. .. epigraph:: If you specify ``HTTPS`` for the value of ``Type`` , the endpoint must support TLS v1.0 or later. - *HTTP_STR_MATCH* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and searches the first 5,120 bytes of the response body for the string that you specify in ``SearchString`` . - *HTTPS_STR_MATCH* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an ``HTTPS`` request and searches the first 5,120 bytes of the response body for the string that you specify in ``SearchString`` . - *TCP* : Route 53 tries to establish a TCP connection. - *CLOUDWATCH_METRIC* : The health check is associated with a CloudWatch alarm. If the state of the alarm is ``OK`` , the health check is considered healthy. If the state is ``ALARM`` , the health check is considered unhealthy. If CloudWatch doesn't have sufficient data to determine whether the state is ``OK`` or ``ALARM`` , the health check status depends on the setting for ``InsufficientDataHealthStatus`` : ``Healthy`` , ``Unhealthy`` , or ``LastKnownStatus`` . - *CALCULATED* : For health checks that monitor the status of other health checks, Route 53 adds up the number of health checks that Route 53 health checkers consider to be healthy and compares that number with the value of ``HealthThreshold`` . - *RECOVERY_CONTROL* : The health check is assocated with a Route53 Application Recovery Controller routing control. If the routing control state is ``ON`` , the health check is considered healthy. If the state is ``OFF`` , the health check is considered unhealthy. For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`_ in the *Amazon Route 53 Developer Guide* .\n")
    alarm_identifier: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHealthCheck_AlarmIdentifierPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether the specified health check is healthy.\n')
    child_health_checks: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='(CALCULATED Health Checks Only) A complex type that contains one ``ChildHealthCheck`` element for each health check that you want to associate with a ``CALCULATED`` health check.\n')
    enable_sni: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="Specify whether you want Amazon Route 53 to send the value of ``FullyQualifiedDomainName`` to the endpoint in the ``client_hello`` message during TLS negotiation. This allows the endpoint to respond to ``HTTPS`` health check requests with the applicable SSL/TLS certificate. Some endpoints require that ``HTTPS`` requests include the host name in the ``client_hello`` message. If you don't enable SNI, the status of the health check will be ``SSL alert handshake_failure`` . A health check can also have that status for other reasons. If SNI is enabled and you're still getting the error, check the SSL/TLS configuration on your endpoint and confirm that your certificate is valid. The SSL/TLS certificate on your endpoint includes a domain name in the ``Common Name`` field and possibly several more in the ``Subject Alternative Names`` field. One of the domain names in the certificate should match the value that you specify for ``FullyQualifiedDomainName`` . If the endpoint responds to the ``client_hello`` message with a certificate that does not include the domain name that you specified in ``FullyQualifiedDomainName`` , a health checker will retry the handshake. In the second attempt, the health checker will omit ``FullyQualifiedDomainName`` from the ``client_hello`` message.\n")
    failure_threshold: typing.Union[int, float, None] = pydantic.Field(None, description="The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa. For more information, see `How Amazon Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`_ in the *Amazon Route 53 Developer Guide* . If you don't specify a value for ``FailureThreshold`` , the default value is three health checks.\n")
    fully_qualified_domain_name: typing.Optional[str] = pydantic.Field(None, description='Amazon Route 53 behavior depends on whether you specify a value for ``IPAddress`` . *If you specify a value for* ``IPAddress`` : Amazon Route 53 sends health check requests to the specified IPv4 or IPv6 address and passes the value of ``FullyQualifiedDomainName`` in the ``Host`` header for all health checks except TCP health checks. This is typically the fully qualified DNS name of the endpoint on which you want Route 53 to perform health checks. When Route 53 checks the health of an endpoint, here is how it constructs the ``Host`` header: - If you specify a value of ``80`` for ``Port`` and ``HTTP`` or ``HTTP_STR_MATCH`` for ``Type`` , Route 53 passes the value of ``FullyQualifiedDomainName`` to the endpoint in the Host header. - If you specify a value of ``443`` for ``Port`` and ``HTTPS`` or ``HTTPS_STR_MATCH`` for ``Type`` , Route 53 passes the value of ``FullyQualifiedDomainName`` to the endpoint in the ``Host`` header. - If you specify another value for ``Port`` and any value except ``TCP`` for ``Type`` , Route 53 passes ``FullyQualifiedDomainName:Port`` to the endpoint in the ``Host`` header. If you don\'t specify a value for ``FullyQualifiedDomainName`` , Route 53 substitutes the value of ``IPAddress`` in the ``Host`` header in each of the preceding cases. *If you don\'t specify a value for ``IPAddress``* : Route 53 sends a DNS request to the domain that you specify for ``FullyQualifiedDomainName`` at the interval that you specify for ``RequestInterval`` . Using an IPv4 address that DNS returns, Route 53 then checks the health of the endpoint. .. epigraph:: If you don\'t specify a value for ``IPAddress`` , Route 53 uses only IPv4 to send health checks to the endpoint. If there\'s no record with a type of A for the name that you specify for ``FullyQualifiedDomainName`` , the health check fails with a "DNS resolution failed" error. If you want to check the health of multiple records that have the same name and type, such as multiple weighted records, and if you choose to specify the endpoint only by ``FullyQualifiedDomainName`` , we recommend that you create a separate health check for each endpoint. For example, create a health check for each HTTP server that is serving content for www.example.com. For the value of ``FullyQualifiedDomainName`` , specify the domain name of the server (such as us-east-2-www.example.com), not the name of the records (www.example.com). .. epigraph:: In this configuration, if you create a health check for which the value of ``FullyQualifiedDomainName`` matches the name of the records and you then associate the health check with those records, health check results will be unpredictable. In addition, if the value that you specify for ``Type`` is ``HTTP`` , ``HTTPS`` , ``HTTP_STR_MATCH`` , or ``HTTPS_STR_MATCH`` , Route 53 passes the value of ``FullyQualifiedDomainName`` in the ``Host`` header, as it does when you specify a value for ``IPAddress`` . If the value of ``Type`` is ``TCP`` , Route 53 doesn\'t pass a ``Host`` header.\n')
    health_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='The number of child health checks that are associated with a ``CALCULATED`` health check that Amazon Route 53 must consider healthy for the ``CALCULATED`` health check to be considered healthy. To specify the child health checks that you want to associate with a ``CALCULATED`` health check, use the `ChildHealthChecks <https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-ChildHealthChecks>`_ element. Note the following: - If you specify a number greater than the number of child health checks, Route 53 always considers this health check to be unhealthy. - If you specify ``0`` , Route 53 always considers this health check to be healthy.\n')
    insufficient_data_health_status: typing.Optional[str] = pydantic.Field(None, description='When CloudWatch has insufficient data about the metric to determine the alarm state, the status that you want Amazon Route 53 to assign to the health check: - ``Healthy`` : Route 53 considers the health check to be healthy. - ``Unhealthy`` : Route 53 considers the health check to be unhealthy. - ``LastKnownStatus`` : Route 53 uses the status of the health check from the last time that CloudWatch had sufficient data to determine the alarm state. For new health checks that have no last known status, the default status for the health check is healthy.\n')
    inverted: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specify whether you want Amazon Route 53 to invert the status of a health check, for example, to consider a health check unhealthy when it otherwise would be considered healthy.\n')
    ip_address: typing.Optional[str] = pydantic.Field(None, description="The IPv4 or IPv6 IP address of the endpoint that you want Amazon Route 53 to perform health checks on. If you don't specify a value for ``IPAddress`` , Route 53 sends a DNS request to resolve the domain name that you specify in ``FullyQualifiedDomainName`` at the interval that you specify in ``RequestInterval`` . Using an IP address returned by DNS, Route 53 then checks the health of the endpoint. Use one of the following formats for the value of ``IPAddress`` : - *IPv4 address* : four values between 0 and 255, separated by periods (.), for example, ``192.0.2.44`` . - *IPv6 address* : eight groups of four hexadecimal values, separated by colons (:), for example, ``2001:0db8:85a3:0000:0000:abcd:0001:2345`` . You can also shorten IPv6 addresses as described in RFC 5952, for example, ``2001:db8:85a3::abcd:1:2345`` . If the endpoint is an EC2 instance, we recommend that you create an Elastic IP address, associate it with your EC2 instance, and specify the Elastic IP address for ``IPAddress`` . This ensures that the IP address of your instance will never change. For more information, see `FullyQualifiedDomainName <https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-FullyQualifiedDomainName>`_ . Constraints: Route 53 can't check the health of endpoints for which the IP address is in local, private, non-routable, or multicast ranges. For more information about IP addresses for which you can't create health checks, see the following documents: - `RFC 5735, Special Use IPv4 Addresses <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc5735>`_ - `RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6598>`_ - `RFC 5156, Special-Use IPv6 Addresses <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc5156>`_ When the value of ``Type`` is ``CALCULATED`` or ``CLOUDWATCH_METRIC`` , omit ``IPAddress`` .\n")
    measure_latency: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="Specify whether you want Amazon Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint, and to display CloudWatch latency graphs on the *Health Checks* page in the Route 53 console. .. epigraph:: You can't change the value of ``MeasureLatency`` after you create a health check.\n")
    port: typing.Union[int, float, None] = pydantic.Field(None, description="The port on the endpoint that you want Amazon Route 53 to perform health checks on. .. epigraph:: Don't specify a value for ``Port`` when you specify a value for `Type <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-type>`_ of ``CLOUDWATCH_METRIC`` or ``CALCULATED`` .\n")
    regions: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A complex type that contains one ``Region`` element for each region from which you want Amazon Route 53 health checkers to check the specified endpoint. If you don't specify any regions, Route 53 health checkers automatically performs checks from all of the regions that are listed under *Valid Values* . If you update a health check to remove a region that has been performing health checks, Route 53 will briefly continue to perform checks from that region to ensure that some health checkers are always checking the endpoint (for example, if you replace three regions with four different regions).\n")
    request_interval: typing.Union[int, float, None] = pydantic.Field(None, description="The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health check request. Each Route 53 health checker makes requests at this interval. .. epigraph:: You can't change the value of ``RequestInterval`` after you create a health check. If you don't specify a value for ``RequestInterval`` , the default value is ``30`` seconds.\n")
    resource_path: typing.Optional[str] = pydantic.Field(None, description='The path, if any, that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example, the file /docs/route53-health-check.html. You can also include query string parameters, for example, ``/welcome.html?language=jp&login=y`` .\n')
    routing_control_arn: typing.Optional[str] = pydantic.Field(None, description='``CfnHealthCheck.HealthCheckConfigProperty.RoutingControlArn``.\n')
    search_string: typing.Optional[str] = pydantic.Field(None, description='If the value of Type is ``HTTP_STR_MATCH`` or ``HTTPS_STR_MATCH`` , the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the response body, Route 53 considers the resource healthy. Route 53 considers case when searching for ``SearchString`` in the response body.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    health_check_config_property = route53.CfnHealthCheck.HealthCheckConfigProperty(\n        type="type",\n\n        # the properties below are optional\n        alarm_identifier=route53.CfnHealthCheck.AlarmIdentifierProperty(\n            name="name",\n            region="region"\n        ),\n        child_health_checks=["childHealthChecks"],\n        enable_sni=False,\n        failure_threshold=123,\n        fully_qualified_domain_name="fullyQualifiedDomainName",\n        health_threshold=123,\n        insufficient_data_health_status="insufficientDataHealthStatus",\n        inverted=False,\n        ip_address="ipAddress",\n        measure_latency=False,\n        port=123,\n        regions=["regions"],\n        request_interval=123,\n        resource_path="resourcePath",\n        routing_control_arn="routingControlArn",\n        search_string="searchString"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'alarm_identifier', 'child_health_checks', 'enable_sni', 'failure_threshold', 'fully_qualified_domain_name', 'health_threshold', 'insufficient_data_health_status', 'inverted', 'ip_address', 'measure_latency', 'port', 'regions', 'request_interval', 'resource_path', 'routing_control_arn', 'search_string']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHealthCheck.HealthCheckConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnHealthCheck.HealthCheckTagProperty
class CfnHealthCheck_HealthCheckTagPropertyDef(BaseStruct):
    key: str = pydantic.Field(..., description="The value of ``Key`` depends on the operation that you want to perform:. - *Add a tag to a health check or hosted zone* : ``Key`` is the name that you want to give the new tag. - *Edit a tag* : ``Key`` is the name of the tag that you want to change the ``Value`` for. - *Delete a key* : ``Key`` is the name of the tag you want to remove. - *Give a name to a health check* : Edit the default ``Name`` tag. In the Amazon Route 53 console, the list of your health checks includes a *Name* column that lets you see the name that you've given to each health check.\n")
    value: str = pydantic.Field(..., description='The value of ``Value`` depends on the operation that you want to perform:. - *Add a tag to a health check or hosted zone* : ``Value`` is the value that you want to give the new tag. - *Edit a tag* : ``Value`` is the new value that you want to assign the tag.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthchecktag.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    health_check_tag_property = route53.CfnHealthCheck.HealthCheckTagProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHealthCheck.HealthCheckTagProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnHostedZone.HostedZoneConfigProperty
class CfnHostedZone_HostedZoneConfigPropertyDef(BaseStruct):
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments that you want to include about the hosted zone.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-hostedzone-hostedzoneconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    hosted_zone_config_property = route53.CfnHostedZone.HostedZoneConfigProperty(\n        comment="comment"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHostedZone.HostedZoneConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnHostedZone.HostedZoneTagProperty
class CfnHostedZone_HostedZoneTagPropertyDef(BaseStruct):
    key: str = pydantic.Field(..., description="The value of ``Key`` depends on the operation that you want to perform:. - *Add a tag to a health check or hosted zone* : ``Key`` is the name that you want to give the new tag. - *Edit a tag* : ``Key`` is the name of the tag that you want to change the ``Value`` for. - *Delete a key* : ``Key`` is the name of the tag you want to remove. - *Give a name to a health check* : Edit the default ``Name`` tag. In the Amazon Route 53 console, the list of your health checks includes a *Name* column that lets you see the name that you've given to each health check.\n")
    value: str = pydantic.Field(..., description='The value of ``Value`` depends on the operation that you want to perform:. - *Add a tag to a health check or hosted zone* : ``Value`` is the value that you want to give the new tag. - *Edit a tag* : ``Value`` is the new value that you want to assign the tag.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-hostedzone-hostedzonetag.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    hosted_zone_tag_property = route53.CfnHostedZone.HostedZoneTagProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHostedZone.HostedZoneTagProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnHostedZone.QueryLoggingConfigProperty
class CfnHostedZone_QueryLoggingConfigPropertyDef(BaseStruct):
    cloud_watch_logs_log_group_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-hostedzone-queryloggingconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    query_logging_config_property = route53.CfnHostedZone.QueryLoggingConfigProperty(\n        cloud_watch_logs_log_group_arn="cloudWatchLogsLogGroupArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_logs_log_group_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHostedZone.QueryLoggingConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnHostedZone.VPCProperty
class CfnHostedZone_VPCPropertyDef(BaseStruct):
    vpc_id: str = pydantic.Field(..., description='*Private hosted zones only:* The ID of an Amazon VPC. .. epigraph:: For public hosted zones, omit ``VPCs`` , ``VPCId`` , and ``VPCRegion`` .\n')
    vpc_region: str = pydantic.Field(..., description='*Private hosted zones only:* The region that an Amazon VPC was created in. .. epigraph:: For public hosted zones, omit ``VPCs`` , ``VPCId`` , and ``VPCRegion`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-hostedzone-vpc.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    v_pCProperty = route53.CfnHostedZone.VPCProperty(\n        vpc_id="vpcId",\n        vpc_region="vpcRegion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['vpc_id', 'vpc_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHostedZone.VPCProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnRecordSet.AliasTargetProperty
class CfnRecordSet_AliasTargetPropertyDef(BaseStruct):
    dns_name: str = pydantic.Field(..., description="*Alias records only:* The value that you specify depends on where you want to route queries:. - **Amazon API Gateway custom regional APIs and edge-optimized APIs** - Specify the applicable domain name for your API. You can get the applicable value using the AWS CLI command `get-domain-names <https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-domain-names.html>`_ : - For regional APIs, specify the value of ``regionalDomainName`` . - For edge-optimized APIs, specify the value of ``distributionDomainName`` . This is the name of the associated CloudFront distribution, such as ``da1b2c3d4e5.cloudfront.net`` . .. epigraph:: The name of the record that you're creating must match a custom domain name for your API, such as ``api.example.com`` . - **Amazon Virtual Private Cloud interface VPC endpoint** - Enter the API endpoint for the interface endpoint, such as ``vpce-123456789abcdef01-example-us-east-1a.elasticloadbalancing.us-east-1.vpce.amazonaws.com`` . For edge-optimized APIs, this is the domain name for the corresponding CloudFront distribution. You can get the value of ``DnsName`` using the AWS CLI command `describe-vpc-endpoints <https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpc-endpoints.html>`_ . - **CloudFront distribution** - Specify the domain name that CloudFront assigned when you created your distribution. Your CloudFront distribution must include an alternate domain name that matches the name of the record. For example, if the name of the record is *acme.example.com* , your CloudFront distribution must include *acme.example.com* as one of the alternate domain names. For more information, see `Using Alternate Domain Names (CNAMEs) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html>`_ in the *Amazon CloudFront Developer Guide* . You can't create a record in a private hosted zone to route traffic to a CloudFront distribution. .. epigraph:: For failover alias records, you can't specify a CloudFront distribution for both the primary and secondary records. A distribution must include an alternate domain name that matches the name of the record. However, the primary and secondary records have the same name, and you can't include the same alternate domain name in more than one distribution. - **Elastic Beanstalk environment** - If the domain name for your Elastic Beanstalk environment includes the region that you deployed the environment in, you can create an alias record that routes traffic to the environment. For example, the domain name ``my-environment. *us-west-2* .elasticbeanstalk.com`` is a regionalized domain name. .. epigraph:: For environments that were created before early 2016, the domain name doesn't include the region. To route traffic to these environments, you must create a CNAME record instead of an alias record. Note that you can't create a CNAME record for the root domain name. For example, if your domain name is example.com, you can create a record that routes traffic for acme.example.com to your Elastic Beanstalk environment, but you can't create a record that routes traffic for example.com to your Elastic Beanstalk environment. For Elastic Beanstalk environments that have regionalized subdomains, specify the ``CNAME`` attribute for the environment. You can use the following methods to get the value of the CNAME attribute: - *AWS Management Console* : For information about how to get the value by using the console, see `Using Custom Domains with AWS Elastic Beanstalk <https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customdomains.html>`_ in the *AWS Elastic Beanstalk Developer Guide* . - *Elastic Beanstalk API* : Use the ``DescribeEnvironments`` action to get the value of the ``CNAME`` attribute. For more information, see `DescribeEnvironments <https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_DescribeEnvironments.html>`_ in the *AWS Elastic Beanstalk API Reference* . - *AWS CLI* : Use the ``describe-environments`` command to get the value of the ``CNAME`` attribute. For more information, see `describe-environments <https://docs.aws.amazon.com/cli/latest/reference/elasticbeanstalk/describe-environments.html>`_ in the *AWS CLI* . - **ELB load balancer** - Specify the DNS name that is associated with the load balancer. Get the DNS name by using the AWS Management Console , the ELB API, or the AWS CLI . - *AWS Management Console* : Go to the EC2 page, choose *Load Balancers* in the navigation pane, choose the load balancer, choose the *Description* tab, and get the value of the *DNS name* field. If you're routing traffic to a Classic Load Balancer, get the value that begins with *dualstack* . If you're routing traffic to another type of load balancer, get the value that applies to the record type, A or AAAA. - *Elastic Load Balancing API* : Use ``DescribeLoadBalancers`` to get the value of ``DNSName`` . For more information, see the applicable guide: - Classic Load Balancers: `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html>`_ - Application and Network Load Balancers: `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html>`_ - *CloudFormation Fn::GetAtt intrinsic function* : Use the `Fn::GetAtt <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html>`_ intrinsic function to get the value of ``DNSName`` : - `Classic Load Balancers <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#aws-properties-ec2-elb-return-values>`_ . - `Application and Network Load Balancers <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html#aws-resource-elasticloadbalancingv2-loadbalancer-return-values>`_ . - *AWS CLI* : Use ``describe-load-balancers`` to get the value of ``DNSName`` . For more information, see the applicable guide: - Classic Load Balancers: `describe-load-balancers <https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html>`_ - Application and Network Load Balancers: `describe-load-balancers <https://docs.aws.amazon.com/cli/latest/reference/elbv2/describe-load-balancers.html>`_ - **Global Accelerator accelerator** - Specify the DNS name for your accelerator: - *Global Accelerator API* : To get the DNS name, use `DescribeAccelerator <https://docs.aws.amazon.com/global-accelerator/latest/api/API_DescribeAccelerator.html>`_ . - *AWS CLI* : To get the DNS name, use `describe-accelerator <https://docs.aws.amazon.com/cli/latest/reference/globalaccelerator/describe-accelerator.html>`_ . - **Amazon S3 bucket that is configured as a static website** - Specify the domain name of the Amazon S3 website endpoint that you created the bucket in, for example, ``s3-website.us-east-2.amazonaws.com`` . For more information about valid values, see the table `Amazon S3 Website Endpoints <https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints>`_ in the *Amazon Web Services General Reference* . For more information about using S3 buckets for websites, see `Getting Started with Amazon Route 53 <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/getting-started.html>`_ in the *Amazon Route 53 Developer Guide.* - **Another Route 53 record** - Specify the value of the ``Name`` element for a record in the current hosted zone. .. epigraph:: If you're creating an alias record that has the same name as the hosted zone (known as the zone apex), you can't specify the domain name for a record for which the value of ``Type`` is ``CNAME`` . This is because the alias record must have the same type as the record that you're routing traffic to, and creating a CNAME record for the zone apex isn't supported even for an alias record.\n")
    hosted_zone_id: str = pydantic.Field(..., description='*Alias resource records sets only* : The value used depends on where you want to route traffic:. - **Amazon API Gateway custom regional APIs and edge-optimized APIs** - Specify the hosted zone ID for your API. You can get the applicable value using the AWS CLI command `get-domain-names <https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-domain-names.html>`_ : - For regional APIs, specify the value of ``regionalHostedZoneId`` . - For edge-optimized APIs, specify the value of ``distributionHostedZoneId`` . - **Amazon Virtual Private Cloud interface VPC endpoint** - Specify the hosted zone ID for your interface endpoint. You can get the value of ``HostedZoneId`` using the AWS CLI command `describe-vpc-endpoints <https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpc-endpoints.html>`_ . - **CloudFront distribution** - Specify ``Z2FDTNDATAQYW2`` . This is always the hosted zone ID when you create an alias record that routes traffic to a CloudFront distribution. .. epigraph:: Alias records for CloudFront can\'t be created in a private zone. - **Elastic Beanstalk environment** - Specify the hosted zone ID for the region that you created the environment in. The environment must have a regionalized subdomain. For a list of regions and the corresponding hosted zone IDs, see `AWS Elastic Beanstalk endpoints and quotas <https://docs.aws.amazon.com/general/latest/gr/elasticbeanstalk.html>`_ in the *Amazon Web Services General Reference* . - **ELB load balancer** - Specify the value of the hosted zone ID for the load balancer. Use the following methods to get the hosted zone ID: - `Service Endpoints <https://docs.aws.amazon.com/general/latest/gr/elb.html>`_ table in the "Elastic Load Balancing Endpoints and Quotas" topic in the *Amazon Web Services General Reference* : Use the value that corresponds with the region that you created your load balancer in. Note that there are separate columns for Application and Classic Load Balancers and for Network Load Balancers. - *AWS Management Console* : Go to the Amazon EC2 page, choose *Load Balancers* in the navigation pane, select the load balancer, and get the value of the *Hosted zone* field on the *Description* tab. - *Elastic Load Balancing API* : Use ``DescribeLoadBalancers`` to get the applicable value. For more information, see the applicable guide: - Classic Load Balancers: Use `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html>`_ to get the value of ``CanonicalHostedZoneNameID`` . - Application and Network Load Balancers: Use `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html>`_ to get the value of ``CanonicalHostedZoneID`` . - *CloudFormation Fn::GetAtt intrinsic function* : Use the `Fn::GetAtt <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html>`_ intrinsic function to get the applicable value: - Classic Load Balancers: Get `CanonicalHostedZoneNameID <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#aws-properties-ec2-elb-return-values>`_ . - Application and Network Load Balancers: Get `CanonicalHostedZoneID <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html#aws-resource-elasticloadbalancingv2-loadbalancer-return-values>`_ . - *AWS CLI* : Use ``describe-load-balancers`` to get the applicable value. For more information, see the applicable guide: - Classic Load Balancers: Use `describe-load-balancers <https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html>`_ to get the value of ``CanonicalHostedZoneNameID`` . - Application and Network Load Balancers: Use `describe-load-balancers <https://docs.aws.amazon.com/cli/latest/reference/elbv2/describe-load-balancers.html>`_ to get the value of ``CanonicalHostedZoneID`` . - **Global Accelerator accelerator** - Specify ``Z2BJ6XQ5FK7U4H`` . - **An Amazon S3 bucket configured as a static website** - Specify the hosted zone ID for the region that you created the bucket in. For more information about valid values, see the table `Amazon S3 Website Endpoints <https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints>`_ in the *Amazon Web Services General Reference* . - **Another Route 53 record in your hosted zone** - Specify the hosted zone ID of your hosted zone. (An alias record can\'t reference a record in a different hosted zone.)\n')
    evaluate_target_health: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='*Applies only to alias, failover alias, geolocation alias, latency alias, and weighted alias resource record sets:* When ``EvaluateTargetHealth`` is ``true`` , an alias resource record set inherits the health of the referenced AWS resource, such as an ELB load balancer or another resource record set in the hosted zone. Note the following: - **CloudFront distributions** - You can\'t set ``EvaluateTargetHealth`` to ``true`` when the alias target is a CloudFront distribution. - **Elastic Beanstalk environments that have regionalized subdomains** - If you specify an Elastic Beanstalk environment in ``DNSName`` and the environment contains an ELB load balancer, Elastic Load Balancing routes queries only to the healthy Amazon EC2 instances that are registered with the load balancer. (An environment automatically contains an ELB load balancer if it includes more than one Amazon EC2 instance.) If you set ``EvaluateTargetHealth`` to ``true`` and either no Amazon EC2 instances are healthy or the load balancer itself is unhealthy, Route 53 routes queries to other available resources that are healthy, if any. If the environment contains a single Amazon EC2 instance, there are no special requirements. - **ELB load balancers** - Health checking behavior depends on the type of load balancer: - *Classic Load Balancers* : If you specify an ELB Classic Load Balancer in ``DNSName`` , Elastic Load Balancing routes queries only to the healthy Amazon EC2 instances that are registered with the load balancer. If you set ``EvaluateTargetHealth`` to ``true`` and either no EC2 instances are healthy or the load balancer itself is unhealthy, Route 53 routes queries to other resources. - *Application and Network Load Balancers* : If you specify an ELB Application or Network Load Balancer and you set ``EvaluateTargetHealth`` to ``true`` , Route 53 routes queries to the load balancer based on the health of the target groups that are associated with the load balancer: - For an Application or Network Load Balancer to be considered healthy, every target group that contains targets must contain at least one healthy target. If any target group contains only unhealthy targets, the load balancer is considered unhealthy, and Route 53 routes queries to other resources. - A target group that has no registered targets is considered unhealthy. .. epigraph:: When you create a load balancer, you configure settings for Elastic Load Balancing health checks; they\'re not Route 53 health checks, but they perform a similar function. Do not create Route 53 health checks for the EC2 instances that you register with an ELB load balancer. - **S3 buckets** - There are no special requirements for setting ``EvaluateTargetHealth`` to ``true`` when the alias target is an S3 bucket. - **Other records in the same hosted zone** - If the AWS resource that you specify in ``DNSName`` is a record or a group of records (for example, a group of weighted records) but is not another alias record, we recommend that you associate a health check with all of the records in the alias target. For more information, see `What Happens When You Omit Health Checks? <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-complex-configs.html#dns-failover-complex-configs-hc-omitting>`_ in the *Amazon Route 53 Developer Guide* . For more information and examples, see `Amazon Route 53 Health Checks and DNS Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html>`_ in the *Amazon Route 53 Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    alias_target_property = route53.CfnRecordSet.AliasTargetProperty(\n        dns_name="dnsName",\n        hosted_zone_id="hostedZoneId",\n\n        # the properties below are optional\n        evaluate_target_health=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dns_name', 'hosted_zone_id', 'evaluate_target_health']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSet.AliasTargetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnRecordSet.CidrRoutingConfigProperty
class CfnRecordSet_CidrRoutingConfigPropertyDef(BaseStruct):
    collection_id: str = pydantic.Field(..., description='The CIDR collection ID.\n')
    location_name: str = pydantic.Field(..., description='The CIDR collection location name.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-cidrroutingconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    cidr_routing_config_property = route53.CfnRecordSet.CidrRoutingConfigProperty(\n        collection_id="collectionId",\n        location_name="locationName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['collection_id', 'location_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSet.CidrRoutingConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnRecordSet.GeoLocationProperty
class CfnRecordSet_GeoLocationPropertyDef(BaseStruct):
    continent_code: typing.Optional[str] = pydantic.Field(None, description='For geolocation resource record sets, a two-letter abbreviation that identifies a continent. Route 53 supports the following continent codes:. - *AF* : Africa - *AN* : Antarctica - *AS* : Asia - *EU* : Europe - *OC* : Oceania - *NA* : North America - *SA* : South America Constraint: Specifying ``ContinentCode`` with either ``CountryCode`` or ``SubdivisionCode`` returns an ``InvalidInput`` error.\n')
    country_code: typing.Optional[str] = pydantic.Field(None, description='For geolocation resource record sets, the two-letter code for a country. Route 53 uses the two-letter country codes that are specified in `ISO standard 3166-1 alpha-2 <https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_ .\n')
    subdivision_code: typing.Optional[str] = pydantic.Field(None, description='For geolocation resource record sets, the two-letter code for a state of the United States. Route 53 doesn\'t support any other values for ``SubdivisionCode`` . For a list of state abbreviations, see `Appendix B: Two–Letter State and Possession Abbreviations <https://docs.aws.amazon.com/https://pe.usps.com/text/pub28/28apb.htm>`_ on the United States Postal Service website. If you specify ``subdivisioncode`` , you must also specify ``US`` for ``CountryCode`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset-geolocation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    geo_location_property = route53.CfnRecordSet.GeoLocationProperty(\n        continent_code="continentCode",\n        country_code="countryCode",\n        subdivision_code="subdivisionCode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['continent_code', 'country_code', 'subdivision_code']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSet.GeoLocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnRecordSetGroup.AliasTargetProperty
class CfnRecordSetGroup_AliasTargetPropertyDef(BaseStruct):
    dns_name: str = pydantic.Field(..., description="*Alias records only:* The value that you specify depends on where you want to route queries:. - **Amazon API Gateway custom regional APIs and edge-optimized APIs** - Specify the applicable domain name for your API. You can get the applicable value using the AWS CLI command `get-domain-names <https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-domain-names.html>`_ : - For regional APIs, specify the value of ``regionalDomainName`` . - For edge-optimized APIs, specify the value of ``distributionDomainName`` . This is the name of the associated CloudFront distribution, such as ``da1b2c3d4e5.cloudfront.net`` . .. epigraph:: The name of the record that you're creating must match a custom domain name for your API, such as ``api.example.com`` . - **Amazon Virtual Private Cloud interface VPC endpoint** - Enter the API endpoint for the interface endpoint, such as ``vpce-123456789abcdef01-example-us-east-1a.elasticloadbalancing.us-east-1.vpce.amazonaws.com`` . For edge-optimized APIs, this is the domain name for the corresponding CloudFront distribution. You can get the value of ``DnsName`` using the AWS CLI command `describe-vpc-endpoints <https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpc-endpoints.html>`_ . - **CloudFront distribution** - Specify the domain name that CloudFront assigned when you created your distribution. Your CloudFront distribution must include an alternate domain name that matches the name of the record. For example, if the name of the record is *acme.example.com* , your CloudFront distribution must include *acme.example.com* as one of the alternate domain names. For more information, see `Using Alternate Domain Names (CNAMEs) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html>`_ in the *Amazon CloudFront Developer Guide* . You can't create a record in a private hosted zone to route traffic to a CloudFront distribution. .. epigraph:: For failover alias records, you can't specify a CloudFront distribution for both the primary and secondary records. A distribution must include an alternate domain name that matches the name of the record. However, the primary and secondary records have the same name, and you can't include the same alternate domain name in more than one distribution. - **Elastic Beanstalk environment** - If the domain name for your Elastic Beanstalk environment includes the region that you deployed the environment in, you can create an alias record that routes traffic to the environment. For example, the domain name ``my-environment. *us-west-2* .elasticbeanstalk.com`` is a regionalized domain name. .. epigraph:: For environments that were created before early 2016, the domain name doesn't include the region. To route traffic to these environments, you must create a CNAME record instead of an alias record. Note that you can't create a CNAME record for the root domain name. For example, if your domain name is example.com, you can create a record that routes traffic for acme.example.com to your Elastic Beanstalk environment, but you can't create a record that routes traffic for example.com to your Elastic Beanstalk environment. For Elastic Beanstalk environments that have regionalized subdomains, specify the ``CNAME`` attribute for the environment. You can use the following methods to get the value of the CNAME attribute: - *AWS Management Console* : For information about how to get the value by using the console, see `Using Custom Domains with AWS Elastic Beanstalk <https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customdomains.html>`_ in the *AWS Elastic Beanstalk Developer Guide* . - *Elastic Beanstalk API* : Use the ``DescribeEnvironments`` action to get the value of the ``CNAME`` attribute. For more information, see `DescribeEnvironments <https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_DescribeEnvironments.html>`_ in the *AWS Elastic Beanstalk API Reference* . - *AWS CLI* : Use the ``describe-environments`` command to get the value of the ``CNAME`` attribute. For more information, see `describe-environments <https://docs.aws.amazon.com/cli/latest/reference/elasticbeanstalk/describe-environments.html>`_ in the *AWS CLI* . - **ELB load balancer** - Specify the DNS name that is associated with the load balancer. Get the DNS name by using the AWS Management Console , the ELB API, or the AWS CLI . - *AWS Management Console* : Go to the EC2 page, choose *Load Balancers* in the navigation pane, choose the load balancer, choose the *Description* tab, and get the value of the *DNS name* field. If you're routing traffic to a Classic Load Balancer, get the value that begins with *dualstack* . If you're routing traffic to another type of load balancer, get the value that applies to the record type, A or AAAA. - *Elastic Load Balancing API* : Use ``DescribeLoadBalancers`` to get the value of ``DNSName`` . For more information, see the applicable guide: - Classic Load Balancers: `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html>`_ - Application and Network Load Balancers: `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html>`_ - *CloudFormation Fn::GetAtt intrinsic function* : Use the `Fn::GetAtt <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html>`_ intrinsic function to get the value of ``DNSName`` : - `Classic Load Balancers <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#aws-properties-ec2-elb-return-values>`_ . - `Application and Network Load Balancers <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html#aws-resource-elasticloadbalancingv2-loadbalancer-return-values>`_ . - *AWS CLI* : Use ``describe-load-balancers`` to get the value of ``DNSName`` . For more information, see the applicable guide: - Classic Load Balancers: `describe-load-balancers <https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html>`_ - Application and Network Load Balancers: `describe-load-balancers <https://docs.aws.amazon.com/cli/latest/reference/elbv2/describe-load-balancers.html>`_ - **Global Accelerator accelerator** - Specify the DNS name for your accelerator: - *Global Accelerator API* : To get the DNS name, use `DescribeAccelerator <https://docs.aws.amazon.com/global-accelerator/latest/api/API_DescribeAccelerator.html>`_ . - *AWS CLI* : To get the DNS name, use `describe-accelerator <https://docs.aws.amazon.com/cli/latest/reference/globalaccelerator/describe-accelerator.html>`_ . - **Amazon S3 bucket that is configured as a static website** - Specify the domain name of the Amazon S3 website endpoint that you created the bucket in, for example, ``s3-website.us-east-2.amazonaws.com`` . For more information about valid values, see the table `Amazon S3 Website Endpoints <https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints>`_ in the *Amazon Web Services General Reference* . For more information about using S3 buckets for websites, see `Getting Started with Amazon Route 53 <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/getting-started.html>`_ in the *Amazon Route 53 Developer Guide.* - **Another Route 53 record** - Specify the value of the ``Name`` element for a record in the current hosted zone. .. epigraph:: If you're creating an alias record that has the same name as the hosted zone (known as the zone apex), you can't specify the domain name for a record for which the value of ``Type`` is ``CNAME`` . This is because the alias record must have the same type as the record that you're routing traffic to, and creating a CNAME record for the zone apex isn't supported even for an alias record.\n")
    hosted_zone_id: str = pydantic.Field(..., description='*Alias resource records sets only* : The value used depends on where you want to route traffic:. - **Amazon API Gateway custom regional APIs and edge-optimized APIs** - Specify the hosted zone ID for your API. You can get the applicable value using the AWS CLI command `get-domain-names <https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-domain-names.html>`_ : - For regional APIs, specify the value of ``regionalHostedZoneId`` . - For edge-optimized APIs, specify the value of ``distributionHostedZoneId`` . - **Amazon Virtual Private Cloud interface VPC endpoint** - Specify the hosted zone ID for your interface endpoint. You can get the value of ``HostedZoneId`` using the AWS CLI command `describe-vpc-endpoints <https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpc-endpoints.html>`_ . - **CloudFront distribution** - Specify ``Z2FDTNDATAQYW2`` . This is always the hosted zone ID when you create an alias record that routes traffic to a CloudFront distribution. .. epigraph:: Alias records for CloudFront can\'t be created in a private zone. - **Elastic Beanstalk environment** - Specify the hosted zone ID for the region that you created the environment in. The environment must have a regionalized subdomain. For a list of regions and the corresponding hosted zone IDs, see `AWS Elastic Beanstalk endpoints and quotas <https://docs.aws.amazon.com/general/latest/gr/elasticbeanstalk.html>`_ in the *Amazon Web Services General Reference* . - **ELB load balancer** - Specify the value of the hosted zone ID for the load balancer. Use the following methods to get the hosted zone ID: - `Service Endpoints <https://docs.aws.amazon.com/general/latest/gr/elb.html>`_ table in the "Elastic Load Balancing endpoints and quotas" topic in the *Amazon Web Services General Reference* : Use the value that corresponds with the region that you created your load balancer in. Note that there are separate columns for Application and Classic Load Balancers and for Network Load Balancers. - *AWS Management Console* : Go to the Amazon EC2 page, choose *Load Balancers* in the navigation pane, select the load balancer, and get the value of the *Hosted zone* field on the *Description* tab. - *Elastic Load Balancing API* : Use ``DescribeLoadBalancers`` to get the applicable value. For more information, see the applicable guide: - Classic Load Balancers: Use `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html>`_ to get the value of ``CanonicalHostedZoneNameID`` . - Application and Network Load Balancers: Use `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html>`_ to get the value of ``CanonicalHostedZoneID`` . - *CloudFormation Fn::GetAtt intrinsic function* : Use the `Fn::GetAtt <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html>`_ intrinsic function to get the applicable value: - Classic Load Balancers: Get `CanonicalHostedZoneNameID <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#aws-properties-ec2-elb-return-values>`_ . - Application and Network Load Balancers: Get `CanonicalHostedZoneID <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html#aws-resource-elasticloadbalancingv2-loadbalancer-return-values>`_ . - *AWS CLI* : Use ``describe-load-balancers`` to get the applicable value. For more information, see the applicable guide: - Classic Load Balancers: Use `describe-load-balancers <https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html>`_ to get the value of ``CanonicalHostedZoneNameID`` . - Application and Network Load Balancers: Use `describe-load-balancers <https://docs.aws.amazon.com/cli/latest/reference/elbv2/describe-load-balancers.html>`_ to get the value of ``CanonicalHostedZoneID`` . - **Global Accelerator accelerator** - Specify ``Z2BJ6XQ5FK7U4H`` . - **An Amazon S3 bucket configured as a static website** - Specify the hosted zone ID for the region that you created the bucket in. For more information about valid values, see the table `Amazon S3 Website Endpoints <https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints>`_ in the *Amazon Web Services General Reference* . - **Another Route 53 record in your hosted zone** - Specify the hosted zone ID of your hosted zone. (An alias record can\'t reference a record in a different hosted zone.)\n')
    evaluate_target_health: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='*Applies only to alias records with any routing policy:* When ``EvaluateTargetHealth`` is ``true`` , an alias record inherits the health of the referenced AWS resource, such as an ELB load balancer or another record in the hosted zone. Note the following: - **CloudFront distributions** - You can\'t set ``EvaluateTargetHealth`` to ``true`` when the alias target is a CloudFront distribution. - **Elastic Beanstalk environments that have regionalized subdomains** - If you specify an Elastic Beanstalk environment in ``DNSName`` and the environment contains an ELB load balancer, Elastic Load Balancing routes queries only to the healthy Amazon EC2 instances that are registered with the load balancer. (An environment automatically contains an ELB load balancer if it includes more than one Amazon EC2 instance.) If you set ``EvaluateTargetHealth`` to ``true`` and either no Amazon EC2 instances are healthy or the load balancer itself is unhealthy, Route 53 routes queries to other available resources that are healthy, if any. If the environment contains a single Amazon EC2 instance, there are no special requirements. - **ELB load balancers** - Health checking behavior depends on the type of load balancer: - *Classic Load Balancers* : If you specify an ELB Classic Load Balancer in ``DNSName`` , Elastic Load Balancing routes queries only to the healthy Amazon EC2 instances that are registered with the load balancer. If you set ``EvaluateTargetHealth`` to ``true`` and either no EC2 instances are healthy or the load balancer itself is unhealthy, Route 53 routes queries to other resources. - *Application and Network Load Balancers* : If you specify an ELB Application or Network Load Balancer and you set ``EvaluateTargetHealth`` to ``true`` , Route 53 routes queries to the load balancer based on the health of the target groups that are associated with the load balancer: - For an Application or Network Load Balancer to be considered healthy, every target group that contains targets must contain at least one healthy target. If any target group contains only unhealthy targets, the load balancer is considered unhealthy, and Route 53 routes queries to other resources. - A target group that has no registered targets is considered unhealthy. .. epigraph:: When you create a load balancer, you configure settings for Elastic Load Balancing health checks; they\'re not Route 53 health checks, but they perform a similar function. Do not create Route 53 health checks for the EC2 instances that you register with an ELB load balancer. - **S3 buckets** - There are no special requirements for setting ``EvaluateTargetHealth`` to ``true`` when the alias target is an S3 bucket. - **Other records in the same hosted zone** - If the AWS resource that you specify in ``DNSName`` is a record or a group of records (for example, a group of weighted records) but is not another alias record, we recommend that you associate a health check with all of the records in the alias target. For more information, see `What Happens When You Omit Health Checks? <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-complex-configs.html#dns-failover-complex-configs-hc-omitting>`_ in the *Amazon Route 53 Developer Guide* . For more information and examples, see `Amazon Route 53 Health Checks and DNS Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html>`_ in the *Amazon Route 53 Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    alias_target_property = route53.CfnRecordSetGroup.AliasTargetProperty(\n        dns_name="dnsName",\n        hosted_zone_id="hostedZoneId",\n\n        # the properties below are optional\n        evaluate_target_health=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dns_name', 'hosted_zone_id', 'evaluate_target_health']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSetGroup.AliasTargetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnRecordSetGroup.CidrRoutingConfigProperty
class CfnRecordSetGroup_CidrRoutingConfigPropertyDef(BaseStruct):
    collection_id: str = pydantic.Field(..., description='The CIDR collection ID.\n')
    location_name: str = pydantic.Field(..., description='The CIDR collection location name.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-cidrroutingconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    cidr_routing_config_property = route53.CfnRecordSetGroup.CidrRoutingConfigProperty(\n        collection_id="collectionId",\n        location_name="locationName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['collection_id', 'location_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSetGroup.CidrRoutingConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnRecordSetGroup.GeoLocationProperty
class CfnRecordSetGroup_GeoLocationPropertyDef(BaseStruct):
    continent_code: typing.Optional[str] = pydantic.Field(None, description='For geolocation resource record sets, a two-letter abbreviation that identifies a continent. Route 53 supports the following continent codes:. - *AF* : Africa - *AN* : Antarctica - *AS* : Asia - *EU* : Europe - *OC* : Oceania - *NA* : North America - *SA* : South America Constraint: Specifying ``ContinentCode`` with either ``CountryCode`` or ``SubdivisionCode`` returns an ``InvalidInput`` error.\n')
    country_code: typing.Optional[str] = pydantic.Field(None, description='For geolocation resource record sets, the two-letter code for a country. Route 53 uses the two-letter country codes that are specified in `ISO standard 3166-1 alpha-2 <https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_ .\n')
    subdivision_code: typing.Optional[str] = pydantic.Field(None, description='For geolocation resource record sets, the two-letter code for a state of the United States. Route 53 doesn\'t support any other values for ``SubdivisionCode`` . For a list of state abbreviations, see `Appendix B: Two–Letter State and Possession Abbreviations <https://docs.aws.amazon.com/https://pe.usps.com/text/pub28/28apb.htm>`_ on the United States Postal Service website. If you specify ``subdivisioncode`` , you must also specify ``US`` for ``CountryCode`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset-geolocation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    geo_location_property = route53.CfnRecordSetGroup.GeoLocationProperty(\n        continent_code="continentCode",\n        country_code="countryCode",\n        subdivision_code="subdivisionCode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['continent_code', 'country_code', 'subdivision_code']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSetGroup.GeoLocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnRecordSetGroup.RecordSetProperty
class CfnRecordSetGroup_RecordSetPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description="For ``ChangeResourceRecordSets`` requests, the name of the record that you want to create, update, or delete. For ``ListResourceRecordSets`` responses, the name of a record in the specified hosted zone. *ChangeResourceRecordSets Only* Enter a fully qualified domain name, for example, ``www.example.com`` . You can optionally include a trailing dot. If you omit the trailing dot, Amazon Route 53 assumes that the domain name that you specify is fully qualified. This means that Route 53 treats ``www.example.com`` (without a trailing dot) and ``www.example.com.`` (with a trailing dot) as identical. For information about how to specify characters other than ``a-z`` , ``0-9`` , and ``-`` (hyphen) and how to specify internationalized domain names, see `DNS Domain Name Format <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html>`_ in the *Amazon Route 53 Developer Guide* . You can use the asterisk (*) wildcard to replace the leftmost label in a domain name, for example, ``*.example.com`` . Note the following: - The * must replace the entire label. For example, you can't specify ``*prod.example.com`` or ``prod*.example.com`` . - The * can't replace any of the middle labels, for example, marketing.*.example.com. - If you include * in any position other than the leftmost label in a domain name, DNS treats it as an * character (ASCII 42), not as a wildcard. .. epigraph:: You can't use the * wildcard for resource records sets that have a type of NS. You can use the * wildcard as the leftmost label in a domain name, for example, ``*.example.com`` . You can't use an * for one of the middle labels, for example, ``marketing.*.example.com`` . In addition, the * must replace the entire label; for example, you can't specify ``prod*.example.com`` .\n")
    type: str = pydantic.Field(..., description='The DNS record type. For information about different record types and how data is encoded for them, see `Supported DNS Resource Record Types <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html>`_ in the *Amazon Route 53 Developer Guide* . Valid values for basic resource record sets: ``A`` | ``AAAA`` | ``CAA`` | ``CNAME`` | ``DS`` | ``MX`` | ``NAPTR`` | ``NS`` | ``PTR`` | ``SOA`` | ``SPF`` | ``SRV`` | ``TXT`` Values for weighted, latency, geolocation, and failover resource record sets: ``A`` | ``AAAA`` | ``CAA`` | ``CNAME`` | ``MX`` | ``NAPTR`` | ``PTR`` | ``SPF`` | ``SRV`` | ``TXT`` . When creating a group of weighted, latency, geolocation, or failover resource record sets, specify the same value for all of the resource record sets in the group. Valid values for multivalue answer resource record sets: ``A`` | ``AAAA`` | ``MX`` | ``NAPTR`` | ``PTR`` | ``SPF`` | ``SRV`` | ``TXT`` .. epigraph:: SPF records were formerly used to verify the identity of the sender of email messages. However, we no longer recommend that you create resource record sets for which the value of ``Type`` is ``SPF`` . RFC 7208, *Sender Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1* , has been updated to say, "...[I]ts existence and mechanism defined in [RFC4408] have led to some interoperability issues. Accordingly, its use is no longer appropriate for SPF version 1; implementations are not to use it." In RFC 7208, see section 14.1, `The SPF DNS Record Type <https://docs.aws.amazon.com/http://tools.ietf.org/html/rfc7208#section-14.1>`_ . Values for alias resource record sets: - *Amazon API Gateway custom regional APIs and edge-optimized APIs:* ``A`` - *CloudFront distributions:* ``A`` If IPv6 is enabled for the distribution, create two resource record sets to route traffic to your distribution, one with a value of ``A`` and one with a value of ``AAAA`` . - *Amazon API Gateway environment that has a regionalized subdomain* : ``A`` - *ELB load balancers:* ``A`` | ``AAAA`` - *Amazon S3 buckets:* ``A`` - *Amazon Virtual Private Cloud interface VPC endpoints* ``A`` - *Another resource record set in this hosted zone:* Specify the type of the resource record set that you\'re creating the alias for. All values are supported except ``NS`` and ``SOA`` . .. epigraph:: If you\'re creating an alias record that has the same name as the hosted zone (known as the zone apex), you can\'t route traffic to a record for which the value of ``Type`` is ``CNAME`` . This is because the alias record must have the same type as the record you\'re routing traffic to, and creating a CNAME record for the zone apex isn\'t supported even for an alias record.\n')
    alias_target: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSetGroup_AliasTargetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="*Alias resource record sets only:* Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to. If you're creating resource records sets for a private hosted zone, note the following: - You can't create an alias resource record set in a private hosted zone to route traffic to a CloudFront distribution. - For information about creating failover resource record sets in a private hosted zone, see `Configuring Failover in a Private Hosted Zone <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html>`_ in the *Amazon Route 53 Developer Guide* .\n")
    cidr_routing_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSetGroup_CidrRoutingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnRecordSetGroup.RecordSetProperty.CidrRoutingConfig``.\n')
    failover: typing.Optional[str] = pydantic.Field(None, description="*Failover resource record sets only:* To configure failover, you add the ``Failover`` element to two resource record sets. For one resource record set, you specify ``PRIMARY`` as the value for ``Failover`` ; for the other resource record set, you specify ``SECONDARY`` . In addition, you include the ``HealthCheckId`` element and specify the health check that you want Amazon Route 53 to perform for each resource record set. Except where noted, the following failover behaviors assume that you have included the ``HealthCheckId`` element in both resource record sets: - When the primary resource record set is healthy, Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the secondary resource record set. - When the primary resource record set is unhealthy and the secondary resource record set is healthy, Route 53 responds to DNS queries with the applicable value from the secondary resource record set. - When the secondary resource record set is unhealthy, Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the primary resource record set. - If you omit the ``HealthCheckId`` element for the secondary resource record set, and if the primary resource record set is unhealthy, Route 53 always responds to DNS queries with the applicable value from the secondary resource record set. This is true regardless of the health of the associated endpoint. You can't create non-failover resource record sets that have the same values for the ``Name`` and ``Type`` elements as failover resource record sets. For failover alias resource record sets, you must also include the ``EvaluateTargetHealth`` element and set the value to true. For more information about configuring failover for Route 53, see the following topics in the *Amazon Route 53 Developer Guide* : - `Route 53 Health Checks and DNS Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html>`_ - `Configuring Failover in a Private Hosted Zone <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html>`_\n")
    geo_location: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSetGroup_GeoLocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='*Geolocation resource record sets only:* A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query. For example, if you want all queries from Africa to be routed to a web server with an IP address of ``192.0.2.111`` , create a resource record set with a ``Type`` of ``A`` and a ``ContinentCode`` of ``AF`` . .. epigraph:: Although creating geolocation and geolocation alias resource record sets in a private hosted zone is allowed, it\'s not supported. If you create separate resource record sets for overlapping geographic regions (for example, one resource record set for a continent and one for a country on the same continent), priority goes to the smallest geographic region. This allows you to route most queries for a continent to one resource and to route queries for a country on that continent to a different resource. You can\'t create two geolocation resource record sets that specify the same geographic location. The value ``*`` in the ``CountryCode`` element matches all geographic locations that aren\'t specified in other geolocation resource record sets that have the same values for the ``Name`` and ``Type`` elements. .. epigraph:: Geolocation works by mapping IP addresses to locations. However, some IP addresses aren\'t mapped to geographic locations, so even if you create geolocation resource record sets that cover all seven continents, Route 53 will receive some DNS queries from locations that it can\'t identify. We recommend that you create a resource record set for which the value of ``CountryCode`` is ``*`` . Two groups of queries are routed to the resource that you specify in this record: queries that come from locations for which you haven\'t created geolocation resource record sets and queries from IP addresses that aren\'t mapped to a location. If you don\'t create a ``*`` resource record set, Route 53 returns a "no answer" response for queries from those locations. You can\'t create non-geolocation resource record sets that have the same values for the ``Name`` and ``Type`` elements as geolocation resource record sets.\n')
    health_check_id: typing.Optional[str] = pydantic.Field(None, description="If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the ``HealthCheckId`` element and specify the ID of the applicable health check. Route 53 determines whether a resource record set is healthy based on one of the following: - By periodically sending a request to the endpoint that is specified in the health check - By aggregating the status of a specified group of health checks (calculated health checks) - By determining the current state of a CloudWatch alarm (CloudWatch metric health checks) .. epigraph:: Route 53 doesn't check the health of the endpoint that is specified in the resource record set, for example, the endpoint specified by the IP address in the ``Value`` element. When you add a ``HealthCheckId`` element to a resource record set, Route 53 checks the health of the endpoint that you specified in the health check. For more information, see the following topics in the *Amazon Route 53 Developer Guide* : - `How Amazon Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`_ - `Route 53 Health Checks and DNS Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html>`_ - `Configuring Failover in a Private Hosted Zone <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html>`_ *When to Specify HealthCheckId* Specifying a value for ``HealthCheckId`` is useful only when Route 53 is choosing between two or more resource record sets to respond to a DNS query, and you want Route 53 to base the choice in part on the status of a health check. Configuring health checks makes sense only in the following configurations: - *Non-alias resource record sets* : You're checking the health of a group of non-alias resource record sets that have the same routing policy, name, and type (such as multiple weighted records named www.example.com with a type of A) and you specify health check IDs for all the resource record sets. If the health check status for a resource record set is healthy, Route 53 includes the record among the records that it responds to DNS queries with. If the health check status for a resource record set is unhealthy, Route 53 stops responding to DNS queries using the value for that resource record set. If the health check status for all resource record sets in the group is unhealthy, Route 53 considers all resource record sets in the group healthy and responds to DNS queries accordingly. - *Alias resource record sets* : You specify the following settings: - You set ``EvaluateTargetHealth`` to true for an alias resource record set in a group of resource record sets that have the same routing policy, name, and type (such as multiple weighted records named www.example.com with a type of A). - You configure the alias resource record set to route traffic to a non-alias resource record set in the same hosted zone. - You specify a health check ID for the non-alias resource record set. If the health check status is healthy, Route 53 considers the alias resource record set to be healthy and includes the alias record among the records that it responds to DNS queries with. If the health check status is unhealthy, Route 53 stops responding to DNS queries using the alias resource record set. .. epigraph:: The alias resource record set can also route traffic to a *group* of non-alias resource record sets that have the same routing policy, name, and type. In that configuration, associate health checks with all of the resource record sets in the group of non-alias resource record sets. *Geolocation Routing* For geolocation resource record sets, if an endpoint is unhealthy, Route 53 looks for a resource record set for the larger, associated geographic region. For example, suppose you have resource record sets for a state in the United States, for the entire United States, for North America, and a resource record set that has ``*`` for ``CountryCode`` is ``*`` , which applies to all locations. If the endpoint for the state resource record set is unhealthy, Route 53 checks for healthy resource record sets in the following order until it finds a resource record set for which the endpoint is healthy: - The United States - North America - The default resource record set *Specifying the Health Check Endpoint by Domain Name* If your health checks specify the endpoint only by domain name, we recommend that you create a separate health check for each endpoint. For example, create a health check for each ``HTTP`` server that is serving content for ``www.example.com`` . For the value of ``FullyQualifiedDomainName`` , specify the domain name of the server (such as ``us-east-2-www.example.com`` ), not the name of the resource record sets ( ``www.example.com`` ). .. epigraph:: Health check results will be unpredictable if you do the following: - Create a health check that has the same value for ``FullyQualifiedDomainName`` as the name of a resource record set. - Associate that health check with the resource record set.\n")
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the hosted zone that you want to create records in. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description="The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, ``www.example.com.`` ) as part of the ``HostedZoneName`` . When you create a stack using an ``AWS::Route53::RecordSet`` that specifies ``HostedZoneName`` , AWS CloudFormation attempts to find a hosted zone whose name matches the ``HostedZoneName`` . If AWS CloudFormation can't find a hosted zone with a matching domain name, or if there is more than one hosted zone with the specified domain name, AWS CloudFormation will not create the stack. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n")
    multi_value_answer: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="*Multivalue answer resource record sets only* : To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify ``true`` for ``MultiValueAnswer`` . Note the following: - If you associate a health check with a multivalue answer resource record set, Amazon Route 53 responds to DNS queries with the corresponding IP address only when the health check is healthy. - If you don't associate a health check with a multivalue answer record, Route 53 always considers the record to be healthy. - Route 53 responds to DNS queries with up to eight healthy records; if you have eight or fewer healthy records, Route 53 responds to all DNS queries with all the healthy records. - If you have more than eight healthy records, Route 53 responds to different DNS resolvers with different combinations of healthy records. - When all records are unhealthy, Route 53 responds to DNS queries with up to eight unhealthy records. - If a resource becomes unavailable after a resolver caches a response, client software typically tries another of the IP addresses in the response. You can't create multivalue answer alias records.\n")
    region: typing.Optional[str] = pydantic.Field(None, description="*Latency-based resource record sets only:* The Amazon EC2 Region where you created the resource that this resource record set refers to. The resource typically is an AWS resource, such as an EC2 instance or an ELB load balancer, and is referred to by an IP address or a DNS domain name, depending on the record type. When Amazon Route 53 receives a DNS query for a domain name and type for which you have created latency resource record sets, Route 53 selects the latency resource record set that has the lowest latency between the end user and the associated Amazon EC2 Region. Route 53 then returns the value that is associated with the selected resource record set. Note the following: - You can only specify one ``ResourceRecord`` per latency resource record set. - You can only create one latency resource record set for each Amazon EC2 Region. - You aren't required to create latency resource record sets for all Amazon EC2 Regions. Route 53 will choose the region with the best latency from among the regions that you create latency resource record sets for. - You can't create non-latency resource record sets that have the same values for the ``Name`` and ``Type`` elements as latency resource record sets.\n")
    resource_records: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Information about the records that you want to create. Each record should be in the format appropriate for the record type specified by the ``Type`` property. For information about different record types and their record formats, see `Values That You Specify When You Create or Edit Amazon Route 53 Records <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html>`_ in the *Amazon Route 53 Developer Guide* .\n')
    set_identifier: typing.Optional[str] = pydantic.Field(None, description='*Resource record sets that have a routing policy other than simple:* An identifier that differentiates among multiple resource record sets that have the same combination of name and type, such as multiple weighted resource record sets named acme.example.com that have a type of A. In a group of resource record sets that have the same name and type, the value of ``SetIdentifier`` must be unique for each resource record set. For information about routing policies, see `Choosing a Routing Policy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html>`_ in the *Amazon Route 53 Developer Guide* .\n')
    ttl: typing.Optional[str] = pydantic.Field(None, description="The resource record cache time to live (TTL), in seconds. Note the following:. - If you're creating or updating an alias resource record set, omit ``TTL`` . Amazon Route 53 uses the value of ``TTL`` for the alias target. - If you're associating this resource record set with a health check (if you're adding a ``HealthCheckId`` element), we recommend that you specify a ``TTL`` of 60 seconds or less so clients respond quickly to changes in health status. - All of the resource record sets in a group of weighted resource record sets must have the same value for ``TTL`` . - If a group of weighted resource record sets includes one or more weighted alias resource record sets for which the alias target is an ELB load balancer, we recommend that you specify a ``TTL`` of 60 seconds for all of the non-alias weighted resource record sets that have the same name and type. Values other than 60 seconds (the TTL for load balancers) will change the effect of the values that you specify for ``Weight`` .\n")
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='*Weighted resource record sets only:* Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource\'s weight to the total. Note the following: - You must specify a value for the ``Weight`` element for every weighted resource record set. - You can only specify one ``ResourceRecord`` per weighted resource record set. - You can\'t create latency, failover, or geolocation resource record sets that have the same values for the ``Name`` and ``Type`` elements as weighted resource record sets. - You can create a maximum of 100 weighted resource record sets that have the same values for the ``Name`` and ``Type`` elements. - For weighted (but not weighted alias) resource record sets, if you set ``Weight`` to ``0`` for a resource record set, Route 53 never responds to queries with the applicable value for that resource record set. However, if you set ``Weight`` to ``0`` for all resource record sets that have the same combination of DNS name and type, traffic is routed to all resources with equal probability. The effect of setting ``Weight`` to ``0`` is different when you associate health checks with weighted resource record sets. For more information, see `Options for Configuring Route 53 Active-Active and Active-Passive Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html>`_ in the *Amazon Route 53 Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    record_set_property = route53.CfnRecordSetGroup.RecordSetProperty(\n        name="name",\n        type="type",\n\n        # the properties below are optional\n        alias_target=route53.CfnRecordSetGroup.AliasTargetProperty(\n            dns_name="dnsName",\n            hosted_zone_id="hostedZoneId",\n\n            # the properties below are optional\n            evaluate_target_health=False\n        ),\n        cidr_routing_config=route53.CfnRecordSetGroup.CidrRoutingConfigProperty(\n            collection_id="collectionId",\n            location_name="locationName"\n        ),\n        failover="failover",\n        geo_location=route53.CfnRecordSetGroup.GeoLocationProperty(\n            continent_code="continentCode",\n            country_code="countryCode",\n            subdivision_code="subdivisionCode"\n        ),\n        health_check_id="healthCheckId",\n        hosted_zone_id="hostedZoneId",\n        hosted_zone_name="hostedZoneName",\n        multi_value_answer=False,\n        region="region",\n        resource_records=["resourceRecords"],\n        set_identifier="setIdentifier",\n        ttl="ttl",\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'type', 'alias_target', 'cidr_routing_config', 'failover', 'geo_location', 'health_check_id', 'hosted_zone_id', 'hosted_zone_name', 'multi_value_answer', 'region', 'resource_records', 'set_identifier', 'ttl', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSetGroup.RecordSetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CnameRecordProps
class CnameRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    domain_name: str = pydantic.Field(..., description='The domain name of the target that this record should point to.\n\n:exampleMetadata: infused\n\nExample::\n\n    import aws_cdk.aws_certificatemanager as acm\n    import aws_cdk.aws_route53 as route53\n\n    # hosted zone and route53 features\n    # hosted_zone_id: str\n    zone_name = "example.com"\n\n\n    my_domain_name = "api.example.com"\n    certificate = acm.Certificate(self, "cert", domain_name=my_domain_name)\n    schema = appsync.SchemaFile(file_path="mySchemaFile")\n    api = appsync.GraphqlApi(self, "api",\n        name="myApi",\n        schema=schema,\n        domain_name=appsync.DomainOptions(\n            certificate=certificate,\n            domain_name=my_domain_name\n        )\n    )\n\n    # hosted zone for adding appsync domain\n    zone = route53.HostedZone.from_hosted_zone_attributes(self, "HostedZone",\n        hosted_zone_id=hosted_zone_id,\n        zone_name=zone_name\n    )\n\n    # create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\n    route53.CnameRecord(self, "CnameApiRecord",\n        record_name="api",\n        zone=zone,\n        domain_name=api.app_sync_domain_name\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'domain_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CnameRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CnameRecordPropsDefConfig] = pydantic.Field(None)


class CnameRecordPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.CommonHostedZoneProps
class CommonHostedZonePropsDef(BaseStruct):
    zone_name: str = pydantic.Field(..., description='The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name.\n')
    add_trailing_dot: typing.Optional[bool] = pydantic.Field(None, description='Whether to add a trailing dot to the zone name. Default: true\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments that you want to include about the hosted zone. Default: none\n')
    query_logs_log_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the log group that you want Amazon Route 53 to send query logs to. Default: disabled\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    common_hosted_zone_props = route53.CommonHostedZoneProps(\n        zone_name="zoneName",\n\n        # the properties below are optional\n        add_trailing_dot=False,\n        comment="comment",\n        query_logs_log_group_arn="queryLogsLogGroupArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone_name', 'add_trailing_dot', 'comment', 'query_logs_log_group_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CommonHostedZoneProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CrossAccountZoneDelegationRecordProps
class CrossAccountZoneDelegationRecordPropsDef(BaseStruct):
    delegated_zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The zone to be delegated.\n')
    delegation_role: typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef] = pydantic.Field(..., description='The delegation role in the parent account.\n')
    parent_hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The hosted zone id in the parent account. Default: - no zone id\n')
    parent_hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description='The hosted zone name in the parent account. Default: - no zone name\n')
    removal_policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='The removal policy to apply to the record set. Default: RemovalPolicy.DESTROY\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.days(2)\n\n:exampleMetadata: infused\n\nExample::\n\n    sub_zone = route53.PublicHostedZone(self, "SubZone",\n        zone_name="sub.someexample.com"\n    )\n\n    # import the delegation role by constructing the roleArn\n    delegation_role_arn = Stack.of(self).format_arn(\n        region="",  # IAM is global in each partition\n        service="iam",\n        account="parent-account-id",\n        resource="role",\n        resource_name="MyDelegationRole"\n    )\n    delegation_role = iam.Role.from_role_arn(self, "DelegationRole", delegation_role_arn)\n\n    # create the record\n    route53.CrossAccountZoneDelegationRecord(self, "delegate",\n        delegated_zone=sub_zone,\n        parent_hosted_zone_name="someexample.com",  # or you can use parentHostedZoneId\n        delegation_role=delegation_role\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delegated_zone', 'delegation_role', 'parent_hosted_zone_id', 'parent_hosted_zone_name', 'removal_policy', 'ttl']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CrossAccountZoneDelegationRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CrossAccountZoneDelegationRecordPropsDefConfig] = pydantic.Field(None)


class CrossAccountZoneDelegationRecordPropsDefConfig(pydantic.BaseModel):
    delegation_role_config: typing.Optional[models._interface_methods.AwsIamIRoleDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.DsRecordProps
class DsRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    values: typing.Sequence[str] = pydantic.Field(..., description='The DS values.\n\n:exampleMetadata: infused\n\nExample::\n\n    # my_zone: route53.HostedZone\n\n\n    route53.DsRecord(self, "DSRecord",\n        zone=my_zone,\n        record_name="foo",\n        values=["12345 3 1 123456789abcdef67890123456789abcdef67890"\n        ],\n        ttl=Duration.minutes(90)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.DsRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[DsRecordPropsDefConfig] = pydantic.Field(None)


class DsRecordPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.HostedZoneAttributes
class HostedZoneAttributesDef(BaseStruct):
    hosted_zone_id: str = pydantic.Field(..., description='Identifier of the hosted zone.\n')
    zone_name: str = pydantic.Field(..., description='Name of the hosted zone.\n\n:exampleMetadata: infused\n\nExample::\n\n    # app: App\n\n    stack = Stack(app, "Stack",\n        cross_region_references=True,\n        env=Environment(\n            region="us-east-2"\n        )\n    )\n\n    patterns.HttpsRedirect(self, "Redirect",\n        record_names=["foo.example.com"],\n        target_domain="bar.example.com",\n        zone=route53.HostedZone.from_hosted_zone_attributes(self, "HostedZone",\n            hosted_zone_id="ID",\n            zone_name="example.com"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hosted_zone_id', 'zone_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.HostedZoneAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.HostedZoneProps
class HostedZonePropsDef(BaseStruct):
    zone_name: str = pydantic.Field(..., description='The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name.\n')
    add_trailing_dot: typing.Optional[bool] = pydantic.Field(None, description='Whether to add a trailing dot to the zone name. Default: true\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments that you want to include about the hosted zone. Default: none\n')
    query_logs_log_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the log group that you want Amazon Route 53 to send query logs to. Default: disabled\n')
    vpcs: typing.Optional[typing.Sequence[typing.Union[models.aws_ec2.VpcDef]]] = pydantic.Field(None, description='A VPC that you want to associate with this hosted zone. When you specify this property, a private hosted zone will be created. You can associate additional VPCs to this private zone using ``addVpc(vpc)``. Default: public (no VPCs associated)\n\n:exampleMetadata: infused\n\nExample::\n\n    hosted_zone = route53.HostedZone(self, "MyHostedZone", zone_name="example.org")\n    metric = cloudwatch.Metric(\n        namespace="AWS/Route53",\n        metric_name="DNSQueries",\n        dimensions_map={\n            "HostedZoneId": hosted_zone.hosted_zone_id\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone_name', 'add_trailing_dot', 'comment', 'query_logs_log_group_arn', 'vpcs']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.HostedZoneProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.HostedZoneProviderProps
class HostedZoneProviderPropsDef(BaseStruct):
    domain_name: str = pydantic.Field(..., description='The zone domain e.g. example.com.\n')
    private_zone: typing.Optional[bool] = pydantic.Field(None, description='Whether the zone that is being looked up is a private hosted zone. Default: false\n')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='Specifies the ID of the VPC associated with a private hosted zone. If a VPC ID is provided and privateZone is false, no results will be returned and an error will be raised Default: - No VPC ID\n\n:exampleMetadata: infused\n\nExample::\n\n    import aws_cdk.aws_s3 as s3\n\n\n    record_name = "www"\n    domain_name = "example.com"\n\n    bucket_website = s3.Bucket(self, "BucketWebsite",\n        bucket_name=[record_name, domain_name].join("."),  # www.example.com\n        public_read_access=True,\n        website_index_document="index.html"\n    )\n\n    zone = route53.HostedZone.from_lookup(self, "Zone", domain_name=domain_name) # example.com\n\n    route53.ARecord(self, "AliasRecord",\n        zone=zone,\n        record_name=record_name,  # www\n        target=route53.RecordTarget.from_alias(targets.BucketWebsiteTarget(bucket_website))\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_name', 'private_zone', 'vpc_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.HostedZoneProviderProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.MxRecordProps
class MxRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    values: typing.Sequence[typing.Union[models.aws_route53.MxRecordValueDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The values.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_route53 as route53\n\n    # hosted_zone: route53.HostedZone\n\n    mx_record_props = route53.MxRecordProps(\n        values=[route53.MxRecordValue(\n            host_name="hostName",\n            priority=123\n        )],\n        zone=hosted_zone,\n\n        # the properties below are optional\n        comment="comment",\n        delete_existing=False,\n        record_name="recordName",\n        ttl=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.MxRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[MxRecordPropsDefConfig] = pydantic.Field(None)


class MxRecordPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.MxRecordValue
class MxRecordValueDef(BaseStruct):
    host_name: str = pydantic.Field(..., description='The mail server host name.\n')
    priority: typing.Union[int, float] = pydantic.Field(..., description='The priority.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    mx_record_value = route53.MxRecordValue(\n        host_name="hostName",\n        priority=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['host_name', 'priority']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.MxRecordValue'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.NsRecordProps
class NsRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    values: typing.Sequence[str] = pydantic.Field(..., description='The NS values.\n\n:exampleMetadata: infused\n\nExample::\n\n    # my_zone: route53.HostedZone\n\n\n    route53.NsRecord(self, "NSRecord",\n        zone=my_zone,\n        record_name="foo",\n        values=["ns-1.awsdns.co.uk.", "ns-2.awsdns.com."\n        ],\n        ttl=Duration.minutes(90)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.NsRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[NsRecordPropsDefConfig] = pydantic.Field(None)


class NsRecordPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.PrivateHostedZoneProps
class PrivateHostedZonePropsDef(BaseStruct):
    zone_name: str = pydantic.Field(..., description='The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name.\n')
    add_trailing_dot: typing.Optional[bool] = pydantic.Field(None, description='Whether to add a trailing dot to the zone name. Default: true\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments that you want to include about the hosted zone. Default: none\n')
    query_logs_log_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the log group that you want Amazon Route 53 to send query logs to. Default: disabled\n')
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='A VPC that you want to associate with this hosted zone. Private hosted zones must be associated with at least one VPC. You can associated additional VPCs using ``addVpc(vpc)``.\n\n:exampleMetadata: infused\n\nExample::\n\n    # vpc: ec2.Vpc\n\n\n    zone = route53.PrivateHostedZone(self, "HostedZone",\n        zone_name="fully.qualified.domain.com",\n        vpc=vpc\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone_name', 'add_trailing_dot', 'comment', 'query_logs_log_group_arn', 'vpc']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.PrivateHostedZoneProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[PrivateHostedZonePropsDefConfig] = pydantic.Field(None)


class PrivateHostedZonePropsDefConfig(pydantic.BaseModel):
    vpc_config: typing.Optional[models._interface_methods.AwsEc2IVpcDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.PublicHostedZoneAttributes
class PublicHostedZoneAttributesDef(BaseStruct):
    hosted_zone_id: str = pydantic.Field(..., description='Identifier of the hosted zone.\n')
    zone_name: str = pydantic.Field(..., description='Name of the hosted zone.\n\n:exampleMetadata: infused\n\nExample::\n\n    zone_from_attributes = route53.PublicHostedZone.from_public_hosted_zone_attributes(self, "MyZone",\n        zone_name="example.com",\n        hosted_zone_id="ZOJJZC49E0EPZ"\n    )\n\n    # Does not know zoneName\n    zone_from_id = route53.PublicHostedZone.from_public_hosted_zone_id(self, "MyZone", "ZOJJZC49E0EPZ")\n')
    _init_params: typing.ClassVar[list[str]] = ['hosted_zone_id', 'zone_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.PublicHostedZoneAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.PublicHostedZoneProps
class PublicHostedZonePropsDef(BaseStruct):
    zone_name: str = pydantic.Field(..., description='The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name.\n')
    add_trailing_dot: typing.Optional[bool] = pydantic.Field(None, description='Whether to add a trailing dot to the zone name. Default: true\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments that you want to include about the hosted zone. Default: none\n')
    query_logs_log_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the log group that you want Amazon Route 53 to send query logs to. Default: disabled\n')
    caa_amazon: typing.Optional[bool] = pydantic.Field(None, description='Whether to create a CAA record to restrict certificate authorities allowed to issue certificates for this domain to Amazon only. Default: false\n')
    cross_account_zone_delegation_principal: typing.Optional[typing.Union[models.aws_eks.ServiceAccountDef, models.aws_iam.UnknownPrincipalDef]] = pydantic.Field(None, description="(deprecated) A principal which is trusted to assume a role for zone delegation. If supplied, this will create a Role in the same account as the Hosted Zone, which can be assumed by the ``CrossAccountZoneDelegationRecord`` to create a delegation record to a zone in a different account. Be sure to indicate the account(s) that you trust to create delegation records, using either ``iam.AccountPrincipal`` or ``iam.OrganizationPrincipal``. If you are planning to use ``iam.ServicePrincipal``s here, be sure to include region-specific service principals for every opt-in region you are going to be delegating to; or don't use this feature and create separate roles with appropriate permissions for every opt-in region instead. Default: - No delegation configuration\n")
    cross_account_zone_delegation_role_name: typing.Optional[str] = pydantic.Field(None, description='(deprecated) The name of the role created for cross account delegation. Default: - A role name is generated automatically\n\n:exampleMetadata: infused\n\nExample::\n\n    sub_zone = route53.PublicHostedZone(self, "SubZone",\n        zone_name="sub.someexample.com"\n    )\n\n    # import the delegation role by constructing the roleArn\n    delegation_role_arn = Stack.of(self).format_arn(\n        region="",  # IAM is global in each partition\n        service="iam",\n        account="parent-account-id",\n        resource="role",\n        resource_name="MyDelegationRole"\n    )\n    delegation_role = iam.Role.from_role_arn(self, "DelegationRole", delegation_role_arn)\n\n    # create the record\n    route53.CrossAccountZoneDelegationRecord(self, "delegate",\n        delegated_zone=sub_zone,\n        parent_hosted_zone_name="someexample.com",  # or you can use parentHostedZoneId\n        delegation_role=delegation_role\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone_name', 'add_trailing_dot', 'comment', 'query_logs_log_group_arn', 'caa_amazon', 'cross_account_zone_delegation_principal', 'cross_account_zone_delegation_role_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.PublicHostedZoneProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.RecordSetOptions
class RecordSetOptionsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_route53 as route53\n\n    # hosted_zone: route53.HostedZone\n\n    record_set_options = route53.RecordSetOptions(\n        zone=hosted_zone,\n\n        # the properties below are optional\n        comment="comment",\n        delete_existing=False,\n        record_name="recordName",\n        ttl=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.RecordSetOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[RecordSetOptionsDefConfig] = pydantic.Field(None)


class RecordSetOptionsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.RecordSetProps
class RecordSetPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    record_type: aws_cdk.aws_route53.RecordType = pydantic.Field(..., description='The record type.\n')
    target: models.aws_route53.RecordTargetDef = pydantic.Field(..., description='The target for this record, either ``RecordTarget.fromValues()`` or ``RecordTarget.fromAlias()``.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_route53 as route53\n\n    # hosted_zone: route53.HostedZone\n    # record_target: route53.RecordTarget\n\n    record_set_props = route53.RecordSetProps(\n        record_type=route53.RecordType.A,\n        target=record_target,\n        zone=hosted_zone,\n\n        # the properties below are optional\n        comment="comment",\n        delete_existing=False,\n        record_name="recordName",\n        ttl=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'record_type', 'target']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.RecordSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[RecordSetPropsDefConfig] = pydantic.Field(None)


class RecordSetPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.SrvRecordProps
class SrvRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    values: typing.Sequence[typing.Union[models.aws_route53.SrvRecordValueDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The values.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_route53 as route53\n\n    # hosted_zone: route53.HostedZone\n\n    srv_record_props = route53.SrvRecordProps(\n        values=[route53.SrvRecordValue(\n            host_name="hostName",\n            port=123,\n            priority=123,\n            weight=123\n        )],\n        zone=hosted_zone,\n\n        # the properties below are optional\n        comment="comment",\n        delete_existing=False,\n        record_name="recordName",\n        ttl=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.SrvRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[SrvRecordPropsDefConfig] = pydantic.Field(None)


class SrvRecordPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.SrvRecordValue
class SrvRecordValueDef(BaseStruct):
    host_name: str = pydantic.Field(..., description='The server host name.\n')
    port: typing.Union[int, float] = pydantic.Field(..., description='The port.\n')
    priority: typing.Union[int, float] = pydantic.Field(..., description='The priority.\n')
    weight: typing.Union[int, float] = pydantic.Field(..., description='The weight.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    srv_record_value = route53.SrvRecordValue(\n        host_name="hostName",\n        port=123,\n        priority=123,\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['host_name', 'port', 'priority', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.SrvRecordValue'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.TxtRecordProps
class TxtRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    values: typing.Sequence[str] = pydantic.Field(..., description='The text values.\n\n:exampleMetadata: infused\n\nExample::\n\n    # my_zone: route53.HostedZone\n\n\n    route53.TxtRecord(self, "TXTRecord",\n        zone=my_zone,\n        record_name="_foo",  # If the name ends with a ".", it will be used as-is;\n        # if it ends with a "." followed by the zone name, a trailing "." will be added automatically;\n        # otherwise, a ".", the zone name, and a trailing "." will be added automatically.\n        # Defaults to zone root if not specified.\n        values=["Bar!", "Baz?"],\n        ttl=Duration.minutes(90)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.TxtRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[TxtRecordPropsDefConfig] = pydantic.Field(None)


class TxtRecordPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.VpcEndpointServiceDomainNameProps
class VpcEndpointServiceDomainNamePropsDef(BaseStruct):
    domain_name: str = pydantic.Field(..., description='The domain name to use. This domain name must be owned by this account (registered through Route53), or delegated to this account. Domain ownership will be verified by AWS before private DNS can be used.\n')
    endpoint_service: typing.Union[models.aws_ec2.VpcEndpointServiceDef] = pydantic.Field(..., description='The VPC Endpoint Service to configure Private DNS for.\n')
    public_hosted_zone: typing.Union[models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The public hosted zone to use for the domain.\n\n:exampleMetadata: infused\n\nExample::\n\n    from aws_cdk.aws_route53 import HostedZone, VpcEndpointServiceDomainName\n    # zone: HostedZone\n    # vpces: ec2.VpcEndpointService\n\n\n    VpcEndpointServiceDomainName(self, "EndpointDomain",\n        endpoint_service=vpces,\n        domain_name="my-stuff.aws-cdk.dev",\n        public_hosted_zone=zone\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_name', 'endpoint_service', 'public_hosted_zone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.VpcEndpointServiceDomainNameProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[VpcEndpointServiceDomainNamePropsDefConfig] = pydantic.Field(None)


class VpcEndpointServiceDomainNamePropsDefConfig(pydantic.BaseModel):
    endpoint_service_config: typing.Optional[models._interface_methods.AwsEc2IVpcEndpointServiceDefConfig] = pydantic.Field(None)
    public_hosted_zone_config: typing.Optional[models._interface_methods.AwsRoute53IPublicHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.ZoneDelegationOptions
class ZoneDelegationOptionsDef(BaseStruct):
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the DNS record created to incorporate the delegation. Default: none\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The TTL (Time To Live) of the DNS delegation record in DNS caches. Default: 172800\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_route53 as route53\n\n    zone_delegation_options = route53.ZoneDelegationOptions(\n        comment="comment",\n        ttl=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comment', 'ttl']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.ZoneDelegationOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.ZoneDelegationRecordProps
class ZoneDelegationRecordPropsDef(BaseStruct):
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='The hosted zone in which to define the new record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to add on the record. Default: no comment\n')
    delete_existing: typing.Optional[bool] = pydantic.Field(None, description='Whether to delete the same record set in the hosted zone if it already exists (dangerous!). This allows to deploy a new record set while minimizing the downtime because the new record set will be created immediately after the existing one is deleted. It also avoids "manual" actions to delete existing record sets. .. epigraph:: **N.B.:** this feature is dangerous, use with caution! It can only be used safely when ``deleteExisting`` is set to ``true`` as soon as the resource is added to the stack. Changing an existing Record Set\'s ``deleteExisting`` property from ``false -> true`` after deployment will delete the record! Default: false\n')
    record_name: typing.Optional[str] = pydantic.Field(None, description='The subdomain name for this record. This should be relative to the zone root name. For example, if you want to create a record for acme.example.com, specify "acme". You can also specify the fully qualified domain name which terminates with a ".". For example, "acme.example.com.". Default: zone root\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The resource record cache time to live (TTL). Default: Duration.minutes(30)\n')
    name_servers: typing.Sequence[str] = pydantic.Field(..., description='The name servers to report in the delegation records.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_route53 as route53\n\n    # hosted_zone: route53.HostedZone\n\n    zone_delegation_record_props = route53.ZoneDelegationRecordProps(\n        name_servers=["nameServers"],\n        zone=hosted_zone,\n\n        # the properties below are optional\n        comment="comment",\n        delete_existing=False,\n        record_name="recordName",\n        ttl=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['zone', 'comment', 'delete_existing', 'record_name', 'ttl', 'name_servers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.ZoneDelegationRecordProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ZoneDelegationRecordPropsDefConfig] = pydantic.Field(None)


class ZoneDelegationRecordPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_route53.CaaTag
# skipping emum

#  autogenerated from aws_cdk.aws_route53.RecordType
# skipping emum

#  autogenerated from aws_cdk.aws_route53.IAliasRecordTarget
#  skipping Interface

#  autogenerated from aws_cdk.aws_route53.IHostedZone
#  skipping Interface

#  autogenerated from aws_cdk.aws_route53.IPrivateHostedZone
#  skipping Interface

#  autogenerated from aws_cdk.aws_route53.IPublicHostedZone
#  skipping Interface

#  autogenerated from aws_cdk.aws_route53.IRecordSet
#  skipping Interface

#  autogenerated from aws_cdk.aws_route53.CfnCidrCollection
class CfnCidrCollectionDef(BaseCfnResource):
    name: str = pydantic.Field(..., description='The name of a CIDR collection.\n')
    locations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnCidrCollection_LocationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A complex type that contains information about the list of CIDR locations.')
    _init_params: typing.ClassVar[list[str]] = ['name', 'locations']
    _method_names: typing.ClassVar[list[str]] = ['LocationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnCidrCollection'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnCidrCollectionDefConfig] = pydantic.Field(None)


class CfnCidrCollectionDefConfig(pydantic.BaseModel):
    LocationProperty: typing.Optional[list[CfnCidrCollectionDefLocationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnCidrCollectionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnCidrCollectionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnCidrCollectionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnCidrCollectionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnCidrCollectionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnCidrCollectionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnCidrCollectionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnCidrCollectionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnCidrCollectionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnCidrCollectionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnCidrCollectionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnCidrCollectionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnCidrCollectionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnCidrCollectionDefLocationpropertyParams(pydantic.BaseModel):
    cidr_list: typing.Sequence[str] = pydantic.Field(..., description='')
    location_name: str = pydantic.Field(..., description='')
    ...

class CfnCidrCollectionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCidrCollectionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCidrCollectionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCidrCollectionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCidrCollectionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCidrCollectionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCidrCollectionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCidrCollectionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCidrCollectionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCidrCollectionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCidrCollectionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnCidrCollectionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCidrCollectionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCidrCollectionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_route53.CfnDNSSEC
class CfnDNSSECDef(BaseCfnResource):
    hosted_zone_id: str = pydantic.Field(..., description='A unique string (ID) that is used to identify a hosted zone. For example: ``Z00001111A1ABCaaABC11`` .')
    _init_params: typing.ClassVar[list[str]] = ['hosted_zone_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnDNSSEC'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnDNSSECDefConfig] = pydantic.Field(None)


class CfnDNSSECDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnDNSSECDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnDNSSECDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnDNSSECDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnDNSSECDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnDNSSECDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnDNSSECDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnDNSSECDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnDNSSECDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnDNSSECDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnDNSSECDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnDNSSECDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnDNSSECDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnDNSSECDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnDNSSECDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDNSSECDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDNSSECDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDNSSECDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDNSSECDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDNSSECDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDNSSECDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDNSSECDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDNSSECDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDNSSECDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDNSSECDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnDNSSECDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDNSSECDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDNSSECDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_route53.CfnHealthCheck
class CfnHealthCheckDef(BaseCfnResource):
    health_check_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHealthCheck_HealthCheckConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A complex type that contains detailed information about one health check. For the values to enter for ``HealthCheckConfig`` , see `HealthCheckConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html>`_\n')
    health_check_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHealthCheck_HealthCheckTagPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The ``HealthCheckTags`` property describes key-value pairs that are associated with an ``AWS::Route53::HealthCheck`` resource.')
    _init_params: typing.ClassVar[list[str]] = ['health_check_config', 'health_check_tags']
    _method_names: typing.ClassVar[list[str]] = ['AlarmIdentifierProperty', 'HealthCheckConfigProperty', 'HealthCheckTagProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHealthCheck'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnHealthCheckDefConfig] = pydantic.Field(None)


class CfnHealthCheckDefConfig(pydantic.BaseModel):
    AlarmIdentifierProperty: typing.Optional[list[CfnHealthCheckDefAlarmidentifierpropertyParams]] = pydantic.Field(None, description='')
    HealthCheckConfigProperty: typing.Optional[list[CfnHealthCheckDefHealthcheckconfigpropertyParams]] = pydantic.Field(None, description='')
    HealthCheckTagProperty: typing.Optional[list[CfnHealthCheckDefHealthchecktagpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnHealthCheckDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnHealthCheckDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnHealthCheckDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnHealthCheckDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnHealthCheckDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnHealthCheckDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnHealthCheckDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnHealthCheckDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnHealthCheckDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnHealthCheckDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnHealthCheckDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnHealthCheckDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnHealthCheckDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnHealthCheckDefAlarmidentifierpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    region: str = pydantic.Field(..., description='')
    ...

class CfnHealthCheckDefHealthcheckconfigpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    alarm_identifier: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHealthCheck_AlarmIdentifierPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    child_health_checks: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    enable_sni: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    failure_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='')
    fully_qualified_domain_name: typing.Optional[str] = pydantic.Field(None, description='')
    health_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='')
    insufficient_data_health_status: typing.Optional[str] = pydantic.Field(None, description='')
    inverted: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ip_address: typing.Optional[str] = pydantic.Field(None, description='')
    measure_latency: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='')
    regions: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    request_interval: typing.Union[int, float, None] = pydantic.Field(None, description='')
    resource_path: typing.Optional[str] = pydantic.Field(None, description='')
    routing_control_arn: typing.Optional[str] = pydantic.Field(None, description='')
    search_string: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnHealthCheckDefHealthchecktagpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnHealthCheckDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnHealthCheckDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHealthCheckDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnHealthCheckDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHealthCheckDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnHealthCheckDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnHealthCheckDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnHealthCheckDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnHealthCheckDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnHealthCheckDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHealthCheckDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnHealthCheckDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnHealthCheckDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHealthCheckDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_route53.CfnHostedZone
class CfnHostedZoneDef(BaseCfnResource):
    hosted_zone_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHostedZone_HostedZoneConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A complex type that contains an optional comment. If you don't want to specify a comment, omit the ``HostedZoneConfig`` and ``Comment`` elements.\n")
    hosted_zone_tags: typing.Optional[typing.Sequence[typing.Union[models.aws_route53.CfnHostedZone_HostedZoneTagPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Adds, edits, or deletes tags for a health check or a hosted zone. For information about using tags for cost allocation, see `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`_ in the *AWS Billing and Cost Management User Guide* .\n')
    name: typing.Optional[str] = pydantic.Field(None, description="The name of the domain. Specify a fully qualified domain name, for example, *www.example.com* . The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats *www.example.com* (without a trailing dot) and *www.example.com.* (with a trailing dot) as identical. If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of ``NameServers`` that are returned by the ``Fn::GetAtt`` intrinsic function.\n")
    query_logging_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHostedZone_QueryLoggingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Creates a configuration for DNS query logging. After you create a query logging configuration, Amazon Route 53 begins to publish log data to an Amazon CloudWatch Logs log group. DNS query logs contain information about the queries that Route 53 receives for a specified public hosted zone, such as the following: - Route 53 edge location that responded to the DNS query - Domain or subdomain that was requested - DNS record type, such as A or AAAA - DNS response code, such as ``NoError`` or ``ServFail`` - **Log Group and Resource Policy** - Before you create a query logging configuration, perform the following operations. .. epigraph:: If you create a query logging configuration using the Route 53 console, Route 53 performs these operations automatically. - Create a CloudWatch Logs log group, and make note of the ARN, which you specify when you create a query logging configuration. Note the following: - You must create the log group in the us-east-1 region. - You must use the same AWS account to create the log group and the hosted zone that you want to configure query logging for. - When you create log groups for query logging, we recommend that you use a consistent prefix, for example: ``/aws/route53/ *hosted zone name*`` In the next step, you\'ll create a resource policy, which controls access to one or more log groups and the associated AWS resources, such as Route 53 hosted zones. There\'s a limit on the number of resource policies that you can create, so we recommend that you use a consistent prefix so you can use the same resource policy for all the log groups that you create for query logging. - Create a CloudWatch Logs resource policy, and give it the permissions that Route 53 needs to create log streams and to send query logs to log streams. For the value of ``Resource`` , specify the ARN for the log group that you created in the previous step. To use the same resource policy for all the CloudWatch Logs log groups that you created for query logging configurations, replace the hosted zone name with ``*`` , for example: ``arn:aws:logs:us-east-1:123412341234:log-group:/aws/route53/*`` To avoid the confused deputy problem, a security issue where an entity without a permission for an action can coerce a more-privileged entity to perform it, you can optionally limit the permissions that a service has to a resource in a resource-based policy by supplying the following values: - For ``aws:SourceArn`` , supply the hosted zone ARN used in creating the query logging configuration. For example, ``aws:SourceArn: arn:aws:route53:::hostedzone/hosted zone ID`` . - For ``aws:SourceAccount`` , supply the account ID for the account that creates the query logging configuration. For example, ``aws:SourceAccount:111111111111`` . For more information, see `The confused deputy problem <https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html>`_ in the *AWS IAM User Guide* . .. epigraph:: You can\'t use the CloudWatch console to create or edit a resource policy. You must use the CloudWatch API, one of the AWS SDKs, or the AWS CLI . - **Log Streams and Edge Locations** - When Route 53 finishes creating the configuration for DNS query logging, it does the following: - Creates a log stream for an edge location the first time that the edge location responds to DNS queries for the specified hosted zone. That log stream is used to log all queries that Route 53 responds to for that edge location. - Begins to send query logs to the applicable log stream. The name of each log stream is in the following format: ``*hosted zone ID* / *edge location code*`` The edge location code is a three-letter code and an arbitrarily assigned number, for example, DFW3. The three-letter code typically corresponds with the International Air Transport Association airport code for an airport near the edge location. (These abbreviations might change in the future.) For a list of edge locations, see "The Route 53 Global Network" on the `Route 53 Product Details <https://docs.aws.amazon.com/route53/details/>`_ page. - **Queries That Are Logged** - Query logs contain only the queries that DNS resolvers forward to Route 53. If a DNS resolver has already cached the response to a query (such as the IP address for a load balancer for example.com), the resolver will continue to return the cached response. It doesn\'t forward another query to Route 53 until the TTL for the corresponding resource record set expires. Depending on how many DNS queries are submitted for a resource record set, and depending on the TTL for that resource record set, query logs might contain information about only one query out of every several thousand queries that are submitted to DNS. For more information about how DNS works, see `Routing Internet Traffic to Your Website or Web Application <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html>`_ in the *Amazon Route 53 Developer Guide* . - **Log File Format** - For a list of the values in each query log and the format of each value, see `Logging DNS Queries <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html>`_ in the *Amazon Route 53 Developer Guide* . - **Pricing** - For information about charges for query logs, see `Amazon CloudWatch Pricing <https://docs.aws.amazon.com/cloudwatch/pricing/>`_ . - **How to Stop Logging** - If you want Route 53 to stop sending query logs to CloudWatch Logs, delete the query logging configuration. For more information, see `DeleteQueryLoggingConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteQueryLoggingConfig.html>`_ .\n')
    vpcs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHostedZone_VPCPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='*Private hosted zones:* A complex type that contains information about the VPCs that are associated with the specified hosted zone. .. epigraph:: For public hosted zones, omit ``VPCs`` , ``VPCId`` , and ``VPCRegion`` .')
    _init_params: typing.ClassVar[list[str]] = ['hosted_zone_config', 'hosted_zone_tags', 'name', 'query_logging_config', 'vpcs']
    _method_names: typing.ClassVar[list[str]] = ['HostedZoneConfigProperty', 'HostedZoneTagProperty', 'QueryLoggingConfigProperty', 'VPCProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHostedZone'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnHostedZoneDefConfig] = pydantic.Field(None)


class CfnHostedZoneDefConfig(pydantic.BaseModel):
    HostedZoneConfigProperty: typing.Optional[list[CfnHostedZoneDefHostedzoneconfigpropertyParams]] = pydantic.Field(None, description='')
    HostedZoneTagProperty: typing.Optional[list[CfnHostedZoneDefHostedzonetagpropertyParams]] = pydantic.Field(None, description='')
    QueryLoggingConfigProperty: typing.Optional[list[CfnHostedZoneDefQueryloggingconfigpropertyParams]] = pydantic.Field(None, description='')
    VPCProperty: typing.Optional[list[CfnHostedZoneDefVpcpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnHostedZoneDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnHostedZoneDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnHostedZoneDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnHostedZoneDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnHostedZoneDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnHostedZoneDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnHostedZoneDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnHostedZoneDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnHostedZoneDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnHostedZoneDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnHostedZoneDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnHostedZoneDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnHostedZoneDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnHostedZoneDefHostedzoneconfigpropertyParams(pydantic.BaseModel):
    comment: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnHostedZoneDefHostedzonetagpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnHostedZoneDefQueryloggingconfigpropertyParams(pydantic.BaseModel):
    cloud_watch_logs_log_group_arn: str = pydantic.Field(..., description='')
    ...

class CfnHostedZoneDefVpcpropertyParams(pydantic.BaseModel):
    vpc_id: str = pydantic.Field(..., description='')
    vpc_region: str = pydantic.Field(..., description='')
    ...

class CfnHostedZoneDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnHostedZoneDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHostedZoneDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnHostedZoneDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHostedZoneDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnHostedZoneDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnHostedZoneDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnHostedZoneDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnHostedZoneDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnHostedZoneDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHostedZoneDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnHostedZoneDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnHostedZoneDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHostedZoneDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_route53.CfnKeySigningKey
class CfnKeySigningKeyDef(BaseCfnResource):
    hosted_zone_id: str = pydantic.Field(..., description='The unique string (ID) that is used to identify a hosted zone. For example: ``Z00001111A1ABCaaABC11`` .\n')
    key_management_service_arn: str = pydantic.Field(..., description='The Amazon resource name (ARN) for a customer managed customer master key (CMK) in AWS Key Management Service ( AWS KMS ). The ``KeyManagementServiceArn`` must be unique for each key-signing key (KSK) in a single hosted zone. For example: ``arn:aws:kms:us-east-1:111122223333:key/111a2222-a11b-1ab1-2ab2-1ab21a2b3a111`` .\n')
    name: str = pydantic.Field(..., description='A string used to identify a key-signing key (KSK). ``Name`` can include numbers, letters, and underscores (_). ``Name`` must be unique for each key-signing key in the same hosted zone.\n')
    status: str = pydantic.Field(..., description='A string that represents the current key-signing key (KSK) status. Status can have one of the following values: - **ACTIVE** - The KSK is being used for signing. - **INACTIVE** - The KSK is not being used for signing. - **DELETING** - The KSK is in the process of being deleted. - **ACTION_NEEDED** - There is a problem with the KSK that requires you to take action to resolve. For example, the customer managed key might have been deleted, or the permissions for the customer managed key might have been changed. - **INTERNAL_FAILURE** - There was an error during a request. Before you can continue to work with DNSSEC signing, including actions that involve this KSK, you must correct the problem. For example, you may need to activate or deactivate the KSK.')
    _init_params: typing.ClassVar[list[str]] = ['hosted_zone_id', 'key_management_service_arn', 'name', 'status']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnKeySigningKey'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnKeySigningKeyDefConfig] = pydantic.Field(None)


class CfnKeySigningKeyDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnKeySigningKeyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnKeySigningKeyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnKeySigningKeyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnKeySigningKeyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnKeySigningKeyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnKeySigningKeyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnKeySigningKeyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnKeySigningKeyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnKeySigningKeyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnKeySigningKeyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnKeySigningKeyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnKeySigningKeyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnKeySigningKeyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnKeySigningKeyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnKeySigningKeyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnKeySigningKeyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnKeySigningKeyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnKeySigningKeyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnKeySigningKeyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnKeySigningKeyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnKeySigningKeyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnKeySigningKeyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnKeySigningKeyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnKeySigningKeyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnKeySigningKeyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnKeySigningKeyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnKeySigningKeyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_route53.CfnRecordSet
class CfnRecordSetDef(BaseCfnResource):
    name: str = pydantic.Field(..., description="For ``ChangeResourceRecordSets`` requests, the name of the record that you want to create, update, or delete. For ``ListResourceRecordSets`` responses, the name of a record in the specified hosted zone. *ChangeResourceRecordSets Only* Enter a fully qualified domain name, for example, ``www.example.com`` . You can optionally include a trailing dot. If you omit the trailing dot, Amazon Route 53 assumes that the domain name that you specify is fully qualified. This means that Route 53 treats ``www.example.com`` (without a trailing dot) and ``www.example.com.`` (with a trailing dot) as identical. For information about how to specify characters other than ``a-z`` , ``0-9`` , and ``-`` (hyphen) and how to specify internationalized domain names, see `DNS Domain Name Format <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html>`_ in the *Amazon Route 53 Developer Guide* . You can use the asterisk (*) wildcard to replace the leftmost label in a domain name, for example, ``*.example.com`` . Note the following: - The * must replace the entire label. For example, you can't specify ``*prod.example.com`` or ``prod*.example.com`` . - The * can't replace any of the middle labels, for example, marketing.*.example.com. - If you include * in any position other than the leftmost label in a domain name, DNS treats it as an * character (ASCII 42), not as a wildcard. .. epigraph:: You can't use the * wildcard for resource records sets that have a type of NS. You can use the * wildcard as the leftmost label in a domain name, for example, ``*.example.com`` . You can't use an * for one of the middle labels, for example, ``marketing.*.example.com`` . In addition, the * must replace the entire label; for example, you can't specify ``prod*.example.com`` .\n")
    type: str = pydantic.Field(..., description='The DNS record type. For information about different record types and how data is encoded for them, see `Supported DNS Resource Record Types <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html>`_ in the *Amazon Route 53 Developer Guide* . Valid values for basic resource record sets: ``A`` | ``AAAA`` | ``CAA`` | ``CNAME`` | ``DS`` | ``MX`` | ``NAPTR`` | ``NS`` | ``PTR`` | ``SOA`` | ``SPF`` | ``SRV`` | ``TXT`` Values for weighted, latency, geolocation, and failover resource record sets: ``A`` | ``AAAA`` | ``CAA`` | ``CNAME`` | ``MX`` | ``NAPTR`` | ``PTR`` | ``SPF`` | ``SRV`` | ``TXT`` . When creating a group of weighted, latency, geolocation, or failover resource record sets, specify the same value for all of the resource record sets in the group. Valid values for multivalue answer resource record sets: ``A`` | ``AAAA`` | ``MX`` | ``NAPTR`` | ``PTR`` | ``SPF`` | ``SRV`` | ``TXT`` .. epigraph:: SPF records were formerly used to verify the identity of the sender of email messages. However, we no longer recommend that you create resource record sets for which the value of ``Type`` is ``SPF`` . RFC 7208, *Sender Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1* , has been updated to say, "...[I]ts existence and mechanism defined in [RFC4408] have led to some interoperability issues. Accordingly, its use is no longer appropriate for SPF version 1; implementations are not to use it." In RFC 7208, see section 14.1, `The SPF DNS Record Type <https://docs.aws.amazon.com/http://tools.ietf.org/html/rfc7208#section-14.1>`_ . Values for alias resource record sets: - *Amazon API Gateway custom regional APIs and edge-optimized APIs:* ``A`` - *CloudFront distributions:* ``A`` If IPv6 is enabled for the distribution, create two resource record sets to route traffic to your distribution, one with a value of ``A`` and one with a value of ``AAAA`` . - *Amazon API Gateway environment that has a regionalized subdomain* : ``A`` - *ELB load balancers:* ``A`` | ``AAAA`` - *Amazon S3 buckets:* ``A`` - *Amazon Virtual Private Cloud interface VPC endpoints* ``A`` - *Another resource record set in this hosted zone:* Specify the type of the resource record set that you\'re creating the alias for. All values are supported except ``NS`` and ``SOA`` . .. epigraph:: If you\'re creating an alias record that has the same name as the hosted zone (known as the zone apex), you can\'t route traffic to a record for which the value of ``Type`` is ``CNAME`` . This is because the alias record must have the same type as the record you\'re routing traffic to, and creating a CNAME record for the zone apex isn\'t supported even for an alias record.\n')
    alias_target: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSet_AliasTargetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="*Alias resource record sets only:* Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to. If you're creating resource records sets for a private hosted zone, note the following: - You can't create an alias resource record set in a private hosted zone to route traffic to a CloudFront distribution. - For information about creating failover resource record sets in a private hosted zone, see `Configuring Failover in a Private Hosted Zone <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html>`_ in the *Amazon Route 53 Developer Guide* .\n")
    cidr_routing_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSet_CidrRoutingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The object that is specified in resource record set object when you are linking a resource record set to a CIDR location. A ``LocationName`` with an asterisk “*” can be used to create a default CIDR record. ``CollectionId`` is still required for default record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='*Optional:* Any comments you want to include about a change batch request.\n')
    failover: typing.Optional[str] = pydantic.Field(None, description="*Failover resource record sets only:* To configure failover, you add the ``Failover`` element to two resource record sets. For one resource record set, you specify ``PRIMARY`` as the value for ``Failover`` ; for the other resource record set, you specify ``SECONDARY`` . In addition, you include the ``HealthCheckId`` element and specify the health check that you want Amazon Route 53 to perform for each resource record set. Except where noted, the following failover behaviors assume that you have included the ``HealthCheckId`` element in both resource record sets: - When the primary resource record set is healthy, Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the secondary resource record set. - When the primary resource record set is unhealthy and the secondary resource record set is healthy, Route 53 responds to DNS queries with the applicable value from the secondary resource record set. - When the secondary resource record set is unhealthy, Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the primary resource record set. - If you omit the ``HealthCheckId`` element for the secondary resource record set, and if the primary resource record set is unhealthy, Route 53 always responds to DNS queries with the applicable value from the secondary resource record set. This is true regardless of the health of the associated endpoint. You can't create non-failover resource record sets that have the same values for the ``Name`` and ``Type`` elements as failover resource record sets. For failover alias resource record sets, you must also include the ``EvaluateTargetHealth`` element and set the value to true. For more information about configuring failover for Route 53, see the following topics in the *Amazon Route 53 Developer Guide* : - `Route 53 Health Checks and DNS Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html>`_ - `Configuring Failover in a Private Hosted Zone <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html>`_\n")
    geo_location: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSet_GeoLocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='*Geolocation resource record sets only:* A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query. For example, if you want all queries from Africa to be routed to a web server with an IP address of ``192.0.2.111`` , create a resource record set with a ``Type`` of ``A`` and a ``ContinentCode`` of ``AF`` . .. epigraph:: Although creating geolocation and geolocation alias resource record sets in a private hosted zone is allowed, it\'s not supported. If you create separate resource record sets for overlapping geographic regions (for example, one resource record set for a continent and one for a country on the same continent), priority goes to the smallest geographic region. This allows you to route most queries for a continent to one resource and to route queries for a country on that continent to a different resource. You can\'t create two geolocation resource record sets that specify the same geographic location. The value ``*`` in the ``CountryCode`` element matches all geographic locations that aren\'t specified in other geolocation resource record sets that have the same values for the ``Name`` and ``Type`` elements. .. epigraph:: Geolocation works by mapping IP addresses to locations. However, some IP addresses aren\'t mapped to geographic locations, so even if you create geolocation resource record sets that cover all seven continents, Route 53 will receive some DNS queries from locations that it can\'t identify. We recommend that you create a resource record set for which the value of ``CountryCode`` is ``*`` . Two groups of queries are routed to the resource that you specify in this record: queries that come from locations for which you haven\'t created geolocation resource record sets and queries from IP addresses that aren\'t mapped to a location. If you don\'t create a ``*`` resource record set, Route 53 returns a "no answer" response for queries from those locations. You can\'t create non-geolocation resource record sets that have the same values for the ``Name`` and ``Type`` elements as geolocation resource record sets.\n')
    health_check_id: typing.Optional[str] = pydantic.Field(None, description="If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the ``HealthCheckId`` element and specify the ID of the applicable health check. Route 53 determines whether a resource record set is healthy based on one of the following: - By periodically sending a request to the endpoint that is specified in the health check - By aggregating the status of a specified group of health checks (calculated health checks) - By determining the current state of a CloudWatch alarm (CloudWatch metric health checks) .. epigraph:: Route 53 doesn't check the health of the endpoint that is specified in the resource record set, for example, the endpoint specified by the IP address in the ``Value`` element. When you add a ``HealthCheckId`` element to a resource record set, Route 53 checks the health of the endpoint that you specified in the health check. For more information, see the following topics in the *Amazon Route 53 Developer Guide* : - `How Amazon Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`_ - `Route 53 Health Checks and DNS Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html>`_ - `Configuring Failover in a Private Hosted Zone <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html>`_ *When to Specify HealthCheckId* Specifying a value for ``HealthCheckId`` is useful only when Route 53 is choosing between two or more resource record sets to respond to a DNS query, and you want Route 53 to base the choice in part on the status of a health check. Configuring health checks makes sense only in the following configurations: - *Non-alias resource record sets* : You're checking the health of a group of non-alias resource record sets that have the same routing policy, name, and type (such as multiple weighted records named www.example.com with a type of A) and you specify health check IDs for all the resource record sets. If the health check status for a resource record set is healthy, Route 53 includes the record among the records that it responds to DNS queries with. If the health check status for a resource record set is unhealthy, Route 53 stops responding to DNS queries using the value for that resource record set. If the health check status for all resource record sets in the group is unhealthy, Route 53 considers all resource record sets in the group healthy and responds to DNS queries accordingly. - *Alias resource record sets* : You specify the following settings: - You set ``EvaluateTargetHealth`` to true for an alias resource record set in a group of resource record sets that have the same routing policy, name, and type (such as multiple weighted records named www.example.com with a type of A). - You configure the alias resource record set to route traffic to a non-alias resource record set in the same hosted zone. - You specify a health check ID for the non-alias resource record set. If the health check status is healthy, Route 53 considers the alias resource record set to be healthy and includes the alias record among the records that it responds to DNS queries with. If the health check status is unhealthy, Route 53 stops responding to DNS queries using the alias resource record set. .. epigraph:: The alias resource record set can also route traffic to a *group* of non-alias resource record sets that have the same routing policy, name, and type. In that configuration, associate health checks with all of the resource record sets in the group of non-alias resource record sets. *Geolocation Routing* For geolocation resource record sets, if an endpoint is unhealthy, Route 53 looks for a resource record set for the larger, associated geographic region. For example, suppose you have resource record sets for a state in the United States, for the entire United States, for North America, and a resource record set that has ``*`` for ``CountryCode`` is ``*`` , which applies to all locations. If the endpoint for the state resource record set is unhealthy, Route 53 checks for healthy resource record sets in the following order until it finds a resource record set for which the endpoint is healthy: - The United States - North America - The default resource record set *Specifying the Health Check Endpoint by Domain Name* If your health checks specify the endpoint only by domain name, we recommend that you create a separate health check for each endpoint. For example, create a health check for each ``HTTP`` server that is serving content for ``www.example.com`` . For the value of ``FullyQualifiedDomainName`` , specify the domain name of the server (such as ``us-east-2-www.example.com`` ), not the name of the resource record sets ( ``www.example.com`` ). .. epigraph:: Health check results will be unpredictable if you do the following: - Create a health check that has the same value for ``FullyQualifiedDomainName`` as the name of a resource record set. - Associate that health check with the resource record set.\n")
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the hosted zone that you want to create records in. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description='The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, ``www.example.com.`` ) as part of the ``HostedZoneName`` . When you create a stack using an AWS::Route53::RecordSet that specifies ``HostedZoneName`` , AWS CloudFormation attempts to find a hosted zone whose name matches the HostedZoneName. If AWS CloudFormation cannot find a hosted zone with a matching domain name, or if there is more than one hosted zone with the specified domain name, AWS CloudFormation will not create the stack. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n')
    multi_value_answer: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="*Multivalue answer resource record sets only* : To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify ``true`` for ``MultiValueAnswer`` . Note the following: - If you associate a health check with a multivalue answer resource record set, Amazon Route 53 responds to DNS queries with the corresponding IP address only when the health check is healthy. - If you don't associate a health check with a multivalue answer record, Route 53 always considers the record to be healthy. - Route 53 responds to DNS queries with up to eight healthy records; if you have eight or fewer healthy records, Route 53 responds to all DNS queries with all the healthy records. - If you have more than eight healthy records, Route 53 responds to different DNS resolvers with different combinations of healthy records. - When all records are unhealthy, Route 53 responds to DNS queries with up to eight unhealthy records. - If a resource becomes unavailable after a resolver caches a response, client software typically tries another of the IP addresses in the response. You can't create multivalue answer alias records.\n")
    region: typing.Optional[str] = pydantic.Field(None, description="*Latency-based resource record sets only:* The Amazon EC2 Region where you created the resource that this resource record set refers to. The resource typically is an AWS resource, such as an EC2 instance or an ELB load balancer, and is referred to by an IP address or a DNS domain name, depending on the record type. When Amazon Route 53 receives a DNS query for a domain name and type for which you have created latency resource record sets, Route 53 selects the latency resource record set that has the lowest latency between the end user and the associated Amazon EC2 Region. Route 53 then returns the value that is associated with the selected resource record set. Note the following: - You can only specify one ``ResourceRecord`` per latency resource record set. - You can only create one latency resource record set for each Amazon EC2 Region. - You aren't required to create latency resource record sets for all Amazon EC2 Regions. Route 53 will choose the region with the best latency from among the regions that you create latency resource record sets for. - You can't create non-latency resource record sets that have the same values for the ``Name`` and ``Type`` elements as latency resource record sets.\n")
    resource_records: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="One or more values that correspond with the value that you specified for the ``Type`` property. For example, if you specified ``A`` for ``Type`` , you specify one or more IP addresses in IPv4 format for ``ResourceRecords`` . For information about the format of values for each record type, see `Supported DNS Resource Record Types <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html>`_ in the *Amazon Route 53 Developer Guide* . Note the following: - You can specify more than one value for all record types except CNAME and SOA. - The maximum length of a value is 4000 characters. - If you're creating an alias record, omit ``ResourceRecords`` .\n")
    set_identifier: typing.Optional[str] = pydantic.Field(None, description='*Resource record sets that have a routing policy other than simple:* An identifier that differentiates among multiple resource record sets that have the same combination of name and type, such as multiple weighted resource record sets named acme.example.com that have a type of A. In a group of resource record sets that have the same name and type, the value of ``SetIdentifier`` must be unique for each resource record set. For information about routing policies, see `Choosing a Routing Policy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html>`_ in the *Amazon Route 53 Developer Guide* .\n')
    ttl: typing.Optional[str] = pydantic.Field(None, description="The resource record cache time to live (TTL), in seconds. Note the following:. - If you're creating or updating an alias resource record set, omit ``TTL`` . Amazon Route 53 uses the value of ``TTL`` for the alias target. - If you're associating this resource record set with a health check (if you're adding a ``HealthCheckId`` element), we recommend that you specify a ``TTL`` of 60 seconds or less so clients respond quickly to changes in health status. - All of the resource record sets in a group of weighted resource record sets must have the same value for ``TTL`` . - If a group of weighted resource record sets includes one or more weighted alias resource record sets for which the alias target is an ELB load balancer, we recommend that you specify a ``TTL`` of 60 seconds for all of the non-alias weighted resource record sets that have the same name and type. Values other than 60 seconds (the TTL for load balancers) will change the effect of the values that you specify for ``Weight`` .\n")
    weight: typing.Union[int, float, None] = pydantic.Field(None, description="*Weighted resource record sets only:* Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total. Note the following: - You must specify a value for the ``Weight`` element for every weighted resource record set. - You can only specify one ``ResourceRecord`` per weighted resource record set. - You can't create latency, failover, or geolocation resource record sets that have the same values for the ``Name`` and ``Type`` elements as weighted resource record sets. - You can create a maximum of 100 weighted resource record sets that have the same values for the ``Name`` and ``Type`` elements. - For weighted (but not weighted alias) resource record sets, if you set ``Weight`` to ``0`` for a resource record set, Route 53 never responds to queries with the applicable value for that resource record set. However, if you set ``Weight`` to ``0`` for all resource record sets that have the same combination of DNS name and type, traffic is routed to all resources with equal probability. The effect of setting ``Weight`` to ``0`` is different when you associate health checks with weighted resource record sets. For more information, see `Options for Configuring Route 53 Active-Active and Active-Passive Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html>`_ in the *Amazon Route 53 Developer Guide* .")
    _init_params: typing.ClassVar[list[str]] = ['name', 'type', 'alias_target', 'cidr_routing_config', 'comment', 'failover', 'geo_location', 'health_check_id', 'hosted_zone_id', 'hosted_zone_name', 'multi_value_answer', 'region', 'resource_records', 'set_identifier', 'ttl', 'weight']
    _method_names: typing.ClassVar[list[str]] = ['AliasTargetProperty', 'CidrRoutingConfigProperty', 'GeoLocationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnRecordSetDefConfig] = pydantic.Field(None)


class CfnRecordSetDefConfig(pydantic.BaseModel):
    AliasTargetProperty: typing.Optional[list[CfnRecordSetDefAliastargetpropertyParams]] = pydantic.Field(None, description='')
    CidrRoutingConfigProperty: typing.Optional[list[CfnRecordSetDefCidrroutingconfigpropertyParams]] = pydantic.Field(None, description='')
    GeoLocationProperty: typing.Optional[list[CfnRecordSetDefGeolocationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnRecordSetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnRecordSetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnRecordSetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnRecordSetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnRecordSetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnRecordSetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnRecordSetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnRecordSetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnRecordSetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnRecordSetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnRecordSetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnRecordSetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnRecordSetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnRecordSetDefAliastargetpropertyParams(pydantic.BaseModel):
    dns_name: str = pydantic.Field(..., description='')
    hosted_zone_id: str = pydantic.Field(..., description='')
    evaluate_target_health: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnRecordSetDefCidrroutingconfigpropertyParams(pydantic.BaseModel):
    collection_id: str = pydantic.Field(..., description='')
    location_name: str = pydantic.Field(..., description='')
    ...

class CfnRecordSetDefGeolocationpropertyParams(pydantic.BaseModel):
    continent_code: typing.Optional[str] = pydantic.Field(None, description='')
    country_code: typing.Optional[str] = pydantic.Field(None, description='')
    subdivision_code: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRecordSetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRecordSetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRecordSetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRecordSetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRecordSetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRecordSetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRecordSetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRecordSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRecordSetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRecordSetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRecordSetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnRecordSetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRecordSetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRecordSetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_route53.CfnRecordSetGroup
class CfnRecordSetGroupDef(BaseCfnResource):
    comment: typing.Optional[str] = pydantic.Field(None, description='*Optional:* Any comments you want to include about a change batch request.\n')
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the hosted zone that you want to create records in. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description="The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, ``www.example.com.`` ) as part of the ``HostedZoneName`` . When you create a stack using an ``AWS::Route53::RecordSet`` that specifies ``HostedZoneName`` , AWS CloudFormation attempts to find a hosted zone whose name matches the ``HostedZoneName`` . If AWS CloudFormation can't find a hosted zone with a matching domain name, or if there is more than one hosted zone with the specified domain name, AWS CloudFormation will not create the stack. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n")
    record_sets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSetGroup_RecordSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A complex type that contains one ``RecordSet`` element for each record that you want to create.')
    _init_params: typing.ClassVar[list[str]] = ['comment', 'hosted_zone_id', 'hosted_zone_name', 'record_sets']
    _method_names: typing.ClassVar[list[str]] = ['AliasTargetProperty', 'CidrRoutingConfigProperty', 'GeoLocationProperty', 'RecordSetProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSetGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnRecordSetGroupDefConfig] = pydantic.Field(None)


class CfnRecordSetGroupDefConfig(pydantic.BaseModel):
    AliasTargetProperty: typing.Optional[list[CfnRecordSetGroupDefAliastargetpropertyParams]] = pydantic.Field(None, description='')
    CidrRoutingConfigProperty: typing.Optional[list[CfnRecordSetGroupDefCidrroutingconfigpropertyParams]] = pydantic.Field(None, description='')
    GeoLocationProperty: typing.Optional[list[CfnRecordSetGroupDefGeolocationpropertyParams]] = pydantic.Field(None, description='')
    RecordSetProperty: typing.Optional[list[CfnRecordSetGroupDefRecordsetpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnRecordSetGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnRecordSetGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnRecordSetGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnRecordSetGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnRecordSetGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnRecordSetGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnRecordSetGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnRecordSetGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnRecordSetGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnRecordSetGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnRecordSetGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnRecordSetGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnRecordSetGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnRecordSetGroupDefAliastargetpropertyParams(pydantic.BaseModel):
    dns_name: str = pydantic.Field(..., description='')
    hosted_zone_id: str = pydantic.Field(..., description='')
    evaluate_target_health: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnRecordSetGroupDefCidrroutingconfigpropertyParams(pydantic.BaseModel):
    collection_id: str = pydantic.Field(..., description='')
    location_name: str = pydantic.Field(..., description='')
    ...

class CfnRecordSetGroupDefGeolocationpropertyParams(pydantic.BaseModel):
    continent_code: typing.Optional[str] = pydantic.Field(None, description='')
    country_code: typing.Optional[str] = pydantic.Field(None, description='')
    subdivision_code: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRecordSetGroupDefRecordsetpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    alias_target: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSetGroup_AliasTargetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cidr_routing_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSetGroup_CidrRoutingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failover: typing.Optional[str] = pydantic.Field(None, description='')
    geo_location: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSetGroup_GeoLocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    health_check_id: typing.Optional[str] = pydantic.Field(None, description='')
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description='')
    multi_value_answer: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    region: typing.Optional[str] = pydantic.Field(None, description='')
    resource_records: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    set_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    ttl: typing.Optional[str] = pydantic.Field(None, description='')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnRecordSetGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRecordSetGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRecordSetGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRecordSetGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRecordSetGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRecordSetGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRecordSetGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRecordSetGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRecordSetGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRecordSetGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRecordSetGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnRecordSetGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRecordSetGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRecordSetGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_route53.CfnCidrCollectionProps
class CfnCidrCollectionPropsDef(BaseCfnProperty):
    name: str = pydantic.Field(..., description='The name of a CIDR collection.\n')
    locations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnCidrCollection_LocationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A complex type that contains information about the list of CIDR locations.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-cidrcollection.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    cfn_cidr_collection_props = route53.CfnCidrCollectionProps(\n        name="name",\n\n        # the properties below are optional\n        locations=[route53.CfnCidrCollection.LocationProperty(\n            cidr_list=["cidrList"],\n            location_name="locationName"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'locations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnCidrCollectionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnDNSSECProps
class CfnDNSSECPropsDef(BaseCfnProperty):
    hosted_zone_id: str = pydantic.Field(..., description='A unique string (ID) that is used to identify a hosted zone. For example: ``Z00001111A1ABCaaABC11`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-dnssec.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    cfn_dNSSECProps = route53.CfnDNSSECProps(\n        hosted_zone_id="hostedZoneId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hosted_zone_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnDNSSECProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnHealthCheckProps
class CfnHealthCheckPropsDef(BaseCfnProperty):
    health_check_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHealthCheck_HealthCheckConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A complex type that contains detailed information about one health check. For the values to enter for ``HealthCheckConfig`` , see `HealthCheckConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html>`_\n')
    health_check_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHealthCheck_HealthCheckTagPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The ``HealthCheckTags`` property describes key-value pairs that are associated with an ``AWS::Route53::HealthCheck`` resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-healthcheck.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    cfn_health_check_props = route53.CfnHealthCheckProps(\n        health_check_config=route53.CfnHealthCheck.HealthCheckConfigProperty(\n            type="type",\n\n            # the properties below are optional\n            alarm_identifier=route53.CfnHealthCheck.AlarmIdentifierProperty(\n                name="name",\n                region="region"\n            ),\n            child_health_checks=["childHealthChecks"],\n            enable_sni=False,\n            failure_threshold=123,\n            fully_qualified_domain_name="fullyQualifiedDomainName",\n            health_threshold=123,\n            insufficient_data_health_status="insufficientDataHealthStatus",\n            inverted=False,\n            ip_address="ipAddress",\n            measure_latency=False,\n            port=123,\n            regions=["regions"],\n            request_interval=123,\n            resource_path="resourcePath",\n            routing_control_arn="routingControlArn",\n            search_string="searchString"\n        ),\n\n        # the properties below are optional\n        health_check_tags=[route53.CfnHealthCheck.HealthCheckTagProperty(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['health_check_config', 'health_check_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHealthCheckProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnHostedZoneProps
class CfnHostedZonePropsDef(BaseCfnProperty):
    hosted_zone_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHostedZone_HostedZoneConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A complex type that contains an optional comment. If you don't want to specify a comment, omit the ``HostedZoneConfig`` and ``Comment`` elements.\n")
    hosted_zone_tags: typing.Optional[typing.Sequence[typing.Union[models.aws_route53.CfnHostedZone_HostedZoneTagPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Adds, edits, or deletes tags for a health check or a hosted zone. For information about using tags for cost allocation, see `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`_ in the *AWS Billing and Cost Management User Guide* .\n')
    name: typing.Optional[str] = pydantic.Field(None, description="The name of the domain. Specify a fully qualified domain name, for example, *www.example.com* . The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats *www.example.com* (without a trailing dot) and *www.example.com.* (with a trailing dot) as identical. If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of ``NameServers`` that are returned by the ``Fn::GetAtt`` intrinsic function.\n")
    query_logging_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHostedZone_QueryLoggingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Creates a configuration for DNS query logging. After you create a query logging configuration, Amazon Route 53 begins to publish log data to an Amazon CloudWatch Logs log group. DNS query logs contain information about the queries that Route 53 receives for a specified public hosted zone, such as the following: - Route 53 edge location that responded to the DNS query - Domain or subdomain that was requested - DNS record type, such as A or AAAA - DNS response code, such as ``NoError`` or ``ServFail`` - **Log Group and Resource Policy** - Before you create a query logging configuration, perform the following operations. .. epigraph:: If you create a query logging configuration using the Route 53 console, Route 53 performs these operations automatically. - Create a CloudWatch Logs log group, and make note of the ARN, which you specify when you create a query logging configuration. Note the following: - You must create the log group in the us-east-1 region. - You must use the same AWS account to create the log group and the hosted zone that you want to configure query logging for. - When you create log groups for query logging, we recommend that you use a consistent prefix, for example: ``/aws/route53/ *hosted zone name*`` In the next step, you\'ll create a resource policy, which controls access to one or more log groups and the associated AWS resources, such as Route 53 hosted zones. There\'s a limit on the number of resource policies that you can create, so we recommend that you use a consistent prefix so you can use the same resource policy for all the log groups that you create for query logging. - Create a CloudWatch Logs resource policy, and give it the permissions that Route 53 needs to create log streams and to send query logs to log streams. For the value of ``Resource`` , specify the ARN for the log group that you created in the previous step. To use the same resource policy for all the CloudWatch Logs log groups that you created for query logging configurations, replace the hosted zone name with ``*`` , for example: ``arn:aws:logs:us-east-1:123412341234:log-group:/aws/route53/*`` To avoid the confused deputy problem, a security issue where an entity without a permission for an action can coerce a more-privileged entity to perform it, you can optionally limit the permissions that a service has to a resource in a resource-based policy by supplying the following values: - For ``aws:SourceArn`` , supply the hosted zone ARN used in creating the query logging configuration. For example, ``aws:SourceArn: arn:aws:route53:::hostedzone/hosted zone ID`` . - For ``aws:SourceAccount`` , supply the account ID for the account that creates the query logging configuration. For example, ``aws:SourceAccount:111111111111`` . For more information, see `The confused deputy problem <https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html>`_ in the *AWS IAM User Guide* . .. epigraph:: You can\'t use the CloudWatch console to create or edit a resource policy. You must use the CloudWatch API, one of the AWS SDKs, or the AWS CLI . - **Log Streams and Edge Locations** - When Route 53 finishes creating the configuration for DNS query logging, it does the following: - Creates a log stream for an edge location the first time that the edge location responds to DNS queries for the specified hosted zone. That log stream is used to log all queries that Route 53 responds to for that edge location. - Begins to send query logs to the applicable log stream. The name of each log stream is in the following format: ``*hosted zone ID* / *edge location code*`` The edge location code is a three-letter code and an arbitrarily assigned number, for example, DFW3. The three-letter code typically corresponds with the International Air Transport Association airport code for an airport near the edge location. (These abbreviations might change in the future.) For a list of edge locations, see "The Route 53 Global Network" on the `Route 53 Product Details <https://docs.aws.amazon.com/route53/details/>`_ page. - **Queries That Are Logged** - Query logs contain only the queries that DNS resolvers forward to Route 53. If a DNS resolver has already cached the response to a query (such as the IP address for a load balancer for example.com), the resolver will continue to return the cached response. It doesn\'t forward another query to Route 53 until the TTL for the corresponding resource record set expires. Depending on how many DNS queries are submitted for a resource record set, and depending on the TTL for that resource record set, query logs might contain information about only one query out of every several thousand queries that are submitted to DNS. For more information about how DNS works, see `Routing Internet Traffic to Your Website or Web Application <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html>`_ in the *Amazon Route 53 Developer Guide* . - **Log File Format** - For a list of the values in each query log and the format of each value, see `Logging DNS Queries <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html>`_ in the *Amazon Route 53 Developer Guide* . - **Pricing** - For information about charges for query logs, see `Amazon CloudWatch Pricing <https://docs.aws.amazon.com/cloudwatch/pricing/>`_ . - **How to Stop Logging** - If you want Route 53 to stop sending query logs to CloudWatch Logs, delete the query logging configuration. For more information, see `DeleteQueryLoggingConfig <https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteQueryLoggingConfig.html>`_ .\n')
    vpcs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnHostedZone_VPCPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='*Private hosted zones:* A complex type that contains information about the VPCs that are associated with the specified hosted zone. .. epigraph:: For public hosted zones, omit ``VPCs`` , ``VPCId`` , and ``VPCRegion`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    cfn_hosted_zone_props = route53.CfnHostedZoneProps(\n        hosted_zone_config=route53.CfnHostedZone.HostedZoneConfigProperty(\n            comment="comment"\n        ),\n        hosted_zone_tags=[route53.CfnHostedZone.HostedZoneTagProperty(\n            key="key",\n            value="value"\n        )],\n        name="name",\n        query_logging_config=route53.CfnHostedZone.QueryLoggingConfigProperty(\n            cloud_watch_logs_log_group_arn="cloudWatchLogsLogGroupArn"\n        ),\n        vpcs=[route53.CfnHostedZone.VPCProperty(\n            vpc_id="vpcId",\n            vpc_region="vpcRegion"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hosted_zone_config', 'hosted_zone_tags', 'name', 'query_logging_config', 'vpcs']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnHostedZoneProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnKeySigningKeyProps
class CfnKeySigningKeyPropsDef(BaseCfnProperty):
    hosted_zone_id: str = pydantic.Field(..., description='The unique string (ID) that is used to identify a hosted zone. For example: ``Z00001111A1ABCaaABC11`` .\n')
    key_management_service_arn: str = pydantic.Field(..., description='The Amazon resource name (ARN) for a customer managed customer master key (CMK) in AWS Key Management Service ( AWS KMS ). The ``KeyManagementServiceArn`` must be unique for each key-signing key (KSK) in a single hosted zone. For example: ``arn:aws:kms:us-east-1:111122223333:key/111a2222-a11b-1ab1-2ab2-1ab21a2b3a111`` .\n')
    name: str = pydantic.Field(..., description='A string used to identify a key-signing key (KSK). ``Name`` can include numbers, letters, and underscores (_). ``Name`` must be unique for each key-signing key in the same hosted zone.\n')
    status: str = pydantic.Field(..., description='A string that represents the current key-signing key (KSK) status. Status can have one of the following values: - **ACTIVE** - The KSK is being used for signing. - **INACTIVE** - The KSK is not being used for signing. - **DELETING** - The KSK is in the process of being deleted. - **ACTION_NEEDED** - There is a problem with the KSK that requires you to take action to resolve. For example, the customer managed key might have been deleted, or the permissions for the customer managed key might have been changed. - **INTERNAL_FAILURE** - There was an error during a request. Before you can continue to work with DNSSEC signing, including actions that involve this KSK, you must correct the problem. For example, you may need to activate or deactivate the KSK.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-keysigningkey.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    cfn_key_signing_key_props = route53.CfnKeySigningKeyProps(\n        hosted_zone_id="hostedZoneId",\n        key_management_service_arn="keyManagementServiceArn",\n        name="name",\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hosted_zone_id', 'key_management_service_arn', 'name', 'status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnKeySigningKeyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnRecordSetGroupProps
class CfnRecordSetGroupPropsDef(BaseCfnProperty):
    comment: typing.Optional[str] = pydantic.Field(None, description='*Optional:* Any comments you want to include about a change batch request.\n')
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the hosted zone that you want to create records in. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description="The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, ``www.example.com.`` ) as part of the ``HostedZoneName`` . When you create a stack using an ``AWS::Route53::RecordSet`` that specifies ``HostedZoneName`` , AWS CloudFormation attempts to find a hosted zone whose name matches the ``HostedZoneName`` . If AWS CloudFormation can't find a hosted zone with a matching domain name, or if there is more than one hosted zone with the specified domain name, AWS CloudFormation will not create the stack. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n")
    record_sets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSetGroup_RecordSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A complex type that contains one ``RecordSet`` element for each record that you want to create.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-recordsetgroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    cfn_record_set_group_props = route53.CfnRecordSetGroupProps(\n        comment="comment",\n        hosted_zone_id="hostedZoneId",\n        hosted_zone_name="hostedZoneName",\n        record_sets=[route53.CfnRecordSetGroup.RecordSetProperty(\n            name="name",\n            type="type",\n\n            # the properties below are optional\n            alias_target=route53.CfnRecordSetGroup.AliasTargetProperty(\n                dns_name="dnsName",\n                hosted_zone_id="hostedZoneId",\n\n                # the properties below are optional\n                evaluate_target_health=False\n            ),\n            cidr_routing_config=route53.CfnRecordSetGroup.CidrRoutingConfigProperty(\n                collection_id="collectionId",\n                location_name="locationName"\n            ),\n            failover="failover",\n            geo_location=route53.CfnRecordSetGroup.GeoLocationProperty(\n                continent_code="continentCode",\n                country_code="countryCode",\n                subdivision_code="subdivisionCode"\n            ),\n            health_check_id="healthCheckId",\n            hosted_zone_id="hostedZoneId",\n            hosted_zone_name="hostedZoneName",\n            multi_value_answer=False,\n            region="region",\n            resource_records=["resourceRecords"],\n            set_identifier="setIdentifier",\n            ttl="ttl",\n            weight=123\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comment', 'hosted_zone_id', 'hosted_zone_name', 'record_sets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSetGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53.CfnRecordSetProps
class CfnRecordSetPropsDef(BaseCfnProperty):
    name: str = pydantic.Field(..., description="For ``ChangeResourceRecordSets`` requests, the name of the record that you want to create, update, or delete. For ``ListResourceRecordSets`` responses, the name of a record in the specified hosted zone. *ChangeResourceRecordSets Only* Enter a fully qualified domain name, for example, ``www.example.com`` . You can optionally include a trailing dot. If you omit the trailing dot, Amazon Route 53 assumes that the domain name that you specify is fully qualified. This means that Route 53 treats ``www.example.com`` (without a trailing dot) and ``www.example.com.`` (with a trailing dot) as identical. For information about how to specify characters other than ``a-z`` , ``0-9`` , and ``-`` (hyphen) and how to specify internationalized domain names, see `DNS Domain Name Format <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html>`_ in the *Amazon Route 53 Developer Guide* . You can use the asterisk (*) wildcard to replace the leftmost label in a domain name, for example, ``*.example.com`` . Note the following: - The * must replace the entire label. For example, you can't specify ``*prod.example.com`` or ``prod*.example.com`` . - The * can't replace any of the middle labels, for example, marketing.*.example.com. - If you include * in any position other than the leftmost label in a domain name, DNS treats it as an * character (ASCII 42), not as a wildcard. .. epigraph:: You can't use the * wildcard for resource records sets that have a type of NS. You can use the * wildcard as the leftmost label in a domain name, for example, ``*.example.com`` . You can't use an * for one of the middle labels, for example, ``marketing.*.example.com`` . In addition, the * must replace the entire label; for example, you can't specify ``prod*.example.com`` .\n")
    type: str = pydantic.Field(..., description='The DNS record type. For information about different record types and how data is encoded for them, see `Supported DNS Resource Record Types <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html>`_ in the *Amazon Route 53 Developer Guide* . Valid values for basic resource record sets: ``A`` | ``AAAA`` | ``CAA`` | ``CNAME`` | ``DS`` | ``MX`` | ``NAPTR`` | ``NS`` | ``PTR`` | ``SOA`` | ``SPF`` | ``SRV`` | ``TXT`` Values for weighted, latency, geolocation, and failover resource record sets: ``A`` | ``AAAA`` | ``CAA`` | ``CNAME`` | ``MX`` | ``NAPTR`` | ``PTR`` | ``SPF`` | ``SRV`` | ``TXT`` . When creating a group of weighted, latency, geolocation, or failover resource record sets, specify the same value for all of the resource record sets in the group. Valid values for multivalue answer resource record sets: ``A`` | ``AAAA`` | ``MX`` | ``NAPTR`` | ``PTR`` | ``SPF`` | ``SRV`` | ``TXT`` .. epigraph:: SPF records were formerly used to verify the identity of the sender of email messages. However, we no longer recommend that you create resource record sets for which the value of ``Type`` is ``SPF`` . RFC 7208, *Sender Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1* , has been updated to say, "...[I]ts existence and mechanism defined in [RFC4408] have led to some interoperability issues. Accordingly, its use is no longer appropriate for SPF version 1; implementations are not to use it." In RFC 7208, see section 14.1, `The SPF DNS Record Type <https://docs.aws.amazon.com/http://tools.ietf.org/html/rfc7208#section-14.1>`_ . Values for alias resource record sets: - *Amazon API Gateway custom regional APIs and edge-optimized APIs:* ``A`` - *CloudFront distributions:* ``A`` If IPv6 is enabled for the distribution, create two resource record sets to route traffic to your distribution, one with a value of ``A`` and one with a value of ``AAAA`` . - *Amazon API Gateway environment that has a regionalized subdomain* : ``A`` - *ELB load balancers:* ``A`` | ``AAAA`` - *Amazon S3 buckets:* ``A`` - *Amazon Virtual Private Cloud interface VPC endpoints* ``A`` - *Another resource record set in this hosted zone:* Specify the type of the resource record set that you\'re creating the alias for. All values are supported except ``NS`` and ``SOA`` . .. epigraph:: If you\'re creating an alias record that has the same name as the hosted zone (known as the zone apex), you can\'t route traffic to a record for which the value of ``Type`` is ``CNAME`` . This is because the alias record must have the same type as the record you\'re routing traffic to, and creating a CNAME record for the zone apex isn\'t supported even for an alias record.\n')
    alias_target: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSet_AliasTargetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="*Alias resource record sets only:* Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to. If you're creating resource records sets for a private hosted zone, note the following: - You can't create an alias resource record set in a private hosted zone to route traffic to a CloudFront distribution. - For information about creating failover resource record sets in a private hosted zone, see `Configuring Failover in a Private Hosted Zone <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html>`_ in the *Amazon Route 53 Developer Guide* .\n")
    cidr_routing_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSet_CidrRoutingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The object that is specified in resource record set object when you are linking a resource record set to a CIDR location. A ``LocationName`` with an asterisk “*” can be used to create a default CIDR record. ``CollectionId`` is still required for default record.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='*Optional:* Any comments you want to include about a change batch request.\n')
    failover: typing.Optional[str] = pydantic.Field(None, description="*Failover resource record sets only:* To configure failover, you add the ``Failover`` element to two resource record sets. For one resource record set, you specify ``PRIMARY`` as the value for ``Failover`` ; for the other resource record set, you specify ``SECONDARY`` . In addition, you include the ``HealthCheckId`` element and specify the health check that you want Amazon Route 53 to perform for each resource record set. Except where noted, the following failover behaviors assume that you have included the ``HealthCheckId`` element in both resource record sets: - When the primary resource record set is healthy, Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the secondary resource record set. - When the primary resource record set is unhealthy and the secondary resource record set is healthy, Route 53 responds to DNS queries with the applicable value from the secondary resource record set. - When the secondary resource record set is unhealthy, Route 53 responds to DNS queries with the applicable value from the primary resource record set regardless of the health of the primary resource record set. - If you omit the ``HealthCheckId`` element for the secondary resource record set, and if the primary resource record set is unhealthy, Route 53 always responds to DNS queries with the applicable value from the secondary resource record set. This is true regardless of the health of the associated endpoint. You can't create non-failover resource record sets that have the same values for the ``Name`` and ``Type`` elements as failover resource record sets. For failover alias resource record sets, you must also include the ``EvaluateTargetHealth`` element and set the value to true. For more information about configuring failover for Route 53, see the following topics in the *Amazon Route 53 Developer Guide* : - `Route 53 Health Checks and DNS Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html>`_ - `Configuring Failover in a Private Hosted Zone <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html>`_\n")
    geo_location: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_route53.CfnRecordSet_GeoLocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='*Geolocation resource record sets only:* A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query. For example, if you want all queries from Africa to be routed to a web server with an IP address of ``192.0.2.111`` , create a resource record set with a ``Type`` of ``A`` and a ``ContinentCode`` of ``AF`` . .. epigraph:: Although creating geolocation and geolocation alias resource record sets in a private hosted zone is allowed, it\'s not supported. If you create separate resource record sets for overlapping geographic regions (for example, one resource record set for a continent and one for a country on the same continent), priority goes to the smallest geographic region. This allows you to route most queries for a continent to one resource and to route queries for a country on that continent to a different resource. You can\'t create two geolocation resource record sets that specify the same geographic location. The value ``*`` in the ``CountryCode`` element matches all geographic locations that aren\'t specified in other geolocation resource record sets that have the same values for the ``Name`` and ``Type`` elements. .. epigraph:: Geolocation works by mapping IP addresses to locations. However, some IP addresses aren\'t mapped to geographic locations, so even if you create geolocation resource record sets that cover all seven continents, Route 53 will receive some DNS queries from locations that it can\'t identify. We recommend that you create a resource record set for which the value of ``CountryCode`` is ``*`` . Two groups of queries are routed to the resource that you specify in this record: queries that come from locations for which you haven\'t created geolocation resource record sets and queries from IP addresses that aren\'t mapped to a location. If you don\'t create a ``*`` resource record set, Route 53 returns a "no answer" response for queries from those locations. You can\'t create non-geolocation resource record sets that have the same values for the ``Name`` and ``Type`` elements as geolocation resource record sets.\n')
    health_check_id: typing.Optional[str] = pydantic.Field(None, description="If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the ``HealthCheckId`` element and specify the ID of the applicable health check. Route 53 determines whether a resource record set is healthy based on one of the following: - By periodically sending a request to the endpoint that is specified in the health check - By aggregating the status of a specified group of health checks (calculated health checks) - By determining the current state of a CloudWatch alarm (CloudWatch metric health checks) .. epigraph:: Route 53 doesn't check the health of the endpoint that is specified in the resource record set, for example, the endpoint specified by the IP address in the ``Value`` element. When you add a ``HealthCheckId`` element to a resource record set, Route 53 checks the health of the endpoint that you specified in the health check. For more information, see the following topics in the *Amazon Route 53 Developer Guide* : - `How Amazon Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`_ - `Route 53 Health Checks and DNS Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html>`_ - `Configuring Failover in a Private Hosted Zone <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html>`_ *When to Specify HealthCheckId* Specifying a value for ``HealthCheckId`` is useful only when Route 53 is choosing between two or more resource record sets to respond to a DNS query, and you want Route 53 to base the choice in part on the status of a health check. Configuring health checks makes sense only in the following configurations: - *Non-alias resource record sets* : You're checking the health of a group of non-alias resource record sets that have the same routing policy, name, and type (such as multiple weighted records named www.example.com with a type of A) and you specify health check IDs for all the resource record sets. If the health check status for a resource record set is healthy, Route 53 includes the record among the records that it responds to DNS queries with. If the health check status for a resource record set is unhealthy, Route 53 stops responding to DNS queries using the value for that resource record set. If the health check status for all resource record sets in the group is unhealthy, Route 53 considers all resource record sets in the group healthy and responds to DNS queries accordingly. - *Alias resource record sets* : You specify the following settings: - You set ``EvaluateTargetHealth`` to true for an alias resource record set in a group of resource record sets that have the same routing policy, name, and type (such as multiple weighted records named www.example.com with a type of A). - You configure the alias resource record set to route traffic to a non-alias resource record set in the same hosted zone. - You specify a health check ID for the non-alias resource record set. If the health check status is healthy, Route 53 considers the alias resource record set to be healthy and includes the alias record among the records that it responds to DNS queries with. If the health check status is unhealthy, Route 53 stops responding to DNS queries using the alias resource record set. .. epigraph:: The alias resource record set can also route traffic to a *group* of non-alias resource record sets that have the same routing policy, name, and type. In that configuration, associate health checks with all of the resource record sets in the group of non-alias resource record sets. *Geolocation Routing* For geolocation resource record sets, if an endpoint is unhealthy, Route 53 looks for a resource record set for the larger, associated geographic region. For example, suppose you have resource record sets for a state in the United States, for the entire United States, for North America, and a resource record set that has ``*`` for ``CountryCode`` is ``*`` , which applies to all locations. If the endpoint for the state resource record set is unhealthy, Route 53 checks for healthy resource record sets in the following order until it finds a resource record set for which the endpoint is healthy: - The United States - North America - The default resource record set *Specifying the Health Check Endpoint by Domain Name* If your health checks specify the endpoint only by domain name, we recommend that you create a separate health check for each endpoint. For example, create a health check for each ``HTTP`` server that is serving content for ``www.example.com`` . For the value of ``FullyQualifiedDomainName`` , specify the domain name of the server (such as ``us-east-2-www.example.com`` ), not the name of the resource record sets ( ``www.example.com`` ). .. epigraph:: Health check results will be unpredictable if you do the following: - Create a health check that has the same value for ``FullyQualifiedDomainName`` as the name of a resource record set. - Associate that health check with the resource record set.\n")
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the hosted zone that you want to create records in. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description='The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, ``www.example.com.`` ) as part of the ``HostedZoneName`` . When you create a stack using an AWS::Route53::RecordSet that specifies ``HostedZoneName`` , AWS CloudFormation attempts to find a hosted zone whose name matches the HostedZoneName. If AWS CloudFormation cannot find a hosted zone with a matching domain name, or if there is more than one hosted zone with the specified domain name, AWS CloudFormation will not create the stack. Specify either ``HostedZoneName`` or ``HostedZoneId`` , but not both. If you have multiple hosted zones with the same domain name, you must specify the hosted zone using ``HostedZoneId`` .\n')
    multi_value_answer: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="*Multivalue answer resource record sets only* : To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify ``true`` for ``MultiValueAnswer`` . Note the following: - If you associate a health check with a multivalue answer resource record set, Amazon Route 53 responds to DNS queries with the corresponding IP address only when the health check is healthy. - If you don't associate a health check with a multivalue answer record, Route 53 always considers the record to be healthy. - Route 53 responds to DNS queries with up to eight healthy records; if you have eight or fewer healthy records, Route 53 responds to all DNS queries with all the healthy records. - If you have more than eight healthy records, Route 53 responds to different DNS resolvers with different combinations of healthy records. - When all records are unhealthy, Route 53 responds to DNS queries with up to eight unhealthy records. - If a resource becomes unavailable after a resolver caches a response, client software typically tries another of the IP addresses in the response. You can't create multivalue answer alias records.\n")
    region: typing.Optional[str] = pydantic.Field(None, description="*Latency-based resource record sets only:* The Amazon EC2 Region where you created the resource that this resource record set refers to. The resource typically is an AWS resource, such as an EC2 instance or an ELB load balancer, and is referred to by an IP address or a DNS domain name, depending on the record type. When Amazon Route 53 receives a DNS query for a domain name and type for which you have created latency resource record sets, Route 53 selects the latency resource record set that has the lowest latency between the end user and the associated Amazon EC2 Region. Route 53 then returns the value that is associated with the selected resource record set. Note the following: - You can only specify one ``ResourceRecord`` per latency resource record set. - You can only create one latency resource record set for each Amazon EC2 Region. - You aren't required to create latency resource record sets for all Amazon EC2 Regions. Route 53 will choose the region with the best latency from among the regions that you create latency resource record sets for. - You can't create non-latency resource record sets that have the same values for the ``Name`` and ``Type`` elements as latency resource record sets.\n")
    resource_records: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="One or more values that correspond with the value that you specified for the ``Type`` property. For example, if you specified ``A`` for ``Type`` , you specify one or more IP addresses in IPv4 format for ``ResourceRecords`` . For information about the format of values for each record type, see `Supported DNS Resource Record Types <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html>`_ in the *Amazon Route 53 Developer Guide* . Note the following: - You can specify more than one value for all record types except CNAME and SOA. - The maximum length of a value is 4000 characters. - If you're creating an alias record, omit ``ResourceRecords`` .\n")
    set_identifier: typing.Optional[str] = pydantic.Field(None, description='*Resource record sets that have a routing policy other than simple:* An identifier that differentiates among multiple resource record sets that have the same combination of name and type, such as multiple weighted resource record sets named acme.example.com that have a type of A. In a group of resource record sets that have the same name and type, the value of ``SetIdentifier`` must be unique for each resource record set. For information about routing policies, see `Choosing a Routing Policy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html>`_ in the *Amazon Route 53 Developer Guide* .\n')
    ttl: typing.Optional[str] = pydantic.Field(None, description="The resource record cache time to live (TTL), in seconds. Note the following:. - If you're creating or updating an alias resource record set, omit ``TTL`` . Amazon Route 53 uses the value of ``TTL`` for the alias target. - If you're associating this resource record set with a health check (if you're adding a ``HealthCheckId`` element), we recommend that you specify a ``TTL`` of 60 seconds or less so clients respond quickly to changes in health status. - All of the resource record sets in a group of weighted resource record sets must have the same value for ``TTL`` . - If a group of weighted resource record sets includes one or more weighted alias resource record sets for which the alias target is an ELB load balancer, we recommend that you specify a ``TTL`` of 60 seconds for all of the non-alias weighted resource record sets that have the same name and type. Values other than 60 seconds (the TTL for load balancers) will change the effect of the values that you specify for ``Weight`` .\n")
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='*Weighted resource record sets only:* Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource\'s weight to the total. Note the following: - You must specify a value for the ``Weight`` element for every weighted resource record set. - You can only specify one ``ResourceRecord`` per weighted resource record set. - You can\'t create latency, failover, or geolocation resource record sets that have the same values for the ``Name`` and ``Type`` elements as weighted resource record sets. - You can create a maximum of 100 weighted resource record sets that have the same values for the ``Name`` and ``Type`` elements. - For weighted (but not weighted alias) resource record sets, if you set ``Weight`` to ``0`` for a resource record set, Route 53 never responds to queries with the applicable value for that resource record set. However, if you set ``Weight`` to ``0`` for all resource record sets that have the same combination of DNS name and type, traffic is routed to all resources with equal probability. The effect of setting ``Weight`` to ``0`` is different when you associate health checks with weighted resource record sets. For more information, see `Options for Configuring Route 53 Active-Active and Active-Passive Failover <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html>`_ in the *Amazon Route 53 Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_route53 as route53\n\n    cfn_record_set_props = route53.CfnRecordSetProps(\n        name="name",\n        type="type",\n\n        # the properties below are optional\n        alias_target=route53.CfnRecordSet.AliasTargetProperty(\n            dns_name="dnsName",\n            hosted_zone_id="hostedZoneId",\n\n            # the properties below are optional\n            evaluate_target_health=False\n        ),\n        cidr_routing_config=route53.CfnRecordSet.CidrRoutingConfigProperty(\n            collection_id="collectionId",\n            location_name="locationName"\n        ),\n        comment="comment",\n        failover="failover",\n        geo_location=route53.CfnRecordSet.GeoLocationProperty(\n            continent_code="continentCode",\n            country_code="countryCode",\n            subdivision_code="subdivisionCode"\n        ),\n        health_check_id="healthCheckId",\n        hosted_zone_id="hostedZoneId",\n        hosted_zone_name="hostedZoneName",\n        multi_value_answer=False,\n        region="region",\n        resource_records=["resourceRecords"],\n        set_identifier="setIdentifier",\n        ttl="ttl",\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'type', 'alias_target', 'cidr_routing_config', 'comment', 'failover', 'geo_location', 'health_check_id', 'hosted_zone_id', 'hosted_zone_name', 'multi_value_answer', 'region', 'resource_records', 'set_identifier', 'ttl', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53.CfnRecordSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    RecordTarget: typing.Optional[dict[str, RecordTargetDef]] = pydantic.Field(None)
    AaaaRecord: typing.Optional[dict[str, AaaaRecordDef]] = pydantic.Field(None)
    ARecord: typing.Optional[dict[str, ARecordDef]] = pydantic.Field(None)
    CaaAmazonRecord: typing.Optional[dict[str, CaaAmazonRecordDef]] = pydantic.Field(None)
    CaaRecord: typing.Optional[dict[str, CaaRecordDef]] = pydantic.Field(None)
    CnameRecord: typing.Optional[dict[str, CnameRecordDef]] = pydantic.Field(None)
    CrossAccountZoneDelegationRecord: typing.Optional[dict[str, CrossAccountZoneDelegationRecordDef]] = pydantic.Field(None)
    DsRecord: typing.Optional[dict[str, DsRecordDef]] = pydantic.Field(None)
    HostedZone: typing.Optional[dict[str, HostedZoneDef]] = pydantic.Field(None)
    MxRecord: typing.Optional[dict[str, MxRecordDef]] = pydantic.Field(None)
    NsRecord: typing.Optional[dict[str, NsRecordDef]] = pydantic.Field(None)
    PrivateHostedZone: typing.Optional[dict[str, PrivateHostedZoneDef]] = pydantic.Field(None)
    PublicHostedZone: typing.Optional[dict[str, PublicHostedZoneDef]] = pydantic.Field(None)
    RecordSet: typing.Optional[dict[str, RecordSetDef]] = pydantic.Field(None)
    SrvRecord: typing.Optional[dict[str, SrvRecordDef]] = pydantic.Field(None)
    TxtRecord: typing.Optional[dict[str, TxtRecordDef]] = pydantic.Field(None)
    VpcEndpointServiceDomainName: typing.Optional[dict[str, VpcEndpointServiceDomainNameDef]] = pydantic.Field(None)
    ZoneDelegationRecord: typing.Optional[dict[str, ZoneDelegationRecordDef]] = pydantic.Field(None)
    AaaaRecordProps: typing.Optional[dict[str, AaaaRecordPropsDef]] = pydantic.Field(None)
    AliasRecordTargetConfig: typing.Optional[dict[str, AliasRecordTargetConfigDef]] = pydantic.Field(None)
    ARecordProps: typing.Optional[dict[str, ARecordPropsDef]] = pydantic.Field(None)
    CaaAmazonRecordProps: typing.Optional[dict[str, CaaAmazonRecordPropsDef]] = pydantic.Field(None)
    CaaRecordProps: typing.Optional[dict[str, CaaRecordPropsDef]] = pydantic.Field(None)
    CaaRecordValue: typing.Optional[dict[str, CaaRecordValueDef]] = pydantic.Field(None)
    CfnCidrCollection_LocationProperty: typing.Optional[dict[str, CfnCidrCollection_LocationPropertyDef]] = pydantic.Field(None)
    CfnHealthCheck_AlarmIdentifierProperty: typing.Optional[dict[str, CfnHealthCheck_AlarmIdentifierPropertyDef]] = pydantic.Field(None)
    CfnHealthCheck_HealthCheckConfigProperty: typing.Optional[dict[str, CfnHealthCheck_HealthCheckConfigPropertyDef]] = pydantic.Field(None)
    CfnHealthCheck_HealthCheckTagProperty: typing.Optional[dict[str, CfnHealthCheck_HealthCheckTagPropertyDef]] = pydantic.Field(None)
    CfnHostedZone_HostedZoneConfigProperty: typing.Optional[dict[str, CfnHostedZone_HostedZoneConfigPropertyDef]] = pydantic.Field(None)
    CfnHostedZone_HostedZoneTagProperty: typing.Optional[dict[str, CfnHostedZone_HostedZoneTagPropertyDef]] = pydantic.Field(None)
    CfnHostedZone_QueryLoggingConfigProperty: typing.Optional[dict[str, CfnHostedZone_QueryLoggingConfigPropertyDef]] = pydantic.Field(None)
    CfnHostedZone_VPCProperty: typing.Optional[dict[str, CfnHostedZone_VPCPropertyDef]] = pydantic.Field(None)
    CfnRecordSet_AliasTargetProperty: typing.Optional[dict[str, CfnRecordSet_AliasTargetPropertyDef]] = pydantic.Field(None)
    CfnRecordSet_CidrRoutingConfigProperty: typing.Optional[dict[str, CfnRecordSet_CidrRoutingConfigPropertyDef]] = pydantic.Field(None)
    CfnRecordSet_GeoLocationProperty: typing.Optional[dict[str, CfnRecordSet_GeoLocationPropertyDef]] = pydantic.Field(None)
    CfnRecordSetGroup_AliasTargetProperty: typing.Optional[dict[str, CfnRecordSetGroup_AliasTargetPropertyDef]] = pydantic.Field(None)
    CfnRecordSetGroup_CidrRoutingConfigProperty: typing.Optional[dict[str, CfnRecordSetGroup_CidrRoutingConfigPropertyDef]] = pydantic.Field(None)
    CfnRecordSetGroup_GeoLocationProperty: typing.Optional[dict[str, CfnRecordSetGroup_GeoLocationPropertyDef]] = pydantic.Field(None)
    CfnRecordSetGroup_RecordSetProperty: typing.Optional[dict[str, CfnRecordSetGroup_RecordSetPropertyDef]] = pydantic.Field(None)
    CnameRecordProps: typing.Optional[dict[str, CnameRecordPropsDef]] = pydantic.Field(None)
    CommonHostedZoneProps: typing.Optional[dict[str, CommonHostedZonePropsDef]] = pydantic.Field(None)
    CrossAccountZoneDelegationRecordProps: typing.Optional[dict[str, CrossAccountZoneDelegationRecordPropsDef]] = pydantic.Field(None)
    DsRecordProps: typing.Optional[dict[str, DsRecordPropsDef]] = pydantic.Field(None)
    HostedZoneAttributes: typing.Optional[dict[str, HostedZoneAttributesDef]] = pydantic.Field(None)
    HostedZoneProps: typing.Optional[dict[str, HostedZonePropsDef]] = pydantic.Field(None)
    HostedZoneProviderProps: typing.Optional[dict[str, HostedZoneProviderPropsDef]] = pydantic.Field(None)
    MxRecordProps: typing.Optional[dict[str, MxRecordPropsDef]] = pydantic.Field(None)
    MxRecordValue: typing.Optional[dict[str, MxRecordValueDef]] = pydantic.Field(None)
    NsRecordProps: typing.Optional[dict[str, NsRecordPropsDef]] = pydantic.Field(None)
    PrivateHostedZoneProps: typing.Optional[dict[str, PrivateHostedZonePropsDef]] = pydantic.Field(None)
    PublicHostedZoneAttributes: typing.Optional[dict[str, PublicHostedZoneAttributesDef]] = pydantic.Field(None)
    PublicHostedZoneProps: typing.Optional[dict[str, PublicHostedZonePropsDef]] = pydantic.Field(None)
    RecordSetOptions: typing.Optional[dict[str, RecordSetOptionsDef]] = pydantic.Field(None)
    RecordSetProps: typing.Optional[dict[str, RecordSetPropsDef]] = pydantic.Field(None)
    SrvRecordProps: typing.Optional[dict[str, SrvRecordPropsDef]] = pydantic.Field(None)
    SrvRecordValue: typing.Optional[dict[str, SrvRecordValueDef]] = pydantic.Field(None)
    TxtRecordProps: typing.Optional[dict[str, TxtRecordPropsDef]] = pydantic.Field(None)
    VpcEndpointServiceDomainNameProps: typing.Optional[dict[str, VpcEndpointServiceDomainNamePropsDef]] = pydantic.Field(None)
    ZoneDelegationOptions: typing.Optional[dict[str, ZoneDelegationOptionsDef]] = pydantic.Field(None)
    ZoneDelegationRecordProps: typing.Optional[dict[str, ZoneDelegationRecordPropsDef]] = pydantic.Field(None)
    CfnCidrCollection: typing.Optional[dict[str, CfnCidrCollectionDef]] = pydantic.Field(None)
    CfnDNSSEC: typing.Optional[dict[str, CfnDNSSECDef]] = pydantic.Field(None)
    CfnHealthCheck: typing.Optional[dict[str, CfnHealthCheckDef]] = pydantic.Field(None)
    CfnHostedZone: typing.Optional[dict[str, CfnHostedZoneDef]] = pydantic.Field(None)
    CfnKeySigningKey: typing.Optional[dict[str, CfnKeySigningKeyDef]] = pydantic.Field(None)
    CfnRecordSet: typing.Optional[dict[str, CfnRecordSetDef]] = pydantic.Field(None)
    CfnRecordSetGroup: typing.Optional[dict[str, CfnRecordSetGroupDef]] = pydantic.Field(None)
    CfnCidrCollectionProps: typing.Optional[dict[str, CfnCidrCollectionPropsDef]] = pydantic.Field(None)
    CfnDNSSECProps: typing.Optional[dict[str, CfnDNSSECPropsDef]] = pydantic.Field(None)
    CfnHealthCheckProps: typing.Optional[dict[str, CfnHealthCheckPropsDef]] = pydantic.Field(None)
    CfnHostedZoneProps: typing.Optional[dict[str, CfnHostedZonePropsDef]] = pydantic.Field(None)
    CfnKeySigningKeyProps: typing.Optional[dict[str, CfnKeySigningKeyPropsDef]] = pydantic.Field(None)
    CfnRecordSetGroupProps: typing.Optional[dict[str, CfnRecordSetGroupPropsDef]] = pydantic.Field(None)
    CfnRecordSetProps: typing.Optional[dict[str, CfnRecordSetPropsDef]] = pydantic.Field(None)
    ...
