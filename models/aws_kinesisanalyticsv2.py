from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationCodeConfigurationProperty
class CfnApplication_ApplicationCodeConfigurationPropertyDef(BaseStruct):
    code_content: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CodeContentPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The location and type of the application code.\n')
    code_content_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the code content is in text or zip format.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-applicationcodeconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    application_code_configuration_property = kinesisanalyticsv2.CfnApplication.ApplicationCodeConfigurationProperty(\n        code_content=kinesisanalyticsv2.CfnApplication.CodeContentProperty(\n            s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty(\n                bucket_arn="bucketArn",\n                file_key="fileKey",\n\n                # the properties below are optional\n                object_version="objectVersion"\n            ),\n            text_content="textContent",\n            zip_file_content="zipFileContent"\n        ),\n        code_content_type="codeContentType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['code_content', 'code_content_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationCodeConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationConfigurationProperty
class CfnApplication_ApplicationConfigurationPropertyDef(BaseStruct):
    application_code_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationCodeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The code location and type parameters for a Managed Service for Apache Flink application.\n')
    application_snapshot_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationSnapshotConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes whether snapshots are enabled for a Managed Service for Apache Flink application.\n')
    application_system_rollback_configuration: typing.Union[models.UnsupportedResource, aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationSystemRollbackConfigurationProperty, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes whether system initiated rollbacks are enabled for a Flink-based Kinesis Data Analytics application.\n')
    environment_properties: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_EnvironmentPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes execution properties for a Managed Service for Apache Flink application.\n')
    flink_application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_FlinkApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The creation and update parameters for a Managed Service for Apache Flink application.\n')
    sql_application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_SqlApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The creation and update parameters for a SQL-based Kinesis Data Analytics application.\n')
    vpc_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_VpcConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The array of descriptions of VPC configurations available to the application.\n')
    zeppelin_application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ZeppelinApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration parameters for a Kinesis Data Analytics Studio notebook.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-applicationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    application_configuration_property = kinesisanalyticsv2.CfnApplication.ApplicationConfigurationProperty(\n        application_code_configuration=kinesisanalyticsv2.CfnApplication.ApplicationCodeConfigurationProperty(\n            code_content=kinesisanalyticsv2.CfnApplication.CodeContentProperty(\n                s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty(\n                    bucket_arn="bucketArn",\n                    file_key="fileKey",\n\n                    # the properties below are optional\n                    object_version="objectVersion"\n                ),\n                text_content="textContent",\n                zip_file_content="zipFileContent"\n            ),\n            code_content_type="codeContentType"\n        ),\n        application_snapshot_configuration=kinesisanalyticsv2.CfnApplication.ApplicationSnapshotConfigurationProperty(\n            snapshots_enabled=False\n        ),\n        application_system_rollback_configuration=kinesisanalyticsv2.CfnApplication.ApplicationSystemRollbackConfigurationProperty(\n            rollback_enabled=False\n        ),\n        environment_properties=kinesisanalyticsv2.CfnApplication.EnvironmentPropertiesProperty(\n            property_groups=[kinesisanalyticsv2.CfnApplication.PropertyGroupProperty(\n                property_group_id="propertyGroupId",\n                property_map={\n                    "property_map_key": "propertyMap"\n                }\n            )]\n        ),\n        flink_application_configuration=kinesisanalyticsv2.CfnApplication.FlinkApplicationConfigurationProperty(\n            checkpoint_configuration=kinesisanalyticsv2.CfnApplication.CheckpointConfigurationProperty(\n                configuration_type="configurationType",\n\n                # the properties below are optional\n                checkpointing_enabled=False,\n                checkpoint_interval=123,\n                min_pause_between_checkpoints=123\n            ),\n            monitoring_configuration=kinesisanalyticsv2.CfnApplication.MonitoringConfigurationProperty(\n                configuration_type="configurationType",\n\n                # the properties below are optional\n                log_level="logLevel",\n                metrics_level="metricsLevel"\n            ),\n            parallelism_configuration=kinesisanalyticsv2.CfnApplication.ParallelismConfigurationProperty(\n                configuration_type="configurationType",\n\n                # the properties below are optional\n                auto_scaling_enabled=False,\n                parallelism=123,\n                parallelism_per_kpu=123\n            )\n        ),\n        sql_application_configuration=kinesisanalyticsv2.CfnApplication.SqlApplicationConfigurationProperty(\n            inputs=[kinesisanalyticsv2.CfnApplication.InputProperty(\n                input_schema=kinesisanalyticsv2.CfnApplication.InputSchemaProperty(\n                    record_columns=[kinesisanalyticsv2.CfnApplication.RecordColumnProperty(\n                        name="name",\n                        sql_type="sqlType",\n\n                        # the properties below are optional\n                        mapping="mapping"\n                    )],\n                    record_format=kinesisanalyticsv2.CfnApplication.RecordFormatProperty(\n                        record_format_type="recordFormatType",\n\n                        # the properties below are optional\n                        mapping_parameters=kinesisanalyticsv2.CfnApplication.MappingParametersProperty(\n                            csv_mapping_parameters=kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty(\n                                record_column_delimiter="recordColumnDelimiter",\n                                record_row_delimiter="recordRowDelimiter"\n                            ),\n                            json_mapping_parameters=kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty(\n                                record_row_path="recordRowPath"\n                            )\n                        )\n                    ),\n\n                    # the properties below are optional\n                    record_encoding="recordEncoding"\n                ),\n                name_prefix="namePrefix",\n\n                # the properties below are optional\n                input_parallelism=kinesisanalyticsv2.CfnApplication.InputParallelismProperty(\n                    count=123\n                ),\n                input_processing_configuration=kinesisanalyticsv2.CfnApplication.InputProcessingConfigurationProperty(\n                    input_lambda_processor=kinesisanalyticsv2.CfnApplication.InputLambdaProcessorProperty(\n                        resource_arn="resourceArn"\n                    )\n                ),\n                kinesis_firehose_input=kinesisanalyticsv2.CfnApplication.KinesisFirehoseInputProperty(\n                    resource_arn="resourceArn"\n                ),\n                kinesis_streams_input=kinesisanalyticsv2.CfnApplication.KinesisStreamsInputProperty(\n                    resource_arn="resourceArn"\n                )\n            )]\n        ),\n        vpc_configurations=[kinesisanalyticsv2.CfnApplication.VpcConfigurationProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        )],\n        zeppelin_application_configuration=kinesisanalyticsv2.CfnApplication.ZeppelinApplicationConfigurationProperty(\n            catalog_configuration=kinesisanalyticsv2.CfnApplication.CatalogConfigurationProperty(\n                glue_data_catalog_configuration=kinesisanalyticsv2.CfnApplication.GlueDataCatalogConfigurationProperty(\n                    database_arn="databaseArn"\n                )\n            ),\n            custom_artifacts_configuration=[kinesisanalyticsv2.CfnApplication.CustomArtifactConfigurationProperty(\n                artifact_type="artifactType",\n\n                # the properties below are optional\n                maven_reference=kinesisanalyticsv2.CfnApplication.MavenReferenceProperty(\n                    artifact_id="artifactId",\n                    group_id="groupId",\n                    version="version"\n                ),\n                s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty(\n                    bucket_arn="bucketArn",\n                    file_key="fileKey",\n\n                    # the properties below are optional\n                    object_version="objectVersion"\n                )\n            )],\n            deploy_as_application_configuration=kinesisanalyticsv2.CfnApplication.DeployAsApplicationConfigurationProperty(\n                s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentBaseLocationProperty(\n                    bucket_arn="bucketArn",\n\n                    # the properties below are optional\n                    base_path="basePath"\n                )\n            ),\n            monitoring_configuration=kinesisanalyticsv2.CfnApplication.ZeppelinMonitoringConfigurationProperty(\n                log_level="logLevel"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_code_configuration', 'application_snapshot_configuration', 'application_system_rollback_configuration', 'environment_properties', 'flink_application_configuration', 'sql_application_configuration', 'vpc_configurations', 'zeppelin_application_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationMaintenanceConfigurationProperty
class CfnApplication_ApplicationMaintenanceConfigurationPropertyDef(BaseStruct):
    application_maintenance_window_start_time: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the start time of the maintence window.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-applicationmaintenanceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    application_maintenance_configuration_property = kinesisanalyticsv2.CfnApplication.ApplicationMaintenanceConfigurationProperty(\n        application_maintenance_window_start_time="applicationMaintenanceWindowStartTime"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_maintenance_window_start_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationMaintenanceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationRestoreConfigurationProperty
class CfnApplication_ApplicationRestoreConfigurationPropertyDef(BaseStruct):
    application_restore_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies how the application should be restored.\n')
    snapshot_name: typing.Optional[str] = pydantic.Field(None, description='The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if ``RESTORE_FROM_CUSTOM_SNAPSHOT`` is specified for the ``ApplicationRestoreType`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-applicationrestoreconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    application_restore_configuration_property = kinesisanalyticsv2.CfnApplication.ApplicationRestoreConfigurationProperty(\n        application_restore_type="applicationRestoreType",\n\n        # the properties below are optional\n        snapshot_name="snapshotName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_restore_type', 'snapshot_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationRestoreConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationSnapshotConfigurationProperty
class CfnApplication_ApplicationSnapshotConfigurationPropertyDef(BaseStruct):
    snapshots_enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Describes whether snapshots are enabled for a Managed Service for Apache Flink application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-applicationsnapshotconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    application_snapshot_configuration_property = kinesisanalyticsv2.CfnApplication.ApplicationSnapshotConfigurationProperty(\n        snapshots_enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['snapshots_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationSnapshotConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CatalogConfigurationProperty
class CfnApplication_CatalogConfigurationPropertyDef(BaseStruct):
    glue_data_catalog_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_GlueDataCatalogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration parameters for the default Amazon Glue database. You use this database for Apache Flink SQL queries and table API transforms that you write in a Kinesis Data Analytics Studio notebook.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-catalogconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    catalog_configuration_property = kinesisanalyticsv2.CfnApplication.CatalogConfigurationProperty(\n        glue_data_catalog_configuration=kinesisanalyticsv2.CfnApplication.GlueDataCatalogConfigurationProperty(\n            database_arn="databaseArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['glue_data_catalog_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CatalogConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CheckpointConfigurationProperty
class CfnApplication_CheckpointConfigurationPropertyDef(BaseStruct):
    configuration_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Describes whether the application uses Managed Service for Apache Flink' default checkpointing behavior. You must set this property to ``CUSTOM`` in order to set the ``CheckpointingEnabled`` , ``CheckpointInterval`` , or ``MinPauseBetweenCheckpoints`` parameters. .. epigraph:: If this value is set to ``DEFAULT`` , the application will use the following values, even if they are set to other values using APIs or application code: - *CheckpointingEnabled:* true - *CheckpointInterval:* 60000 - *MinPauseBetweenCheckpoints:* 5000\n")
    checkpointing_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Describes whether checkpointing is enabled for a Managed Service for Apache Flink application. .. epigraph:: If ``CheckpointConfiguration.ConfigurationType`` is ``DEFAULT`` , the application will use a ``CheckpointingEnabled`` value of ``true`` , even if this value is set to another value using this API or in application code.\n')
    checkpoint_interval: typing.Union[int, float, None] = pydantic.Field(None, description='Describes the interval in milliseconds between checkpoint operations. .. epigraph:: If ``CheckpointConfiguration.ConfigurationType`` is ``DEFAULT`` , the application will use a ``CheckpointInterval`` value of 60000, even if this value is set to another value using this API or in application code.\n')
    min_pause_between_checkpoints: typing.Union[int, float, None] = pydantic.Field(None, description='Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the ``CheckpointInterval`` , the application otherwise performs continual checkpoint operations. For more information, see `Tuning Checkpointing <https://docs.aws.amazon.com/https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/state/large_state_tuning.html#tuning-checkpointing>`_ in the `Apache Flink Documentation <https://docs.aws.amazon.com/https://ci.apache.org/projects/flink/flink-docs-release-1.8/>`_ . .. epigraph:: If ``CheckpointConfiguration.ConfigurationType`` is ``DEFAULT`` , the application will use a ``MinPauseBetweenCheckpoints`` value of 5000, even if this value is set using this API or in application code.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-checkpointconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    checkpoint_configuration_property = kinesisanalyticsv2.CfnApplication.CheckpointConfigurationProperty(\n        configuration_type="configurationType",\n\n        # the properties below are optional\n        checkpointing_enabled=False,\n        checkpoint_interval=123,\n        min_pause_between_checkpoints=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_type', 'checkpointing_enabled', 'checkpoint_interval', 'min_pause_between_checkpoints']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CheckpointConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CodeContentProperty
class CfnApplication_CodeContentPropertyDef(BaseStruct):
    s3_content_location: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_S3ContentLocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the Amazon S3 bucket that contains the application code.\n')
    text_content: typing.Optional[str] = pydantic.Field(None, description='The text-format code for a Managed Service for Apache Flink application.\n')
    zip_file_content: typing.Optional[str] = pydantic.Field(None, description='The zip-format code for a Managed Service for Apache Flink application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-codecontent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    code_content_property = kinesisanalyticsv2.CfnApplication.CodeContentProperty(\n        s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty(\n            bucket_arn="bucketArn",\n            file_key="fileKey",\n\n            # the properties below are optional\n            object_version="objectVersion"\n        ),\n        text_content="textContent",\n        zip_file_content="zipFileContent"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_content_location', 'text_content', 'zip_file_content']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CodeContentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty
class CfnApplication_CSVMappingParametersPropertyDef(BaseStruct):
    record_column_delimiter: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.\n')
    record_row_delimiter: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The row delimiter. For example, in a CSV format, *\'\\n\'* is the typical row delimiter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-csvmappingparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    c_sVMapping_parameters_property = kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty(\n        record_column_delimiter="recordColumnDelimiter",\n        record_row_delimiter="recordRowDelimiter"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['record_column_delimiter', 'record_row_delimiter']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CustomArtifactConfigurationProperty
class CfnApplication_CustomArtifactConfigurationPropertyDef(BaseStruct):
    artifact_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Set this to either ``UDF`` or ``DEPENDENCY_JAR`` . ``UDF`` stands for user-defined functions. This type of artifact must be in an S3 bucket. A ``DEPENDENCY_JAR`` can be in either Maven or an S3 bucket.\n')
    maven_reference: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_MavenReferencePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The parameters required to fully specify a Maven reference.\n')
    s3_content_location: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_S3ContentLocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The location of the custom artifacts.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-customartifactconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    custom_artifact_configuration_property = kinesisanalyticsv2.CfnApplication.CustomArtifactConfigurationProperty(\n        artifact_type="artifactType",\n\n        # the properties below are optional\n        maven_reference=kinesisanalyticsv2.CfnApplication.MavenReferenceProperty(\n            artifact_id="artifactId",\n            group_id="groupId",\n            version="version"\n        ),\n        s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty(\n            bucket_arn="bucketArn",\n            file_key="fileKey",\n\n            # the properties below are optional\n            object_version="objectVersion"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['artifact_type', 'maven_reference', 's3_content_location']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.CustomArtifactConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.DeployAsApplicationConfigurationProperty
class CfnApplication_DeployAsApplicationConfigurationPropertyDef(BaseStruct):
    s3_content_location: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_S3ContentBaseLocationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The description of an Amazon S3 object that contains the Amazon Data Analytics application, including the Amazon Resource Name (ARN) of the S3 bucket, the name of the Amazon S3 object that contains the data, and the version number of the Amazon S3 object that contains the data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-deployasapplicationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    deploy_as_application_configuration_property = kinesisanalyticsv2.CfnApplication.DeployAsApplicationConfigurationProperty(\n        s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentBaseLocationProperty(\n            bucket_arn="bucketArn",\n\n            # the properties below are optional\n            base_path="basePath"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_content_location']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.DeployAsApplicationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.EnvironmentPropertiesProperty
class CfnApplication_EnvironmentPropertiesPropertyDef(BaseStruct):
    property_groups: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_PropertyGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes the execution property groups.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-environmentproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    environment_properties_property = kinesisanalyticsv2.CfnApplication.EnvironmentPropertiesProperty(\n        property_groups=[kinesisanalyticsv2.CfnApplication.PropertyGroupProperty(\n            property_group_id="propertyGroupId",\n            property_map={\n                "property_map_key": "propertyMap"\n            }\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['property_groups']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.EnvironmentPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.FlinkApplicationConfigurationProperty
class CfnApplication_FlinkApplicationConfigurationPropertyDef(BaseStruct):
    checkpoint_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CheckpointConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see `Checkpoints for Fault Tolerance <https://docs.aws.amazon.com/https://ci.apache.org/projects/flink/flink-docs-release-1.8/concepts/programming-model.html#checkpoints-for-fault-tolerance>`_ in the `Apache Flink Documentation <https://docs.aws.amazon.com/https://ci.apache.org/projects/flink/flink-docs-release-1.8/>`_ .\n")
    monitoring_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_MonitoringConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes configuration parameters for Amazon CloudWatch logging for an application.\n')
    parallelism_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ParallelismConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes parameters for how an application executes multiple tasks simultaneously.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-flinkapplicationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    flink_application_configuration_property = kinesisanalyticsv2.CfnApplication.FlinkApplicationConfigurationProperty(\n        checkpoint_configuration=kinesisanalyticsv2.CfnApplication.CheckpointConfigurationProperty(\n            configuration_type="configurationType",\n\n            # the properties below are optional\n            checkpointing_enabled=False,\n            checkpoint_interval=123,\n            min_pause_between_checkpoints=123\n        ),\n        monitoring_configuration=kinesisanalyticsv2.CfnApplication.MonitoringConfigurationProperty(\n            configuration_type="configurationType",\n\n            # the properties below are optional\n            log_level="logLevel",\n            metrics_level="metricsLevel"\n        ),\n        parallelism_configuration=kinesisanalyticsv2.CfnApplication.ParallelismConfigurationProperty(\n            configuration_type="configurationType",\n\n            # the properties below are optional\n            auto_scaling_enabled=False,\n            parallelism=123,\n            parallelism_per_kpu=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['checkpoint_configuration', 'monitoring_configuration', 'parallelism_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.FlinkApplicationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.FlinkRunConfigurationProperty
class CfnApplication_FlinkRunConfigurationPropertyDef(BaseStruct):
    allow_non_restored_state: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. This will happen if the program is updated between snapshots to remove stateful parameters, and state data in the snapshot no longer corresponds to valid application data. For more information, see `Allowing Non-Restored State <https://docs.aws.amazon.com/https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/state/savepoints.html#allowing-non-restored-state>`_ in the `Apache Flink documentation <https://docs.aws.amazon.com/https://ci.apache.org/projects/flink/flink-docs-release-1.8/>`_ . .. epigraph:: This value defaults to ``false`` . If you update your application without specifying this parameter, ``AllowNonRestoredState`` will be set to ``false`` , even if it was previously set to ``true`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-flinkrunconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    flink_run_configuration_property = kinesisanalyticsv2.CfnApplication.FlinkRunConfigurationProperty(\n        allow_non_restored_state=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allow_non_restored_state']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.FlinkRunConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.GlueDataCatalogConfigurationProperty
class CfnApplication_GlueDataCatalogConfigurationPropertyDef(BaseStruct):
    database_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the database.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-gluedatacatalogconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    glue_data_catalog_configuration_property = kinesisanalyticsv2.CfnApplication.GlueDataCatalogConfigurationProperty(\n        database_arn="databaseArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['database_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.GlueDataCatalogConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputLambdaProcessorProperty
class CfnApplication_InputLambdaProcessorPropertyDef(BaseStruct):
    resource_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Amazon Lambda function that operates on records in the stream. .. epigraph:: To specify an earlier version of the Lambda function than the latest, include the Lambda function version in the Lambda function ARN. For more information about Lambda ARNs, see `Example ARNs: Amazon Lambda <https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-lambda>`_\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-inputlambdaprocessor.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    input_lambda_processor_property = kinesisanalyticsv2.CfnApplication.InputLambdaProcessorProperty(\n        resource_arn="resourceArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputLambdaProcessorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputParallelismProperty
class CfnApplication_InputParallelismPropertyDef(BaseStruct):
    count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of in-application streams to create.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-inputparallelism.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    input_parallelism_property = kinesisanalyticsv2.CfnApplication.InputParallelismProperty(\n        count=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['count']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputParallelismProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputProcessingConfigurationProperty
class CfnApplication_InputProcessingConfigurationPropertyDef(BaseStruct):
    input_lambda_processor: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputLambdaProcessorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The `InputLambdaProcessor <https://docs.aws.amazon.com/managed-flink/latest/apiv2/API_InputLambdaProcessor.html>`_ that is used to preprocess the records in the stream before being processed by your application code.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-inputprocessingconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    input_processing_configuration_property = kinesisanalyticsv2.CfnApplication.InputProcessingConfigurationProperty(\n        input_lambda_processor=kinesisanalyticsv2.CfnApplication.InputLambdaProcessorProperty(\n            resource_arn="resourceArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['input_lambda_processor']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputProcessingConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputProperty
class CfnApplication_InputPropertyDef(BaseStruct):
    input_schema: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputSchemaPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. Also used to describe the format of the reference data source.\n')
    name_prefix: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name prefix to use when creating an in-application stream. Suppose that you specify a prefix " ``MyInApplicationStream`` ." Kinesis Data Analytics then creates one or more (as per the ``InputParallelism`` count you specified) in-application streams with the names " ``MyInApplicationStream_001`` ," " ``MyInApplicationStream_002`` ," and so on.\n')
    input_parallelism: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputParallelismPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the number of in-application streams to create.\n')
    input_processing_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputProcessingConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The `InputProcessingConfiguration <https://docs.aws.amazon.com/managed-flink/latest/apiv2/API_InputProcessingConfiguration.html>`_ for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is `InputLambdaProcessor <https://docs.aws.amazon.com/managed-flink/latest/apiv2/API_InputLambdaProcessor.html>`_ .\n")
    kinesis_firehose_input: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_KinesisFirehoseInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.\n")
    kinesis_streams_input: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_KinesisStreamsInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If the streaming source is an Amazon Kinesis data stream, identifies the stream\'s Amazon Resource Name (ARN).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-input.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    input_property = kinesisanalyticsv2.CfnApplication.InputProperty(\n        input_schema=kinesisanalyticsv2.CfnApplication.InputSchemaProperty(\n            record_columns=[kinesisanalyticsv2.CfnApplication.RecordColumnProperty(\n                name="name",\n                sql_type="sqlType",\n\n                # the properties below are optional\n                mapping="mapping"\n            )],\n            record_format=kinesisanalyticsv2.CfnApplication.RecordFormatProperty(\n                record_format_type="recordFormatType",\n\n                # the properties below are optional\n                mapping_parameters=kinesisanalyticsv2.CfnApplication.MappingParametersProperty(\n                    csv_mapping_parameters=kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty(\n                        record_column_delimiter="recordColumnDelimiter",\n                        record_row_delimiter="recordRowDelimiter"\n                    ),\n                    json_mapping_parameters=kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty(\n                        record_row_path="recordRowPath"\n                    )\n                )\n            ),\n\n            # the properties below are optional\n            record_encoding="recordEncoding"\n        ),\n        name_prefix="namePrefix",\n\n        # the properties below are optional\n        input_parallelism=kinesisanalyticsv2.CfnApplication.InputParallelismProperty(\n            count=123\n        ),\n        input_processing_configuration=kinesisanalyticsv2.CfnApplication.InputProcessingConfigurationProperty(\n            input_lambda_processor=kinesisanalyticsv2.CfnApplication.InputLambdaProcessorProperty(\n                resource_arn="resourceArn"\n            )\n        ),\n        kinesis_firehose_input=kinesisanalyticsv2.CfnApplication.KinesisFirehoseInputProperty(\n            resource_arn="resourceArn"\n        ),\n        kinesis_streams_input=kinesisanalyticsv2.CfnApplication.KinesisStreamsInputProperty(\n            resource_arn="resourceArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['input_schema', 'name_prefix', 'input_parallelism', 'input_processing_configuration', 'kinesis_firehose_input', 'kinesis_streams_input']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputSchemaProperty
class CfnApplication_InputSchemaPropertyDef(BaseStruct):
    record_columns: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_RecordColumnPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of ``RecordColumn`` objects.\n')
    record_format: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_RecordFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the format of the records on the streaming source.\n')
    record_encoding: typing.Optional[str] = pydantic.Field(None, description='Specifies the encoding of the records in the streaming source. For example, UTF-8.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-inputschema.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    input_schema_property = kinesisanalyticsv2.CfnApplication.InputSchemaProperty(\n        record_columns=[kinesisanalyticsv2.CfnApplication.RecordColumnProperty(\n            name="name",\n            sql_type="sqlType",\n\n            # the properties below are optional\n            mapping="mapping"\n        )],\n        record_format=kinesisanalyticsv2.CfnApplication.RecordFormatProperty(\n            record_format_type="recordFormatType",\n\n            # the properties below are optional\n            mapping_parameters=kinesisanalyticsv2.CfnApplication.MappingParametersProperty(\n                csv_mapping_parameters=kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty(\n                    record_column_delimiter="recordColumnDelimiter",\n                    record_row_delimiter="recordRowDelimiter"\n                ),\n                json_mapping_parameters=kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty(\n                    record_row_path="recordRowPath"\n                )\n            )\n        ),\n\n        # the properties below are optional\n        record_encoding="recordEncoding"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['record_columns', 'record_format', 'record_encoding']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.InputSchemaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty
class CfnApplication_JSONMappingParametersPropertyDef(BaseStruct):
    record_row_path: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The path to the top-level parent that contains the records.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-jsonmappingparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    j_sONMapping_parameters_property = kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty(\n        record_row_path="recordRowPath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['record_row_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.KinesisFirehoseInputProperty
class CfnApplication_KinesisFirehoseInputPropertyDef(BaseStruct):
    resource_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the delivery stream.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-kinesisfirehoseinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    kinesis_firehose_input_property = kinesisanalyticsv2.CfnApplication.KinesisFirehoseInputProperty(\n        resource_arn="resourceArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.KinesisFirehoseInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.KinesisStreamsInputProperty
class CfnApplication_KinesisStreamsInputPropertyDef(BaseStruct):
    resource_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the input Kinesis data stream to read.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-kinesisstreamsinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    kinesis_streams_input_property = kinesisanalyticsv2.CfnApplication.KinesisStreamsInputProperty(\n        resource_arn="resourceArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.KinesisStreamsInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.MappingParametersProperty
class CfnApplication_MappingParametersPropertyDef(BaseStruct):
    csv_mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CSVMappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides additional mapping information when the record format uses delimiters (for example, CSV).\n')
    json_mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_JSONMappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides additional mapping information when JSON is the record format on the streaming source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-mappingparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    mapping_parameters_property = kinesisanalyticsv2.CfnApplication.MappingParametersProperty(\n        csv_mapping_parameters=kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty(\n            record_column_delimiter="recordColumnDelimiter",\n            record_row_delimiter="recordRowDelimiter"\n        ),\n        json_mapping_parameters=kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty(\n            record_row_path="recordRowPath"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv_mapping_parameters', 'json_mapping_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.MappingParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.MavenReferenceProperty
class CfnApplication_MavenReferencePropertyDef(BaseStruct):
    artifact_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The artifact ID of the Maven reference.\n')
    group_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The group ID of the Maven reference.\n')
    version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The version of the Maven reference.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-mavenreference.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    maven_reference_property = kinesisanalyticsv2.CfnApplication.MavenReferenceProperty(\n        artifact_id="artifactId",\n        group_id="groupId",\n        version="version"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['artifact_id', 'group_id', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.MavenReferenceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.MonitoringConfigurationProperty
class CfnApplication_MonitoringConfigurationPropertyDef(BaseStruct):
    configuration_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to ``CUSTOM`` in order to set the ``LogLevel`` or ``MetricsLevel`` parameters.\n')
    log_level: typing.Optional[str] = pydantic.Field(None, description='Describes the verbosity of the CloudWatch Logs for an application.\n')
    metrics_level: typing.Optional[str] = pydantic.Field(None, description='Describes the granularity of the CloudWatch Logs for an application. The ``Parallelism`` level is not recommended for applications with a Parallelism over 64 due to excessive costs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-monitoringconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    monitoring_configuration_property = kinesisanalyticsv2.CfnApplication.MonitoringConfigurationProperty(\n        configuration_type="configurationType",\n\n        # the properties below are optional\n        log_level="logLevel",\n        metrics_level="metricsLevel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_type', 'log_level', 'metrics_level']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.MonitoringConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ParallelismConfigurationProperty
class CfnApplication_ParallelismConfigurationPropertyDef(BaseStruct):
    configuration_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Describes whether the application uses the default parallelism for the Managed Service for Apache Flink service. You must set this property to ``CUSTOM`` in order to change your application's ``AutoScalingEnabled`` , ``Parallelism`` , or ``ParallelismPerKPU`` properties.\n")
    auto_scaling_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Describes whether the Managed Service for Apache Flink service can increase the parallelism of the application in response to increased throughput.\n')
    parallelism: typing.Union[int, float, None] = pydantic.Field(None, description='Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. The Kinesis Data Analytics service can increase this number automatically if `ParallelismConfiguration:AutoScalingEnabled <https://docs.aws.amazon.com/managed-flink/latest/apiv2/API_ParallelismConfiguration.html#kinesisanalytics-Type-ParallelismConfiguration-AutoScalingEnabled.html>`_ is set to ``true`` .\n')
    parallelism_per_kpu: typing.Union[int, float, None] = pydantic.Field(None, description='Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application. For more information about KPUs, see `Amazon Kinesis Data Analytics Pricing <https://docs.aws.amazon.com/kinesis/data-analytics/pricing/>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-parallelismconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    parallelism_configuration_property = kinesisanalyticsv2.CfnApplication.ParallelismConfigurationProperty(\n        configuration_type="configurationType",\n\n        # the properties below are optional\n        auto_scaling_enabled=False,\n        parallelism=123,\n        parallelism_per_kpu=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_type', 'auto_scaling_enabled', 'parallelism', 'parallelism_per_kpu']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ParallelismConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.PropertyGroupProperty
class CfnApplication_PropertyGroupPropertyDef(BaseStruct):
    property_group_id: typing.Optional[str] = pydantic.Field(None, description='Describes the key of an application execution property key-value pair.\n')
    property_map: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='Describes the value of an application execution property key-value pair.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-propertygroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    property_group_property = kinesisanalyticsv2.CfnApplication.PropertyGroupProperty(\n        property_group_id="propertyGroupId",\n        property_map={\n            "property_map_key": "propertyMap"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['property_group_id', 'property_map']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.PropertyGroupProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.RecordColumnProperty
class CfnApplication_RecordColumnPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the column that is created in the in-application input stream or reference table.\n')
    sql_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of column created in the in-application input stream or reference table.\n')
    mapping: typing.Optional[str] = pydantic.Field(None, description='A reference to the data element in the streaming input or the reference data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-recordcolumn.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    record_column_property = kinesisanalyticsv2.CfnApplication.RecordColumnProperty(\n        name="name",\n        sql_type="sqlType",\n\n        # the properties below are optional\n        mapping="mapping"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'sql_type', 'mapping']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.RecordColumnProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.RecordFormatProperty
class CfnApplication_RecordFormatPropertyDef(BaseStruct):
    record_format_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of record format.\n')
    mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_MappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='When you configure application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-recordformat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    record_format_property = kinesisanalyticsv2.CfnApplication.RecordFormatProperty(\n        record_format_type="recordFormatType",\n\n        # the properties below are optional\n        mapping_parameters=kinesisanalyticsv2.CfnApplication.MappingParametersProperty(\n            csv_mapping_parameters=kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty(\n                record_column_delimiter="recordColumnDelimiter",\n                record_row_delimiter="recordRowDelimiter"\n            ),\n            json_mapping_parameters=kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty(\n                record_row_path="recordRowPath"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['record_format_type', 'mapping_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.RecordFormatProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.RunConfigurationProperty
class CfnApplication_RunConfigurationPropertyDef(BaseStruct):
    application_restore_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationRestoreConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the restore behavior of a restarting application.\n')
    flink_run_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_FlinkRunConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the starting parameters for a Managed Service for Apache Flink application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-runconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    run_configuration_property = kinesisanalyticsv2.CfnApplication.RunConfigurationProperty(\n        application_restore_configuration=kinesisanalyticsv2.CfnApplication.ApplicationRestoreConfigurationProperty(\n            application_restore_type="applicationRestoreType",\n\n            # the properties below are optional\n            snapshot_name="snapshotName"\n        ),\n        flink_run_configuration=kinesisanalyticsv2.CfnApplication.FlinkRunConfigurationProperty(\n            allow_non_restored_state=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_restore_configuration', 'flink_run_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.RunConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.S3ContentBaseLocationProperty
class CfnApplication_S3ContentBaseLocationPropertyDef(BaseStruct):
    bucket_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the S3 bucket.\n')
    base_path: typing.Optional[str] = pydantic.Field(None, description='The base path for the S3 bucket.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-s3contentbaselocation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    s3_content_base_location_property = kinesisanalyticsv2.CfnApplication.S3ContentBaseLocationProperty(\n        bucket_arn="bucketArn",\n\n        # the properties below are optional\n        base_path="basePath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_arn', 'base_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.S3ContentBaseLocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty
class CfnApplication_S3ContentLocationPropertyDef(BaseStruct):
    bucket_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the S3 bucket containing the application code.\n')
    file_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The file key for the object containing the application code.\n')
    object_version: typing.Optional[str] = pydantic.Field(None, description='The version of the object containing the application code.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-s3contentlocation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    s3_content_location_property = kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty(\n        bucket_arn="bucketArn",\n        file_key="fileKey",\n\n        # the properties below are optional\n        object_version="objectVersion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_arn', 'file_key', 'object_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.SqlApplicationConfigurationProperty
class CfnApplication_SqlApplicationConfigurationPropertyDef(BaseStruct):
    inputs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The array of `Input <https://docs.aws.amazon.com/managed-flink/latest/apiv2/API_Input.html>`_ objects describing the input streams used by the application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-sqlapplicationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    sql_application_configuration_property = kinesisanalyticsv2.CfnApplication.SqlApplicationConfigurationProperty(\n        inputs=[kinesisanalyticsv2.CfnApplication.InputProperty(\n            input_schema=kinesisanalyticsv2.CfnApplication.InputSchemaProperty(\n                record_columns=[kinesisanalyticsv2.CfnApplication.RecordColumnProperty(\n                    name="name",\n                    sql_type="sqlType",\n\n                    # the properties below are optional\n                    mapping="mapping"\n                )],\n                record_format=kinesisanalyticsv2.CfnApplication.RecordFormatProperty(\n                    record_format_type="recordFormatType",\n\n                    # the properties below are optional\n                    mapping_parameters=kinesisanalyticsv2.CfnApplication.MappingParametersProperty(\n                        csv_mapping_parameters=kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty(\n                            record_column_delimiter="recordColumnDelimiter",\n                            record_row_delimiter="recordRowDelimiter"\n                        ),\n                        json_mapping_parameters=kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty(\n                            record_row_path="recordRowPath"\n                        )\n                    )\n                ),\n\n                # the properties below are optional\n                record_encoding="recordEncoding"\n            ),\n            name_prefix="namePrefix",\n\n            # the properties below are optional\n            input_parallelism=kinesisanalyticsv2.CfnApplication.InputParallelismProperty(\n                count=123\n            ),\n            input_processing_configuration=kinesisanalyticsv2.CfnApplication.InputProcessingConfigurationProperty(\n                input_lambda_processor=kinesisanalyticsv2.CfnApplication.InputLambdaProcessorProperty(\n                    resource_arn="resourceArn"\n                )\n            ),\n            kinesis_firehose_input=kinesisanalyticsv2.CfnApplication.KinesisFirehoseInputProperty(\n                resource_arn="resourceArn"\n            ),\n            kinesis_streams_input=kinesisanalyticsv2.CfnApplication.KinesisStreamsInputProperty(\n                resource_arn="resourceArn"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['inputs']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.SqlApplicationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.VpcConfigurationProperty
class CfnApplication_VpcConfigurationPropertyDef(BaseStruct):
    security_group_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The array of `SecurityGroup <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SecurityGroup.html>`_ IDs used by the VPC configuration.\n')
    subnet_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The array of `Subnet <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Subnet.html>`_ IDs used by the VPC configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-vpcconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    vpc_configuration_property = kinesisanalyticsv2.CfnApplication.VpcConfigurationProperty(\n        security_group_ids=["securityGroupIds"],\n        subnet_ids=["subnetIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.VpcConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ZeppelinApplicationConfigurationProperty
class CfnApplication_ZeppelinApplicationConfigurationPropertyDef(BaseStruct):
    catalog_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CatalogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.\n')
    custom_artifacts_configuration: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CustomArtifactConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of ``CustomArtifactConfiguration`` objects.\n')
    deploy_as_application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_DeployAsApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.\n')
    monitoring_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ZeppelinMonitoringConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The monitoring configuration of a Kinesis Data Analytics Studio notebook.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-zeppelinapplicationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    zeppelin_application_configuration_property = kinesisanalyticsv2.CfnApplication.ZeppelinApplicationConfigurationProperty(\n        catalog_configuration=kinesisanalyticsv2.CfnApplication.CatalogConfigurationProperty(\n            glue_data_catalog_configuration=kinesisanalyticsv2.CfnApplication.GlueDataCatalogConfigurationProperty(\n                database_arn="databaseArn"\n            )\n        ),\n        custom_artifacts_configuration=[kinesisanalyticsv2.CfnApplication.CustomArtifactConfigurationProperty(\n            artifact_type="artifactType",\n\n            # the properties below are optional\n            maven_reference=kinesisanalyticsv2.CfnApplication.MavenReferenceProperty(\n                artifact_id="artifactId",\n                group_id="groupId",\n                version="version"\n            ),\n            s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty(\n                bucket_arn="bucketArn",\n                file_key="fileKey",\n\n                # the properties below are optional\n                object_version="objectVersion"\n            )\n        )],\n        deploy_as_application_configuration=kinesisanalyticsv2.CfnApplication.DeployAsApplicationConfigurationProperty(\n            s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentBaseLocationProperty(\n                bucket_arn="bucketArn",\n\n                # the properties below are optional\n                base_path="basePath"\n            )\n        ),\n        monitoring_configuration=kinesisanalyticsv2.CfnApplication.ZeppelinMonitoringConfigurationProperty(\n            log_level="logLevel"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['catalog_configuration', 'custom_artifacts_configuration', 'deploy_as_application_configuration', 'monitoring_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ZeppelinApplicationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ZeppelinMonitoringConfigurationProperty
class CfnApplication_ZeppelinMonitoringConfigurationPropertyDef(BaseStruct):
    log_level: typing.Optional[str] = pydantic.Field(None, description='The verbosity of the CloudWatch Logs for an application. You can set it to ``INFO`` , ``WARN`` , ``ERROR`` , or ``DEBUG`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-application-zeppelinmonitoringconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    zeppelin_monitoring_configuration_property = kinesisanalyticsv2.CfnApplication.ZeppelinMonitoringConfigurationProperty(\n        log_level="logLevel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_level']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ZeppelinMonitoringConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption.CloudWatchLoggingOptionProperty
class CfnApplicationCloudWatchLoggingOption_CloudWatchLoggingOptionPropertyDef(BaseStruct):
    log_stream_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the CloudWatch log to receive application messages.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationcloudwatchloggingoption-cloudwatchloggingoption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    cloud_watch_logging_option_property = kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption.CloudWatchLoggingOptionProperty(\n        log_stream_arn="logStreamArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_stream_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption.CloudWatchLoggingOptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.DestinationSchemaProperty
class CfnApplicationOutput_DestinationSchemaPropertyDef(BaseStruct):
    record_format_type: typing.Optional[str] = pydantic.Field(None, description='Specifies the format of the records on the output stream.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationoutput-destinationschema.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    destination_schema_property = kinesisanalyticsv2.CfnApplicationOutput.DestinationSchemaProperty(\n        record_format_type="recordFormatType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['record_format_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.DestinationSchemaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.KinesisFirehoseOutputProperty
class CfnApplicationOutput_KinesisFirehoseOutputPropertyDef(BaseStruct):
    resource_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the destination delivery stream to write to.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationoutput-kinesisfirehoseoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    kinesis_firehose_output_property = kinesisanalyticsv2.CfnApplicationOutput.KinesisFirehoseOutputProperty(\n        resource_arn="resourceArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.KinesisFirehoseOutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.KinesisStreamsOutputProperty
class CfnApplicationOutput_KinesisStreamsOutputPropertyDef(BaseStruct):
    resource_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the destination Kinesis data stream to write to.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationoutput-kinesisstreamsoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    kinesis_streams_output_property = kinesisanalyticsv2.CfnApplicationOutput.KinesisStreamsOutputProperty(\n        resource_arn="resourceArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.KinesisStreamsOutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.LambdaOutputProperty
class CfnApplicationOutput_LambdaOutputPropertyDef(BaseStruct):
    resource_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the destination Lambda function to write to. .. epigraph:: To specify an earlier version of the Lambda function than the latest, include the Lambda function version in the Lambda function ARN. For more information about Lambda ARNs, see `Example ARNs: Amazon Lambda <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-lambda>`_\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationoutput-lambdaoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    lambda_output_property = kinesisanalyticsv2.CfnApplicationOutput.LambdaOutputProperty(\n        resource_arn="resourceArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.LambdaOutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.OutputProperty
class CfnApplicationOutput_OutputPropertyDef(BaseStruct):
    destination_schema: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_DestinationSchemaPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Describes the data format when records are written to the destination.\n')
    kinesis_firehose_output: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_KinesisFirehoseOutputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Identifies a Kinesis Data Firehose delivery stream as the destination.\n')
    kinesis_streams_output: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_KinesisStreamsOutputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Identifies a Kinesis data stream as the destination.\n')
    lambda_output: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_LambdaOutputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Identifies an Amazon Lambda function as the destination.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the in-application stream.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationoutput-output.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    output_property = kinesisanalyticsv2.CfnApplicationOutput.OutputProperty(\n        destination_schema=kinesisanalyticsv2.CfnApplicationOutput.DestinationSchemaProperty(\n            record_format_type="recordFormatType"\n        ),\n\n        # the properties below are optional\n        kinesis_firehose_output=kinesisanalyticsv2.CfnApplicationOutput.KinesisFirehoseOutputProperty(\n            resource_arn="resourceArn"\n        ),\n        kinesis_streams_output=kinesisanalyticsv2.CfnApplicationOutput.KinesisStreamsOutputProperty(\n            resource_arn="resourceArn"\n        ),\n        lambda_output=kinesisanalyticsv2.CfnApplicationOutput.LambdaOutputProperty(\n            resource_arn="resourceArn"\n        ),\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination_schema', 'kinesis_firehose_output', 'kinesis_streams_output', 'lambda_output', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput.OutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.CSVMappingParametersProperty
class CfnApplicationReferenceDataSource_CSVMappingParametersPropertyDef(BaseStruct):
    record_column_delimiter: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.\n')
    record_row_delimiter: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The row delimiter. For example, in a CSV format, *\'\\n\'* is the typical row delimiter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationreferencedatasource-csvmappingparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    c_sVMapping_parameters_property = kinesisanalyticsv2.CfnApplicationReferenceDataSource.CSVMappingParametersProperty(\n        record_column_delimiter="recordColumnDelimiter",\n        record_row_delimiter="recordRowDelimiter"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['record_column_delimiter', 'record_row_delimiter']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.CSVMappingParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.JSONMappingParametersProperty
class CfnApplicationReferenceDataSource_JSONMappingParametersPropertyDef(BaseStruct):
    record_row_path: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The path to the top-level parent that contains the records.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationreferencedatasource-jsonmappingparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    j_sONMapping_parameters_property = kinesisanalyticsv2.CfnApplicationReferenceDataSource.JSONMappingParametersProperty(\n        record_row_path="recordRowPath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['record_row_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.JSONMappingParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.MappingParametersProperty
class CfnApplicationReferenceDataSource_MappingParametersPropertyDef(BaseStruct):
    csv_mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_CSVMappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides additional mapping information when the record format uses delimiters (for example, CSV).\n')
    json_mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_JSONMappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides additional mapping information when JSON is the record format on the streaming source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationreferencedatasource-mappingparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    mapping_parameters_property = kinesisanalyticsv2.CfnApplicationReferenceDataSource.MappingParametersProperty(\n        csv_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.CSVMappingParametersProperty(\n            record_column_delimiter="recordColumnDelimiter",\n            record_row_delimiter="recordRowDelimiter"\n        ),\n        json_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.JSONMappingParametersProperty(\n            record_row_path="recordRowPath"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv_mapping_parameters', 'json_mapping_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.MappingParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordColumnProperty
class CfnApplicationReferenceDataSource_RecordColumnPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the column that is created in the in-application input stream or reference table.\n')
    sql_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of column created in the in-application input stream or reference table.\n')
    mapping: typing.Optional[str] = pydantic.Field(None, description='A reference to the data element in the streaming input or the reference data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationreferencedatasource-recordcolumn.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    record_column_property = kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordColumnProperty(\n        name="name",\n        sql_type="sqlType",\n\n        # the properties below are optional\n        mapping="mapping"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'sql_type', 'mapping']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordColumnProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordFormatProperty
class CfnApplicationReferenceDataSource_RecordFormatPropertyDef(BaseStruct):
    record_format_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of record format.\n')
    mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_MappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='When you configure application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationreferencedatasource-recordformat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    record_format_property = kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordFormatProperty(\n        record_format_type="recordFormatType",\n\n        # the properties below are optional\n        mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.MappingParametersProperty(\n            csv_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.CSVMappingParametersProperty(\n                record_column_delimiter="recordColumnDelimiter",\n                record_row_delimiter="recordRowDelimiter"\n            ),\n            json_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.JSONMappingParametersProperty(\n                record_row_path="recordRowPath"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['record_format_type', 'mapping_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordFormatProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.ReferenceDataSourceProperty
class CfnApplicationReferenceDataSource_ReferenceDataSourcePropertyDef(BaseStruct):
    reference_schema: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_ReferenceSchemaPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.\n')
    s3_reference_data_source: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_S3ReferenceDataSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Identifies the S3 bucket and object that contains the reference data. A Kinesis Data Analytics application loads reference data only once. If the data changes, you call the `UpdateApplication <https://docs.aws.amazon.com/managed-flink/latest/apiv2/API_UpdateApplication.html>`_ operation to trigger reloading of data into your application.\n')
    table_name: typing.Optional[str] = pydantic.Field(None, description='The name of the in-application table to create.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationreferencedatasource-referencedatasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    reference_data_source_property = kinesisanalyticsv2.CfnApplicationReferenceDataSource.ReferenceDataSourceProperty(\n        reference_schema=kinesisanalyticsv2.CfnApplicationReferenceDataSource.ReferenceSchemaProperty(\n            record_columns=[kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordColumnProperty(\n                name="name",\n                sql_type="sqlType",\n\n                # the properties below are optional\n                mapping="mapping"\n            )],\n            record_format=kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordFormatProperty(\n                record_format_type="recordFormatType",\n\n                # the properties below are optional\n                mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.MappingParametersProperty(\n                    csv_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.CSVMappingParametersProperty(\n                        record_column_delimiter="recordColumnDelimiter",\n                        record_row_delimiter="recordRowDelimiter"\n                    ),\n                    json_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.JSONMappingParametersProperty(\n                        record_row_path="recordRowPath"\n                    )\n                )\n            ),\n\n            # the properties below are optional\n            record_encoding="recordEncoding"\n        ),\n\n        # the properties below are optional\n        s3_reference_data_source=kinesisanalyticsv2.CfnApplicationReferenceDataSource.S3ReferenceDataSourceProperty(\n            bucket_arn="bucketArn",\n            file_key="fileKey"\n        ),\n        table_name="tableName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['reference_schema', 's3_reference_data_source', 'table_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.ReferenceDataSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.ReferenceSchemaProperty
class CfnApplicationReferenceDataSource_ReferenceSchemaPropertyDef(BaseStruct):
    record_columns: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_RecordColumnPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of ``RecordColumn`` objects.\n')
    record_format: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_RecordFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the format of the records on the streaming source.\n')
    record_encoding: typing.Optional[str] = pydantic.Field(None, description='Specifies the encoding of the records in the streaming source. For example, UTF-8.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationreferencedatasource-referenceschema.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    reference_schema_property = kinesisanalyticsv2.CfnApplicationReferenceDataSource.ReferenceSchemaProperty(\n        record_columns=[kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordColumnProperty(\n            name="name",\n            sql_type="sqlType",\n\n            # the properties below are optional\n            mapping="mapping"\n        )],\n        record_format=kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordFormatProperty(\n            record_format_type="recordFormatType",\n\n            # the properties below are optional\n            mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.MappingParametersProperty(\n                csv_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.CSVMappingParametersProperty(\n                    record_column_delimiter="recordColumnDelimiter",\n                    record_row_delimiter="recordRowDelimiter"\n                ),\n                json_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.JSONMappingParametersProperty(\n                    record_row_path="recordRowPath"\n                )\n            )\n        ),\n\n        # the properties below are optional\n        record_encoding="recordEncoding"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['record_columns', 'record_format', 'record_encoding']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.ReferenceSchemaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.S3ReferenceDataSourceProperty
class CfnApplicationReferenceDataSource_S3ReferenceDataSourcePropertyDef(BaseStruct):
    bucket_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the S3 bucket.\n')
    file_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The object key name containing the reference data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesisanalyticsv2-applicationreferencedatasource-s3referencedatasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    s3_reference_data_source_property = kinesisanalyticsv2.CfnApplicationReferenceDataSource.S3ReferenceDataSourceProperty(\n        bucket_arn="bucketArn",\n        file_key="fileKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_arn', 'file_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource.S3ReferenceDataSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplication
class CfnApplicationDef(BaseCfnResource):
    runtime_environment: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The runtime environment for the application.\n')
    service_execution_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the IAM role that the application uses to access external resources.\n')
    application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use this parameter to configure the application.\n')
    application_description: typing.Optional[str] = pydantic.Field(None, description='The description of the application. Default: - ""\n')
    application_maintenance_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationMaintenanceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the maintenance configuration for the application.\n')
    application_mode: typing.Optional[str] = pydantic.Field(None, description='To create a Kinesis Data Analytics Studio notebook, you must set the mode to ``INTERACTIVE`` . However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.\n')
    application_name: typing.Optional[str] = pydantic.Field(None, description='The name of the application.\n')
    run_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_RunConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the starting parameters for an Managed Service for Apache Flink application.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.')
    _init_params: typing.ClassVar[list[str]] = ['runtime_environment', 'service_execution_role', 'application_configuration', 'application_description', 'application_maintenance_configuration', 'application_mode', 'application_name', 'run_configuration', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ApplicationCodeConfigurationProperty', 'ApplicationConfigurationProperty', 'ApplicationMaintenanceConfigurationProperty', 'ApplicationRestoreConfigurationProperty', 'ApplicationSnapshotConfigurationProperty', 'ApplicationSystemRollbackConfigurationProperty', 'CSVMappingParametersProperty', 'CatalogConfigurationProperty', 'CheckpointConfigurationProperty', 'CodeContentProperty', 'CustomArtifactConfigurationProperty', 'DeployAsApplicationConfigurationProperty', 'EnvironmentPropertiesProperty', 'FlinkApplicationConfigurationProperty', 'FlinkRunConfigurationProperty', 'GlueDataCatalogConfigurationProperty', 'InputLambdaProcessorProperty', 'InputParallelismProperty', 'InputProcessingConfigurationProperty', 'InputProperty', 'InputSchemaProperty', 'JSONMappingParametersProperty', 'KinesisFirehoseInputProperty', 'KinesisStreamsInputProperty', 'MappingParametersProperty', 'MavenReferenceProperty', 'MonitoringConfigurationProperty', 'ParallelismConfigurationProperty', 'PropertyGroupProperty', 'RecordColumnProperty', 'RecordFormatProperty', 'RunConfigurationProperty', 'S3ContentBaseLocationProperty', 'S3ContentLocationProperty', 'SqlApplicationConfigurationProperty', 'VpcConfigurationProperty', 'ZeppelinApplicationConfigurationProperty', 'ZeppelinMonitoringConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplication'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_kinesisanalyticsv2.CfnApplicationDefConfig] = pydantic.Field(None)


class CfnApplicationDefConfig(pydantic.BaseModel):
    ApplicationCodeConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefApplicationcodeconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ApplicationConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefApplicationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ApplicationMaintenanceConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefApplicationmaintenanceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ApplicationRestoreConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefApplicationrestoreconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ApplicationSnapshotConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefApplicationsnapshotconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ApplicationSystemRollbackConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefApplicationsystemrollbackconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CSVMappingParametersProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefCsvmappingparameterspropertyParams]] = pydantic.Field(None, description='')
    CatalogConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefCatalogconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CheckpointConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefCheckpointconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CodeContentProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefCodecontentpropertyParams]] = pydantic.Field(None, description='')
    CustomArtifactConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefCustomartifactconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DeployAsApplicationConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefDeployasapplicationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    EnvironmentPropertiesProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefEnvironmentpropertiespropertyParams]] = pydantic.Field(None, description='')
    FlinkApplicationConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefFlinkapplicationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    FlinkRunConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefFlinkrunconfigurationpropertyParams]] = pydantic.Field(None, description='')
    GlueDataCatalogConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefGluedatacatalogconfigurationpropertyParams]] = pydantic.Field(None, description='')
    InputLambdaProcessorProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefInputlambdaprocessorpropertyParams]] = pydantic.Field(None, description='')
    InputParallelismProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefInputparallelismpropertyParams]] = pydantic.Field(None, description='')
    InputProcessingConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefInputprocessingconfigurationpropertyParams]] = pydantic.Field(None, description='')
    InputProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefInputpropertyParams]] = pydantic.Field(None, description='')
    InputSchemaProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefInputschemapropertyParams]] = pydantic.Field(None, description='')
    JSONMappingParametersProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefJsonmappingparameterspropertyParams]] = pydantic.Field(None, description='')
    KinesisFirehoseInputProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefKinesisfirehoseinputpropertyParams]] = pydantic.Field(None, description='')
    KinesisStreamsInputProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefKinesisstreamsinputpropertyParams]] = pydantic.Field(None, description='')
    MappingParametersProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefMappingparameterspropertyParams]] = pydantic.Field(None, description='')
    MavenReferenceProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefMavenreferencepropertyParams]] = pydantic.Field(None, description='')
    MonitoringConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefMonitoringconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ParallelismConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefParallelismconfigurationpropertyParams]] = pydantic.Field(None, description='')
    PropertyGroupProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefPropertygrouppropertyParams]] = pydantic.Field(None, description='')
    RecordColumnProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefRecordcolumnpropertyParams]] = pydantic.Field(None, description='')
    RecordFormatProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefRecordformatpropertyParams]] = pydantic.Field(None, description='')
    RunConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefRunconfigurationpropertyParams]] = pydantic.Field(None, description='')
    S3ContentBaseLocationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefS3ContentbaselocationpropertyParams]] = pydantic.Field(None, description='')
    S3ContentLocationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefS3ContentlocationpropertyParams]] = pydantic.Field(None, description='')
    SqlApplicationConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefSqlapplicationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefVpcconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ZeppelinApplicationConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefZeppelinapplicationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ZeppelinMonitoringConfigurationProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefZeppelinmonitoringconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnApplicationDefApplicationcodeconfigurationpropertyParams(pydantic.BaseModel):
    code_content: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CodeContentPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    code_content_type: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefApplicationconfigurationpropertyParams(pydantic.BaseModel):
    application_code_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationCodeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    application_snapshot_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationSnapshotConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    application_system_rollback_configuration: typing.Union[models.UnsupportedResource, aws_cdk.aws_kinesisanalyticsv2.CfnApplication.ApplicationSystemRollbackConfigurationProperty, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    environment_properties: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_EnvironmentPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    flink_application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_FlinkApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sql_application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_SqlApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    vpc_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_VpcConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    zeppelin_application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ZeppelinApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefApplicationmaintenanceconfigurationpropertyParams(pydantic.BaseModel):
    application_maintenance_window_start_time: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefApplicationrestoreconfigurationpropertyParams(pydantic.BaseModel):
    application_restore_type: str = pydantic.Field(..., description='')
    snapshot_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefApplicationsnapshotconfigurationpropertyParams(pydantic.BaseModel):
    snapshots_enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnApplicationDefApplicationsystemrollbackconfigurationpropertyParams(pydantic.BaseModel):
    rollback_enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnApplicationDefCsvmappingparameterspropertyParams(pydantic.BaseModel):
    record_column_delimiter: str = pydantic.Field(..., description='')
    record_row_delimiter: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefCatalogconfigurationpropertyParams(pydantic.BaseModel):
    glue_data_catalog_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_GlueDataCatalogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefCheckpointconfigurationpropertyParams(pydantic.BaseModel):
    configuration_type: str = pydantic.Field(..., description='')
    checkpointing_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    checkpoint_interval: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_pause_between_checkpoints: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefCodecontentpropertyParams(pydantic.BaseModel):
    s3_content_location: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_S3ContentLocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    text_content: typing.Optional[str] = pydantic.Field(None, description='')
    zip_file_content: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefCustomartifactconfigurationpropertyParams(pydantic.BaseModel):
    artifact_type: str = pydantic.Field(..., description='')
    maven_reference: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_MavenReferencePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_content_location: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_S3ContentLocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefDeployasapplicationconfigurationpropertyParams(pydantic.BaseModel):
    s3_content_location: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_S3ContentBaseLocationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnApplicationDefEnvironmentpropertiespropertyParams(pydantic.BaseModel):
    property_groups: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_PropertyGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefFlinkapplicationconfigurationpropertyParams(pydantic.BaseModel):
    checkpoint_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CheckpointConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    monitoring_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_MonitoringConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    parallelism_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ParallelismConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefFlinkrunconfigurationpropertyParams(pydantic.BaseModel):
    allow_non_restored_state: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefGluedatacatalogconfigurationpropertyParams(pydantic.BaseModel):
    database_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefInputlambdaprocessorpropertyParams(pydantic.BaseModel):
    resource_arn: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefInputparallelismpropertyParams(pydantic.BaseModel):
    count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefInputprocessingconfigurationpropertyParams(pydantic.BaseModel):
    input_lambda_processor: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputLambdaProcessorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefInputpropertyParams(pydantic.BaseModel):
    input_schema: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputSchemaPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    name_prefix: str = pydantic.Field(..., description='')
    input_parallelism: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputParallelismPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    input_processing_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputProcessingConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kinesis_firehose_input: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_KinesisFirehoseInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kinesis_streams_input: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_KinesisStreamsInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefInputschemapropertyParams(pydantic.BaseModel):
    record_columns: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_RecordColumnPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    record_format: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_RecordFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    record_encoding: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefJsonmappingparameterspropertyParams(pydantic.BaseModel):
    record_row_path: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefKinesisfirehoseinputpropertyParams(pydantic.BaseModel):
    resource_arn: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefKinesisstreamsinputpropertyParams(pydantic.BaseModel):
    resource_arn: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefMappingparameterspropertyParams(pydantic.BaseModel):
    csv_mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CSVMappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_JSONMappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefMavenreferencepropertyParams(pydantic.BaseModel):
    artifact_id: str = pydantic.Field(..., description='')
    group_id: str = pydantic.Field(..., description='')
    version: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefMonitoringconfigurationpropertyParams(pydantic.BaseModel):
    configuration_type: str = pydantic.Field(..., description='')
    log_level: typing.Optional[str] = pydantic.Field(None, description='')
    metrics_level: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefParallelismconfigurationpropertyParams(pydantic.BaseModel):
    configuration_type: str = pydantic.Field(..., description='')
    auto_scaling_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    parallelism: typing.Union[int, float, None] = pydantic.Field(None, description='')
    parallelism_per_kpu: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefPropertygrouppropertyParams(pydantic.BaseModel):
    property_group_id: typing.Optional[str] = pydantic.Field(None, description='')
    property_map: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefRecordcolumnpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    sql_type: str = pydantic.Field(..., description='')
    mapping: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefRecordformatpropertyParams(pydantic.BaseModel):
    record_format_type: str = pydantic.Field(..., description='')
    mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_MappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefRunconfigurationpropertyParams(pydantic.BaseModel):
    application_restore_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationRestoreConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    flink_run_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_FlinkRunConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefS3ContentbaselocationpropertyParams(pydantic.BaseModel):
    bucket_arn: str = pydantic.Field(..., description='')
    base_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefS3ContentlocationpropertyParams(pydantic.BaseModel):
    bucket_arn: str = pydantic.Field(..., description='')
    file_key: str = pydantic.Field(..., description='')
    object_version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefSqlapplicationconfigurationpropertyParams(pydantic.BaseModel):
    inputs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_InputPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefVpcconfigurationpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnApplicationDefZeppelinapplicationconfigurationpropertyParams(pydantic.BaseModel):
    catalog_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CatalogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    custom_artifacts_configuration: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_CustomArtifactConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    deploy_as_application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_DeployAsApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    monitoring_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ZeppelinMonitoringConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefZeppelinmonitoringconfigurationpropertyParams(pydantic.BaseModel):
    log_level: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApplicationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApplicationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApplicationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApplicationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApplicationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApplicationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApplicationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnApplicationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApplicationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption
class CfnApplicationCloudWatchLoggingOptionDef(BaseCfnResource):
    application_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the application.\n')
    cloud_watch_logging_option: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption_CloudWatchLoggingOptionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Provides a description of Amazon CloudWatch logging options, including the log stream Amazon Resource Name (ARN).')
    _init_params: typing.ClassVar[list[str]] = ['application_name', 'cloud_watch_logging_option']
    _method_names: typing.ClassVar[list[str]] = ['CloudWatchLoggingOptionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefConfig] = pydantic.Field(None)


class CfnApplicationCloudWatchLoggingOptionDefConfig(pydantic.BaseModel):
    CloudWatchLoggingOptionProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefCloudwatchloggingoptionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnApplicationCloudWatchLoggingOptionDefCloudwatchloggingoptionpropertyParams(pydantic.BaseModel):
    log_stream_arn: str = pydantic.Field(..., description='')
    ...

class CfnApplicationCloudWatchLoggingOptionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApplicationCloudWatchLoggingOptionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationCloudWatchLoggingOptionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApplicationCloudWatchLoggingOptionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationCloudWatchLoggingOptionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApplicationCloudWatchLoggingOptionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApplicationCloudWatchLoggingOptionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApplicationCloudWatchLoggingOptionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApplicationCloudWatchLoggingOptionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApplicationCloudWatchLoggingOptionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationCloudWatchLoggingOptionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnApplicationCloudWatchLoggingOptionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApplicationCloudWatchLoggingOptionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationCloudWatchLoggingOptionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput
class CfnApplicationOutputDef(BaseCfnResource):
    application_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the application.\n')
    output: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="Describes a SQL-based Kinesis Data Analytics application's output configuration, in which you identify an in-application stream and a destination where you want the in-application stream data to be written. The destination can be a Kinesis data stream or a Kinesis Data Firehose delivery stream.")
    _init_params: typing.ClassVar[list[str]] = ['application_name', 'output']
    _method_names: typing.ClassVar[list[str]] = ['DestinationSchemaProperty', 'KinesisFirehoseOutputProperty', 'KinesisStreamsOutputProperty', 'LambdaOutputProperty', 'OutputProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutput'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefConfig] = pydantic.Field(None)


class CfnApplicationOutputDefConfig(pydantic.BaseModel):
    DestinationSchemaProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefDestinationschemapropertyParams]] = pydantic.Field(None, description='')
    KinesisFirehoseOutputProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefKinesisfirehoseoutputpropertyParams]] = pydantic.Field(None, description='')
    KinesisStreamsOutputProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefKinesisstreamsoutputpropertyParams]] = pydantic.Field(None, description='')
    LambdaOutputProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefLambdaoutputpropertyParams]] = pydantic.Field(None, description='')
    OutputProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefOutputpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationOutputDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnApplicationOutputDefDestinationschemapropertyParams(pydantic.BaseModel):
    record_format_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationOutputDefKinesisfirehoseoutputpropertyParams(pydantic.BaseModel):
    resource_arn: str = pydantic.Field(..., description='')
    ...

class CfnApplicationOutputDefKinesisstreamsoutputpropertyParams(pydantic.BaseModel):
    resource_arn: str = pydantic.Field(..., description='')
    ...

class CfnApplicationOutputDefLambdaoutputpropertyParams(pydantic.BaseModel):
    resource_arn: str = pydantic.Field(..., description='')
    ...

class CfnApplicationOutputDefOutputpropertyParams(pydantic.BaseModel):
    destination_schema: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_DestinationSchemaPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    kinesis_firehose_output: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_KinesisFirehoseOutputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kinesis_streams_output: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_KinesisStreamsOutputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    lambda_output: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_LambdaOutputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationOutputDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApplicationOutputDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationOutputDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApplicationOutputDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationOutputDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApplicationOutputDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApplicationOutputDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApplicationOutputDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApplicationOutputDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApplicationOutputDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationOutputDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnApplicationOutputDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApplicationOutputDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationOutputDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource
class CfnApplicationReferenceDataSourceDef(BaseCfnResource):
    application_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the application.\n')
    reference_data_source: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_ReferenceDataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='For a SQL-based Kinesis Data Analytics application, describes the reference data source by providing the source information (Amazon S3 bucket name and object key name), the resulting in-application table name that is created, and the necessary schema to map the data elements in the Amazon S3 object to the in-application table.')
    _init_params: typing.ClassVar[list[str]] = ['application_name', 'reference_data_source']
    _method_names: typing.ClassVar[list[str]] = ['CSVMappingParametersProperty', 'JSONMappingParametersProperty', 'MappingParametersProperty', 'RecordColumnProperty', 'RecordFormatProperty', 'ReferenceDataSourceProperty', 'ReferenceSchemaProperty', 'S3ReferenceDataSourceProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefConfig] = pydantic.Field(None)


class CfnApplicationReferenceDataSourceDefConfig(pydantic.BaseModel):
    CSVMappingParametersProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefCsvmappingparameterspropertyParams]] = pydantic.Field(None, description='')
    JSONMappingParametersProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefJsonmappingparameterspropertyParams]] = pydantic.Field(None, description='')
    MappingParametersProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefMappingparameterspropertyParams]] = pydantic.Field(None, description='')
    RecordColumnProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefRecordcolumnpropertyParams]] = pydantic.Field(None, description='')
    RecordFormatProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefRecordformatpropertyParams]] = pydantic.Field(None, description='')
    ReferenceDataSourceProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefReferencedatasourcepropertyParams]] = pydantic.Field(None, description='')
    ReferenceSchemaProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefReferenceschemapropertyParams]] = pydantic.Field(None, description='')
    S3ReferenceDataSourceProperty: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefS3ReferencedatasourcepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnApplicationReferenceDataSourceDefCsvmappingparameterspropertyParams(pydantic.BaseModel):
    record_column_delimiter: str = pydantic.Field(..., description='')
    record_row_delimiter: str = pydantic.Field(..., description='')
    ...

class CfnApplicationReferenceDataSourceDefJsonmappingparameterspropertyParams(pydantic.BaseModel):
    record_row_path: str = pydantic.Field(..., description='')
    ...

class CfnApplicationReferenceDataSourceDefMappingparameterspropertyParams(pydantic.BaseModel):
    csv_mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_CSVMappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_JSONMappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationReferenceDataSourceDefRecordcolumnpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    sql_type: str = pydantic.Field(..., description='')
    mapping: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationReferenceDataSourceDefRecordformatpropertyParams(pydantic.BaseModel):
    record_format_type: str = pydantic.Field(..., description='')
    mapping_parameters: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_MappingParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationReferenceDataSourceDefReferencedatasourcepropertyParams(pydantic.BaseModel):
    reference_schema: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_ReferenceSchemaPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    s3_reference_data_source: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_S3ReferenceDataSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    table_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationReferenceDataSourceDefReferenceschemapropertyParams(pydantic.BaseModel):
    record_columns: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_RecordColumnPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    record_format: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_RecordFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    record_encoding: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationReferenceDataSourceDefS3ReferencedatasourcepropertyParams(pydantic.BaseModel):
    bucket_arn: str = pydantic.Field(..., description='')
    file_key: str = pydantic.Field(..., description='')
    ...

class CfnApplicationReferenceDataSourceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApplicationReferenceDataSourceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationReferenceDataSourceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApplicationReferenceDataSourceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationReferenceDataSourceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApplicationReferenceDataSourceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApplicationReferenceDataSourceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApplicationReferenceDataSourceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApplicationReferenceDataSourceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApplicationReferenceDataSourceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationReferenceDataSourceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnApplicationReferenceDataSourceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApplicationReferenceDataSourceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationReferenceDataSourceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionProps
class CfnApplicationCloudWatchLoggingOptionPropsDef(BaseCfnProperty):
    application_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the application.\n')
    cloud_watch_logging_option: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption_CloudWatchLoggingOptionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Provides a description of Amazon CloudWatch logging options, including the log stream Amazon Resource Name (ARN).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationcloudwatchloggingoption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    cfn_application_cloud_watch_logging_option_props = kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionProps(\n        application_name="applicationName",\n        cloud_watch_logging_option=kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption.CloudWatchLoggingOptionProperty(\n            log_stream_arn="logStreamArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_name', 'cloud_watch_logging_option']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutputProps
class CfnApplicationOutputPropsDef(BaseCfnProperty):
    application_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the application.\n')
    output: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationOutput_OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Describes a SQL-based Kinesis Data Analytics application\'s output configuration, in which you identify an in-application stream and a destination where you want the in-application stream data to be written. The destination can be a Kinesis data stream or a Kinesis Data Firehose delivery stream.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    cfn_application_output_props = kinesisanalyticsv2.CfnApplicationOutputProps(\n        application_name="applicationName",\n        output=kinesisanalyticsv2.CfnApplicationOutput.OutputProperty(\n            destination_schema=kinesisanalyticsv2.CfnApplicationOutput.DestinationSchemaProperty(\n                record_format_type="recordFormatType"\n            ),\n\n            # the properties below are optional\n            kinesis_firehose_output=kinesisanalyticsv2.CfnApplicationOutput.KinesisFirehoseOutputProperty(\n                resource_arn="resourceArn"\n            ),\n            kinesis_streams_output=kinesisanalyticsv2.CfnApplicationOutput.KinesisStreamsOutputProperty(\n                resource_arn="resourceArn"\n            ),\n            lambda_output=kinesisanalyticsv2.CfnApplicationOutput.LambdaOutputProperty(\n                resource_arn="resourceArn"\n            ),\n            name="name"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_name', 'output']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationOutputProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationProps
class CfnApplicationPropsDef(BaseCfnProperty):
    runtime_environment: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The runtime environment for the application.\n')
    service_execution_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the IAM role that the application uses to access external resources.\n')
    application_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use this parameter to configure the application.\n')
    application_description: typing.Optional[str] = pydantic.Field(None, description='The description of the application. Default: - ""\n')
    application_maintenance_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationMaintenanceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the maintenance configuration for the application.\n')
    application_mode: typing.Optional[str] = pydantic.Field(None, description='To create a Kinesis Data Analytics Studio notebook, you must set the mode to ``INTERACTIVE`` . However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.\n')
    application_name: typing.Optional[str] = pydantic.Field(None, description='The name of the application.\n')
    run_configuration: typing.Union[models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplication_RunConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the starting parameters for an Managed Service for Apache Flink application.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-application.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    cfn_application_props = kinesisanalyticsv2.CfnApplicationProps(\n        runtime_environment="runtimeEnvironment",\n        service_execution_role="serviceExecutionRole",\n\n        # the properties below are optional\n        application_configuration=kinesisanalyticsv2.CfnApplication.ApplicationConfigurationProperty(\n            application_code_configuration=kinesisanalyticsv2.CfnApplication.ApplicationCodeConfigurationProperty(\n                code_content=kinesisanalyticsv2.CfnApplication.CodeContentProperty(\n                    s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty(\n                        bucket_arn="bucketArn",\n                        file_key="fileKey",\n\n                        # the properties below are optional\n                        object_version="objectVersion"\n                    ),\n                    text_content="textContent",\n                    zip_file_content="zipFileContent"\n                ),\n                code_content_type="codeContentType"\n            ),\n            application_snapshot_configuration=kinesisanalyticsv2.CfnApplication.ApplicationSnapshotConfigurationProperty(\n                snapshots_enabled=False\n            ),\n            application_system_rollback_configuration=kinesisanalyticsv2.CfnApplication.ApplicationSystemRollbackConfigurationProperty(\n                rollback_enabled=False\n            ),\n            environment_properties=kinesisanalyticsv2.CfnApplication.EnvironmentPropertiesProperty(\n                property_groups=[kinesisanalyticsv2.CfnApplication.PropertyGroupProperty(\n                    property_group_id="propertyGroupId",\n                    property_map={\n                        "property_map_key": "propertyMap"\n                    }\n                )]\n            ),\n            flink_application_configuration=kinesisanalyticsv2.CfnApplication.FlinkApplicationConfigurationProperty(\n                checkpoint_configuration=kinesisanalyticsv2.CfnApplication.CheckpointConfigurationProperty(\n                    configuration_type="configurationType",\n\n                    # the properties below are optional\n                    checkpointing_enabled=False,\n                    checkpoint_interval=123,\n                    min_pause_between_checkpoints=123\n                ),\n                monitoring_configuration=kinesisanalyticsv2.CfnApplication.MonitoringConfigurationProperty(\n                    configuration_type="configurationType",\n\n                    # the properties below are optional\n                    log_level="logLevel",\n                    metrics_level="metricsLevel"\n                ),\n                parallelism_configuration=kinesisanalyticsv2.CfnApplication.ParallelismConfigurationProperty(\n                    configuration_type="configurationType",\n\n                    # the properties below are optional\n                    auto_scaling_enabled=False,\n                    parallelism=123,\n                    parallelism_per_kpu=123\n                )\n            ),\n            sql_application_configuration=kinesisanalyticsv2.CfnApplication.SqlApplicationConfigurationProperty(\n                inputs=[kinesisanalyticsv2.CfnApplication.InputProperty(\n                    input_schema=kinesisanalyticsv2.CfnApplication.InputSchemaProperty(\n                        record_columns=[kinesisanalyticsv2.CfnApplication.RecordColumnProperty(\n                            name="name",\n                            sql_type="sqlType",\n\n                            # the properties below are optional\n                            mapping="mapping"\n                        )],\n                        record_format=kinesisanalyticsv2.CfnApplication.RecordFormatProperty(\n                            record_format_type="recordFormatType",\n\n                            # the properties below are optional\n                            mapping_parameters=kinesisanalyticsv2.CfnApplication.MappingParametersProperty(\n                                csv_mapping_parameters=kinesisanalyticsv2.CfnApplication.CSVMappingParametersProperty(\n                                    record_column_delimiter="recordColumnDelimiter",\n                                    record_row_delimiter="recordRowDelimiter"\n                                ),\n                                json_mapping_parameters=kinesisanalyticsv2.CfnApplication.JSONMappingParametersProperty(\n                                    record_row_path="recordRowPath"\n                                )\n                            )\n                        ),\n\n                        # the properties below are optional\n                        record_encoding="recordEncoding"\n                    ),\n                    name_prefix="namePrefix",\n\n                    # the properties below are optional\n                    input_parallelism=kinesisanalyticsv2.CfnApplication.InputParallelismProperty(\n                        count=123\n                    ),\n                    input_processing_configuration=kinesisanalyticsv2.CfnApplication.InputProcessingConfigurationProperty(\n                        input_lambda_processor=kinesisanalyticsv2.CfnApplication.InputLambdaProcessorProperty(\n                            resource_arn="resourceArn"\n                        )\n                    ),\n                    kinesis_firehose_input=kinesisanalyticsv2.CfnApplication.KinesisFirehoseInputProperty(\n                        resource_arn="resourceArn"\n                    ),\n                    kinesis_streams_input=kinesisanalyticsv2.CfnApplication.KinesisStreamsInputProperty(\n                        resource_arn="resourceArn"\n                    )\n                )]\n            ),\n            vpc_configurations=[kinesisanalyticsv2.CfnApplication.VpcConfigurationProperty(\n                security_group_ids=["securityGroupIds"],\n                subnet_ids=["subnetIds"]\n            )],\n            zeppelin_application_configuration=kinesisanalyticsv2.CfnApplication.ZeppelinApplicationConfigurationProperty(\n                catalog_configuration=kinesisanalyticsv2.CfnApplication.CatalogConfigurationProperty(\n                    glue_data_catalog_configuration=kinesisanalyticsv2.CfnApplication.GlueDataCatalogConfigurationProperty(\n                        database_arn="databaseArn"\n                    )\n                ),\n                custom_artifacts_configuration=[kinesisanalyticsv2.CfnApplication.CustomArtifactConfigurationProperty(\n                    artifact_type="artifactType",\n\n                    # the properties below are optional\n                    maven_reference=kinesisanalyticsv2.CfnApplication.MavenReferenceProperty(\n                        artifact_id="artifactId",\n                        group_id="groupId",\n                        version="version"\n                    ),\n                    s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentLocationProperty(\n                        bucket_arn="bucketArn",\n                        file_key="fileKey",\n\n                        # the properties below are optional\n                        object_version="objectVersion"\n                    )\n                )],\n                deploy_as_application_configuration=kinesisanalyticsv2.CfnApplication.DeployAsApplicationConfigurationProperty(\n                    s3_content_location=kinesisanalyticsv2.CfnApplication.S3ContentBaseLocationProperty(\n                        bucket_arn="bucketArn",\n\n                        # the properties below are optional\n                        base_path="basePath"\n                    )\n                ),\n                monitoring_configuration=kinesisanalyticsv2.CfnApplication.ZeppelinMonitoringConfigurationProperty(\n                    log_level="logLevel"\n                )\n            )\n        ),\n        application_description="applicationDescription",\n        application_maintenance_configuration=kinesisanalyticsv2.CfnApplication.ApplicationMaintenanceConfigurationProperty(\n            application_maintenance_window_start_time="applicationMaintenanceWindowStartTime"\n        ),\n        application_mode="applicationMode",\n        application_name="applicationName",\n        run_configuration=kinesisanalyticsv2.CfnApplication.RunConfigurationProperty(\n            application_restore_configuration=kinesisanalyticsv2.CfnApplication.ApplicationRestoreConfigurationProperty(\n                application_restore_type="applicationRestoreType",\n\n                # the properties below are optional\n                snapshot_name="snapshotName"\n            ),\n            flink_run_configuration=kinesisanalyticsv2.CfnApplication.FlinkRunConfigurationProperty(\n                allow_non_restored_state=False\n            )\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['runtime_environment', 'service_execution_role', 'application_configuration', 'application_description', 'application_maintenance_configuration', 'application_mode', 'application_name', 'run_configuration', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceProps
class CfnApplicationReferenceDataSourcePropsDef(BaseCfnProperty):
    application_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the application.\n')
    reference_data_source: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_ReferenceDataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='For a SQL-based Kinesis Data Analytics application, describes the reference data source by providing the source information (Amazon S3 bucket name and object key name), the resulting in-application table name that is created, and the necessary schema to map the data elements in the Amazon S3 object to the in-application table.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationreferencedatasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kinesisanalyticsv2 as kinesisanalyticsv2\n\n    cfn_application_reference_data_source_props = kinesisanalyticsv2.CfnApplicationReferenceDataSourceProps(\n        application_name="applicationName",\n        reference_data_source=kinesisanalyticsv2.CfnApplicationReferenceDataSource.ReferenceDataSourceProperty(\n            reference_schema=kinesisanalyticsv2.CfnApplicationReferenceDataSource.ReferenceSchemaProperty(\n                record_columns=[kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordColumnProperty(\n                    name="name",\n                    sql_type="sqlType",\n\n                    # the properties below are optional\n                    mapping="mapping"\n                )],\n                record_format=kinesisanalyticsv2.CfnApplicationReferenceDataSource.RecordFormatProperty(\n                    record_format_type="recordFormatType",\n\n                    # the properties below are optional\n                    mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.MappingParametersProperty(\n                        csv_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.CSVMappingParametersProperty(\n                            record_column_delimiter="recordColumnDelimiter",\n                            record_row_delimiter="recordRowDelimiter"\n                        ),\n                        json_mapping_parameters=kinesisanalyticsv2.CfnApplicationReferenceDataSource.JSONMappingParametersProperty(\n                            record_row_path="recordRowPath"\n                        )\n                    )\n                ),\n\n                # the properties below are optional\n                record_encoding="recordEncoding"\n            ),\n\n            # the properties below are optional\n            s3_reference_data_source=kinesisanalyticsv2.CfnApplicationReferenceDataSource.S3ReferenceDataSourceProperty(\n                bucket_arn="bucketArn",\n                file_key="fileKey"\n            ),\n            table_name="tableName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_name', 'reference_data_source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnApplication_ApplicationCodeConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationCodeConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ApplicationConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ApplicationMaintenanceConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationMaintenanceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ApplicationRestoreConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationRestoreConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ApplicationSnapshotConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_ApplicationSnapshotConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_CatalogConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_CatalogConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_CheckpointConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_CheckpointConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_CodeContentProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_CodeContentPropertyDef]] = pydantic.Field(None)
    CfnApplication_CSVMappingParametersProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_CSVMappingParametersPropertyDef]] = pydantic.Field(None)
    CfnApplication_CustomArtifactConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_CustomArtifactConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_DeployAsApplicationConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_DeployAsApplicationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_EnvironmentPropertiesProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_EnvironmentPropertiesPropertyDef]] = pydantic.Field(None)
    CfnApplication_FlinkApplicationConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_FlinkApplicationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_FlinkRunConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_FlinkRunConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_GlueDataCatalogConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_GlueDataCatalogConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_InputLambdaProcessorProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_InputLambdaProcessorPropertyDef]] = pydantic.Field(None)
    CfnApplication_InputParallelismProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_InputParallelismPropertyDef]] = pydantic.Field(None)
    CfnApplication_InputProcessingConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_InputProcessingConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_InputProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_InputPropertyDef]] = pydantic.Field(None)
    CfnApplication_InputSchemaProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_InputSchemaPropertyDef]] = pydantic.Field(None)
    CfnApplication_JSONMappingParametersProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_JSONMappingParametersPropertyDef]] = pydantic.Field(None)
    CfnApplication_KinesisFirehoseInputProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_KinesisFirehoseInputPropertyDef]] = pydantic.Field(None)
    CfnApplication_KinesisStreamsInputProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_KinesisStreamsInputPropertyDef]] = pydantic.Field(None)
    CfnApplication_MappingParametersProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_MappingParametersPropertyDef]] = pydantic.Field(None)
    CfnApplication_MavenReferenceProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_MavenReferencePropertyDef]] = pydantic.Field(None)
    CfnApplication_MonitoringConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_MonitoringConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ParallelismConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_ParallelismConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_PropertyGroupProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_PropertyGroupPropertyDef]] = pydantic.Field(None)
    CfnApplication_RecordColumnProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_RecordColumnPropertyDef]] = pydantic.Field(None)
    CfnApplication_RecordFormatProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_RecordFormatPropertyDef]] = pydantic.Field(None)
    CfnApplication_RunConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_RunConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_S3ContentBaseLocationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_S3ContentBaseLocationPropertyDef]] = pydantic.Field(None)
    CfnApplication_S3ContentLocationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_S3ContentLocationPropertyDef]] = pydantic.Field(None)
    CfnApplication_SqlApplicationConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_SqlApplicationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_VpcConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_VpcConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ZeppelinApplicationConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_ZeppelinApplicationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ZeppelinMonitoringConfigurationProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplication_ZeppelinMonitoringConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplicationCloudWatchLoggingOption_CloudWatchLoggingOptionProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption_CloudWatchLoggingOptionPropertyDef]] = pydantic.Field(None)
    CfnApplicationOutput_DestinationSchemaProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationOutput_DestinationSchemaPropertyDef]] = pydantic.Field(None)
    CfnApplicationOutput_KinesisFirehoseOutputProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationOutput_KinesisFirehoseOutputPropertyDef]] = pydantic.Field(None)
    CfnApplicationOutput_KinesisStreamsOutputProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationOutput_KinesisStreamsOutputPropertyDef]] = pydantic.Field(None)
    CfnApplicationOutput_LambdaOutputProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationOutput_LambdaOutputPropertyDef]] = pydantic.Field(None)
    CfnApplicationOutput_OutputProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationOutput_OutputPropertyDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSource_CSVMappingParametersProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_CSVMappingParametersPropertyDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSource_JSONMappingParametersProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_JSONMappingParametersPropertyDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSource_MappingParametersProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_MappingParametersPropertyDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSource_RecordColumnProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_RecordColumnPropertyDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSource_RecordFormatProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_RecordFormatPropertyDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSource_ReferenceDataSourceProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_ReferenceDataSourcePropertyDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSource_ReferenceSchemaProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_ReferenceSchemaPropertyDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSource_S3ReferenceDataSourceProperty: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSource_S3ReferenceDataSourcePropertyDef]] = pydantic.Field(None)
    CfnApplication: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationDef]] = pydantic.Field(None)
    CfnApplicationCloudWatchLoggingOption: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionDef]] = pydantic.Field(None)
    CfnApplicationOutput: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationOutputDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSource: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourceDef]] = pydantic.Field(None)
    CfnApplicationCloudWatchLoggingOptionProps: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOptionPropsDef]] = pydantic.Field(None)
    CfnApplicationOutputProps: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationOutputPropsDef]] = pydantic.Field(None)
    CfnApplicationProps: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationPropsDef]] = pydantic.Field(None)
    CfnApplicationReferenceDataSourceProps: typing.Optional[dict[str, models.aws_kinesisanalyticsv2.CfnApplicationReferenceDataSourcePropsDef]] = pydantic.Field(None)
    ...

import models
