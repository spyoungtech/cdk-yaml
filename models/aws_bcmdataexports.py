from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_bcmdataexports.CfnExport.DataQueryProperty
class CfnExport_DataQueryPropertyDef(BaseStruct):
    query_statement: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The query statement.\n')
    table_configurations: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, typing.Mapping[str, str]]], None] = pydantic.Field(None, description='The table configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-bcmdataexports-export-dataquery.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_bcmdataexports as bcmdataexports\n\n    data_query_property = bcmdataexports.CfnExport.DataQueryProperty(\n        query_statement="queryStatement",\n\n        # the properties below are optional\n        table_configurations={\n            "table_configurations_key": {\n                "table_configurations_key": "tableConfigurations"\n            }\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['query_statement', 'table_configurations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_bcmdataexports.CfnExport.DataQueryProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_bcmdataexports.CfnExport.DestinationConfigurationsProperty
class CfnExport_DestinationConfigurationsPropertyDef(BaseStruct):
    s3_destination: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_S3DestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='An object that describes the destination of the data exports file.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-bcmdataexports-export-destinationconfigurations.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_bcmdataexports as bcmdataexports\n\n    destination_configurations_property = bcmdataexports.CfnExport.DestinationConfigurationsProperty(\n        s3_destination=bcmdataexports.CfnExport.S3DestinationProperty(\n            s3_bucket="s3Bucket",\n            s3_output_configurations=bcmdataexports.CfnExport.S3OutputConfigurationsProperty(\n                compression="compression",\n                format="format",\n                output_type="outputType",\n                overwrite="overwrite"\n            ),\n            s3_prefix="s3Prefix",\n            s3_region="s3Region"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_destination']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_bcmdataexports.CfnExport.DestinationConfigurationsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_bcmdataexports.CfnExport.ExportProperty
class CfnExport_ExportPropertyDef(BaseStruct):
    data_query: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_DataQueryPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The data query for this specific data export.\n')
    destination_configurations: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_DestinationConfigurationsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The destination configuration for this specific data export.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of this specific data export.\n')
    refresh_cadence: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_RefreshCadencePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The cadence for AWS to update the export in your S3 bucket.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description for this specific data export.\n')
    export_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for this export.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-bcmdataexports-export-export.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_bcmdataexports as bcmdataexports\n\n    export_property = bcmdataexports.CfnExport.ExportProperty(\n        data_query=bcmdataexports.CfnExport.DataQueryProperty(\n            query_statement="queryStatement",\n\n            # the properties below are optional\n            table_configurations={\n                "table_configurations_key": {\n                    "table_configurations_key": "tableConfigurations"\n                }\n            }\n        ),\n        destination_configurations=bcmdataexports.CfnExport.DestinationConfigurationsProperty(\n            s3_destination=bcmdataexports.CfnExport.S3DestinationProperty(\n                s3_bucket="s3Bucket",\n                s3_output_configurations=bcmdataexports.CfnExport.S3OutputConfigurationsProperty(\n                    compression="compression",\n                    format="format",\n                    output_type="outputType",\n                    overwrite="overwrite"\n                ),\n                s3_prefix="s3Prefix",\n                s3_region="s3Region"\n            )\n        ),\n        name="name",\n        refresh_cadence=bcmdataexports.CfnExport.RefreshCadenceProperty(\n            frequency="frequency"\n        ),\n\n        # the properties below are optional\n        description="description",\n        export_arn="exportArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_query', 'destination_configurations', 'name', 'refresh_cadence', 'description', 'export_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_bcmdataexports.CfnExport.ExportProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_bcmdataexports.CfnExport.RefreshCadenceProperty
class CfnExport_RefreshCadencePropertyDef(BaseStruct):
    frequency: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The frequency that data exports are updated. The export refreshes each time the source data updates, up to three times daily.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-bcmdataexports-export-refreshcadence.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_bcmdataexports as bcmdataexports\n\n    refresh_cadence_property = bcmdataexports.CfnExport.RefreshCadenceProperty(\n        frequency="frequency"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['frequency']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_bcmdataexports.CfnExport.RefreshCadenceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_bcmdataexports.CfnExport.ResourceTagProperty
class CfnExport_ResourceTagPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The key that's associated with the tag.\n")
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value that\'s associated with the tag.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-bcmdataexports-export-resourcetag.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_bcmdataexports as bcmdataexports\n\n    resource_tag_property = bcmdataexports.CfnExport.ResourceTagProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_bcmdataexports.CfnExport.ResourceTagProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_bcmdataexports.CfnExport.S3DestinationProperty
class CfnExport_S3DestinationPropertyDef(BaseStruct):
    s3_bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon S3 bucket used as the destination of a data export file.\n')
    s3_output_configurations: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_S3OutputConfigurationsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The output configuration for the data export.\n')
    s3_prefix: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The S3 path prefix you want prepended to the name of your data export.\n')
    s3_region: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The S3 bucket Region.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-bcmdataexports-export-s3destination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_bcmdataexports as bcmdataexports\n\n    s3_destination_property = bcmdataexports.CfnExport.S3DestinationProperty(\n        s3_bucket="s3Bucket",\n        s3_output_configurations=bcmdataexports.CfnExport.S3OutputConfigurationsProperty(\n            compression="compression",\n            format="format",\n            output_type="outputType",\n            overwrite="overwrite"\n        ),\n        s3_prefix="s3Prefix",\n        s3_region="s3Region"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_bucket', 's3_output_configurations', 's3_prefix', 's3_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_bcmdataexports.CfnExport.S3DestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_bcmdataexports.CfnExport.S3OutputConfigurationsProperty
class CfnExport_S3OutputConfigurationsPropertyDef(BaseStruct):
    compression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The compression type for the data export.\n')
    format: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The file format for the data export.\n')
    output_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The output type for the data export.\n')
    overwrite: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The rule to follow when generating a version of the data export file. You have the choice to overwrite the previous version or to be delivered in addition to the previous versions. Overwriting exports can save on Amazon S3 storage costs. Creating new export versions allows you to track the changes in cost and usage data over time.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-bcmdataexports-export-s3outputconfigurations.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_bcmdataexports as bcmdataexports\n\n    s3_output_configurations_property = bcmdataexports.CfnExport.S3OutputConfigurationsProperty(\n        compression="compression",\n        format="format",\n        output_type="outputType",\n        overwrite="overwrite"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['compression', 'format', 'output_type', 'overwrite']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_bcmdataexports.CfnExport.S3OutputConfigurationsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_bcmdataexports.CfnExport
class CfnExportDef(BaseCfnResource):
    export: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_ExportPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The details that are available for an export.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.aws_bcmdataexports.CfnExport_ResourceTagPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['export', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['DataQueryProperty', 'DestinationConfigurationsProperty', 'ExportProperty', 'RefreshCadenceProperty', 'ResourceTagProperty', 'S3DestinationProperty', 'S3OutputConfigurationsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_bcmdataexports.CfnExport'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_bcmdataexports.CfnExportDefConfig] = pydantic.Field(None)


class CfnExportDefConfig(pydantic.BaseModel):
    DataQueryProperty: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefDataquerypropertyParams]] = pydantic.Field(None, description='')
    DestinationConfigurationsProperty: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefDestinationconfigurationspropertyParams]] = pydantic.Field(None, description='')
    ExportProperty: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefExportpropertyParams]] = pydantic.Field(None, description='')
    RefreshCadenceProperty: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefRefreshcadencepropertyParams]] = pydantic.Field(None, description='')
    ResourceTagProperty: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefResourcetagpropertyParams]] = pydantic.Field(None, description='')
    S3DestinationProperty: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefS3DestinationpropertyParams]] = pydantic.Field(None, description='')
    S3OutputConfigurationsProperty: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefS3OutputconfigurationspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_bcmdataexports.CfnExportDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnExportDefDataquerypropertyParams(pydantic.BaseModel):
    query_statement: str = pydantic.Field(..., description='')
    table_configurations: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, typing.Mapping[str, str]]], None] = pydantic.Field(None, description='')
    ...

class CfnExportDefDestinationconfigurationspropertyParams(pydantic.BaseModel):
    s3_destination: typing.Union[models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_S3DestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnExportDefExportpropertyParams(pydantic.BaseModel):
    data_query: typing.Union[models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_DataQueryPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    destination_configurations: typing.Union[models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_DestinationConfigurationsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    refresh_cadence: typing.Union[models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_RefreshCadencePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    export_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnExportDefRefreshcadencepropertyParams(pydantic.BaseModel):
    frequency: str = pydantic.Field(..., description='')
    ...

class CfnExportDefResourcetagpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnExportDefS3DestinationpropertyParams(pydantic.BaseModel):
    s3_bucket: str = pydantic.Field(..., description='')
    s3_output_configurations: typing.Union[models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_S3OutputConfigurationsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    s3_prefix: str = pydantic.Field(..., description='')
    s3_region: str = pydantic.Field(..., description='')
    ...

class CfnExportDefS3OutputconfigurationspropertyParams(pydantic.BaseModel):
    compression: str = pydantic.Field(..., description='')
    format: str = pydantic.Field(..., description='')
    output_type: str = pydantic.Field(..., description='')
    overwrite: str = pydantic.Field(..., description='')
    ...

class CfnExportDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnExportDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnExportDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnExportDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnExportDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnExportDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnExportDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnExportDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnExportDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnExportDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnExportDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnExportDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnExportDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnExportDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_bcmdataexports.CfnExportProps
class CfnExportPropsDef(BaseCfnProperty):
    export: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_bcmdataexports.CfnExport_ExportPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The details that are available for an export.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.aws_bcmdataexports.CfnExport_ResourceTagPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['export', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_bcmdataexports.CfnExportProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnExport_DataQueryProperty: typing.Optional[dict[str, models.aws_bcmdataexports.CfnExport_DataQueryPropertyDef]] = pydantic.Field(None)
    CfnExport_DestinationConfigurationsProperty: typing.Optional[dict[str, models.aws_bcmdataexports.CfnExport_DestinationConfigurationsPropertyDef]] = pydantic.Field(None)
    CfnExport_ExportProperty: typing.Optional[dict[str, models.aws_bcmdataexports.CfnExport_ExportPropertyDef]] = pydantic.Field(None)
    CfnExport_RefreshCadenceProperty: typing.Optional[dict[str, models.aws_bcmdataexports.CfnExport_RefreshCadencePropertyDef]] = pydantic.Field(None)
    CfnExport_ResourceTagProperty: typing.Optional[dict[str, models.aws_bcmdataexports.CfnExport_ResourceTagPropertyDef]] = pydantic.Field(None)
    CfnExport_S3DestinationProperty: typing.Optional[dict[str, models.aws_bcmdataexports.CfnExport_S3DestinationPropertyDef]] = pydantic.Field(None)
    CfnExport_S3OutputConfigurationsProperty: typing.Optional[dict[str, models.aws_bcmdataexports.CfnExport_S3OutputConfigurationsPropertyDef]] = pydantic.Field(None)
    CfnExport: typing.Optional[dict[str, models.aws_bcmdataexports.CfnExportDef]] = pydantic.Field(None)
    CfnExportProps: typing.Optional[dict[str, models.aws_bcmdataexports.CfnExportPropsDef]] = pydantic.Field(None)
    ...

import models
