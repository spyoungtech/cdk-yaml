from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewall.SubnetMappingProperty
class CfnFirewall_SubnetMappingPropertyDef(BaseStruct):
    subnet_id: str = pydantic.Field(..., description='The unique identifier for the subnet.\n')
    ip_address_type: typing.Optional[str] = pydantic.Field(None, description='The subnet\'s IP address type. You can\'t change the IP address type after you create the subnet.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewall-subnetmapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    subnet_mapping_property = networkfirewall.CfnFirewall.SubnetMappingProperty(\n        subnet_id="subnetId",\n\n        # the properties below are optional\n        ip_address_type="ipAddressType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['subnet_id', 'ip_address_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewall.SubnetMappingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.ActionDefinitionProperty
class CfnFirewallPolicy_ActionDefinitionPropertyDef(BaseStruct):
    publish_metric_action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_PublishMetricActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. This setting defines a CloudWatch dimension value to be published. You can pair this custom action with any of the standard stateless rule actions. For example, you could pair this in a rule action with the standard action that forwards the packet for stateful inspection. Then, when a packet matches the rule, Network Firewall publishes metrics for the packet and forwards it.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-actiondefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    action_definition_property = networkfirewall.CfnFirewallPolicy.ActionDefinitionProperty(\n        publish_metric_action=networkfirewall.CfnFirewallPolicy.PublishMetricActionProperty(\n            dimensions=[networkfirewall.CfnFirewallPolicy.DimensionProperty(\n                value="value"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['publish_metric_action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.ActionDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.CustomActionProperty
class CfnFirewallPolicy_CustomActionPropertyDef(BaseStruct):
    action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_ActionDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The custom action associated with the action name.\n')
    action_name: str = pydantic.Field(..., description='The descriptive name of the custom action. You can\'t change the name of a custom action after you create it.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-customaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    custom_action_property = networkfirewall.CfnFirewallPolicy.CustomActionProperty(\n        action_definition=networkfirewall.CfnFirewallPolicy.ActionDefinitionProperty(\n            publish_metric_action=networkfirewall.CfnFirewallPolicy.PublishMetricActionProperty(\n                dimensions=[networkfirewall.CfnFirewallPolicy.DimensionProperty(\n                    value="value"\n                )]\n            )\n        ),\n        action_name="actionName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action_definition', 'action_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.CustomActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.DimensionProperty
class CfnFirewallPolicy_DimensionPropertyDef(BaseStruct):
    value: str = pydantic.Field(..., description='The value to use in the custom metric dimension.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-dimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    dimension_property = networkfirewall.CfnFirewallPolicy.DimensionProperty(\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.DimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.FirewallPolicyProperty
class CfnFirewallPolicy_FirewallPolicyPropertyDef(BaseStruct):
    stateless_default_actions: typing.Sequence[str] = pydantic.Field(..., description='The actions to take on a packet if it doesn\'t match any of the stateless rules in the policy. If you want non-matching packets to be forwarded for stateful inspection, specify ``aws:forward_to_sfe`` . You must specify one of the standard actions: ``aws:pass`` , ``aws:drop`` , or ``aws:forward_to_sfe`` . In addition, you can specify custom actions that are compatible with your standard section choice. For example, you could specify ``["aws:pass"]`` or you could specify ``["aws:pass", “customActionName”]`` . For information about compatibility, see the custom action descriptions.\n')
    stateless_fragment_default_actions: typing.Sequence[str] = pydantic.Field(..., description='The actions to take on a fragmented packet if it doesn\'t match any of the stateless rules in the policy. If you want non-matching fragmented packets to be forwarded for stateful inspection, specify ``aws:forward_to_sfe`` . You must specify one of the standard actions: ``aws:pass`` , ``aws:drop`` , or ``aws:forward_to_sfe`` . In addition, you can specify custom actions that are compatible with your standard section choice. For example, you could specify ``["aws:pass"]`` or you could specify ``["aws:pass", “customActionName”]`` . For information about compatibility, see the custom action descriptions.\n')
    policy_variables: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_PolicyVariablesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains variables that you can use to override default Suricata settings in your firewall policy.\n')
    stateful_default_actions: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="The default actions to take on a packet that doesn't match any stateful rules. The stateful default action is optional, and is only valid when using the strict rule order. Valid values of the stateful default action: - aws:drop_strict - aws:drop_established - aws:alert_strict - aws:alert_established For more information, see `Strict evaluation order <https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html#suricata-strict-rule-evaluation-order.html>`_ in the *AWS Network Firewall Developer Guide* .\n")
    stateful_engine_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_StatefulEngineOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Additional options governing how Network Firewall handles stateful rules. The stateful rule groups that you use in your policy must have stateful rule options settings that are compatible with these settings.\n')
    stateful_rule_group_references: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_StatefulRuleGroupReferencePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='References to the stateful rule groups that are used in the policy. These define the inspection criteria in stateful rules.\n')
    stateless_custom_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_CustomActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The custom action definitions that are available for use in the firewall policy's ``StatelessDefaultActions`` setting. You name each custom action that you define, and then you can use it by name in your default actions specifications.\n")
    stateless_rule_group_references: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_StatelessRuleGroupReferencePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='References to the stateless rule groups that are used in the policy. These define the matching criteria in stateless rules.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-firewallpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    firewall_policy_property = networkfirewall.CfnFirewallPolicy.FirewallPolicyProperty(\n        stateless_default_actions=["statelessDefaultActions"],\n        stateless_fragment_default_actions=["statelessFragmentDefaultActions"],\n\n        # the properties below are optional\n        policy_variables=networkfirewall.CfnFirewallPolicy.PolicyVariablesProperty(\n            rule_variables={\n                "rule_variables_key": {\n                    "definition": ["definition"]\n                }\n            }\n        ),\n        stateful_default_actions=["statefulDefaultActions"],\n        stateful_engine_options=networkfirewall.CfnFirewallPolicy.StatefulEngineOptionsProperty(\n            rule_order="ruleOrder",\n            stream_exception_policy="streamExceptionPolicy"\n        ),\n        stateful_rule_group_references=[networkfirewall.CfnFirewallPolicy.StatefulRuleGroupReferenceProperty(\n            resource_arn="resourceArn",\n\n            # the properties below are optional\n            override=networkfirewall.CfnFirewallPolicy.StatefulRuleGroupOverrideProperty(\n                action="action"\n            ),\n            priority=123\n        )],\n        stateless_custom_actions=[networkfirewall.CfnFirewallPolicy.CustomActionProperty(\n            action_definition=networkfirewall.CfnFirewallPolicy.ActionDefinitionProperty(\n                publish_metric_action=networkfirewall.CfnFirewallPolicy.PublishMetricActionProperty(\n                    dimensions=[networkfirewall.CfnFirewallPolicy.DimensionProperty(\n                        value="value"\n                    )]\n                )\n            ),\n            action_name="actionName"\n        )],\n        stateless_rule_group_references=[networkfirewall.CfnFirewallPolicy.StatelessRuleGroupReferenceProperty(\n            priority=123,\n            resource_arn="resourceArn"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['stateless_default_actions', 'stateless_fragment_default_actions', 'policy_variables', 'stateful_default_actions', 'stateful_engine_options', 'stateful_rule_group_references', 'stateless_custom_actions', 'stateless_rule_group_references']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.FirewallPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.IPSetProperty
class CfnFirewallPolicy_IPSetPropertyDef(BaseStruct):
    definition: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of IP addresses and address ranges, in CIDR notation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-ipset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    i_pSet_property = {\n        "definition": ["definition"]\n    }\n')
    _init_params: typing.ClassVar[list[str]] = ['definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.IPSetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.PolicyVariablesProperty
class CfnFirewallPolicy_PolicyVariablesPropertyDef(BaseStruct):
    rule_variables: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_IPSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The IPv4 or IPv6 addresses in CIDR notation to use for the Suricata ``HOME_NET`` variable. If your firewall uses an inspection VPC, you might want to override the ``HOME_NET`` variable with the CIDRs of your home networks. If you don\'t override ``HOME_NET`` with your own CIDRs, Network Firewall by default uses the CIDR of your inspection VPC.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-policyvariables.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    policy_variables_property = networkfirewall.CfnFirewallPolicy.PolicyVariablesProperty(\n        rule_variables={\n            "rule_variables_key": {\n                "definition": ["definition"]\n            }\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rule_variables']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.PolicyVariablesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.PublishMetricActionProperty
class CfnFirewallPolicy_PublishMetricActionPropertyDef(BaseStruct):
    dimensions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_DimensionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='``CfnFirewallPolicy.PublishMetricActionProperty.Dimensions``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-publishmetricaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    publish_metric_action_property = networkfirewall.CfnFirewallPolicy.PublishMetricActionProperty(\n        dimensions=[networkfirewall.CfnFirewallPolicy.DimensionProperty(\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dimensions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.PublishMetricActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.StatefulEngineOptionsProperty
class CfnFirewallPolicy_StatefulEngineOptionsPropertyDef(BaseStruct):
    rule_order: typing.Optional[str] = pydantic.Field(None, description='Indicates how to manage the order of stateful rule evaluation for the policy. ``DEFAULT_ACTION_ORDER`` is the default behavior. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them based on certain settings. For more information, see `Evaluation order for stateful rules <https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html>`_ in the *AWS Network Firewall Developer Guide* .\n')
    stream_exception_policy: typing.Optional[str] = pydantic.Field(None, description='Configures how Network Firewall processes traffic when a network connection breaks midstream. Network connections can break due to disruptions in external networks or within the firewall itself. - ``DROP`` - Network Firewall fails closed and drops all subsequent traffic going to the firewall. This is the default behavior. - ``CONTINUE`` - Network Firewall continues to apply rules to the subsequent traffic without context from traffic before the break. This impacts the behavior of rules that depend on this context. For example, if you have a stateful rule to ``drop http`` traffic, Network Firewall won\'t match the traffic for this rule because the service won\'t have the context from session initialization defining the application layer protocol as HTTP. However, this behavior is rule dependent—a TCP-layer rule using a ``flow:stateless`` rule would still match, as would the ``aws:drop_strict`` default action. - ``REJECT`` - Network Firewall fails closed and drops all subsequent traffic going to the firewall. Network Firewall also sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall will have context about the new session and will apply rules to the subsequent traffic.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-statefulengineoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    stateful_engine_options_property = networkfirewall.CfnFirewallPolicy.StatefulEngineOptionsProperty(\n        rule_order="ruleOrder",\n        stream_exception_policy="streamExceptionPolicy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rule_order', 'stream_exception_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.StatefulEngineOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.StatefulRuleGroupOverrideProperty
class CfnFirewallPolicy_StatefulRuleGroupOverridePropertyDef(BaseStruct):
    action: typing.Optional[str] = pydantic.Field(None, description='The action that changes the rule group from ``DROP`` to ``ALERT`` . This only applies to managed rule groups.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-statefulrulegroupoverride.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    stateful_rule_group_override_property = networkfirewall.CfnFirewallPolicy.StatefulRuleGroupOverrideProperty(\n        action="action"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.StatefulRuleGroupOverrideProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.StatefulRuleGroupReferenceProperty
class CfnFirewallPolicy_StatefulRuleGroupReferencePropertyDef(BaseStruct):
    resource_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the stateful rule group.\n')
    override: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_StatefulRuleGroupOverridePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The action that allows the policy owner to override the behavior of the rule group within a policy.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='An integer setting that indicates the order in which to run the stateful rule groups in a single ``FirewallPolicy`` . This setting only applies to firewall policies that specify the ``STRICT_ORDER`` rule order in the stateful engine options settings. Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy. You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there\'s a wide range in between, for example use 100, 200, and so on.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-statefulrulegroupreference.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    stateful_rule_group_reference_property = networkfirewall.CfnFirewallPolicy.StatefulRuleGroupReferenceProperty(\n        resource_arn="resourceArn",\n\n        # the properties below are optional\n        override=networkfirewall.CfnFirewallPolicy.StatefulRuleGroupOverrideProperty(\n            action="action"\n        ),\n        priority=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_arn', 'override', 'priority']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.StatefulRuleGroupReferenceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy.StatelessRuleGroupReferenceProperty
class CfnFirewallPolicy_StatelessRuleGroupReferencePropertyDef(BaseStruct):
    priority: typing.Union[int, float] = pydantic.Field(..., description='An integer setting that indicates the order in which to run the stateless rule groups in a single ``FirewallPolicy`` . Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy.\n')
    resource_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the stateless rule group.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-firewallpolicy-statelessrulegroupreference.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    stateless_rule_group_reference_property = networkfirewall.CfnFirewallPolicy.StatelessRuleGroupReferenceProperty(\n        priority=123,\n        resource_arn="resourceArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['priority', 'resource_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy.StatelessRuleGroupReferenceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnLoggingConfiguration.LogDestinationConfigProperty
class CfnLoggingConfiguration_LogDestinationConfigPropertyDef(BaseStruct):
    log_destination: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str]] = pydantic.Field(..., description='The named location for the logs, provided in a key:value mapping that is specific to the chosen destination type. - For an Amazon S3 bucket, provide the name of the bucket, with key ``bucketName`` , and optionally provide a prefix, with key ``prefix`` . The following example specifies an Amazon S3 bucket named ``DOC-EXAMPLE-BUCKET`` and the prefix ``alerts`` : ``"LogDestination": { "bucketName": "DOC-EXAMPLE-BUCKET", "prefix": "alerts" }`` - For a CloudWatch log group, provide the name of the CloudWatch log group, with key ``logGroup`` . The following example specifies a log group named ``alert-log-group`` : ``"LogDestination": { "logGroup": "alert-log-group" }`` - For a Kinesis Data Firehose delivery stream, provide the name of the delivery stream, with key ``deliveryStream`` . The following example specifies a delivery stream named ``alert-delivery-stream`` : ``"LogDestination": { "deliveryStream": "alert-delivery-stream" }``\n')
    log_destination_type: str = pydantic.Field(..., description='The type of storage destination to send these logs to. You can send logs to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data Firehose delivery stream.\n')
    log_type: str = pydantic.Field(..., description='The type of log to send. Alert logs report traffic that matches a stateful rule with an action setting that sends an alert log message. Flow logs are standard network traffic flow logs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-loggingconfiguration-logdestinationconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    log_destination_config_property = networkfirewall.CfnLoggingConfiguration.LogDestinationConfigProperty(\n        log_destination={\n            "log_destination_key": "logDestination"\n        },\n        log_destination_type="logDestinationType",\n        log_type="logType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_destination', 'log_destination_type', 'log_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnLoggingConfiguration.LogDestinationConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnLoggingConfiguration.LoggingConfigurationProperty
class CfnLoggingConfiguration_LoggingConfigurationPropertyDef(BaseStruct):
    log_destination_configs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnLoggingConfiguration_LogDestinationConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Defines the logging destinations for the logs for a firewall. Network Firewall generates logs for stateful rule groups.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-loggingconfiguration-loggingconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    logging_configuration_property = networkfirewall.CfnLoggingConfiguration.LoggingConfigurationProperty(\n        log_destination_configs=[networkfirewall.CfnLoggingConfiguration.LogDestinationConfigProperty(\n            log_destination={\n                "log_destination_key": "logDestination"\n            },\n            log_destination_type="logDestinationType",\n            log_type="logType"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_destination_configs']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnLoggingConfiguration.LoggingConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.ActionDefinitionProperty
class CfnRuleGroup_ActionDefinitionPropertyDef(BaseStruct):
    publish_metric_action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_PublishMetricActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. This setting defines a CloudWatch dimension value to be published. You can pair this custom action with any of the standard stateless rule actions. For example, you could pair this in a rule action with the standard action that forwards the packet for stateful inspection. Then, when a packet matches the rule, Network Firewall publishes metrics for the packet and forwards it.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-actiondefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    action_definition_property = networkfirewall.CfnRuleGroup.ActionDefinitionProperty(\n        publish_metric_action=networkfirewall.CfnRuleGroup.PublishMetricActionProperty(\n            dimensions=[networkfirewall.CfnRuleGroup.DimensionProperty(\n                value="value"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['publish_metric_action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.ActionDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.AddressProperty
class CfnRuleGroup_AddressPropertyDef(BaseStruct):
    address_definition: str = pydantic.Field(..., description='Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6. Examples: - To configure Network Firewall to inspect for the IP address 192.0.2.44, specify ``192.0.2.44/32`` . - To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify ``192.0.2.0/24`` . - To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify ``1111:0000:0000:0000:0000:0000:0000:0111/128`` . - To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify ``1111:0000:0000:0000:0000:0000:0000:0000/64`` . For more information about CIDR notation, see the Wikipedia entry `Classless Inter-Domain Routing <https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-address.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    address_property = networkfirewall.CfnRuleGroup.AddressProperty(\n        address_definition="addressDefinition"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['address_definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.AddressProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.CustomActionProperty
class CfnRuleGroup_CustomActionPropertyDef(BaseStruct):
    action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_ActionDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The custom action associated with the action name.\n')
    action_name: str = pydantic.Field(..., description='The descriptive name of the custom action. You can\'t change the name of a custom action after you create it.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-customaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    custom_action_property = networkfirewall.CfnRuleGroup.CustomActionProperty(\n        action_definition=networkfirewall.CfnRuleGroup.ActionDefinitionProperty(\n            publish_metric_action=networkfirewall.CfnRuleGroup.PublishMetricActionProperty(\n                dimensions=[networkfirewall.CfnRuleGroup.DimensionProperty(\n                    value="value"\n                )]\n            )\n        ),\n        action_name="actionName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action_definition', 'action_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.CustomActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.DimensionProperty
class CfnRuleGroup_DimensionPropertyDef(BaseStruct):
    value: str = pydantic.Field(..., description='The value to use in the custom metric dimension.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-dimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    dimension_property = networkfirewall.CfnRuleGroup.DimensionProperty(\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.DimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.HeaderProperty
class CfnRuleGroup_HeaderPropertyDef(BaseStruct):
    destination: str = pydantic.Field(..., description='The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify ``ANY`` . Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6. Examples: - To configure Network Firewall to inspect for the IP address 192.0.2.44, specify ``192.0.2.44/32`` . - To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify ``192.0.2.0/24`` . - To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify ``1111:0000:0000:0000:0000:0000:0000:0111/128`` . - To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify ``1111:0000:0000:0000:0000:0000:0000:0000/64`` . For more information about CIDR notation, see the Wikipedia entry `Classless Inter-Domain Routing <https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing>`_ .\n')
    destination_port: str = pydantic.Field(..., description='The destination port to inspect for. You can specify an individual port, for example ``1994`` and you can specify a port range, for example ``1990:1994`` . To match with any port, specify ``ANY`` .\n')
    direction: str = pydantic.Field(..., description='The direction of traffic flow to inspect. If set to ``ANY`` , the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to ``FORWARD`` , the inspection only matches traffic going from the source to the destination.\n')
    protocol: str = pydantic.Field(..., description='The protocol to inspect for. To specify all, you can use ``IP`` , because all traffic on AWS and on the internet is IP.\n')
    source: str = pydantic.Field(..., description='The source IP address or address range to inspect for, in CIDR notation. To match with any address, specify ``ANY`` . Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6. Examples: - To configure Network Firewall to inspect for the IP address 192.0.2.44, specify ``192.0.2.44/32`` . - To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify ``192.0.2.0/24`` . - To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify ``1111:0000:0000:0000:0000:0000:0000:0111/128`` . - To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify ``1111:0000:0000:0000:0000:0000:0000:0000/64`` . For more information about CIDR notation, see the Wikipedia entry `Classless Inter-Domain Routing <https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing>`_ .\n')
    source_port: str = pydantic.Field(..., description='The source port to inspect for. You can specify an individual port, for example ``1994`` and you can specify a port range, for example ``1990:1994`` . To match with any port, specify ``ANY`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-header.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    header_property = networkfirewall.CfnRuleGroup.HeaderProperty(\n        destination="destination",\n        destination_port="destinationPort",\n        direction="direction",\n        protocol="protocol",\n        source="source",\n        source_port="sourcePort"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'destination_port', 'direction', 'protocol', 'source', 'source_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.HeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.IPSetProperty
class CfnRuleGroup_IPSetPropertyDef(BaseStruct):
    definition: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of IP addresses and address ranges, in CIDR notation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-ipset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    i_pSet_property = {\n        "definition": ["definition"]\n    }\n')
    _init_params: typing.ClassVar[list[str]] = ['definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.IPSetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.IPSetReferenceProperty
class CfnRuleGroup_IPSetReferencePropertyDef(BaseStruct):
    reference_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the resource to include in the ``RuleGroup.IPSetReference`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-ipsetreference.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    i_pSet_reference_property = {\n        "reference_arn": "referenceArn"\n    }\n')
    _init_params: typing.ClassVar[list[str]] = ['reference_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.IPSetReferenceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.MatchAttributesProperty
class CfnRuleGroup_MatchAttributesPropertyDef(BaseStruct):
    destination_ports: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_PortRangePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The destination ports to inspect for. If not specified, this matches with any destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). You can specify individual ports, for example ``1994`` and you can specify port ranges, for example ``1990:1994`` .\n')
    destinations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_AddressPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The destination IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address.\n')
    protocols: typing.Union[typing.Sequence[typing.Union[int, float]], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="The protocols to inspect for, specified using each protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.\n")
    source_ports: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_PortRangePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The source ports to inspect for. If not specified, this matches with any source port. This setting is only used for protocols 6 (TCP) and 17 (UDP). You can specify individual ports, for example ``1994`` and you can specify port ranges, for example ``1990:1994`` .\n')
    sources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_AddressPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The source IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address.\n')
    tcp_flags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_TCPFlagFieldPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The TCP flags and masks to inspect for. If not specified, this matches with any settings. This setting is only used for protocol 6 (TCP).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-matchattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    match_attributes_property = networkfirewall.CfnRuleGroup.MatchAttributesProperty(\n        destination_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n            from_port=123,\n            to_port=123\n        )],\n        destinations=[networkfirewall.CfnRuleGroup.AddressProperty(\n            address_definition="addressDefinition"\n        )],\n        protocols=[123],\n        source_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n            from_port=123,\n            to_port=123\n        )],\n        sources=[networkfirewall.CfnRuleGroup.AddressProperty(\n            address_definition="addressDefinition"\n        )],\n        tcp_flags=[networkfirewall.CfnRuleGroup.TCPFlagFieldProperty(\n            flags=["flags"],\n\n            # the properties below are optional\n            masks=["masks"]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination_ports', 'destinations', 'protocols', 'source_ports', 'sources', 'tcp_flags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.MatchAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.PortRangeProperty
class CfnRuleGroup_PortRangePropertyDef(BaseStruct):
    from_port: typing.Union[int, float] = pydantic.Field(..., description='The lower limit of the port range. This must be less than or equal to the ``ToPort`` specification.\n')
    to_port: typing.Union[int, float] = pydantic.Field(..., description='The upper limit of the port range. This must be greater than or equal to the ``FromPort`` specification.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-portrange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    port_range_property = networkfirewall.CfnRuleGroup.PortRangeProperty(\n        from_port=123,\n        to_port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['from_port', 'to_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.PortRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.PortSetProperty
class CfnRuleGroup_PortSetPropertyDef(BaseStruct):
    definition: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The set of port ranges.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-portset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    port_set_property = networkfirewall.CfnRuleGroup.PortSetProperty(\n        definition=["definition"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.PortSetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.PublishMetricActionProperty
class CfnRuleGroup_PublishMetricActionPropertyDef(BaseStruct):
    dimensions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_DimensionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='``CfnRuleGroup.PublishMetricActionProperty.Dimensions``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-publishmetricaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    publish_metric_action_property = networkfirewall.CfnRuleGroup.PublishMetricActionProperty(\n        dimensions=[networkfirewall.CfnRuleGroup.DimensionProperty(\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dimensions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.PublishMetricActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.ReferenceSetsProperty
class CfnRuleGroup_ReferenceSetsPropertyDef(BaseStruct):
    ip_set_references: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_IPSetReferencePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The IP set references to use in the stateful rule group.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-referencesets.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    reference_sets_property = networkfirewall.CfnRuleGroup.ReferenceSetsProperty(\n        ip_set_references={\n            "ip_set_references_key": {\n                "reference_arn": "referenceArn"\n            }\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ip_set_references']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.ReferenceSetsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.RuleDefinitionProperty
class CfnRuleGroup_RuleDefinitionPropertyDef(BaseStruct):
    actions: typing.Sequence[str] = pydantic.Field(..., description="The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action and you can add custom actions. .. epigraph:: Network Firewall only forwards a packet for stateful rule inspection if you specify ``aws:forward_to_sfe`` for a rule that the packet matches, or if the packet doesn't match any stateless rule and you specify ``aws:forward_to_sfe`` for the ``StatelessDefaultActions`` setting for the ``FirewallPolicy`` . For every rule, you must specify exactly one of the following standard actions. - *aws:pass* - Discontinues all inspection of the packet and permits it to go to its intended destination. - *aws:drop* - Discontinues all inspection of the packet and blocks it from going to its intended destination. - *aws:forward_to_sfe* - Discontinues stateless inspection of the packet and forwards it to the stateful rule engine for inspection. Additionally, you can specify a custom action. To do this, you define a custom action by name and type, then provide the name you've assigned to the action in this ``Actions`` setting. To provide more than one action in this setting, separate the settings with a comma. For example, if you have a publish metrics custom action that you've named ``MyMetricsAction`` , then you could specify the standard action ``aws:pass`` combined with the custom action using ``[“aws:pass”, “MyMetricsAction”]`` .\n")
    match_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_MatchAttributesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-ruledefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    rule_definition_property = networkfirewall.CfnRuleGroup.RuleDefinitionProperty(\n        actions=["actions"],\n        match_attributes=networkfirewall.CfnRuleGroup.MatchAttributesProperty(\n            destination_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                from_port=123,\n                to_port=123\n            )],\n            destinations=[networkfirewall.CfnRuleGroup.AddressProperty(\n                address_definition="addressDefinition"\n            )],\n            protocols=[123],\n            source_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                from_port=123,\n                to_port=123\n            )],\n            sources=[networkfirewall.CfnRuleGroup.AddressProperty(\n                address_definition="addressDefinition"\n            )],\n            tcp_flags=[networkfirewall.CfnRuleGroup.TCPFlagFieldProperty(\n                flags=["flags"],\n\n                # the properties below are optional\n                masks=["masks"]\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'match_attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.RuleDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.RuleGroupProperty
class CfnRuleGroup_RuleGroupPropertyDef(BaseStruct):
    rules_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RulesSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The stateful rules or stateless rules for the rule group.\n')
    reference_sets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_ReferenceSetsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The reference sets for the stateful rule group.\n')
    rule_variables: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RuleVariablesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Settings that are available for use in the rules in the rule group. You can only use these for stateful rule groups.\n')
    stateful_rule_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_StatefulRuleOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Additional options governing how Network Firewall handles stateful rules. The policies where you use your stateful rule group must have stateful rule options settings that are compatible with these settings.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-rulegroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    rule_group_property = networkfirewall.CfnRuleGroup.RuleGroupProperty(\n        rules_source=networkfirewall.CfnRuleGroup.RulesSourceProperty(\n            rules_source_list=networkfirewall.CfnRuleGroup.RulesSourceListProperty(\n                generated_rules_type="generatedRulesType",\n                targets=["targets"],\n                target_types=["targetTypes"]\n            ),\n            rules_string="rulesString",\n            stateful_rules=[networkfirewall.CfnRuleGroup.StatefulRuleProperty(\n                action="action",\n                header=networkfirewall.CfnRuleGroup.HeaderProperty(\n                    destination="destination",\n                    destination_port="destinationPort",\n                    direction="direction",\n                    protocol="protocol",\n                    source="source",\n                    source_port="sourcePort"\n                ),\n                rule_options=[networkfirewall.CfnRuleGroup.RuleOptionProperty(\n                    keyword="keyword",\n\n                    # the properties below are optional\n                    settings=["settings"]\n                )]\n            )],\n            stateless_rules_and_custom_actions=networkfirewall.CfnRuleGroup.StatelessRulesAndCustomActionsProperty(\n                stateless_rules=[networkfirewall.CfnRuleGroup.StatelessRuleProperty(\n                    priority=123,\n                    rule_definition=networkfirewall.CfnRuleGroup.RuleDefinitionProperty(\n                        actions=["actions"],\n                        match_attributes=networkfirewall.CfnRuleGroup.MatchAttributesProperty(\n                            destination_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                                from_port=123,\n                                to_port=123\n                            )],\n                            destinations=[networkfirewall.CfnRuleGroup.AddressProperty(\n                                address_definition="addressDefinition"\n                            )],\n                            protocols=[123],\n                            source_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                                from_port=123,\n                                to_port=123\n                            )],\n                            sources=[networkfirewall.CfnRuleGroup.AddressProperty(\n                                address_definition="addressDefinition"\n                            )],\n                            tcp_flags=[networkfirewall.CfnRuleGroup.TCPFlagFieldProperty(\n                                flags=["flags"],\n\n                                # the properties below are optional\n                                masks=["masks"]\n                            )]\n                        )\n                    )\n                )],\n\n                # the properties below are optional\n                custom_actions=[networkfirewall.CfnRuleGroup.CustomActionProperty(\n                    action_definition=networkfirewall.CfnRuleGroup.ActionDefinitionProperty(\n                        publish_metric_action=networkfirewall.CfnRuleGroup.PublishMetricActionProperty(\n                            dimensions=[networkfirewall.CfnRuleGroup.DimensionProperty(\n                                value="value"\n                            )]\n                        )\n                    ),\n                    action_name="actionName"\n                )]\n            )\n        ),\n\n        # the properties below are optional\n        reference_sets=networkfirewall.CfnRuleGroup.ReferenceSetsProperty(\n            ip_set_references={\n                "ip_set_references_key": {\n                    "reference_arn": "referenceArn"\n                }\n            }\n        ),\n        rule_variables=networkfirewall.CfnRuleGroup.RuleVariablesProperty(\n            ip_sets={\n                "ip_sets_key": {\n                    "definition": ["definition"]\n                }\n            },\n            port_sets={\n                "port_sets_key": networkfirewall.CfnRuleGroup.PortSetProperty(\n                    definition=["definition"]\n                )\n            }\n        ),\n        stateful_rule_options=networkfirewall.CfnRuleGroup.StatefulRuleOptionsProperty(\n            rule_order="ruleOrder"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rules_source', 'reference_sets', 'rule_variables', 'stateful_rule_options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.RuleGroupProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.RuleOptionProperty
class CfnRuleGroup_RuleOptionPropertyDef(BaseStruct):
    keyword: str = pydantic.Field(..., description='The Suricata rule option keywords. For Network Firewall , the keyword signature ID (sid) is required in the format ``sid: 112233`` . The sid must be unique within the rule group. For information about Suricata rule option keywords, see `Rule options <https://docs.aws.amazon.com/https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html#rule-options>`_ .\n')
    settings: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Suricata rule option settings. Settings have zero or more values, and the number of possible settings and required settings depends on the keyword. The format for Settings is ``number`` . For information about Suricata rule option settings, see `Rule options <https://docs.aws.amazon.com/https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html#rule-options>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-ruleoption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    rule_option_property = networkfirewall.CfnRuleGroup.RuleOptionProperty(\n        keyword="keyword",\n\n        # the properties below are optional\n        settings=["settings"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['keyword', 'settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.RuleOptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.RulesSourceListProperty
class CfnRuleGroup_RulesSourceListPropertyDef(BaseStruct):
    generated_rules_type: str = pydantic.Field(..., description='Whether you want to allow or deny access to the domains in your target list.\n')
    targets: typing.Sequence[str] = pydantic.Field(..., description="The domains that you want to inspect for in your traffic flows. Valid domain specifications are the following:. - Explicit names. For example, ``abc.example.com`` matches only the domain ``abc.example.com`` . - Names that use a domain wildcard, which you indicate with an initial ' ``.`` '. For example, ``.example.com`` matches ``example.com`` and matches all subdomains of ``example.com`` , such as ``abc.example.com`` and ``www.example.com`` .\n")
    target_types: typing.Sequence[str] = pydantic.Field(..., description='The types of targets to inspect for. Valid values are ``TLS_SNI`` and ``HTTP_HOST`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-rulessourcelist.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    rules_source_list_property = networkfirewall.CfnRuleGroup.RulesSourceListProperty(\n        generated_rules_type="generatedRulesType",\n        targets=["targets"],\n        target_types=["targetTypes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['generated_rules_type', 'targets', 'target_types']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.RulesSourceListProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.RulesSourceProperty
class CfnRuleGroup_RulesSourcePropertyDef(BaseStruct):
    rules_source_list: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RulesSourceListPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Stateful inspection criteria for a domain list rule group.\n')
    rules_string: typing.Optional[str] = pydantic.Field(None, description="Stateful inspection criteria, provided in Suricata compatible intrusion prevention system (IPS) rules. Suricata is an open-source network IPS that includes a standard rule-based language for network traffic inspection. These rules contain the inspection criteria and the action to take for traffic that matches the criteria, so this type of rule group doesn't have a separate action setting.\n")
    stateful_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_StatefulRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of individual stateful rules inspection criteria to be used together in a stateful rule group. Use this option to specify simple Suricata rules with protocol, source and destination, ports, direction, and rule options. For information about the Suricata ``Rules`` format, see `Rules Format <https://docs.aws.amazon.com/https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html>`_ .\n')
    stateless_rules_and_custom_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_StatelessRulesAndCustomActionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Stateless inspection criteria to be used in a stateless rule group.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-rulessource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    rules_source_property = networkfirewall.CfnRuleGroup.RulesSourceProperty(\n        rules_source_list=networkfirewall.CfnRuleGroup.RulesSourceListProperty(\n            generated_rules_type="generatedRulesType",\n            targets=["targets"],\n            target_types=["targetTypes"]\n        ),\n        rules_string="rulesString",\n        stateful_rules=[networkfirewall.CfnRuleGroup.StatefulRuleProperty(\n            action="action",\n            header=networkfirewall.CfnRuleGroup.HeaderProperty(\n                destination="destination",\n                destination_port="destinationPort",\n                direction="direction",\n                protocol="protocol",\n                source="source",\n                source_port="sourcePort"\n            ),\n            rule_options=[networkfirewall.CfnRuleGroup.RuleOptionProperty(\n                keyword="keyword",\n\n                # the properties below are optional\n                settings=["settings"]\n            )]\n        )],\n        stateless_rules_and_custom_actions=networkfirewall.CfnRuleGroup.StatelessRulesAndCustomActionsProperty(\n            stateless_rules=[networkfirewall.CfnRuleGroup.StatelessRuleProperty(\n                priority=123,\n                rule_definition=networkfirewall.CfnRuleGroup.RuleDefinitionProperty(\n                    actions=["actions"],\n                    match_attributes=networkfirewall.CfnRuleGroup.MatchAttributesProperty(\n                        destination_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                            from_port=123,\n                            to_port=123\n                        )],\n                        destinations=[networkfirewall.CfnRuleGroup.AddressProperty(\n                            address_definition="addressDefinition"\n                        )],\n                        protocols=[123],\n                        source_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                            from_port=123,\n                            to_port=123\n                        )],\n                        sources=[networkfirewall.CfnRuleGroup.AddressProperty(\n                            address_definition="addressDefinition"\n                        )],\n                        tcp_flags=[networkfirewall.CfnRuleGroup.TCPFlagFieldProperty(\n                            flags=["flags"],\n\n                            # the properties below are optional\n                            masks=["masks"]\n                        )]\n                    )\n                )\n            )],\n\n            # the properties below are optional\n            custom_actions=[networkfirewall.CfnRuleGroup.CustomActionProperty(\n                action_definition=networkfirewall.CfnRuleGroup.ActionDefinitionProperty(\n                    publish_metric_action=networkfirewall.CfnRuleGroup.PublishMetricActionProperty(\n                        dimensions=[networkfirewall.CfnRuleGroup.DimensionProperty(\n                            value="value"\n                        )]\n                    )\n                ),\n                action_name="actionName"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rules_source_list', 'rules_string', 'stateful_rules', 'stateless_rules_and_custom_actions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.RulesSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.RuleVariablesProperty
class CfnRuleGroup_RuleVariablesPropertyDef(BaseStruct):
    ip_sets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_IPSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of IP addresses and address ranges, in CIDR notation.\n')
    port_sets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_PortSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of port ranges.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-rulevariables.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    rule_variables_property = networkfirewall.CfnRuleGroup.RuleVariablesProperty(\n        ip_sets={\n            "ip_sets_key": {\n                "definition": ["definition"]\n            }\n        },\n        port_sets={\n            "port_sets_key": networkfirewall.CfnRuleGroup.PortSetProperty(\n                definition=["definition"]\n            )\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ip_sets', 'port_sets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.RuleVariablesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.StatefulRuleOptionsProperty
class CfnRuleGroup_StatefulRuleOptionsPropertyDef(BaseStruct):
    rule_order: typing.Optional[str] = pydantic.Field(None, description='Indicates how to manage the order of the rule evaluation for the rule group. ``DEFAULT_ACTION_ORDER`` is the default behavior. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them based on certain settings. For more information, see `Evaluation order for stateful rules <https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html>`_ in the *AWS Network Firewall Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-statefulruleoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    stateful_rule_options_property = networkfirewall.CfnRuleGroup.StatefulRuleOptionsProperty(\n        rule_order="ruleOrder"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rule_order']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.StatefulRuleOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.StatefulRuleProperty
class CfnRuleGroup_StatefulRulePropertyDef(BaseStruct):
    action: str = pydantic.Field(..., description="Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. The actions for a stateful rule are defined as follows: - *PASS* - Permits the packets to go to the intended destination. - *DROP* - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the ``Firewall`` ``LoggingConfiguration`` . - *REJECT* - Drops traffic that matches the conditions of the stateful rule and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a ``RST`` bit contained in the TCP header flags. ``REJECT`` is available only for TCP traffic. - *ALERT* - Permits the packets to go to the intended destination and sends an alert log message, if alert logging is configured in the ``Firewall`` ``LoggingConfiguration`` . You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with ``ALERT`` action, verify in the logs that the rule is filtering as you want, then change the action to ``DROP`` . - *REJECT* - Drops TCP traffic that matches the conditions of the stateful rule, and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a ``RST`` bit contained in the TCP header flags. Also sends an alert log mesage if alert logging is configured in the ``Firewall`` ``LoggingConfiguration`` . ``REJECT`` isn't currently available for use with IMAP and FTP protocols.\n")
    header: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_HeaderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The stateful inspection criteria for this rule, used to inspect traffic flows.\n')
    rule_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RuleOptionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Additional settings for a stateful rule, provided as keywords and settings.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-statefulrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    stateful_rule_property = networkfirewall.CfnRuleGroup.StatefulRuleProperty(\n        action="action",\n        header=networkfirewall.CfnRuleGroup.HeaderProperty(\n            destination="destination",\n            destination_port="destinationPort",\n            direction="direction",\n            protocol="protocol",\n            source="source",\n            source_port="sourcePort"\n        ),\n        rule_options=[networkfirewall.CfnRuleGroup.RuleOptionProperty(\n            keyword="keyword",\n\n            # the properties below are optional\n            settings=["settings"]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'header', 'rule_options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.StatefulRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.StatelessRuleProperty
class CfnRuleGroup_StatelessRulePropertyDef(BaseStruct):
    priority: typing.Union[int, float] = pydantic.Field(..., description="Indicates the order in which to run this rule relative to all of the rules that are defined for a stateless rule group. Network Firewall evaluates the rules in a rule group starting with the lowest priority setting. You must ensure that the priority settings are unique for the rule group. Each stateless rule group uses exactly one ``StatelessRulesAndCustomActions`` object, and each ``StatelessRulesAndCustomActions`` contains exactly one ``StatelessRules`` object. To ensure unique priority settings for your rule groups, set unique priorities for the stateless rules that you define inside any single ``StatelessRules`` object. You can change the priority settings of your rules at any time. To make it easier to insert rules later, number them so there's a wide range in between, for example use 100, 200, and so on.\n")
    rule_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RuleDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-statelessrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    stateless_rule_property = networkfirewall.CfnRuleGroup.StatelessRuleProperty(\n        priority=123,\n        rule_definition=networkfirewall.CfnRuleGroup.RuleDefinitionProperty(\n            actions=["actions"],\n            match_attributes=networkfirewall.CfnRuleGroup.MatchAttributesProperty(\n                destination_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                    from_port=123,\n                    to_port=123\n                )],\n                destinations=[networkfirewall.CfnRuleGroup.AddressProperty(\n                    address_definition="addressDefinition"\n                )],\n                protocols=[123],\n                source_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                    from_port=123,\n                    to_port=123\n                )],\n                sources=[networkfirewall.CfnRuleGroup.AddressProperty(\n                    address_definition="addressDefinition"\n                )],\n                tcp_flags=[networkfirewall.CfnRuleGroup.TCPFlagFieldProperty(\n                    flags=["flags"],\n\n                    # the properties below are optional\n                    masks=["masks"]\n                )]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['priority', 'rule_definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.StatelessRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.StatelessRulesAndCustomActionsProperty
class CfnRuleGroup_StatelessRulesAndCustomActionsPropertyDef(BaseStruct):
    stateless_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_StatelessRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Defines the set of stateless rules for use in a stateless rule group.\n')
    custom_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_CustomActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Defines an array of individual custom action definitions that are available for use by the stateless rules in this ``StatelessRulesAndCustomActions`` specification. You name each custom action that you define, and then you can use it by name in your stateless rule ``RuleGroup.RuleDefinition`` ``Actions`` specification.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-statelessrulesandcustomactions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    stateless_rules_and_custom_actions_property = networkfirewall.CfnRuleGroup.StatelessRulesAndCustomActionsProperty(\n        stateless_rules=[networkfirewall.CfnRuleGroup.StatelessRuleProperty(\n            priority=123,\n            rule_definition=networkfirewall.CfnRuleGroup.RuleDefinitionProperty(\n                actions=["actions"],\n                match_attributes=networkfirewall.CfnRuleGroup.MatchAttributesProperty(\n                    destination_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                        from_port=123,\n                        to_port=123\n                    )],\n                    destinations=[networkfirewall.CfnRuleGroup.AddressProperty(\n                        address_definition="addressDefinition"\n                    )],\n                    protocols=[123],\n                    source_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                        from_port=123,\n                        to_port=123\n                    )],\n                    sources=[networkfirewall.CfnRuleGroup.AddressProperty(\n                        address_definition="addressDefinition"\n                    )],\n                    tcp_flags=[networkfirewall.CfnRuleGroup.TCPFlagFieldProperty(\n                        flags=["flags"],\n\n                        # the properties below are optional\n                        masks=["masks"]\n                    )]\n                )\n            )\n        )],\n\n        # the properties below are optional\n        custom_actions=[networkfirewall.CfnRuleGroup.CustomActionProperty(\n            action_definition=networkfirewall.CfnRuleGroup.ActionDefinitionProperty(\n                publish_metric_action=networkfirewall.CfnRuleGroup.PublishMetricActionProperty(\n                    dimensions=[networkfirewall.CfnRuleGroup.DimensionProperty(\n                        value="value"\n                    )]\n                )\n            ),\n            action_name="actionName"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['stateless_rules', 'custom_actions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.StatelessRulesAndCustomActionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup.TCPFlagFieldProperty
class CfnRuleGroup_TCPFlagFieldPropertyDef(BaseStruct):
    flags: typing.Sequence[str] = pydantic.Field(..., description='Used in conjunction with the ``Masks`` setting to define the flags that must be set and flags that must not be set in order for the packet to match. This setting can only specify values that are also specified in the ``Masks`` setting. For the flags that are specified in the masks setting, the following must be true for the packet to match: - The ones that are set in this flags setting must be set in the packet. - The ones that are not set in this flags setting must also not be set in the packet.\n')
    masks: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The set of flags to consider in the inspection. To inspect all flags in the valid values list, leave this with no setting.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-networkfirewall-rulegroup-tcpflagfield.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    t_cPFlag_field_property = networkfirewall.CfnRuleGroup.TCPFlagFieldProperty(\n        flags=["flags"],\n\n        # the properties below are optional\n        masks=["masks"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['flags', 'masks']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup.TCPFlagFieldProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewall
class CfnFirewallDef(BaseCfnResource):
    firewall_name: str = pydantic.Field(..., description="The descriptive name of the firewall. You can't change the name of a firewall after you create it.\n")
    firewall_policy_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the firewall policy. The relationship of firewall to firewall policy is many to one. Each firewall requires one firewall policy association, and you can use the same firewall policy for multiple firewalls.\n')
    subnet_mappings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewall_SubnetMappingPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The public subnets that Network Firewall is using for the firewall. Each subnet must belong to a different Availability Zone.\n')
    vpc_id: str = pydantic.Field(..., description="The unique identifier of the VPC where the firewall is in use. You can't change the VPC of a firewall after you create the firewall.\n")
    delete_protection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A flag indicating whether it is possible to delete the firewall. A setting of ``TRUE`` indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to ``TRUE`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the firewall.\n')
    firewall_policy_change_protection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to ``TRUE`` .\n')
    subnet_change_protection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to ``TRUE`` .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['firewall_name', 'firewall_policy_arn', 'subnet_mappings', 'vpc_id', 'delete_protection', 'description', 'firewall_policy_change_protection', 'subnet_change_protection', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['SubnetMappingProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewall'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnFirewallDefConfig] = pydantic.Field(None)


class CfnFirewallDefConfig(pydantic.BaseModel):
    SubnetMappingProperty: typing.Optional[list[CfnFirewallDefSubnetmappingpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnFirewallDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnFirewallDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnFirewallDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnFirewallDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnFirewallDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnFirewallDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnFirewallDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnFirewallDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnFirewallDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnFirewallDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnFirewallDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnFirewallDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnFirewallDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFirewallDefSubnetmappingpropertyParams(pydantic.BaseModel):
    subnet_id: str = pydantic.Field(..., description='')
    ip_address_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFirewallDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFirewallDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFirewallDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFirewallDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFirewallDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFirewallDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFirewallDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFirewallDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFirewallDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFirewallDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFirewallDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnFirewallDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFirewallDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFirewallDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicy
class CfnFirewallPolicyDef(BaseCfnResource):
    firewall_policy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_FirewallPolicyPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The traffic filtering behavior of a firewall policy, defined in a collection of stateless and stateful rule groups and other settings.\n')
    firewall_policy_name: str = pydantic.Field(..., description="The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.\n")
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the firewall policy.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['firewall_policy', 'firewall_policy_name', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ActionDefinitionProperty', 'CustomActionProperty', 'DimensionProperty', 'FirewallPolicyProperty', 'IPSetProperty', 'PolicyVariablesProperty', 'PublishMetricActionProperty', 'StatefulEngineOptionsProperty', 'StatefulRuleGroupOverrideProperty', 'StatefulRuleGroupReferenceProperty', 'StatelessRuleGroupReferenceProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnFirewallPolicyDefConfig] = pydantic.Field(None)


class CfnFirewallPolicyDefConfig(pydantic.BaseModel):
    ActionDefinitionProperty: typing.Optional[list[CfnFirewallPolicyDefActiondefinitionpropertyParams]] = pydantic.Field(None, description='')
    CustomActionProperty: typing.Optional[list[CfnFirewallPolicyDefCustomactionpropertyParams]] = pydantic.Field(None, description='')
    DimensionProperty: typing.Optional[list[CfnFirewallPolicyDefDimensionpropertyParams]] = pydantic.Field(None, description='')
    FirewallPolicyProperty: typing.Optional[list[CfnFirewallPolicyDefFirewallpolicypropertyParams]] = pydantic.Field(None, description='')
    IPSetProperty: typing.Optional[list[CfnFirewallPolicyDefIpsetpropertyParams]] = pydantic.Field(None, description='')
    PolicyVariablesProperty: typing.Optional[list[CfnFirewallPolicyDefPolicyvariablespropertyParams]] = pydantic.Field(None, description='')
    PublishMetricActionProperty: typing.Optional[list[CfnFirewallPolicyDefPublishmetricactionpropertyParams]] = pydantic.Field(None, description='')
    StatefulEngineOptionsProperty: typing.Optional[list[CfnFirewallPolicyDefStatefulengineoptionspropertyParams]] = pydantic.Field(None, description='')
    StatefulRuleGroupOverrideProperty: typing.Optional[list[CfnFirewallPolicyDefStatefulrulegroupoverridepropertyParams]] = pydantic.Field(None, description='')
    StatefulRuleGroupReferenceProperty: typing.Optional[list[CfnFirewallPolicyDefStatefulrulegroupreferencepropertyParams]] = pydantic.Field(None, description='')
    StatelessRuleGroupReferenceProperty: typing.Optional[list[CfnFirewallPolicyDefStatelessrulegroupreferencepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnFirewallPolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnFirewallPolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnFirewallPolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnFirewallPolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnFirewallPolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnFirewallPolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnFirewallPolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnFirewallPolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnFirewallPolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnFirewallPolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnFirewallPolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnFirewallPolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnFirewallPolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFirewallPolicyDefActiondefinitionpropertyParams(pydantic.BaseModel):
    publish_metric_action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_PublishMetricActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFirewallPolicyDefCustomactionpropertyParams(pydantic.BaseModel):
    action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_ActionDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    action_name: str = pydantic.Field(..., description='')
    ...

class CfnFirewallPolicyDefDimensionpropertyParams(pydantic.BaseModel):
    value: str = pydantic.Field(..., description='')
    ...

class CfnFirewallPolicyDefFirewallpolicypropertyParams(pydantic.BaseModel):
    stateless_default_actions: typing.Sequence[str] = pydantic.Field(..., description='')
    stateless_fragment_default_actions: typing.Sequence[str] = pydantic.Field(..., description='')
    policy_variables: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_PolicyVariablesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    stateful_default_actions: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    stateful_engine_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_StatefulEngineOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    stateful_rule_group_references: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_StatefulRuleGroupReferencePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    stateless_custom_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_CustomActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    stateless_rule_group_references: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_StatelessRuleGroupReferencePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnFirewallPolicyDefIpsetpropertyParams(pydantic.BaseModel):
    definition: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnFirewallPolicyDefPolicyvariablespropertyParams(pydantic.BaseModel):
    rule_variables: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_IPSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnFirewallPolicyDefPublishmetricactionpropertyParams(pydantic.BaseModel):
    dimensions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_DimensionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnFirewallPolicyDefStatefulengineoptionspropertyParams(pydantic.BaseModel):
    rule_order: typing.Optional[str] = pydantic.Field(None, description='')
    stream_exception_policy: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFirewallPolicyDefStatefulrulegroupoverridepropertyParams(pydantic.BaseModel):
    action: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFirewallPolicyDefStatefulrulegroupreferencepropertyParams(pydantic.BaseModel):
    resource_arn: str = pydantic.Field(..., description='')
    override: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_StatefulRuleGroupOverridePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFirewallPolicyDefStatelessrulegroupreferencepropertyParams(pydantic.BaseModel):
    priority: typing.Union[int, float] = pydantic.Field(..., description='')
    resource_arn: str = pydantic.Field(..., description='')
    ...

class CfnFirewallPolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFirewallPolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFirewallPolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFirewallPolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFirewallPolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFirewallPolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFirewallPolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFirewallPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFirewallPolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFirewallPolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFirewallPolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnFirewallPolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFirewallPolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFirewallPolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_networkfirewall.CfnLoggingConfiguration
class CfnLoggingConfigurationDef(BaseCfnResource):
    firewall_arn: str = pydantic.Field(..., description="The Amazon Resource Name (ARN) of the ``Firewall`` that the logging configuration is associated with. You can't change the firewall specification after you create the logging configuration.\n")
    logging_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnLoggingConfiguration_LoggingConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines how AWS Network Firewall performs logging for a ``Firewall`` .\n')
    firewall_name: typing.Optional[str] = pydantic.Field(None, description="The name of the firewall that the logging configuration is associated with. You can't change the firewall specification after you create the logging configuration.")
    _init_params: typing.ClassVar[list[str]] = ['firewall_arn', 'logging_configuration', 'firewall_name']
    _method_names: typing.ClassVar[list[str]] = ['LogDestinationConfigProperty', 'LoggingConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnLoggingConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnLoggingConfigurationDefConfig] = pydantic.Field(None)


class CfnLoggingConfigurationDefConfig(pydantic.BaseModel):
    LogDestinationConfigProperty: typing.Optional[list[CfnLoggingConfigurationDefLogdestinationconfigpropertyParams]] = pydantic.Field(None, description='')
    LoggingConfigurationProperty: typing.Optional[list[CfnLoggingConfigurationDefLoggingconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnLoggingConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnLoggingConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnLoggingConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnLoggingConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnLoggingConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnLoggingConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnLoggingConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnLoggingConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnLoggingConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnLoggingConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnLoggingConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnLoggingConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnLoggingConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnLoggingConfigurationDefLogdestinationconfigpropertyParams(pydantic.BaseModel):
    log_destination: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str]] = pydantic.Field(..., description='')
    log_destination_type: str = pydantic.Field(..., description='')
    log_type: str = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefLoggingconfigurationpropertyParams(pydantic.BaseModel):
    log_destination_configs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnLoggingConfiguration_LogDestinationConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLoggingConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLoggingConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLoggingConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLoggingConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLoggingConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLoggingConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLoggingConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLoggingConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLoggingConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLoggingConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnLoggingConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLoggingConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLoggingConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroup
class CfnRuleGroupDef(BaseCfnResource):
    capacity: typing.Union[int, float] = pydantic.Field(..., description="The maximum operating resources that this rule group can use. You can't change a rule group's capacity setting after you create the rule group. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group.\n")
    rule_group_name: str = pydantic.Field(..., description="The descriptive name of the rule group. You can't change the name of a rule group after you create it.\n")
    type: str = pydantic.Field(..., description='Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the rule group.\n')
    rule_group: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RuleGroupPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that defines the rule group rules.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['capacity', 'rule_group_name', 'type', 'description', 'rule_group', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ActionDefinitionProperty', 'AddressProperty', 'CustomActionProperty', 'DimensionProperty', 'HeaderProperty', 'IPSetProperty', 'IPSetReferenceProperty', 'MatchAttributesProperty', 'PortRangeProperty', 'PortSetProperty', 'PublishMetricActionProperty', 'ReferenceSetsProperty', 'RuleDefinitionProperty', 'RuleGroupProperty', 'RuleOptionProperty', 'RuleVariablesProperty', 'RulesSourceListProperty', 'RulesSourceProperty', 'StatefulRuleOptionsProperty', 'StatefulRuleProperty', 'StatelessRuleProperty', 'StatelessRulesAndCustomActionsProperty', 'TCPFlagFieldProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnRuleGroupDefConfig] = pydantic.Field(None)


class CfnRuleGroupDefConfig(pydantic.BaseModel):
    ActionDefinitionProperty: typing.Optional[list[CfnRuleGroupDefActiondefinitionpropertyParams]] = pydantic.Field(None, description='')
    AddressProperty: typing.Optional[list[CfnRuleGroupDefAddresspropertyParams]] = pydantic.Field(None, description='')
    CustomActionProperty: typing.Optional[list[CfnRuleGroupDefCustomactionpropertyParams]] = pydantic.Field(None, description='')
    DimensionProperty: typing.Optional[list[CfnRuleGroupDefDimensionpropertyParams]] = pydantic.Field(None, description='')
    HeaderProperty: typing.Optional[list[CfnRuleGroupDefHeaderpropertyParams]] = pydantic.Field(None, description='')
    IPSetProperty: typing.Optional[list[CfnRuleGroupDefIpsetpropertyParams]] = pydantic.Field(None, description='')
    IPSetReferenceProperty: typing.Optional[list[CfnRuleGroupDefIpsetreferencepropertyParams]] = pydantic.Field(None, description='')
    MatchAttributesProperty: typing.Optional[list[CfnRuleGroupDefMatchattributespropertyParams]] = pydantic.Field(None, description='')
    PortRangeProperty: typing.Optional[list[CfnRuleGroupDefPortrangepropertyParams]] = pydantic.Field(None, description='')
    PortSetProperty: typing.Optional[list[CfnRuleGroupDefPortsetpropertyParams]] = pydantic.Field(None, description='')
    PublishMetricActionProperty: typing.Optional[list[CfnRuleGroupDefPublishmetricactionpropertyParams]] = pydantic.Field(None, description='')
    ReferenceSetsProperty: typing.Optional[list[CfnRuleGroupDefReferencesetspropertyParams]] = pydantic.Field(None, description='')
    RuleDefinitionProperty: typing.Optional[list[CfnRuleGroupDefRuledefinitionpropertyParams]] = pydantic.Field(None, description='')
    RuleGroupProperty: typing.Optional[list[CfnRuleGroupDefRulegrouppropertyParams]] = pydantic.Field(None, description='')
    RuleOptionProperty: typing.Optional[list[CfnRuleGroupDefRuleoptionpropertyParams]] = pydantic.Field(None, description='')
    RuleVariablesProperty: typing.Optional[list[CfnRuleGroupDefRulevariablespropertyParams]] = pydantic.Field(None, description='')
    RulesSourceListProperty: typing.Optional[list[CfnRuleGroupDefRulessourcelistpropertyParams]] = pydantic.Field(None, description='')
    RulesSourceProperty: typing.Optional[list[CfnRuleGroupDefRulessourcepropertyParams]] = pydantic.Field(None, description='')
    StatefulRuleOptionsProperty: typing.Optional[list[CfnRuleGroupDefStatefulruleoptionspropertyParams]] = pydantic.Field(None, description='')
    StatefulRuleProperty: typing.Optional[list[CfnRuleGroupDefStatefulrulepropertyParams]] = pydantic.Field(None, description='')
    StatelessRuleProperty: typing.Optional[list[CfnRuleGroupDefStatelessrulepropertyParams]] = pydantic.Field(None, description='')
    StatelessRulesAndCustomActionsProperty: typing.Optional[list[CfnRuleGroupDefStatelessrulesandcustomactionspropertyParams]] = pydantic.Field(None, description='')
    TCPFlagFieldProperty: typing.Optional[list[CfnRuleGroupDefTcpflagfieldpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnRuleGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnRuleGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnRuleGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnRuleGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnRuleGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnRuleGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnRuleGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnRuleGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnRuleGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnRuleGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnRuleGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnRuleGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnRuleGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnRuleGroupDefActiondefinitionpropertyParams(pydantic.BaseModel):
    publish_metric_action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_PublishMetricActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefAddresspropertyParams(pydantic.BaseModel):
    address_definition: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefCustomactionpropertyParams(pydantic.BaseModel):
    action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_ActionDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    action_name: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefDimensionpropertyParams(pydantic.BaseModel):
    value: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefHeaderpropertyParams(pydantic.BaseModel):
    destination: str = pydantic.Field(..., description='')
    destination_port: str = pydantic.Field(..., description='')
    direction: str = pydantic.Field(..., description='')
    protocol: str = pydantic.Field(..., description='')
    source: str = pydantic.Field(..., description='')
    source_port: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefIpsetpropertyParams(pydantic.BaseModel):
    definition: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefIpsetreferencepropertyParams(pydantic.BaseModel):
    reference_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefMatchattributespropertyParams(pydantic.BaseModel):
    destination_ports: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_PortRangePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    destinations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_AddressPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    protocols: typing.Union[typing.Sequence[typing.Union[int, float]], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    source_ports: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_PortRangePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    sources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_AddressPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    tcp_flags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_TCPFlagFieldPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefPortrangepropertyParams(pydantic.BaseModel):
    from_port: typing.Union[int, float] = pydantic.Field(..., description='')
    to_port: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefPortsetpropertyParams(pydantic.BaseModel):
    definition: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefPublishmetricactionpropertyParams(pydantic.BaseModel):
    dimensions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_DimensionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefReferencesetspropertyParams(pydantic.BaseModel):
    ip_set_references: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_IPSetReferencePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefRuledefinitionpropertyParams(pydantic.BaseModel):
    actions: typing.Sequence[str] = pydantic.Field(..., description='')
    match_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_MatchAttributesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefRulegrouppropertyParams(pydantic.BaseModel):
    rules_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RulesSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    reference_sets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_ReferenceSetsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rule_variables: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RuleVariablesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    stateful_rule_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_StatefulRuleOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefRuleoptionpropertyParams(pydantic.BaseModel):
    keyword: str = pydantic.Field(..., description='')
    settings: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefRulevariablespropertyParams(pydantic.BaseModel):
    ip_sets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_IPSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    port_sets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_PortSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefRulessourcelistpropertyParams(pydantic.BaseModel):
    generated_rules_type: str = pydantic.Field(..., description='')
    targets: typing.Sequence[str] = pydantic.Field(..., description='')
    target_types: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefRulessourcepropertyParams(pydantic.BaseModel):
    rules_source_list: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RulesSourceListPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rules_string: typing.Optional[str] = pydantic.Field(None, description='')
    stateful_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_StatefulRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    stateless_rules_and_custom_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_StatelessRulesAndCustomActionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefStatefulruleoptionspropertyParams(pydantic.BaseModel):
    rule_order: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefStatefulrulepropertyParams(pydantic.BaseModel):
    action: str = pydantic.Field(..., description='')
    header: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_HeaderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    rule_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RuleOptionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefStatelessrulepropertyParams(pydantic.BaseModel):
    priority: typing.Union[int, float] = pydantic.Field(..., description='')
    rule_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RuleDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefStatelessrulesandcustomactionspropertyParams(pydantic.BaseModel):
    stateless_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_StatelessRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    custom_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_CustomActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefTcpflagfieldpropertyParams(pydantic.BaseModel):
    flags: typing.Sequence[str] = pydantic.Field(..., description='')
    masks: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRuleGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRuleGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRuleGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRuleGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRuleGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRuleGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRuleGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRuleGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRuleGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRuleGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnRuleGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRuleGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRuleGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallPolicyProps
class CfnFirewallPolicyPropsDef(BaseCfnProperty):
    firewall_policy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewallPolicy_FirewallPolicyPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The traffic filtering behavior of a firewall policy, defined in a collection of stateless and stateful rule groups and other settings.\n')
    firewall_policy_name: str = pydantic.Field(..., description="The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.\n")
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the firewall policy.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-firewallpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    cfn_firewall_policy_props = networkfirewall.CfnFirewallPolicyProps(\n        firewall_policy=networkfirewall.CfnFirewallPolicy.FirewallPolicyProperty(\n            stateless_default_actions=["statelessDefaultActions"],\n            stateless_fragment_default_actions=["statelessFragmentDefaultActions"],\n\n            # the properties below are optional\n            policy_variables=networkfirewall.CfnFirewallPolicy.PolicyVariablesProperty(\n                rule_variables={\n                    "rule_variables_key": {\n                        "definition": ["definition"]\n                    }\n                }\n            ),\n            stateful_default_actions=["statefulDefaultActions"],\n            stateful_engine_options=networkfirewall.CfnFirewallPolicy.StatefulEngineOptionsProperty(\n                rule_order="ruleOrder",\n                stream_exception_policy="streamExceptionPolicy"\n            ),\n            stateful_rule_group_references=[networkfirewall.CfnFirewallPolicy.StatefulRuleGroupReferenceProperty(\n                resource_arn="resourceArn",\n\n                # the properties below are optional\n                override=networkfirewall.CfnFirewallPolicy.StatefulRuleGroupOverrideProperty(\n                    action="action"\n                ),\n                priority=123\n            )],\n            stateless_custom_actions=[networkfirewall.CfnFirewallPolicy.CustomActionProperty(\n                action_definition=networkfirewall.CfnFirewallPolicy.ActionDefinitionProperty(\n                    publish_metric_action=networkfirewall.CfnFirewallPolicy.PublishMetricActionProperty(\n                        dimensions=[networkfirewall.CfnFirewallPolicy.DimensionProperty(\n                            value="value"\n                        )]\n                    )\n                ),\n                action_name="actionName"\n            )],\n            stateless_rule_group_references=[networkfirewall.CfnFirewallPolicy.StatelessRuleGroupReferenceProperty(\n                priority=123,\n                resource_arn="resourceArn"\n            )]\n        ),\n        firewall_policy_name="firewallPolicyName",\n\n        # the properties below are optional\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['firewall_policy', 'firewall_policy_name', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnFirewallProps
class CfnFirewallPropsDef(BaseCfnProperty):
    firewall_name: str = pydantic.Field(..., description="The descriptive name of the firewall. You can't change the name of a firewall after you create it.\n")
    firewall_policy_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the firewall policy. The relationship of firewall to firewall policy is many to one. Each firewall requires one firewall policy association, and you can use the same firewall policy for multiple firewalls.\n')
    subnet_mappings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnFirewall_SubnetMappingPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The public subnets that Network Firewall is using for the firewall. Each subnet must belong to a different Availability Zone.\n')
    vpc_id: str = pydantic.Field(..., description="The unique identifier of the VPC where the firewall is in use. You can't change the VPC of a firewall after you create the firewall.\n")
    delete_protection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A flag indicating whether it is possible to delete the firewall. A setting of ``TRUE`` indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to ``TRUE`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the firewall.\n')
    firewall_policy_change_protection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A setting indicating whether the firewall is protected against a change to the firewall policy association. Use this setting to protect against accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to ``TRUE`` .\n')
    subnet_change_protection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A setting indicating whether the firewall is protected against changes to the subnet associations. Use this setting to protect against accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to ``TRUE`` .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-firewall.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    cfn_firewall_props = networkfirewall.CfnFirewallProps(\n        firewall_name="firewallName",\n        firewall_policy_arn="firewallPolicyArn",\n        subnet_mappings=[networkfirewall.CfnFirewall.SubnetMappingProperty(\n            subnet_id="subnetId",\n\n            # the properties below are optional\n            ip_address_type="ipAddressType"\n        )],\n        vpc_id="vpcId",\n\n        # the properties below are optional\n        delete_protection=False,\n        description="description",\n        firewall_policy_change_protection=False,\n        subnet_change_protection=False,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['firewall_name', 'firewall_policy_arn', 'subnet_mappings', 'vpc_id', 'delete_protection', 'description', 'firewall_policy_change_protection', 'subnet_change_protection', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnFirewallProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnLoggingConfigurationProps
class CfnLoggingConfigurationPropsDef(BaseCfnProperty):
    firewall_arn: str = pydantic.Field(..., description="The Amazon Resource Name (ARN) of the ``Firewall`` that the logging configuration is associated with. You can't change the firewall specification after you create the logging configuration.\n")
    logging_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnLoggingConfiguration_LoggingConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines how AWS Network Firewall performs logging for a ``Firewall`` .\n')
    firewall_name: typing.Optional[str] = pydantic.Field(None, description='The name of the firewall that the logging configuration is associated with. You can\'t change the firewall specification after you create the logging configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-loggingconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    cfn_logging_configuration_props = networkfirewall.CfnLoggingConfigurationProps(\n        firewall_arn="firewallArn",\n        logging_configuration=networkfirewall.CfnLoggingConfiguration.LoggingConfigurationProperty(\n            log_destination_configs=[networkfirewall.CfnLoggingConfiguration.LogDestinationConfigProperty(\n                log_destination={\n                    "log_destination_key": "logDestination"\n                },\n                log_destination_type="logDestinationType",\n                log_type="logType"\n            )]\n        ),\n\n        # the properties below are optional\n        firewall_name="firewallName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['firewall_arn', 'logging_configuration', 'firewall_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnLoggingConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_networkfirewall.CfnRuleGroupProps
class CfnRuleGroupPropsDef(BaseCfnProperty):
    capacity: typing.Union[int, float] = pydantic.Field(..., description="The maximum operating resources that this rule group can use. You can't change a rule group's capacity setting after you create the rule group. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group.\n")
    rule_group_name: str = pydantic.Field(..., description="The descriptive name of the rule group. You can't change the name of a rule group after you create it.\n")
    type: str = pydantic.Field(..., description='Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the rule group.\n')
    rule_group: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_networkfirewall.CfnRuleGroup_RuleGroupPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that defines the rule group rules.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-rulegroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_networkfirewall as networkfirewall\n\n    cfn_rule_group_props = networkfirewall.CfnRuleGroupProps(\n        capacity=123,\n        rule_group_name="ruleGroupName",\n        type="type",\n\n        # the properties below are optional\n        description="description",\n        rule_group=networkfirewall.CfnRuleGroup.RuleGroupProperty(\n            rules_source=networkfirewall.CfnRuleGroup.RulesSourceProperty(\n                rules_source_list=networkfirewall.CfnRuleGroup.RulesSourceListProperty(\n                    generated_rules_type="generatedRulesType",\n                    targets=["targets"],\n                    target_types=["targetTypes"]\n                ),\n                rules_string="rulesString",\n                stateful_rules=[networkfirewall.CfnRuleGroup.StatefulRuleProperty(\n                    action="action",\n                    header=networkfirewall.CfnRuleGroup.HeaderProperty(\n                        destination="destination",\n                        destination_port="destinationPort",\n                        direction="direction",\n                        protocol="protocol",\n                        source="source",\n                        source_port="sourcePort"\n                    ),\n                    rule_options=[networkfirewall.CfnRuleGroup.RuleOptionProperty(\n                        keyword="keyword",\n\n                        # the properties below are optional\n                        settings=["settings"]\n                    )]\n                )],\n                stateless_rules_and_custom_actions=networkfirewall.CfnRuleGroup.StatelessRulesAndCustomActionsProperty(\n                    stateless_rules=[networkfirewall.CfnRuleGroup.StatelessRuleProperty(\n                        priority=123,\n                        rule_definition=networkfirewall.CfnRuleGroup.RuleDefinitionProperty(\n                            actions=["actions"],\n                            match_attributes=networkfirewall.CfnRuleGroup.MatchAttributesProperty(\n                                destination_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                                    from_port=123,\n                                    to_port=123\n                                )],\n                                destinations=[networkfirewall.CfnRuleGroup.AddressProperty(\n                                    address_definition="addressDefinition"\n                                )],\n                                protocols=[123],\n                                source_ports=[networkfirewall.CfnRuleGroup.PortRangeProperty(\n                                    from_port=123,\n                                    to_port=123\n                                )],\n                                sources=[networkfirewall.CfnRuleGroup.AddressProperty(\n                                    address_definition="addressDefinition"\n                                )],\n                                tcp_flags=[networkfirewall.CfnRuleGroup.TCPFlagFieldProperty(\n                                    flags=["flags"],\n\n                                    # the properties below are optional\n                                    masks=["masks"]\n                                )]\n                            )\n                        )\n                    )],\n\n                    # the properties below are optional\n                    custom_actions=[networkfirewall.CfnRuleGroup.CustomActionProperty(\n                        action_definition=networkfirewall.CfnRuleGroup.ActionDefinitionProperty(\n                            publish_metric_action=networkfirewall.CfnRuleGroup.PublishMetricActionProperty(\n                                dimensions=[networkfirewall.CfnRuleGroup.DimensionProperty(\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        action_name="actionName"\n                    )]\n                )\n            ),\n\n            # the properties below are optional\n            reference_sets=networkfirewall.CfnRuleGroup.ReferenceSetsProperty(\n                ip_set_references={\n                    "ip_set_references_key": {\n                        "reference_arn": "referenceArn"\n                    }\n                }\n            ),\n            rule_variables=networkfirewall.CfnRuleGroup.RuleVariablesProperty(\n                ip_sets={\n                    "ip_sets_key": {\n                        "definition": ["definition"]\n                    }\n                },\n                port_sets={\n                    "port_sets_key": networkfirewall.CfnRuleGroup.PortSetProperty(\n                        definition=["definition"]\n                    )\n                }\n            ),\n            stateful_rule_options=networkfirewall.CfnRuleGroup.StatefulRuleOptionsProperty(\n                rule_order="ruleOrder"\n            )\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['capacity', 'rule_group_name', 'type', 'description', 'rule_group', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_networkfirewall.CfnRuleGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnFirewall_SubnetMappingProperty: typing.Optional[dict[str, CfnFirewall_SubnetMappingPropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_ActionDefinitionProperty: typing.Optional[dict[str, CfnFirewallPolicy_ActionDefinitionPropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_CustomActionProperty: typing.Optional[dict[str, CfnFirewallPolicy_CustomActionPropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_DimensionProperty: typing.Optional[dict[str, CfnFirewallPolicy_DimensionPropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_FirewallPolicyProperty: typing.Optional[dict[str, CfnFirewallPolicy_FirewallPolicyPropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_IPSetProperty: typing.Optional[dict[str, CfnFirewallPolicy_IPSetPropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_PolicyVariablesProperty: typing.Optional[dict[str, CfnFirewallPolicy_PolicyVariablesPropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_PublishMetricActionProperty: typing.Optional[dict[str, CfnFirewallPolicy_PublishMetricActionPropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_StatefulEngineOptionsProperty: typing.Optional[dict[str, CfnFirewallPolicy_StatefulEngineOptionsPropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_StatefulRuleGroupOverrideProperty: typing.Optional[dict[str, CfnFirewallPolicy_StatefulRuleGroupOverridePropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_StatefulRuleGroupReferenceProperty: typing.Optional[dict[str, CfnFirewallPolicy_StatefulRuleGroupReferencePropertyDef]] = pydantic.Field(None)
    CfnFirewallPolicy_StatelessRuleGroupReferenceProperty: typing.Optional[dict[str, CfnFirewallPolicy_StatelessRuleGroupReferencePropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_LogDestinationConfigProperty: typing.Optional[dict[str, CfnLoggingConfiguration_LogDestinationConfigPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_LoggingConfigurationProperty: typing.Optional[dict[str, CfnLoggingConfiguration_LoggingConfigurationPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_ActionDefinitionProperty: typing.Optional[dict[str, CfnRuleGroup_ActionDefinitionPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_AddressProperty: typing.Optional[dict[str, CfnRuleGroup_AddressPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CustomActionProperty: typing.Optional[dict[str, CfnRuleGroup_CustomActionPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_DimensionProperty: typing.Optional[dict[str, CfnRuleGroup_DimensionPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_HeaderProperty: typing.Optional[dict[str, CfnRuleGroup_HeaderPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_IPSetProperty: typing.Optional[dict[str, CfnRuleGroup_IPSetPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_IPSetReferenceProperty: typing.Optional[dict[str, CfnRuleGroup_IPSetReferencePropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_MatchAttributesProperty: typing.Optional[dict[str, CfnRuleGroup_MatchAttributesPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_PortRangeProperty: typing.Optional[dict[str, CfnRuleGroup_PortRangePropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_PortSetProperty: typing.Optional[dict[str, CfnRuleGroup_PortSetPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_PublishMetricActionProperty: typing.Optional[dict[str, CfnRuleGroup_PublishMetricActionPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_ReferenceSetsProperty: typing.Optional[dict[str, CfnRuleGroup_ReferenceSetsPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RuleDefinitionProperty: typing.Optional[dict[str, CfnRuleGroup_RuleDefinitionPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RuleGroupProperty: typing.Optional[dict[str, CfnRuleGroup_RuleGroupPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RuleOptionProperty: typing.Optional[dict[str, CfnRuleGroup_RuleOptionPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RulesSourceListProperty: typing.Optional[dict[str, CfnRuleGroup_RulesSourceListPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RulesSourceProperty: typing.Optional[dict[str, CfnRuleGroup_RulesSourcePropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RuleVariablesProperty: typing.Optional[dict[str, CfnRuleGroup_RuleVariablesPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_StatefulRuleOptionsProperty: typing.Optional[dict[str, CfnRuleGroup_StatefulRuleOptionsPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_StatefulRuleProperty: typing.Optional[dict[str, CfnRuleGroup_StatefulRulePropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_StatelessRuleProperty: typing.Optional[dict[str, CfnRuleGroup_StatelessRulePropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_StatelessRulesAndCustomActionsProperty: typing.Optional[dict[str, CfnRuleGroup_StatelessRulesAndCustomActionsPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_TCPFlagFieldProperty: typing.Optional[dict[str, CfnRuleGroup_TCPFlagFieldPropertyDef]] = pydantic.Field(None)
    CfnFirewall: typing.Optional[dict[str, CfnFirewallDef]] = pydantic.Field(None)
    CfnFirewallPolicy: typing.Optional[dict[str, CfnFirewallPolicyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration: typing.Optional[dict[str, CfnLoggingConfigurationDef]] = pydantic.Field(None)
    CfnRuleGroup: typing.Optional[dict[str, CfnRuleGroupDef]] = pydantic.Field(None)
    CfnFirewallPolicyProps: typing.Optional[dict[str, CfnFirewallPolicyPropsDef]] = pydantic.Field(None)
    CfnFirewallProps: typing.Optional[dict[str, CfnFirewallPropsDef]] = pydantic.Field(None)
    CfnLoggingConfigurationProps: typing.Optional[dict[str, CfnLoggingConfigurationPropsDef]] = pydantic.Field(None)
    CfnRuleGroupProps: typing.Optional[dict[str, CfnRuleGroupPropsDef]] = pydantic.Field(None)
    ...
