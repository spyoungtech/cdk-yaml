from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_ssmcontacts.CfnContact.ChannelTargetInfoProperty
class CfnContact_ChannelTargetInfoPropertyDef(BaseStruct):
    channel_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the contact channel.\n')
    retry_interval_in_minutes: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The number of minutes to wait before retrying to send engagement if the engagement initially failed.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-contact-channeltargetinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    channel_target_info_property = ssmcontacts.CfnContact.ChannelTargetInfoProperty(\n        channel_id="channelId",\n        retry_interval_in_minutes=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_id', 'retry_interval_in_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnContact.ChannelTargetInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnContact.ContactTargetInfoProperty
class CfnContact_ContactTargetInfoPropertyDef(BaseStruct):
    contact_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the contact.\n')
    is_essential: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='A Boolean value determining if the contact\'s acknowledgement stops the progress of stages in the plan.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-contact-contacttargetinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    contact_target_info_property = ssmcontacts.CfnContact.ContactTargetInfoProperty(\n        contact_id="contactId",\n        is_essential=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['contact_id', 'is_essential']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnContact.ContactTargetInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnContact.StageProperty
class CfnContact_StagePropertyDef(BaseStruct):
    duration_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='The time to wait until beginning the next stage. The duration can only be set to 0 if a target is specified.\n')
    rotation_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Names (ARNs) of the on-call rotations associated with the plan.\n')
    targets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnContact_TargetsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The contacts or contact methods that the escalation plan or engagement plan is engaging.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-contact-stage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    stage_property = ssmcontacts.CfnContact.StageProperty(\n        duration_in_minutes=123,\n        rotation_ids=["rotationIds"],\n        targets=[ssmcontacts.CfnContact.TargetsProperty(\n            channel_target_info=ssmcontacts.CfnContact.ChannelTargetInfoProperty(\n                channel_id="channelId",\n                retry_interval_in_minutes=123\n            ),\n            contact_target_info=ssmcontacts.CfnContact.ContactTargetInfoProperty(\n                contact_id="contactId",\n                is_essential=False\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['duration_in_minutes', 'rotation_ids', 'targets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnContact.StageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnContact.TargetsProperty
class CfnContact_TargetsPropertyDef(BaseStruct):
    channel_target_info: typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnContact_ChannelTargetInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the contact channel that Incident Manager engages.\n')
    contact_target_info: typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnContact_ContactTargetInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The contact that Incident Manager is engaging during an incident.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-contact-targets.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    targets_property = ssmcontacts.CfnContact.TargetsProperty(\n        channel_target_info=ssmcontacts.CfnContact.ChannelTargetInfoProperty(\n            channel_id="channelId",\n            retry_interval_in_minutes=123\n        ),\n        contact_target_info=ssmcontacts.CfnContact.ContactTargetInfoProperty(\n            contact_id="contactId",\n            is_essential=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_target_info', 'contact_target_info']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnContact.TargetsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnPlan.ChannelTargetInfoProperty
class CfnPlan_ChannelTargetInfoPropertyDef(BaseStruct):
    channel_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the contact channel.\n')
    retry_interval_in_minutes: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The number of minutes to wait before retrying to send engagement if the engagement initially failed.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-plan-channeltargetinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    channel_target_info_property = ssmcontacts.CfnPlan.ChannelTargetInfoProperty(\n        channel_id="channelId",\n        retry_interval_in_minutes=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_id', 'retry_interval_in_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnPlan.ChannelTargetInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnPlan.ContactTargetInfoProperty
class CfnPlan_ContactTargetInfoPropertyDef(BaseStruct):
    contact_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the contact.\n')
    is_essential: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='A Boolean value determining if the contact\'s acknowledgement stops the progress of stages in the plan.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-plan-contacttargetinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    contact_target_info_property = ssmcontacts.CfnPlan.ContactTargetInfoProperty(\n        contact_id="contactId",\n        is_essential=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['contact_id', 'is_essential']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnPlan.ContactTargetInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnPlan.StageProperty
class CfnPlan_StagePropertyDef(BaseStruct):
    duration_in_minutes: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The time to wait until beginning the next stage. The duration can only be set to 0 if a target is specified.\n')
    targets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnPlan_TargetsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The contacts or contact methods that the escalation plan or engagement plan is engaging.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-plan-stage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    stage_property = ssmcontacts.CfnPlan.StageProperty(\n        duration_in_minutes=123,\n\n        # the properties below are optional\n        targets=[ssmcontacts.CfnPlan.TargetsProperty(\n            channel_target_info=ssmcontacts.CfnPlan.ChannelTargetInfoProperty(\n                channel_id="channelId",\n                retry_interval_in_minutes=123\n            ),\n            contact_target_info=ssmcontacts.CfnPlan.ContactTargetInfoProperty(\n                contact_id="contactId",\n                is_essential=False\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['duration_in_minutes', 'targets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnPlan.StageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnPlan.TargetsProperty
class CfnPlan_TargetsPropertyDef(BaseStruct):
    channel_target_info: typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnPlan_ChannelTargetInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the contact channel that Incident Manager engages.\n')
    contact_target_info: typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnPlan_ContactTargetInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the contact that Incident Manager engages.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-plan-targets.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    targets_property = ssmcontacts.CfnPlan.TargetsProperty(\n        channel_target_info=ssmcontacts.CfnPlan.ChannelTargetInfoProperty(\n            channel_id="channelId",\n            retry_interval_in_minutes=123\n        ),\n        contact_target_info=ssmcontacts.CfnPlan.ContactTargetInfoProperty(\n            contact_id="contactId",\n            is_essential=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_target_info', 'contact_target_info']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnPlan.TargetsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnRotation.CoverageTimeProperty
class CfnRotation_CoverageTimePropertyDef(BaseStruct):
    end_time: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about when an on-call rotation shift ends.\n')
    start_time: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about when an on-call rotation shift begins.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-rotation-coveragetime.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    coverage_time_property = ssmcontacts.CfnRotation.CoverageTimeProperty(\n        end_time="endTime",\n        start_time="startTime"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end_time', 'start_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnRotation.CoverageTimeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnRotation.MonthlySettingProperty
class CfnRotation_MonthlySettingPropertyDef(BaseStruct):
    day_of_month: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The day of the month when monthly recurring on-call rotations begin.\n')
    hand_off_time: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The time of day when a monthly recurring on-call shift rotation begins.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-rotation-monthlysetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    monthly_setting_property = ssmcontacts.CfnRotation.MonthlySettingProperty(\n        day_of_month=123,\n        hand_off_time="handOffTime"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['day_of_month', 'hand_off_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnRotation.MonthlySettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnRotation.RecurrenceSettingsProperty
class CfnRotation_RecurrenceSettingsPropertyDef(BaseStruct):
    number_of_on_calls: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The number of contacts, or shift team members designated to be on call concurrently during a shift. For example, in an on-call schedule that contains ten contacts, a value of ``2`` designates that two of them are on call at any given time.\n')
    recurrence_multiplier: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The number of days, weeks, or months a single rotation lasts.\n')
    daily_settings: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Information about on-call rotations that recur daily.\n')
    monthly_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_MonthlySettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about on-call rotations that recur monthly.\n')
    shift_coverages: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_ShiftCoveragePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about the days of the week included in on-call rotation coverage.\n')
    weekly_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_WeeklySettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about on-call rotations that recur weekly.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-rotation-recurrencesettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    recurrence_settings_property = ssmcontacts.CfnRotation.RecurrenceSettingsProperty(\n        number_of_on_calls=123,\n        recurrence_multiplier=123,\n\n        # the properties below are optional\n        daily_settings=["dailySettings"],\n        monthly_settings=[ssmcontacts.CfnRotation.MonthlySettingProperty(\n            day_of_month=123,\n            hand_off_time="handOffTime"\n        )],\n        shift_coverages=[ssmcontacts.CfnRotation.ShiftCoverageProperty(\n            coverage_times=[ssmcontacts.CfnRotation.CoverageTimeProperty(\n                end_time="endTime",\n                start_time="startTime"\n            )],\n            day_of_week="dayOfWeek"\n        )],\n        weekly_settings=[ssmcontacts.CfnRotation.WeeklySettingProperty(\n            day_of_week="dayOfWeek",\n            hand_off_time="handOffTime"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['number_of_on_calls', 'recurrence_multiplier', 'daily_settings', 'monthly_settings', 'shift_coverages', 'weekly_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnRotation.RecurrenceSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnRotation.ShiftCoverageProperty
class CfnRotation_ShiftCoveragePropertyDef(BaseStruct):
    coverage_times: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_CoverageTimePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The start and end times of the shift.\n')
    day_of_week: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of days on which the schedule is active.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-rotation-shiftcoverage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    shift_coverage_property = ssmcontacts.CfnRotation.ShiftCoverageProperty(\n        coverage_times=[ssmcontacts.CfnRotation.CoverageTimeProperty(\n            end_time="endTime",\n            start_time="startTime"\n        )],\n        day_of_week="dayOfWeek"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['coverage_times', 'day_of_week']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnRotation.ShiftCoverageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnRotation.WeeklySettingProperty
class CfnRotation_WeeklySettingPropertyDef(BaseStruct):
    day_of_week: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The day of the week when weekly recurring on-call shift rotations begins.\n')
    hand_off_time: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The time of day when a weekly recurring on-call shift rotation begins.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmcontacts-rotation-weeklysetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    weekly_setting_property = ssmcontacts.CfnRotation.WeeklySettingProperty(\n        day_of_week="dayOfWeek",\n        hand_off_time="handOffTime"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['day_of_week', 'hand_off_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnRotation.WeeklySettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnContact
class CfnContactDef(BaseCfnResource):
    alias: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique and identifiable alias of the contact or escalation plan.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The full name of the contact or escalation plan.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of contact. - ``PERSONAL`` : A single, individual contact. - ``ESCALATION`` : An escalation plan. - ``ONCALL_SCHEDULE`` : An on-call schedule.\n')
    plan: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnContact_StagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts.')
    _init_params: typing.ClassVar[list[str]] = ['alias', 'display_name', 'type', 'plan']
    _method_names: typing.ClassVar[list[str]] = ['ChannelTargetInfoProperty', 'ContactTargetInfoProperty', 'StageProperty', 'TargetsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnContact'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ssmcontacts.CfnContactDefConfig] = pydantic.Field(None)


class CfnContactDefConfig(pydantic.BaseModel):
    ChannelTargetInfoProperty: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefChanneltargetinfopropertyParams]] = pydantic.Field(None, description='')
    ContactTargetInfoProperty: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefContacttargetinfopropertyParams]] = pydantic.Field(None, description='')
    StageProperty: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefStagepropertyParams]] = pydantic.Field(None, description='')
    TargetsProperty: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefTargetspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnContactDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnContactDefChanneltargetinfopropertyParams(pydantic.BaseModel):
    channel_id: str = pydantic.Field(..., description='')
    retry_interval_in_minutes: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnContactDefContacttargetinfopropertyParams(pydantic.BaseModel):
    contact_id: str = pydantic.Field(..., description='')
    is_essential: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnContactDefStagepropertyParams(pydantic.BaseModel):
    duration_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    rotation_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    targets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnContact_TargetsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnContactDefTargetspropertyParams(pydantic.BaseModel):
    channel_target_info: typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnContact_ChannelTargetInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    contact_target_info: typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnContact_ContactTargetInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnContactDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnContactDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnContactDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnContactDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnContactDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnContactDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnContactDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnContactDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnContactDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnContactDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ssmcontacts.CfnContactChannel
class CfnContactChannelDef(BaseCfnResource):
    channel_address: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The details that Incident Manager uses when trying to engage the contact channel.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the contact channel.\n')
    channel_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the contact channel. Incident Manager supports three contact methods:. - SMS - VOICE - EMAIL\n')
    contact_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the contact you are adding the contact channel to.\n')
    defer_activation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="If you want to activate the channel at a later time, you can choose to defer activation. Incident Manager can't engage your contact channel until it has been activated.")
    _init_params: typing.ClassVar[list[str]] = ['channel_address', 'channel_name', 'channel_type', 'contact_id', 'defer_activation']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnContactChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ssmcontacts.CfnContactChannelDefConfig] = pydantic.Field(None)


class CfnContactChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnContactChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnContactChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnContactChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnContactChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnContactChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnContactChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnContactChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnContactChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnContactChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnContactChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnContactChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ssmcontacts.CfnPlan
class CfnPlanDef(BaseCfnResource):
    contact_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the contact.\n')
    rotation_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Names (ARNs) of the on-call rotations associated with the plan.\n')
    stages: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnPlan_StagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of stages that the escalation plan or engagement plan uses to engage contacts and contact methods.')
    _init_params: typing.ClassVar[list[str]] = ['contact_id', 'rotation_ids', 'stages']
    _method_names: typing.ClassVar[list[str]] = ['ChannelTargetInfoProperty', 'ContactTargetInfoProperty', 'StageProperty', 'TargetsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnPlan'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ssmcontacts.CfnPlanDefConfig] = pydantic.Field(None)


class CfnPlanDefConfig(pydantic.BaseModel):
    ChannelTargetInfoProperty: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefChanneltargetinfopropertyParams]] = pydantic.Field(None, description='')
    ContactTargetInfoProperty: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefContacttargetinfopropertyParams]] = pydantic.Field(None, description='')
    StageProperty: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefStagepropertyParams]] = pydantic.Field(None, description='')
    TargetsProperty: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefTargetspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnPlanDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnPlanDefChanneltargetinfopropertyParams(pydantic.BaseModel):
    channel_id: str = pydantic.Field(..., description='')
    retry_interval_in_minutes: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnPlanDefContacttargetinfopropertyParams(pydantic.BaseModel):
    contact_id: str = pydantic.Field(..., description='')
    is_essential: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnPlanDefStagepropertyParams(pydantic.BaseModel):
    duration_in_minutes: typing.Union[int, float] = pydantic.Field(..., description='')
    targets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnPlan_TargetsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnPlanDefTargetspropertyParams(pydantic.BaseModel):
    channel_target_info: typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnPlan_ChannelTargetInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    contact_target_info: typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnPlan_ContactTargetInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPlanDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPlanDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPlanDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPlanDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPlanDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPlanDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPlanDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPlanDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPlanDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPlanDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPlanDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPlanDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPlanDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPlanDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ssmcontacts.CfnRotation
class CfnRotationDef(BaseCfnResource):
    contact_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Names (ARNs) of the contacts to add to the rotation. .. epigraph:: Only the ``PERSONAL`` contact type is supported. The contact types ``ESCALATION`` and ``ONCALL_SCHEDULE`` are not supported for this operation. The order in which you list the contacts is their shift order in the rotation schedule.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name for the rotation.\n')
    recurrence: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_RecurrenceSettingsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about the rule that specifies when shift team members rotate.\n')
    start_time: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The date and time the rotation goes into effect.\n')
    time_zone_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The time zone to base the rotation’s activity on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the `Time Zone Database <https://docs.aws.amazon.com/https://www.iana.org/time-zones>`_ on the IANA website. .. epigraph:: Designators for time zones that don’t support Daylight Savings Time rules, such as Pacific Standard Time (PST), are not supported.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Optional metadata to assign to the rotation. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For more information, see `Tagging Incident Manager resources <https://docs.aws.amazon.com/incident-manager/latest/userguide/tagging.html>`_ in the *Incident Manager User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['contact_ids', 'name', 'recurrence', 'start_time', 'time_zone_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CoverageTimeProperty', 'MonthlySettingProperty', 'RecurrenceSettingsProperty', 'ShiftCoverageProperty', 'WeeklySettingProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnRotation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ssmcontacts.CfnRotationDefConfig] = pydantic.Field(None)


class CfnRotationDefConfig(pydantic.BaseModel):
    CoverageTimeProperty: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefCoveragetimepropertyParams]] = pydantic.Field(None, description='')
    MonthlySettingProperty: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefMonthlysettingpropertyParams]] = pydantic.Field(None, description='')
    RecurrenceSettingsProperty: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefRecurrencesettingspropertyParams]] = pydantic.Field(None, description='')
    ShiftCoverageProperty: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefShiftcoveragepropertyParams]] = pydantic.Field(None, description='')
    WeeklySettingProperty: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefWeeklysettingpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ssmcontacts.CfnRotationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnRotationDefCoveragetimepropertyParams(pydantic.BaseModel):
    end_time: str = pydantic.Field(..., description='')
    start_time: str = pydantic.Field(..., description='')
    ...

class CfnRotationDefMonthlysettingpropertyParams(pydantic.BaseModel):
    day_of_month: typing.Union[int, float] = pydantic.Field(..., description='')
    hand_off_time: str = pydantic.Field(..., description='')
    ...

class CfnRotationDefRecurrencesettingspropertyParams(pydantic.BaseModel):
    number_of_on_calls: typing.Union[int, float] = pydantic.Field(..., description='')
    recurrence_multiplier: typing.Union[int, float] = pydantic.Field(..., description='')
    daily_settings: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    monthly_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_MonthlySettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    shift_coverages: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_ShiftCoveragePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    weekly_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_WeeklySettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnRotationDefShiftcoveragepropertyParams(pydantic.BaseModel):
    coverage_times: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_CoverageTimePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    day_of_week: str = pydantic.Field(..., description='')
    ...

class CfnRotationDefWeeklysettingpropertyParams(pydantic.BaseModel):
    day_of_week: str = pydantic.Field(..., description='')
    hand_off_time: str = pydantic.Field(..., description='')
    ...

class CfnRotationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRotationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRotationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRotationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRotationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRotationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRotationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRotationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRotationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRotationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRotationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnRotationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRotationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRotationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ssmcontacts.CfnContactChannelProps
class CfnContactChannelPropsDef(BaseCfnProperty):
    channel_address: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The details that Incident Manager uses when trying to engage the contact channel.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the contact channel.\n')
    channel_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the contact channel. Incident Manager supports three contact methods:. - SMS - VOICE - EMAIL\n')
    contact_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the contact you are adding the contact channel to.\n')
    defer_activation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If you want to activate the channel at a later time, you can choose to defer activation. Incident Manager can\'t engage your contact channel until it has been activated.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssmcontacts-contactchannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    cfn_contact_channel_props = ssmcontacts.CfnContactChannelProps(\n        channel_address="channelAddress",\n        channel_name="channelName",\n        channel_type="channelType",\n        contact_id="contactId",\n\n        # the properties below are optional\n        defer_activation=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_address', 'channel_name', 'channel_type', 'contact_id', 'defer_activation']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnContactChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnContactProps
class CfnContactPropsDef(BaseCfnProperty):
    alias: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique and identifiable alias of the contact or escalation plan.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The full name of the contact or escalation plan.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of contact. - ``PERSONAL`` : A single, individual contact. - ``ESCALATION`` : An escalation plan. - ``ONCALL_SCHEDULE`` : An on-call schedule.\n')
    plan: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnContact_StagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssmcontacts-contact.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    cfn_contact_props = ssmcontacts.CfnContactProps(\n        alias="alias",\n        display_name="displayName",\n        type="type",\n\n        # the properties below are optional\n        plan=[ssmcontacts.CfnContact.StageProperty(\n            duration_in_minutes=123,\n            rotation_ids=["rotationIds"],\n            targets=[ssmcontacts.CfnContact.TargetsProperty(\n                channel_target_info=ssmcontacts.CfnContact.ChannelTargetInfoProperty(\n                    channel_id="channelId",\n                    retry_interval_in_minutes=123\n                ),\n                contact_target_info=ssmcontacts.CfnContact.ContactTargetInfoProperty(\n                    contact_id="contactId",\n                    is_essential=False\n                )\n            )]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alias', 'display_name', 'type', 'plan']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnContactProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnPlanProps
class CfnPlanPropsDef(BaseCfnProperty):
    contact_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the contact.\n')
    rotation_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Names (ARNs) of the on-call rotations associated with the plan.\n')
    stages: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmcontacts.CfnPlan_StagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of stages that the escalation plan or engagement plan uses to engage contacts and contact methods.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssmcontacts-plan.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    cfn_plan_props = ssmcontacts.CfnPlanProps(\n        contact_id="contactId",\n\n        # the properties below are optional\n        rotation_ids=["rotationIds"],\n        stages=[ssmcontacts.CfnPlan.StageProperty(\n            duration_in_minutes=123,\n\n            # the properties below are optional\n            targets=[ssmcontacts.CfnPlan.TargetsProperty(\n                channel_target_info=ssmcontacts.CfnPlan.ChannelTargetInfoProperty(\n                    channel_id="channelId",\n                    retry_interval_in_minutes=123\n                ),\n                contact_target_info=ssmcontacts.CfnPlan.ContactTargetInfoProperty(\n                    contact_id="contactId",\n                    is_essential=False\n                )\n            )]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['contact_id', 'rotation_ids', 'stages']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnPlanProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmcontacts.CfnRotationProps
class CfnRotationPropsDef(BaseCfnProperty):
    contact_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Names (ARNs) of the contacts to add to the rotation. .. epigraph:: Only the ``PERSONAL`` contact type is supported. The contact types ``ESCALATION`` and ``ONCALL_SCHEDULE`` are not supported for this operation. The order in which you list the contacts is their shift order in the rotation schedule.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name for the rotation.\n')
    recurrence: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ssmcontacts.CfnRotation_RecurrenceSettingsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about the rule that specifies when shift team members rotate.\n')
    start_time: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The date and time the rotation goes into effect.\n')
    time_zone_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The time zone to base the rotation’s activity on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the `Time Zone Database <https://docs.aws.amazon.com/https://www.iana.org/time-zones>`_ on the IANA website. .. epigraph:: Designators for time zones that don’t support Daylight Savings Time rules, such as Pacific Standard Time (PST), are not supported.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Optional metadata to assign to the rotation. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For more information, see `Tagging Incident Manager resources <https://docs.aws.amazon.com/incident-manager/latest/userguide/tagging.html>`_ in the *Incident Manager User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssmcontacts-rotation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmcontacts as ssmcontacts\n\n    cfn_rotation_props = ssmcontacts.CfnRotationProps(\n        contact_ids=["contactIds"],\n        name="name",\n        recurrence=ssmcontacts.CfnRotation.RecurrenceSettingsProperty(\n            number_of_on_calls=123,\n            recurrence_multiplier=123,\n\n            # the properties below are optional\n            daily_settings=["dailySettings"],\n            monthly_settings=[ssmcontacts.CfnRotation.MonthlySettingProperty(\n                day_of_month=123,\n                hand_off_time="handOffTime"\n            )],\n            shift_coverages=[ssmcontacts.CfnRotation.ShiftCoverageProperty(\n                coverage_times=[ssmcontacts.CfnRotation.CoverageTimeProperty(\n                    end_time="endTime",\n                    start_time="startTime"\n                )],\n                day_of_week="dayOfWeek"\n            )],\n            weekly_settings=[ssmcontacts.CfnRotation.WeeklySettingProperty(\n                day_of_week="dayOfWeek",\n                hand_off_time="handOffTime"\n            )]\n        ),\n        start_time="startTime",\n        time_zone_id="timeZoneId",\n\n        # the properties below are optional\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['contact_ids', 'name', 'recurrence', 'start_time', 'time_zone_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmcontacts.CfnRotationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnContact_ChannelTargetInfoProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnContact_ChannelTargetInfoPropertyDef]] = pydantic.Field(None)
    CfnContact_ContactTargetInfoProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnContact_ContactTargetInfoPropertyDef]] = pydantic.Field(None)
    CfnContact_StageProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnContact_StagePropertyDef]] = pydantic.Field(None)
    CfnContact_TargetsProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnContact_TargetsPropertyDef]] = pydantic.Field(None)
    CfnPlan_ChannelTargetInfoProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnPlan_ChannelTargetInfoPropertyDef]] = pydantic.Field(None)
    CfnPlan_ContactTargetInfoProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnPlan_ContactTargetInfoPropertyDef]] = pydantic.Field(None)
    CfnPlan_StageProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnPlan_StagePropertyDef]] = pydantic.Field(None)
    CfnPlan_TargetsProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnPlan_TargetsPropertyDef]] = pydantic.Field(None)
    CfnRotation_CoverageTimeProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnRotation_CoverageTimePropertyDef]] = pydantic.Field(None)
    CfnRotation_MonthlySettingProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnRotation_MonthlySettingPropertyDef]] = pydantic.Field(None)
    CfnRotation_RecurrenceSettingsProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnRotation_RecurrenceSettingsPropertyDef]] = pydantic.Field(None)
    CfnRotation_ShiftCoverageProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnRotation_ShiftCoveragePropertyDef]] = pydantic.Field(None)
    CfnRotation_WeeklySettingProperty: typing.Optional[dict[str, models.aws_ssmcontacts.CfnRotation_WeeklySettingPropertyDef]] = pydantic.Field(None)
    CfnContact: typing.Optional[dict[str, models.aws_ssmcontacts.CfnContactDef]] = pydantic.Field(None)
    CfnContactChannel: typing.Optional[dict[str, models.aws_ssmcontacts.CfnContactChannelDef]] = pydantic.Field(None)
    CfnPlan: typing.Optional[dict[str, models.aws_ssmcontacts.CfnPlanDef]] = pydantic.Field(None)
    CfnRotation: typing.Optional[dict[str, models.aws_ssmcontacts.CfnRotationDef]] = pydantic.Field(None)
    CfnContactChannelProps: typing.Optional[dict[str, models.aws_ssmcontacts.CfnContactChannelPropsDef]] = pydantic.Field(None)
    CfnContactProps: typing.Optional[dict[str, models.aws_ssmcontacts.CfnContactPropsDef]] = pydantic.Field(None)
    CfnPlanProps: typing.Optional[dict[str, models.aws_ssmcontacts.CfnPlanPropsDef]] = pydantic.Field(None)
    CfnRotationProps: typing.Optional[dict[str, models.aws_ssmcontacts.CfnRotationPropsDef]] = pydantic.Field(None)
    ...

import models
