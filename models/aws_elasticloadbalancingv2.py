from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.BaseListener
class BaseListenerDef(BaseClass):
    additional_props: typing.Any = pydantic.Field(..., description='-')
    _init_params: typing.ClassVar[list[str]] = ['additional_props']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.BaseListener'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[BaseListenerDefConfig] = pydantic.Field(None)


class BaseListenerDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class BaseListenerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.BaseLoadBalancer
class BaseLoadBalancerDef(BaseClass):
    base_props: typing.Union[models.aws_elasticloadbalancingv2.BaseLoadBalancerPropsDef, dict[str, typing.Any]] = pydantic.Field(..., description='-\n')
    additional_props: typing.Any = pydantic.Field(..., description='-')
    _init_params: typing.ClassVar[list[str]] = ['base_props', 'additional_props']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy', 'log_access_logs', 'remove_attribute', 'set_attribute']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.BaseLoadBalancer'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[BaseLoadBalancerDefConfig] = pydantic.Field(None)


class BaseLoadBalancerDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    log_access_logs: typing.Optional[list[BaseLoadBalancerDefLogAccessLogsParams]] = pydantic.Field(None, description='Enable access logging for this load balancer.\nA region must be specified on the stack containing the load balancer; you cannot enable logging on\nenvironment-agnostic stacks. See https://docs.aws.amazon.com/cdk/latest/guide/environments.html')
    remove_attribute: typing.Optional[list[BaseLoadBalancerDefRemoveAttributeParams]] = pydantic.Field(None, description='Remove an attribute from the load balancer.')
    set_attribute: typing.Optional[list[BaseLoadBalancerDefSetAttributeParams]] = pydantic.Field(None, description='Set a non-standard attribute on the load balancer.')

class BaseLoadBalancerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class BaseLoadBalancerDefLogAccessLogsParams(pydantic.BaseModel):
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='-\n')
    prefix: typing.Optional[str] = pydantic.Field(None, description='-')
    ...

class BaseLoadBalancerDefRemoveAttributeParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-')
    ...

class BaseLoadBalancerDefSetAttributeParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Optional[str] = pydantic.Field(None, description='-\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\n')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ListenerAction
class ListenerActionDef(BaseClass):
    default_action_json: typing.Union[models.aws_elasticloadbalancingv2.CfnListener_ActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='-\n')
    next: typing.Optional[models.aws_elasticloadbalancingv2.ListenerActionDef] = pydantic.Field(None, description='-')
    _init_params: typing.ClassVar[list[str]] = ['default_action_json', 'next']
    _method_names: typing.ClassVar[list[str]] = ['bind', 'render_actions', 'render_rule_actions']
    _classmethod_names: typing.ClassVar[list[str]] = ['authenticate_oidc', 'fixed_response', 'forward', 'redirect', 'weighted_forward']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ListenerAction'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ListenerActionDefConfig] = pydantic.Field(None)


class ListenerActionDefConfig(pydantic.BaseModel):
    authenticate_oidc: typing.Optional[list[ListenerActionDefAuthenticateOidcParams]] = pydantic.Field(None, description='Authenticate using an identity provider (IdP) that is compliant with OpenID Connect (OIDC).')
    bind: typing.Optional[list[ListenerActionDefBindParams]] = pydantic.Field(None, description='Called when the action is being used in a listener.')
    fixed_response: typing.Optional[list[ListenerActionDefFixedResponseParams]] = pydantic.Field(None, description='Return a fixed response.')
    forward: typing.Optional[list[ListenerActionDefForwardParams]] = pydantic.Field(None, description='Forward to one or more Target Groups.')
    redirect: typing.Optional[list[ListenerActionDefRedirectParams]] = pydantic.Field(None, description='Redirect to a different URI.\nA URI consists of the following components:\nprotocol://hostname:port/path?query. You must modify at least one of the\nfollowing components to avoid a redirect loop: protocol, hostname, port, or\npath. Any components that you do not modify retain their original values.\n\nYou can reuse URI components using the following reserved keywords:\n\n- ``#{protocol}``\n- ``#{host}``\n- ``#{port}``\n- ``#{path}`` (the leading "/" is removed)\n- ``#{query}``\n\nFor example, you can change the path to "/new/#{path}", the hostname to\n"example.#{host}", or the query to "#{query}&value=xyz".')
    render_actions: typing.Optional[bool] = pydantic.Field(None, description='Render the listener default actions in this chain.')
    render_rule_actions: typing.Optional[bool] = pydantic.Field(None, description='Render the listener rule actions in this chain.')
    weighted_forward: typing.Optional[list[ListenerActionDefWeightedForwardParams]] = pydantic.Field(None, description='Forward to one or more Target Groups which are weighted differently.')

class ListenerActionDefAuthenticateOidcParams(pydantic.BaseModel):
    authorization_endpoint: str = pydantic.Field(..., description='The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    client_id: str = pydantic.Field(..., description='The OAuth 2.0 client identifier.\n')
    client_secret: models.SecretValueDef = pydantic.Field(..., description='The OAuth 2.0 client secret.\n')
    issuer: str = pydantic.Field(..., description='The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    next: models.aws_elasticloadbalancingv2.ListenerActionDef = pydantic.Field(..., description='What action to execute next.\n')
    token_endpoint: str = pydantic.Field(..., description='The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    user_info_endpoint: str = pydantic.Field(..., description='The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    allow_https_outbound: typing.Optional[bool] = pydantic.Field(None, description="Allow HTTPS outbound traffic to communicate with the IdP. Set this property to false if the IP address used for the IdP endpoint is identifiable and you want to control outbound traffic. Then allow HTTPS outbound traffic to the IdP's IP address using the listener's ``connections`` property. Default: true\n")
    authentication_request_extra_params: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='The query parameters (up to 10) to include in the redirect request to the authorization endpoint. Default: - No extra parameters\n')
    on_unauthenticated_request: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.UnauthenticatedAction] = pydantic.Field(None, description='The behavior if the user is not authenticated. Default: UnauthenticatedAction.AUTHENTICATE\n')
    scope: typing.Optional[str] = pydantic.Field(None, description='The set of user claims to be requested from the IdP. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP. Default: "openid"\n')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='The name of the cookie used to maintain session information. Default: "AWSELBAuthSessionCookie"\n')
    session_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum duration of the authentication session. Default: Duration.days(7)\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/listener-authenticate-users.html#oidc-requirements\n')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerActionDefConfig]] = pydantic.Field(None)
    ...

class ListenerActionDefBindParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    listener: typing.Union[models.aws_elasticloadbalancingv2.ApplicationListenerDef] = pydantic.Field(..., description='-\n')
    associating_construct: typing.Optional[models.AnyResource] = pydantic.Field(None, description='-')
    ...

class ListenerActionDefFixedResponseParams(pydantic.BaseModel):
    status_code: typing.Union[int, float] = pydantic.Field(..., description='-\n')
    content_type: typing.Optional[str] = pydantic.Field(None, description='Content Type of the response. Valid Values: text/plain | text/css | text/html | application/javascript | application/json Default: - Automatically determined\n')
    message_body: typing.Optional[str] = pydantic.Field(None, description='The response body. Default: - No body\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#fixed-response-actions\n')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerActionDefConfig]] = pydantic.Field(None)
    ...

class ListenerActionDefForwardParams(pydantic.BaseModel):
    target_groups: typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]] = pydantic.Field(..., description='-\n')
    stickiness_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='For how long clients should be directed to the same target group. Range between 1 second and 7 days. Default: - No stickiness\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#forward-actions\n')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerActionDefConfig]] = pydantic.Field(None)
    ...

class ListenerActionDefRedirectParams(pydantic.BaseModel):
    host: typing.Optional[str] = pydantic.Field(None, description='The hostname. This component is not percent-encoded. The hostname can contain #{host}. Default: - No change\n')
    path: typing.Optional[str] = pydantic.Field(None, description='The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Default: - No change\n')
    permanent: typing.Optional[bool] = pydantic.Field(None, description='The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302). Default: false\n')
    port: typing.Optional[str] = pydantic.Field(None, description='The port. You can specify a value from 1 to 65535 or #{port}. Default: - No change\n')
    protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP. Default: - No change\n')
    query: typing.Optional[str] = pydantic.Field(None, description='The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords. Default: - No change\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#redirect-actions\n')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerActionDefConfig]] = pydantic.Field(None)
    ...

class ListenerActionDefWeightedForwardParams(pydantic.BaseModel):
    target_groups: typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.WeightedTargetGroupDef, dict[str, typing.Any]]] = pydantic.Field(..., description='-\n')
    stickiness_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='For how long clients should be directed to the same target group. Range between 1 second and 7 days. Default: - No stickiness\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#forward-actions\n')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerActionDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ListenerCertificate
class ListenerCertificateDef(BaseClass):
    certificate_arn: str = pydantic.Field(..., description='The ARN of the certificate to use.')
    _init_params: typing.ClassVar[list[str]] = ['certificate_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['from_arn', 'from_certificate_manager']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ListenerCertificate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_arn', 'from_certificate_manager']
    ...


    from_arn: typing.Optional[ListenerCertificateDefFromArnParams] = pydantic.Field(None, description='Use any certificate, identified by its ARN, as a listener certificate.')
    from_certificate_manager: typing.Optional[ListenerCertificateDefFromCertificateManagerParams] = pydantic.Field(None, description='Use an ACM certificate as a listener certificate.')

class ListenerCertificateDefFromArnParams(pydantic.BaseModel):
    certificate_arn: str = pydantic.Field(..., description='-')
    ...

class ListenerCertificateDefFromCertificateManagerParams(pydantic.BaseModel):
    acm_certificate: typing.Union[models.aws_certificatemanager.CertificateDef, models.aws_certificatemanager.DnsValidatedCertificateDef, models.aws_certificatemanager.PrivateCertificateDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ListenerCondition
class ListenerConditionDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = ['render_raw_condition']
    _classmethod_names: typing.ClassVar[list[str]] = ['host_headers', 'http_header', 'http_request_methods', 'path_patterns', 'query_strings', 'source_ips']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ListenerCondition'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ListenerConditionDefConfig] = pydantic.Field(None)


class ListenerConditionDefConfig(pydantic.BaseModel):
    host_headers: typing.Optional[list[ListenerConditionDefHostHeadersParams]] = pydantic.Field(None, description='Create a host-header listener rule condition.')
    http_header: typing.Optional[list[ListenerConditionDefHttpHeaderParams]] = pydantic.Field(None, description='Create a http-header listener rule condition.')
    http_request_methods: typing.Optional[list[ListenerConditionDefHttpRequestMethodsParams]] = pydantic.Field(None, description='Create a http-request-method listener rule condition.')
    path_patterns: typing.Optional[list[ListenerConditionDefPathPatternsParams]] = pydantic.Field(None, description='Create a path-pattern listener rule condition.')
    query_strings: typing.Optional[list[ListenerConditionDefQueryStringsParams]] = pydantic.Field(None, description='Create a query-string listener rule condition.')
    render_raw_condition: typing.Optional[bool] = pydantic.Field(None, description='Render the raw Cfn listener rule condition object.')
    source_ips: typing.Optional[list[ListenerConditionDefSourceIpsParams]] = pydantic.Field(None, description='Create a source-ip listener rule condition.')

class ListenerConditionDefHostHeadersParams(pydantic.BaseModel):
    values: typing.Sequence[str] = pydantic.Field(..., description='Hosts for host headers.')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerConditionDefConfig]] = pydantic.Field(None)
    ...

class ListenerConditionDefHttpHeaderParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='HTTP header name.\n')
    values: typing.Sequence[str] = pydantic.Field(..., description='HTTP header values.')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerConditionDefConfig]] = pydantic.Field(None)
    ...

class ListenerConditionDefHttpRequestMethodsParams(pydantic.BaseModel):
    values: typing.Sequence[str] = pydantic.Field(..., description='HTTP request methods.')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerConditionDefConfig]] = pydantic.Field(None)
    ...

class ListenerConditionDefPathPatternsParams(pydantic.BaseModel):
    values: typing.Sequence[str] = pydantic.Field(..., description='Path patterns.')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerConditionDefConfig]] = pydantic.Field(None)
    ...

class ListenerConditionDefQueryStringsParams(pydantic.BaseModel):
    values: typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.QueryStringConditionDef, dict[str, typing.Any]]] = pydantic.Field(..., description='Query string key/value pairs.')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerConditionDefConfig]] = pydantic.Field(None)
    ...

class ListenerConditionDefSourceIpsParams(pydantic.BaseModel):
    values: typing.Sequence[str] = pydantic.Field(..., description='Source ips.')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ListenerConditionDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkListenerAction
class NetworkListenerActionDef(BaseClass):
    default_action_json: typing.Union[models.aws_elasticloadbalancingv2.CfnListener_ActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='-\n')
    next: typing.Optional[models.aws_elasticloadbalancingv2.NetworkListenerActionDef] = pydantic.Field(None, description='-')
    _init_params: typing.ClassVar[list[str]] = ['default_action_json', 'next']
    _method_names: typing.ClassVar[list[str]] = ['bind', 'render_actions', 'render_rule_actions']
    _classmethod_names: typing.ClassVar[list[str]] = ['forward', 'weighted_forward']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkListenerAction'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[NetworkListenerActionDefConfig] = pydantic.Field(None)


class NetworkListenerActionDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[NetworkListenerActionDefBindParams]] = pydantic.Field(None, description='Called when the action is being used in a listener.')
    forward: typing.Optional[list[NetworkListenerActionDefForwardParams]] = pydantic.Field(None, description='Forward to one or more Target Groups.')
    render_actions: typing.Optional[bool] = pydantic.Field(None, description='Render the listener default actions in this chain.')
    render_rule_actions: typing.Optional[bool] = pydantic.Field(None, description='Render the listener rule actions in this chain.')
    weighted_forward: typing.Optional[list[NetworkListenerActionDefWeightedForwardParams]] = pydantic.Field(None, description='Forward to one or more Target Groups which are weighted differently.')

class NetworkListenerActionDefBindParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    listener: typing.Union[models.aws_elasticloadbalancingv2.NetworkListenerDef] = pydantic.Field(..., description='-')
    ...

class NetworkListenerActionDefForwardParams(pydantic.BaseModel):
    target_groups: typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef]] = pydantic.Field(..., description='-\n')
    stickiness_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='For how long clients should be directed to the same target group. Range between 1 second and 7 days. Default: - No stickiness')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.NetworkListenerActionDefConfig]] = pydantic.Field(None)
    ...

class NetworkListenerActionDefWeightedForwardParams(pydantic.BaseModel):
    target_groups: typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.NetworkWeightedTargetGroupDef, dict[str, typing.Any]]] = pydantic.Field(..., description='-\n')
    stickiness_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='For how long clients should be directed to the same target group. Range between 1 second and 7 days. Default: - No stickiness')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.NetworkListenerActionDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.TargetGroupBase
class TargetGroupBaseDef(BaseClass):
    base_props: typing.Union[models.aws_elasticloadbalancingv2.BaseTargetGroupPropsDef, dict[str, typing.Any]] = pydantic.Field(..., description='-\n')
    additional_props: typing.Any = pydantic.Field(..., description='-')
    _init_params: typing.ClassVar[list[str]] = ['base_props', 'additional_props']
    _method_names: typing.ClassVar[list[str]] = ['configure_health_check', 'set_attribute']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.TargetGroupBase'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[TargetGroupBaseDefConfig] = pydantic.Field(None)


class TargetGroupBaseDefConfig(pydantic.BaseModel):
    configure_health_check: typing.Optional[list[TargetGroupBaseDefConfigureHealthCheckParams]] = pydantic.Field(None, description="Set/replace the target group's health check.")
    set_attribute: typing.Optional[list[TargetGroupBaseDefSetAttributeParams]] = pydantic.Field(None, description='Set a non-standard attribute on the target group.')

class TargetGroupBaseDefConfigureHealthCheckParams(pydantic.BaseModel):
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance or ip, health checks are always enabled and cannot be disabled. Default: - Determined automatically.\n')
    healthy_grpc_codes: typing.Optional[str] = pydantic.Field(None, description='GRPC code to use when checking for a successful response from a target. You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). Default: - 12\n')
    healthy_http_codes: typing.Optional[str] = pydantic.Field(None, description='HTTP code to use when checking for a successful response from a target. For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").\n')
    healthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks successes required before considering an unhealthy target healthy. For Application Load Balancers, the default is 5. For Network Load Balancers, the default is 3. Default: 5 for ALBs, 3 for NLBs\n')
    interval: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The approximate number of seconds between health checks for an individual target. Must be 5 to 300 seconds Default: 10 seconds if protocol is ``GENEVE``, 35 seconds if target type is ``lambda``, else 30 seconds\n')
    path: typing.Optional[str] = pydantic.Field(None, description='The ping path destination where Elastic Load Balancing sends health check requests. Default: /\n')
    port: typing.Optional[str] = pydantic.Field(None, description="The port that the load balancer uses when performing health checks on the targets. Default: 'traffic-port'\n")
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The TLS, UDP, and TCP_UDP protocols are not supported for health checks. Default: HTTP for ALBs, TCP for NLBs\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time, in seconds, during which no response from a target means a failed health check. For Application Load Balancers, the range is 2-60 seconds and the default is 5 seconds. For Network Load Balancers, this is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks. Default: Duration.seconds(5) for ALBs, Duration.seconds(10) or Duration.seconds(6) for NLBs\n')
    unhealthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health check failures required before considering a target unhealthy. For Application Load Balancers, the default is 2. For Network Load Balancers, this value must be the same as the healthy threshold count. Default: 2')
    ...

class TargetGroupBaseDefSetAttributeParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Optional[str] = pydantic.Field(None, description='-\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\n')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationListener
class ApplicationListenerDef(BaseConstruct):
    load_balancer: typing.Union[models.aws_elasticloadbalancingv2.ApplicationLoadBalancerDef] = pydantic.Field(..., description='The load balancer to attach this listener to.\n')
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description='Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. Default: - No certificates.\n')
    default_action: typing.Optional[models.aws_elasticloadbalancingv2.ListenerActionDef] = pydantic.Field(None, description='Default action to take for requests to this listener. This allows full control of the default action of the load balancer, including Action chaining, fixed responses and redirect responses. See the ``ListenerAction`` class for all options. Cannot be specified together with ``defaultTargetGroups``. Default: - None.\n')
    default_target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]]] = pydantic.Field(None, description='Default target groups to load balance to. All target groups will be load balanced to with equal weight and without stickiness. For a more complex configuration than that, use either ``defaultAction`` or ``addAction()``. Cannot be specified together with ``defaultAction``. Default: - None.\n')
    open: typing.Optional[bool] = pydantic.Field(None, description="Allow anyone to connect to the load balancer on the listener port. If this is specified, the load balancer will be opened up to anyone who can reach it. For internal load balancers this is anyone in the same VPC. For public load balancers, this is anyone on the internet. If you want to be more selective about who can access this load balancer, set this to ``false`` and use the listener's ``connections`` object to selectively grant access to the load balancer on the listener port. Default: true\n")
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the listener listens for requests. Default: - Determined from protocol if known.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol to use. Default: - Determined from port if known.\n')
    ssl_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.SslPolicy] = pydantic.Field(None, description='The security policy that defines which ciphers and protocols are supported. Default: - The current predefined security policy.')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer', 'certificates', 'default_action', 'default_target_groups', 'open', 'port', 'protocol', 'ssl_policy']
    _method_names: typing.ClassVar[list[str]] = ['add_action', 'add_certificates', 'add_target_groups', 'add_targets', 'apply_removal_policy', 'register_connectable']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_application_listener_attributes', 'from_lookup']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationListener'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_application_listener_attributes', 'from_lookup']
    ...


    from_application_listener_attributes: typing.Optional[ApplicationListenerDefFromApplicationListenerAttributesParams] = pydantic.Field(None, description='Import an existing listener.')
    from_lookup: typing.Optional[ApplicationListenerDefFromLookupParams] = pydantic.Field(None, description='Look up an ApplicationListener.')
    resource_config: typing.Optional[ApplicationListenerDefConfig] = pydantic.Field(None)


class ApplicationListenerDefConfig(pydantic.BaseModel):
    add_action: typing.Optional[list[ApplicationListenerDefAddActionParams]] = pydantic.Field(None, description="Perform the given default action on incoming requests.\nThis allows full control of the default action of the load balancer,\nincluding Action chaining, fixed responses and redirect responses. See\nthe ``ListenerAction`` class for all options.\n\nIt's possible to add routing conditions to the Action added in this way.\nAt least one Action must be added without conditions (which becomes the\ndefault Action).")
    add_certificates: typing.Optional[list[ApplicationListenerDefAddCertificatesParams]] = pydantic.Field(None, description='Add one or more certificates to this listener.\nAfter the first certificate, this creates ApplicationListenerCertificates\nresources since cloudformation requires the certificates array on the\nlistener resource to have a length of 1.')
    add_target_groups: typing.Optional[list[ApplicationListenerDefAddTargetGroupsParams]] = pydantic.Field(None, description="Load balance incoming requests to the given target groups.\nAll target groups will be load balanced to with equal weight and without\nstickiness. For a more complex configuration than that, use ``addAction()``.\n\nIt's possible to add routing conditions to the TargetGroups added in this\nway. At least one TargetGroup must be added without conditions (which will\nbecome the default Action for this listener).")
    add_targets: typing.Optional[list[ApplicationListenerDefAddTargetsParams]] = pydantic.Field(None, description="Load balance incoming requests to the given load balancing targets.\nThis method implicitly creates an ApplicationTargetGroup for the targets\ninvolved, and a 'forward' action to route traffic to the given TargetGroup.\n\nIf you want more control over the precise setup, create the TargetGroup\nand use ``addAction`` yourself.\n\nIt's possible to add conditions to the targets added in this way. At least\none set of targets must be added without conditions.")
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    register_connectable: typing.Optional[list[ApplicationListenerDefRegisterConnectableParams]] = pydantic.Field(None, description="Register that a connectable that has been added to this load balancer.\nDon't call this directly. It is called by ApplicationTargetGroup.")
    connections_config: typing.Optional[models.aws_ec2.ConnectionsDefConfig] = pydantic.Field(None)
    load_balancer_config: typing.Optional[models._interface_methods.AwsElasticloadbalancingv2IApplicationLoadBalancerDefConfig] = pydantic.Field(None)

class ApplicationListenerDefAddActionParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    action: models.aws_elasticloadbalancingv2.ListenerActionDef = pydantic.Field(..., description='Action to perform.\n')
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='Priority of this target group. The rule with the lowest priority will be used for every request. If priority is not given, these target groups will be added as defaults, and must not have conditions. Priorities must be unique. Default: Target groups are used as defaults')
    ...

class ApplicationListenerDefAddCertificatesParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    certificates: typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]] = pydantic.Field(..., description='-')
    ...

class ApplicationListenerDefAddTargetGroupsParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    target_groups: typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]] = pydantic.Field(..., description='Target groups to forward requests to.\n')
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='Priority of this target group. The rule with the lowest priority will be used for every request. If priority is not given, these target groups will be added as defaults, and must not have conditions. Priorities must be unique. Default: Target groups are used as defaults')
    ...

class ApplicationListenerDefAddTargetsParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    deregistration_delay: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time for Elastic Load Balancing to wait before deregistering a target. The range is 0-3600 seconds. Default: Duration.minutes(5)\n')
    health_check: typing.Union[models.aws_elasticloadbalancingv2.HealthCheckDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Health check configuration. Default: - The default value for each property in this configuration varies depending on the target.\n')
    load_balancing_algorithm_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.TargetGroupLoadBalancingAlgorithmType] = pydantic.Field(None, description='The load balancing algorithm to select targets for routing requests. Default: round_robin.\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the listener listens for requests. Default: Determined from protocol if known\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol to use. Default: Determined from port if known\n')
    protocol_version: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocolVersion] = pydantic.Field(None, description='The protocol version to use. Default: ApplicationProtocolVersion.HTTP1\n')
    slow_start: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The time period during which the load balancer sends a newly registered target a linearly increasing share of the traffic to the target group. The range is 30-900 seconds (15 minutes). Default: 0\n')
    stickiness_cookie_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The stickiness cookie expiration period. Setting this value enables load balancer stickiness. After this period, the cookie is considered stale. The minimum value is 1 second and the maximum value is 7 days (604800 seconds). Default: Stickiness disabled\n')
    stickiness_cookie_name: typing.Optional[str] = pydantic.Field(None, description="The name of an application-based stickiness cookie. Names that start with the following prefixes are not allowed: AWSALB, AWSALBAPP, and AWSALBTG; they're reserved for use by the load balancer. Note: ``stickinessCookieName`` parameter depends on the presence of ``stickinessCookieDuration`` parameter. If ``stickinessCookieDuration`` is not set, ``stickinessCookieName`` will be omitted. Default: - If ``stickinessCookieDuration`` is set, a load-balancer generated cookie is used. Otherwise, no stickiness is defined.\n")
    target_group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. Default: Automatically generated\n')
    targets: typing.Optional[typing.Sequence[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef, models.aws_elasticloadbalancingv2_targets.LambdaTargetDef]]] = pydantic.Field(None, description='The targets to add to this target group. Can be ``Instance``, ``IPAddress``, or any self-registering load balancing target. All target must be of the same type.\n')
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='Priority of this target group. The rule with the lowest priority will be used for every request. If priority is not given, these target groups will be added as defaults, and must not have conditions. Priorities must be unique. Default: Target groups are used as defaults\n')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDefConfig]] = pydantic.Field(None)
    ...

class ApplicationListenerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class ApplicationListenerDefFromApplicationListenerAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    listener_arn: str = pydantic.Field(..., description='ARN of the listener.\n')
    security_group: typing.Union[models.aws_ec2.SecurityGroupDef] = pydantic.Field(..., description='Security group of the load balancer this listener is associated with.\n')
    default_port: typing.Union[int, float, None] = pydantic.Field(None, description='The default port on which this listener is listening.')
    ...

class ApplicationListenerDefFromLookupParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    listener_arn: typing.Optional[str] = pydantic.Field(None, description='ARN of the listener to look up. Default: - does not filter by listener arn\n')
    listener_protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='Filter listeners by listener protocol. Default: - does not filter by listener protocol\n')
    listener_port: typing.Union[int, float, None] = pydantic.Field(None, description='Filter listeners by listener port. Default: - does not filter by listener port\n')
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description='Filter listeners by associated load balancer arn. Default: - does not filter by load balancer arn\n')
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Filter listeners by associated load balancer tags. Default: - does not filter by load balancer tags')
    ...

class ApplicationListenerDefRegisterConnectableParams(pydantic.BaseModel):
    connectable: typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ec2.ConnectionsDef, models.aws_ec2.NatInstanceProviderDef, models.aws_ec2.LaunchTemplateDef, models.aws_elasticloadbalancing.ListenerPortDef, models.aws_elasticloadbalancing.LoadBalancerDef, models.aws_elasticsearch.DomainDef, models.aws_opensearchservice.DomainDef, models.aws_rds.DatabaseProxyDef, models.aws_secretsmanager.HostedRotationDef, models.aws_stepfunctions_tasks.EcsRunTaskDef, models.aws_stepfunctions_tasks.SageMakerCreateModelDef, models.aws_stepfunctions_tasks.SageMakerCreateTrainingJobDef] = pydantic.Field(..., description='-\n')
    port_range: models.aws_ec2.PortDef = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerCertificate
class ApplicationListenerCertificateDef(BaseConstruct):
    listener: typing.Union[models.aws_elasticloadbalancingv2.ApplicationListenerDef] = pydantic.Field(..., description='The listener to attach the rule to.\n')
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description="Certificates to attach. Duplicates are not allowed. Default: - One of 'certificates' and 'certificateArns' is required.")
    _init_params: typing.ClassVar[list[str]] = ['listener', 'certificates']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerCertificate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerRule
class ApplicationListenerRuleDef(BaseConstruct):
    listener: typing.Union[models.aws_elasticloadbalancingv2.ApplicationListenerDef] = pydantic.Field(..., description='The listener to attach the rule to.\n')
    priority: typing.Union[int, float] = pydantic.Field(..., description='Priority of the rule. The rule with the lowest priority will be used for every request. Priorities must be unique.\n')
    action: typing.Optional[models.aws_elasticloadbalancingv2.ListenerActionDef] = pydantic.Field(None, description='Action to perform when requests are received. Only one of ``action``, ``fixedResponse``, ``redirectResponse`` or ``targetGroups`` can be specified. Default: - No action\n')
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]]] = pydantic.Field(None, description='Target groups to forward requests to. Only one of ``action``, ``fixedResponse``, ``redirectResponse`` or ``targetGroups`` can be specified. Implies a ``forward`` action. Default: - No target groups.')
    _init_params: typing.ClassVar[list[str]] = ['listener', 'priority', 'action', 'conditions', 'target_groups']
    _method_names: typing.ClassVar[list[str]] = ['add_condition', 'configure_action']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerRule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ApplicationListenerRuleDefConfig] = pydantic.Field(None)


class ApplicationListenerRuleDefConfig(pydantic.BaseModel):
    add_condition: typing.Optional[list[ApplicationListenerRuleDefAddConditionParams]] = pydantic.Field(None, description='Add a non-standard condition to this rule.')
    configure_action: typing.Optional[list[ApplicationListenerRuleDefConfigureActionParams]] = pydantic.Field(None, description='Configure the action to perform for this rule.')

class ApplicationListenerRuleDefAddConditionParams(pydantic.BaseModel):
    condition: models.aws_elasticloadbalancingv2.ListenerConditionDef = pydantic.Field(..., description='-')
    ...

class ApplicationListenerRuleDefConfigureActionParams(pydantic.BaseModel):
    action: models.aws_elasticloadbalancingv2.ListenerActionDef = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer
class ApplicationLoadBalancerDef(BaseConstruct):
    desync_mitigation_mode: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.DesyncMitigationMode] = pydantic.Field(None, description='Determines how the load balancer handles requests that might pose a security risk to your application. Default: DesyncMitigationMode.DEFENSIVE\n')
    drop_invalid_header_fields: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether HTTP headers with invalid header fields are removed by the load balancer (true) or routed to targets (false). Default: false\n')
    http2_enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether HTTP/2 is enabled. Default: true\n')
    idle_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The load balancer idle timeout, in seconds. Default: 60\n')
    ip_address_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.IpAddressType] = pydantic.Field(None, description='The type of IP addresses to use. Only applies to application load balancers. Default: IpAddressType.Ipv4\n')
    security_group: typing.Optional[typing.Union[models.aws_ec2.SecurityGroupDef]] = pydantic.Field(None, description='Security group to associate with this load balancer. Default: A security group is created\n')
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='The VPC network to place the load balancer in.\n')
    deletion_protection: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether deletion protection is enabled. Default: false\n')
    internet_facing: typing.Optional[bool] = pydantic.Field(None, description='Whether the load balancer has an internet-routable address. Default: false\n')
    load_balancer_name: typing.Optional[str] = pydantic.Field(None, description='Name of the load balancer. Default: - Automatically generated name.\n')
    vpc_subnets: typing.Union[models.aws_ec2.SubnetSelectionDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Which subnets place the load balancer in. Default: - the Vpc default strategy.')
    _init_params: typing.ClassVar[list[str]] = ['desync_mitigation_mode', 'drop_invalid_header_fields', 'http2_enabled', 'idle_timeout', 'ip_address_type', 'security_group', 'vpc', 'deletion_protection', 'internet_facing', 'load_balancer_name', 'vpc_subnets']
    _method_names: typing.ClassVar[list[str]] = ['add_listener', 'add_redirect', 'add_security_group', 'apply_removal_policy', 'log_access_logs', 'metric', 'metric_active_connection_count', 'metric_client_tls_negotiation_error_count', 'metric_consumed_lc_us', 'metric_elb_auth_error', 'metric_elb_auth_failure', 'metric_elb_auth_latency', 'metric_elb_auth_success', 'metric_http_code_elb', 'metric_http_code_target', 'metric_http_fixed_response_count', 'metric_http_redirect_count', 'metric_http_redirect_url_limit_exceeded_count', 'metric_ipv6_processed_bytes', 'metric_ipv6_request_count', 'metric_new_connection_count', 'metric_processed_bytes', 'metric_rejected_connection_count', 'metric_request_count', 'metric_rule_evaluations', 'metric_target_connection_error_count', 'metric_target_response_time', 'metric_target_tls_negotiation_error_count', 'remove_attribute', 'set_attribute']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_application_load_balancer_attributes', 'from_lookup']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_application_load_balancer_attributes', 'from_lookup']
    ...


    from_application_load_balancer_attributes: typing.Optional[ApplicationLoadBalancerDefFromApplicationLoadBalancerAttributesParams] = pydantic.Field(None, description='Import an existing Application Load Balancer.')
    from_lookup: typing.Optional[ApplicationLoadBalancerDefFromLookupParams] = pydantic.Field(None, description='Look up an application load balancer.')
    resource_config: typing.Optional[ApplicationLoadBalancerDefConfig] = pydantic.Field(None)


class ApplicationLoadBalancerDefConfig(pydantic.BaseModel):
    add_listener: typing.Optional[list[ApplicationLoadBalancerDefAddListenerParams]] = pydantic.Field(None, description='Add a new listener to this load balancer.')
    add_redirect: typing.Optional[list[ApplicationLoadBalancerDefAddRedirectParams]] = pydantic.Field(None, description='Add a redirection listener to this load balancer.')
    add_security_group: typing.Optional[list[ApplicationLoadBalancerDefAddSecurityGroupParams]] = pydantic.Field(None, description='Add a security group to this load balancer.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    log_access_logs: typing.Optional[list[ApplicationLoadBalancerDefLogAccessLogsParams]] = pydantic.Field(None, description='Enable access logging for this load balancer.\nA region must be specified on the stack containing the load balancer; you cannot enable logging on\nenvironment-agnostic stacks. See https://docs.aws.amazon.com/cdk/latest/guide/environments.html')
    metric: typing.Optional[list[ApplicationLoadBalancerDefMetricParams]] = pydantic.Field(None, description='(deprecated) Return the given named metric for this Application Load Balancer.')
    metric_active_connection_count: typing.Optional[list[ApplicationLoadBalancerDefMetricActiveConnectionCountParams]] = pydantic.Field(None, description='(deprecated) The total number of concurrent TCP connections active from clients to the load balancer and from the load balancer to targets.')
    metric_client_tls_negotiation_error_count: typing.Optional[list[ApplicationLoadBalancerDefMetricClientTlsNegotiationErrorCountParams]] = pydantic.Field(None, description='(deprecated) The number of TLS connections initiated by the client that did not establish a session with the load balancer.\nPossible causes include a\nmismatch of ciphers or protocols.')
    metric_consumed_lc_us: typing.Optional[list[ApplicationLoadBalancerDefMetricConsumedLcUsParams]] = pydantic.Field(None, description='(deprecated) The number of load balancer capacity units (LCU) used by your load balancer.')
    metric_elb_auth_error: typing.Optional[list[ApplicationLoadBalancerDefMetricElbAuthErrorParams]] = pydantic.Field(None, description="(deprecated) The number of user authentications that could not be completed.\nBecause an authenticate action was misconfigured, the load balancer\ncouldn't establish a connection with the IdP, or the load balancer\ncouldn't complete the authentication flow due to an internal error.")
    metric_elb_auth_failure: typing.Optional[list[ApplicationLoadBalancerDefMetricElbAuthFailureParams]] = pydantic.Field(None, description='(deprecated) The number of user authentications that could not be completed because the IdP denied access to the user or an authorization code was used more than once.')
    metric_elb_auth_latency: typing.Optional[list[ApplicationLoadBalancerDefMetricElbAuthLatencyParams]] = pydantic.Field(None, description='(deprecated) The time elapsed, in milliseconds, to query the IdP for the ID token and user info.\nIf one or more of these operations fail, this is the time to failure.')
    metric_elb_auth_success: typing.Optional[list[ApplicationLoadBalancerDefMetricElbAuthSuccessParams]] = pydantic.Field(None, description='(deprecated) The number of authenticate actions that were successful.\nThis metric is incremented at the end of the authentication workflow,\nafter the load balancer has retrieved the user claims from the IdP.')
    metric_http_code_elb: typing.Optional[list[ApplicationLoadBalancerDefMetricHttpCodeElbParams]] = pydantic.Field(None, description='(deprecated) The number of HTTP 3xx/4xx/5xx codes that originate from the load balancer.\nThis does not include any response codes generated by the targets.')
    metric_http_code_target: typing.Optional[list[ApplicationLoadBalancerDefMetricHttpCodeTargetParams]] = pydantic.Field(None, description='(deprecated) The number of HTTP 2xx/3xx/4xx/5xx response codes generated by all targets in the load balancer.\nThis does not include any response codes generated by the load balancer.')
    metric_http_fixed_response_count: typing.Optional[list[ApplicationLoadBalancerDefMetricHttpFixedResponseCountParams]] = pydantic.Field(None, description='(deprecated) The number of fixed-response actions that were successful.')
    metric_http_redirect_count: typing.Optional[list[ApplicationLoadBalancerDefMetricHttpRedirectCountParams]] = pydantic.Field(None, description='(deprecated) The number of redirect actions that were successful.')
    metric_http_redirect_url_limit_exceeded_count: typing.Optional[list[ApplicationLoadBalancerDefMetricHttpRedirectUrlLimitExceededCountParams]] = pydantic.Field(None, description="(deprecated) The number of redirect actions that couldn't be completed because the URL in the response location header is larger than 8K.")
    metric_ipv6_processed_bytes: typing.Optional[list[ApplicationLoadBalancerDefMetricIpv6ProcessedBytesParams]] = pydantic.Field(None, description='(deprecated) The total number of bytes processed by the load balancer over IPv6.')
    metric_ipv6_request_count: typing.Optional[list[ApplicationLoadBalancerDefMetricIpv6RequestCountParams]] = pydantic.Field(None, description='(deprecated) The number of IPv6 requests received by the load balancer.')
    metric_new_connection_count: typing.Optional[list[ApplicationLoadBalancerDefMetricNewConnectionCountParams]] = pydantic.Field(None, description='(deprecated) The total number of new TCP connections established from clients to the load balancer and from the load balancer to targets.')
    metric_processed_bytes: typing.Optional[list[ApplicationLoadBalancerDefMetricProcessedBytesParams]] = pydantic.Field(None, description='(deprecated) The total number of bytes processed by the load balancer over IPv4 and IPv6.')
    metric_rejected_connection_count: typing.Optional[list[ApplicationLoadBalancerDefMetricRejectedConnectionCountParams]] = pydantic.Field(None, description='(deprecated) The number of connections that were rejected because the load balancer had reached its maximum number of connections.')
    metric_request_count: typing.Optional[list[ApplicationLoadBalancerDefMetricRequestCountParams]] = pydantic.Field(None, description='(deprecated) The number of requests processed over IPv4 and IPv6.\nThis count includes only the requests with a response generated by a target of the load balancer.')
    metric_rule_evaluations: typing.Optional[list[ApplicationLoadBalancerDefMetricRuleEvaluationsParams]] = pydantic.Field(None, description='(deprecated) The number of rules processed by the load balancer given a request rate averaged over an hour.')
    metric_target_connection_error_count: typing.Optional[list[ApplicationLoadBalancerDefMetricTargetConnectionErrorCountParams]] = pydantic.Field(None, description='(deprecated) The number of connections that were not successfully established between the load balancer and target.')
    metric_target_response_time: typing.Optional[list[ApplicationLoadBalancerDefMetricTargetResponseTimeParams]] = pydantic.Field(None, description='(deprecated) The time elapsed, in seconds, after the request leaves the load balancer until a response from the target is received.')
    metric_target_tls_negotiation_error_count: typing.Optional[list[ApplicationLoadBalancerDefMetricTargetTlsNegotiationErrorCountParams]] = pydantic.Field(None, description='(deprecated) The number of TLS connections initiated by the load balancer that did not establish a session with the target.\nPossible causes include a mismatch of ciphers or protocols.')
    remove_attribute: typing.Optional[list[ApplicationLoadBalancerDefRemoveAttributeParams]] = pydantic.Field(None, description='Remove an attribute from the load balancer.')
    set_attribute: typing.Optional[list[ApplicationLoadBalancerDefSetAttributeParams]] = pydantic.Field(None, description='Set a non-standard attribute on the load balancer.')
    connections_config: typing.Optional[models.aws_ec2.ConnectionsDefConfig] = pydantic.Field(None)
    metrics_config: typing.Optional[models._interface_methods.AwsElasticloadbalancingv2IApplicationLoadBalancerMetricsDefConfig] = pydantic.Field(None)

class ApplicationLoadBalancerDefAddListenerParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description='Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. Default: - No certificates.\n')
    default_action: typing.Optional[models.aws_elasticloadbalancingv2.ListenerActionDef] = pydantic.Field(None, description='Default action to take for requests to this listener. This allows full control of the default action of the load balancer, including Action chaining, fixed responses and redirect responses. See the ``ListenerAction`` class for all options. Cannot be specified together with ``defaultTargetGroups``. Default: - None.\n')
    default_target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]]] = pydantic.Field(None, description='Default target groups to load balance to. All target groups will be load balanced to with equal weight and without stickiness. For a more complex configuration than that, use either ``defaultAction`` or ``addAction()``. Cannot be specified together with ``defaultAction``. Default: - None.\n')
    open: typing.Optional[bool] = pydantic.Field(None, description="Allow anyone to connect to the load balancer on the listener port. If this is specified, the load balancer will be opened up to anyone who can reach it. For internal load balancers this is anyone in the same VPC. For public load balancers, this is anyone on the internet. If you want to be more selective about who can access this load balancer, set this to ``false`` and use the listener's ``connections`` object to selectively grant access to the load balancer on the listener port. Default: true\n")
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the listener listens for requests. Default: - Determined from protocol if known.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol to use. Default: - Determined from port if known.\n')
    ssl_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.SslPolicy] = pydantic.Field(None, description='The security policy that defines which ciphers and protocols are supported. Default: - The current predefined security policy.')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ApplicationListenerDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefAddRedirectParams(pydantic.BaseModel):
    open: typing.Optional[bool] = pydantic.Field(None, description="Allow anyone to connect to this listener. If this is specified, the listener will be opened up to anyone who can reach it. For internal load balancers this is anyone in the same VPC. For public load balancers, this is anyone on the internet. If you want to be more selective about who can access this load balancer, set this to ``false`` and use the listener's ``connections`` object to selectively grant access to the listener. Default: true\n")
    source_port: typing.Union[int, float, None] = pydantic.Field(None, description='The port number to listen to. Default: 80\n')
    source_protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol of the listener being created. Default: HTTP\n')
    target_port: typing.Union[int, float, None] = pydantic.Field(None, description='The port number to redirect to. Default: 443\n')
    target_protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol of the redirection target. Default: HTTPS')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.ApplicationListenerDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefAddSecurityGroupParams(pydantic.BaseModel):
    security_group: typing.Union[models.aws_ec2.SecurityGroupDef] = pydantic.Field(..., description='-')
    ...

class ApplicationLoadBalancerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class ApplicationLoadBalancerDefFromApplicationLoadBalancerAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    load_balancer_arn: str = pydantic.Field(..., description='ARN of the load balancer.\n')
    security_group_id: str = pydantic.Field(..., description="ID of the load balancer's security group.\n")
    load_balancer_canonical_hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The canonical hosted zone ID of this load balancer. Default: - When not provided, LB cannot be used as Route53 Alias target.\n')
    load_balancer_dns_name: typing.Optional[str] = pydantic.Field(None, description='The DNS name of this load balancer. Default: - When not provided, LB cannot be used as Route53 Alias target.\n')
    security_group_allows_all_outbound: typing.Optional[bool] = pydantic.Field(None, description='Whether the security group allows all outbound traffic or not. Unless set to ``false``, no egress rules will be added to the security group. Default: true\n')
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The VPC this load balancer has been created in, if available. Default: - If the Load Balancer was imported and a VPC was not specified, the VPC is not available.')
    ...

class ApplicationLoadBalancerDefFromLookupParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description="Find by load balancer's ARN. Default: - does not search by load balancer arn\n")
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Match load balancer tags. Default: - does not match load balancers by tags')
    ...

class ApplicationLoadBalancerDefLogAccessLogsParams(pydantic.BaseModel):
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='-\n')
    prefix: typing.Optional[str] = pydantic.Field(None, description='-')
    ...

class ApplicationLoadBalancerDefMetricParams(pydantic.BaseModel):
    metric_name: str = pydantic.Field(..., description='-\n')
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.custom`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricActiveConnectionCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.activeConnectionCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricClientTlsNegotiationErrorCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.clientTlsNegotiationErrorCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricConsumedLcUsParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.consumedLCUs`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricElbAuthErrorParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.elbAuthError`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricElbAuthFailureParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.elbAuthFailure`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricElbAuthLatencyParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.elbAuthLatency`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricElbAuthSuccessParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.elbAuthSuccess`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricHttpCodeElbParams(pydantic.BaseModel):
    code: aws_cdk.aws_elasticloadbalancingv2.HttpCodeElb = pydantic.Field(..., description='-\n')
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.httpCodeElb`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricHttpCodeTargetParams(pydantic.BaseModel):
    code: aws_cdk.aws_elasticloadbalancingv2.HttpCodeTarget = pydantic.Field(..., description='-\n')
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.httpCodeTarget`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricHttpFixedResponseCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.httpFixedResponseCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricHttpRedirectCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.httpRedirectCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricHttpRedirectUrlLimitExceededCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.httpRedirectUrlLimitExceededCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricIpv6ProcessedBytesParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.ipv6ProcessedBytes`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricIpv6RequestCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.ipv6RequestCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricNewConnectionCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.newConnectionCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricProcessedBytesParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.processedBytes`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricRejectedConnectionCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.rejectedConnectionCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricRequestCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.requestCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricRuleEvaluationsParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.ruleEvaluations`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricTargetConnectionErrorCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.targetConnectionErrorCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricTargetResponseTimeParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.targetResponseTime`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefMetricTargetTlsNegotiationErrorCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationLoadBalancer.metrics.targetTLSNegotiationErrorCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationLoadBalancerDefRemoveAttributeParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-')
    ...

class ApplicationLoadBalancerDefSetAttributeParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Optional[str] = pydantic.Field(None, description='-\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\n')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationTargetGroup
class ApplicationTargetGroupDef(BaseConstruct):
    load_balancing_algorithm_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.TargetGroupLoadBalancingAlgorithmType] = pydantic.Field(None, description='The load balancing algorithm to select targets for routing requests. Default: TargetGroupLoadBalancingAlgorithmType.ROUND_ROBIN\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the target receives traffic. This is not applicable for Lambda targets. Default: - Determined from protocol if known\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol used for communication with the target. This is not applicable for Lambda targets. Default: - Determined from port if known\n')
    protocol_version: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocolVersion] = pydantic.Field(None, description='The protocol version to use. Default: ApplicationProtocolVersion.HTTP1\n')
    slow_start: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The time period during which the load balancer sends a newly registered target a linearly increasing share of the traffic to the target group. The range is 30-900 seconds (15 minutes). Default: 0\n')
    stickiness_cookie_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The stickiness cookie expiration period. Setting this value enables load balancer stickiness. After this period, the cookie is considered stale. The minimum value is 1 second and the maximum value is 7 days (604800 seconds). Default: Duration.days(1)\n')
    stickiness_cookie_name: typing.Optional[str] = pydantic.Field(None, description="The name of an application-based stickiness cookie. Names that start with the following prefixes are not allowed: AWSALB, AWSALBAPP, and AWSALBTG; they're reserved for use by the load balancer. Note: ``stickinessCookieName`` parameter depends on the presence of ``stickinessCookieDuration`` parameter. If ``stickinessCookieDuration`` is not set, ``stickinessCookieName`` will be omitted. Default: - If ``stickinessCookieDuration`` is set, a load-balancer generated cookie is used. Otherwise, no stickiness is defined.\n")
    targets: typing.Optional[typing.Sequence[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef, models.aws_elasticloadbalancingv2_targets.LambdaTargetDef]]] = pydantic.Field(None, description='The targets to add to this target group. Can be ``Instance``, ``IPAddress``, or any self-registering load balancing target. If you use either ``Instance`` or ``IPAddress`` as targets, all target must be of the same type. Default: - No targets.\n')
    deregistration_delay: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time for Elastic Load Balancing to wait before deregistering a target. The range is 0-3600 seconds. Default: 300\n')
    health_check: typing.Union[models.aws_elasticloadbalancingv2.HealthCheckDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Health check configuration. Default: - The default value for each property in this configuration varies depending on the target.\n')
    target_group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. Default: - Automatically generated.\n')
    target_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.TargetType] = pydantic.Field(None, description='The type of targets registered to this TargetGroup, either IP or Instance. All targets registered into the group must be of this type. If you register targets to the TargetGroup in the CDK app, the TargetType is determined automatically. Default: - Determined automatically.\n')
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The virtual private cloud (VPC). only if ``TargetType`` is ``Ip`` or ``InstanceId`` Default: - undefined')
    _init_params: typing.ClassVar[list[str]] = ['load_balancing_algorithm_type', 'port', 'protocol', 'protocol_version', 'slow_start', 'stickiness_cookie_duration', 'stickiness_cookie_name', 'targets', 'deregistration_delay', 'health_check', 'target_group_name', 'target_type', 'vpc']
    _method_names: typing.ClassVar[list[str]] = ['add_target', 'configure_health_check', 'enable_cookie_stickiness', 'metric', 'metric_healthy_host_count', 'metric_http_code_target', 'metric_ipv6_request_count', 'metric_request_count', 'metric_request_count_per_target', 'metric_target_connection_error_count', 'metric_target_response_time', 'metric_target_tls_negotiation_error_count', 'metric_unhealthy_host_count', 'register_connectable', 'register_listener', 'set_attribute']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_target_group_attributes']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationTargetGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_target_group_attributes']
    ...


    from_target_group_attributes: typing.Optional[ApplicationTargetGroupDefFromTargetGroupAttributesParams] = pydantic.Field(None, description='Import an existing target group.')
    resource_config: typing.Optional[ApplicationTargetGroupDefConfig] = pydantic.Field(None)


class ApplicationTargetGroupDefConfig(pydantic.BaseModel):
    add_target: typing.Optional[list[ApplicationTargetGroupDefAddTargetParams]] = pydantic.Field(None, description='Add a load balancing target to this target group.')
    configure_health_check: typing.Optional[list[ApplicationTargetGroupDefConfigureHealthCheckParams]] = pydantic.Field(None, description="Set/replace the target group's health check.")
    enable_cookie_stickiness: typing.Optional[list[ApplicationTargetGroupDefEnableCookieStickinessParams]] = pydantic.Field(None, description='Enable sticky routing via a cookie to members of this target group.\nNote: If the ``cookieName`` parameter is set, application-based stickiness will be applied,\notherwise it defaults to duration-based stickiness attributes (``lb_cookie``).')
    metric: typing.Optional[list[ApplicationTargetGroupDefMetricParams]] = pydantic.Field(None, description='Return the given named metric for this Application Load Balancer Target Group.\nReturns the metric for this target group from the point of view of the first\nload balancer load balancing to it. If you have multiple load balancers load\nsending traffic to the same target group, you will have to override the dimensions\non this metric.')
    metric_healthy_host_count: typing.Optional[list[ApplicationTargetGroupDefMetricHealthyHostCountParams]] = pydantic.Field(None, description='(deprecated) The number of healthy hosts in the target group.')
    metric_http_code_target: typing.Optional[list[ApplicationTargetGroupDefMetricHttpCodeTargetParams]] = pydantic.Field(None, description='(deprecated) The number of HTTP 2xx/3xx/4xx/5xx response codes generated by all targets in this target group.\nThis does not include any response codes generated by the load balancer.')
    metric_ipv6_request_count: typing.Optional[list[ApplicationTargetGroupDefMetricIpv6RequestCountParams]] = pydantic.Field(None, description='(deprecated) The number of IPv6 requests received by the target group.')
    metric_request_count: typing.Optional[list[ApplicationTargetGroupDefMetricRequestCountParams]] = pydantic.Field(None, description='(deprecated) The number of requests processed over IPv4 and IPv6.\nThis count includes only the requests with a response generated by a target of the load balancer.')
    metric_request_count_per_target: typing.Optional[list[ApplicationTargetGroupDefMetricRequestCountPerTargetParams]] = pydantic.Field(None, description='(deprecated) The average number of requests received by each target in a target group.\nThe only valid statistic is Sum. Note that this represents the average not the sum.')
    metric_target_connection_error_count: typing.Optional[list[ApplicationTargetGroupDefMetricTargetConnectionErrorCountParams]] = pydantic.Field(None, description='(deprecated) The number of connections that were not successfully established between the load balancer and target.')
    metric_target_response_time: typing.Optional[list[ApplicationTargetGroupDefMetricTargetResponseTimeParams]] = pydantic.Field(None, description='(deprecated) The time elapsed, in seconds, after the request leaves the load balancer until a response from the target is received.')
    metric_target_tls_negotiation_error_count: typing.Optional[list[ApplicationTargetGroupDefMetricTargetTlsNegotiationErrorCountParams]] = pydantic.Field(None, description='(deprecated) The number of TLS connections initiated by the load balancer that did not establish a session with the target.\nPossible causes include a mismatch of ciphers or protocols.')
    metric_unhealthy_host_count: typing.Optional[list[ApplicationTargetGroupDefMetricUnhealthyHostCountParams]] = pydantic.Field(None, description='(deprecated) The number of unhealthy hosts in the target group.')
    register_connectable: typing.Optional[list[ApplicationTargetGroupDefRegisterConnectableParams]] = pydantic.Field(None, description="Register a connectable as a member of this target group.\nDon't call this directly. It will be called by load balancing targets.")
    register_listener: typing.Optional[list[ApplicationTargetGroupDefRegisterListenerParams]] = pydantic.Field(None, description="Register a listener that is load balancing to this target group.\nDon't call this directly. It will be called by listeners.")
    set_attribute: typing.Optional[list[ApplicationTargetGroupDefSetAttributeParams]] = pydantic.Field(None, description='Set a non-standard attribute on the target group.')
    metrics_config: typing.Optional[models._interface_methods.AwsElasticloadbalancingv2IApplicationTargetGroupMetricsDefConfig] = pydantic.Field(None)

class ApplicationTargetGroupDefAddTargetParams(pydantic.BaseModel):
    targets: list[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef, models.aws_elasticloadbalancingv2_targets.LambdaTargetDef]] = pydantic.Field(...)
    ...

class ApplicationTargetGroupDefConfigureHealthCheckParams(pydantic.BaseModel):
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance or ip, health checks are always enabled and cannot be disabled. Default: - Determined automatically.\n')
    healthy_grpc_codes: typing.Optional[str] = pydantic.Field(None, description='GRPC code to use when checking for a successful response from a target. You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). Default: - 12\n')
    healthy_http_codes: typing.Optional[str] = pydantic.Field(None, description='HTTP code to use when checking for a successful response from a target. For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").\n')
    healthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks successes required before considering an unhealthy target healthy. For Application Load Balancers, the default is 5. For Network Load Balancers, the default is 3. Default: 5 for ALBs, 3 for NLBs\n')
    interval: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The approximate number of seconds between health checks for an individual target. Must be 5 to 300 seconds Default: 10 seconds if protocol is ``GENEVE``, 35 seconds if target type is ``lambda``, else 30 seconds\n')
    path: typing.Optional[str] = pydantic.Field(None, description='The ping path destination where Elastic Load Balancing sends health check requests. Default: /\n')
    port: typing.Optional[str] = pydantic.Field(None, description="The port that the load balancer uses when performing health checks on the targets. Default: 'traffic-port'\n")
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The TLS, UDP, and TCP_UDP protocols are not supported for health checks. Default: HTTP for ALBs, TCP for NLBs\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time, in seconds, during which no response from a target means a failed health check. For Application Load Balancers, the range is 2-60 seconds and the default is 5 seconds. For Network Load Balancers, this is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks. Default: Duration.seconds(5) for ALBs, Duration.seconds(10) or Duration.seconds(6) for NLBs\n')
    unhealthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health check failures required before considering a target unhealthy. For Application Load Balancers, the default is 2. For Network Load Balancers, this value must be the same as the healthy threshold count. Default: 2')
    ...

class ApplicationTargetGroupDefEnableCookieStickinessParams(pydantic.BaseModel):
    duration: models.DurationDef = pydantic.Field(..., description='-\n')
    cookie_name: typing.Optional[str] = pydantic.Field(None, description='-\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/sticky-sessions.html\n')
    ...

class ApplicationTargetGroupDefFromTargetGroupAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    target_group_arn: str = pydantic.Field(..., description='ARN of the target group.\n')
    load_balancer_arns: typing.Optional[str] = pydantic.Field(None, description='A Token representing the list of ARNs for the load balancer routing to this target group.')
    ...

class ApplicationTargetGroupDefMetricParams(pydantic.BaseModel):
    metric_name: str = pydantic.Field(..., description='-\n')
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefMetricHealthyHostCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``ApplicationTargetGroup.metrics.healthyHostCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefMetricHttpCodeTargetParams(pydantic.BaseModel):
    code: aws_cdk.aws_elasticloadbalancingv2.HttpCodeTarget = pydantic.Field(..., description='-\n')
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationTargetGroup.metrics.httpCodeTarget`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefMetricIpv6RequestCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationTargetGroup.metrics.ipv6RequestCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefMetricRequestCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationTargetGroup.metrics.requestCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefMetricRequestCountPerTargetParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationTargetGroup.metrics.ipv6RequestCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefMetricTargetConnectionErrorCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationTargetGroup.metrics.targetConnectionErrorCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefMetricTargetResponseTimeParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``ApplicationTargetGroup.metrics.targetResponseTime`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefMetricTargetTlsNegotiationErrorCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``ApplicationTargetGroup.metrics.tlsNegotiationErrorCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefMetricUnhealthyHostCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``ApplicationTargetGroup.metrics.unhealthyHostCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class ApplicationTargetGroupDefRegisterConnectableParams(pydantic.BaseModel):
    connectable: typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ec2.ConnectionsDef, models.aws_ec2.NatInstanceProviderDef, models.aws_ec2.LaunchTemplateDef, models.aws_elasticloadbalancing.ListenerPortDef, models.aws_elasticloadbalancing.LoadBalancerDef, models.aws_elasticsearch.DomainDef, models.aws_opensearchservice.DomainDef, models.aws_rds.DatabaseProxyDef, models.aws_secretsmanager.HostedRotationDef, models.aws_stepfunctions_tasks.EcsRunTaskDef, models.aws_stepfunctions_tasks.SageMakerCreateModelDef, models.aws_stepfunctions_tasks.SageMakerCreateTrainingJobDef] = pydantic.Field(..., description='-\n')
    port_range: typing.Optional[models.aws_ec2.PortDef] = pydantic.Field(None, description='-')
    ...

class ApplicationTargetGroupDefRegisterListenerParams(pydantic.BaseModel):
    listener: typing.Union[models.aws_elasticloadbalancingv2.ApplicationListenerDef] = pydantic.Field(..., description='-\n')
    associating_construct: typing.Optional[models.AnyResource] = pydantic.Field(None, description='-')
    ...

class ApplicationTargetGroupDefSetAttributeParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Optional[str] = pydantic.Field(None, description='-\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\n')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkListener
class NetworkListenerDef(BaseConstruct):
    load_balancer: typing.Union[models.aws_elasticloadbalancingv2.NetworkLoadBalancerDef] = pydantic.Field(..., description='The load balancer to attach this listener to.\n')
    port: typing.Union[int, float] = pydantic.Field(..., description='The port on which the listener listens for requests.\n')
    alpn_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.AlpnPolicy] = pydantic.Field(None, description='Application-Layer Protocol Negotiation (ALPN) is a TLS extension that is sent on the initial TLS handshake hello messages. ALPN enables the application layer to negotiate which protocols should be used over a secure connection, such as HTTP/1 and HTTP/2. Can only be specified together with Protocol TLS. Default: - None\n')
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description='Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. Default: - No certificates.\n')
    default_action: typing.Optional[models.aws_elasticloadbalancingv2.NetworkListenerActionDef] = pydantic.Field(None, description='Default action to take for requests to this listener. This allows full control of the default Action of the load balancer, including weighted forwarding. See the ``NetworkListenerAction`` class for all options. Cannot be specified together with ``defaultTargetGroups``. Default: - None.\n')
    default_target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef]]] = pydantic.Field(None, description='Default target groups to load balance to. All target groups will be load balanced to with equal weight and without stickiness. For a more complex configuration than that, use either ``defaultAction`` or ``addAction()``. Cannot be specified together with ``defaultAction``. Default: - None.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol for listener, expects TCP, TLS, UDP, or TCP_UDP. Default: - TLS if certificates are provided. TCP otherwise.\n')
    ssl_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.SslPolicy] = pydantic.Field(None, description='SSL Policy. Default: - Current predefined security policy.')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer', 'port', 'alpn_policy', 'certificates', 'default_action', 'default_target_groups', 'protocol', 'ssl_policy']
    _method_names: typing.ClassVar[list[str]] = ['add_action', 'add_certificates', 'add_target_groups', 'add_targets', 'apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_lookup', 'from_network_listener_arn']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkListener'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_lookup', 'from_network_listener_arn']
    ...


    from_lookup: typing.Optional[NetworkListenerDefFromLookupParams] = pydantic.Field(None, description='Looks up a network listener.')
    from_network_listener_arn: typing.Optional[NetworkListenerDefFromNetworkListenerArnParams] = pydantic.Field(None, description='Import an existing listener.')
    resource_config: typing.Optional[NetworkListenerDefConfig] = pydantic.Field(None)


class NetworkListenerDefConfig(pydantic.BaseModel):
    add_action: typing.Optional[list[NetworkListenerDefAddActionParams]] = pydantic.Field(None, description='Perform the given Action on incoming requests.\nThis allows full control of the default Action of the load balancer,\nincluding weighted forwarding. See the ``NetworkListenerAction`` class for\nall options.')
    add_certificates: typing.Optional[list[NetworkListenerDefAddCertificatesParams]] = pydantic.Field(None, description='Add one or more certificates to this listener.\nAfter the first certificate, this creates NetworkListenerCertificates\nresources since cloudformation requires the certificates array on the\nlistener resource to have a length of 1.')
    add_target_groups: typing.Optional[list[NetworkListenerDefAddTargetGroupsParams]] = pydantic.Field(None, description='Load balance incoming requests to the given target groups.\nAll target groups will be load balanced to with equal weight and without\nstickiness. For a more complex configuration than that, use ``addAction()``.')
    add_targets: typing.Optional[list[NetworkListenerDefAddTargetsParams]] = pydantic.Field(None, description="Load balance incoming requests to the given load balancing targets.\nThis method implicitly creates a NetworkTargetGroup for the targets\ninvolved, and a 'forward' action to route traffic to the given TargetGroup.\n\nIf you want more control over the precise setup, create the TargetGroup\nand use ``addAction`` yourself.\n\nIt's possible to add conditions to the targets added in this way. At least\none set of targets must be added without conditions.")
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    load_balancer_config: typing.Optional[models._interface_methods.AwsElasticloadbalancingv2INetworkLoadBalancerDefConfig] = pydantic.Field(None)

class NetworkListenerDefAddActionParams(pydantic.BaseModel):
    _id: str = pydantic.Field(..., description='-\n')
    action: models.aws_elasticloadbalancingv2.NetworkListenerActionDef = pydantic.Field(..., description='Action to perform.')
    ...

class NetworkListenerDefAddCertificatesParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    certificates: typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]] = pydantic.Field(..., description='-')
    ...

class NetworkListenerDefAddTargetGroupsParams(pydantic.BaseModel):
    _id: str = pydantic.Field(..., description='-\n')
    target_groups: list[typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef]] = pydantic.Field(...)
    ...

class NetworkListenerDefAddTargetsParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    port: typing.Union[int, float] = pydantic.Field(..., description='The port on which the listener listens for requests. Default: Determined from protocol if known\n')
    deregistration_delay: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time for Elastic Load Balancing to wait before deregistering a target. The range is 0-3600 seconds. Default: Duration.minutes(5)\n')
    health_check: typing.Union[models.aws_elasticloadbalancingv2.HealthCheckDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Health check configuration. Default: - The default value for each property in this configuration varies depending on the target.\n')
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether client IP preservation is enabled. Default: false if the target group type is IP address and the target group protocol is TCP or TLS. Otherwise, true.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol for target group, expects TCP, TLS, UDP, or TCP_UDP. Default: - inherits the protocol of the listener\n')
    proxy_protocol_v2: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether Proxy Protocol version 2 is enabled. Default: false\n')
    target_group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. Default: Automatically generated\n')
    targets: typing.Optional[typing.Sequence[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.AlbArnTargetDef, models.aws_elasticloadbalancingv2_targets.AlbTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef]]] = pydantic.Field(None, description='The targets to add to this target group. Can be ``Instance``, ``IPAddress``, or any self-registering load balancing target. If you use either ``Instance`` or ``IPAddress`` as targets, all target must be of the same type.\n')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.NetworkTargetGroupDefConfig]] = pydantic.Field(None)
    ...

class NetworkListenerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class NetworkListenerDefFromLookupParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    listener_protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol of the listener port. Default: - listener is not filtered by protocol\n')
    listener_port: typing.Union[int, float, None] = pydantic.Field(None, description='Filter listeners by listener port. Default: - does not filter by listener port\n')
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description='Filter listeners by associated load balancer arn. Default: - does not filter by load balancer arn\n')
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Filter listeners by associated load balancer tags. Default: - does not filter by load balancer tags')
    ...

class NetworkListenerDefFromNetworkListenerArnParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    network_listener_arn: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer
class NetworkLoadBalancerDef(BaseConstruct):
    cross_zone_enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether cross-zone load balancing is enabled. Default: false\n')
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='The VPC network to place the load balancer in.\n')
    deletion_protection: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether deletion protection is enabled. Default: false\n')
    internet_facing: typing.Optional[bool] = pydantic.Field(None, description='Whether the load balancer has an internet-routable address. Default: false\n')
    load_balancer_name: typing.Optional[str] = pydantic.Field(None, description='Name of the load balancer. Default: - Automatically generated name.\n')
    vpc_subnets: typing.Union[models.aws_ec2.SubnetSelectionDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Which subnets place the load balancer in. Default: - the Vpc default strategy.')
    _init_params: typing.ClassVar[list[str]] = ['cross_zone_enabled', 'vpc', 'deletion_protection', 'internet_facing', 'load_balancer_name', 'vpc_subnets']
    _method_names: typing.ClassVar[list[str]] = ['add_listener', 'apply_removal_policy', 'log_access_logs', 'metric', 'metric_active_flow_count', 'metric_consumed_lc_us', 'metric_new_flow_count', 'metric_processed_bytes', 'metric_tcp_client_reset_count', 'metric_tcp_elb_reset_count', 'metric_tcp_target_reset_count', 'remove_attribute', 'set_attribute']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_lookup', 'from_network_load_balancer_attributes']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_lookup', 'from_network_load_balancer_attributes']
    ...


    from_lookup: typing.Optional[NetworkLoadBalancerDefFromLookupParams] = pydantic.Field(None, description='Looks up the network load balancer.')
    from_network_load_balancer_attributes: typing.Optional[NetworkLoadBalancerDefFromNetworkLoadBalancerAttributesParams] = pydantic.Field(None, description='')
    resource_config: typing.Optional[NetworkLoadBalancerDefConfig] = pydantic.Field(None)


class NetworkLoadBalancerDefConfig(pydantic.BaseModel):
    add_listener: typing.Optional[list[NetworkLoadBalancerDefAddListenerParams]] = pydantic.Field(None, description='Add a listener to this load balancer.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    log_access_logs: typing.Optional[list[NetworkLoadBalancerDefLogAccessLogsParams]] = pydantic.Field(None, description='Enable access logging for this load balancer.\nA region must be specified on the stack containing the load balancer; you cannot enable logging on\nenvironment-agnostic stacks. See https://docs.aws.amazon.com/cdk/latest/guide/environments.html')
    metric: typing.Optional[list[NetworkLoadBalancerDefMetricParams]] = pydantic.Field(None, description='(deprecated) Return the given named metric for this Network Load Balancer.')
    metric_active_flow_count: typing.Optional[list[NetworkLoadBalancerDefMetricActiveFlowCountParams]] = pydantic.Field(None, description='(deprecated) The total number of concurrent TCP flows (or connections) from clients to targets.\nThis metric includes connections in the SYN_SENT and ESTABLISHED states.\nTCP connections are not terminated at the load balancer, so a client\nopening a TCP connection to a target counts as a single flow.')
    metric_consumed_lc_us: typing.Optional[list[NetworkLoadBalancerDefMetricConsumedLcUsParams]] = pydantic.Field(None, description='(deprecated) The number of load balancer capacity units (LCU) used by your load balancer.')
    metric_new_flow_count: typing.Optional[list[NetworkLoadBalancerDefMetricNewFlowCountParams]] = pydantic.Field(None, description='(deprecated) The total number of new TCP flows (or connections) established from clients to targets in the time period.')
    metric_processed_bytes: typing.Optional[list[NetworkLoadBalancerDefMetricProcessedBytesParams]] = pydantic.Field(None, description='(deprecated) The total number of bytes processed by the load balancer, including TCP/IP headers.')
    metric_tcp_client_reset_count: typing.Optional[list[NetworkLoadBalancerDefMetricTcpClientResetCountParams]] = pydantic.Field(None, description='(deprecated) The total number of reset (RST) packets sent from a client to a target.\nThese resets are generated by the client and forwarded by the load balancer.')
    metric_tcp_elb_reset_count: typing.Optional[list[NetworkLoadBalancerDefMetricTcpElbResetCountParams]] = pydantic.Field(None, description='(deprecated) The total number of reset (RST) packets generated by the load balancer.')
    metric_tcp_target_reset_count: typing.Optional[list[NetworkLoadBalancerDefMetricTcpTargetResetCountParams]] = pydantic.Field(None, description='(deprecated) The total number of reset (RST) packets sent from a target to a client.\nThese resets are generated by the target and forwarded by the load balancer.')
    remove_attribute: typing.Optional[list[NetworkLoadBalancerDefRemoveAttributeParams]] = pydantic.Field(None, description='Remove an attribute from the load balancer.')
    set_attribute: typing.Optional[list[NetworkLoadBalancerDefSetAttributeParams]] = pydantic.Field(None, description='Set a non-standard attribute on the load balancer.')
    metrics_config: typing.Optional[models._interface_methods.AwsElasticloadbalancingv2INetworkLoadBalancerMetricsDefConfig] = pydantic.Field(None)

class NetworkLoadBalancerDefAddListenerParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    port: typing.Union[int, float] = pydantic.Field(..., description='The port on which the listener listens for requests.\n')
    alpn_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.AlpnPolicy] = pydantic.Field(None, description='Application-Layer Protocol Negotiation (ALPN) is a TLS extension that is sent on the initial TLS handshake hello messages. ALPN enables the application layer to negotiate which protocols should be used over a secure connection, such as HTTP/1 and HTTP/2. Can only be specified together with Protocol TLS. Default: - None\n')
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description='Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. Default: - No certificates.\n')
    default_action: typing.Optional[models.aws_elasticloadbalancingv2.NetworkListenerActionDef] = pydantic.Field(None, description='Default action to take for requests to this listener. This allows full control of the default Action of the load balancer, including weighted forwarding. See the ``NetworkListenerAction`` class for all options. Cannot be specified together with ``defaultTargetGroups``. Default: - None.\n')
    default_target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef]]] = pydantic.Field(None, description='Default target groups to load balance to. All target groups will be load balanced to with equal weight and without stickiness. For a more complex configuration than that, use either ``defaultAction`` or ``addAction()``. Cannot be specified together with ``defaultAction``. Default: - None.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol for listener, expects TCP, TLS, UDP, or TCP_UDP. Default: - TLS if certificates are provided. TCP otherwise.\n')
    ssl_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.SslPolicy] = pydantic.Field(None, description='SSL Policy. Default: - Current predefined security policy.\n')
    return_config: typing.Optional[list[models.aws_elasticloadbalancingv2.NetworkListenerDefConfig]] = pydantic.Field(None)
    ...

class NetworkLoadBalancerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class NetworkLoadBalancerDefFromLookupParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description="Find by load balancer's ARN. Default: - does not search by load balancer arn\n")
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Match load balancer tags. Default: - does not match load balancers by tags')
    ...

class NetworkLoadBalancerDefFromNetworkLoadBalancerAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-')
    id: str = pydantic.Field(..., description='-\n')
    load_balancer_arn: str = pydantic.Field(..., description='ARN of the load balancer.\n')
    load_balancer_canonical_hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The canonical hosted zone ID of this load balancer. Default: - When not provided, LB cannot be used as Route53 Alias target.\n')
    load_balancer_dns_name: typing.Optional[str] = pydantic.Field(None, description='The DNS name of this load balancer. Default: - When not provided, LB cannot be used as Route53 Alias target.\n')
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The VPC to associate with the load balancer. Default: - When not provided, listeners cannot be created on imported load balancers.')
    ...

class NetworkLoadBalancerDefLogAccessLogsParams(pydantic.BaseModel):
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='-\n')
    prefix: typing.Optional[str] = pydantic.Field(None, description='-')
    ...

class NetworkLoadBalancerDefMetricParams(pydantic.BaseModel):
    metric_name: str = pydantic.Field(..., description='-\n')
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``NetworkLoadBalancer.metrics.custom`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkLoadBalancerDefMetricActiveFlowCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``NetworkLoadBalancer.metrics.activeFlowCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkLoadBalancerDefMetricConsumedLcUsParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``NetworkLoadBalancer.metrics.activeFlowCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkLoadBalancerDefMetricNewFlowCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``NetworkLoadBalancer.metrics.newFlowCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkLoadBalancerDefMetricProcessedBytesParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``NetworkLoadBalancer.metrics.processedBytes`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkLoadBalancerDefMetricTcpClientResetCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``NetworkLoadBalancer.metrics.tcpClientResetCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkLoadBalancerDefMetricTcpElbResetCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``NetworkLoadBalancer.metrics.tcpElbResetCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkLoadBalancerDefMetricTcpTargetResetCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Sum over 5 minutes\n\n:deprecated: Use ``NetworkLoadBalancer.metrics.tcpTargetResetCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkLoadBalancerDefRemoveAttributeParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-')
    ...

class NetworkLoadBalancerDefSetAttributeParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Optional[str] = pydantic.Field(None, description='-\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\n')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkTargetGroup
class NetworkTargetGroupDef(BaseConstruct):
    port: typing.Union[int, float] = pydantic.Field(..., description='The port on which the target receives traffic.\n')
    connection_termination: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether the load balancer terminates connections at the end of the deregistration timeout. Default: false\n')
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether client IP preservation is enabled. Default: false if the target group type is IP address and the target group protocol is TCP or TLS. Otherwise, true.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol for target group, expects TCP, TLS, UDP, or TCP_UDP. Default: - TCP\n')
    proxy_protocol_v2: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether Proxy Protocol version 2 is enabled. Default: false\n')
    targets: typing.Optional[typing.Sequence[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.AlbArnTargetDef, models.aws_elasticloadbalancingv2_targets.AlbTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef]]] = pydantic.Field(None, description='The targets to add to this target group. Can be ``Instance``, ``IPAddress``, or any self-registering load balancing target. If you use either ``Instance`` or ``IPAddress`` as targets, all target must be of the same type. Default: - No targets.\n')
    deregistration_delay: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time for Elastic Load Balancing to wait before deregistering a target. The range is 0-3600 seconds. Default: 300\n')
    health_check: typing.Union[models.aws_elasticloadbalancingv2.HealthCheckDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Health check configuration. Default: - The default value for each property in this configuration varies depending on the target.\n')
    target_group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. Default: - Automatically generated.\n')
    target_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.TargetType] = pydantic.Field(None, description='The type of targets registered to this TargetGroup, either IP or Instance. All targets registered into the group must be of this type. If you register targets to the TargetGroup in the CDK app, the TargetType is determined automatically. Default: - Determined automatically.\n')
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The virtual private cloud (VPC). only if ``TargetType`` is ``Ip`` or ``InstanceId`` Default: - undefined')
    _init_params: typing.ClassVar[list[str]] = ['port', 'connection_termination', 'preserve_client_ip', 'protocol', 'proxy_protocol_v2', 'targets', 'deregistration_delay', 'health_check', 'target_group_name', 'target_type', 'vpc']
    _method_names: typing.ClassVar[list[str]] = ['add_target', 'configure_health_check', 'metric_healthy_host_count', 'metric_un_healthy_host_count', 'register_listener', 'set_attribute']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_target_group_attributes']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkTargetGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_target_group_attributes']
    ...


    from_target_group_attributes: typing.Optional[NetworkTargetGroupDefFromTargetGroupAttributesParams] = pydantic.Field(None, description='Import an existing target group.')
    resource_config: typing.Optional[NetworkTargetGroupDefConfig] = pydantic.Field(None)


class NetworkTargetGroupDefConfig(pydantic.BaseModel):
    add_target: typing.Optional[list[NetworkTargetGroupDefAddTargetParams]] = pydantic.Field(None, description='Add a load balancing target to this target group.')
    configure_health_check: typing.Optional[list[NetworkTargetGroupDefConfigureHealthCheckParams]] = pydantic.Field(None, description="Set/replace the target group's health check.")
    metric_healthy_host_count: typing.Optional[list[NetworkTargetGroupDefMetricHealthyHostCountParams]] = pydantic.Field(None, description='(deprecated) The number of targets that are considered healthy.')
    metric_un_healthy_host_count: typing.Optional[list[NetworkTargetGroupDefMetricUnHealthyHostCountParams]] = pydantic.Field(None, description='(deprecated) The number of targets that are considered unhealthy.')
    register_listener: typing.Optional[list[NetworkTargetGroupDefRegisterListenerParams]] = pydantic.Field(None, description="Register a listener that is load balancing to this target group.\nDon't call this directly. It will be called by listeners.")
    set_attribute: typing.Optional[list[NetworkTargetGroupDefSetAttributeParams]] = pydantic.Field(None, description='Set a non-standard attribute on the target group.')
    metrics_config: typing.Optional[models._interface_methods.AwsElasticloadbalancingv2INetworkTargetGroupMetricsDefConfig] = pydantic.Field(None)

class NetworkTargetGroupDefAddTargetParams(pydantic.BaseModel):
    targets: list[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.AlbArnTargetDef, models.aws_elasticloadbalancingv2_targets.AlbTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef]] = pydantic.Field(...)
    ...

class NetworkTargetGroupDefConfigureHealthCheckParams(pydantic.BaseModel):
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance or ip, health checks are always enabled and cannot be disabled. Default: - Determined automatically.\n')
    healthy_grpc_codes: typing.Optional[str] = pydantic.Field(None, description='GRPC code to use when checking for a successful response from a target. You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). Default: - 12\n')
    healthy_http_codes: typing.Optional[str] = pydantic.Field(None, description='HTTP code to use when checking for a successful response from a target. For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").\n')
    healthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks successes required before considering an unhealthy target healthy. For Application Load Balancers, the default is 5. For Network Load Balancers, the default is 3. Default: 5 for ALBs, 3 for NLBs\n')
    interval: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The approximate number of seconds between health checks for an individual target. Must be 5 to 300 seconds Default: 10 seconds if protocol is ``GENEVE``, 35 seconds if target type is ``lambda``, else 30 seconds\n')
    path: typing.Optional[str] = pydantic.Field(None, description='The ping path destination where Elastic Load Balancing sends health check requests. Default: /\n')
    port: typing.Optional[str] = pydantic.Field(None, description="The port that the load balancer uses when performing health checks on the targets. Default: 'traffic-port'\n")
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The TLS, UDP, and TCP_UDP protocols are not supported for health checks. Default: HTTP for ALBs, TCP for NLBs\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time, in seconds, during which no response from a target means a failed health check. For Application Load Balancers, the range is 2-60 seconds and the default is 5 seconds. For Network Load Balancers, this is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks. Default: Duration.seconds(5) for ALBs, Duration.seconds(10) or Duration.seconds(6) for NLBs\n')
    unhealthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health check failures required before considering a target unhealthy. For Application Load Balancers, the default is 2. For Network Load Balancers, this value must be the same as the healthy threshold count. Default: 2')
    ...

class NetworkTargetGroupDefFromTargetGroupAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    target_group_arn: str = pydantic.Field(..., description='ARN of the target group.\n')
    load_balancer_arns: typing.Optional[str] = pydantic.Field(None, description='A Token representing the list of ARNs for the load balancer routing to this target group.')
    ...

class NetworkTargetGroupDefMetricHealthyHostCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``NetworkTargetGroup.metrics.healthyHostCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkTargetGroupDefMetricUnHealthyHostCountParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: Average over 5 minutes\n\n:deprecated: Use ``NetworkTargetGroup.metrics.healthyHostCount`` instead\n\n:stability: deprecated\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class NetworkTargetGroupDefRegisterListenerParams(pydantic.BaseModel):
    listener: typing.Union[models.aws_elasticloadbalancingv2.NetworkListenerDef] = pydantic.Field(..., description='-')
    ...

class NetworkTargetGroupDefSetAttributeParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Optional[str] = pydantic.Field(None, description='-\n\n:see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\n')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.AddApplicationActionProps
class AddApplicationActionPropsDef(BaseStruct):
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='Priority of this target group. The rule with the lowest priority will be used for every request. If priority is not given, these target groups will be added as defaults, and must not have conditions. Priorities must be unique. Default: Target groups are used as defaults\n')
    action: models.aws_elasticloadbalancingv2.ListenerActionDef = pydantic.Field(..., description='Action to perform.\n\n:exampleMetadata: infused\n\nExample::\n\n    # listener: elbv2.ApplicationListener\n\n\n    listener.add_action("Fixed",\n        priority=10,\n        conditions=[\n            elbv2.ListenerCondition.path_patterns(["/ok"])\n        ],\n        action=elbv2.ListenerAction.fixed_response(200,\n            content_type="text/plain",\n            message_body="OK"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['conditions', 'priority', 'action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.AddApplicationActionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[AddApplicationActionPropsDefConfig] = pydantic.Field(None)


class AddApplicationActionPropsDefConfig(pydantic.BaseModel):
    action_config: typing.Optional[models.aws_elasticloadbalancingv2.ListenerActionDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.AddApplicationTargetGroupsProps
class AddApplicationTargetGroupsPropsDef(BaseStruct):
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='Priority of this target group. The rule with the lowest priority will be used for every request. If priority is not given, these target groups will be added as defaults, and must not have conditions. Priorities must be unique. Default: Target groups are used as defaults\n')
    target_groups: typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]] = pydantic.Field(..., description='Target groups to forward requests to.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # application_target_group: elbv2.ApplicationTargetGroup\n    # listener_condition: elbv2.ListenerCondition\n\n    add_application_target_groups_props = elbv2.AddApplicationTargetGroupsProps(\n        target_groups=[application_target_group],\n\n        # the properties below are optional\n        conditions=[listener_condition],\n        priority=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['conditions', 'priority', 'target_groups']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.AddApplicationTargetGroupsProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.AddApplicationTargetsProps
class AddApplicationTargetsPropsDef(BaseStruct):
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='Priority of this target group. The rule with the lowest priority will be used for every request. If priority is not given, these target groups will be added as defaults, and must not have conditions. Priorities must be unique. Default: Target groups are used as defaults\n')
    deregistration_delay: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time for Elastic Load Balancing to wait before deregistering a target. The range is 0-3600 seconds. Default: Duration.minutes(5)\n')
    health_check: typing.Union[models.aws_elasticloadbalancingv2.HealthCheckDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Health check configuration. Default: - The default value for each property in this configuration varies depending on the target.\n')
    load_balancing_algorithm_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.TargetGroupLoadBalancingAlgorithmType] = pydantic.Field(None, description='The load balancing algorithm to select targets for routing requests. Default: round_robin.\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the listener listens for requests. Default: Determined from protocol if known\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol to use. Default: Determined from port if known\n')
    protocol_version: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocolVersion] = pydantic.Field(None, description='The protocol version to use. Default: ApplicationProtocolVersion.HTTP1\n')
    slow_start: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The time period during which the load balancer sends a newly registered target a linearly increasing share of the traffic to the target group. The range is 30-900 seconds (15 minutes). Default: 0\n')
    stickiness_cookie_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The stickiness cookie expiration period. Setting this value enables load balancer stickiness. After this period, the cookie is considered stale. The minimum value is 1 second and the maximum value is 7 days (604800 seconds). Default: Stickiness disabled\n')
    stickiness_cookie_name: typing.Optional[str] = pydantic.Field(None, description="The name of an application-based stickiness cookie. Names that start with the following prefixes are not allowed: AWSALB, AWSALBAPP, and AWSALBTG; they're reserved for use by the load balancer. Note: ``stickinessCookieName`` parameter depends on the presence of ``stickinessCookieDuration`` parameter. If ``stickinessCookieDuration`` is not set, ``stickinessCookieName`` will be omitted. Default: - If ``stickinessCookieDuration`` is set, a load-balancer generated cookie is used. Otherwise, no stickiness is defined.\n")
    target_group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. Default: Automatically generated\n')
    targets: typing.Optional[typing.Sequence[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef, models.aws_elasticloadbalancingv2_targets.LambdaTargetDef]]] = pydantic.Field(None, description='The targets to add to this target group. Can be ``Instance``, ``IPAddress``, or any self-registering load balancing target. All target must be of the same type.\n\n:exampleMetadata: infused\n\nExample::\n\n    from aws_cdk.aws_autoscaling import AutoScalingGroup\n    # asg: AutoScalingGroup\n    # vpc: ec2.Vpc\n\n\n    # Create the load balancer in a VPC. \'internetFacing\' is \'false\'\n    # by default, which creates an internal load balancer.\n    lb = elbv2.ApplicationLoadBalancer(self, "LB",\n        vpc=vpc,\n        internet_facing=True\n    )\n\n    # Add a listener and open up the load balancer\'s security group\n    # to the world.\n    listener = lb.add_listener("Listener",\n        port=80,\n\n        # \'open: true\' is the default, you can leave it out if you want. Set it\n        # to \'false\' and use `listener.connections` if you want to be selective\n        # about who can access the load balancer.\n        open=True\n    )\n\n    # Create an AutoScaling group and add it as a load balancing\n    # target to the listener.\n    listener.add_targets("ApplicationFleet",\n        port=8080,\n        targets=[asg]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['conditions', 'priority', 'deregistration_delay', 'health_check', 'load_balancing_algorithm_type', 'port', 'protocol', 'protocol_version', 'slow_start', 'stickiness_cookie_duration', 'stickiness_cookie_name', 'target_group_name', 'targets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.AddApplicationTargetsProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.AddNetworkActionProps
class AddNetworkActionPropsDef(BaseStruct):
    action: models.aws_elasticloadbalancingv2.NetworkListenerActionDef = pydantic.Field(..., description='Action to perform.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # network_listener_action: elbv2.NetworkListenerAction\n\n    add_network_action_props = elbv2.AddNetworkActionProps(\n        action=network_listener_action\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.AddNetworkActionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.AddNetworkTargetsProps
class AddNetworkTargetsPropsDef(BaseStruct):
    port: typing.Union[int, float] = pydantic.Field(..., description='The port on which the listener listens for requests. Default: Determined from protocol if known\n')
    deregistration_delay: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time for Elastic Load Balancing to wait before deregistering a target. The range is 0-3600 seconds. Default: Duration.minutes(5)\n')
    health_check: typing.Union[models.aws_elasticloadbalancingv2.HealthCheckDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Health check configuration. Default: - The default value for each property in this configuration varies depending on the target.\n')
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether client IP preservation is enabled. Default: false if the target group type is IP address and the target group protocol is TCP or TLS. Otherwise, true.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol for target group, expects TCP, TLS, UDP, or TCP_UDP. Default: - inherits the protocol of the listener\n')
    proxy_protocol_v2: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether Proxy Protocol version 2 is enabled. Default: false\n')
    target_group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. Default: Automatically generated\n')
    targets: typing.Optional[typing.Sequence[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.AlbArnTargetDef, models.aws_elasticloadbalancingv2_targets.AlbTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef]]] = pydantic.Field(None, description='The targets to add to this target group. Can be ``Instance``, ``IPAddress``, or any self-registering load balancing target. If you use either ``Instance`` or ``IPAddress`` as targets, all target must be of the same type.\n\n:exampleMetadata: infused\n\nExample::\n\n    from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpNlbIntegration\n\n\n    vpc = ec2.Vpc(self, "VPC")\n    lb = elbv2.NetworkLoadBalancer(self, "lb", vpc=vpc)\n    listener = lb.add_listener("listener", port=80)\n    listener.add_targets("target",\n        port=80\n    )\n\n    http_endpoint = apigwv2.HttpApi(self, "HttpProxyPrivateApi",\n        default_integration=HttpNlbIntegration("DefaultIntegration", listener)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['port', 'deregistration_delay', 'health_check', 'preserve_client_ip', 'protocol', 'proxy_protocol_v2', 'target_group_name', 'targets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.AddNetworkTargetsProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.AddRuleProps
class AddRulePropsDef(BaseStruct):
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='Priority of this target group. The rule with the lowest priority will be used for every request. If priority is not given, these target groups will be added as defaults, and must not have conditions. Priorities must be unique. Default: Target groups are used as defaults\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # listener_condition: elbv2.ListenerCondition\n\n    add_rule_props = elbv2.AddRuleProps(\n        conditions=[listener_condition],\n        priority=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['conditions', 'priority']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.AddRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerAttributes
class ApplicationListenerAttributesDef(BaseStruct):
    listener_arn: str = pydantic.Field(..., description='ARN of the listener.\n')
    security_group: typing.Union[models.aws_ec2.SecurityGroupDef] = pydantic.Field(..., description='Security group of the load balancer this listener is associated with.\n')
    default_port: typing.Union[int, float, None] = pydantic.Field(None, description='The default port on which this listener is listening.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ec2 as ec2\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # security_group: ec2.SecurityGroup\n\n    application_listener_attributes = elbv2.ApplicationListenerAttributes(\n        listener_arn="listenerArn",\n        security_group=security_group,\n\n        # the properties below are optional\n        default_port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['listener_arn', 'security_group', 'default_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ApplicationListenerAttributesDefConfig] = pydantic.Field(None)


class ApplicationListenerAttributesDefConfig(pydantic.BaseModel):
    security_group_config: typing.Optional[models._interface_methods.AwsEc2ISecurityGroupDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerCertificateProps
class ApplicationListenerCertificatePropsDef(BaseStruct):
    listener: typing.Union[models.aws_elasticloadbalancingv2.ApplicationListenerDef] = pydantic.Field(..., description='The listener to attach the rule to.\n')
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description="Certificates to attach. Duplicates are not allowed. Default: - One of 'certificates' and 'certificateArns' is required.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # application_listener: elbv2.ApplicationListener\n    # listener_certificate: elbv2.ListenerCertificate\n\n    application_listener_certificate_props = elbv2.ApplicationListenerCertificateProps(\n        listener=application_listener,\n\n        # the properties below are optional\n        certificates=[listener_certificate]\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['listener', 'certificates']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerCertificateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerLookupOptions
class ApplicationListenerLookupOptionsDef(BaseStruct):
    listener_port: typing.Union[int, float, None] = pydantic.Field(None, description='Filter listeners by listener port. Default: - does not filter by listener port\n')
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description='Filter listeners by associated load balancer arn. Default: - does not filter by load balancer arn\n')
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Filter listeners by associated load balancer tags. Default: - does not filter by load balancer tags\n')
    listener_arn: typing.Optional[str] = pydantic.Field(None, description='ARN of the listener to look up. Default: - does not filter by listener arn\n')
    listener_protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='Filter listeners by listener protocol. Default: - does not filter by listener protocol\n\n:exampleMetadata: infused\n\nExample::\n\n    listener = elbv2.ApplicationListener.from_lookup(self, "ALBListener",\n        load_balancer_arn="arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456",\n        listener_protocol=elbv2.ApplicationProtocol.HTTPS,\n        listener_port=443\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['listener_port', 'load_balancer_arn', 'load_balancer_tags', 'listener_arn', 'listener_protocol']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerLookupOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerProps
class ApplicationListenerPropsDef(BaseStruct):
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description='Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. Default: - No certificates.\n')
    default_action: typing.Optional[models.aws_elasticloadbalancingv2.ListenerActionDef] = pydantic.Field(None, description='Default action to take for requests to this listener. This allows full control of the default action of the load balancer, including Action chaining, fixed responses and redirect responses. See the ``ListenerAction`` class for all options. Cannot be specified together with ``defaultTargetGroups``. Default: - None.\n')
    default_target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]]] = pydantic.Field(None, description='Default target groups to load balance to. All target groups will be load balanced to with equal weight and without stickiness. For a more complex configuration than that, use either ``defaultAction`` or ``addAction()``. Cannot be specified together with ``defaultAction``. Default: - None.\n')
    open: typing.Optional[bool] = pydantic.Field(None, description="Allow anyone to connect to the load balancer on the listener port. If this is specified, the load balancer will be opened up to anyone who can reach it. For internal load balancers this is anyone in the same VPC. For public load balancers, this is anyone on the internet. If you want to be more selective about who can access this load balancer, set this to ``false`` and use the listener's ``connections`` object to selectively grant access to the load balancer on the listener port. Default: true\n")
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the listener listens for requests. Default: - Determined from protocol if known.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol to use. Default: - Determined from port if known.\n')
    ssl_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.SslPolicy] = pydantic.Field(None, description='The security policy that defines which ciphers and protocols are supported. Default: - The current predefined security policy.\n')
    load_balancer: typing.Union[models.aws_elasticloadbalancingv2.ApplicationLoadBalancerDef] = pydantic.Field(..., description='The load balancer to attach this listener to.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # application_load_balancer: elbv2.ApplicationLoadBalancer\n    # application_target_group: elbv2.ApplicationTargetGroup\n    # listener_action: elbv2.ListenerAction\n    # listener_certificate: elbv2.ListenerCertificate\n\n    application_listener_props = elbv2.ApplicationListenerProps(\n        load_balancer=application_load_balancer,\n\n        # the properties below are optional\n        certificates=[listener_certificate],\n        default_action=listener_action,\n        default_target_groups=[application_target_group],\n        open=False,\n        port=123,\n        protocol=elbv2.ApplicationProtocol.HTTP,\n        ssl_policy=elbv2.SslPolicy.RECOMMENDED_TLS\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificates', 'default_action', 'default_target_groups', 'open', 'port', 'protocol', 'ssl_policy', 'load_balancer']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerRuleProps
class ApplicationListenerRulePropsDef(BaseStruct):
    priority: typing.Union[int, float] = pydantic.Field(..., description='Priority of the rule. The rule with the lowest priority will be used for every request. Priorities must be unique.\n')
    action: typing.Optional[models.aws_elasticloadbalancingv2.ListenerActionDef] = pydantic.Field(None, description='Action to perform when requests are received. Only one of ``action``, ``fixedResponse``, ``redirectResponse`` or ``targetGroups`` can be specified. Default: - No action\n')
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]]] = pydantic.Field(None, description='Target groups to forward requests to. Only one of ``action``, ``fixedResponse``, ``redirectResponse`` or ``targetGroups`` can be specified. Implies a ``forward`` action. Default: - No target groups.\n')
    listener: typing.Union[models.aws_elasticloadbalancingv2.ApplicationListenerDef] = pydantic.Field(..., description='The listener to attach the rule to.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # application_listener: elbv2.ApplicationListener\n    # application_target_group: elbv2.ApplicationTargetGroup\n    # listener_action: elbv2.ListenerAction\n    # listener_condition: elbv2.ListenerCondition\n\n    application_listener_rule_props = elbv2.ApplicationListenerRuleProps(\n        listener=application_listener,\n        priority=123,\n\n        # the properties below are optional\n        action=listener_action,\n        conditions=[listener_condition],\n        target_groups=[application_target_group]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['priority', 'action', 'conditions', 'target_groups', 'listener']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationListenerRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancerAttributes
class ApplicationLoadBalancerAttributesDef(BaseStruct):
    load_balancer_arn: str = pydantic.Field(..., description='ARN of the load balancer.\n')
    security_group_id: str = pydantic.Field(..., description="ID of the load balancer's security group.\n")
    load_balancer_canonical_hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The canonical hosted zone ID of this load balancer. Default: - When not provided, LB cannot be used as Route53 Alias target.\n')
    load_balancer_dns_name: typing.Optional[str] = pydantic.Field(None, description='The DNS name of this load balancer. Default: - When not provided, LB cannot be used as Route53 Alias target.\n')
    security_group_allows_all_outbound: typing.Optional[bool] = pydantic.Field(None, description='Whether the security group allows all outbound traffic or not. Unless set to ``false``, no egress rules will be added to the security group. Default: true\n')
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The VPC this load balancer has been created in, if available. Default: - If the Load Balancer was imported and a VPC was not specified, the VPC is not available.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ec2 as ec2\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # vpc: ec2.Vpc\n\n    application_load_balancer_attributes = elbv2.ApplicationLoadBalancerAttributes(\n        load_balancer_arn="loadBalancerArn",\n        security_group_id="securityGroupId",\n\n        # the properties below are optional\n        load_balancer_canonical_hosted_zone_id="loadBalancerCanonicalHostedZoneId",\n        load_balancer_dns_name="loadBalancerDnsName",\n        security_group_allows_all_outbound=False,\n        vpc=vpc\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer_arn', 'security_group_id', 'load_balancer_canonical_hosted_zone_id', 'load_balancer_dns_name', 'security_group_allows_all_outbound', 'vpc']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancerAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancerLookupOptions
class ApplicationLoadBalancerLookupOptionsDef(BaseStruct):
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description="Find by load balancer's ARN. Default: - does not search by load balancer arn\n")
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Match load balancer tags. Default: - does not match load balancers by tags\n\n:exampleMetadata: infused\n\nExample::\n\n    load_balancer = elbv2.ApplicationLoadBalancer.from_lookup(self, "ALB",\n        load_balancer_arn="arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer_arn', 'load_balancer_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancerLookupOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancerProps
class ApplicationLoadBalancerPropsDef(BaseStruct):
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='The VPC network to place the load balancer in.\n')
    deletion_protection: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether deletion protection is enabled. Default: false\n')
    internet_facing: typing.Optional[bool] = pydantic.Field(None, description='Whether the load balancer has an internet-routable address. Default: false\n')
    load_balancer_name: typing.Optional[str] = pydantic.Field(None, description='Name of the load balancer. Default: - Automatically generated name.\n')
    vpc_subnets: typing.Union[models.aws_ec2.SubnetSelectionDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Which subnets place the load balancer in. Default: - the Vpc default strategy.\n')
    desync_mitigation_mode: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.DesyncMitigationMode] = pydantic.Field(None, description='Determines how the load balancer handles requests that might pose a security risk to your application. Default: DesyncMitigationMode.DEFENSIVE\n')
    drop_invalid_header_fields: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether HTTP headers with invalid header fields are removed by the load balancer (true) or routed to targets (false). Default: false\n')
    http2_enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether HTTP/2 is enabled. Default: true\n')
    idle_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The load balancer idle timeout, in seconds. Default: 60\n')
    ip_address_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.IpAddressType] = pydantic.Field(None, description='The type of IP addresses to use. Only applies to application load balancers. Default: IpAddressType.Ipv4\n')
    security_group: typing.Optional[typing.Union[models.aws_ec2.SecurityGroupDef]] = pydantic.Field(None, description='Security group to associate with this load balancer. Default: A security group is created\n\n:exampleMetadata: infused\n\nExample::\n\n    # cluster: ecs.Cluster\n    # task_definition: ecs.TaskDefinition\n    # vpc: ec2.Vpc\n\n    service = ecs.FargateService(self, "Service", cluster=cluster, task_definition=task_definition)\n\n    lb = elbv2.ApplicationLoadBalancer(self, "LB", vpc=vpc, internet_facing=True)\n    listener = lb.add_listener("Listener", port=80)\n    service.register_load_balancer_targets(\n        container_name="web",\n        container_port=80,\n        new_target_group_id="ECS",\n        listener=ecs.ListenerConfig.application_listener(listener,\n            protocol=elbv2.ApplicationProtocol.HTTPS\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['vpc', 'deletion_protection', 'internet_facing', 'load_balancer_name', 'vpc_subnets', 'desync_mitigation_mode', 'drop_invalid_header_fields', 'http2_enabled', 'idle_timeout', 'ip_address_type', 'security_group']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ApplicationLoadBalancerPropsDefConfig] = pydantic.Field(None)


class ApplicationLoadBalancerPropsDefConfig(pydantic.BaseModel):
    vpc_config: typing.Optional[models._interface_methods.AwsEc2IVpcDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancerRedirectConfig
class ApplicationLoadBalancerRedirectConfigDef(BaseStruct):
    open: typing.Optional[bool] = pydantic.Field(None, description="Allow anyone to connect to this listener. If this is specified, the listener will be opened up to anyone who can reach it. For internal load balancers this is anyone in the same VPC. For public load balancers, this is anyone on the internet. If you want to be more selective about who can access this load balancer, set this to ``false`` and use the listener's ``connections`` object to selectively grant access to the listener. Default: true\n")
    source_port: typing.Union[int, float, None] = pydantic.Field(None, description='The port number to listen to. Default: 80\n')
    source_protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol of the listener being created. Default: HTTP\n')
    target_port: typing.Union[int, float, None] = pydantic.Field(None, description='The port number to redirect to. Default: 443\n')
    target_protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol of the redirection target. Default: HTTPS\n\n:exampleMetadata: infused\n\nExample::\n\n    # lb: elbv2.ApplicationLoadBalancer\n\n\n    lb.add_redirect(\n        source_protocol=elbv2.ApplicationProtocol.HTTPS,\n        source_port=8443,\n        target_protocol=elbv2.ApplicationProtocol.HTTP,\n        target_port=8080\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['open', 'source_port', 'source_protocol', 'target_port', 'target_protocol']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancerRedirectConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationTargetGroupProps
class ApplicationTargetGroupPropsDef(BaseStruct):
    deregistration_delay: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time for Elastic Load Balancing to wait before deregistering a target. The range is 0-3600 seconds. Default: 300\n')
    health_check: typing.Union[models.aws_elasticloadbalancingv2.HealthCheckDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Health check configuration. Default: - The default value for each property in this configuration varies depending on the target.\n')
    target_group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. Default: - Automatically generated.\n')
    target_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.TargetType] = pydantic.Field(None, description='The type of targets registered to this TargetGroup, either IP or Instance. All targets registered into the group must be of this type. If you register targets to the TargetGroup in the CDK app, the TargetType is determined automatically. Default: - Determined automatically.\n')
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The virtual private cloud (VPC). only if ``TargetType`` is ``Ip`` or ``InstanceId`` Default: - undefined\n')
    load_balancing_algorithm_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.TargetGroupLoadBalancingAlgorithmType] = pydantic.Field(None, description='The load balancing algorithm to select targets for routing requests. Default: TargetGroupLoadBalancingAlgorithmType.ROUND_ROBIN\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the target receives traffic. This is not applicable for Lambda targets. Default: - Determined from protocol if known\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol used for communication with the target. This is not applicable for Lambda targets. Default: - Determined from port if known\n')
    protocol_version: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocolVersion] = pydantic.Field(None, description='The protocol version to use. Default: ApplicationProtocolVersion.HTTP1\n')
    slow_start: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The time period during which the load balancer sends a newly registered target a linearly increasing share of the traffic to the target group. The range is 30-900 seconds (15 minutes). Default: 0\n')
    stickiness_cookie_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The stickiness cookie expiration period. Setting this value enables load balancer stickiness. After this period, the cookie is considered stale. The minimum value is 1 second and the maximum value is 7 days (604800 seconds). Default: Duration.days(1)\n')
    stickiness_cookie_name: typing.Optional[str] = pydantic.Field(None, description="The name of an application-based stickiness cookie. Names that start with the following prefixes are not allowed: AWSALB, AWSALBAPP, and AWSALBTG; they're reserved for use by the load balancer. Note: ``stickinessCookieName`` parameter depends on the presence of ``stickinessCookieDuration`` parameter. If ``stickinessCookieDuration`` is not set, ``stickinessCookieName`` will be omitted. Default: - If ``stickinessCookieDuration`` is set, a load-balancer generated cookie is used. Otherwise, no stickiness is defined.\n")
    targets: typing.Optional[typing.Sequence[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef, models.aws_elasticloadbalancingv2_targets.LambdaTargetDef]]] = pydantic.Field(None, description='The targets to add to this target group. Can be ``Instance``, ``IPAddress``, or any self-registering load balancing target. If you use either ``Instance`` or ``IPAddress`` as targets, all target must be of the same type. Default: - No targets.\n\n:exampleMetadata: infused\n\nExample::\n\n    # vpc: ec2.Vpc\n\n\n    # Target group with duration-based stickiness with load-balancer generated cookie\n    tg1 = elbv2.ApplicationTargetGroup(self, "TG1",\n        target_type=elbv2.TargetType.INSTANCE,\n        port=80,\n        stickiness_cookie_duration=Duration.minutes(5),\n        vpc=vpc\n    )\n\n    # Target group with application-based stickiness\n    tg2 = elbv2.ApplicationTargetGroup(self, "TG2",\n        target_type=elbv2.TargetType.INSTANCE,\n        port=80,\n        stickiness_cookie_duration=Duration.minutes(5),\n        stickiness_cookie_name="MyDeliciousCookie",\n        vpc=vpc\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['deregistration_delay', 'health_check', 'target_group_name', 'target_type', 'vpc', 'load_balancing_algorithm_type', 'port', 'protocol', 'protocol_version', 'slow_start', 'stickiness_cookie_duration', 'stickiness_cookie_name', 'targets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ApplicationTargetGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.AuthenticateOidcOptions
class AuthenticateOidcOptionsDef(BaseStruct):
    authorization_endpoint: str = pydantic.Field(..., description='The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    client_id: str = pydantic.Field(..., description='The OAuth 2.0 client identifier.\n')
    client_secret: models.SecretValueDef = pydantic.Field(..., description='The OAuth 2.0 client secret.\n')
    issuer: str = pydantic.Field(..., description='The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    next: models.aws_elasticloadbalancingv2.ListenerActionDef = pydantic.Field(..., description='What action to execute next.\n')
    token_endpoint: str = pydantic.Field(..., description='The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    user_info_endpoint: str = pydantic.Field(..., description='The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    allow_https_outbound: typing.Optional[bool] = pydantic.Field(None, description="Allow HTTPS outbound traffic to communicate with the IdP. Set this property to false if the IP address used for the IdP endpoint is identifiable and you want to control outbound traffic. Then allow HTTPS outbound traffic to the IdP's IP address using the listener's ``connections`` property. Default: true\n")
    authentication_request_extra_params: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='The query parameters (up to 10) to include in the redirect request to the authorization endpoint. Default: - No extra parameters\n')
    on_unauthenticated_request: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.UnauthenticatedAction] = pydantic.Field(None, description='The behavior if the user is not authenticated. Default: UnauthenticatedAction.AUTHENTICATE\n')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='The name of the cookie used to maintain session information. Default: "AWSELBAuthSessionCookie"\n')
    session_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum duration of the authentication session. Default: Duration.days(7)\n\n:exampleMetadata: infused\n\nExample::\n\n    # listener: elbv2.ApplicationListener\n    # my_target_group: elbv2.ApplicationTargetGroup\n\n\n    listener.add_action("DefaultAction",\n        action=elbv2.ListenerAction.authenticate_oidc(\n            authorization_endpoint="https://example.com/openid",\n            # Other OIDC properties here\n            client_id="...",\n            client_secret=SecretValue.secrets_manager("..."),\n            issuer="...",\n            token_endpoint="...",\n            user_info_endpoint="...",\n\n            # Next\n            next=elbv2.ListenerAction.forward([my_target_group])\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['authorization_endpoint', 'client_id', 'client_secret', 'issuer', 'next', 'token_endpoint', 'user_info_endpoint', 'allow_https_outbound', 'authentication_request_extra_params', 'on_unauthenticated_request', 'session_cookie_name', 'session_timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.AuthenticateOidcOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[AuthenticateOidcOptionsDefConfig] = pydantic.Field(None)


class AuthenticateOidcOptionsDefConfig(pydantic.BaseModel):
    client_secret_config: typing.Optional[models.core.SecretValueDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.BaseApplicationListenerProps
class BaseApplicationListenerPropsDef(BaseStruct):
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description='Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. Default: - No certificates.\n')
    default_action: typing.Optional[models.aws_elasticloadbalancingv2.ListenerActionDef] = pydantic.Field(None, description='Default action to take for requests to this listener. This allows full control of the default action of the load balancer, including Action chaining, fixed responses and redirect responses. See the ``ListenerAction`` class for all options. Cannot be specified together with ``defaultTargetGroups``. Default: - None.\n')
    default_target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]]] = pydantic.Field(None, description='Default target groups to load balance to. All target groups will be load balanced to with equal weight and without stickiness. For a more complex configuration than that, use either ``defaultAction`` or ``addAction()``. Cannot be specified together with ``defaultAction``. Default: - None.\n')
    open: typing.Optional[bool] = pydantic.Field(None, description="Allow anyone to connect to the load balancer on the listener port. If this is specified, the load balancer will be opened up to anyone who can reach it. For internal load balancers this is anyone in the same VPC. For public load balancers, this is anyone on the internet. If you want to be more selective about who can access this load balancer, set this to ``false`` and use the listener's ``connections`` object to selectively grant access to the load balancer on the listener port. Default: true\n")
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the listener listens for requests. Default: - Determined from protocol if known.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol] = pydantic.Field(None, description='The protocol to use. Default: - Determined from port if known.\n')
    ssl_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.SslPolicy] = pydantic.Field(None, description='The security policy that defines which ciphers and protocols are supported. Default: - The current predefined security policy.\n\n:exampleMetadata: infused\n\nExample::\n\n    # cluster: ecs.Cluster\n    # task_definition: ecs.TaskDefinition\n    # vpc: ec2.Vpc\n\n    service = ecs.FargateService(self, "Service", cluster=cluster, task_definition=task_definition)\n\n    lb = elbv2.ApplicationLoadBalancer(self, "LB", vpc=vpc, internet_facing=True)\n    listener = lb.add_listener("Listener", port=80)\n    service.register_load_balancer_targets(\n        container_name="web",\n        container_port=80,\n        new_target_group_id="ECS",\n        listener=ecs.ListenerConfig.application_listener(listener,\n            protocol=elbv2.ApplicationProtocol.HTTPS\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificates', 'default_action', 'default_target_groups', 'open', 'port', 'protocol', 'ssl_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.BaseApplicationListenerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.BaseApplicationListenerRuleProps
class BaseApplicationListenerRulePropsDef(BaseStruct):
    priority: typing.Union[int, float] = pydantic.Field(..., description='Priority of the rule. The rule with the lowest priority will be used for every request. Priorities must be unique.\n')
    action: typing.Optional[models.aws_elasticloadbalancingv2.ListenerActionDef] = pydantic.Field(None, description='Action to perform when requests are received. Only one of ``action``, ``fixedResponse``, ``redirectResponse`` or ``targetGroups`` can be specified. Default: - No action\n')
    conditions: typing.Optional[typing.Sequence[models.aws_elasticloadbalancingv2.ListenerConditionDef]] = pydantic.Field(None, description='Rule applies if matches the conditions. Default: - No conditions.\n')
    target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef]]] = pydantic.Field(None, description='Target groups to forward requests to. Only one of ``action``, ``fixedResponse``, ``redirectResponse`` or ``targetGroups`` can be specified. Implies a ``forward`` action. Default: - No target groups.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # application_target_group: elbv2.ApplicationTargetGroup\n    # listener_action: elbv2.ListenerAction\n    # listener_condition: elbv2.ListenerCondition\n\n    base_application_listener_rule_props = elbv2.BaseApplicationListenerRuleProps(\n        priority=123,\n\n        # the properties below are optional\n        action=listener_action,\n        conditions=[listener_condition],\n        target_groups=[application_target_group]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['priority', 'action', 'conditions', 'target_groups']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.BaseApplicationListenerRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.BaseListenerLookupOptions
class BaseListenerLookupOptionsDef(BaseStruct):
    listener_port: typing.Union[int, float, None] = pydantic.Field(None, description='Filter listeners by listener port. Default: - does not filter by listener port\n')
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description='Filter listeners by associated load balancer arn. Default: - does not filter by load balancer arn\n')
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Filter listeners by associated load balancer tags. Default: - does not filter by load balancer tags\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    base_listener_lookup_options = elbv2.BaseListenerLookupOptions(\n        listener_port=123,\n        load_balancer_arn="loadBalancerArn",\n        load_balancer_tags={\n            "load_balancer_tags_key": "loadBalancerTags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['listener_port', 'load_balancer_arn', 'load_balancer_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.BaseListenerLookupOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.BaseLoadBalancerLookupOptions
class BaseLoadBalancerLookupOptionsDef(BaseStruct):
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description="Find by load balancer's ARN. Default: - does not search by load balancer arn\n")
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Match load balancer tags. Default: - does not match load balancers by tags\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    base_load_balancer_lookup_options = elbv2.BaseLoadBalancerLookupOptions(\n        load_balancer_arn="loadBalancerArn",\n        load_balancer_tags={\n            "load_balancer_tags_key": "loadBalancerTags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer_arn', 'load_balancer_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.BaseLoadBalancerLookupOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.BaseLoadBalancerProps
class BaseLoadBalancerPropsDef(BaseStruct):
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='The VPC network to place the load balancer in.\n')
    deletion_protection: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether deletion protection is enabled. Default: false\n')
    internet_facing: typing.Optional[bool] = pydantic.Field(None, description='Whether the load balancer has an internet-routable address. Default: false\n')
    load_balancer_name: typing.Optional[str] = pydantic.Field(None, description='Name of the load balancer. Default: - Automatically generated name.\n')
    vpc_subnets: typing.Union[models.aws_ec2.SubnetSelectionDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Which subnets place the load balancer in. Default: - the Vpc default strategy.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ec2 as ec2\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # subnet: ec2.Subnet\n    # subnet_filter: ec2.SubnetFilter\n    # vpc: ec2.Vpc\n\n    base_load_balancer_props = elbv2.BaseLoadBalancerProps(\n        vpc=vpc,\n\n        # the properties below are optional\n        deletion_protection=False,\n        internet_facing=False,\n        load_balancer_name="loadBalancerName",\n        vpc_subnets=ec2.SubnetSelection(\n            availability_zones=["availabilityZones"],\n            one_per_az=False,\n            subnet_filters=[subnet_filter],\n            subnet_group_name="subnetGroupName",\n            subnets=[subnet],\n            subnet_type=ec2.SubnetType.PRIVATE_ISOLATED\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['vpc', 'deletion_protection', 'internet_facing', 'load_balancer_name', 'vpc_subnets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.BaseLoadBalancerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[BaseLoadBalancerPropsDefConfig] = pydantic.Field(None)


class BaseLoadBalancerPropsDefConfig(pydantic.BaseModel):
    vpc_config: typing.Optional[models._interface_methods.AwsEc2IVpcDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.BaseNetworkListenerProps
class BaseNetworkListenerPropsDef(BaseStruct):
    port: typing.Union[int, float] = pydantic.Field(..., description='The port on which the listener listens for requests.\n')
    alpn_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.AlpnPolicy] = pydantic.Field(None, description='Application-Layer Protocol Negotiation (ALPN) is a TLS extension that is sent on the initial TLS handshake hello messages. ALPN enables the application layer to negotiate which protocols should be used over a secure connection, such as HTTP/1 and HTTP/2. Can only be specified together with Protocol TLS. Default: - None\n')
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description='Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. Default: - No certificates.\n')
    default_action: typing.Optional[models.aws_elasticloadbalancingv2.NetworkListenerActionDef] = pydantic.Field(None, description='Default action to take for requests to this listener. This allows full control of the default Action of the load balancer, including weighted forwarding. See the ``NetworkListenerAction`` class for all options. Cannot be specified together with ``defaultTargetGroups``. Default: - None.\n')
    default_target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef]]] = pydantic.Field(None, description='Default target groups to load balance to. All target groups will be load balanced to with equal weight and without stickiness. For a more complex configuration than that, use either ``defaultAction`` or ``addAction()``. Cannot be specified together with ``defaultAction``. Default: - None.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol for listener, expects TCP, TLS, UDP, or TCP_UDP. Default: - TLS if certificates are provided. TCP otherwise.\n')
    ssl_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.SslPolicy] = pydantic.Field(None, description='SSL Policy. Default: - Current predefined security policy.\n\n:exampleMetadata: infused\n\nExample::\n\n    from aws_cdk.aws_apigatewayv2_integrations_alpha import HttpNlbIntegration\n\n\n    vpc = ec2.Vpc(self, "VPC")\n    lb = elbv2.NetworkLoadBalancer(self, "lb", vpc=vpc)\n    listener = lb.add_listener("listener", port=80)\n    listener.add_targets("target",\n        port=80\n    )\n\n    http_endpoint = apigwv2.HttpApi(self, "HttpProxyPrivateApi",\n        default_integration=HttpNlbIntegration("DefaultIntegration", listener)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['port', 'alpn_policy', 'certificates', 'default_action', 'default_target_groups', 'protocol', 'ssl_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.BaseNetworkListenerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.BaseTargetGroupProps
class BaseTargetGroupPropsDef(BaseStruct):
    deregistration_delay: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time for Elastic Load Balancing to wait before deregistering a target. The range is 0-3600 seconds. Default: 300\n')
    health_check: typing.Union[models.aws_elasticloadbalancingv2.HealthCheckDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Health check configuration. Default: - The default value for each property in this configuration varies depending on the target.\n')
    target_group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. Default: - Automatically generated.\n')
    target_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.TargetType] = pydantic.Field(None, description='The type of targets registered to this TargetGroup, either IP or Instance. All targets registered into the group must be of this type. If you register targets to the TargetGroup in the CDK app, the TargetType is determined automatically. Default: - Determined automatically.\n')
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The virtual private cloud (VPC). only if ``TargetType`` is ``Ip`` or ``InstanceId`` Default: - undefined\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_ec2 as ec2\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # vpc: ec2.Vpc\n\n    base_target_group_props = elbv2.BaseTargetGroupProps(\n        deregistration_delay=cdk.Duration.minutes(30),\n        health_check=elbv2.HealthCheck(\n            enabled=False,\n            healthy_grpc_codes="healthyGrpcCodes",\n            healthy_http_codes="healthyHttpCodes",\n            healthy_threshold_count=123,\n            interval=cdk.Duration.minutes(30),\n            path="path",\n            port="port",\n            protocol=elbv2.Protocol.HTTP,\n            timeout=cdk.Duration.minutes(30),\n            unhealthy_threshold_count=123\n        ),\n        target_group_name="targetGroupName",\n        target_type=elbv2.TargetType.INSTANCE,\n        vpc=vpc\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['deregistration_delay', 'health_check', 'target_group_name', 'target_type', 'vpc']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.BaseTargetGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener.ActionProperty
class CfnListener_ActionPropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='The type of action.\n')
    authenticate_cognito_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_AuthenticateCognitoConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when ``Type`` is ``authenticate-cognito`` .\n')
    authenticate_oidc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_AuthenticateOidcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when ``Type`` is ``authenticate-oidc`` .\n')
    fixed_response_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_FixedResponseConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when ``Type`` is ``fixed-response`` .\n')
    forward_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_ForwardConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward`` . If you specify both ``ForwardConfig`` and ``TargetGroupArn`` , you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn`` .\n')
    order: typing.Union[int, float, None] = pydantic.Field(None, description='The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.\n')
    redirect_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_RedirectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[Application Load Balancer] Information for creating a redirect action. Specify only when ``Type`` is ``redirect`` .\n')
    target_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the target group. Specify only when ``Type`` is ``forward`` and you want to route to a single target group. To route to one or more target groups, use ``ForwardConfig`` instead.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-action.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    action_property = elbv2.CfnListener.ActionProperty(\n        type="type",\n\n        # the properties below are optional\n        authenticate_cognito_config=elbv2.CfnListener.AuthenticateCognitoConfigProperty(\n            user_pool_arn="userPoolArn",\n            user_pool_client_id="userPoolClientId",\n            user_pool_domain="userPoolDomain",\n\n            # the properties below are optional\n            authentication_request_extra_params={\n                "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n            },\n            on_unauthenticated_request="onUnauthenticatedRequest",\n            scope="scope",\n            session_cookie_name="sessionCookieName",\n            session_timeout="sessionTimeout"\n        ),\n        authenticate_oidc_config=elbv2.CfnListener.AuthenticateOidcConfigProperty(\n            authorization_endpoint="authorizationEndpoint",\n            client_id="clientId",\n            issuer="issuer",\n            token_endpoint="tokenEndpoint",\n            user_info_endpoint="userInfoEndpoint",\n\n            # the properties below are optional\n            authentication_request_extra_params={\n                "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n            },\n            client_secret="clientSecret",\n            on_unauthenticated_request="onUnauthenticatedRequest",\n            scope="scope",\n            session_cookie_name="sessionCookieName",\n            session_timeout="sessionTimeout",\n            use_existing_client_secret=False\n        ),\n        fixed_response_config=elbv2.CfnListener.FixedResponseConfigProperty(\n            status_code="statusCode",\n\n            # the properties below are optional\n            content_type="contentType",\n            message_body="messageBody"\n        ),\n        forward_config=elbv2.CfnListener.ForwardConfigProperty(\n            target_groups=[elbv2.CfnListener.TargetGroupTupleProperty(\n                target_group_arn="targetGroupArn",\n                weight=123\n            )],\n            target_group_stickiness_config=elbv2.CfnListener.TargetGroupStickinessConfigProperty(\n                duration_seconds=123,\n                enabled=False\n            )\n        ),\n        order=123,\n        redirect_config=elbv2.CfnListener.RedirectConfigProperty(\n            status_code="statusCode",\n\n            # the properties below are optional\n            host="host",\n            path="path",\n            port="port",\n            protocol="protocol",\n            query="query"\n        ),\n        target_group_arn="targetGroupArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'authenticate_cognito_config', 'authenticate_oidc_config', 'fixed_response_config', 'forward_config', 'order', 'redirect_config', 'target_group_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener.ActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener.AuthenticateCognitoConfigProperty
class CfnListener_AuthenticateCognitoConfigPropertyDef(BaseStruct):
    user_pool_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Cognito user pool.\n')
    user_pool_client_id: str = pydantic.Field(..., description='The ID of the Amazon Cognito user pool client.\n')
    user_pool_domain: str = pydantic.Field(..., description='The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.\n')
    authentication_request_extra_params: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The query parameters (up to 10) to include in the redirect request to the authorization endpoint.\n')
    on_unauthenticated_request: typing.Optional[str] = pydantic.Field(None, description='The behavior if the user is not authenticated. The following are possible values:. - deny `` - Return an HTTP 401 Unauthorized error. - allow `` - Allow the request to be forwarded to the target. - authenticate `` - Redirect the request to the IdP authorization endpoint. This is the default value.\n')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.\n')
    session_timeout: typing.Optional[str] = pydantic.Field(None, description='The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-authenticatecognitoconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    authenticate_cognito_config_property = elbv2.CfnListener.AuthenticateCognitoConfigProperty(\n        user_pool_arn="userPoolArn",\n        user_pool_client_id="userPoolClientId",\n        user_pool_domain="userPoolDomain",\n\n        # the properties below are optional\n        authentication_request_extra_params={\n            "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n        },\n        on_unauthenticated_request="onUnauthenticatedRequest",\n        scope="scope",\n        session_cookie_name="sessionCookieName",\n        session_timeout="sessionTimeout"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool_arn', 'user_pool_client_id', 'user_pool_domain', 'authentication_request_extra_params', 'on_unauthenticated_request', 'session_cookie_name', 'session_timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener.AuthenticateCognitoConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener.AuthenticateOidcConfigProperty
class CfnListener_AuthenticateOidcConfigPropertyDef(BaseStruct):
    authorization_endpoint: str = pydantic.Field(..., description='The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    client_id: str = pydantic.Field(..., description='The OAuth 2.0 client identifier.\n')
    issuer: str = pydantic.Field(..., description='The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    token_endpoint: str = pydantic.Field(..., description='The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    user_info_endpoint: str = pydantic.Field(..., description='The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    authentication_request_extra_params: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The query parameters (up to 10) to include in the redirect request to the authorization endpoint.\n')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set ``UseExistingClientSecret`` to true.\n')
    on_unauthenticated_request: typing.Optional[str] = pydantic.Field(None, description='The behavior if the user is not authenticated. The following are possible values:. - deny `` - Return an HTTP 401 Unauthorized error. - allow `` - Allow the request to be forwarded to the target. - authenticate `` - Redirect the request to the IdP authorization endpoint. This is the default value.\n')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.\n')
    session_timeout: typing.Optional[str] = pydantic.Field(None, description='The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).\n')
    use_existing_client_secret: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-authenticateoidcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    authenticate_oidc_config_property = elbv2.CfnListener.AuthenticateOidcConfigProperty(\n        authorization_endpoint="authorizationEndpoint",\n        client_id="clientId",\n        issuer="issuer",\n        token_endpoint="tokenEndpoint",\n        user_info_endpoint="userInfoEndpoint",\n\n        # the properties below are optional\n        authentication_request_extra_params={\n            "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n        },\n        client_secret="clientSecret",\n        on_unauthenticated_request="onUnauthenticatedRequest",\n        scope="scope",\n        session_cookie_name="sessionCookieName",\n        session_timeout="sessionTimeout",\n        use_existing_client_secret=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['authorization_endpoint', 'client_id', 'issuer', 'token_endpoint', 'user_info_endpoint', 'authentication_request_extra_params', 'client_secret', 'on_unauthenticated_request', 'session_cookie_name', 'session_timeout', 'use_existing_client_secret']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener.AuthenticateOidcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener.CertificateProperty
class CfnListener_CertificatePropertyDef(BaseStruct):
    certificate_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the certificate.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-certificate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    certificate_property = elbv2.CfnListener.CertificateProperty(\n        certificate_arn="certificateArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener.CertificateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener.FixedResponseConfigProperty
class CfnListener_FixedResponseConfigPropertyDef(BaseStruct):
    status_code: str = pydantic.Field(..., description='The HTTP response code (2XX, 4XX, or 5XX).\n')
    content_type: typing.Optional[str] = pydantic.Field(None, description='The content type. Valid Values: text/plain | text/css | text/html | application/javascript | application/json\n')
    message_body: typing.Optional[str] = pydantic.Field(None, description='The message.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-fixedresponseconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    fixed_response_config_property = elbv2.CfnListener.FixedResponseConfigProperty(\n        status_code="statusCode",\n\n        # the properties below are optional\n        content_type="contentType",\n        message_body="messageBody"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['status_code', 'content_type', 'message_body']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener.FixedResponseConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener.ForwardConfigProperty
class CfnListener_ForwardConfigPropertyDef(BaseStruct):
    target_groups: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_TargetGroupTuplePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about how traffic will be distributed between multiple target groups in a forward rule.\n')
    target_group_stickiness_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_TargetGroupStickinessConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the target group stickiness for a rule.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-forwardconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    forward_config_property = elbv2.CfnListener.ForwardConfigProperty(\n        target_groups=[elbv2.CfnListener.TargetGroupTupleProperty(\n            target_group_arn="targetGroupArn",\n            weight=123\n        )],\n        target_group_stickiness_config=elbv2.CfnListener.TargetGroupStickinessConfigProperty(\n            duration_seconds=123,\n            enabled=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_groups', 'target_group_stickiness_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener.ForwardConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener.RedirectConfigProperty
class CfnListener_RedirectConfigPropertyDef(BaseStruct):
    status_code: str = pydantic.Field(..., description='The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).\n')
    host: typing.Optional[str] = pydantic.Field(None, description='The hostname. This component is not percent-encoded. The hostname can contain #{host}.\n')
    path: typing.Optional[str] = pydantic.Field(None, description='The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.\n')
    port: typing.Optional[str] = pydantic.Field(None, description='The port. You can specify a value from 1 to 65535 or #{port}.\n')
    protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.\n')
    query: typing.Optional[str] = pydantic.Field(None, description='The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-redirectconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    redirect_config_property = elbv2.CfnListener.RedirectConfigProperty(\n        status_code="statusCode",\n\n        # the properties below are optional\n        host="host",\n        path="path",\n        port="port",\n        protocol="protocol",\n        query="query"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['status_code', 'host', 'path', 'port', 'protocol', 'query']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener.RedirectConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener.TargetGroupStickinessConfigProperty
class CfnListener_TargetGroupStickinessConfigPropertyDef(BaseStruct):
    duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).\n')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether target group stickiness is enabled.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-targetgroupstickinessconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    target_group_stickiness_config_property = elbv2.CfnListener.TargetGroupStickinessConfigProperty(\n        duration_seconds=123,\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['duration_seconds', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener.TargetGroupStickinessConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener.TargetGroupTupleProperty
class CfnListener_TargetGroupTuplePropertyDef(BaseStruct):
    target_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the target group.\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='The weight. The range is 0 to 999.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-targetgrouptuple.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    target_group_tuple_property = elbv2.CfnListener.TargetGroupTupleProperty(\n        target_group_arn="targetGroupArn",\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_group_arn', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener.TargetGroupTupleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerCertificate.CertificateProperty
class CfnListenerCertificate_CertificatePropertyDef(BaseStruct):
    certificate_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the certificate.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-certificates.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    certificate_property = elbv2.CfnListenerCertificate.CertificateProperty(\n        certificate_arn="certificateArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerCertificate.CertificateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.ActionProperty
class CfnListenerRule_ActionPropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='The type of action.\n')
    authenticate_cognito_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_AuthenticateCognitoConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when ``Type`` is ``authenticate-cognito`` .\n')
    authenticate_oidc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_AuthenticateOidcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when ``Type`` is ``authenticate-oidc`` .\n')
    fixed_response_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_FixedResponseConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when ``Type`` is ``fixed-response`` .\n')
    forward_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_ForwardConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward`` . If you specify both ``ForwardConfig`` and ``TargetGroupArn`` , you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn`` .\n')
    order: typing.Union[int, float, None] = pydantic.Field(None, description='The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.\n')
    redirect_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_RedirectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[Application Load Balancer] Information for creating a redirect action. Specify only when ``Type`` is ``redirect`` .\n')
    target_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the target group. Specify only when ``Type`` is ``forward`` and you want to route to a single target group. To route to one or more target groups, use ``ForwardConfig`` instead.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-action.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    action_property = elbv2.CfnListenerRule.ActionProperty(\n        type="type",\n\n        # the properties below are optional\n        authenticate_cognito_config=elbv2.CfnListenerRule.AuthenticateCognitoConfigProperty(\n            user_pool_arn="userPoolArn",\n            user_pool_client_id="userPoolClientId",\n            user_pool_domain="userPoolDomain",\n\n            # the properties below are optional\n            authentication_request_extra_params={\n                "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n            },\n            on_unauthenticated_request="onUnauthenticatedRequest",\n            scope="scope",\n            session_cookie_name="sessionCookieName",\n            session_timeout=123\n        ),\n        authenticate_oidc_config=elbv2.CfnListenerRule.AuthenticateOidcConfigProperty(\n            authorization_endpoint="authorizationEndpoint",\n            client_id="clientId",\n            issuer="issuer",\n            token_endpoint="tokenEndpoint",\n            user_info_endpoint="userInfoEndpoint",\n\n            # the properties below are optional\n            authentication_request_extra_params={\n                "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n            },\n            client_secret="clientSecret",\n            on_unauthenticated_request="onUnauthenticatedRequest",\n            scope="scope",\n            session_cookie_name="sessionCookieName",\n            session_timeout=123,\n            use_existing_client_secret=False\n        ),\n        fixed_response_config=elbv2.CfnListenerRule.FixedResponseConfigProperty(\n            status_code="statusCode",\n\n            # the properties below are optional\n            content_type="contentType",\n            message_body="messageBody"\n        ),\n        forward_config=elbv2.CfnListenerRule.ForwardConfigProperty(\n            target_groups=[elbv2.CfnListenerRule.TargetGroupTupleProperty(\n                target_group_arn="targetGroupArn",\n                weight=123\n            )],\n            target_group_stickiness_config=elbv2.CfnListenerRule.TargetGroupStickinessConfigProperty(\n                duration_seconds=123,\n                enabled=False\n            )\n        ),\n        order=123,\n        redirect_config=elbv2.CfnListenerRule.RedirectConfigProperty(\n            status_code="statusCode",\n\n            # the properties below are optional\n            host="host",\n            path="path",\n            port="port",\n            protocol="protocol",\n            query="query"\n        ),\n        target_group_arn="targetGroupArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'authenticate_cognito_config', 'authenticate_oidc_config', 'fixed_response_config', 'forward_config', 'order', 'redirect_config', 'target_group_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.ActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.AuthenticateCognitoConfigProperty
class CfnListenerRule_AuthenticateCognitoConfigPropertyDef(BaseStruct):
    user_pool_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Cognito user pool.\n')
    user_pool_client_id: str = pydantic.Field(..., description='The ID of the Amazon Cognito user pool client.\n')
    user_pool_domain: str = pydantic.Field(..., description='The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.\n')
    authentication_request_extra_params: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The query parameters (up to 10) to include in the redirect request to the authorization endpoint.\n')
    on_unauthenticated_request: typing.Optional[str] = pydantic.Field(None, description='The behavior if the user is not authenticated. The following are possible values:. - deny `` - Return an HTTP 401 Unauthorized error. - allow `` - Allow the request to be forwarded to the target. - authenticate `` - Redirect the request to the IdP authorization endpoint. This is the default value.\n')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.\n')
    session_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-authenticatecognitoconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    authenticate_cognito_config_property = elbv2.CfnListenerRule.AuthenticateCognitoConfigProperty(\n        user_pool_arn="userPoolArn",\n        user_pool_client_id="userPoolClientId",\n        user_pool_domain="userPoolDomain",\n\n        # the properties below are optional\n        authentication_request_extra_params={\n            "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n        },\n        on_unauthenticated_request="onUnauthenticatedRequest",\n        scope="scope",\n        session_cookie_name="sessionCookieName",\n        session_timeout=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool_arn', 'user_pool_client_id', 'user_pool_domain', 'authentication_request_extra_params', 'on_unauthenticated_request', 'session_cookie_name', 'session_timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.AuthenticateCognitoConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.AuthenticateOidcConfigProperty
class CfnListenerRule_AuthenticateOidcConfigPropertyDef(BaseStruct):
    authorization_endpoint: str = pydantic.Field(..., description='The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    client_id: str = pydantic.Field(..., description='The OAuth 2.0 client identifier.\n')
    issuer: str = pydantic.Field(..., description='The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    token_endpoint: str = pydantic.Field(..., description='The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    user_info_endpoint: str = pydantic.Field(..., description='The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.\n')
    authentication_request_extra_params: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The query parameters (up to 10) to include in the redirect request to the authorization endpoint.\n')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set ``UseExistingClientSecret`` to true.\n')
    on_unauthenticated_request: typing.Optional[str] = pydantic.Field(None, description='The behavior if the user is not authenticated. The following are possible values:. - deny `` - Return an HTTP 401 Unauthorized error. - allow `` - Allow the request to be forwarded to the target. - authenticate `` - Redirect the request to the IdP authorization endpoint. This is the default value.\n')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.\n')
    session_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).\n')
    use_existing_client_secret: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-authenticateoidcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    authenticate_oidc_config_property = elbv2.CfnListenerRule.AuthenticateOidcConfigProperty(\n        authorization_endpoint="authorizationEndpoint",\n        client_id="clientId",\n        issuer="issuer",\n        token_endpoint="tokenEndpoint",\n        user_info_endpoint="userInfoEndpoint",\n\n        # the properties below are optional\n        authentication_request_extra_params={\n            "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n        },\n        client_secret="clientSecret",\n        on_unauthenticated_request="onUnauthenticatedRequest",\n        scope="scope",\n        session_cookie_name="sessionCookieName",\n        session_timeout=123,\n        use_existing_client_secret=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['authorization_endpoint', 'client_id', 'issuer', 'token_endpoint', 'user_info_endpoint', 'authentication_request_extra_params', 'client_secret', 'on_unauthenticated_request', 'session_cookie_name', 'session_timeout', 'use_existing_client_secret']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.AuthenticateOidcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.FixedResponseConfigProperty
class CfnListenerRule_FixedResponseConfigPropertyDef(BaseStruct):
    status_code: str = pydantic.Field(..., description='The HTTP response code (2XX, 4XX, or 5XX).\n')
    content_type: typing.Optional[str] = pydantic.Field(None, description='The content type. Valid Values: text/plain | text/css | text/html | application/javascript | application/json\n')
    message_body: typing.Optional[str] = pydantic.Field(None, description='The message.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-fixedresponseconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    fixed_response_config_property = elbv2.CfnListenerRule.FixedResponseConfigProperty(\n        status_code="statusCode",\n\n        # the properties below are optional\n        content_type="contentType",\n        message_body="messageBody"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['status_code', 'content_type', 'message_body']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.FixedResponseConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.ForwardConfigProperty
class CfnListenerRule_ForwardConfigPropertyDef(BaseStruct):
    target_groups: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_TargetGroupTuplePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about how traffic will be distributed between multiple target groups in a forward rule.\n')
    target_group_stickiness_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_TargetGroupStickinessConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the target group stickiness for a rule.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-forwardconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    forward_config_property = elbv2.CfnListenerRule.ForwardConfigProperty(\n        target_groups=[elbv2.CfnListenerRule.TargetGroupTupleProperty(\n            target_group_arn="targetGroupArn",\n            weight=123\n        )],\n        target_group_stickiness_config=elbv2.CfnListenerRule.TargetGroupStickinessConfigProperty(\n            duration_seconds=123,\n            enabled=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_groups', 'target_group_stickiness_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.ForwardConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.HostHeaderConfigProperty
class CfnListenerRule_HostHeaderConfigPropertyDef(BaseStruct):
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The host names. The maximum size of each name is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If you specify multiple strings, the condition is satisfied if one of the strings matches the host name.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-hostheaderconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    host_header_config_property = elbv2.CfnListenerRule.HostHeaderConfigProperty(\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.HostHeaderConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.HttpHeaderConfigProperty
class CfnListenerRule_HttpHeaderConfigPropertyDef(BaseStruct):
    http_header_name: typing.Optional[str] = pydantic.Field(None, description='The name of the HTTP header field. The maximum size is 40 characters. The header name is case insensitive. The allowed characters are specified by RFC 7230. Wildcards are not supported.\n')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The strings to compare against the value of the HTTP header. The maximum size of each string is 128 characters. The comparison strings are case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request, we search them in order until a match is found. If you specify multiple strings, the condition is satisfied if one of the strings matches the value of the HTTP header. To require that all of the strings are a match, create one condition per string.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-httpheaderconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    http_header_config_property = elbv2.CfnListenerRule.HttpHeaderConfigProperty(\n        http_header_name="httpHeaderName",\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['http_header_name', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.HttpHeaderConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.HttpRequestMethodConfigProperty
class CfnListenerRule_HttpRequestMethodConfigPropertyDef(BaseStruct):
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The name of the request method. The maximum size is 40 characters. The allowed characters are A-Z, hyphen (-), and underscore (_). The comparison is case sensitive. Wildcards are not supported; therefore, the method name must be an exact match. If you specify multiple strings, the condition is satisfied if one of the strings matches the HTTP request method. We recommend that you route GET and HEAD requests in the same way, because the response to a HEAD request may be cached.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-httprequestmethodconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    http_request_method_config_property = elbv2.CfnListenerRule.HttpRequestMethodConfigProperty(\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.HttpRequestMethodConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.PathPatternConfigProperty
class CfnListenerRule_PathPatternConfigPropertyDef(BaseStruct):
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The path patterns to compare against the request URL. The maximum size of each string is 128 characters. The comparison is case sensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If you specify multiple strings, the condition is satisfied if one of them matches the request URL. The path pattern is compared only to the path of the URL, not to its query string.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-pathpatternconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    path_pattern_config_property = elbv2.CfnListenerRule.PathPatternConfigProperty(\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.PathPatternConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.QueryStringConfigProperty
class CfnListenerRule_QueryStringConfigPropertyDef(BaseStruct):
    values: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_QueryStringKeyValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The key/value pairs or values to find in the query string. The maximum size of each string is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). To search for a literal \'*\' or \'?\' character in a query string, you must escape these characters in ``Values`` using a \'\' character. If you specify multiple key/value pairs or values, the condition is satisfied if one of them is found in the query string.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-querystringconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    query_string_config_property = elbv2.CfnListenerRule.QueryStringConfigProperty(\n        values=[elbv2.CfnListenerRule.QueryStringKeyValueProperty(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.QueryStringConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.QueryStringKeyValueProperty
class CfnListenerRule_QueryStringKeyValuePropertyDef(BaseStruct):
    key: typing.Optional[str] = pydantic.Field(None, description='The key. You can omit the key.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-querystringkeyvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    query_string_key_value_property = elbv2.CfnListenerRule.QueryStringKeyValueProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.QueryStringKeyValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.RedirectConfigProperty
class CfnListenerRule_RedirectConfigPropertyDef(BaseStruct):
    status_code: str = pydantic.Field(..., description='The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).\n')
    host: typing.Optional[str] = pydantic.Field(None, description='The hostname. This component is not percent-encoded. The hostname can contain #{host}.\n')
    path: typing.Optional[str] = pydantic.Field(None, description='The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.\n')
    port: typing.Optional[str] = pydantic.Field(None, description='The port. You can specify a value from 1 to 65535 or #{port}.\n')
    protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.\n')
    query: typing.Optional[str] = pydantic.Field(None, description='The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-redirectconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    redirect_config_property = elbv2.CfnListenerRule.RedirectConfigProperty(\n        status_code="statusCode",\n\n        # the properties below are optional\n        host="host",\n        path="path",\n        port="port",\n        protocol="protocol",\n        query="query"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['status_code', 'host', 'path', 'port', 'protocol', 'query']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.RedirectConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.RuleConditionProperty
class CfnListenerRule_RuleConditionPropertyDef(BaseStruct):
    field: typing.Optional[str] = pydantic.Field(None, description='The field in the HTTP request. The following are the possible values:. - ``http-header`` - ``http-request-method`` - ``host-header`` - ``path-pattern`` - ``query-string`` - ``source-ip``\n')
    host_header_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_HostHeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information for a host header condition. Specify only when ``Field`` is ``host-header`` .\n')
    http_header_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_HttpHeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information for an HTTP header condition. Specify only when ``Field`` is ``http-header`` .\n')
    http_request_method_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_HttpRequestMethodConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information for an HTTP method condition. Specify only when ``Field`` is ``http-request-method`` .\n')
    path_pattern_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_PathPatternConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information for a path pattern condition. Specify only when ``Field`` is ``path-pattern`` .\n')
    query_string_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_QueryStringConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information for a query string condition. Specify only when ``Field`` is ``query-string`` .\n')
    source_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_SourceIpConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information for a source IP condition. Specify only when ``Field`` is ``source-ip`` .\n')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The condition value. Specify only when ``Field`` is ``host-header`` or ``path-pattern`` . Alternatively, to specify multiple host names or multiple path patterns, use ``HostHeaderConfig`` or ``PathPatternConfig`` . If ``Field`` is ``host-header`` and you\'re not using ``HostHeaderConfig`` , you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. - A-Z, a-z, 0-9 - - . - - (matches 0 or more characters) - ? (matches exactly 1 character) If ``Field`` is ``path-pattern`` and you\'re not using ``PathPatternConfig`` , you can specify a single path pattern (for example, /img/*). A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters. - A-Z, a-z, 0-9 - _ - . $ / ~ " \' @ : + - & (using &) - - (matches 0 or more characters) - ? (matches exactly 1 character)\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-rulecondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    rule_condition_property = elbv2.CfnListenerRule.RuleConditionProperty(\n        field="field",\n        host_header_config=elbv2.CfnListenerRule.HostHeaderConfigProperty(\n            values=["values"]\n        ),\n        http_header_config=elbv2.CfnListenerRule.HttpHeaderConfigProperty(\n            http_header_name="httpHeaderName",\n            values=["values"]\n        ),\n        http_request_method_config=elbv2.CfnListenerRule.HttpRequestMethodConfigProperty(\n            values=["values"]\n        ),\n        path_pattern_config=elbv2.CfnListenerRule.PathPatternConfigProperty(\n            values=["values"]\n        ),\n        query_string_config=elbv2.CfnListenerRule.QueryStringConfigProperty(\n            values=[elbv2.CfnListenerRule.QueryStringKeyValueProperty(\n                key="key",\n                value="value"\n            )]\n        ),\n        source_ip_config=elbv2.CfnListenerRule.SourceIpConfigProperty(\n            values=["values"]\n        ),\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['field', 'host_header_config', 'http_header_config', 'http_request_method_config', 'path_pattern_config', 'query_string_config', 'source_ip_config', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.RuleConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.SourceIpConfigProperty
class CfnListenerRule_SourceIpConfigPropertyDef(BaseStruct):
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The source IP addresses, in CIDR format. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. If you specify multiple addresses, the condition is satisfied if the source IP address of the request matches one of the CIDR blocks. This condition is not satisfied by the addresses in the X-Forwarded-For header.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-sourceipconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    source_ip_config_property = elbv2.CfnListenerRule.SourceIpConfigProperty(\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.SourceIpConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.TargetGroupStickinessConfigProperty
class CfnListenerRule_TargetGroupStickinessConfigPropertyDef(BaseStruct):
    duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).\n')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether target group stickiness is enabled.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-targetgroupstickinessconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    target_group_stickiness_config_property = elbv2.CfnListenerRule.TargetGroupStickinessConfigProperty(\n        duration_seconds=123,\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['duration_seconds', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.TargetGroupStickinessConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.TargetGroupTupleProperty
class CfnListenerRule_TargetGroupTuplePropertyDef(BaseStruct):
    target_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the target group.\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='The weight. The range is 0 to 999.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listenerrule-targetgrouptuple.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    target_group_tuple_property = elbv2.CfnListenerRule.TargetGroupTupleProperty(\n        target_group_arn="targetGroupArn",\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_group_arn', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule.TargetGroupTupleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnLoadBalancer.LoadBalancerAttributeProperty
class CfnLoadBalancer_LoadBalancerAttributePropertyDef(BaseStruct):
    key: typing.Optional[str] = pydantic.Field(None, description='The name of the attribute. The following attributes are supported by all load balancers: - ``deletion_protection.enabled`` - Indicates whether deletion protection is enabled. The value is ``true`` or ``false`` . The default is ``false`` . - ``load_balancing.cross_zone.enabled`` - Indicates whether cross-zone load balancing is enabled. The possible values are ``true`` and ``false`` . The default for Network Load Balancers and Gateway Load Balancers is ``false`` . The default for Application Load Balancers is ``true`` , and cannot be changed. The following attributes are supported by both Application Load Balancers and Network Load Balancers: - ``access_logs.s3.enabled`` - Indicates whether access logs are enabled. The value is ``true`` or ``false`` . The default is ``false`` . - ``access_logs.s3.bucket`` - The name of the S3 bucket for the access logs. This attribute is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket. - ``access_logs.s3.prefix`` - The prefix for the location in the S3 bucket for the access logs. - ``ipv6.deny_all_igw_traffic`` - Blocks internet gateway (IGW) access to the load balancer. It is set to ``false`` for internet-facing load balancers and ``true`` for internal load balancers, preventing unintended access to your internal load balancer through an internet gateway. The following attributes are supported by only Application Load Balancers: - ``idle_timeout.timeout_seconds`` - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The default is 60 seconds. - ``routing.http.desync_mitigation_mode`` - Determines how the load balancer handles requests that might pose a security risk to your application. The possible values are ``monitor`` , ``defensive`` , and ``strictest`` . The default is ``defensive`` . - ``routing.http.drop_invalid_header_fields.enabled`` - Indicates whether HTTP headers with invalid header fields are removed by the load balancer ( ``true`` ) or routed to targets ( ``false`` ). The default is ``false`` . - ``routing.http.preserve_host_header.enabled`` - Indicates whether the Application Load Balancer should preserve the ``Host`` header in the HTTP request and send it to the target without any change. The possible values are ``true`` and ``false`` . The default is ``false`` . - ``routing.http.x_amzn_tls_version_and_cipher_suite.enabled`` - Indicates whether the two headers ( ``x-amzn-tls-version`` and ``x-amzn-tls-cipher-suite`` ), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. The ``x-amzn-tls-version`` header has information about the TLS protocol version negotiated with the client, and the ``x-amzn-tls-cipher-suite`` header has information about the cipher suite negotiated with the client. Both headers are in OpenSSL format. The possible values for the attribute are ``true`` and ``false`` . The default is ``false`` . - ``routing.http.xff_client_port.enabled`` - Indicates whether the ``X-Forwarded-For`` header should preserve the source port that the client used to connect to the load balancer. The possible values are ``true`` and ``false`` . The default is ``false`` . - ``routing.http.xff_header_processing.mode`` - Enables you to modify, preserve, or remove the ``X-Forwarded-For`` header in the HTTP request before the Application Load Balancer sends the request to the target. The possible values are ``append`` , ``preserve`` , and ``remove`` . The default is ``append`` . - If the value is ``append`` , the Application Load Balancer adds the client IP address (of the last hop) to the ``X-Forwarded-For`` header in the HTTP request before it sends it to targets. - If the value is ``preserve`` the Application Load Balancer preserves the ``X-Forwarded-For`` header in the HTTP request, and sends it to targets without any change. - If the value is ``remove`` , the Application Load Balancer removes the ``X-Forwarded-For`` header in the HTTP request before it sends it to targets. - ``routing.http2.enabled`` - Indicates whether HTTP/2 is enabled. The possible values are ``true`` and ``false`` . The default is ``true`` . Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. - ``waf.fail_open.enabled`` - Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. The possible values are ``true`` and ``false`` . The default is ``false`` .\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value of the attribute.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-loadbalancer-loadbalancerattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    load_balancer_attribute_property = elbv2.CfnLoadBalancer.LoadBalancerAttributeProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnLoadBalancer.LoadBalancerAttributeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnLoadBalancer.SubnetMappingProperty
class CfnLoadBalancer_SubnetMappingPropertyDef(BaseStruct):
    subnet_id: str = pydantic.Field(..., description='The ID of the subnet.\n')
    allocation_id: typing.Optional[str] = pydantic.Field(None, description='[Network Load Balancers] The allocation ID of the Elastic IP address for an internet-facing load balancer.\n')
    i_pv6_address: typing.Optional[str] = pydantic.Field(None, description='[Network Load Balancers] The IPv6 address.\n')
    private_i_pv4_address: typing.Optional[str] = pydantic.Field(None, description='[Network Load Balancers] The private IPv4 address for an internal load balancer.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-loadbalancer-subnetmapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    subnet_mapping_property = elbv2.CfnLoadBalancer.SubnetMappingProperty(\n        subnet_id="subnetId",\n\n        # the properties below are optional\n        allocation_id="allocationId",\n        i_pv6_address="iPv6Address",\n        private_iPv4_address="privateIPv4Address"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['subnet_id', 'allocation_id', 'i_pv6_address', 'private_i_pv4_address']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnLoadBalancer.SubnetMappingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroup.MatcherProperty
class CfnTargetGroup_MatcherPropertyDef(BaseStruct):
    grpc_code: typing.Optional[str] = pydantic.Field(None, description='You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). The default value is 12.\n')
    http_code: typing.Optional[str] = pydantic.Field(None, description='For Application Load Balancers, you can specify values between 200 and 499, with the default value being 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). For Network Load Balancers, you can specify values between 200 and 599, with the default value being 200-399. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). For Gateway Load Balancers, this must be "200–399". Note that when using shorthand syntax, some values such as commas need to be escaped.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-targetgroup-matcher.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    matcher_property = elbv2.CfnTargetGroup.MatcherProperty(\n        grpc_code="grpcCode",\n        http_code="httpCode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['grpc_code', 'http_code']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroup.MatcherProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroup.TargetDescriptionProperty
class CfnTargetGroup_TargetDescriptionPropertyDef(BaseStruct):
    availability_zone: typing.Optional[str] = pydantic.Field(None, description='An Availability Zone or ``all`` . This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer. For Application Load Balancer target groups, the specified Availability Zone value is only applicable when cross-zone load balancing is off. Otherwise the parameter is ignored and treated as ``all`` . This parameter is not supported if the target type of the target group is ``instance`` or ``alb`` . If the target type is ``ip`` and the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this parameter is optional. If the IP address is outside the VPC, this parameter is required. For Application Load Balancer target groups with cross-zone load balancing off, if the target type is ``ip`` and the IP address is outside of the VPC for the target group, this should be an Availability Zone inside the VPC for the target group. If the target type is ``lambda`` , this parameter is optional and the only supported value is ``all`` .\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is ``alb`` , the targeted Application Load Balancer must have at least one listener whose port matches the target group port. This parameter is not used if the target is a Lambda function.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-targetgroup-targetdescription.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    target_description_property = elbv2.CfnTargetGroup.TargetDescriptionProperty(\n        id="id",\n\n        # the properties below are optional\n        availability_zone="availabilityZone",\n        port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['availability_zone', 'port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroup.TargetDescriptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroup.TargetGroupAttributeProperty
class CfnTargetGroup_TargetGroupAttributePropertyDef(BaseStruct):
    key: typing.Optional[str] = pydantic.Field(None, description="The name of the attribute. The following attributes are supported by all load balancers: - ``deregistration_delay.timeout_seconds`` - The amount of time, in seconds, for Elastic Load Balancing to wait before changing the state of a deregistering target from ``draining`` to ``unused`` . The range is 0-3600 seconds. The default value is 300 seconds. If the target is a Lambda function, this attribute is not supported. - ``stickiness.enabled`` - Indicates whether target stickiness is enabled. The value is ``true`` or ``false`` . The default is ``false`` . - ``stickiness.type`` - Indicates the type of stickiness. The possible values are: - ``lb_cookie`` and ``app_cookie`` for Application Load Balancers. - ``source_ip`` for Network Load Balancers. - ``source_ip_dest_ip`` and ``source_ip_dest_ip_proto`` for Gateway Load Balancers. The following attributes are supported by Application Load Balancers and Network Load Balancers: - ``load_balancing.cross_zone.enabled`` - Indicates whether cross zone load balancing is enabled. The value is ``true`` , ``false`` or ``use_load_balancer_configuration`` . The default is ``use_load_balancer_configuration`` . - ``target_group_health.dns_failover.minimum_healthy_targets.count`` - The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are ``off`` or an integer from 1 to the maximum number of targets. The default is ``off`` . - ``target_group_health.dns_failover.minimum_healthy_targets.percentage`` - The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are ``off`` or an integer from 1 to 100. The default is ``off`` . - ``target_group_health.unhealthy_state_routing.minimum_healthy_targets.count`` - The minimum number of targets that must be healthy. If the number of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are 1 to the maximum number of targets. The default is 1. - ``target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage`` - The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are ``off`` or an integer from 1 to 100. The default is ``off`` . The following attributes are supported only if the load balancer is an Application Load Balancer and the target is an instance or an IP address: - ``load_balancing.algorithm.type`` - The load balancing algorithm determines how the load balancer selects targets when routing requests. The value is ``round_robin`` or ``least_outstanding_requests`` . The default is ``round_robin`` . - ``slow_start.duration_seconds`` - The time period, in seconds, during which a newly registered target receives an increasing share of the traffic to the target group. After this time period ends, the target receives its full share of traffic. The range is 30-900 seconds (15 minutes). The default is 0 seconds (disabled). - ``stickiness.app_cookie.cookie_name`` - Indicates the name of the application-based cookie. Names that start with the following prefixes are not allowed: ``AWSALB`` , ``AWSALBAPP`` , and ``AWSALBTG`` ; they're reserved for use by the load balancer. - ``stickiness.app_cookie.duration_seconds`` - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the application-based cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds). - ``stickiness.lb_cookie.duration_seconds`` - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds). The following attribute is supported only if the load balancer is an Application Load Balancer and the target is a Lambda function: - ``lambda.multi_value_headers.enabled`` - Indicates whether the request and response headers that are exchanged between the load balancer and the Lambda function include arrays of values or strings. The value is ``true`` or ``false`` . The default is ``false`` . If the value is ``false`` and the request contains a duplicate header field name or query parameter key, the load balancer uses the last value sent by the client. The following attributes are supported only by Network Load Balancers: - ``deregistration_delay.connection_termination.enabled`` - Indicates whether the load balancer terminates connections at the end of the deregistration timeout. The value is ``true`` or ``false`` . The default is ``false`` . - ``preserve_client_ip.enabled`` - Indicates whether client IP preservation is enabled. The value is ``true`` or ``false`` . The default is disabled if the target group type is IP address and the target group protocol is TCP or TLS. Otherwise, the default is enabled. Client IP preservation cannot be disabled for UDP and TCP_UDP target groups. - ``proxy_protocol_v2.enabled`` - Indicates whether Proxy Protocol version 2 is enabled. The value is ``true`` or ``false`` . The default is ``false`` . The following attributes are supported only by Gateway Load Balancers: - ``target_failover.on_deregistration`` - Indicates how the Gateway Load Balancer handles existing flows when a target is deregistered. The possible values are ``rebalance`` and ``no_rebalance`` . The default is ``no_rebalance`` . The two attributes ( ``target_failover.on_deregistration`` and ``target_failover.on_unhealthy`` ) can't be set independently. The value you set for both attributes must be the same. - ``target_failover.on_unhealthy`` - Indicates how the Gateway Load Balancer handles existing flows when a target is unhealthy. The possible values are ``rebalance`` and ``no_rebalance`` . The default is ``no_rebalance`` . The two attributes ( ``target_failover.on_deregistration`` and ``target_failover.on_unhealthy`` ) cannot be set independently. The value you set for both attributes must be the same.\n")
    value: typing.Optional[str] = pydantic.Field(None, description='The value of the attribute.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-targetgroup-targetgroupattribute.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    target_group_attribute_property = elbv2.CfnTargetGroup.TargetGroupAttributeProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroup.TargetGroupAttributeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.FixedResponseOptions
class FixedResponseOptionsDef(BaseStruct):
    content_type: typing.Optional[str] = pydantic.Field(None, description='Content Type of the response. Valid Values: text/plain | text/css | text/html | application/javascript | application/json Default: - Automatically determined\n')
    message_body: typing.Optional[str] = pydantic.Field(None, description='The response body. Default: - No body\n\n:exampleMetadata: infused\n\nExample::\n\n    # listener: elbv2.ApplicationListener\n\n\n    listener.add_action("Fixed",\n        priority=10,\n        conditions=[\n            elbv2.ListenerCondition.path_patterns(["/ok"])\n        ],\n        action=elbv2.ListenerAction.fixed_response(200,\n            content_type="text/plain",\n            message_body="OK"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_type', 'message_body']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.FixedResponseOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ForwardOptions
class ForwardOptionsDef(BaseStruct):
    stickiness_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='For how long clients should be directed to the same target group. Range between 1 second and 7 days. Default: - No stickiness\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    forward_options = elbv2.ForwardOptions(\n        stickiness_duration=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['stickiness_duration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.ForwardOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.HealthCheck
class HealthCheckDef(BaseStruct):
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance or ip, health checks are always enabled and cannot be disabled. Default: - Determined automatically.\n')
    healthy_grpc_codes: typing.Optional[str] = pydantic.Field(None, description='GRPC code to use when checking for a successful response from a target. You can specify values between 0 and 99. You can specify multiple values (for example, "0,1") or a range of values (for example, "0-5"). Default: - 12\n')
    healthy_http_codes: typing.Optional[str] = pydantic.Field(None, description='HTTP code to use when checking for a successful response from a target. For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299").\n')
    healthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks successes required before considering an unhealthy target healthy. For Application Load Balancers, the default is 5. For Network Load Balancers, the default is 3. Default: 5 for ALBs, 3 for NLBs\n')
    interval: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The approximate number of seconds between health checks for an individual target. Must be 5 to 300 seconds Default: 10 seconds if protocol is ``GENEVE``, 35 seconds if target type is ``lambda``, else 30 seconds\n')
    path: typing.Optional[str] = pydantic.Field(None, description='The ping path destination where Elastic Load Balancing sends health check requests. Default: /\n')
    port: typing.Optional[str] = pydantic.Field(None, description="The port that the load balancer uses when performing health checks on the targets. Default: 'traffic-port'\n")
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The TLS, UDP, and TCP_UDP protocols are not supported for health checks. Default: HTTP for ALBs, TCP for NLBs\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time, in seconds, during which no response from a target means a failed health check. For Application Load Balancers, the range is 2-60 seconds and the default is 5 seconds. For Network Load Balancers, this is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks. Default: Duration.seconds(5) for ALBs, Duration.seconds(10) or Duration.seconds(6) for NLBs\n')
    unhealthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health check failures required before considering a target unhealthy. For Application Load Balancers, the default is 2. For Network Load Balancers, this value must be the same as the healthy threshold count. Default: 2\n\n:exampleMetadata: infused\n\nExample::\n\n    # cluster: ecs.Cluster\n\n    load_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, "Service",\n        cluster=cluster,\n        memory_limit_mi_b=1024,\n        cpu=512,\n        task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n            image=ecs.ContainerImage.from_registry("amazon/amazon-ecs-sample"),\n            command=["command"],\n            entry_point=["entry", "point"]\n        )\n    )\n\n    load_balanced_fargate_service.target_group.configure_health_check(\n        path="/custom-health-path"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'healthy_grpc_codes', 'healthy_http_codes', 'healthy_threshold_count', 'interval', 'path', 'port', 'protocol', 'timeout', 'unhealthy_threshold_count']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.HealthCheck'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.LoadBalancerTargetProps
class LoadBalancerTargetPropsDef(BaseStruct):
    target_type: aws_cdk.aws_elasticloadbalancingv2.TargetType = pydantic.Field(..., description='What kind of target this is.\n')
    target_json: typing.Any = pydantic.Field(None, description="JSON representing the target's direct addition to the TargetGroup list. May be omitted if the target is going to register itself later.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # target_json: Any\n\n    load_balancer_target_props = elbv2.LoadBalancerTargetProps(\n        target_type=elbv2.TargetType.INSTANCE,\n\n        # the properties below are optional\n        target_json=target_json\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['target_type', 'target_json']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.LoadBalancerTargetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkForwardOptions
class NetworkForwardOptionsDef(BaseStruct):
    stickiness_duration: typing.Optional[models.DurationDef] = pydantic.Field(None, description='For how long clients should be directed to the same target group. Range between 1 second and 7 days. Default: - No stickiness\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    network_forward_options = elbv2.NetworkForwardOptions(\n        stickiness_duration=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['stickiness_duration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkForwardOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkListenerLookupOptions
class NetworkListenerLookupOptionsDef(BaseStruct):
    listener_port: typing.Union[int, float, None] = pydantic.Field(None, description='Filter listeners by listener port. Default: - does not filter by listener port\n')
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description='Filter listeners by associated load balancer arn. Default: - does not filter by load balancer arn\n')
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Filter listeners by associated load balancer tags. Default: - does not filter by load balancer tags\n')
    listener_protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol of the listener port. Default: - listener is not filtered by protocol\n\n:exampleMetadata: infused\n\nExample::\n\n    listener = elbv2.NetworkListener.from_lookup(self, "ALBListener",\n        load_balancer_tags={\n            "Cluster": "MyClusterName"\n        },\n        listener_protocol=elbv2.Protocol.TCP,\n        listener_port=12345\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['listener_port', 'load_balancer_arn', 'load_balancer_tags', 'listener_protocol']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkListenerLookupOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkListenerProps
class NetworkListenerPropsDef(BaseStruct):
    port: typing.Union[int, float] = pydantic.Field(..., description='The port on which the listener listens for requests.\n')
    alpn_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.AlpnPolicy] = pydantic.Field(None, description='Application-Layer Protocol Negotiation (ALPN) is a TLS extension that is sent on the initial TLS handshake hello messages. ALPN enables the application layer to negotiate which protocols should be used over a secure connection, such as HTTP/1 and HTTP/2. Can only be specified together with Protocol TLS. Default: - None\n')
    certificates: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.ListenerCertificateDef]]] = pydantic.Field(None, description='Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. Default: - No certificates.\n')
    default_action: typing.Optional[models.aws_elasticloadbalancingv2.NetworkListenerActionDef] = pydantic.Field(None, description='Default action to take for requests to this listener. This allows full control of the default Action of the load balancer, including weighted forwarding. See the ``NetworkListenerAction`` class for all options. Cannot be specified together with ``defaultTargetGroups``. Default: - None.\n')
    default_target_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef]]] = pydantic.Field(None, description='Default target groups to load balance to. All target groups will be load balanced to with equal weight and without stickiness. For a more complex configuration than that, use either ``defaultAction`` or ``addAction()``. Cannot be specified together with ``defaultAction``. Default: - None.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol for listener, expects TCP, TLS, UDP, or TCP_UDP. Default: - TLS if certificates are provided. TCP otherwise.\n')
    ssl_policy: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.SslPolicy] = pydantic.Field(None, description='SSL Policy. Default: - Current predefined security policy.\n')
    load_balancer: typing.Union[models.aws_elasticloadbalancingv2.NetworkLoadBalancerDef] = pydantic.Field(..., description='The load balancer to attach this listener to.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # listener_certificate: elbv2.ListenerCertificate\n    # network_listener_action: elbv2.NetworkListenerAction\n    # network_load_balancer: elbv2.NetworkLoadBalancer\n    # network_target_group: elbv2.NetworkTargetGroup\n\n    network_listener_props = elbv2.NetworkListenerProps(\n        load_balancer=network_load_balancer,\n        port=123,\n\n        # the properties below are optional\n        alpn_policy=elbv2.AlpnPolicy.HTTP1_ONLY,\n        certificates=[listener_certificate],\n        default_action=network_listener_action,\n        default_target_groups=[network_target_group],\n        protocol=elbv2.Protocol.HTTP,\n        ssl_policy=elbv2.SslPolicy.RECOMMENDED_TLS\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['port', 'alpn_policy', 'certificates', 'default_action', 'default_target_groups', 'protocol', 'ssl_policy', 'load_balancer']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkListenerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[NetworkListenerPropsDefConfig] = pydantic.Field(None)


class NetworkListenerPropsDefConfig(pydantic.BaseModel):
    load_balancer_config: typing.Optional[models._interface_methods.AwsElasticloadbalancingv2INetworkLoadBalancerDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancerAttributes
class NetworkLoadBalancerAttributesDef(BaseStruct):
    load_balancer_arn: str = pydantic.Field(..., description='ARN of the load balancer.\n')
    load_balancer_canonical_hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='The canonical hosted zone ID of this load balancer. Default: - When not provided, LB cannot be used as Route53 Alias target.\n')
    load_balancer_dns_name: typing.Optional[str] = pydantic.Field(None, description='The DNS name of this load balancer. Default: - When not provided, LB cannot be used as Route53 Alias target.\n')
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The VPC to associate with the load balancer. Default: - When not provided, listeners cannot be created on imported load balancers.\n\n:exampleMetadata: infused\n\nExample::\n\n    # Create an Accelerator\n    accelerator = globalaccelerator.Accelerator(self, "Accelerator")\n\n    # Create a Listener\n    listener = accelerator.add_listener("Listener",\n        port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n        ]\n    )\n\n    # Import the Load Balancers\n    nlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, "NLB1",\n        load_balancer_arn="arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b"\n    )\n    nlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, "NLB2",\n        load_balancer_arn="arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1"\n    )\n\n    # Add one EndpointGroup for each Region we are targeting\n    listener.add_endpoint_group("Group1",\n        endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n    )\n    listener.add_endpoint_group("Group2",\n        # Imported load balancers automatically calculate their Region from the ARN.\n        # If you are load balancing to other resources, you must also pass a `region`\n        # parameter here.\n        endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer_arn', 'load_balancer_canonical_hosted_zone_id', 'load_balancer_dns_name', 'vpc']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancerAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancerLookupOptions
class NetworkLoadBalancerLookupOptionsDef(BaseStruct):
    load_balancer_arn: typing.Optional[str] = pydantic.Field(None, description="Find by load balancer's ARN. Default: - does not search by load balancer arn\n")
    load_balancer_tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Match load balancer tags. Default: - does not match load balancers by tags\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    network_load_balancer_lookup_options = elbv2.NetworkLoadBalancerLookupOptions(\n        load_balancer_arn="loadBalancerArn",\n        load_balancer_tags={\n            "load_balancer_tags_key": "loadBalancerTags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer_arn', 'load_balancer_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancerLookupOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancerProps
class NetworkLoadBalancerPropsDef(BaseStruct):
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='The VPC network to place the load balancer in.\n')
    deletion_protection: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether deletion protection is enabled. Default: false\n')
    internet_facing: typing.Optional[bool] = pydantic.Field(None, description='Whether the load balancer has an internet-routable address. Default: false\n')
    load_balancer_name: typing.Optional[str] = pydantic.Field(None, description='Name of the load balancer. Default: - Automatically generated name.\n')
    vpc_subnets: typing.Union[models.aws_ec2.SubnetSelectionDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Which subnets place the load balancer in. Default: - the Vpc default strategy.\n')
    cross_zone_enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether cross-zone load balancing is enabled. Default: false\n\n:exampleMetadata: infused\n\nExample::\n\n    import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\n    vpc = ec2.Vpc(self, "VPC")\n    nlb = elbv2.NetworkLoadBalancer(self, "NLB",\n        vpc=vpc\n    )\n    link = apigateway.VpcLink(self, "link",\n        targets=[nlb]\n    )\n\n    integration = apigateway.Integration(\n        type=apigateway.IntegrationType.HTTP_PROXY,\n        options=apigateway.IntegrationOptions(\n            connection_type=apigateway.ConnectionType.VPC_LINK,\n            vpc_link=link\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['vpc', 'deletion_protection', 'internet_facing', 'load_balancer_name', 'vpc_subnets', 'cross_zone_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[NetworkLoadBalancerPropsDefConfig] = pydantic.Field(None)


class NetworkLoadBalancerPropsDefConfig(pydantic.BaseModel):
    vpc_config: typing.Optional[models._interface_methods.AwsEc2IVpcDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkTargetGroupProps
class NetworkTargetGroupPropsDef(BaseStruct):
    deregistration_delay: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The amount of time for Elastic Load Balancing to wait before deregistering a target. The range is 0-3600 seconds. Default: 300\n')
    health_check: typing.Union[models.aws_elasticloadbalancingv2.HealthCheckDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Health check configuration. Default: - The default value for each property in this configuration varies depending on the target.\n')
    target_group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen. Default: - Automatically generated.\n')
    target_type: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.TargetType] = pydantic.Field(None, description='The type of targets registered to this TargetGroup, either IP or Instance. All targets registered into the group must be of this type. If you register targets to the TargetGroup in the CDK app, the TargetType is determined automatically. Default: - Determined automatically.\n')
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The virtual private cloud (VPC). only if ``TargetType`` is ``Ip`` or ``InstanceId`` Default: - undefined\n')
    port: typing.Union[int, float] = pydantic.Field(..., description='The port on which the target receives traffic.\n')
    connection_termination: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether the load balancer terminates connections at the end of the deregistration timeout. Default: false\n')
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether client IP preservation is enabled. Default: false if the target group type is IP address and the target group protocol is TCP or TLS. Otherwise, true.\n')
    protocol: typing.Optional[aws_cdk.aws_elasticloadbalancingv2.Protocol] = pydantic.Field(None, description='Protocol for target group, expects TCP, TLS, UDP, or TCP_UDP. Default: - TCP\n')
    proxy_protocol_v2: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether Proxy Protocol version 2 is enabled. Default: false\n')
    targets: typing.Optional[typing.Sequence[typing.Union[models.aws_autoscaling.AutoScalingGroupDef, models.aws_ecs.BaseServiceDef, models.aws_ecs.Ec2ServiceDef, models.aws_ecs.ExternalServiceDef, models.aws_ecs.FargateServiceDef, models.aws_elasticloadbalancingv2_targets.AlbArnTargetDef, models.aws_elasticloadbalancingv2_targets.AlbTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef, models.aws_elasticloadbalancingv2_targets.IpTargetDef]]] = pydantic.Field(None, description='The targets to add to this target group. Can be ``Instance``, ``IPAddress``, or any self-registering load balancing target. If you use either ``Instance`` or ``IPAddress`` as targets, all target must be of the same type. Default: - No targets.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_ec2 as ec2\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # network_load_balancer_target: elbv2.INetworkLoadBalancerTarget\n    # vpc: ec2.Vpc\n\n    network_target_group_props = elbv2.NetworkTargetGroupProps(\n        port=123,\n\n        # the properties below are optional\n        connection_termination=False,\n        deregistration_delay=cdk.Duration.minutes(30),\n        health_check=elbv2.HealthCheck(\n            enabled=False,\n            healthy_grpc_codes="healthyGrpcCodes",\n            healthy_http_codes="healthyHttpCodes",\n            healthy_threshold_count=123,\n            interval=cdk.Duration.minutes(30),\n            path="path",\n            port="port",\n            protocol=elbv2.Protocol.HTTP,\n            timeout=cdk.Duration.minutes(30),\n            unhealthy_threshold_count=123\n        ),\n        preserve_client_ip=False,\n        protocol=elbv2.Protocol.HTTP,\n        proxy_protocol_v2=False,\n        target_group_name="targetGroupName",\n        targets=[network_load_balancer_target],\n        target_type=elbv2.TargetType.INSTANCE,\n        vpc=vpc\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['deregistration_delay', 'health_check', 'target_group_name', 'target_type', 'vpc', 'port', 'connection_termination', 'preserve_client_ip', 'protocol', 'proxy_protocol_v2', 'targets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkTargetGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.NetworkWeightedTargetGroup
class NetworkWeightedTargetGroupDef(BaseStruct):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef] = pydantic.Field(..., description='The target group.\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description="The target group's weight. Range is [0..1000). Default: 1\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # network_target_group: elbv2.NetworkTargetGroup\n\n    network_weighted_target_group = elbv2.NetworkWeightedTargetGroup(\n        target_group=network_target_group,\n\n        # the properties below are optional\n        weight=123\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['target_group', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.NetworkWeightedTargetGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.QueryStringCondition
class QueryStringConditionDef(BaseStruct):
    value: str = pydantic.Field(..., description='The query string value for the condition.\n')
    key: typing.Optional[str] = pydantic.Field(None, description='The query string key for the condition. Default: - Any key can be matched.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    query_string_condition = elbv2.QueryStringCondition(\n        value="value",\n\n        # the properties below are optional\n        key="key"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value', 'key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.QueryStringCondition'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.RedirectOptions
class RedirectOptionsDef(BaseStruct):
    host: typing.Optional[str] = pydantic.Field(None, description='The hostname. This component is not percent-encoded. The hostname can contain #{host}. Default: - No change\n')
    path: typing.Optional[str] = pydantic.Field(None, description='The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Default: - No change\n')
    permanent: typing.Optional[bool] = pydantic.Field(None, description='The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302). Default: false\n')
    port: typing.Optional[str] = pydantic.Field(None, description='The port. You can specify a value from 1 to 65535 or #{port}. Default: - No change\n')
    protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP. Default: - No change\n')
    query: typing.Optional[str] = pydantic.Field(None, description='The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords. Default: - No change\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    redirect_options = elbv2.RedirectOptions(\n        host="host",\n        path="path",\n        permanent=False,\n        port="port",\n        protocol="protocol",\n        query="query"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['host', 'path', 'permanent', 'port', 'protocol', 'query']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.RedirectOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.TargetGroupAttributes
class TargetGroupAttributesDef(BaseStruct):
    target_group_arn: str = pydantic.Field(..., description='ARN of the target group.\n')
    load_balancer_arns: typing.Optional[str] = pydantic.Field(None, description='A Token representing the list of ARNs for the load balancer routing to this target group.\n\n:exampleMetadata: infused\n\nExample::\n\n    # stack: Stack\n\n\n    target_group = elbv2.ApplicationTargetGroup.from_target_group_attributes(self, "MyTargetGroup",\n        target_group_arn=Fn.import_value("TargetGroupArn"),\n        load_balancer_arns=Fn.import_value("LoadBalancerArn")\n    )\n\n    target_group_metrics = target_group.metrics\n')
    _init_params: typing.ClassVar[list[str]] = ['target_group_arn', 'load_balancer_arns']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.TargetGroupAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.WeightedTargetGroup
class WeightedTargetGroupDef(BaseStruct):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef] = pydantic.Field(..., description='The target group.\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description="The target group's weight. Range is [0..1000). Default: 1\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    # application_target_group: elbv2.ApplicationTargetGroup\n\n    weighted_target_group = elbv2.WeightedTargetGroup(\n        target_group=application_target_group,\n\n        # the properties below are optional\n        weight=123\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['target_group', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.WeightedTargetGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.AlpnPolicy
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocol
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ApplicationProtocolVersion
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.DesyncMitigationMode
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.HttpCodeElb
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.HttpCodeTarget
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IpAddressType
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.Protocol
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.SslPolicy
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.TargetGroupLoadBalancingAlgorithmType
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.TargetType
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.UnauthenticatedAction
# skipping emum

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IApplicationListener
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IApplicationLoadBalancer
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IApplicationLoadBalancerMetrics
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IApplicationLoadBalancerTarget
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IApplicationTargetGroup
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IApplicationTargetGroupMetrics
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IListener
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IListenerAction
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.IListenerCertificate
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ILoadBalancerV2
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.INetworkListener
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.INetworkLoadBalancer
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.INetworkLoadBalancerMetrics
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.INetworkLoadBalancerTarget
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.INetworkTargetGroup
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.INetworkTargetGroupMetrics
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.ITargetGroup
#  skipping Interface

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListener
class CfnListenerDef(BaseCfnResource):
    default_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_ActionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The actions for the default rule. You cannot define a condition for a default rule. To create additional rules for an Application Load Balancer, use `AWS::ElasticLoadBalancingV2::ListenerRule <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html>`_ .\n')
    load_balancer_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the load balancer.\n')
    alpn_policy: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='[TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.\n')
    certificates: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_CertificatePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The default SSL server certificate for a secure listener. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. To create a certificate list for a secure listener, use `AWS::ElasticLoadBalancingV2::ListenerCertificate <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html>`_ .\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.\n')
    protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.\n')
    ssl_policy: typing.Optional[str] = pydantic.Field(None, description='[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see `Security policies <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies>`_ in the *Application Load Balancers Guide* and `Security policies <https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies>`_ in the *Network Load Balancers Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['default_actions', 'load_balancer_arn', 'alpn_policy', 'certificates', 'port', 'protocol', 'ssl_policy']
    _method_names: typing.ClassVar[list[str]] = ['ActionProperty', 'AuthenticateCognitoConfigProperty', 'AuthenticateOidcConfigProperty', 'CertificateProperty', 'FixedResponseConfigProperty', 'ForwardConfigProperty', 'RedirectConfigProperty', 'TargetGroupStickinessConfigProperty', 'TargetGroupTupleProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListener'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnListenerDefConfig] = pydantic.Field(None)


class CfnListenerDefConfig(pydantic.BaseModel):
    ActionProperty: typing.Optional[list[CfnListenerDefActionpropertyParams]] = pydantic.Field(None, description='')
    AuthenticateCognitoConfigProperty: typing.Optional[list[CfnListenerDefAuthenticatecognitoconfigpropertyParams]] = pydantic.Field(None, description='')
    AuthenticateOidcConfigProperty: typing.Optional[list[CfnListenerDefAuthenticateoidcconfigpropertyParams]] = pydantic.Field(None, description='')
    CertificateProperty: typing.Optional[list[CfnListenerDefCertificatepropertyParams]] = pydantic.Field(None, description='')
    FixedResponseConfigProperty: typing.Optional[list[CfnListenerDefFixedresponseconfigpropertyParams]] = pydantic.Field(None, description='')
    ForwardConfigProperty: typing.Optional[list[CfnListenerDefForwardconfigpropertyParams]] = pydantic.Field(None, description='')
    RedirectConfigProperty: typing.Optional[list[CfnListenerDefRedirectconfigpropertyParams]] = pydantic.Field(None, description='')
    TargetGroupStickinessConfigProperty: typing.Optional[list[CfnListenerDefTargetgroupstickinessconfigpropertyParams]] = pydantic.Field(None, description='')
    TargetGroupTupleProperty: typing.Optional[list[CfnListenerDefTargetgrouptuplepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnListenerDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnListenerDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnListenerDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnListenerDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnListenerDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnListenerDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnListenerDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnListenerDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnListenerDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnListenerDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnListenerDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnListenerDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnListenerDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnListenerDefActionpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    authenticate_cognito_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_AuthenticateCognitoConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    authenticate_oidc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_AuthenticateOidcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    fixed_response_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_FixedResponseConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    forward_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_ForwardConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    order: typing.Union[int, float, None] = pydantic.Field(None, description='')
    redirect_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_RedirectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    target_group_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerDefAuthenticatecognitoconfigpropertyParams(pydantic.BaseModel):
    user_pool_arn: str = pydantic.Field(..., description='')
    user_pool_client_id: str = pydantic.Field(..., description='')
    user_pool_domain: str = pydantic.Field(..., description='')
    authentication_request_extra_params: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    on_unauthenticated_request: typing.Optional[str] = pydantic.Field(None, description='')
    scope: typing.Optional[str] = pydantic.Field(None, description='')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='')
    session_timeout: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerDefAuthenticateoidcconfigpropertyParams(pydantic.BaseModel):
    authorization_endpoint: str = pydantic.Field(..., description='')
    client_id: str = pydantic.Field(..., description='')
    issuer: str = pydantic.Field(..., description='')
    token_endpoint: str = pydantic.Field(..., description='')
    user_info_endpoint: str = pydantic.Field(..., description='')
    authentication_request_extra_params: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='')
    on_unauthenticated_request: typing.Optional[str] = pydantic.Field(None, description='')
    scope: typing.Optional[str] = pydantic.Field(None, description='')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='')
    session_timeout: typing.Optional[str] = pydantic.Field(None, description='')
    use_existing_client_secret: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnListenerDefCertificatepropertyParams(pydantic.BaseModel):
    certificate_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerDefFixedresponseconfigpropertyParams(pydantic.BaseModel):
    status_code: str = pydantic.Field(..., description='')
    content_type: typing.Optional[str] = pydantic.Field(None, description='')
    message_body: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerDefForwardconfigpropertyParams(pydantic.BaseModel):
    target_groups: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_TargetGroupTuplePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    target_group_stickiness_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_TargetGroupStickinessConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnListenerDefRedirectconfigpropertyParams(pydantic.BaseModel):
    status_code: str = pydantic.Field(..., description='')
    host: typing.Optional[str] = pydantic.Field(None, description='')
    path: typing.Optional[str] = pydantic.Field(None, description='')
    port: typing.Optional[str] = pydantic.Field(None, description='')
    protocol: typing.Optional[str] = pydantic.Field(None, description='')
    query: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerDefTargetgroupstickinessconfigpropertyParams(pydantic.BaseModel):
    duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnListenerDefTargetgrouptuplepropertyParams(pydantic.BaseModel):
    target_group_arn: typing.Optional[str] = pydantic.Field(None, description='')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnListenerDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnListenerDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnListenerDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnListenerDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnListenerDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnListenerDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnListenerDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnListenerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnListenerDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnListenerDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnListenerDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnListenerDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnListenerDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnListenerDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerCertificate
class CfnListenerCertificateDef(BaseCfnResource):
    certificates: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerCertificate_CertificatePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The certificate. You can specify one certificate per resource.\n')
    listener_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the listener.')
    _init_params: typing.ClassVar[list[str]] = ['certificates', 'listener_arn']
    _method_names: typing.ClassVar[list[str]] = ['CertificateProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerCertificate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnListenerCertificateDefConfig] = pydantic.Field(None)


class CfnListenerCertificateDefConfig(pydantic.BaseModel):
    CertificateProperty: typing.Optional[list[CfnListenerCertificateDefCertificatepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnListenerCertificateDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnListenerCertificateDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnListenerCertificateDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnListenerCertificateDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnListenerCertificateDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnListenerCertificateDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnListenerCertificateDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnListenerCertificateDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnListenerCertificateDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnListenerCertificateDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnListenerCertificateDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnListenerCertificateDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnListenerCertificateDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnListenerCertificateDefCertificatepropertyParams(pydantic.BaseModel):
    certificate_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerCertificateDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnListenerCertificateDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnListenerCertificateDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnListenerCertificateDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnListenerCertificateDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnListenerCertificateDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnListenerCertificateDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnListenerCertificateDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnListenerCertificateDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnListenerCertificateDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnListenerCertificateDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnListenerCertificateDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnListenerCertificateDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnListenerCertificateDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule
class CfnListenerRuleDef(BaseCfnResource):
    actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_ActionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The actions. The rule must include exactly one of the following types of actions: ``forward`` , ``fixed-response`` , or ``redirect`` , and it must be the last action to be performed. If the rule is for an HTTPS listener, it can also optionally include an authentication action.\n')
    conditions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_RuleConditionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The conditions. The rule can optionally include up to one of each of the following conditions: ``http-request-method`` , ``host-header`` , ``path-pattern`` , and ``source-ip`` . A rule can also optionally include one or more of each of the following conditions: ``http-header`` and ``query-string`` .\n')
    priority: typing.Union[int, float] = pydantic.Field(..., description="The rule priority. A listener can't have multiple rules with the same priority. If you try to reorder rules by updating their priorities, do not specify a new priority if an existing rule already uses this priority, as this can cause an error. If you need to reuse a priority with a different rule, you must remove it as a priority first, and then specify it in a subsequent update.\n")
    listener_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the listener.')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'conditions', 'priority', 'listener_arn']
    _method_names: typing.ClassVar[list[str]] = ['ActionProperty', 'AuthenticateCognitoConfigProperty', 'AuthenticateOidcConfigProperty', 'FixedResponseConfigProperty', 'ForwardConfigProperty', 'HostHeaderConfigProperty', 'HttpHeaderConfigProperty', 'HttpRequestMethodConfigProperty', 'PathPatternConfigProperty', 'QueryStringConfigProperty', 'QueryStringKeyValueProperty', 'RedirectConfigProperty', 'RuleConditionProperty', 'SourceIpConfigProperty', 'TargetGroupStickinessConfigProperty', 'TargetGroupTupleProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnListenerRuleDefConfig] = pydantic.Field(None)


class CfnListenerRuleDefConfig(pydantic.BaseModel):
    ActionProperty: typing.Optional[list[CfnListenerRuleDefActionpropertyParams]] = pydantic.Field(None, description='')
    AuthenticateCognitoConfigProperty: typing.Optional[list[CfnListenerRuleDefAuthenticatecognitoconfigpropertyParams]] = pydantic.Field(None, description='')
    AuthenticateOidcConfigProperty: typing.Optional[list[CfnListenerRuleDefAuthenticateoidcconfigpropertyParams]] = pydantic.Field(None, description='')
    FixedResponseConfigProperty: typing.Optional[list[CfnListenerRuleDefFixedresponseconfigpropertyParams]] = pydantic.Field(None, description='')
    ForwardConfigProperty: typing.Optional[list[CfnListenerRuleDefForwardconfigpropertyParams]] = pydantic.Field(None, description='')
    HostHeaderConfigProperty: typing.Optional[list[CfnListenerRuleDefHostheaderconfigpropertyParams]] = pydantic.Field(None, description='')
    HttpHeaderConfigProperty: typing.Optional[list[CfnListenerRuleDefHttpheaderconfigpropertyParams]] = pydantic.Field(None, description='')
    HttpRequestMethodConfigProperty: typing.Optional[list[CfnListenerRuleDefHttprequestmethodconfigpropertyParams]] = pydantic.Field(None, description='')
    PathPatternConfigProperty: typing.Optional[list[CfnListenerRuleDefPathpatternconfigpropertyParams]] = pydantic.Field(None, description='')
    QueryStringConfigProperty: typing.Optional[list[CfnListenerRuleDefQuerystringconfigpropertyParams]] = pydantic.Field(None, description='')
    QueryStringKeyValueProperty: typing.Optional[list[CfnListenerRuleDefQuerystringkeyvaluepropertyParams]] = pydantic.Field(None, description='')
    RedirectConfigProperty: typing.Optional[list[CfnListenerRuleDefRedirectconfigpropertyParams]] = pydantic.Field(None, description='')
    RuleConditionProperty: typing.Optional[list[CfnListenerRuleDefRuleconditionpropertyParams]] = pydantic.Field(None, description='')
    SourceIpConfigProperty: typing.Optional[list[CfnListenerRuleDefSourceipconfigpropertyParams]] = pydantic.Field(None, description='')
    TargetGroupStickinessConfigProperty: typing.Optional[list[CfnListenerRuleDefTargetgroupstickinessconfigpropertyParams]] = pydantic.Field(None, description='')
    TargetGroupTupleProperty: typing.Optional[list[CfnListenerRuleDefTargetgrouptuplepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnListenerRuleDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnListenerRuleDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnListenerRuleDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnListenerRuleDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnListenerRuleDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnListenerRuleDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnListenerRuleDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnListenerRuleDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnListenerRuleDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnListenerRuleDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnListenerRuleDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnListenerRuleDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnListenerRuleDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_is_default_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)

class CfnListenerRuleDefActionpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    authenticate_cognito_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_AuthenticateCognitoConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    authenticate_oidc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_AuthenticateOidcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    fixed_response_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_FixedResponseConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    forward_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_ForwardConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    order: typing.Union[int, float, None] = pydantic.Field(None, description='')
    redirect_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_RedirectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    target_group_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefAuthenticatecognitoconfigpropertyParams(pydantic.BaseModel):
    user_pool_arn: str = pydantic.Field(..., description='')
    user_pool_client_id: str = pydantic.Field(..., description='')
    user_pool_domain: str = pydantic.Field(..., description='')
    authentication_request_extra_params: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    on_unauthenticated_request: typing.Optional[str] = pydantic.Field(None, description='')
    scope: typing.Optional[str] = pydantic.Field(None, description='')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='')
    session_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefAuthenticateoidcconfigpropertyParams(pydantic.BaseModel):
    authorization_endpoint: str = pydantic.Field(..., description='')
    client_id: str = pydantic.Field(..., description='')
    issuer: str = pydantic.Field(..., description='')
    token_endpoint: str = pydantic.Field(..., description='')
    user_info_endpoint: str = pydantic.Field(..., description='')
    authentication_request_extra_params: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='')
    on_unauthenticated_request: typing.Optional[str] = pydantic.Field(None, description='')
    scope: typing.Optional[str] = pydantic.Field(None, description='')
    session_cookie_name: typing.Optional[str] = pydantic.Field(None, description='')
    session_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    use_existing_client_secret: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefFixedresponseconfigpropertyParams(pydantic.BaseModel):
    status_code: str = pydantic.Field(..., description='')
    content_type: typing.Optional[str] = pydantic.Field(None, description='')
    message_body: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefForwardconfigpropertyParams(pydantic.BaseModel):
    target_groups: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_TargetGroupTuplePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    target_group_stickiness_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_TargetGroupStickinessConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefHostheaderconfigpropertyParams(pydantic.BaseModel):
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefHttpheaderconfigpropertyParams(pydantic.BaseModel):
    http_header_name: typing.Optional[str] = pydantic.Field(None, description='')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefHttprequestmethodconfigpropertyParams(pydantic.BaseModel):
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefPathpatternconfigpropertyParams(pydantic.BaseModel):
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefQuerystringconfigpropertyParams(pydantic.BaseModel):
    values: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_QueryStringKeyValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefQuerystringkeyvaluepropertyParams(pydantic.BaseModel):
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefRedirectconfigpropertyParams(pydantic.BaseModel):
    status_code: str = pydantic.Field(..., description='')
    host: typing.Optional[str] = pydantic.Field(None, description='')
    path: typing.Optional[str] = pydantic.Field(None, description='')
    port: typing.Optional[str] = pydantic.Field(None, description='')
    protocol: typing.Optional[str] = pydantic.Field(None, description='')
    query: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefRuleconditionpropertyParams(pydantic.BaseModel):
    field: typing.Optional[str] = pydantic.Field(None, description='')
    host_header_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_HostHeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    http_header_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_HttpHeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    http_request_method_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_HttpRequestMethodConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    path_pattern_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_PathPatternConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    query_string_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_QueryStringConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    source_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_SourceIpConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefSourceipconfigpropertyParams(pydantic.BaseModel):
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefTargetgroupstickinessconfigpropertyParams(pydantic.BaseModel):
    duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefTargetgrouptuplepropertyParams(pydantic.BaseModel):
    target_group_arn: typing.Optional[str] = pydantic.Field(None, description='')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnListenerRuleDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnListenerRuleDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnListenerRuleDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnListenerRuleDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnListenerRuleDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnListenerRuleDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnListenerRuleDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnListenerRuleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnListenerRuleDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnListenerRuleDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnListenerRuleDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnListenerRuleDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnListenerRuleDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnListenerRuleDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnLoadBalancer
class CfnLoadBalancerDef(BaseCfnResource):
    ip_address_type: typing.Optional[str] = pydantic.Field(None, description='The IP address type. The possible values are ``ipv4`` (for IPv4 addresses) and ``dualstack`` (for IPv4 and IPv6 addresses). You can’t specify ``dualstack`` for a load balancer with a UDP or TCP_UDP listener.\n')
    load_balancer_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnLoadBalancer_LoadBalancerAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The load balancer attributes.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-". If you don\'t specify a name, AWS CloudFormation generates a unique physical ID for the load balancer. If you specify a name, you cannot perform updates that require replacement of this resource, but you can perform other updates. To replace the resource, specify a new name.\n')
    scheme: typing.Optional[str] = pydantic.Field(None, description='The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer. The default is an Internet-facing load balancer. You cannot specify a scheme for a Gateway Load Balancer.\n')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='[Application Load Balancers] The IDs of the security groups for the load balancer.\n')
    subnet_mappings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnLoadBalancer_SubnetMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.\n')
    subnets: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the load balancer.\n')
    type: typing.Optional[str] = pydantic.Field(None, description='The type of load balancer. The default is ``application`` .')
    _init_params: typing.ClassVar[list[str]] = ['ip_address_type', 'load_balancer_attributes', 'name', 'scheme', 'security_groups', 'subnet_mappings', 'subnets', 'tags', 'type']
    _method_names: typing.ClassVar[list[str]] = ['LoadBalancerAttributeProperty', 'SubnetMappingProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnLoadBalancer'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnLoadBalancerDefConfig] = pydantic.Field(None)


class CfnLoadBalancerDefConfig(pydantic.BaseModel):
    LoadBalancerAttributeProperty: typing.Optional[list[CfnLoadBalancerDefLoadbalancerattributepropertyParams]] = pydantic.Field(None, description='')
    SubnetMappingProperty: typing.Optional[list[CfnLoadBalancerDefSubnetmappingpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnLoadBalancerDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnLoadBalancerDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnLoadBalancerDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnLoadBalancerDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnLoadBalancerDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnLoadBalancerDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnLoadBalancerDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnLoadBalancerDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnLoadBalancerDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnLoadBalancerDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnLoadBalancerDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnLoadBalancerDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnLoadBalancerDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnLoadBalancerDefLoadbalancerattributepropertyParams(pydantic.BaseModel):
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLoadBalancerDefSubnetmappingpropertyParams(pydantic.BaseModel):
    subnet_id: str = pydantic.Field(..., description='')
    allocation_id: typing.Optional[str] = pydantic.Field(None, description='')
    i_pv6_address: typing.Optional[str] = pydantic.Field(None, description='')
    private_i_pv4_address: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLoadBalancerDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLoadBalancerDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLoadBalancerDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLoadBalancerDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLoadBalancerDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLoadBalancerDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLoadBalancerDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLoadBalancerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLoadBalancerDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLoadBalancerDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLoadBalancerDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnLoadBalancerDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLoadBalancerDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLoadBalancerDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroup
class CfnTargetGroupDef(BaseCfnResource):
    health_check_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether health checks are enabled. If the target type is ``lambda`` , health checks are disabled by default but can be enabled. If the target type is ``instance`` , ``ip`` , or ``alb`` , health checks are always enabled and cannot be disabled.\n')
    health_check_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is ``lambda`` , the default is 35 seconds.\n')
    health_check_path: typing.Optional[str] = pydantic.Field(None, description='[HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is / AWS .ALB/healthcheck.\n')
    health_check_port: typing.Optional[str] = pydantic.Field(None, description='The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is ``traffic-port`` , which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80.\n')
    health_check_protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.\n')
    health_check_timeout_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is ``lambda`` , the default is 30 seconds.\n')
    healthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 5. If the target type is ``lambda`` , the default is 5.\n')
    ip_address_type: typing.Optional[str] = pydantic.Field(None, description='The type of IP address used for this target group. The possible values are ``ipv4`` and ``ipv6`` . This is an optional parameter. If not specified, the IP address type defaults to ``ipv4`` .\n')
    matcher: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnTargetGroup_MatcherPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.\n')
    protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.\n')
    protocol_version: typing.Optional[str] = pydantic.Field(None, description='[HTTP/HTTPS protocol] The protocol version. The possible values are ``GRPC`` , ``HTTP1`` , and ``HTTP2`` .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags.\n')
    target_group_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnTargetGroup_TargetGroupAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The attributes.\n')
    targets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnTargetGroup_TargetDescriptionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The targets.\n')
    target_type: typing.Optional[str] = pydantic.Field(None, description="The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type. - ``instance`` - Register targets by instance ID. This is the default value. - ``ip`` - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses. - ``lambda`` - Register a single Lambda function as a target. - ``alb`` - Register a single Application Load Balancer as a target.\n")
    unhealthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 2. If the target type is ``lambda`` , the default is 5.\n')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.')
    _init_params: typing.ClassVar[list[str]] = ['health_check_enabled', 'health_check_interval_seconds', 'health_check_path', 'health_check_port', 'health_check_protocol', 'health_check_timeout_seconds', 'healthy_threshold_count', 'ip_address_type', 'matcher', 'name', 'port', 'protocol', 'protocol_version', 'tags', 'target_group_attributes', 'targets', 'target_type', 'unhealthy_threshold_count', 'vpc_id']
    _method_names: typing.ClassVar[list[str]] = ['MatcherProperty', 'TargetDescriptionProperty', 'TargetGroupAttributeProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnTargetGroupDefConfig] = pydantic.Field(None)


class CfnTargetGroupDefConfig(pydantic.BaseModel):
    MatcherProperty: typing.Optional[list[CfnTargetGroupDefMatcherpropertyParams]] = pydantic.Field(None, description='')
    TargetDescriptionProperty: typing.Optional[list[CfnTargetGroupDefTargetdescriptionpropertyParams]] = pydantic.Field(None, description='')
    TargetGroupAttributeProperty: typing.Optional[list[CfnTargetGroupDefTargetgroupattributepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnTargetGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnTargetGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnTargetGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnTargetGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnTargetGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnTargetGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnTargetGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnTargetGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnTargetGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnTargetGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnTargetGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnTargetGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnTargetGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnTargetGroupDefMatcherpropertyParams(pydantic.BaseModel):
    grpc_code: typing.Optional[str] = pydantic.Field(None, description='')
    http_code: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnTargetGroupDefTargetdescriptionpropertyParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='')
    availability_zone: typing.Optional[str] = pydantic.Field(None, description='')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnTargetGroupDefTargetgroupattributepropertyParams(pydantic.BaseModel):
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnTargetGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnTargetGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTargetGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnTargetGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTargetGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnTargetGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnTargetGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnTargetGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnTargetGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnTargetGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTargetGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnTargetGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnTargetGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTargetGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerCertificateProps
class CfnListenerCertificatePropsDef(BaseCfnProperty):
    certificates: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerCertificate_CertificatePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The certificate. You can specify one certificate per resource.\n')
    listener_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the listener.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    cfn_listener_certificate_props = elbv2.CfnListenerCertificateProps(\n        certificates=[elbv2.CfnListenerCertificate.CertificateProperty(\n            certificate_arn="certificateArn"\n        )],\n        listener_arn="listenerArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificates', 'listener_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerCertificateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerProps
class CfnListenerPropsDef(BaseCfnProperty):
    default_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_ActionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The actions for the default rule. You cannot define a condition for a default rule. To create additional rules for an Application Load Balancer, use `AWS::ElasticLoadBalancingV2::ListenerRule <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html>`_ .\n')
    load_balancer_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the load balancer.\n')
    alpn_policy: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='[TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.\n')
    certificates: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListener_CertificatePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The default SSL server certificate for a secure listener. You must provide exactly one certificate if the listener protocol is HTTPS or TLS. To create a certificate list for a secure listener, use `AWS::ElasticLoadBalancingV2::ListenerCertificate <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html>`_ .\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.\n')
    protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.\n')
    ssl_policy: typing.Optional[str] = pydantic.Field(None, description='[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see `Security policies <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies>`_ in the *Application Load Balancers Guide* and `Security policies <https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies>`_ in the *Network Load Balancers Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    cfn_listener_props = elbv2.CfnListenerProps(\n        default_actions=[elbv2.CfnListener.ActionProperty(\n            type="type",\n\n            # the properties below are optional\n            authenticate_cognito_config=elbv2.CfnListener.AuthenticateCognitoConfigProperty(\n                user_pool_arn="userPoolArn",\n                user_pool_client_id="userPoolClientId",\n                user_pool_domain="userPoolDomain",\n\n                # the properties below are optional\n                authentication_request_extra_params={\n                    "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n                },\n                on_unauthenticated_request="onUnauthenticatedRequest",\n                scope="scope",\n                session_cookie_name="sessionCookieName",\n                session_timeout="sessionTimeout"\n            ),\n            authenticate_oidc_config=elbv2.CfnListener.AuthenticateOidcConfigProperty(\n                authorization_endpoint="authorizationEndpoint",\n                client_id="clientId",\n                issuer="issuer",\n                token_endpoint="tokenEndpoint",\n                user_info_endpoint="userInfoEndpoint",\n\n                # the properties below are optional\n                authentication_request_extra_params={\n                    "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n                },\n                client_secret="clientSecret",\n                on_unauthenticated_request="onUnauthenticatedRequest",\n                scope="scope",\n                session_cookie_name="sessionCookieName",\n                session_timeout="sessionTimeout",\n                use_existing_client_secret=False\n            ),\n            fixed_response_config=elbv2.CfnListener.FixedResponseConfigProperty(\n                status_code="statusCode",\n\n                # the properties below are optional\n                content_type="contentType",\n                message_body="messageBody"\n            ),\n            forward_config=elbv2.CfnListener.ForwardConfigProperty(\n                target_groups=[elbv2.CfnListener.TargetGroupTupleProperty(\n                    target_group_arn="targetGroupArn",\n                    weight=123\n                )],\n                target_group_stickiness_config=elbv2.CfnListener.TargetGroupStickinessConfigProperty(\n                    duration_seconds=123,\n                    enabled=False\n                )\n            ),\n            order=123,\n            redirect_config=elbv2.CfnListener.RedirectConfigProperty(\n                status_code="statusCode",\n\n                # the properties below are optional\n                host="host",\n                path="path",\n                port="port",\n                protocol="protocol",\n                query="query"\n            ),\n            target_group_arn="targetGroupArn"\n        )],\n        load_balancer_arn="loadBalancerArn",\n\n        # the properties below are optional\n        alpn_policy=["alpnPolicy"],\n        certificates=[elbv2.CfnListener.CertificateProperty(\n            certificate_arn="certificateArn"\n        )],\n        port=123,\n        protocol="protocol",\n        ssl_policy="sslPolicy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_actions', 'load_balancer_arn', 'alpn_policy', 'certificates', 'port', 'protocol', 'ssl_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnListenerRuleProps
class CfnListenerRulePropsDef(BaseCfnProperty):
    actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_ActionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The actions. The rule must include exactly one of the following types of actions: ``forward`` , ``fixed-response`` , or ``redirect`` , and it must be the last action to be performed. If the rule is for an HTTPS listener, it can also optionally include an authentication action.\n')
    conditions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnListenerRule_RuleConditionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The conditions. The rule can optionally include up to one of each of the following conditions: ``http-request-method`` , ``host-header`` , ``path-pattern`` , and ``source-ip`` . A rule can also optionally include one or more of each of the following conditions: ``http-header`` and ``query-string`` .\n')
    priority: typing.Union[int, float] = pydantic.Field(..., description="The rule priority. A listener can't have multiple rules with the same priority. If you try to reorder rules by updating their priorities, do not specify a new priority if an existing rule already uses this priority, as this can cause an error. If you need to reuse a priority with a different rule, you must remove it as a priority first, and then specify it in a subsequent update.\n")
    listener_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the listener.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    cfn_listener_rule_props = elbv2.CfnListenerRuleProps(\n        actions=[elbv2.CfnListenerRule.ActionProperty(\n            type="type",\n\n            # the properties below are optional\n            authenticate_cognito_config=elbv2.CfnListenerRule.AuthenticateCognitoConfigProperty(\n                user_pool_arn="userPoolArn",\n                user_pool_client_id="userPoolClientId",\n                user_pool_domain="userPoolDomain",\n\n                # the properties below are optional\n                authentication_request_extra_params={\n                    "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n                },\n                on_unauthenticated_request="onUnauthenticatedRequest",\n                scope="scope",\n                session_cookie_name="sessionCookieName",\n                session_timeout=123\n            ),\n            authenticate_oidc_config=elbv2.CfnListenerRule.AuthenticateOidcConfigProperty(\n                authorization_endpoint="authorizationEndpoint",\n                client_id="clientId",\n                issuer="issuer",\n                token_endpoint="tokenEndpoint",\n                user_info_endpoint="userInfoEndpoint",\n\n                # the properties below are optional\n                authentication_request_extra_params={\n                    "authentication_request_extra_params_key": "authenticationRequestExtraParams"\n                },\n                client_secret="clientSecret",\n                on_unauthenticated_request="onUnauthenticatedRequest",\n                scope="scope",\n                session_cookie_name="sessionCookieName",\n                session_timeout=123,\n                use_existing_client_secret=False\n            ),\n            fixed_response_config=elbv2.CfnListenerRule.FixedResponseConfigProperty(\n                status_code="statusCode",\n\n                # the properties below are optional\n                content_type="contentType",\n                message_body="messageBody"\n            ),\n            forward_config=elbv2.CfnListenerRule.ForwardConfigProperty(\n                target_groups=[elbv2.CfnListenerRule.TargetGroupTupleProperty(\n                    target_group_arn="targetGroupArn",\n                    weight=123\n                )],\n                target_group_stickiness_config=elbv2.CfnListenerRule.TargetGroupStickinessConfigProperty(\n                    duration_seconds=123,\n                    enabled=False\n                )\n            ),\n            order=123,\n            redirect_config=elbv2.CfnListenerRule.RedirectConfigProperty(\n                status_code="statusCode",\n\n                # the properties below are optional\n                host="host",\n                path="path",\n                port="port",\n                protocol="protocol",\n                query="query"\n            ),\n            target_group_arn="targetGroupArn"\n        )],\n        conditions=[elbv2.CfnListenerRule.RuleConditionProperty(\n            field="field",\n            host_header_config=elbv2.CfnListenerRule.HostHeaderConfigProperty(\n                values=["values"]\n            ),\n            http_header_config=elbv2.CfnListenerRule.HttpHeaderConfigProperty(\n                http_header_name="httpHeaderName",\n                values=["values"]\n            ),\n            http_request_method_config=elbv2.CfnListenerRule.HttpRequestMethodConfigProperty(\n                values=["values"]\n            ),\n            path_pattern_config=elbv2.CfnListenerRule.PathPatternConfigProperty(\n                values=["values"]\n            ),\n            query_string_config=elbv2.CfnListenerRule.QueryStringConfigProperty(\n                values=[elbv2.CfnListenerRule.QueryStringKeyValueProperty(\n                    key="key",\n                    value="value"\n                )]\n            ),\n            source_ip_config=elbv2.CfnListenerRule.SourceIpConfigProperty(\n                values=["values"]\n            ),\n            values=["values"]\n        )],\n        priority=123,\n\n        # the properties below are optional\n        listener_arn="listenerArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'conditions', 'priority', 'listener_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnListenerRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnLoadBalancerProps
class CfnLoadBalancerPropsDef(BaseCfnProperty):
    ip_address_type: typing.Optional[str] = pydantic.Field(None, description='The IP address type. The possible values are ``ipv4`` (for IPv4 addresses) and ``dualstack`` (for IPv4 and IPv6 addresses). You can’t specify ``dualstack`` for a load balancer with a UDP or TCP_UDP listener.\n')
    load_balancer_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnLoadBalancer_LoadBalancerAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The load balancer attributes.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-". If you don\'t specify a name, AWS CloudFormation generates a unique physical ID for the load balancer. If you specify a name, you cannot perform updates that require replacement of this resource, but you can perform other updates. To replace the resource, specify a new name.\n')
    scheme: typing.Optional[str] = pydantic.Field(None, description='The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer. The default is an Internet-facing load balancer. You cannot specify a scheme for a Gateway Load Balancer.\n')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='[Application Load Balancers] The IDs of the security groups for the load balancer.\n')
    subnet_mappings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnLoadBalancer_SubnetMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.\n')
    subnets: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the load balancer.\n')
    type: typing.Optional[str] = pydantic.Field(None, description='The type of load balancer. The default is ``application`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    cfn_load_balancer_props = elbv2.CfnLoadBalancerProps(\n        ip_address_type="ipAddressType",\n        load_balancer_attributes=[elbv2.CfnLoadBalancer.LoadBalancerAttributeProperty(\n            key="key",\n            value="value"\n        )],\n        name="name",\n        scheme="scheme",\n        security_groups=["securityGroups"],\n        subnet_mappings=[elbv2.CfnLoadBalancer.SubnetMappingProperty(\n            subnet_id="subnetId",\n\n            # the properties below are optional\n            allocation_id="allocationId",\n            i_pv6_address="iPv6Address",\n            private_iPv4_address="privateIPv4Address"\n        )],\n        subnets=["subnets"],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ip_address_type', 'load_balancer_attributes', 'name', 'scheme', 'security_groups', 'subnet_mappings', 'subnets', 'tags', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnLoadBalancerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroupProps
class CfnTargetGroupPropsDef(BaseCfnProperty):
    health_check_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether health checks are enabled. If the target type is ``lambda`` , health checks are disabled by default but can be enabled. If the target type is ``instance`` , ``ip`` , or ``alb`` , health checks are always enabled and cannot be disabled.\n')
    health_check_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is ``lambda`` , the default is 35 seconds.\n')
    health_check_path: typing.Optional[str] = pydantic.Field(None, description='[HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is / AWS .ALB/healthcheck.\n')
    health_check_port: typing.Optional[str] = pydantic.Field(None, description='The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is ``traffic-port`` , which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80.\n')
    health_check_protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.\n')
    health_check_timeout_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is ``lambda`` , the default is 30 seconds.\n')
    healthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 5. If the target type is ``lambda`` , the default is 5.\n')
    ip_address_type: typing.Optional[str] = pydantic.Field(None, description='The type of IP address used for this target group. The possible values are ``ipv4`` and ``ipv6`` . This is an optional parameter. If not specified, the IP address type defaults to ``ipv4`` .\n')
    matcher: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnTargetGroup_MatcherPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.\n')
    protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.\n')
    protocol_version: typing.Optional[str] = pydantic.Field(None, description='[HTTP/HTTPS protocol] The protocol version. The possible values are ``GRPC`` , ``HTTP1`` , and ``HTTP2`` .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags.\n')
    target_group_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnTargetGroup_TargetGroupAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The attributes.\n')
    targets: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_elasticloadbalancingv2.CfnTargetGroup_TargetDescriptionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The targets.\n')
    target_type: typing.Optional[str] = pydantic.Field(None, description="The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type. - ``instance`` - Register targets by instance ID. This is the default value. - ``ip`` - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses. - ``lambda`` - Register a single Lambda function as a target. - ``alb`` - Register a single Application Load Balancer as a target.\n")
    unhealthy_threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 2. If the target type is ``lambda`` , the default is 5.\n')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_elasticloadbalancingv2 as elbv2\n\n    cfn_target_group_props = elbv2.CfnTargetGroupProps(\n        health_check_enabled=False,\n        health_check_interval_seconds=123,\n        health_check_path="healthCheckPath",\n        health_check_port="healthCheckPort",\n        health_check_protocol="healthCheckProtocol",\n        health_check_timeout_seconds=123,\n        healthy_threshold_count=123,\n        ip_address_type="ipAddressType",\n        matcher=elbv2.CfnTargetGroup.MatcherProperty(\n            grpc_code="grpcCode",\n            http_code="httpCode"\n        ),\n        name="name",\n        port=123,\n        protocol="protocol",\n        protocol_version="protocolVersion",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        target_group_attributes=[elbv2.CfnTargetGroup.TargetGroupAttributeProperty(\n            key="key",\n            value="value"\n        )],\n        targets=[elbv2.CfnTargetGroup.TargetDescriptionProperty(\n            id="id",\n\n            # the properties below are optional\n            availability_zone="availabilityZone",\n            port=123\n        )],\n        target_type="targetType",\n        unhealthy_threshold_count=123,\n        vpc_id="vpcId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['health_check_enabled', 'health_check_interval_seconds', 'health_check_path', 'health_check_port', 'health_check_protocol', 'health_check_timeout_seconds', 'healthy_threshold_count', 'ip_address_type', 'matcher', 'name', 'port', 'protocol', 'protocol_version', 'tags', 'target_group_attributes', 'targets', 'target_type', 'unhealthy_threshold_count', 'vpc_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2.CfnTargetGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    BaseListener: typing.Optional[dict[str, BaseListenerDef]] = pydantic.Field(None)
    BaseLoadBalancer: typing.Optional[dict[str, BaseLoadBalancerDef]] = pydantic.Field(None)
    ListenerAction: typing.Optional[dict[str, ListenerActionDef]] = pydantic.Field(None)
    ListenerCertificate: typing.Optional[dict[str, ListenerCertificateDef]] = pydantic.Field(None)
    ListenerCondition: typing.Optional[dict[str, ListenerConditionDef]] = pydantic.Field(None)
    NetworkListenerAction: typing.Optional[dict[str, NetworkListenerActionDef]] = pydantic.Field(None)
    TargetGroupBase: typing.Optional[dict[str, TargetGroupBaseDef]] = pydantic.Field(None)
    ApplicationListener: typing.Optional[dict[str, ApplicationListenerDef]] = pydantic.Field(None)
    ApplicationListenerCertificate: typing.Optional[dict[str, ApplicationListenerCertificateDef]] = pydantic.Field(None)
    ApplicationListenerRule: typing.Optional[dict[str, ApplicationListenerRuleDef]] = pydantic.Field(None)
    ApplicationLoadBalancer: typing.Optional[dict[str, ApplicationLoadBalancerDef]] = pydantic.Field(None)
    ApplicationTargetGroup: typing.Optional[dict[str, ApplicationTargetGroupDef]] = pydantic.Field(None)
    NetworkListener: typing.Optional[dict[str, NetworkListenerDef]] = pydantic.Field(None)
    NetworkLoadBalancer: typing.Optional[dict[str, NetworkLoadBalancerDef]] = pydantic.Field(None)
    NetworkTargetGroup: typing.Optional[dict[str, NetworkTargetGroupDef]] = pydantic.Field(None)
    AddApplicationActionProps: typing.Optional[dict[str, AddApplicationActionPropsDef]] = pydantic.Field(None)
    AddApplicationTargetGroupsProps: typing.Optional[dict[str, AddApplicationTargetGroupsPropsDef]] = pydantic.Field(None)
    AddApplicationTargetsProps: typing.Optional[dict[str, AddApplicationTargetsPropsDef]] = pydantic.Field(None)
    AddNetworkActionProps: typing.Optional[dict[str, AddNetworkActionPropsDef]] = pydantic.Field(None)
    AddNetworkTargetsProps: typing.Optional[dict[str, AddNetworkTargetsPropsDef]] = pydantic.Field(None)
    AddRuleProps: typing.Optional[dict[str, AddRulePropsDef]] = pydantic.Field(None)
    ApplicationListenerAttributes: typing.Optional[dict[str, ApplicationListenerAttributesDef]] = pydantic.Field(None)
    ApplicationListenerCertificateProps: typing.Optional[dict[str, ApplicationListenerCertificatePropsDef]] = pydantic.Field(None)
    ApplicationListenerLookupOptions: typing.Optional[dict[str, ApplicationListenerLookupOptionsDef]] = pydantic.Field(None)
    ApplicationListenerProps: typing.Optional[dict[str, ApplicationListenerPropsDef]] = pydantic.Field(None)
    ApplicationListenerRuleProps: typing.Optional[dict[str, ApplicationListenerRulePropsDef]] = pydantic.Field(None)
    ApplicationLoadBalancerAttributes: typing.Optional[dict[str, ApplicationLoadBalancerAttributesDef]] = pydantic.Field(None)
    ApplicationLoadBalancerLookupOptions: typing.Optional[dict[str, ApplicationLoadBalancerLookupOptionsDef]] = pydantic.Field(None)
    ApplicationLoadBalancerProps: typing.Optional[dict[str, ApplicationLoadBalancerPropsDef]] = pydantic.Field(None)
    ApplicationLoadBalancerRedirectConfig: typing.Optional[dict[str, ApplicationLoadBalancerRedirectConfigDef]] = pydantic.Field(None)
    ApplicationTargetGroupProps: typing.Optional[dict[str, ApplicationTargetGroupPropsDef]] = pydantic.Field(None)
    AuthenticateOidcOptions: typing.Optional[dict[str, AuthenticateOidcOptionsDef]] = pydantic.Field(None)
    BaseApplicationListenerProps: typing.Optional[dict[str, BaseApplicationListenerPropsDef]] = pydantic.Field(None)
    BaseApplicationListenerRuleProps: typing.Optional[dict[str, BaseApplicationListenerRulePropsDef]] = pydantic.Field(None)
    BaseListenerLookupOptions: typing.Optional[dict[str, BaseListenerLookupOptionsDef]] = pydantic.Field(None)
    BaseLoadBalancerLookupOptions: typing.Optional[dict[str, BaseLoadBalancerLookupOptionsDef]] = pydantic.Field(None)
    BaseLoadBalancerProps: typing.Optional[dict[str, BaseLoadBalancerPropsDef]] = pydantic.Field(None)
    BaseNetworkListenerProps: typing.Optional[dict[str, BaseNetworkListenerPropsDef]] = pydantic.Field(None)
    BaseTargetGroupProps: typing.Optional[dict[str, BaseTargetGroupPropsDef]] = pydantic.Field(None)
    CfnListener_ActionProperty: typing.Optional[dict[str, CfnListener_ActionPropertyDef]] = pydantic.Field(None)
    CfnListener_AuthenticateCognitoConfigProperty: typing.Optional[dict[str, CfnListener_AuthenticateCognitoConfigPropertyDef]] = pydantic.Field(None)
    CfnListener_AuthenticateOidcConfigProperty: typing.Optional[dict[str, CfnListener_AuthenticateOidcConfigPropertyDef]] = pydantic.Field(None)
    CfnListener_CertificateProperty: typing.Optional[dict[str, CfnListener_CertificatePropertyDef]] = pydantic.Field(None)
    CfnListener_FixedResponseConfigProperty: typing.Optional[dict[str, CfnListener_FixedResponseConfigPropertyDef]] = pydantic.Field(None)
    CfnListener_ForwardConfigProperty: typing.Optional[dict[str, CfnListener_ForwardConfigPropertyDef]] = pydantic.Field(None)
    CfnListener_RedirectConfigProperty: typing.Optional[dict[str, CfnListener_RedirectConfigPropertyDef]] = pydantic.Field(None)
    CfnListener_TargetGroupStickinessConfigProperty: typing.Optional[dict[str, CfnListener_TargetGroupStickinessConfigPropertyDef]] = pydantic.Field(None)
    CfnListener_TargetGroupTupleProperty: typing.Optional[dict[str, CfnListener_TargetGroupTuplePropertyDef]] = pydantic.Field(None)
    CfnListenerCertificate_CertificateProperty: typing.Optional[dict[str, CfnListenerCertificate_CertificatePropertyDef]] = pydantic.Field(None)
    CfnListenerRule_ActionProperty: typing.Optional[dict[str, CfnListenerRule_ActionPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_AuthenticateCognitoConfigProperty: typing.Optional[dict[str, CfnListenerRule_AuthenticateCognitoConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_AuthenticateOidcConfigProperty: typing.Optional[dict[str, CfnListenerRule_AuthenticateOidcConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_FixedResponseConfigProperty: typing.Optional[dict[str, CfnListenerRule_FixedResponseConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_ForwardConfigProperty: typing.Optional[dict[str, CfnListenerRule_ForwardConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_HostHeaderConfigProperty: typing.Optional[dict[str, CfnListenerRule_HostHeaderConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_HttpHeaderConfigProperty: typing.Optional[dict[str, CfnListenerRule_HttpHeaderConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_HttpRequestMethodConfigProperty: typing.Optional[dict[str, CfnListenerRule_HttpRequestMethodConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_PathPatternConfigProperty: typing.Optional[dict[str, CfnListenerRule_PathPatternConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_QueryStringConfigProperty: typing.Optional[dict[str, CfnListenerRule_QueryStringConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_QueryStringKeyValueProperty: typing.Optional[dict[str, CfnListenerRule_QueryStringKeyValuePropertyDef]] = pydantic.Field(None)
    CfnListenerRule_RedirectConfigProperty: typing.Optional[dict[str, CfnListenerRule_RedirectConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_RuleConditionProperty: typing.Optional[dict[str, CfnListenerRule_RuleConditionPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_SourceIpConfigProperty: typing.Optional[dict[str, CfnListenerRule_SourceIpConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_TargetGroupStickinessConfigProperty: typing.Optional[dict[str, CfnListenerRule_TargetGroupStickinessConfigPropertyDef]] = pydantic.Field(None)
    CfnListenerRule_TargetGroupTupleProperty: typing.Optional[dict[str, CfnListenerRule_TargetGroupTuplePropertyDef]] = pydantic.Field(None)
    CfnLoadBalancer_LoadBalancerAttributeProperty: typing.Optional[dict[str, CfnLoadBalancer_LoadBalancerAttributePropertyDef]] = pydantic.Field(None)
    CfnLoadBalancer_SubnetMappingProperty: typing.Optional[dict[str, CfnLoadBalancer_SubnetMappingPropertyDef]] = pydantic.Field(None)
    CfnTargetGroup_MatcherProperty: typing.Optional[dict[str, CfnTargetGroup_MatcherPropertyDef]] = pydantic.Field(None)
    CfnTargetGroup_TargetDescriptionProperty: typing.Optional[dict[str, CfnTargetGroup_TargetDescriptionPropertyDef]] = pydantic.Field(None)
    CfnTargetGroup_TargetGroupAttributeProperty: typing.Optional[dict[str, CfnTargetGroup_TargetGroupAttributePropertyDef]] = pydantic.Field(None)
    FixedResponseOptions: typing.Optional[dict[str, FixedResponseOptionsDef]] = pydantic.Field(None)
    ForwardOptions: typing.Optional[dict[str, ForwardOptionsDef]] = pydantic.Field(None)
    HealthCheck: typing.Optional[dict[str, HealthCheckDef]] = pydantic.Field(None)
    LoadBalancerTargetProps: typing.Optional[dict[str, LoadBalancerTargetPropsDef]] = pydantic.Field(None)
    NetworkForwardOptions: typing.Optional[dict[str, NetworkForwardOptionsDef]] = pydantic.Field(None)
    NetworkListenerLookupOptions: typing.Optional[dict[str, NetworkListenerLookupOptionsDef]] = pydantic.Field(None)
    NetworkListenerProps: typing.Optional[dict[str, NetworkListenerPropsDef]] = pydantic.Field(None)
    NetworkLoadBalancerAttributes: typing.Optional[dict[str, NetworkLoadBalancerAttributesDef]] = pydantic.Field(None)
    NetworkLoadBalancerLookupOptions: typing.Optional[dict[str, NetworkLoadBalancerLookupOptionsDef]] = pydantic.Field(None)
    NetworkLoadBalancerProps: typing.Optional[dict[str, NetworkLoadBalancerPropsDef]] = pydantic.Field(None)
    NetworkTargetGroupProps: typing.Optional[dict[str, NetworkTargetGroupPropsDef]] = pydantic.Field(None)
    NetworkWeightedTargetGroup: typing.Optional[dict[str, NetworkWeightedTargetGroupDef]] = pydantic.Field(None)
    QueryStringCondition: typing.Optional[dict[str, QueryStringConditionDef]] = pydantic.Field(None)
    RedirectOptions: typing.Optional[dict[str, RedirectOptionsDef]] = pydantic.Field(None)
    TargetGroupAttributes: typing.Optional[dict[str, TargetGroupAttributesDef]] = pydantic.Field(None)
    WeightedTargetGroup: typing.Optional[dict[str, WeightedTargetGroupDef]] = pydantic.Field(None)
    CfnListener: typing.Optional[dict[str, CfnListenerDef]] = pydantic.Field(None)
    CfnListenerCertificate: typing.Optional[dict[str, CfnListenerCertificateDef]] = pydantic.Field(None)
    CfnListenerRule: typing.Optional[dict[str, CfnListenerRuleDef]] = pydantic.Field(None)
    CfnLoadBalancer: typing.Optional[dict[str, CfnLoadBalancerDef]] = pydantic.Field(None)
    CfnTargetGroup: typing.Optional[dict[str, CfnTargetGroupDef]] = pydantic.Field(None)
    CfnListenerCertificateProps: typing.Optional[dict[str, CfnListenerCertificatePropsDef]] = pydantic.Field(None)
    CfnListenerProps: typing.Optional[dict[str, CfnListenerPropsDef]] = pydantic.Field(None)
    CfnListenerRuleProps: typing.Optional[dict[str, CfnListenerRulePropsDef]] = pydantic.Field(None)
    CfnLoadBalancerProps: typing.Optional[dict[str, CfnLoadBalancerPropsDef]] = pydantic.Field(None)
    CfnTargetGroupProps: typing.Optional[dict[str, CfnTargetGroupPropsDef]] = pydantic.Field(None)
    ...
