from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnConnector.VpcInformationProperty
class CfnConnector_VpcInformationPropertyDef(BaseStruct):
    security_group_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The security groups used with the connector. You can use a maximum of 4 security groups with a connector.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-connector-vpcinformation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    vpc_information_property = pcaconnectorad.CfnConnector.VpcInformationProperty(\n        security_group_ids=["securityGroupIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnConnector.VpcInformationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty
class CfnTemplate_ApplicationPoliciesPropertyDef(BaseStruct):
    policies: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ApplicationPolicyPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Application policies describe what the certificate can be used for.\n')
    critical: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Marks the application policy extension as critical.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-applicationpolicies.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    application_policies_property = pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n        policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n            policy_object_identifier="policyObjectIdentifier",\n            policy_type="policyType"\n        )],\n\n        # the properties below are optional\n        critical=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['policies', 'critical']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.ApplicationPolicyProperty
class CfnTemplate_ApplicationPolicyPropertyDef(BaseStruct):
    policy_object_identifier: typing.Optional[str] = pydantic.Field(None, description='The object identifier (OID) of an application policy.\n')
    policy_type: typing.Optional[str] = pydantic.Field(None, description='The type of application policy.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-applicationpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    application_policy_property = pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n        policy_object_identifier="policyObjectIdentifier",\n        policy_type="policyType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['policy_object_identifier', 'policy_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.ApplicationPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.CertificateValidityProperty
class CfnTemplate_CertificateValidityPropertyDef(BaseStruct):
    renewal_period: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ValidityPeriodPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Renewal period is the period of time before certificate expiration when a new certificate will be requested.\n')
    validity_period: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ValidityPeriodPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-certificatevalidity.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    certificate_validity_property = pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n        renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n            period=123,\n            period_type="periodType"\n        ),\n        validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n            period=123,\n            period_type="periodType"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['renewal_period', 'validity_period']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.CertificateValidityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.EnrollmentFlagsV2Property
class CfnTemplate_EnrollmentFlagsV2PropertyDef(BaseStruct):
    enable_key_reuse_on_nt_token_keyset_storage_full: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allow renewal using the same key.\n')
    include_symmetric_algorithms: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include symmetric algorithms allowed by the subject.\n')
    no_security_extension: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.\n')
    remove_invalid_certificate_from_personal_store: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Delete expired or revoked certificates instead of archiving them.\n')
    user_interaction_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Require user interaction when the subject is enrolled and the private key associated with the certificate is used.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-enrollmentflagsv2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    enrollment_flags_v2_property = pcaconnectorad.CfnTemplate.EnrollmentFlagsV2Property(\n        enable_key_reuse_on_nt_token_keyset_storage_full=False,\n        include_symmetric_algorithms=False,\n        no_security_extension=False,\n        remove_invalid_certificate_from_personal_store=False,\n        user_interaction_required=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_key_reuse_on_nt_token_keyset_storage_full', 'include_symmetric_algorithms', 'no_security_extension', 'remove_invalid_certificate_from_personal_store', 'user_interaction_required']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.EnrollmentFlagsV2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.EnrollmentFlagsV3Property
class CfnTemplate_EnrollmentFlagsV3PropertyDef(BaseStruct):
    enable_key_reuse_on_nt_token_keyset_storage_full: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allow renewal using the same key.\n')
    include_symmetric_algorithms: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include symmetric algorithms allowed by the subject.\n')
    no_security_extension: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.\n')
    remove_invalid_certificate_from_personal_store: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Delete expired or revoked certificates instead of archiving them.\n')
    user_interaction_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Require user interaction when the subject is enrolled and the private key associated with the certificate is used.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-enrollmentflagsv3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    enrollment_flags_v3_property = pcaconnectorad.CfnTemplate.EnrollmentFlagsV3Property(\n        enable_key_reuse_on_nt_token_keyset_storage_full=False,\n        include_symmetric_algorithms=False,\n        no_security_extension=False,\n        remove_invalid_certificate_from_personal_store=False,\n        user_interaction_required=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_key_reuse_on_nt_token_keyset_storage_full', 'include_symmetric_algorithms', 'no_security_extension', 'remove_invalid_certificate_from_personal_store', 'user_interaction_required']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.EnrollmentFlagsV3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.EnrollmentFlagsV4Property
class CfnTemplate_EnrollmentFlagsV4PropertyDef(BaseStruct):
    enable_key_reuse_on_nt_token_keyset_storage_full: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allow renewal using the same key.\n')
    include_symmetric_algorithms: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include symmetric algorithms allowed by the subject.\n')
    no_security_extension: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.\n')
    remove_invalid_certificate_from_personal_store: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Delete expired or revoked certificates instead of archiving them.\n')
    user_interaction_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Require user interaction when the subject is enrolled and the private key associated with the certificate is used.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-enrollmentflagsv4.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    enrollment_flags_v4_property = pcaconnectorad.CfnTemplate.EnrollmentFlagsV4Property(\n        enable_key_reuse_on_nt_token_keyset_storage_full=False,\n        include_symmetric_algorithms=False,\n        no_security_extension=False,\n        remove_invalid_certificate_from_personal_store=False,\n        user_interaction_required=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_key_reuse_on_nt_token_keyset_storage_full', 'include_symmetric_algorithms', 'no_security_extension', 'remove_invalid_certificate_from_personal_store', 'user_interaction_required']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.EnrollmentFlagsV4Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.ExtensionsV2Property
class CfnTemplate_ExtensionsV2PropertyDef(BaseStruct):
    key_usage: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.\n')
    application_policies: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ApplicationPoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Application policies specify what the certificate is used for and its purpose.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-extensionsv2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    extensions_v2_property = pcaconnectorad.CfnTemplate.ExtensionsV2Property(\n        key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n            usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                data_encipherment=False,\n                digital_signature=False,\n                key_agreement=False,\n                key_encipherment=False,\n                non_repudiation=False\n            ),\n\n            # the properties below are optional\n            critical=False\n        ),\n\n        # the properties below are optional\n        application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n            policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                policy_object_identifier="policyObjectIdentifier",\n                policy_type="policyType"\n            )],\n\n            # the properties below are optional\n            critical=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_usage', 'application_policies']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.ExtensionsV2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.ExtensionsV3Property
class CfnTemplate_ExtensionsV3PropertyDef(BaseStruct):
    key_usage: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.\n')
    application_policies: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ApplicationPoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Application policies specify what the certificate is used for and its purpose.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-extensionsv3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    extensions_v3_property = pcaconnectorad.CfnTemplate.ExtensionsV3Property(\n        key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n            usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                data_encipherment=False,\n                digital_signature=False,\n                key_agreement=False,\n                key_encipherment=False,\n                non_repudiation=False\n            ),\n\n            # the properties below are optional\n            critical=False\n        ),\n\n        # the properties below are optional\n        application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n            policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                policy_object_identifier="policyObjectIdentifier",\n                policy_type="policyType"\n            )],\n\n            # the properties below are optional\n            critical=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_usage', 'application_policies']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.ExtensionsV3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.ExtensionsV4Property
class CfnTemplate_ExtensionsV4PropertyDef(BaseStruct):
    key_usage: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key usage extension defines the purpose (e.g., encipherment, signature) of the key contained in the certificate.\n')
    application_policies: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ApplicationPoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Application policies specify what the certificate is used for and its purpose.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-extensionsv4.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    extensions_v4_property = pcaconnectorad.CfnTemplate.ExtensionsV4Property(\n        key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n            usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                data_encipherment=False,\n                digital_signature=False,\n                key_agreement=False,\n                key_encipherment=False,\n                non_repudiation=False\n            ),\n\n            # the properties below are optional\n            critical=False\n        ),\n\n        # the properties below are optional\n        application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n            policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                policy_object_identifier="policyObjectIdentifier",\n                policy_type="policyType"\n            )],\n\n            # the properties below are optional\n            critical=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_usage', 'application_policies']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.ExtensionsV4Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.GeneralFlagsV2Property
class CfnTemplate_GeneralFlagsV2PropertyDef(BaseStruct):
    auto_enrollment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.\n')
    machine_type: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-generalflagsv2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    general_flags_v2_property = pcaconnectorad.CfnTemplate.GeneralFlagsV2Property(\n        auto_enrollment=False,\n        machine_type=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auto_enrollment', 'machine_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.GeneralFlagsV2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.GeneralFlagsV3Property
class CfnTemplate_GeneralFlagsV3PropertyDef(BaseStruct):
    auto_enrollment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.\n')
    machine_type: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-generalflagsv3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    general_flags_v3_property = pcaconnectorad.CfnTemplate.GeneralFlagsV3Property(\n        auto_enrollment=False,\n        machine_type=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auto_enrollment', 'machine_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.GeneralFlagsV3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.GeneralFlagsV4Property
class CfnTemplate_GeneralFlagsV4PropertyDef(BaseStruct):
    auto_enrollment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.\n')
    machine_type: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-generalflagsv4.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    general_flags_v4_property = pcaconnectorad.CfnTemplate.GeneralFlagsV4Property(\n        auto_enrollment=False,\n        machine_type=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auto_enrollment', 'machine_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.GeneralFlagsV4Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty
class CfnTemplate_KeyUsageFlagsPropertyDef(BaseStruct):
    data_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='DataEncipherment is asserted when the subject public key is used for directly enciphering raw user data without the use of an intermediate symmetric cipher.\n')
    digital_signature: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='The digitalSignature is asserted when the subject public key is used for verifying digital signatures.\n')
    key_agreement: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='KeyAgreement is asserted when the subject public key is used for key agreement.\n')
    key_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='KeyEncipherment is asserted when the subject public key is used for enciphering private or secret keys, i.e., for key transport.\n')
    non_repudiation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='NonRepudiation is asserted when the subject public key is used to verify digital signatures.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-keyusageflags.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    key_usage_flags_property = pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n        data_encipherment=False,\n        digital_signature=False,\n        key_agreement=False,\n        key_encipherment=False,\n        non_repudiation=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_encipherment', 'digital_signature', 'key_agreement', 'key_encipherment', 'non_repudiation']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.KeyUsageProperty
class CfnTemplate_KeyUsagePropertyDef(BaseStruct):
    usage_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsageFlagsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.\n')
    critical: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Sets the key usage extension to critical.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-keyusage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    key_usage_property = pcaconnectorad.CfnTemplate.KeyUsageProperty(\n        usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n            data_encipherment=False,\n            digital_signature=False,\n            key_agreement=False,\n            key_encipherment=False,\n            non_repudiation=False\n        ),\n\n        # the properties below are optional\n        critical=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['usage_flags', 'critical']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.KeyUsageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty
class CfnTemplate_KeyUsagePropertyFlagsPropertyDef(BaseStruct):
    decrypt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allows key for encryption and decryption.\n')
    key_agreement: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allows key exchange without encryption.\n')
    sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allow key use for digital signature.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-keyusagepropertyflags.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    key_usage_property_flags_property = pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n        decrypt=False,\n        key_agreement=False,\n        sign=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['decrypt', 'key_agreement', 'sign']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty
class CfnTemplate_KeyUsagePropertyPropertyDef(BaseStruct):
    property_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyFlagsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can specify key usage for encryption, key agreement, and signature. You can use property flags or property type but not both.\n')
    property_type: typing.Optional[str] = pydantic.Field(None, description='You can specify all key usages using property type ALL. You can use property type or property flags but not both.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-keyusageproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    key_usage_property_property = pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty(\n        property_flags=pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n            decrypt=False,\n            key_agreement=False,\n            sign=False\n        ),\n        property_type="propertyType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['property_flags', 'property_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyAttributesV2Property
class CfnTemplate_PrivateKeyAttributesV2PropertyDef(BaseStruct):
    key_spec: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.\n')
    minimal_key_length: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Set the minimum key length of the private key.\n')
    crypto_providers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Defines the cryptographic providers used to generate the private key.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-privatekeyattributesv2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    private_key_attributes_v2_property = pcaconnectorad.CfnTemplate.PrivateKeyAttributesV2Property(\n        key_spec="keySpec",\n        minimal_key_length=123,\n\n        # the properties below are optional\n        crypto_providers=["cryptoProviders"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_spec', 'minimal_key_length', 'crypto_providers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyAttributesV2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyAttributesV3Property
class CfnTemplate_PrivateKeyAttributesV3PropertyDef(BaseStruct):
    algorithm: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the algorithm used to generate the private key.\n')
    key_spec: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.\n')
    key_usage_property: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key usage property defines the purpose of the private key contained in the certificate. You can specify specific purposes using property flags or all by using property type ALL.\n')
    minimal_key_length: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Set the minimum key length of the private key.\n')
    crypto_providers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Defines the cryptographic providers used to generate the private key.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-privatekeyattributesv3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    private_key_attributes_v3_property = pcaconnectorad.CfnTemplate.PrivateKeyAttributesV3Property(\n        algorithm="algorithm",\n        key_spec="keySpec",\n        key_usage_property=pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty(\n            property_flags=pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n                decrypt=False,\n                key_agreement=False,\n                sign=False\n            ),\n            property_type="propertyType"\n        ),\n        minimal_key_length=123,\n\n        # the properties below are optional\n        crypto_providers=["cryptoProviders"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['algorithm', 'key_spec', 'key_usage_property', 'minimal_key_length', 'crypto_providers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyAttributesV3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyAttributesV4Property
class CfnTemplate_PrivateKeyAttributesV4PropertyDef(BaseStruct):
    key_spec: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.\n')
    minimal_key_length: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Set the minimum key length of the private key.\n')
    algorithm: typing.Optional[str] = pydantic.Field(None, description='Defines the algorithm used to generate the private key.\n')
    crypto_providers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Defines the cryptographic providers used to generate the private key.\n')
    key_usage_property: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The key usage property defines the purpose of the private key contained in the certificate. You can specify specific purposes using property flags or all by using property type ALL.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-privatekeyattributesv4.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    private_key_attributes_v4_property = pcaconnectorad.CfnTemplate.PrivateKeyAttributesV4Property(\n        key_spec="keySpec",\n        minimal_key_length=123,\n\n        # the properties below are optional\n        algorithm="algorithm",\n        crypto_providers=["cryptoProviders"],\n        key_usage_property=pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty(\n            property_flags=pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n                decrypt=False,\n                key_agreement=False,\n                sign=False\n            ),\n            property_type="propertyType"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_spec', 'minimal_key_length', 'algorithm', 'crypto_providers', 'key_usage_property']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyAttributesV4Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyFlagsV2Property
class CfnTemplate_PrivateKeyFlagsV2PropertyDef(BaseStruct):
    client_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the minimum client compatibility.\n')
    exportable_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allows the private key to be exported.\n')
    strong_key_protection_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Require user input when using the private key for enrollment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-privatekeyflagsv2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    private_key_flags_v2_property = pcaconnectorad.CfnTemplate.PrivateKeyFlagsV2Property(\n        client_version="clientVersion",\n\n        # the properties below are optional\n        exportable_key=False,\n        strong_key_protection_required=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_version', 'exportable_key', 'strong_key_protection_required']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyFlagsV2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyFlagsV3Property
class CfnTemplate_PrivateKeyFlagsV3PropertyDef(BaseStruct):
    client_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the minimum client compatibility.\n')
    exportable_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allows the private key to be exported.\n')
    require_alternate_signature_algorithm: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Reguires the PKCS #1 v2.1 signature format for certificates. You should verify that your CA, objects, and applications can accept this signature format.\n')
    strong_key_protection_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Requirer user input when using the private key for enrollment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-privatekeyflagsv3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    private_key_flags_v3_property = pcaconnectorad.CfnTemplate.PrivateKeyFlagsV3Property(\n        client_version="clientVersion",\n\n        # the properties below are optional\n        exportable_key=False,\n        require_alternate_signature_algorithm=False,\n        strong_key_protection_required=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_version', 'exportable_key', 'require_alternate_signature_algorithm', 'strong_key_protection_required']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyFlagsV3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyFlagsV4Property
class CfnTemplate_PrivateKeyFlagsV4PropertyDef(BaseStruct):
    client_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the minimum client compatibility.\n')
    exportable_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Allows the private key to be exported.\n')
    require_alternate_signature_algorithm: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Requires the PKCS #1 v2.1 signature format for certificates. You should verify that your CA, objects, and applications can accept this signature format.\n')
    require_same_key_renewal: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Renew certificate using the same private key.\n')
    strong_key_protection_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Require user input when using the private key for enrollment.\n')
    use_legacy_provider: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies the cryptographic service provider category used to generate private keys. Set to TRUE to use Legacy Cryptographic Service Providers and FALSE to use Key Storage Providers.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-privatekeyflagsv4.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    private_key_flags_v4_property = pcaconnectorad.CfnTemplate.PrivateKeyFlagsV4Property(\n        client_version="clientVersion",\n\n        # the properties below are optional\n        exportable_key=False,\n        require_alternate_signature_algorithm=False,\n        require_same_key_renewal=False,\n        strong_key_protection_required=False,\n        use_legacy_provider=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_version', 'exportable_key', 'require_alternate_signature_algorithm', 'require_same_key_renewal', 'strong_key_protection_required', 'use_legacy_provider']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.PrivateKeyFlagsV4Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.SubjectNameFlagsV2Property
class CfnTemplate_SubjectNameFlagsV2PropertyDef(BaseStruct):
    require_common_name: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the common name in the subject name.\n')
    require_directory_path: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the directory path in the subject name.\n')
    require_dns_as_cn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the DNS as common name in the subject name.\n')
    require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Include the subject's email in the subject name.\n")
    san_require_directory_guid: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the globally unique identifier (GUID) in the subject alternate name.\n')
    san_require_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the DNS in the subject alternate name.\n')
    san_require_domain_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the domain DNS in the subject alternate name.\n')
    san_require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Include the subject's email in the subject alternate name.\n")
    san_require_spn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the service principal name (SPN) in the subject alternate name.\n')
    san_require_upn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the user principal name (UPN) in the subject alternate name.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-subjectnameflagsv2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    subject_name_flags_v2_property = pcaconnectorad.CfnTemplate.SubjectNameFlagsV2Property(\n        require_common_name=False,\n        require_directory_path=False,\n        require_dns_as_cn=False,\n        require_email=False,\n        san_require_directory_guid=False,\n        san_require_dns=False,\n        san_require_domain_dns=False,\n        san_require_email=False,\n        san_require_spn=False,\n        san_require_upn=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['require_common_name', 'require_directory_path', 'require_dns_as_cn', 'require_email', 'san_require_directory_guid', 'san_require_dns', 'san_require_domain_dns', 'san_require_email', 'san_require_spn', 'san_require_upn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.SubjectNameFlagsV2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.SubjectNameFlagsV3Property
class CfnTemplate_SubjectNameFlagsV3PropertyDef(BaseStruct):
    require_common_name: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the common name in the subject name.\n')
    require_directory_path: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the directory path in the subject name.\n')
    require_dns_as_cn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the DNS as common name in the subject name.\n')
    require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Include the subject's email in the subject name.\n")
    san_require_directory_guid: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the globally unique identifier (GUID) in the subject alternate name.\n')
    san_require_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the DNS in the subject alternate name.\n')
    san_require_domain_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the domain DNS in the subject alternate name.\n')
    san_require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Include the subject's email in the subject alternate name.\n")
    san_require_spn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the service principal name (SPN) in the subject alternate name.\n')
    san_require_upn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the user principal name (UPN) in the subject alternate name.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-subjectnameflagsv3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    subject_name_flags_v3_property = pcaconnectorad.CfnTemplate.SubjectNameFlagsV3Property(\n        require_common_name=False,\n        require_directory_path=False,\n        require_dns_as_cn=False,\n        require_email=False,\n        san_require_directory_guid=False,\n        san_require_dns=False,\n        san_require_domain_dns=False,\n        san_require_email=False,\n        san_require_spn=False,\n        san_require_upn=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['require_common_name', 'require_directory_path', 'require_dns_as_cn', 'require_email', 'san_require_directory_guid', 'san_require_dns', 'san_require_domain_dns', 'san_require_email', 'san_require_spn', 'san_require_upn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.SubjectNameFlagsV3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.SubjectNameFlagsV4Property
class CfnTemplate_SubjectNameFlagsV4PropertyDef(BaseStruct):
    require_common_name: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the common name in the subject name.\n')
    require_directory_path: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the directory path in the subject name.\n')
    require_dns_as_cn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the DNS as common name in the subject name.\n')
    require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Include the subject's email in the subject name.\n")
    san_require_directory_guid: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the globally unique identifier (GUID) in the subject alternate name.\n')
    san_require_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the DNS in the subject alternate name.\n')
    san_require_domain_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the domain DNS in the subject alternate name.\n')
    san_require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Include the subject's email in the subject alternate name.\n")
    san_require_spn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the service principal name (SPN) in the subject alternate name.\n')
    san_require_upn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Include the user principal name (UPN) in the subject alternate name.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-subjectnameflagsv4.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    subject_name_flags_v4_property = pcaconnectorad.CfnTemplate.SubjectNameFlagsV4Property(\n        require_common_name=False,\n        require_directory_path=False,\n        require_dns_as_cn=False,\n        require_email=False,\n        san_require_directory_guid=False,\n        san_require_dns=False,\n        san_require_domain_dns=False,\n        san_require_email=False,\n        san_require_spn=False,\n        san_require_upn=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['require_common_name', 'require_directory_path', 'require_dns_as_cn', 'require_email', 'san_require_directory_guid', 'san_require_dns', 'san_require_domain_dns', 'san_require_email', 'san_require_spn', 'san_require_upn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.SubjectNameFlagsV4Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.TemplateDefinitionProperty
class CfnTemplate_TemplateDefinitionPropertyDef(BaseStruct):
    template_v2: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_TemplateV2PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.\n')
    template_v3: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_TemplateV3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.\n')
    template_v4: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_TemplateV4PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-templatedefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    template_definition_property = pcaconnectorad.CfnTemplate.TemplateDefinitionProperty(\n        template_v2=pcaconnectorad.CfnTemplate.TemplateV2Property(\n            certificate_validity=pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n                renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                    period=123,\n                    period_type="periodType"\n                ),\n                validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                    period=123,\n                    period_type="periodType"\n                )\n            ),\n            enrollment_flags=pcaconnectorad.CfnTemplate.EnrollmentFlagsV2Property(\n                enable_key_reuse_on_nt_token_keyset_storage_full=False,\n                include_symmetric_algorithms=False,\n                no_security_extension=False,\n                remove_invalid_certificate_from_personal_store=False,\n                user_interaction_required=False\n            ),\n            extensions=pcaconnectorad.CfnTemplate.ExtensionsV2Property(\n                key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n                    usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                        data_encipherment=False,\n                        digital_signature=False,\n                        key_agreement=False,\n                        key_encipherment=False,\n                        non_repudiation=False\n                    ),\n\n                    # the properties below are optional\n                    critical=False\n                ),\n\n                # the properties below are optional\n                application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n                    policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                        policy_object_identifier="policyObjectIdentifier",\n                        policy_type="policyType"\n                    )],\n\n                    # the properties below are optional\n                    critical=False\n                )\n            ),\n            general_flags=pcaconnectorad.CfnTemplate.GeneralFlagsV2Property(\n                auto_enrollment=False,\n                machine_type=False\n            ),\n            private_key_attributes=pcaconnectorad.CfnTemplate.PrivateKeyAttributesV2Property(\n                key_spec="keySpec",\n                minimal_key_length=123,\n\n                # the properties below are optional\n                crypto_providers=["cryptoProviders"]\n            ),\n            private_key_flags=pcaconnectorad.CfnTemplate.PrivateKeyFlagsV2Property(\n                client_version="clientVersion",\n\n                # the properties below are optional\n                exportable_key=False,\n                strong_key_protection_required=False\n            ),\n            subject_name_flags=pcaconnectorad.CfnTemplate.SubjectNameFlagsV2Property(\n                require_common_name=False,\n                require_directory_path=False,\n                require_dns_as_cn=False,\n                require_email=False,\n                san_require_directory_guid=False,\n                san_require_dns=False,\n                san_require_domain_dns=False,\n                san_require_email=False,\n                san_require_spn=False,\n                san_require_upn=False\n            ),\n\n            # the properties below are optional\n            superseded_templates=["supersededTemplates"]\n        ),\n        template_v3=pcaconnectorad.CfnTemplate.TemplateV3Property(\n            certificate_validity=pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n                renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                    period=123,\n                    period_type="periodType"\n                ),\n                validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                    period=123,\n                    period_type="periodType"\n                )\n            ),\n            enrollment_flags=pcaconnectorad.CfnTemplate.EnrollmentFlagsV3Property(\n                enable_key_reuse_on_nt_token_keyset_storage_full=False,\n                include_symmetric_algorithms=False,\n                no_security_extension=False,\n                remove_invalid_certificate_from_personal_store=False,\n                user_interaction_required=False\n            ),\n            extensions=pcaconnectorad.CfnTemplate.ExtensionsV3Property(\n                key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n                    usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                        data_encipherment=False,\n                        digital_signature=False,\n                        key_agreement=False,\n                        key_encipherment=False,\n                        non_repudiation=False\n                    ),\n\n                    # the properties below are optional\n                    critical=False\n                ),\n\n                # the properties below are optional\n                application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n                    policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                        policy_object_identifier="policyObjectIdentifier",\n                        policy_type="policyType"\n                    )],\n\n                    # the properties below are optional\n                    critical=False\n                )\n            ),\n            general_flags=pcaconnectorad.CfnTemplate.GeneralFlagsV3Property(\n                auto_enrollment=False,\n                machine_type=False\n            ),\n            hash_algorithm="hashAlgorithm",\n            private_key_attributes=pcaconnectorad.CfnTemplate.PrivateKeyAttributesV3Property(\n                algorithm="algorithm",\n                key_spec="keySpec",\n                key_usage_property=pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty(\n                    property_flags=pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n                        decrypt=False,\n                        key_agreement=False,\n                        sign=False\n                    ),\n                    property_type="propertyType"\n                ),\n                minimal_key_length=123,\n\n                # the properties below are optional\n                crypto_providers=["cryptoProviders"]\n            ),\n            private_key_flags=pcaconnectorad.CfnTemplate.PrivateKeyFlagsV3Property(\n                client_version="clientVersion",\n\n                # the properties below are optional\n                exportable_key=False,\n                require_alternate_signature_algorithm=False,\n                strong_key_protection_required=False\n            ),\n            subject_name_flags=pcaconnectorad.CfnTemplate.SubjectNameFlagsV3Property(\n                require_common_name=False,\n                require_directory_path=False,\n                require_dns_as_cn=False,\n                require_email=False,\n                san_require_directory_guid=False,\n                san_require_dns=False,\n                san_require_domain_dns=False,\n                san_require_email=False,\n                san_require_spn=False,\n                san_require_upn=False\n            ),\n\n            # the properties below are optional\n            superseded_templates=["supersededTemplates"]\n        ),\n        template_v4=pcaconnectorad.CfnTemplate.TemplateV4Property(\n            certificate_validity=pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n                renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                    period=123,\n                    period_type="periodType"\n                ),\n                validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                    period=123,\n                    period_type="periodType"\n                )\n            ),\n            enrollment_flags=pcaconnectorad.CfnTemplate.EnrollmentFlagsV4Property(\n                enable_key_reuse_on_nt_token_keyset_storage_full=False,\n                include_symmetric_algorithms=False,\n                no_security_extension=False,\n                remove_invalid_certificate_from_personal_store=False,\n                user_interaction_required=False\n            ),\n            extensions=pcaconnectorad.CfnTemplate.ExtensionsV4Property(\n                key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n                    usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                        data_encipherment=False,\n                        digital_signature=False,\n                        key_agreement=False,\n                        key_encipherment=False,\n                        non_repudiation=False\n                    ),\n\n                    # the properties below are optional\n                    critical=False\n                ),\n\n                # the properties below are optional\n                application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n                    policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                        policy_object_identifier="policyObjectIdentifier",\n                        policy_type="policyType"\n                    )],\n\n                    # the properties below are optional\n                    critical=False\n                )\n            ),\n            general_flags=pcaconnectorad.CfnTemplate.GeneralFlagsV4Property(\n                auto_enrollment=False,\n                machine_type=False\n            ),\n            private_key_attributes=pcaconnectorad.CfnTemplate.PrivateKeyAttributesV4Property(\n                key_spec="keySpec",\n                minimal_key_length=123,\n\n                # the properties below are optional\n                algorithm="algorithm",\n                crypto_providers=["cryptoProviders"],\n                key_usage_property=pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty(\n                    property_flags=pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n                        decrypt=False,\n                        key_agreement=False,\n                        sign=False\n                    ),\n                    property_type="propertyType"\n                )\n            ),\n            private_key_flags=pcaconnectorad.CfnTemplate.PrivateKeyFlagsV4Property(\n                client_version="clientVersion",\n\n                # the properties below are optional\n                exportable_key=False,\n                require_alternate_signature_algorithm=False,\n                require_same_key_renewal=False,\n                strong_key_protection_required=False,\n                use_legacy_provider=False\n            ),\n            subject_name_flags=pcaconnectorad.CfnTemplate.SubjectNameFlagsV4Property(\n                require_common_name=False,\n                require_directory_path=False,\n                require_dns_as_cn=False,\n                require_email=False,\n                san_require_directory_guid=False,\n                san_require_dns=False,\n                san_require_domain_dns=False,\n                san_require_email=False,\n                san_require_spn=False,\n                san_require_upn=False\n            ),\n\n            # the properties below are optional\n            hash_algorithm="hashAlgorithm",\n            superseded_templates=["supersededTemplates"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['template_v2', 'template_v3', 'template_v4']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.TemplateDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.TemplateV2Property
class CfnTemplate_TemplateV2PropertyDef(BaseStruct):
    certificate_validity: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_CertificateValidityPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Certificate validity describes the validity and renewal periods of a certificate.\n')
    enrollment_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_EnrollmentFlagsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Enrollment flags describe the enrollment settings for certificates such as using the existing private key and deleting expired or revoked certificates.\n')
    extensions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ExtensionsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Extensions describe the key usage extensions and application policies for a template.\n')
    general_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_GeneralFlagsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='General flags describe whether the template is used for computers or users and if the template can be used with autoenrollment.\n')
    private_key_attributes: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyAttributesV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Private key attributes allow you to specify the minimal key length, key spec, and cryptographic providers for the private key of a certificate for v2 templates. V2 templates allow you to use Legacy Cryptographic Service Providers.\n')
    private_key_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyFlagsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Private key flags for v2 templates specify the client compatibility, if the private key can be exported, and if user input is required when using a private key.\n')
    subject_name_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_SubjectNameFlagsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Subject name flags describe the subject name and subject alternate name that is included in a certificate.\n')
    superseded_templates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='List of templates in Active Directory that are superseded by this template.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-templatev2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    template_v2_property = pcaconnectorad.CfnTemplate.TemplateV2Property(\n        certificate_validity=pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n            renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                period=123,\n                period_type="periodType"\n            ),\n            validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                period=123,\n                period_type="periodType"\n            )\n        ),\n        enrollment_flags=pcaconnectorad.CfnTemplate.EnrollmentFlagsV2Property(\n            enable_key_reuse_on_nt_token_keyset_storage_full=False,\n            include_symmetric_algorithms=False,\n            no_security_extension=False,\n            remove_invalid_certificate_from_personal_store=False,\n            user_interaction_required=False\n        ),\n        extensions=pcaconnectorad.CfnTemplate.ExtensionsV2Property(\n            key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n                usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                    data_encipherment=False,\n                    digital_signature=False,\n                    key_agreement=False,\n                    key_encipherment=False,\n                    non_repudiation=False\n                ),\n\n                # the properties below are optional\n                critical=False\n            ),\n\n            # the properties below are optional\n            application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n                policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                    policy_object_identifier="policyObjectIdentifier",\n                    policy_type="policyType"\n                )],\n\n                # the properties below are optional\n                critical=False\n            )\n        ),\n        general_flags=pcaconnectorad.CfnTemplate.GeneralFlagsV2Property(\n            auto_enrollment=False,\n            machine_type=False\n        ),\n        private_key_attributes=pcaconnectorad.CfnTemplate.PrivateKeyAttributesV2Property(\n            key_spec="keySpec",\n            minimal_key_length=123,\n\n            # the properties below are optional\n            crypto_providers=["cryptoProviders"]\n        ),\n        private_key_flags=pcaconnectorad.CfnTemplate.PrivateKeyFlagsV2Property(\n            client_version="clientVersion",\n\n            # the properties below are optional\n            exportable_key=False,\n            strong_key_protection_required=False\n        ),\n        subject_name_flags=pcaconnectorad.CfnTemplate.SubjectNameFlagsV2Property(\n            require_common_name=False,\n            require_directory_path=False,\n            require_dns_as_cn=False,\n            require_email=False,\n            san_require_directory_guid=False,\n            san_require_dns=False,\n            san_require_domain_dns=False,\n            san_require_email=False,\n            san_require_spn=False,\n            san_require_upn=False\n        ),\n\n        # the properties below are optional\n        superseded_templates=["supersededTemplates"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_validity', 'enrollment_flags', 'extensions', 'general_flags', 'private_key_attributes', 'private_key_flags', 'subject_name_flags', 'superseded_templates']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.TemplateV2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.TemplateV3Property
class CfnTemplate_TemplateV3PropertyDef(BaseStruct):
    certificate_validity: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_CertificateValidityPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Certificate validity describes the validity and renewal periods of a certificate.\n')
    enrollment_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_EnrollmentFlagsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Enrollment flags describe the enrollment settings for certificates such as using the existing private key and deleting expired or revoked certificates.\n')
    extensions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ExtensionsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Extensions describe the key usage extensions and application policies for a template.\n')
    general_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_GeneralFlagsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='General flags describe whether the template is used for computers or users and if the template can be used with autoenrollment.\n')
    hash_algorithm: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the hash algorithm used to hash the private key.\n')
    private_key_attributes: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyAttributesV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Private key attributes allow you to specify the algorithm, minimal key length, key spec, key usage, and cryptographic providers for the private key of a certificate for v3 templates. V3 templates allow you to use Key Storage Providers.\n')
    private_key_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyFlagsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Private key flags for v3 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, and if an alternate signature algorithm should be used.\n')
    subject_name_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_SubjectNameFlagsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Subject name flags describe the subject name and subject alternate name that is included in a certificate.\n')
    superseded_templates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='List of templates in Active Directory that are superseded by this template.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-templatev3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    template_v3_property = pcaconnectorad.CfnTemplate.TemplateV3Property(\n        certificate_validity=pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n            renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                period=123,\n                period_type="periodType"\n            ),\n            validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                period=123,\n                period_type="periodType"\n            )\n        ),\n        enrollment_flags=pcaconnectorad.CfnTemplate.EnrollmentFlagsV3Property(\n            enable_key_reuse_on_nt_token_keyset_storage_full=False,\n            include_symmetric_algorithms=False,\n            no_security_extension=False,\n            remove_invalid_certificate_from_personal_store=False,\n            user_interaction_required=False\n        ),\n        extensions=pcaconnectorad.CfnTemplate.ExtensionsV3Property(\n            key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n                usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                    data_encipherment=False,\n                    digital_signature=False,\n                    key_agreement=False,\n                    key_encipherment=False,\n                    non_repudiation=False\n                ),\n\n                # the properties below are optional\n                critical=False\n            ),\n\n            # the properties below are optional\n            application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n                policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                    policy_object_identifier="policyObjectIdentifier",\n                    policy_type="policyType"\n                )],\n\n                # the properties below are optional\n                critical=False\n            )\n        ),\n        general_flags=pcaconnectorad.CfnTemplate.GeneralFlagsV3Property(\n            auto_enrollment=False,\n            machine_type=False\n        ),\n        hash_algorithm="hashAlgorithm",\n        private_key_attributes=pcaconnectorad.CfnTemplate.PrivateKeyAttributesV3Property(\n            algorithm="algorithm",\n            key_spec="keySpec",\n            key_usage_property=pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty(\n                property_flags=pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n                    decrypt=False,\n                    key_agreement=False,\n                    sign=False\n                ),\n                property_type="propertyType"\n            ),\n            minimal_key_length=123,\n\n            # the properties below are optional\n            crypto_providers=["cryptoProviders"]\n        ),\n        private_key_flags=pcaconnectorad.CfnTemplate.PrivateKeyFlagsV3Property(\n            client_version="clientVersion",\n\n            # the properties below are optional\n            exportable_key=False,\n            require_alternate_signature_algorithm=False,\n            strong_key_protection_required=False\n        ),\n        subject_name_flags=pcaconnectorad.CfnTemplate.SubjectNameFlagsV3Property(\n            require_common_name=False,\n            require_directory_path=False,\n            require_dns_as_cn=False,\n            require_email=False,\n            san_require_directory_guid=False,\n            san_require_dns=False,\n            san_require_domain_dns=False,\n            san_require_email=False,\n            san_require_spn=False,\n            san_require_upn=False\n        ),\n\n        # the properties below are optional\n        superseded_templates=["supersededTemplates"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_validity', 'enrollment_flags', 'extensions', 'general_flags', 'hash_algorithm', 'private_key_attributes', 'private_key_flags', 'subject_name_flags', 'superseded_templates']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.TemplateV3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.TemplateV4Property
class CfnTemplate_TemplateV4PropertyDef(BaseStruct):
    certificate_validity: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_CertificateValidityPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Certificate validity describes the validity and renewal periods of a certificate.\n')
    enrollment_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_EnrollmentFlagsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Enrollment flags describe the enrollment settings for certificates using the existing private key and deleting expired or revoked certificates.\n')
    extensions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ExtensionsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Extensions describe the key usage extensions and application policies for a template.\n')
    general_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_GeneralFlagsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='General flags describe whether the template is used for computers or users and if the template can be used with autoenrollment.\n')
    private_key_attributes: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyAttributesV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Private key attributes allow you to specify the minimal key length, key spec, key usage, and cryptographic providers for the private key of a certificate for v4 templates. V4 templates allow you to use either Key Storage Providers or Legacy Cryptographic Service Providers. You specify the cryptography provider category in private key flags.\n')
    private_key_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyFlagsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Private key flags for v4 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, if an alternate signature algorithm should be used, and if certificates are renewed using the same private key.\n')
    subject_name_flags: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_SubjectNameFlagsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Subject name flags describe the subject name and subject alternate name that is included in a certificate.\n')
    hash_algorithm: typing.Optional[str] = pydantic.Field(None, description='Specifies the hash algorithm used to hash the private key. Hash algorithm can only be specified when using Key Storage Providers.\n')
    superseded_templates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='List of templates in Active Directory that are superseded by this template.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-templatev4.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    template_v4_property = pcaconnectorad.CfnTemplate.TemplateV4Property(\n        certificate_validity=pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n            renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                period=123,\n                period_type="periodType"\n            ),\n            validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                period=123,\n                period_type="periodType"\n            )\n        ),\n        enrollment_flags=pcaconnectorad.CfnTemplate.EnrollmentFlagsV4Property(\n            enable_key_reuse_on_nt_token_keyset_storage_full=False,\n            include_symmetric_algorithms=False,\n            no_security_extension=False,\n            remove_invalid_certificate_from_personal_store=False,\n            user_interaction_required=False\n        ),\n        extensions=pcaconnectorad.CfnTemplate.ExtensionsV4Property(\n            key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n                usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                    data_encipherment=False,\n                    digital_signature=False,\n                    key_agreement=False,\n                    key_encipherment=False,\n                    non_repudiation=False\n                ),\n\n                # the properties below are optional\n                critical=False\n            ),\n\n            # the properties below are optional\n            application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n                policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                    policy_object_identifier="policyObjectIdentifier",\n                    policy_type="policyType"\n                )],\n\n                # the properties below are optional\n                critical=False\n            )\n        ),\n        general_flags=pcaconnectorad.CfnTemplate.GeneralFlagsV4Property(\n            auto_enrollment=False,\n            machine_type=False\n        ),\n        private_key_attributes=pcaconnectorad.CfnTemplate.PrivateKeyAttributesV4Property(\n            key_spec="keySpec",\n            minimal_key_length=123,\n\n            # the properties below are optional\n            algorithm="algorithm",\n            crypto_providers=["cryptoProviders"],\n            key_usage_property=pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty(\n                property_flags=pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n                    decrypt=False,\n                    key_agreement=False,\n                    sign=False\n                ),\n                property_type="propertyType"\n            )\n        ),\n        private_key_flags=pcaconnectorad.CfnTemplate.PrivateKeyFlagsV4Property(\n            client_version="clientVersion",\n\n            # the properties below are optional\n            exportable_key=False,\n            require_alternate_signature_algorithm=False,\n            require_same_key_renewal=False,\n            strong_key_protection_required=False,\n            use_legacy_provider=False\n        ),\n        subject_name_flags=pcaconnectorad.CfnTemplate.SubjectNameFlagsV4Property(\n            require_common_name=False,\n            require_directory_path=False,\n            require_dns_as_cn=False,\n            require_email=False,\n            san_require_directory_guid=False,\n            san_require_dns=False,\n            san_require_domain_dns=False,\n            san_require_email=False,\n            san_require_spn=False,\n            san_require_upn=False\n        ),\n\n        # the properties below are optional\n        hash_algorithm="hashAlgorithm",\n        superseded_templates=["supersededTemplates"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_validity', 'enrollment_flags', 'extensions', 'general_flags', 'private_key_attributes', 'private_key_flags', 'subject_name_flags', 'hash_algorithm', 'superseded_templates']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.TemplateV4Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate.ValidityPeriodProperty
class CfnTemplate_ValidityPeriodPropertyDef(BaseStruct):
    period: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The numeric value for the validity period.\n')
    period_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unit of time. You can select hours, days, weeks, months, and years.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-template-validityperiod.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    validity_period_property = pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n        period=123,\n        period_type="periodType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['period', 'period_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate.ValidityPeriodProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntry.AccessRightsProperty
class CfnTemplateGroupAccessControlEntry_AccessRightsPropertyDef(BaseStruct):
    auto_enroll: typing.Optional[str] = pydantic.Field(None, description='Allow or deny an Active Directory group from autoenrolling certificates issued against a template. The Active Directory group must be allowed to enroll to allow autoenrollment\n')
    enroll: typing.Optional[str] = pydantic.Field(None, description='Allow or deny an Active Directory group from enrolling certificates issued against a template.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pcaconnectorad-templategroupaccesscontrolentry-accessrights.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    access_rights_property = pcaconnectorad.CfnTemplateGroupAccessControlEntry.AccessRightsProperty(\n        auto_enroll="autoEnroll",\n        enroll="enroll"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auto_enroll', 'enroll']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntry.AccessRightsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnConnector
class CfnConnectorDef(BaseCfnResource):
    certificate_authority_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the certificate authority being used.\n')
    directory_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Active Directory.\n')
    vpc_information: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnConnector_VpcInformationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information of the VPC and security group(s) used with the connector.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata assigned to a connector consisting of a key-value pair.')
    _init_params: typing.ClassVar[list[str]] = ['certificate_authority_arn', 'directory_id', 'vpc_information', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['VpcInformationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnConnector'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_pcaconnectorad.CfnConnectorDefConfig] = pydantic.Field(None)


class CfnConnectorDefConfig(pydantic.BaseModel):
    VpcInformationProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefVpcinformationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnConnectorDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnConnectorDefVpcinformationpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnConnectorDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnConnectorDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConnectorDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnConnectorDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConnectorDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnConnectorDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnConnectorDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnConnectorDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnConnectorDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnConnectorDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConnectorDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnConnectorDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnConnectorDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConnectorDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnDirectoryRegistration
class CfnDirectoryRegistrationDef(BaseCfnResource):
    directory_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Active Directory.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata assigned to a directory registration consisting of a key-value pair.')
    _init_params: typing.ClassVar[list[str]] = ['directory_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnDirectoryRegistration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefConfig] = pydantic.Field(None)


class CfnDirectoryRegistrationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnDirectoryRegistrationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDirectoryRegistrationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDirectoryRegistrationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDirectoryRegistrationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDirectoryRegistrationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDirectoryRegistrationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDirectoryRegistrationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDirectoryRegistrationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDirectoryRegistrationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDirectoryRegistrationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDirectoryRegistrationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDirectoryRegistrationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDirectoryRegistrationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDirectoryRegistrationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDirectoryRegistrationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnServicePrincipalName
class CfnServicePrincipalNameDef(BaseCfnResource):
    connector_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) that was returned when you called `CreateConnector.html <https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html>`_ .\n')
    directory_registration_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) that was returned when you called `CreateDirectoryRegistration <https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['connector_arn', 'directory_registration_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnServicePrincipalName'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_pcaconnectorad.CfnServicePrincipalNameDefConfig] = pydantic.Field(None)


class CfnServicePrincipalNameDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnServicePrincipalNameDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnServicePrincipalNameDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnServicePrincipalNameDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnServicePrincipalNameDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnServicePrincipalNameDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnServicePrincipalNameDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnServicePrincipalNameDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnServicePrincipalNameDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnServicePrincipalNameDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnServicePrincipalNameDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnServicePrincipalNameDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnServicePrincipalNameDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnServicePrincipalNameDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnServicePrincipalNameDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnServicePrincipalNameDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplate
class CfnTemplateDef(BaseCfnResource):
    connector_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) that was returned when you called `CreateConnector <https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html>`_ .\n')
    definition: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_TemplateDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the templates. Template names must be unique.\n')
    reenroll_all_certificate_holders: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='This setting allows the major version of a template to be increased automatically. All members of Active Directory groups that are allowed to enroll with a template will receive a new certificate issued using that template.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata assigned to a template consisting of a key-value pair.')
    _init_params: typing.ClassVar[list[str]] = ['connector_arn', 'definition', 'name', 'reenroll_all_certificate_holders', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ApplicationPoliciesProperty', 'ApplicationPolicyProperty', 'CertificateValidityProperty', 'EnrollmentFlagsV2Property', 'EnrollmentFlagsV3Property', 'EnrollmentFlagsV4Property', 'ExtensionsV2Property', 'ExtensionsV3Property', 'ExtensionsV4Property', 'GeneralFlagsV2Property', 'GeneralFlagsV3Property', 'GeneralFlagsV4Property', 'KeyUsageFlagsProperty', 'KeyUsageProperty', 'KeyUsagePropertyFlagsProperty', 'KeyUsagePropertyProperty', 'PrivateKeyAttributesV2Property', 'PrivateKeyAttributesV3Property', 'PrivateKeyAttributesV4Property', 'PrivateKeyFlagsV2Property', 'PrivateKeyFlagsV3Property', 'PrivateKeyFlagsV4Property', 'SubjectNameFlagsV2Property', 'SubjectNameFlagsV3Property', 'SubjectNameFlagsV4Property', 'TemplateDefinitionProperty', 'TemplateV2Property', 'TemplateV3Property', 'TemplateV4Property', 'ValidityPeriodProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_pcaconnectorad.CfnTemplateDefConfig] = pydantic.Field(None)


class CfnTemplateDefConfig(pydantic.BaseModel):
    ApplicationPoliciesProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefApplicationpoliciespropertyParams]] = pydantic.Field(None, description='')
    ApplicationPolicyProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefApplicationpolicypropertyParams]] = pydantic.Field(None, description='')
    CertificateValidityProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefCertificatevaliditypropertyParams]] = pydantic.Field(None, description='')
    EnrollmentFlagsV2Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefEnrollmentflagsv2PropertyParams]] = pydantic.Field(None, description='')
    EnrollmentFlagsV3Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefEnrollmentflagsv3PropertyParams]] = pydantic.Field(None, description='')
    EnrollmentFlagsV4Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefEnrollmentflagsv4PropertyParams]] = pydantic.Field(None, description='')
    ExtensionsV2Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefExtensionsv2PropertyParams]] = pydantic.Field(None, description='')
    ExtensionsV3Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefExtensionsv3PropertyParams]] = pydantic.Field(None, description='')
    ExtensionsV4Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefExtensionsv4PropertyParams]] = pydantic.Field(None, description='')
    GeneralFlagsV2Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefGeneralflagsv2PropertyParams]] = pydantic.Field(None, description='')
    GeneralFlagsV3Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefGeneralflagsv3PropertyParams]] = pydantic.Field(None, description='')
    GeneralFlagsV4Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefGeneralflagsv4PropertyParams]] = pydantic.Field(None, description='')
    KeyUsageFlagsProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefKeyusageflagspropertyParams]] = pydantic.Field(None, description='')
    KeyUsageProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefKeyusagepropertyParams]] = pydantic.Field(None, description='')
    KeyUsagePropertyFlagsProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefKeyusagepropertyflagspropertyParams]] = pydantic.Field(None, description='')
    KeyUsagePropertyProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefKeyusagepropertypropertyParams]] = pydantic.Field(None, description='')
    PrivateKeyAttributesV2Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefPrivatekeyattributesv2PropertyParams]] = pydantic.Field(None, description='')
    PrivateKeyAttributesV3Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefPrivatekeyattributesv3PropertyParams]] = pydantic.Field(None, description='')
    PrivateKeyAttributesV4Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefPrivatekeyattributesv4PropertyParams]] = pydantic.Field(None, description='')
    PrivateKeyFlagsV2Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefPrivatekeyflagsv2PropertyParams]] = pydantic.Field(None, description='')
    PrivateKeyFlagsV3Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefPrivatekeyflagsv3PropertyParams]] = pydantic.Field(None, description='')
    PrivateKeyFlagsV4Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefPrivatekeyflagsv4PropertyParams]] = pydantic.Field(None, description='')
    SubjectNameFlagsV2Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefSubjectnameflagsv2PropertyParams]] = pydantic.Field(None, description='')
    SubjectNameFlagsV3Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefSubjectnameflagsv3PropertyParams]] = pydantic.Field(None, description='')
    SubjectNameFlagsV4Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefSubjectnameflagsv4PropertyParams]] = pydantic.Field(None, description='')
    TemplateDefinitionProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefTemplatedefinitionpropertyParams]] = pydantic.Field(None, description='')
    TemplateV2Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefTemplatev2PropertyParams]] = pydantic.Field(None, description='')
    TemplateV3Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefTemplatev3PropertyParams]] = pydantic.Field(None, description='')
    TemplateV4Property: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefTemplatev4PropertyParams]] = pydantic.Field(None, description='')
    ValidityPeriodProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefValidityperiodpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnTemplateDefApplicationpoliciespropertyParams(pydantic.BaseModel):
    policies: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ApplicationPolicyPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    critical: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefApplicationpolicypropertyParams(pydantic.BaseModel):
    policy_object_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    policy_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefCertificatevaliditypropertyParams(pydantic.BaseModel):
    renewal_period: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ValidityPeriodPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    validity_period: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ValidityPeriodPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnTemplateDefEnrollmentflagsv2PropertyParams(pydantic.BaseModel):
    enable_key_reuse_on_nt_token_keyset_storage_full: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    include_symmetric_algorithms: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    no_security_extension: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    remove_invalid_certificate_from_personal_store: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    user_interaction_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefEnrollmentflagsv3PropertyParams(pydantic.BaseModel):
    enable_key_reuse_on_nt_token_keyset_storage_full: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    include_symmetric_algorithms: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    no_security_extension: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    remove_invalid_certificate_from_personal_store: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    user_interaction_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefEnrollmentflagsv4PropertyParams(pydantic.BaseModel):
    enable_key_reuse_on_nt_token_keyset_storage_full: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    include_symmetric_algorithms: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    no_security_extension: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    remove_invalid_certificate_from_personal_store: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    user_interaction_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefExtensionsv2PropertyParams(pydantic.BaseModel):
    key_usage: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    application_policies: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ApplicationPoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefExtensionsv3PropertyParams(pydantic.BaseModel):
    key_usage: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    application_policies: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ApplicationPoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefExtensionsv4PropertyParams(pydantic.BaseModel):
    key_usage: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    application_policies: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ApplicationPoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefGeneralflagsv2PropertyParams(pydantic.BaseModel):
    auto_enrollment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    machine_type: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefGeneralflagsv3PropertyParams(pydantic.BaseModel):
    auto_enrollment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    machine_type: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefGeneralflagsv4PropertyParams(pydantic.BaseModel):
    auto_enrollment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    machine_type: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefKeyusageflagspropertyParams(pydantic.BaseModel):
    data_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    digital_signature: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    key_agreement: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    key_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    non_repudiation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefKeyusagepropertyParams(pydantic.BaseModel):
    usage_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsageFlagsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    critical: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefKeyusagepropertyflagspropertyParams(pydantic.BaseModel):
    decrypt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    key_agreement: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefKeyusagepropertypropertyParams(pydantic.BaseModel):
    property_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyFlagsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    property_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefPrivatekeyattributesv2PropertyParams(pydantic.BaseModel):
    key_spec: str = pydantic.Field(..., description='')
    minimal_key_length: typing.Union[int, float] = pydantic.Field(..., description='')
    crypto_providers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefPrivatekeyattributesv3PropertyParams(pydantic.BaseModel):
    algorithm: str = pydantic.Field(..., description='')
    key_spec: str = pydantic.Field(..., description='')
    key_usage_property: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    minimal_key_length: typing.Union[int, float] = pydantic.Field(..., description='')
    crypto_providers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefPrivatekeyattributesv4PropertyParams(pydantic.BaseModel):
    key_spec: str = pydantic.Field(..., description='')
    minimal_key_length: typing.Union[int, float] = pydantic.Field(..., description='')
    algorithm: typing.Optional[str] = pydantic.Field(None, description='')
    crypto_providers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    key_usage_property: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefPrivatekeyflagsv2PropertyParams(pydantic.BaseModel):
    client_version: str = pydantic.Field(..., description='')
    exportable_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    strong_key_protection_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefPrivatekeyflagsv3PropertyParams(pydantic.BaseModel):
    client_version: str = pydantic.Field(..., description='')
    exportable_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_alternate_signature_algorithm: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    strong_key_protection_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefPrivatekeyflagsv4PropertyParams(pydantic.BaseModel):
    client_version: str = pydantic.Field(..., description='')
    exportable_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_alternate_signature_algorithm: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_same_key_renewal: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    strong_key_protection_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    use_legacy_provider: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefSubjectnameflagsv2PropertyParams(pydantic.BaseModel):
    require_common_name: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_directory_path: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_dns_as_cn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_directory_guid: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_domain_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_spn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_upn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefSubjectnameflagsv3PropertyParams(pydantic.BaseModel):
    require_common_name: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_directory_path: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_dns_as_cn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_directory_guid: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_domain_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_spn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_upn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefSubjectnameflagsv4PropertyParams(pydantic.BaseModel):
    require_common_name: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_directory_path: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_dns_as_cn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_directory_guid: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_domain_dns: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_email: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_spn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    san_require_upn: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefTemplatedefinitionpropertyParams(pydantic.BaseModel):
    template_v2: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_TemplateV2PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    template_v3: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_TemplateV3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    template_v4: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_TemplateV4PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefTemplatev2PropertyParams(pydantic.BaseModel):
    certificate_validity: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_CertificateValidityPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enrollment_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_EnrollmentFlagsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    extensions: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ExtensionsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    general_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_GeneralFlagsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    private_key_attributes: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyAttributesV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    private_key_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyFlagsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    subject_name_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_SubjectNameFlagsV2PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    superseded_templates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefTemplatev3PropertyParams(pydantic.BaseModel):
    certificate_validity: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_CertificateValidityPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enrollment_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_EnrollmentFlagsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    extensions: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ExtensionsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    general_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_GeneralFlagsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    hash_algorithm: str = pydantic.Field(..., description='')
    private_key_attributes: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyAttributesV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    private_key_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyFlagsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    subject_name_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_SubjectNameFlagsV3PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    superseded_templates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefTemplatev4PropertyParams(pydantic.BaseModel):
    certificate_validity: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_CertificateValidityPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enrollment_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_EnrollmentFlagsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    extensions: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_ExtensionsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    general_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_GeneralFlagsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    private_key_attributes: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyAttributesV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    private_key_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyFlagsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    subject_name_flags: typing.Union[models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_SubjectNameFlagsV4PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    hash_algorithm: typing.Optional[str] = pydantic.Field(None, description='')
    superseded_templates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefValidityperiodpropertyParams(pydantic.BaseModel):
    period: typing.Union[int, float] = pydantic.Field(..., description='')
    period_type: str = pydantic.Field(..., description='')
    ...

class CfnTemplateDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnTemplateDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTemplateDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnTemplateDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTemplateDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnTemplateDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnTemplateDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnTemplateDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnTemplateDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnTemplateDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTemplateDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnTemplateDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnTemplateDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTemplateDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntry
class CfnTemplateGroupAccessControlEntryDef(BaseCfnResource):
    access_rights: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntry_AccessRightsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Permissions to allow or deny an Active Directory group to enroll or autoenroll certificates issued against a template.\n')
    group_display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the Active Directory group. This name does not need to match the group name in Active Directory.\n')
    group_security_identifier: typing.Optional[str] = pydantic.Field(None, description='Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".\n')
    template_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) that was returned when you called `CreateTemplate <https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['access_rights', 'group_display_name', 'group_security_identifier', 'template_arn']
    _method_names: typing.ClassVar[list[str]] = ['AccessRightsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntry'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefConfig] = pydantic.Field(None)


class CfnTemplateGroupAccessControlEntryDefConfig(pydantic.BaseModel):
    AccessRightsProperty: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefAccessrightspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnTemplateGroupAccessControlEntryDefAccessrightspropertyParams(pydantic.BaseModel):
    auto_enroll: typing.Optional[str] = pydantic.Field(None, description='')
    enroll: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnTemplateGroupAccessControlEntryDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnTemplateGroupAccessControlEntryDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTemplateGroupAccessControlEntryDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnTemplateGroupAccessControlEntryDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTemplateGroupAccessControlEntryDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnTemplateGroupAccessControlEntryDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnTemplateGroupAccessControlEntryDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnTemplateGroupAccessControlEntryDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnTemplateGroupAccessControlEntryDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnTemplateGroupAccessControlEntryDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTemplateGroupAccessControlEntryDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnTemplateGroupAccessControlEntryDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnTemplateGroupAccessControlEntryDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTemplateGroupAccessControlEntryDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnConnectorProps
class CfnConnectorPropsDef(BaseCfnProperty):
    certificate_authority_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the certificate authority being used.\n')
    directory_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Active Directory.\n')
    vpc_information: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnConnector_VpcInformationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information of the VPC and security group(s) used with the connector.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata assigned to a connector consisting of a key-value pair.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pcaconnectorad-connector.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    cfn_connector_props = pcaconnectorad.CfnConnectorProps(\n        certificate_authority_arn="certificateAuthorityArn",\n        directory_id="directoryId",\n        vpc_information=pcaconnectorad.CfnConnector.VpcInformationProperty(\n            security_group_ids=["securityGroupIds"]\n        ),\n\n        # the properties below are optional\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_authority_arn', 'directory_id', 'vpc_information', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnConnectorProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnDirectoryRegistrationProps
class CfnDirectoryRegistrationPropsDef(BaseCfnProperty):
    directory_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Active Directory.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata assigned to a directory registration consisting of a key-value pair.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pcaconnectorad-directoryregistration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    cfn_directory_registration_props = pcaconnectorad.CfnDirectoryRegistrationProps(\n        directory_id="directoryId",\n\n        # the properties below are optional\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['directory_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnDirectoryRegistrationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnServicePrincipalNameProps
class CfnServicePrincipalNamePropsDef(BaseCfnProperty):
    connector_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) that was returned when you called `CreateConnector.html <https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html>`_ .\n')
    directory_registration_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) that was returned when you called `CreateDirectoryRegistration <https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pcaconnectorad-serviceprincipalname.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    cfn_service_principal_name_props = pcaconnectorad.CfnServicePrincipalNameProps(\n        connector_arn="connectorArn",\n        directory_registration_arn="directoryRegistrationArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connector_arn', 'directory_registration_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnServicePrincipalNameProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryProps
class CfnTemplateGroupAccessControlEntryPropsDef(BaseCfnProperty):
    access_rights: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntry_AccessRightsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Permissions to allow or deny an Active Directory group to enroll or autoenroll certificates issued against a template.\n')
    group_display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the Active Directory group. This name does not need to match the group name in Active Directory.\n')
    group_security_identifier: typing.Optional[str] = pydantic.Field(None, description='Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".\n')
    template_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) that was returned when you called `CreateTemplate <https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pcaconnectorad-templategroupaccesscontrolentry.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    cfn_template_group_access_control_entry_props = pcaconnectorad.CfnTemplateGroupAccessControlEntryProps(\n        access_rights=pcaconnectorad.CfnTemplateGroupAccessControlEntry.AccessRightsProperty(\n            auto_enroll="autoEnroll",\n            enroll="enroll"\n        ),\n        group_display_name="groupDisplayName",\n\n        # the properties below are optional\n        group_security_identifier="groupSecurityIdentifier",\n        template_arn="templateArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_rights', 'group_display_name', 'group_security_identifier', 'template_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pcaconnectorad.CfnTemplateProps
class CfnTemplatePropsDef(BaseCfnProperty):
    connector_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) that was returned when you called `CreateConnector <https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html>`_ .\n')
    definition: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pcaconnectorad.CfnTemplate_TemplateDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the templates. Template names must be unique.\n')
    reenroll_all_certificate_holders: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='This setting allows the major version of a template to be increased automatically. All members of Active Directory groups that are allowed to enroll with a template will receive a new certificate issued using that template.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata assigned to a template consisting of a key-value pair.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pcaconnectorad-template.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pcaconnectorad as pcaconnectorad\n\n    cfn_template_props = pcaconnectorad.CfnTemplateProps(\n        connector_arn="connectorArn",\n        definition=pcaconnectorad.CfnTemplate.TemplateDefinitionProperty(\n            template_v2=pcaconnectorad.CfnTemplate.TemplateV2Property(\n                certificate_validity=pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n                    renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                        period=123,\n                        period_type="periodType"\n                    ),\n                    validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                        period=123,\n                        period_type="periodType"\n                    )\n                ),\n                enrollment_flags=pcaconnectorad.CfnTemplate.EnrollmentFlagsV2Property(\n                    enable_key_reuse_on_nt_token_keyset_storage_full=False,\n                    include_symmetric_algorithms=False,\n                    no_security_extension=False,\n                    remove_invalid_certificate_from_personal_store=False,\n                    user_interaction_required=False\n                ),\n                extensions=pcaconnectorad.CfnTemplate.ExtensionsV2Property(\n                    key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n                        usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                            data_encipherment=False,\n                            digital_signature=False,\n                            key_agreement=False,\n                            key_encipherment=False,\n                            non_repudiation=False\n                        ),\n\n                        # the properties below are optional\n                        critical=False\n                    ),\n\n                    # the properties below are optional\n                    application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n                        policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                            policy_object_identifier="policyObjectIdentifier",\n                            policy_type="policyType"\n                        )],\n\n                        # the properties below are optional\n                        critical=False\n                    )\n                ),\n                general_flags=pcaconnectorad.CfnTemplate.GeneralFlagsV2Property(\n                    auto_enrollment=False,\n                    machine_type=False\n                ),\n                private_key_attributes=pcaconnectorad.CfnTemplate.PrivateKeyAttributesV2Property(\n                    key_spec="keySpec",\n                    minimal_key_length=123,\n\n                    # the properties below are optional\n                    crypto_providers=["cryptoProviders"]\n                ),\n                private_key_flags=pcaconnectorad.CfnTemplate.PrivateKeyFlagsV2Property(\n                    client_version="clientVersion",\n\n                    # the properties below are optional\n                    exportable_key=False,\n                    strong_key_protection_required=False\n                ),\n                subject_name_flags=pcaconnectorad.CfnTemplate.SubjectNameFlagsV2Property(\n                    require_common_name=False,\n                    require_directory_path=False,\n                    require_dns_as_cn=False,\n                    require_email=False,\n                    san_require_directory_guid=False,\n                    san_require_dns=False,\n                    san_require_domain_dns=False,\n                    san_require_email=False,\n                    san_require_spn=False,\n                    san_require_upn=False\n                ),\n\n                # the properties below are optional\n                superseded_templates=["supersededTemplates"]\n            ),\n            template_v3=pcaconnectorad.CfnTemplate.TemplateV3Property(\n                certificate_validity=pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n                    renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                        period=123,\n                        period_type="periodType"\n                    ),\n                    validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                        period=123,\n                        period_type="periodType"\n                    )\n                ),\n                enrollment_flags=pcaconnectorad.CfnTemplate.EnrollmentFlagsV3Property(\n                    enable_key_reuse_on_nt_token_keyset_storage_full=False,\n                    include_symmetric_algorithms=False,\n                    no_security_extension=False,\n                    remove_invalid_certificate_from_personal_store=False,\n                    user_interaction_required=False\n                ),\n                extensions=pcaconnectorad.CfnTemplate.ExtensionsV3Property(\n                    key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n                        usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                            data_encipherment=False,\n                            digital_signature=False,\n                            key_agreement=False,\n                            key_encipherment=False,\n                            non_repudiation=False\n                        ),\n\n                        # the properties below are optional\n                        critical=False\n                    ),\n\n                    # the properties below are optional\n                    application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n                        policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                            policy_object_identifier="policyObjectIdentifier",\n                            policy_type="policyType"\n                        )],\n\n                        # the properties below are optional\n                        critical=False\n                    )\n                ),\n                general_flags=pcaconnectorad.CfnTemplate.GeneralFlagsV3Property(\n                    auto_enrollment=False,\n                    machine_type=False\n                ),\n                hash_algorithm="hashAlgorithm",\n                private_key_attributes=pcaconnectorad.CfnTemplate.PrivateKeyAttributesV3Property(\n                    algorithm="algorithm",\n                    key_spec="keySpec",\n                    key_usage_property=pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty(\n                        property_flags=pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n                            decrypt=False,\n                            key_agreement=False,\n                            sign=False\n                        ),\n                        property_type="propertyType"\n                    ),\n                    minimal_key_length=123,\n\n                    # the properties below are optional\n                    crypto_providers=["cryptoProviders"]\n                ),\n                private_key_flags=pcaconnectorad.CfnTemplate.PrivateKeyFlagsV3Property(\n                    client_version="clientVersion",\n\n                    # the properties below are optional\n                    exportable_key=False,\n                    require_alternate_signature_algorithm=False,\n                    strong_key_protection_required=False\n                ),\n                subject_name_flags=pcaconnectorad.CfnTemplate.SubjectNameFlagsV3Property(\n                    require_common_name=False,\n                    require_directory_path=False,\n                    require_dns_as_cn=False,\n                    require_email=False,\n                    san_require_directory_guid=False,\n                    san_require_dns=False,\n                    san_require_domain_dns=False,\n                    san_require_email=False,\n                    san_require_spn=False,\n                    san_require_upn=False\n                ),\n\n                # the properties below are optional\n                superseded_templates=["supersededTemplates"]\n            ),\n            template_v4=pcaconnectorad.CfnTemplate.TemplateV4Property(\n                certificate_validity=pcaconnectorad.CfnTemplate.CertificateValidityProperty(\n                    renewal_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                        period=123,\n                        period_type="periodType"\n                    ),\n                    validity_period=pcaconnectorad.CfnTemplate.ValidityPeriodProperty(\n                        period=123,\n                        period_type="periodType"\n                    )\n                ),\n                enrollment_flags=pcaconnectorad.CfnTemplate.EnrollmentFlagsV4Property(\n                    enable_key_reuse_on_nt_token_keyset_storage_full=False,\n                    include_symmetric_algorithms=False,\n                    no_security_extension=False,\n                    remove_invalid_certificate_from_personal_store=False,\n                    user_interaction_required=False\n                ),\n                extensions=pcaconnectorad.CfnTemplate.ExtensionsV4Property(\n                    key_usage=pcaconnectorad.CfnTemplate.KeyUsageProperty(\n                        usage_flags=pcaconnectorad.CfnTemplate.KeyUsageFlagsProperty(\n                            data_encipherment=False,\n                            digital_signature=False,\n                            key_agreement=False,\n                            key_encipherment=False,\n                            non_repudiation=False\n                        ),\n\n                        # the properties below are optional\n                        critical=False\n                    ),\n\n                    # the properties below are optional\n                    application_policies=pcaconnectorad.CfnTemplate.ApplicationPoliciesProperty(\n                        policies=[pcaconnectorad.CfnTemplate.ApplicationPolicyProperty(\n                            policy_object_identifier="policyObjectIdentifier",\n                            policy_type="policyType"\n                        )],\n\n                        # the properties below are optional\n                        critical=False\n                    )\n                ),\n                general_flags=pcaconnectorad.CfnTemplate.GeneralFlagsV4Property(\n                    auto_enrollment=False,\n                    machine_type=False\n                ),\n                private_key_attributes=pcaconnectorad.CfnTemplate.PrivateKeyAttributesV4Property(\n                    key_spec="keySpec",\n                    minimal_key_length=123,\n\n                    # the properties below are optional\n                    algorithm="algorithm",\n                    crypto_providers=["cryptoProviders"],\n                    key_usage_property=pcaconnectorad.CfnTemplate.KeyUsagePropertyProperty(\n                        property_flags=pcaconnectorad.CfnTemplate.KeyUsagePropertyFlagsProperty(\n                            decrypt=False,\n                            key_agreement=False,\n                            sign=False\n                        ),\n                        property_type="propertyType"\n                    )\n                ),\n                private_key_flags=pcaconnectorad.CfnTemplate.PrivateKeyFlagsV4Property(\n                    client_version="clientVersion",\n\n                    # the properties below are optional\n                    exportable_key=False,\n                    require_alternate_signature_algorithm=False,\n                    require_same_key_renewal=False,\n                    strong_key_protection_required=False,\n                    use_legacy_provider=False\n                ),\n                subject_name_flags=pcaconnectorad.CfnTemplate.SubjectNameFlagsV4Property(\n                    require_common_name=False,\n                    require_directory_path=False,\n                    require_dns_as_cn=False,\n                    require_email=False,\n                    san_require_directory_guid=False,\n                    san_require_dns=False,\n                    san_require_domain_dns=False,\n                    san_require_email=False,\n                    san_require_spn=False,\n                    san_require_upn=False\n                ),\n\n                # the properties below are optional\n                hash_algorithm="hashAlgorithm",\n                superseded_templates=["supersededTemplates"]\n            )\n        ),\n        name="name",\n\n        # the properties below are optional\n        reenroll_all_certificate_holders=False,\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connector_arn', 'definition', 'name', 'reenroll_all_certificate_holders', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pcaconnectorad.CfnTemplateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnConnector_VpcInformationProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnConnector_VpcInformationPropertyDef]] = pydantic.Field(None)
    CfnTemplate_ApplicationPoliciesProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_ApplicationPoliciesPropertyDef]] = pydantic.Field(None)
    CfnTemplate_ApplicationPolicyProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_ApplicationPolicyPropertyDef]] = pydantic.Field(None)
    CfnTemplate_CertificateValidityProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_CertificateValidityPropertyDef]] = pydantic.Field(None)
    CfnTemplate_EnrollmentFlagsV2Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_EnrollmentFlagsV2PropertyDef]] = pydantic.Field(None)
    CfnTemplate_EnrollmentFlagsV3Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_EnrollmentFlagsV3PropertyDef]] = pydantic.Field(None)
    CfnTemplate_EnrollmentFlagsV4Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_EnrollmentFlagsV4PropertyDef]] = pydantic.Field(None)
    CfnTemplate_ExtensionsV2Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_ExtensionsV2PropertyDef]] = pydantic.Field(None)
    CfnTemplate_ExtensionsV3Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_ExtensionsV3PropertyDef]] = pydantic.Field(None)
    CfnTemplate_ExtensionsV4Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_ExtensionsV4PropertyDef]] = pydantic.Field(None)
    CfnTemplate_GeneralFlagsV2Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_GeneralFlagsV2PropertyDef]] = pydantic.Field(None)
    CfnTemplate_GeneralFlagsV3Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_GeneralFlagsV3PropertyDef]] = pydantic.Field(None)
    CfnTemplate_GeneralFlagsV4Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_GeneralFlagsV4PropertyDef]] = pydantic.Field(None)
    CfnTemplate_KeyUsageFlagsProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_KeyUsageFlagsPropertyDef]] = pydantic.Field(None)
    CfnTemplate_KeyUsageProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyDef]] = pydantic.Field(None)
    CfnTemplate_KeyUsagePropertyFlagsProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyFlagsPropertyDef]] = pydantic.Field(None)
    CfnTemplate_KeyUsagePropertyProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_KeyUsagePropertyPropertyDef]] = pydantic.Field(None)
    CfnTemplate_PrivateKeyAttributesV2Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyAttributesV2PropertyDef]] = pydantic.Field(None)
    CfnTemplate_PrivateKeyAttributesV3Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyAttributesV3PropertyDef]] = pydantic.Field(None)
    CfnTemplate_PrivateKeyAttributesV4Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyAttributesV4PropertyDef]] = pydantic.Field(None)
    CfnTemplate_PrivateKeyFlagsV2Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyFlagsV2PropertyDef]] = pydantic.Field(None)
    CfnTemplate_PrivateKeyFlagsV3Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyFlagsV3PropertyDef]] = pydantic.Field(None)
    CfnTemplate_PrivateKeyFlagsV4Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_PrivateKeyFlagsV4PropertyDef]] = pydantic.Field(None)
    CfnTemplate_SubjectNameFlagsV2Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_SubjectNameFlagsV2PropertyDef]] = pydantic.Field(None)
    CfnTemplate_SubjectNameFlagsV3Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_SubjectNameFlagsV3PropertyDef]] = pydantic.Field(None)
    CfnTemplate_SubjectNameFlagsV4Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_SubjectNameFlagsV4PropertyDef]] = pydantic.Field(None)
    CfnTemplate_TemplateDefinitionProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_TemplateDefinitionPropertyDef]] = pydantic.Field(None)
    CfnTemplate_TemplateV2Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_TemplateV2PropertyDef]] = pydantic.Field(None)
    CfnTemplate_TemplateV3Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_TemplateV3PropertyDef]] = pydantic.Field(None)
    CfnTemplate_TemplateV4Property: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_TemplateV4PropertyDef]] = pydantic.Field(None)
    CfnTemplate_ValidityPeriodProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplate_ValidityPeriodPropertyDef]] = pydantic.Field(None)
    CfnTemplateGroupAccessControlEntry_AccessRightsProperty: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntry_AccessRightsPropertyDef]] = pydantic.Field(None)
    CfnConnector: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnConnectorDef]] = pydantic.Field(None)
    CfnDirectoryRegistration: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnDirectoryRegistrationDef]] = pydantic.Field(None)
    CfnServicePrincipalName: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnServicePrincipalNameDef]] = pydantic.Field(None)
    CfnTemplate: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplateDef]] = pydantic.Field(None)
    CfnTemplateGroupAccessControlEntry: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryDef]] = pydantic.Field(None)
    CfnConnectorProps: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnConnectorPropsDef]] = pydantic.Field(None)
    CfnDirectoryRegistrationProps: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnDirectoryRegistrationPropsDef]] = pydantic.Field(None)
    CfnServicePrincipalNameProps: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnServicePrincipalNamePropsDef]] = pydantic.Field(None)
    CfnTemplateGroupAccessControlEntryProps: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplateGroupAccessControlEntryPropsDef]] = pydantic.Field(None)
    CfnTemplateProps: typing.Optional[dict[str, models.aws_pcaconnectorad.CfnTemplatePropsDef]] = pydantic.Field(None)
    ...

import models
