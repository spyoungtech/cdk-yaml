from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_cloudfront.AllowedMethods
class AllowedMethodsDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.AllowedMethods'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CacheCookieBehavior
class CacheCookieBehaviorDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['all', 'allow_list', 'deny_list', 'none']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CacheCookieBehavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CacheCookieBehaviorDefConfig] = pydantic.Field(None)


class CacheCookieBehaviorDefConfig(pydantic.BaseModel):
    all: typing.Optional[list[CacheCookieBehaviorDefAllParams]] = pydantic.Field(None, description='All cookies in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.')
    allow_list: typing.Optional[list[CacheCookieBehaviorDefAllowListParams]] = pydantic.Field(None, description='Only the provided ``cookies`` are included in the cache key and automatically included in requests that CloudFront sends to the origin.')
    deny_list: typing.Optional[list[CacheCookieBehaviorDefDenyListParams]] = pydantic.Field(None, description='All cookies except the provided ``cookies`` are included in the cache key and automatically included in requests that CloudFront sends to the origin.')
    none: typing.Optional[list[CacheCookieBehaviorDefNoneParams]] = pydantic.Field(None, description='Cookies in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin.')

class CacheCookieBehaviorDefAllParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.CacheCookieBehaviorDefConfig]] = pydantic.Field(None)
    ...

class CacheCookieBehaviorDefAllowListParams(pydantic.BaseModel):
    cookies: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.CacheCookieBehaviorDefConfig]] = pydantic.Field(None)
    ...

class CacheCookieBehaviorDefDenyListParams(pydantic.BaseModel):
    cookies: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.CacheCookieBehaviorDefConfig]] = pydantic.Field(None)
    ...

class CacheCookieBehaviorDefNoneParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.CacheCookieBehaviorDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CachedMethods
class CachedMethodsDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CachedMethods'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CacheHeaderBehavior
class CacheHeaderBehaviorDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['allow_list', 'none']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CacheHeaderBehavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CacheHeaderBehaviorDefConfig] = pydantic.Field(None)


class CacheHeaderBehaviorDefConfig(pydantic.BaseModel):
    allow_list: typing.Optional[list[CacheHeaderBehaviorDefAllowListParams]] = pydantic.Field(None, description='Listed headers are included in the cache key and are automatically included in requests that CloudFront sends to the origin.')
    none: typing.Optional[list[CacheHeaderBehaviorDefNoneParams]] = pydantic.Field(None, description='HTTP headers are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin.')

class CacheHeaderBehaviorDefAllowListParams(pydantic.BaseModel):
    headers: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.CacheHeaderBehaviorDefConfig]] = pydantic.Field(None)
    ...

class CacheHeaderBehaviorDefNoneParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.CacheHeaderBehaviorDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CacheQueryStringBehavior
class CacheQueryStringBehaviorDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['all', 'allow_list', 'deny_list', 'none']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CacheQueryStringBehavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CacheQueryStringBehaviorDefConfig] = pydantic.Field(None)


class CacheQueryStringBehaviorDefConfig(pydantic.BaseModel):
    all: typing.Optional[list[CacheQueryStringBehaviorDefAllParams]] = pydantic.Field(None, description='All query strings in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.')
    allow_list: typing.Optional[list[CacheQueryStringBehaviorDefAllowListParams]] = pydantic.Field(None, description='Only the provided ``queryStrings`` are included in the cache key and automatically included in requests that CloudFront sends to the origin.')
    deny_list: typing.Optional[list[CacheQueryStringBehaviorDefDenyListParams]] = pydantic.Field(None, description='All query strings except the provided ``queryStrings`` are included in the cache key and automatically included in requests that CloudFront sends to the origin.')
    none: typing.Optional[list[CacheQueryStringBehaviorDefNoneParams]] = pydantic.Field(None, description='Query strings in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin.')

class CacheQueryStringBehaviorDefAllParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.CacheQueryStringBehaviorDefConfig]] = pydantic.Field(None)
    ...

class CacheQueryStringBehaviorDefAllowListParams(pydantic.BaseModel):
    query_strings: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.CacheQueryStringBehaviorDefConfig]] = pydantic.Field(None)
    ...

class CacheQueryStringBehaviorDefDenyListParams(pydantic.BaseModel):
    query_strings: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.CacheQueryStringBehaviorDefConfig]] = pydantic.Field(None)
    ...

class CacheQueryStringBehaviorDefNoneParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.CacheQueryStringBehaviorDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.FunctionCode
class FunctionCodeDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = ['render']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_file', 'from_inline']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.FunctionCode'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[FunctionCodeDefConfig] = pydantic.Field(None)


class FunctionCodeDefConfig(pydantic.BaseModel):
    from_file: typing.Optional[list[FunctionCodeDefFromFileParams]] = pydantic.Field(None, description='Code from external file for function.')
    from_inline: typing.Optional[list[FunctionCodeDefFromInlineParams]] = pydantic.Field(None, description='Inline code for function.')
    render: typing.Optional[bool] = pydantic.Field(None, description='renders the function code.')

class FunctionCodeDefFromFileParams(pydantic.BaseModel):
    file_path: str = pydantic.Field(..., description='The path of the file to read the code from.\n')
    return_config: typing.Optional[list[models.aws_cloudfront.FunctionCodeDefConfig]] = pydantic.Field(None)
    ...

class FunctionCodeDefFromInlineParams(pydantic.BaseModel):
    code: str = pydantic.Field(..., description='The actual function code.\n')
    return_config: typing.Optional[list[models.aws_cloudfront.FunctionCodeDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.GeoRestriction
class GeoRestrictionDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['allowlist', 'denylist']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.GeoRestriction'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[GeoRestrictionDefConfig] = pydantic.Field(None)


class GeoRestrictionDefConfig(pydantic.BaseModel):
    allowlist: typing.Optional[list[GeoRestrictionDefAllowlistParams]] = pydantic.Field(None, description='Allow specific countries which you want CloudFront to distribute your content.')
    denylist: typing.Optional[list[GeoRestrictionDefDenylistParams]] = pydantic.Field(None, description="Deny specific countries which you don't want CloudFront to distribute your content.")

class GeoRestrictionDefAllowlistParams(pydantic.BaseModel):
    locations: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.GeoRestrictionDefConfig]] = pydantic.Field(None)
    ...

class GeoRestrictionDefDenylistParams(pydantic.BaseModel):
    locations: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.GeoRestrictionDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.OriginBase
class OriginBaseDef(BaseClass):
    domain_name: str = pydantic.Field(..., description='-')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled')
    _init_params: typing.ClassVar[list[str]] = ['domain_name', 'origin_path', 'connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginBase'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[OriginBaseDefConfig] = pydantic.Field(None)


class OriginBaseDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[OriginBaseDefBindParams]] = pydantic.Field(None, description='Binds the origin to the associated Distribution.\nCan be used to grant permissions, create dependent resources, etc.')

class OriginBaseDefBindParams(pydantic.BaseModel):
    _scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    origin_id: str = pydantic.Field(..., description='The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.OriginRequestCookieBehavior
class OriginRequestCookieBehaviorDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['all', 'allow_list', 'none']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginRequestCookieBehavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[OriginRequestCookieBehaviorDefConfig] = pydantic.Field(None)


class OriginRequestCookieBehaviorDefConfig(pydantic.BaseModel):
    all: typing.Optional[list[OriginRequestCookieBehaviorDefAllParams]] = pydantic.Field(None, description='All cookies in viewer requests are included in requests that CloudFront sends to the origin.')
    allow_list: typing.Optional[list[OriginRequestCookieBehaviorDefAllowListParams]] = pydantic.Field(None, description='Only the provided ``cookies`` are included in requests that CloudFront sends to the origin.')
    none: typing.Optional[list[OriginRequestCookieBehaviorDefNoneParams]] = pydantic.Field(None, description='Cookies in viewer requests are not included in requests that CloudFront sends to the origin.\nAny cookies that are listed in a CachePolicy are still included in origin requests.')

class OriginRequestCookieBehaviorDefAllParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.OriginRequestCookieBehaviorDefConfig]] = pydantic.Field(None)
    ...

class OriginRequestCookieBehaviorDefAllowListParams(pydantic.BaseModel):
    cookies: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.OriginRequestCookieBehaviorDefConfig]] = pydantic.Field(None)
    ...

class OriginRequestCookieBehaviorDefNoneParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.OriginRequestCookieBehaviorDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.OriginRequestHeaderBehavior
class OriginRequestHeaderBehaviorDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['all', 'allow_list', 'none']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginRequestHeaderBehavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[OriginRequestHeaderBehaviorDefConfig] = pydantic.Field(None)


class OriginRequestHeaderBehaviorDefConfig(pydantic.BaseModel):
    all: typing.Optional[list[OriginRequestHeaderBehaviorDefAllParams]] = pydantic.Field(None, description='All HTTP headers in viewer requests are included in requests that CloudFront sends to the origin.\nAdditionally, any additional CloudFront headers provided are included; the additional headers are added by CloudFront.')
    allow_list: typing.Optional[list[OriginRequestHeaderBehaviorDefAllowListParams]] = pydantic.Field(None, description='Listed headers are included in requests that CloudFront sends to the origin.')
    none: typing.Optional[list[OriginRequestHeaderBehaviorDefNoneParams]] = pydantic.Field(None, description='HTTP headers are not included in requests that CloudFront sends to the origin.\nAny headers that are listed in a CachePolicy are still included in origin requests.')

class OriginRequestHeaderBehaviorDefAllParams(pydantic.BaseModel):
    cloudfront_headers: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.OriginRequestHeaderBehaviorDefConfig]] = pydantic.Field(None)
    ...

class OriginRequestHeaderBehaviorDefAllowListParams(pydantic.BaseModel):
    headers: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.OriginRequestHeaderBehaviorDefConfig]] = pydantic.Field(None)
    ...

class OriginRequestHeaderBehaviorDefNoneParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.OriginRequestHeaderBehaviorDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.OriginRequestQueryStringBehavior
class OriginRequestQueryStringBehaviorDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['all', 'allow_list', 'none']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginRequestQueryStringBehavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[OriginRequestQueryStringBehaviorDefConfig] = pydantic.Field(None)


class OriginRequestQueryStringBehaviorDefConfig(pydantic.BaseModel):
    all: typing.Optional[list[OriginRequestQueryStringBehaviorDefAllParams]] = pydantic.Field(None, description='All query strings in viewer requests are included in requests that CloudFront sends to the origin.')
    allow_list: typing.Optional[list[OriginRequestQueryStringBehaviorDefAllowListParams]] = pydantic.Field(None, description='Only the provided ``queryStrings`` are included in requests that CloudFront sends to the origin.')
    none: typing.Optional[list[OriginRequestQueryStringBehaviorDefNoneParams]] = pydantic.Field(None, description='Query strings in viewer requests are not included in requests that CloudFront sends to the origin.\nAny query strings that are listed in a CachePolicy are still included in origin requests.')

class OriginRequestQueryStringBehaviorDefAllParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.OriginRequestQueryStringBehaviorDefConfig]] = pydantic.Field(None)
    ...

class OriginRequestQueryStringBehaviorDefAllowListParams(pydantic.BaseModel):
    query_strings: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.OriginRequestQueryStringBehaviorDefConfig]] = pydantic.Field(None)
    ...

class OriginRequestQueryStringBehaviorDefNoneParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_cloudfront.OriginRequestQueryStringBehaviorDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.ViewerCertificate
class ViewerCertificateDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['from_acm_certificate', 'from_cloud_front_default_certificate', 'from_iam_certificate']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ViewerCertificate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ViewerCertificateDefConfig] = pydantic.Field(None)


class ViewerCertificateDefConfig(pydantic.BaseModel):
    from_acm_certificate: typing.Optional[list[ViewerCertificateDefFromAcmCertificateParams]] = pydantic.Field(None, description='Generate an AWS Certificate Manager (ACM) viewer certificate configuration.')
    from_cloud_front_default_certificate: typing.Optional[list[ViewerCertificateDefFromCloudFrontDefaultCertificateParams]] = pydantic.Field(None, description='Generate a viewer certifcate configuration using the CloudFront default certificate (e.g. d111111abcdef8.cloudfront.net) and a ``SecurityPolicyProtocol.TLS_V1`` security policy.')
    from_iam_certificate: typing.Optional[list[ViewerCertificateDefFromIamCertificateParams]] = pydantic.Field(None, description='Generate an IAM viewer certificate configuration.')

class ViewerCertificateDefFromAcmCertificateParams(pydantic.BaseModel):
    certificate: typing.Union[models.aws_certificatemanager.CertificateDef, models.aws_certificatemanager.DnsValidatedCertificateDef, models.aws_certificatemanager.PrivateCertificateDef] = pydantic.Field(..., description='AWS Certificate Manager (ACM) certificate. Your certificate must be located in the us-east-1 (US East (N. Virginia)) region to be accessed by CloudFront\n')
    aliases: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Domain names on the certificate (both main domain name and Subject Alternative names).\n')
    security_policy: typing.Optional[aws_cdk.aws_cloudfront.SecurityPolicyProtocol] = pydantic.Field(None, description='The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. CloudFront serves your objects only to browsers or devices that support at least the SSL version that you specify. Default: - SSLv3 if sslMethod VIP, TLSv1 if sslMethod SNI\n')
    ssl_method: typing.Optional[aws_cdk.aws_cloudfront.SSLMethod] = pydantic.Field(None, description='How CloudFront should serve HTTPS requests. See the notes on SSLMethod if you wish to use other SSL termination types. Default: SSLMethod.SNI')
    return_config: typing.Optional[list[models.aws_cloudfront.ViewerCertificateDefConfig]] = pydantic.Field(None)
    ...

class ViewerCertificateDefFromCloudFrontDefaultCertificateParams(pydantic.BaseModel):
    aliases: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cloudfront.ViewerCertificateDefConfig]] = pydantic.Field(None)
    ...

class ViewerCertificateDefFromIamCertificateParams(pydantic.BaseModel):
    iam_certificate_id: str = pydantic.Field(..., description='Identifier of the IAM certificate.\n')
    aliases: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Domain names on the certificate (both main domain name and Subject Alternative names).\n')
    security_policy: typing.Optional[aws_cdk.aws_cloudfront.SecurityPolicyProtocol] = pydantic.Field(None, description='The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. CloudFront serves your objects only to browsers or devices that support at least the SSL version that you specify. Default: - SSLv3 if sslMethod VIP, TLSv1 if sslMethod SNI\n')
    ssl_method: typing.Optional[aws_cdk.aws_cloudfront.SSLMethod] = pydantic.Field(None, description='How CloudFront should serve HTTPS requests. See the notes on SSLMethod if you wish to use other SSL termination types. Default: SSLMethod.SNI')
    return_config: typing.Optional[list[models.aws_cloudfront.ViewerCertificateDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CachePolicy
class CachePolicyDef(BaseConstruct):
    cache_policy_name: typing.Optional[str] = pydantic.Field(None, description="A unique name to identify the cache policy. The name must only include '-', '_', or alphanumeric characters. Default: - generated from the ``id``\n")
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the cache policy. Default: - no comment\n')
    cookie_behavior: typing.Optional[models.aws_cloudfront.CacheCookieBehaviorDef] = pydantic.Field(None, description='Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Default: CacheCookieBehavior.none()\n')
    default_ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The default amount of time for objects to stay in the CloudFront cache. Only used when the origin does not send Cache-Control or Expires headers with the object. Default: - The greater of 1 day and ``minTtl``\n')
    enable_accept_encoding_brotli: typing.Optional[bool] = pydantic.Field(None, description="Whether to normalize and include the ``Accept-Encoding`` header in the cache key when the ``Accept-Encoding`` header is 'br'. Default: false\n")
    enable_accept_encoding_gzip: typing.Optional[bool] = pydantic.Field(None, description="Whether to normalize and include the ``Accept-Encoding`` header in the cache key when the ``Accept-Encoding`` header is 'gzip'. Default: false\n")
    header_behavior: typing.Optional[models.aws_cloudfront.CacheHeaderBehaviorDef] = pydantic.Field(None, description='Determines whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Default: CacheHeaderBehavior.none()\n')
    max_ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time for objects to stay in the CloudFront cache. CloudFront uses this value only when the origin sends Cache-Control or Expires headers with the object. Default: - The greater of 1 year and ``defaultTtl``\n')
    min_ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The minimum amount of time for objects to stay in the CloudFront cache. Default: Duration.seconds(0)\n')
    query_string_behavior: typing.Optional[models.aws_cloudfront.CacheQueryStringBehaviorDef] = pydantic.Field(None, description='Determines whether any query strings are included in the cache key and automatically included in requests that CloudFront sends to the origin. Default: CacheQueryStringBehavior.none()')
    _init_params: typing.ClassVar[list[str]] = ['cache_policy_name', 'comment', 'cookie_behavior', 'default_ttl', 'enable_accept_encoding_brotli', 'enable_accept_encoding_gzip', 'header_behavior', 'max_ttl', 'min_ttl', 'query_string_behavior']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_cache_policy_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CachePolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_cache_policy_id']
    ...


    from_cache_policy_id: typing.Optional[CachePolicyDefFromCachePolicyIdParams] = pydantic.Field(None, description='Imports a Cache Policy from its id.')
    resource_config: typing.Optional[CachePolicyDefConfig] = pydantic.Field(None)


class CachePolicyDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class CachePolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class CachePolicyDefFromCachePolicyIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    cache_policy_id: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CloudFrontWebDistribution
class CloudFrontWebDistributionDef(BaseConstruct):
    origin_configs: typing.Sequence[typing.Union[models.aws_cloudfront.SourceConfigurationDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The origin configurations for this distribution. Behaviors are a part of the origin.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment for this distribution in the CloudFront console. Default: - No comment is added to distribution.\n')
    default_root_object: typing.Optional[str] = pydantic.Field(None, description='The default object to serve. Default: - "index.html" is served.\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Enable or disable the distribution. Default: true\n')
    enable_ip_v6: typing.Optional[bool] = pydantic.Field(None, description='If your distribution should have IPv6 enabled. Default: true\n')
    error_configurations: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.CfnDistribution_CustomErrorResponsePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='How CloudFront should handle requests that are not successful (eg PageNotFound). By default, CloudFront does not replace HTTP status codes in the 4xx and 5xx range with custom error messages. CloudFront does not cache HTTP status codes. Default: - No custom error configuration.\n')
    geo_restriction: typing.Optional[models.aws_cloudfront.GeoRestrictionDef] = pydantic.Field(None, description='Controls the countries in which your content is distributed. Default: No geo restriction\n')
    http_version: typing.Optional[aws_cdk.aws_cloudfront.HttpVersion] = pydantic.Field(None, description='The max supported HTTP Versions. Default: HttpVersion.HTTP2\n')
    logging_config: typing.Union[models.aws_cloudfront.LoggingConfigurationDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Optional - if we should enable logging. You can pass an empty object ({}) to have us auto create a bucket for logging. Omission of this property indicates no logging is to be enabled. Default: - no logging is enabled by default.\n')
    price_class: typing.Optional[aws_cdk.aws_cloudfront.PriceClass] = pydantic.Field(None, description='The price class for the distribution (this impacts how many locations CloudFront uses for your distribution, and billing). Default: PriceClass.PRICE_CLASS_100 the cheapest option for CloudFront is picked by default.\n')
    viewer_certificate: typing.Optional[models.aws_cloudfront.ViewerCertificateDef] = pydantic.Field(None, description="Specifies whether you want viewers to use HTTP or HTTPS to request your objects, whether you're using an alternate domain name with HTTPS, and if so, if you're using AWS Certificate Manager (ACM) or a third-party certificate authority. Default: ViewerCertificate.fromCloudFrontDefaultCertificate()\n")
    viewer_protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.ViewerProtocolPolicy] = pydantic.Field(None, description='The default viewer policy for incoming clients. Default: RedirectToHTTPs\n')
    web_acl_id: typing.Optional[str] = pydantic.Field(None, description='Unique identifier that specifies the AWS WAF web ACL to associate with this CloudFront distribution. To specify a web ACL created using the latest version of AWS WAF, use the ACL ARN, for example ``arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a``. To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example ``473e64fd-f30b-4765-81a0-62ad96dd167a``. Default: - No AWS Web Application Firewall web access control list (web ACL).')
    _init_params: typing.ClassVar[list[str]] = ['origin_configs', 'comment', 'default_root_object', 'enabled', 'enable_ip_v6', 'error_configurations', 'geo_restriction', 'http_version', 'logging_config', 'price_class', 'viewer_certificate', 'viewer_protocol_policy', 'web_acl_id']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy', 'grant', 'grant_create_invalidation']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_distribution_attributes']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CloudFrontWebDistribution'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_distribution_attributes']
    ...


    from_distribution_attributes: typing.Optional[CloudFrontWebDistributionDefFromDistributionAttributesParams] = pydantic.Field(None, description='Creates a construct that represents an external (imported) distribution.')
    resource_config: typing.Optional[CloudFrontWebDistributionDefConfig] = pydantic.Field(None)


class CloudFrontWebDistributionDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    grant: typing.Optional[list[CloudFrontWebDistributionDefGrantParams]] = pydantic.Field(None, description="Adds an IAM policy statement associated with this distribution to an IAM principal's policy.")
    grant_create_invalidation: typing.Optional[list[CloudFrontWebDistributionDefGrantCreateInvalidationParams]] = pydantic.Field(None, description='Grant to create invalidations for this bucket to an IAM principal (Role/Group/User).')

class CloudFrontWebDistributionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class CloudFrontWebDistributionDefFromDistributionAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    distribution_id: str = pydantic.Field(..., description='The distribution ID for this distribution.\n')
    domain_name: str = pydantic.Field(..., description='The generated domain name of the Distribution, such as d111111abcdef8.cloudfront.net.')
    ...

class CloudFrontWebDistributionDefGrantParams(pydantic.BaseModel):
    identity: typing.Union[models.aws_appsync.BackedDataSourceDef, models.aws_appsync.DynamoDbDataSourceDef, models.aws_appsync.ElasticsearchDataSourceDef, models.aws_appsync.EventBridgeDataSourceDef, models.aws_appsync.HttpDataSourceDef, models.aws_appsync.LambdaDataSourceDef, models.aws_appsync.OpenSearchDataSourceDef, models.aws_appsync.RdsDataSourceDef, models.aws_backup.BackupSelectionDef, models.aws_codebuild.UntrustedCodeBoundaryPolicyDef, models.aws_ec2.LaunchTemplateDef, models.aws_iam.ManagedPolicyDef, models.aws_iam.PolicyDef, models.aws_stepfunctions_tasks.EmrContainersStartJobRunDef, models.aws_stepfunctions_tasks.SageMakerCreateModelDef, models.aws_stepfunctions_tasks.SageMakerCreateTrainingJobDef, models.custom_resources.AwsCustomResourceDef] = pydantic.Field(..., description='The principal.\n')
    actions: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_iam.GrantDefConfig]] = pydantic.Field(None)
    ...

class CloudFrontWebDistributionDefGrantCreateInvalidationParams(pydantic.BaseModel):
    identity: typing.Union[models.aws_appsync.BackedDataSourceDef, models.aws_appsync.DynamoDbDataSourceDef, models.aws_appsync.ElasticsearchDataSourceDef, models.aws_appsync.EventBridgeDataSourceDef, models.aws_appsync.HttpDataSourceDef, models.aws_appsync.LambdaDataSourceDef, models.aws_appsync.OpenSearchDataSourceDef, models.aws_appsync.RdsDataSourceDef, models.aws_backup.BackupSelectionDef, models.aws_codebuild.UntrustedCodeBoundaryPolicyDef, models.aws_ec2.LaunchTemplateDef, models.aws_iam.ManagedPolicyDef, models.aws_iam.PolicyDef, models.aws_stepfunctions_tasks.EmrContainersStartJobRunDef, models.aws_stepfunctions_tasks.SageMakerCreateModelDef, models.aws_stepfunctions_tasks.SageMakerCreateTrainingJobDef, models.custom_resources.AwsCustomResourceDef] = pydantic.Field(..., description='The principal.')
    return_config: typing.Optional[list[models.aws_iam.GrantDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.Distribution
class DistributionDef(BaseConstruct):
    default_behavior: typing.Union[models.aws_cloudfront.BehaviorOptionsDef, dict[str, typing.Any]] = pydantic.Field(..., description='The default behavior for the distribution.\n')
    additional_behaviors: typing.Optional[typing.Mapping[str, typing.Union[models.aws_cloudfront.BehaviorOptionsDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Additional behaviors for the distribution, mapped by the pathPattern that specifies which requests to apply the behavior to. Default: - no additional behaviors are added.\n')
    certificate: typing.Optional[typing.Union[models.aws_certificatemanager.CertificateDef, models.aws_certificatemanager.DnsValidatedCertificateDef, models.aws_certificatemanager.PrivateCertificateDef]] = pydantic.Field(None, description='A certificate to associate with the distribution. The certificate must be located in N. Virginia (us-east-1). Default: - the CloudFront wildcard certificate (*.cloudfront.net) will be used.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments you want to include about the distribution. Default: - no comment\n')
    default_root_object: typing.Optional[str] = pydantic.Field(None, description="The object that you want CloudFront to request from your origin (for example, index.html) when a viewer requests the root URL for your distribution. If no default object is set, the request goes to the origin's root (e.g., example.com/). Default: - no default root object\n")
    domain_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Alternative domain names for this distribution. If you want to use your own domain name, such as www.example.com, instead of the cloudfront.net domain name, you can add an alternate domain name to your distribution. If you attach a certificate to the distribution, you must add (at least one of) the domain names of the certificate to this list. Default: - The distribution will only support the default generated name (e.g., d111111abcdef8.cloudfront.net)\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Enable or disable the distribution. Default: true\n')
    enable_ipv6: typing.Optional[bool] = pydantic.Field(None, description='Whether CloudFront will respond to IPv6 DNS requests with an IPv6 address. If you specify false, CloudFront responds to IPv6 DNS requests with the DNS response code NOERROR and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for your distribution. Default: true\n')
    enable_logging: typing.Optional[bool] = pydantic.Field(None, description='Enable access logging for the distribution. Default: - false, unless ``logBucket`` is specified.\n')
    error_responses: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.ErrorResponseDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='How CloudFront should handle requests that are not successful (e.g., PageNotFound). Default: - No custom error responses.\n')
    geo_restriction: typing.Optional[models.aws_cloudfront.GeoRestrictionDef] = pydantic.Field(None, description='Controls the countries in which your content is distributed. Default: - No geographic restrictions\n')
    http_version: typing.Optional[aws_cdk.aws_cloudfront.HttpVersion] = pydantic.Field(None, description='Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. For viewers and CloudFront to use HTTP/2, viewers must support TLS 1.2 or later, and must support server name identification (SNI). Default: HttpVersion.HTTP2\n')
    log_bucket: typing.Optional[typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef]] = pydantic.Field(None, description='The Amazon S3 bucket to store the access logs in. Make sure to set ``objectOwnership`` to ``s3.ObjectOwnership.OBJECT_WRITER`` in your custom bucket. Default: - A bucket is created if ``enableLogging`` is true\n')
    log_file_prefix: typing.Optional[str] = pydantic.Field(None, description='An optional string that you want CloudFront to prefix to the access log filenames for this distribution. Default: - no prefix\n')
    log_includes_cookies: typing.Optional[bool] = pydantic.Field(None, description='Specifies whether you want CloudFront to include cookies in access logs. Default: false\n')
    minimum_protocol_version: typing.Optional[aws_cdk.aws_cloudfront.SecurityPolicyProtocol] = pydantic.Field(None, description="The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. CloudFront serves your objects only to browsers or devices that support at least the SSL version that you specify. Default: - SecurityPolicyProtocol.TLS_V1_2_2021 if the '@aws-cdk/aws-cloudfront:defaultSecurityPolicyTLSv1.2_2021' feature flag is set; otherwise, SecurityPolicyProtocol.TLS_V1_2_2019.\n")
    price_class: typing.Optional[aws_cdk.aws_cloudfront.PriceClass] = pydantic.Field(None, description='The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you specify PriceClass_All, CloudFront responds to requests for your objects from all CloudFront edge locations. If you specify a price class other than PriceClass_All, CloudFront serves your objects from the CloudFront edge location that has the lowest latency among the edge locations in your price class. Default: PriceClass.PRICE_CLASS_ALL\n')
    ssl_support_method: typing.Optional[aws_cdk.aws_cloudfront.SSLMethod] = pydantic.Field(None, description='The SSL method CloudFront will use for your distribution. Server Name Indication (SNI) - is an extension to the TLS computer networking protocol by which a client indicates which hostname it is attempting to connect to at the start of the handshaking process. This allows a server to present multiple certificates on the same IP address and TCP port number and hence allows multiple secure (HTTPS) websites (or any other service over TLS) to be served by the same IP address without requiring all those sites to use the same certificate. CloudFront can use SNI to host multiple distributions on the same IP - which a large majority of clients will support. If your clients cannot support SNI however - CloudFront can use dedicated IPs for your distribution - but there is a prorated monthly charge for using this feature. By default, we use SNI - but you can optionally enable dedicated IPs (VIP). See the CloudFront SSL for more details about pricing : https://aws.amazon.com/cloudfront/custom-ssl-domains/ Default: SSLMethod.SNI\n')
    web_acl_id: typing.Optional[str] = pydantic.Field(None, description='Unique identifier that specifies the AWS WAF web ACL to associate with this CloudFront distribution. To specify a web ACL created using the latest version of AWS WAF, use the ACL ARN, for example ``arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a``. To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example ``473e64fd-f30b-4765-81a0-62ad96dd167a``. Default: - No AWS Web Application Firewall web access control list (web ACL).')
    _init_params: typing.ClassVar[list[str]] = ['default_behavior', 'additional_behaviors', 'certificate', 'comment', 'default_root_object', 'domain_names', 'enabled', 'enable_ipv6', 'enable_logging', 'error_responses', 'geo_restriction', 'http_version', 'log_bucket', 'log_file_prefix', 'log_includes_cookies', 'minimum_protocol_version', 'price_class', 'ssl_support_method', 'web_acl_id']
    _method_names: typing.ClassVar[list[str]] = ['add_behavior', 'apply_removal_policy', 'grant', 'grant_create_invalidation']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_distribution_attributes']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.Distribution'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_distribution_attributes']
    ...


    from_distribution_attributes: typing.Optional[DistributionDefFromDistributionAttributesParams] = pydantic.Field(None, description='Creates a Distribution construct that represents an external (imported) distribution.')
    resource_config: typing.Optional[DistributionDefConfig] = pydantic.Field(None)


class DistributionDefConfig(pydantic.BaseModel):
    add_behavior: typing.Optional[list[DistributionDefAddBehaviorParams]] = pydantic.Field(None, description='Adds a new behavior to this distribution for the given pathPattern.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    grant: typing.Optional[list[DistributionDefGrantParams]] = pydantic.Field(None, description="Adds an IAM policy statement associated with this distribution to an IAM principal's policy.")
    grant_create_invalidation: typing.Optional[list[DistributionDefGrantCreateInvalidationParams]] = pydantic.Field(None, description='Grant to create invalidations for this bucket to an IAM principal (Role/Group/User).')

class DistributionDefAddBehaviorParams(pydantic.BaseModel):
    path_pattern: str = pydantic.Field(..., description="the path pattern (e.g., 'images/*') that specifies which requests to apply the behavior to.\n")
    origin: typing.Union[models.aws_cloudfront.OriginBaseDef, models.aws_cloudfront_origins.HttpOriginDef, models.aws_cloudfront_origins.LoadBalancerV2OriginDef, models.aws_cloudfront_origins.OriginGroupDef, models.aws_cloudfront_origins.RestApiOriginDef, models.aws_cloudfront_origins.S3OriginDef] = pydantic.Field(..., description='the origin to use for this behavior.\n')
    allowed_methods: typing.Optional[models.aws_cloudfront.AllowedMethodsDef] = pydantic.Field(None, description='HTTP methods to allow for this behavior. Default: AllowedMethods.ALLOW_GET_HEAD\n')
    cached_methods: typing.Optional[models.aws_cloudfront.CachedMethodsDef] = pydantic.Field(None, description='HTTP methods to cache for this behavior. Default: CachedMethods.CACHE_GET_HEAD\n')
    cache_policy: typing.Optional[typing.Union[models.aws_cloudfront.CachePolicyDef]] = pydantic.Field(None, description='The cache policy for this behavior. The cache policy determines what values are included in the cache key, and the time-to-live (TTL) values for the cache. Default: CachePolicy.CACHING_OPTIMIZED\n')
    compress: typing.Optional[bool] = pydantic.Field(None, description='Whether you want CloudFront to automatically compress certain files for this cache behavior. See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html#compressed-content-cloudfront-file-types for file types CloudFront will compress. Default: true\n')
    edge_lambdas: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.EdgeLambdaDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The Lambda@Edge functions to invoke before serving the contents. Default: - no Lambda functions will be invoked\n')
    function_associations: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.FunctionAssociationDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The CloudFront functions to invoke before serving the contents. Default: - no functions will be invoked\n')
    origin_request_policy: typing.Optional[typing.Union[models.aws_cloudfront.OriginRequestPolicyDef]] = pydantic.Field(None, description='The origin request policy for this behavior. The origin request policy determines which values (e.g., headers, cookies) are included in requests that CloudFront sends to the origin. Default: - none\n')
    response_headers_policy: typing.Optional[typing.Union[models.aws_cloudfront.ResponseHeadersPolicyDef]] = pydantic.Field(None, description='The response headers policy for this behavior. The response headers policy determines which headers are included in responses Default: - none\n')
    smooth_streaming: typing.Optional[bool] = pydantic.Field(None, description='Set this to true to indicate you want to distribute media files in the Microsoft Smooth Streaming format using this behavior. Default: false\n')
    trusted_key_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.KeyGroupDef]]] = pydantic.Field(None, description='A list of Key Groups that CloudFront can use to validate signed URLs or signed cookies. Default: - no KeyGroups are associated with cache behavior\n')
    viewer_protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.ViewerProtocolPolicy] = pydantic.Field(None, description='The protocol that viewers can use to access the files controlled by this behavior. Default: ViewerProtocolPolicy.ALLOW_ALL')
    ...

class DistributionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class DistributionDefFromDistributionAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    distribution_id: str = pydantic.Field(..., description='The distribution ID for this distribution.\n')
    domain_name: str = pydantic.Field(..., description='The generated domain name of the Distribution, such as d111111abcdef8.cloudfront.net.')
    ...

class DistributionDefGrantParams(pydantic.BaseModel):
    identity: typing.Union[models.aws_appsync.BackedDataSourceDef, models.aws_appsync.DynamoDbDataSourceDef, models.aws_appsync.ElasticsearchDataSourceDef, models.aws_appsync.EventBridgeDataSourceDef, models.aws_appsync.HttpDataSourceDef, models.aws_appsync.LambdaDataSourceDef, models.aws_appsync.OpenSearchDataSourceDef, models.aws_appsync.RdsDataSourceDef, models.aws_backup.BackupSelectionDef, models.aws_codebuild.UntrustedCodeBoundaryPolicyDef, models.aws_ec2.LaunchTemplateDef, models.aws_iam.ManagedPolicyDef, models.aws_iam.PolicyDef, models.aws_stepfunctions_tasks.EmrContainersStartJobRunDef, models.aws_stepfunctions_tasks.SageMakerCreateModelDef, models.aws_stepfunctions_tasks.SageMakerCreateTrainingJobDef, models.custom_resources.AwsCustomResourceDef] = pydantic.Field(..., description='The principal.\n')
    actions: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_iam.GrantDefConfig]] = pydantic.Field(None)
    ...

class DistributionDefGrantCreateInvalidationParams(pydantic.BaseModel):
    identity: typing.Union[models.aws_appsync.BackedDataSourceDef, models.aws_appsync.DynamoDbDataSourceDef, models.aws_appsync.ElasticsearchDataSourceDef, models.aws_appsync.EventBridgeDataSourceDef, models.aws_appsync.HttpDataSourceDef, models.aws_appsync.LambdaDataSourceDef, models.aws_appsync.OpenSearchDataSourceDef, models.aws_appsync.RdsDataSourceDef, models.aws_backup.BackupSelectionDef, models.aws_codebuild.UntrustedCodeBoundaryPolicyDef, models.aws_ec2.LaunchTemplateDef, models.aws_iam.ManagedPolicyDef, models.aws_iam.PolicyDef, models.aws_stepfunctions_tasks.EmrContainersStartJobRunDef, models.aws_stepfunctions_tasks.SageMakerCreateModelDef, models.aws_stepfunctions_tasks.SageMakerCreateTrainingJobDef, models.custom_resources.AwsCustomResourceDef] = pydantic.Field(..., description='The principal.')
    return_config: typing.Optional[list[models.aws_iam.GrantDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cloudfront.Function
class FunctionDef(BaseConstruct):
    code: models.aws_cloudfront.FunctionCodeDef = pydantic.Field(..., description='The source code of the function.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the function. Default: - same as ``functionName``\n')
    function_name: typing.Optional[str] = pydantic.Field(None, description='A name to identify the function. Default: - generated from the ``id``')
    _init_params: typing.ClassVar[list[str]] = ['code', 'comment', 'function_name']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_function_attributes']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.Function'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_function_attributes']
    ...


    from_function_attributes: typing.Optional[FunctionDefFromFunctionAttributesParams] = pydantic.Field(None, description='Imports a function by its name and ARN.')
    resource_config: typing.Optional[FunctionDefConfig] = pydantic.Field(None)


class FunctionDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class FunctionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class FunctionDefFromFunctionAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    function_arn: str = pydantic.Field(..., description='The ARN of the function.\n')
    function_name: str = pydantic.Field(..., description='The name of the function.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.KeyGroup
class KeyGroupDef(BaseConstruct):
    items: typing.Sequence[typing.Union[models.aws_cloudfront.PublicKeyDef]] = pydantic.Field(..., description='A list of public keys to add to the key group.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the key group. Default: - no comment\n')
    key_group_name: typing.Optional[str] = pydantic.Field(None, description='A name to identify the key group. Default: - generated from the ``id``')
    _init_params: typing.ClassVar[list[str]] = ['items', 'comment', 'key_group_name']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_key_group_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.KeyGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_key_group_id']
    ...


    from_key_group_id: typing.Optional[KeyGroupDefFromKeyGroupIdParams] = pydantic.Field(None, description='Imports a Key Group from its id.')
    resource_config: typing.Optional[KeyGroupDefConfig] = pydantic.Field(None)


class KeyGroupDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class KeyGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class KeyGroupDefFromKeyGroupIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    key_group_id: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.OriginAccessIdentity
class OriginAccessIdentityDef(BaseConstruct):
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments you want to include about the origin access identity. Default: "Allows CloudFront to reach the bucket"')
    _init_params: typing.ClassVar[list[str]] = ['comment']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_origin_access_identity_id', 'from_origin_access_identity_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginAccessIdentity'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_origin_access_identity_id', 'from_origin_access_identity_name']
    ...


    from_origin_access_identity_id: typing.Optional[OriginAccessIdentityDefFromOriginAccessIdentityIdParams] = pydantic.Field(None, description='Creates a OriginAccessIdentity by providing the OriginAccessIdentityId.')
    from_origin_access_identity_name: typing.Optional[OriginAccessIdentityDefFromOriginAccessIdentityNameParams] = pydantic.Field(None, description='(deprecated) Creates a OriginAccessIdentity by providing the OriginAccessIdentityId.\nIt is misnamed and superseded by the correctly named fromOriginAccessIdentityId.')
    resource_config: typing.Optional[OriginAccessIdentityDefConfig] = pydantic.Field(None)


class OriginAccessIdentityDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    grant_principal_config: typing.Optional[models._interface_methods.AwsIamIPrincipalDefConfig] = pydantic.Field(None)

class OriginAccessIdentityDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class OriginAccessIdentityDefFromOriginAccessIdentityIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    origin_access_identity_id: str = pydantic.Field(..., description='-')
    ...

class OriginAccessIdentityDefFromOriginAccessIdentityNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    origin_access_identity_name: str = pydantic.Field(..., description='-\n\n:deprecated: use ``fromOriginAccessIdentityId``\n\n:stability: deprecated\n')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.OriginRequestPolicy
class OriginRequestPolicyDef(BaseConstruct):
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the origin request policy. Default: - no comment\n')
    cookie_behavior: typing.Optional[models.aws_cloudfront.OriginRequestCookieBehaviorDef] = pydantic.Field(None, description='The cookies from viewer requests to include in origin requests. Default: OriginRequestCookieBehavior.none()\n')
    header_behavior: typing.Optional[models.aws_cloudfront.OriginRequestHeaderBehaviorDef] = pydantic.Field(None, description='The HTTP headers to include in origin requests. These can include headers from viewer requests and additional headers added by CloudFront. Default: OriginRequestHeaderBehavior.none()\n')
    origin_request_policy_name: typing.Optional[str] = pydantic.Field(None, description="A unique name to identify the origin request policy. The name must only include '-', '_', or alphanumeric characters. Default: - generated from the ``id``\n")
    query_string_behavior: typing.Optional[models.aws_cloudfront.OriginRequestQueryStringBehaviorDef] = pydantic.Field(None, description='The URL query strings from viewer requests to include in origin requests. Default: OriginRequestQueryStringBehavior.none()')
    _init_params: typing.ClassVar[list[str]] = ['comment', 'cookie_behavior', 'header_behavior', 'origin_request_policy_name', 'query_string_behavior']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_origin_request_policy_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginRequestPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_origin_request_policy_id']
    ...


    from_origin_request_policy_id: typing.Optional[OriginRequestPolicyDefFromOriginRequestPolicyIdParams] = pydantic.Field(None, description='Imports a Origin Request Policy from its id.')
    resource_config: typing.Optional[OriginRequestPolicyDefConfig] = pydantic.Field(None)


class OriginRequestPolicyDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class OriginRequestPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class OriginRequestPolicyDefFromOriginRequestPolicyIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    origin_request_policy_id: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.PublicKey
class PublicKeyDef(BaseConstruct):
    encoded_key: str = pydantic.Field(..., description='The public key that you can use with signed URLs and signed cookies, or with field-level encryption. The ``encodedKey`` parameter must include ``-----BEGIN PUBLIC KEY-----`` and ``-----END PUBLIC KEY-----`` lines.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the public key. Default: - no comment\n')
    public_key_name: typing.Optional[str] = pydantic.Field(None, description='A name to identify the public key. Default: - generated from the ``id``')
    _init_params: typing.ClassVar[list[str]] = ['encoded_key', 'comment', 'public_key_name']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_public_key_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.PublicKey'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_public_key_id']
    ...


    from_public_key_id: typing.Optional[PublicKeyDefFromPublicKeyIdParams] = pydantic.Field(None, description='Imports a Public Key from its id.')
    resource_config: typing.Optional[PublicKeyDefConfig] = pydantic.Field(None)


class PublicKeyDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class PublicKeyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class PublicKeyDefFromPublicKeyIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    public_key_id: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.ResponseHeadersPolicy
class ResponseHeadersPolicyDef(BaseConstruct):
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the response headers policy. Default: - no comment\n')
    cors_behavior: typing.Union[models.aws_cloudfront.ResponseHeadersCorsBehaviorDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of HTTP response headers that are used for cross-origin resource sharing (CORS). Default: - no cors behavior\n')
    custom_headers_behavior: typing.Union[models.aws_cloudfront.ResponseCustomHeadersBehaviorDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of custom HTTP response headers. Default: - no custom headers behavior\n')
    remove_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of HTTP response headers that CloudFront removes from HTTP responses that it sends to viewers. Default: - no headers are removed\n')
    response_headers_policy_name: typing.Optional[str] = pydantic.Field(None, description='A unique name to identify the response headers policy. Default: - generated from the ``id``\n')
    security_headers_behavior: typing.Union[models.aws_cloudfront.ResponseSecurityHeadersBehaviorDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of security-related HTTP response headers. Default: - no security headers behavior\n')
    server_timing_sampling_rate: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of responses that you want CloudFront to add the Server-Timing header to. Default: - no Server-Timing header is added to HTTP responses')
    _init_params: typing.ClassVar[list[str]] = ['comment', 'cors_behavior', 'custom_headers_behavior', 'remove_headers', 'response_headers_policy_name', 'security_headers_behavior', 'server_timing_sampling_rate']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_response_headers_policy_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseHeadersPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_response_headers_policy_id']
    ...


    from_response_headers_policy_id: typing.Optional[ResponseHeadersPolicyDefFromResponseHeadersPolicyIdParams] = pydantic.Field(None, description='Import an existing Response Headers Policy from its ID.')
    resource_config: typing.Optional[ResponseHeadersPolicyDefConfig] = pydantic.Field(None)


class ResponseHeadersPolicyDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class ResponseHeadersPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class ResponseHeadersPolicyDefFromResponseHeadersPolicyIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    response_headers_policy_id: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.AddBehaviorOptions
class AddBehaviorOptionsDef(BaseStruct):
    allowed_methods: typing.Optional[models.aws_cloudfront.AllowedMethodsDef] = pydantic.Field(None, description='HTTP methods to allow for this behavior. Default: AllowedMethods.ALLOW_GET_HEAD\n')
    cached_methods: typing.Optional[models.aws_cloudfront.CachedMethodsDef] = pydantic.Field(None, description='HTTP methods to cache for this behavior. Default: CachedMethods.CACHE_GET_HEAD\n')
    cache_policy: typing.Optional[typing.Union[models.aws_cloudfront.CachePolicyDef]] = pydantic.Field(None, description='The cache policy for this behavior. The cache policy determines what values are included in the cache key, and the time-to-live (TTL) values for the cache. Default: CachePolicy.CACHING_OPTIMIZED\n')
    compress: typing.Optional[bool] = pydantic.Field(None, description='Whether you want CloudFront to automatically compress certain files for this cache behavior. See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html#compressed-content-cloudfront-file-types for file types CloudFront will compress. Default: true\n')
    edge_lambdas: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.EdgeLambdaDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The Lambda@Edge functions to invoke before serving the contents. Default: - no Lambda functions will be invoked\n')
    function_associations: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.FunctionAssociationDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The CloudFront functions to invoke before serving the contents. Default: - no functions will be invoked\n')
    origin_request_policy: typing.Optional[typing.Union[models.aws_cloudfront.OriginRequestPolicyDef]] = pydantic.Field(None, description='The origin request policy for this behavior. The origin request policy determines which values (e.g., headers, cookies) are included in requests that CloudFront sends to the origin. Default: - none\n')
    response_headers_policy: typing.Optional[typing.Union[models.aws_cloudfront.ResponseHeadersPolicyDef]] = pydantic.Field(None, description='The response headers policy for this behavior. The response headers policy determines which headers are included in responses Default: - none\n')
    smooth_streaming: typing.Optional[bool] = pydantic.Field(None, description='Set this to true to indicate you want to distribute media files in the Microsoft Smooth Streaming format using this behavior. Default: false\n')
    trusted_key_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.KeyGroupDef]]] = pydantic.Field(None, description='A list of Key Groups that CloudFront can use to validate signed URLs or signed cookies. Default: - no KeyGroups are associated with cache behavior\n')
    viewer_protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.ViewerProtocolPolicy] = pydantic.Field(None, description='The protocol that viewers can use to access the files controlled by this behavior. Default: ViewerProtocolPolicy.ALLOW_ALL\n\n:exampleMetadata: infused\n\nExample::\n\n    # Add a behavior to a Distribution after initial creation.\n    # my_bucket: s3.Bucket\n    # my_web_distribution: cloudfront.Distribution\n\n    my_web_distribution.add_behavior("/images/*.jpg", origins.S3Origin(my_bucket),\n        viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allowed_methods', 'cached_methods', 'cache_policy', 'compress', 'edge_lambdas', 'function_associations', 'origin_request_policy', 'response_headers_policy', 'smooth_streaming', 'trusted_key_groups', 'viewer_protocol_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.AddBehaviorOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.Behavior
class BehaviorDef(BaseStruct):
    allowed_methods: typing.Optional[aws_cdk.aws_cloudfront.CloudFrontAllowedMethods] = pydantic.Field(None, description='The method this CloudFront distribution responds do. Default: GET_HEAD\n')
    cached_methods: typing.Optional[aws_cdk.aws_cloudfront.CloudFrontAllowedCachedMethods] = pydantic.Field(None, description='Which methods are cached by CloudFront by default. Default: GET_HEAD\n')
    compress: typing.Optional[bool] = pydantic.Field(None, description='If CloudFront should automatically compress some content types. Default: true\n')
    default_ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The default amount of time CloudFront will cache an object. This value applies only when your custom origin does not add HTTP headers, such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. Default: 86400 (1 day)\n')
    forwarded_values: typing.Union[models.aws_cloudfront.CfnDistribution_ForwardedValuesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The values CloudFront will forward to the origin when making a request. Default: none (no cookies - no headers)\n')
    function_associations: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.FunctionAssociationDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The CloudFront functions to invoke before serving the contents. Default: - no functions will be invoked\n')
    is_default_behavior: typing.Optional[bool] = pydantic.Field(None, description='If this behavior is the default behavior for the distribution. You must specify exactly one default distribution per CloudFront distribution. The default behavior is allowed to omit the "path" property.\n')
    lambda_function_associations: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.LambdaFunctionAssociationDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Declares associated lambda@edge functions for this distribution behaviour. Default: No lambda function associated\n')
    max_ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The max amount of time you want objects to stay in the cache before CloudFront queries your origin. Default: Duration.seconds(31536000) (one year)\n')
    min_ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The minimum amount of time that you want objects to stay in the cache before CloudFront queries your origin.\n')
    path_pattern: typing.Optional[str] = pydantic.Field(None, description='The path this behavior responds to. Required for all non-default behaviors. (The default behavior implicitly has "*" as the path pattern. )\n')
    trusted_key_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.KeyGroupDef]]] = pydantic.Field(None, description='A list of Key Groups that CloudFront can use to validate signed URLs or signed cookies. Default: - no KeyGroups are associated with cache behavior\n')
    trusted_signers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='(deprecated) Trusted signers is how CloudFront allows you to serve private content. The signers are the account IDs that are allowed to sign cookies/presigned URLs for this distribution. If you pass a non empty value, all requests for this behavior must be signed (no public access will be allowed)\n')
    viewer_protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.ViewerProtocolPolicy] = pydantic.Field(None, description='The viewer policy for this behavior. Default: - the distribution wide viewer protocol policy will be used\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_cloudfront as cloudfront\n    from aws_cdk import aws_lambda as lambda_\n\n    # function_: cloudfront.Function\n    # key_group: cloudfront.KeyGroup\n    # version: lambda.Version\n\n    behavior = cloudfront.Behavior(\n        allowed_methods=cloudfront.CloudFrontAllowedMethods.GET_HEAD,\n        cached_methods=cloudfront.CloudFrontAllowedCachedMethods.GET_HEAD,\n        compress=False,\n        default_ttl=cdk.Duration.minutes(30),\n        forwarded_values=cloudfront.CfnDistribution.ForwardedValuesProperty(\n            query_string=False,\n\n            # the properties below are optional\n            cookies=cloudfront.CfnDistribution.CookiesProperty(\n                forward="forward",\n\n                # the properties below are optional\n                whitelisted_names=["whitelistedNames"]\n            ),\n            headers=["headers"],\n            query_string_cache_keys=["queryStringCacheKeys"]\n        ),\n        function_associations=[cloudfront.FunctionAssociation(\n            event_type=cloudfront.FunctionEventType.VIEWER_REQUEST,\n            function=function_\n        )],\n        is_default_behavior=False,\n        lambda_function_associations=[cloudfront.LambdaFunctionAssociation(\n            event_type=cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n            lambda_function=version,\n\n            # the properties below are optional\n            include_body=False\n        )],\n        max_ttl=cdk.Duration.minutes(30),\n        min_ttl=cdk.Duration.minutes(30),\n        path_pattern="pathPattern",\n        trusted_key_groups=[key_group],\n        trusted_signers=["trustedSigners"],\n        viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.HTTPS_ONLY\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allowed_methods', 'cached_methods', 'compress', 'default_ttl', 'forwarded_values', 'function_associations', 'is_default_behavior', 'lambda_function_associations', 'max_ttl', 'min_ttl', 'path_pattern', 'trusted_key_groups', 'trusted_signers', 'viewer_protocol_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.Behavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.BehaviorOptions
class BehaviorOptionsDef(BaseStruct):
    allowed_methods: typing.Optional[models.aws_cloudfront.AllowedMethodsDef] = pydantic.Field(None, description='HTTP methods to allow for this behavior. Default: AllowedMethods.ALLOW_GET_HEAD\n')
    cached_methods: typing.Optional[models.aws_cloudfront.CachedMethodsDef] = pydantic.Field(None, description='HTTP methods to cache for this behavior. Default: CachedMethods.CACHE_GET_HEAD\n')
    cache_policy: typing.Optional[typing.Union[models.aws_cloudfront.CachePolicyDef]] = pydantic.Field(None, description='The cache policy for this behavior. The cache policy determines what values are included in the cache key, and the time-to-live (TTL) values for the cache. Default: CachePolicy.CACHING_OPTIMIZED\n')
    compress: typing.Optional[bool] = pydantic.Field(None, description='Whether you want CloudFront to automatically compress certain files for this cache behavior. See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html#compressed-content-cloudfront-file-types for file types CloudFront will compress. Default: true\n')
    edge_lambdas: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.EdgeLambdaDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The Lambda@Edge functions to invoke before serving the contents. Default: - no Lambda functions will be invoked\n')
    function_associations: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.FunctionAssociationDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The CloudFront functions to invoke before serving the contents. Default: - no functions will be invoked\n')
    origin_request_policy: typing.Optional[typing.Union[models.aws_cloudfront.OriginRequestPolicyDef]] = pydantic.Field(None, description='The origin request policy for this behavior. The origin request policy determines which values (e.g., headers, cookies) are included in requests that CloudFront sends to the origin. Default: - none\n')
    response_headers_policy: typing.Optional[typing.Union[models.aws_cloudfront.ResponseHeadersPolicyDef]] = pydantic.Field(None, description='The response headers policy for this behavior. The response headers policy determines which headers are included in responses Default: - none\n')
    smooth_streaming: typing.Optional[bool] = pydantic.Field(None, description='Set this to true to indicate you want to distribute media files in the Microsoft Smooth Streaming format using this behavior. Default: false\n')
    trusted_key_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.KeyGroupDef]]] = pydantic.Field(None, description='A list of Key Groups that CloudFront can use to validate signed URLs or signed cookies. Default: - no KeyGroups are associated with cache behavior\n')
    viewer_protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.ViewerProtocolPolicy] = pydantic.Field(None, description='The protocol that viewers can use to access the files controlled by this behavior. Default: ViewerProtocolPolicy.ALLOW_ALL\n')
    origin: typing.Union[models.aws_cloudfront.OriginBaseDef, models.aws_cloudfront_origins.HttpOriginDef, models.aws_cloudfront_origins.LoadBalancerV2OriginDef, models.aws_cloudfront_origins.OriginGroupDef, models.aws_cloudfront_origins.RestApiOriginDef, models.aws_cloudfront_origins.S3OriginDef] = pydantic.Field(..., description='The origin that you want CloudFront to route requests to when they match this behavior.\n\n:exampleMetadata: infused\n\nExample::\n\n    # s3_bucket: s3.Bucket\n    # Add a cloudfront Function to a Distribution\n    cf_function = cloudfront.Function(self, "Function",\n        code=cloudfront.FunctionCode.from_inline("function handler(event) { return event.request }")\n    )\n    cloudfront.Distribution(self, "distro",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=origins.S3Origin(s3_bucket),\n            function_associations=[cloudfront.FunctionAssociation(\n                function=cf_function,\n                event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allowed_methods', 'cached_methods', 'cache_policy', 'compress', 'edge_lambdas', 'function_associations', 'origin_request_policy', 'response_headers_policy', 'smooth_streaming', 'trusted_key_groups', 'viewer_protocol_policy', 'origin']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.BehaviorOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CachePolicyProps
class CachePolicyPropsDef(BaseStruct):
    cache_policy_name: typing.Optional[str] = pydantic.Field(None, description="A unique name to identify the cache policy. The name must only include '-', '_', or alphanumeric characters. Default: - generated from the ``id``\n")
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the cache policy. Default: - no comment\n')
    cookie_behavior: typing.Optional[models.aws_cloudfront.CacheCookieBehaviorDef] = pydantic.Field(None, description='Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Default: CacheCookieBehavior.none()\n')
    default_ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The default amount of time for objects to stay in the CloudFront cache. Only used when the origin does not send Cache-Control or Expires headers with the object. Default: - The greater of 1 day and ``minTtl``\n')
    enable_accept_encoding_brotli: typing.Optional[bool] = pydantic.Field(None, description="Whether to normalize and include the ``Accept-Encoding`` header in the cache key when the ``Accept-Encoding`` header is 'br'. Default: false\n")
    enable_accept_encoding_gzip: typing.Optional[bool] = pydantic.Field(None, description="Whether to normalize and include the ``Accept-Encoding`` header in the cache key when the ``Accept-Encoding`` header is 'gzip'. Default: false\n")
    header_behavior: typing.Optional[models.aws_cloudfront.CacheHeaderBehaviorDef] = pydantic.Field(None, description='Determines whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Default: CacheHeaderBehavior.none()\n')
    max_ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time for objects to stay in the CloudFront cache. CloudFront uses this value only when the origin sends Cache-Control or Expires headers with the object. Default: - The greater of 1 year and ``defaultTtl``\n')
    min_ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The minimum amount of time for objects to stay in the CloudFront cache. Default: Duration.seconds(0)\n')
    query_string_behavior: typing.Optional[models.aws_cloudfront.CacheQueryStringBehaviorDef] = pydantic.Field(None, description='Determines whether any query strings are included in the cache key and automatically included in requests that CloudFront sends to the origin. Default: CacheQueryStringBehavior.none()\n\n:exampleMetadata: infused\n\nExample::\n\n    # Creating a custom cache policy for a Distribution -- all parameters optional\n    # bucket_origin: origins.S3Origin\n\n    my_cache_policy = cloudfront.CachePolicy(self, "myCachePolicy",\n        cache_policy_name="MyPolicy",\n        comment="A default policy",\n        default_ttl=Duration.days(2),\n        min_ttl=Duration.minutes(1),\n        max_ttl=Duration.days(10),\n        cookie_behavior=cloudfront.CacheCookieBehavior.all(),\n        header_behavior=cloudfront.CacheHeaderBehavior.allow_list("X-CustomHeader"),\n        query_string_behavior=cloudfront.CacheQueryStringBehavior.deny_list("username"),\n        enable_accept_encoding_gzip=True,\n        enable_accept_encoding_brotli=True\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            cache_policy=my_cache_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cache_policy_name', 'comment', 'cookie_behavior', 'default_ttl', 'enable_accept_encoding_brotli', 'enable_accept_encoding_gzip', 'header_behavior', 'max_ttl', 'min_ttl', 'query_string_behavior']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CachePolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnCachePolicy.CachePolicyConfigProperty
class CfnCachePolicy_CachePolicyConfigPropertyDef(BaseStruct):
    default_ttl: typing.Union[int, float] = pydantic.Field(..., description="The default amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated. CloudFront uses this value as the object's time to live (TTL) only when the origin does *not* send ``Cache-Control`` or ``Expires`` headers with the object. For more information, see `Managing How Long Content Stays in an Edge Cache (Expiration) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* . The default value for this field is 86400 seconds (one day). If the value of ``MinTTL`` is more than 86400 seconds, then the default value for this field is the same as the value of ``MinTTL`` .\n")
    max_ttl: typing.Union[int, float] = pydantic.Field(..., description='The maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated. CloudFront uses this value only when the origin sends ``Cache-Control`` or ``Expires`` headers with the object. For more information, see `Managing How Long Content Stays in an Edge Cache (Expiration) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* . The default value for this field is 31536000 seconds (one year). If the value of ``MinTTL`` or ``DefaultTTL`` is more than 31536000 seconds, then the default value for this field is the same as the value of ``DefaultTTL`` .\n')
    min_ttl: typing.Union[int, float] = pydantic.Field(..., description='The minimum amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated. For more information, see `Managing How Long Content Stays in an Edge Cache (Expiration) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    name: str = pydantic.Field(..., description='A unique name to identify the cache policy.\n')
    parameters_in_cache_key_and_forwarded_to_origin: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_ParametersInCacheKeyAndForwardedToOriginPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The HTTP headers, cookies, and URL query strings to include in the cache key. The values included in the cache key are also included in requests that CloudFront sends to the origin.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the cache policy. The comment cannot be longer than 128 characters.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-cachepolicy-cachepolicyconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cache_policy_config_property = cloudfront.CfnCachePolicy.CachePolicyConfigProperty(\n        default_ttl=123,\n        max_ttl=123,\n        min_ttl=123,\n        name="name",\n        parameters_in_cache_key_and_forwarded_to_origin=cloudfront.CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty(\n            cookies_config=cloudfront.CfnCachePolicy.CookiesConfigProperty(\n                cookie_behavior="cookieBehavior",\n\n                # the properties below are optional\n                cookies=["cookies"]\n            ),\n            enable_accept_encoding_gzip=False,\n            headers_config=cloudfront.CfnCachePolicy.HeadersConfigProperty(\n                header_behavior="headerBehavior",\n\n                # the properties below are optional\n                headers=["headers"]\n            ),\n            query_strings_config=cloudfront.CfnCachePolicy.QueryStringsConfigProperty(\n                query_string_behavior="queryStringBehavior",\n\n                # the properties below are optional\n                query_strings=["queryStrings"]\n            ),\n\n            # the properties below are optional\n            enable_accept_encoding_brotli=False\n        ),\n\n        # the properties below are optional\n        comment="comment"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_ttl', 'max_ttl', 'min_ttl', 'name', 'parameters_in_cache_key_and_forwarded_to_origin', 'comment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCachePolicy.CachePolicyConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnCachePolicy.CookiesConfigProperty
class CfnCachePolicy_CookiesConfigPropertyDef(BaseStruct):
    cookie_behavior: str = pydantic.Field(..., description='Determines whether any cookies in viewer requests are included in the cache key and in requests that CloudFront sends to the origin. Valid values are: - ``none`` – No cookies in viewer requests are included in the cache key or in requests that CloudFront sends to the origin. Even when this field is set to ``none`` , any cookies that are listed in an ``OriginRequestPolicy`` *are* included in origin requests. - ``whitelist`` – Only the cookies in viewer requests that are listed in the ``CookieNames`` type are included in the cache key and in requests that CloudFront sends to the origin. - ``allExcept`` – All cookies in viewer requests are included in the cache key and in requests that CloudFront sends to the origin, **except** for those that are listed in the ``CookieNames`` type, which are not included. - ``all`` – All cookies in viewer requests are included in the cache key and in requests that CloudFront sends to the origin.\n')
    cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Contains a list of cookie names.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-cachepolicy-cookiesconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cookies_config_property = cloudfront.CfnCachePolicy.CookiesConfigProperty(\n        cookie_behavior="cookieBehavior",\n\n        # the properties below are optional\n        cookies=["cookies"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cookie_behavior', 'cookies']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCachePolicy.CookiesConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnCachePolicy.HeadersConfigProperty
class CfnCachePolicy_HeadersConfigPropertyDef(BaseStruct):
    header_behavior: str = pydantic.Field(..., description='Determines whether any HTTP headers are included in the cache key and in requests that CloudFront sends to the origin. Valid values are: - ``none`` – No HTTP headers are included in the cache key or in requests that CloudFront sends to the origin. Even when this field is set to ``none`` , any headers that are listed in an ``OriginRequestPolicy`` *are* included in origin requests. - ``whitelist`` – Only the HTTP headers that are listed in the ``Headers`` type are included in the cache key and in requests that CloudFront sends to the origin.\n')
    headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Contains a list of HTTP header names.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-cachepolicy-headersconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    headers_config_property = cloudfront.CfnCachePolicy.HeadersConfigProperty(\n        header_behavior="headerBehavior",\n\n        # the properties below are optional\n        headers=["headers"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['header_behavior', 'headers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCachePolicy.HeadersConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty
class CfnCachePolicy_ParametersInCacheKeyAndForwardedToOriginPropertyDef(BaseStruct):
    cookies_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_CookiesConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='An object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and in requests that CloudFront sends to the origin.\n')
    enable_accept_encoding_gzip: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description="A flag that can affect whether the ``Accept-Encoding`` HTTP header is included in the cache key and included in requests that CloudFront sends to the origin. This field is related to the ``EnableAcceptEncodingBrotli`` field. If one or both of these fields is ``true`` *and* the viewer request includes the ``Accept-Encoding`` header, then CloudFront does the following: - Normalizes the value of the viewer's ``Accept-Encoding`` header - Includes the normalized header in the cache key - Includes the normalized header in the request to the origin, if a request is necessary For more information, see `Compression support <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-policy-compressed-objects>`_ in the *Amazon CloudFront Developer Guide* . If you set this value to ``true`` , and this cache behavior also has an origin request policy attached, do not include the ``Accept-Encoding`` header in the origin request policy. CloudFront always includes the ``Accept-Encoding`` header in origin requests when the value of this field is ``true`` , so including this header in an origin request policy has no effect. If both of these fields are ``false`` , then CloudFront treats the ``Accept-Encoding`` header the same as any other HTTP header in the viewer request. By default, it's not included in the cache key and it's not included in origin requests. In this case, you can manually add ``Accept-Encoding`` to the headers whitelist like any other HTTP header.\n")
    headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_HeadersConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='An object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and in requests that CloudFront sends to the origin.\n')
    query_strings_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_QueryStringsConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and in requests that CloudFront sends to the origin.\n')
    enable_accept_encoding_brotli: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A flag that can affect whether the ``Accept-Encoding`` HTTP header is included in the cache key and included in requests that CloudFront sends to the origin. This field is related to the ``EnableAcceptEncodingGzip`` field. If one or both of these fields is ``true`` *and* the viewer request includes the ``Accept-Encoding`` header, then CloudFront does the following: - Normalizes the value of the viewer\'s ``Accept-Encoding`` header - Includes the normalized header in the cache key - Includes the normalized header in the request to the origin, if a request is necessary For more information, see `Compression support <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-policy-compressed-objects>`_ in the *Amazon CloudFront Developer Guide* . If you set this value to ``true`` , and this cache behavior also has an origin request policy attached, do not include the ``Accept-Encoding`` header in the origin request policy. CloudFront always includes the ``Accept-Encoding`` header in origin requests when the value of this field is ``true`` , so including this header in an origin request policy has no effect. If both of these fields are ``false`` , then CloudFront treats the ``Accept-Encoding`` header the same as any other HTTP header in the viewer request. By default, it\'s not included in the cache key and it\'s not included in origin requests. In this case, you can manually add ``Accept-Encoding`` to the headers whitelist like any other HTTP header.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-cachepolicy-parametersincachekeyandforwardedtoorigin.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    parameters_in_cache_key_and_forwarded_to_origin_property = cloudfront.CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty(\n        cookies_config=cloudfront.CfnCachePolicy.CookiesConfigProperty(\n            cookie_behavior="cookieBehavior",\n\n            # the properties below are optional\n            cookies=["cookies"]\n        ),\n        enable_accept_encoding_gzip=False,\n        headers_config=cloudfront.CfnCachePolicy.HeadersConfigProperty(\n            header_behavior="headerBehavior",\n\n            # the properties below are optional\n            headers=["headers"]\n        ),\n        query_strings_config=cloudfront.CfnCachePolicy.QueryStringsConfigProperty(\n            query_string_behavior="queryStringBehavior",\n\n            # the properties below are optional\n            query_strings=["queryStrings"]\n        ),\n\n        # the properties below are optional\n        enable_accept_encoding_brotli=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cookies_config', 'enable_accept_encoding_gzip', 'headers_config', 'query_strings_config', 'enable_accept_encoding_brotli']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnCachePolicy.QueryStringsConfigProperty
class CfnCachePolicy_QueryStringsConfigPropertyDef(BaseStruct):
    query_string_behavior: str = pydantic.Field(..., description='Determines whether any URL query strings in viewer requests are included in the cache key and in requests that CloudFront sends to the origin. Valid values are: - ``none`` – No query strings in viewer requests are included in the cache key or in requests that CloudFront sends to the origin. Even when this field is set to ``none`` , any query strings that are listed in an ``OriginRequestPolicy`` *are* included in origin requests. - ``whitelist`` – Only the query strings in viewer requests that are listed in the ``QueryStringNames`` type are included in the cache key and in requests that CloudFront sends to the origin. - ``allExcept`` – All query strings in viewer requests are included in the cache key and in requests that CloudFront sends to the origin, **except** those that are listed in the ``QueryStringNames`` type, which are not included. - ``all`` – All query strings in viewer requests are included in the cache key and in requests that CloudFront sends to the origin.\n')
    query_strings: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Contains a list of query string names.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-cachepolicy-querystringsconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    query_strings_config_property = cloudfront.CfnCachePolicy.QueryStringsConfigProperty(\n        query_string_behavior="queryStringBehavior",\n\n        # the properties below are optional\n        query_strings=["queryStrings"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['query_string_behavior', 'query_strings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCachePolicy.QueryStringsConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfigProperty
class CfnCloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfigPropertyDef(BaseStruct):
    comment: str = pydantic.Field(..., description='A comment to describe the origin access identity. The comment cannot be longer than 128 characters.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-cloudfrontoriginaccessidentity-cloudfrontoriginaccessidentityconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cloud_front_origin_access_identity_config_property = cloudfront.CfnCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfigProperty(\n        comment="comment"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.ContinuousDeploymentPolicyConfigProperty
class CfnContinuousDeploymentPolicy_ContinuousDeploymentPolicyConfigPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that indicates whether this continuous deployment policy is enabled (in effect). When this value is ``true`` , this policy is enabled and in effect. When this value is ``false`` , this policy is not enabled and has no effect.\n')
    staging_distribution_dns_names: typing.Sequence[str] = pydantic.Field(..., description='The CloudFront domain name of the staging distribution. For example: ``d111111abcdef8.cloudfront.net`` .\n')
    traffic_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_TrafficConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains the parameters for routing production traffic from your primary to staging distributions.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-continuousdeploymentpolicy-continuousdeploymentpolicyconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    continuous_deployment_policy_config_property = cloudfront.CfnContinuousDeploymentPolicy.ContinuousDeploymentPolicyConfigProperty(\n        enabled=False,\n        staging_distribution_dns_names=["stagingDistributionDnsNames"],\n\n        # the properties below are optional\n        traffic_config=cloudfront.CfnContinuousDeploymentPolicy.TrafficConfigProperty(\n            type="type",\n\n            # the properties below are optional\n            single_header_config=cloudfront.CfnContinuousDeploymentPolicy.SingleHeaderConfigProperty(\n                header="header",\n                value="value"\n            ),\n            single_weight_config=cloudfront.CfnContinuousDeploymentPolicy.SingleWeightConfigProperty(\n                weight=123,\n\n                # the properties below are optional\n                session_stickiness_config=cloudfront.CfnContinuousDeploymentPolicy.SessionStickinessConfigProperty(\n                    idle_ttl=123,\n                    maximum_ttl=123\n                )\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'staging_distribution_dns_names', 'traffic_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.ContinuousDeploymentPolicyConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.SessionStickinessConfigProperty
class CfnContinuousDeploymentPolicy_SessionStickinessConfigPropertyDef(BaseStruct):
    idle_ttl: typing.Union[int, float] = pydantic.Field(..., description='The amount of time after which you want sessions to cease if no requests are received. Allowed values are 300–3600 seconds (5–60 minutes).\n')
    maximum_ttl: typing.Union[int, float] = pydantic.Field(..., description='The maximum amount of time to consider requests from the viewer as being part of the same session. Allowed values are 300–3600 seconds (5–60 minutes).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-continuousdeploymentpolicy-sessionstickinessconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    session_stickiness_config_property = cloudfront.CfnContinuousDeploymentPolicy.SessionStickinessConfigProperty(\n        idle_ttl=123,\n        maximum_ttl=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['idle_ttl', 'maximum_ttl']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.SessionStickinessConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.SingleHeaderConfigProperty
class CfnContinuousDeploymentPolicy_SingleHeaderConfigPropertyDef(BaseStruct):
    header: str = pydantic.Field(..., description='The request header name that you want CloudFront to send to your staging distribution. The header must contain the prefix ``aws-cf-cd-`` .\n')
    value: str = pydantic.Field(..., description='The request header value.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-continuousdeploymentpolicy-singleheaderconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    single_header_config_property = cloudfront.CfnContinuousDeploymentPolicy.SingleHeaderConfigProperty(\n        header="header",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['header', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.SingleHeaderConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.SingleWeightConfigProperty
class CfnContinuousDeploymentPolicy_SingleWeightConfigPropertyDef(BaseStruct):
    weight: typing.Union[int, float] = pydantic.Field(..., description='The percentage of traffic to send to a staging distribution, expressed as a decimal number between 0 and .15.\n')
    session_stickiness_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_SessionStickinessConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to your staging distribution, while others are sent to your primary distribution. Define the session duration using TTL values.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-continuousdeploymentpolicy-singleweightconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    single_weight_config_property = cloudfront.CfnContinuousDeploymentPolicy.SingleWeightConfigProperty(\n        weight=123,\n\n        # the properties below are optional\n        session_stickiness_config=cloudfront.CfnContinuousDeploymentPolicy.SessionStickinessConfigProperty(\n            idle_ttl=123,\n            maximum_ttl=123\n        )\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['weight', 'session_stickiness_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.SingleWeightConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.TrafficConfigProperty
class CfnContinuousDeploymentPolicy_TrafficConfigPropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='The type of traffic configuration.\n')
    single_header_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_SingleHeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines which HTTP requests are sent to the staging distribution.\n')
    single_weight_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_SingleWeightConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains the percentage of traffic to send to the staging distribution.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-continuousdeploymentpolicy-trafficconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    traffic_config_property = cloudfront.CfnContinuousDeploymentPolicy.TrafficConfigProperty(\n        type="type",\n\n        # the properties below are optional\n        single_header_config=cloudfront.CfnContinuousDeploymentPolicy.SingleHeaderConfigProperty(\n            header="header",\n            value="value"\n        ),\n        single_weight_config=cloudfront.CfnContinuousDeploymentPolicy.SingleWeightConfigProperty(\n            weight=123,\n\n            # the properties below are optional\n            session_stickiness_config=cloudfront.CfnContinuousDeploymentPolicy.SessionStickinessConfigProperty(\n                idle_ttl=123,\n                maximum_ttl=123\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'single_header_config', 'single_weight_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy.TrafficConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.CacheBehaviorProperty
class CfnDistribution_CacheBehaviorPropertyDef(BaseStruct):
    path_pattern: str = pydantic.Field(..., description='The pattern (for example, ``images/*.jpg`` ) that specifies which requests to apply the behavior to. When CloudFront receives a viewer request, the requested path is compared with path patterns in the order in which cache behaviors are listed in the distribution. .. epigraph:: You can optionally include a slash ( ``/`` ) at the beginning of the path pattern. For example, ``/images/*.jpg`` . CloudFront behavior is the same with or without the leading ``/`` . The path pattern for the default cache behavior is ``*`` and cannot be changed. If the request for an object does not match the path pattern for any cache behaviors, CloudFront applies the behavior in the default cache behavior. For more information, see `Path Pattern <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern>`_ in the *Amazon CloudFront Developer Guide* .\n')
    target_origin_id: str = pydantic.Field(..., description='The value of ``ID`` for the origin that you want CloudFront to route requests to when they match this cache behavior.\n')
    viewer_protocol_policy: str = pydantic.Field(..., description="The protocol that viewers can use to access the files in the origin specified by ``TargetOriginId`` when a request matches the path pattern in ``PathPattern`` . You can specify the following options: - ``allow-all`` : Viewers can use HTTP or HTTPS. - ``redirect-to-https`` : If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL. - ``https-only`` : If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden). For more information about requiring the HTTPS protocol, see `Requiring HTTPS Between Viewers and CloudFront <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html>`_ in the *Amazon CloudFront Developer Guide* . .. epigraph:: The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see `Managing Cache Expiration <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* .\n")
    allowed_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices: - CloudFront forwards only ``GET`` and ``HEAD`` requests. - CloudFront forwards only ``GET`` , ``HEAD`` , and ``OPTIONS`` requests. - CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST`` , and ``DELETE`` requests. If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.\n")
    cached_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices: - CloudFront caches responses to ``GET`` and ``HEAD`` requests. - CloudFront caches responses to ``GET`` , ``HEAD`` , and ``OPTIONS`` requests. If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.\n')
    cache_policy_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the cache policy that is attached to this cache behavior. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . A ``CacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues`` . We recommend that you use a ``CachePolicyId`` .\n')
    compress: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see `Serving Compressed Files <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    default_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a cache policy instead of this field. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as ``Cache-Control max-age`` , ``Cache-Control s-maxage`` , and ``Expires`` to objects. For more information, see `Managing How Long Content Stays in an Edge Cache (Expiration) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    field_level_encryption_id: typing.Optional[str] = pydantic.Field(None, description='The value of ``ID`` for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for this cache behavior.\n')
    forwarded_values: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_ForwardedValuesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. For more information, see `Working with policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html>`_ in the *Amazon CloudFront Developer Guide* . If you want to include values in the cache key, use a cache policy. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ or `Using the managed origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html>`_ in the *Amazon CloudFront Developer Guide* . A ``CacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues`` . We recommend that you use a ``CachePolicyId`` . A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.\n')
    function_associations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_FunctionAssociationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to the ``LIVE`` stage to associate them with a cache behavior.\n')
    lambda_function_associations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LambdaFunctionAssociationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.\n')
    max_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache policy instead of this field. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as ``Cache-Control max-age`` , ``Cache-Control s-maxage`` , and ``Expires`` to objects. For more information, see `Managing How Long Content Stays in an Edge Cache (Expiration) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    min_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache policy instead of this field. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see `Managing How Long Content Stays in an Edge Cache (Expiration) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* . You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward all headers to your origin (under ``Headers`` , if you specify ``1`` for ``Quantity`` and ``*`` for ``Name`` ).\n')
    origin_request_policy_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the origin request policy that is attached to this cache behavior. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ or `Using the managed origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    realtime_log_config_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information, see `Real-time logs <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    response_headers_policy_id: typing.Optional[str] = pydantic.Field(None, description='The identifier for a response headers policy.\n')
    smooth_streaming: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify ``true`` ; if not, specify ``false`` . If you specify ``true`` for ``SmoothStreaming`` , you can still distribute other content using this cache behavior if the content matches the value of ``PathPattern`` .\n')
    trusted_key_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of key groups that CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see `Serving private content <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    trusted_signers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='.. epigraph:: We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners`` . A list of AWS account IDs whose public keys CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with the private key of a CloudFront key pair in the trusted signer\'s AWS account . The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see `Serving private content <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html>`_ in the *Amazon CloudFront Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-cachebehavior.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cache_behavior_property = cloudfront.CfnDistribution.CacheBehaviorProperty(\n        path_pattern="pathPattern",\n        target_origin_id="targetOriginId",\n        viewer_protocol_policy="viewerProtocolPolicy",\n\n        # the properties below are optional\n        allowed_methods=["allowedMethods"],\n        cached_methods=["cachedMethods"],\n        cache_policy_id="cachePolicyId",\n        compress=False,\n        default_ttl=123,\n        field_level_encryption_id="fieldLevelEncryptionId",\n        forwarded_values=cloudfront.CfnDistribution.ForwardedValuesProperty(\n            query_string=False,\n\n            # the properties below are optional\n            cookies=cloudfront.CfnDistribution.CookiesProperty(\n                forward="forward",\n\n                # the properties below are optional\n                whitelisted_names=["whitelistedNames"]\n            ),\n            headers=["headers"],\n            query_string_cache_keys=["queryStringCacheKeys"]\n        ),\n        function_associations=[cloudfront.CfnDistribution.FunctionAssociationProperty(\n            event_type="eventType",\n            function_arn="functionArn"\n        )],\n        lambda_function_associations=[cloudfront.CfnDistribution.LambdaFunctionAssociationProperty(\n            event_type="eventType",\n            include_body=False,\n            lambda_function_arn="lambdaFunctionArn"\n        )],\n        max_ttl=123,\n        min_ttl=123,\n        origin_request_policy_id="originRequestPolicyId",\n        realtime_log_config_arn="realtimeLogConfigArn",\n        response_headers_policy_id="responseHeadersPolicyId",\n        smooth_streaming=False,\n        trusted_key_groups=["trustedKeyGroups"],\n        trusted_signers=["trustedSigners"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['path_pattern', 'target_origin_id', 'viewer_protocol_policy', 'allowed_methods', 'cached_methods', 'cache_policy_id', 'compress', 'default_ttl', 'field_level_encryption_id', 'forwarded_values', 'function_associations', 'lambda_function_associations', 'max_ttl', 'min_ttl', 'origin_request_policy_id', 'realtime_log_config_arn', 'response_headers_policy_id', 'smooth_streaming', 'trusted_key_groups', 'trusted_signers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.CacheBehaviorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.CookiesProperty
class CfnDistribution_CookiesPropertyDef(BaseStruct):
    forward: str = pydantic.Field(..., description="This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ in the *Amazon CloudFront Developer Guide* . If you want to send cookies to the origin but not include them in the cache key, use origin request policy. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ in the *Amazon CloudFront Developer Guide* . Specifies which cookies to forward to the origin for this cache behavior: all, none, or the list of cookies specified in the ``WhitelistedNames`` complex type. Amazon S3 doesn't process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the ``Forward`` element.\n")
    whitelisted_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ in the *Amazon CloudFront Developer Guide* . If you want to send cookies to the origin but not include them in the cache key, use an origin request policy. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ in the *Amazon CloudFront Developer Guide* . Required if you specify ``whitelist`` for the value of ``Forward`` . A complex type that specifies how many different cookies you want CloudFront to forward to the origin for this cache behavior and, if you want to forward selected cookies, the names of those cookies. If you specify ``all`` or ``none`` for the value of ``Forward`` , omit ``WhitelistedNames`` . If you change the value of ``Forward`` from ``whitelist`` to ``all`` or ``none`` and you don\'t delete the ``WhitelistedNames`` element and its child elements, CloudFront deletes them automatically. For the current limit on the number of cookie names that you can whitelist for each cache behavior, see `CloudFront Limits <https://docs.aws.amazon.com/general/latest/gr/xrefaws_service_limits.html#limits_cloudfront>`_ in the *AWS General Reference* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-cookies.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cookies_property = cloudfront.CfnDistribution.CookiesProperty(\n        forward="forward",\n\n        # the properties below are optional\n        whitelisted_names=["whitelistedNames"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['forward', 'whitelisted_names']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.CookiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.CustomErrorResponseProperty
class CfnDistribution_CustomErrorResponsePropertyDef(BaseStruct):
    error_code: typing.Union[int, float] = pydantic.Field(..., description='The HTTP status code for which you want to specify a custom error page and/or a caching duration.\n')
    error_caching_min_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ``ErrorCode`` . When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has been resolved and the requested object is now available. For more information, see `Customizing Error Responses <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    response_code: typing.Union[int, float, None] = pydantic.Field(None, description="The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety of reasons that you might want CloudFront to return a status code different from the status code that your origin returned to CloudFront, for example: - Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute ``200`` , the response typically won't be intercepted. - If you don't care about distinguishing among different client errors or server errors, you can specify ``400`` or ``500`` as the ``ResponseCode`` for all 4xx or 5xx errors. - You might want to return a ``200`` status code (OK) and static website so your customers don't know that your website is down. If you specify a value for ``ResponseCode`` , you must also specify a value for ``ResponsePagePath`` .\n")
    response_page_path: typing.Optional[str] = pydantic.Field(None, description='The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ``ErrorCode`` , for example, ``/4xx-errors/403-forbidden.html`` . If you want to store your objects and your custom error pages in different locations, your distribution must include a cache behavior for which the following is true:. - The value of ``PathPattern`` matches the path to your custom error messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory named ``/4xx-errors`` . Your distribution must include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for example, ``/4xx-errors/*`` . - The value of ``TargetOriginId`` specifies the value of the ``ID`` element for the origin that contains your custom error pages. If you specify a value for ``ResponsePagePath`` , you must also specify a value for ``ResponseCode`` . We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can\'t get the files that you want to return to viewers because the origin server is unavailable.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-customerrorresponse.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    custom_error_response_property = cloudfront.CfnDistribution.CustomErrorResponseProperty(\n        error_code=123,\n\n        # the properties below are optional\n        error_caching_min_ttl=123,\n        response_code=123,\n        response_page_path="responsePagePath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['error_code', 'error_caching_min_ttl', 'response_code', 'response_page_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.CustomErrorResponseProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.CustomOriginConfigProperty
class CfnDistribution_CustomOriginConfigPropertyDef(BaseStruct):
    origin_protocol_policy: str = pydantic.Field(..., description='Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Valid values are:. - ``http-only`` – CloudFront always uses HTTP to connect to the origin. - ``match-viewer`` – CloudFront connects to the origin using the same protocol that the viewer used to connect to CloudFront. - ``https-only`` – CloudFront always uses HTTPS to connect to the origin.\n')
    http_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTP port that CloudFront uses to connect to the origin. Specify the HTTP port that the origin listens on.\n')
    https_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTPS port that CloudFront uses to connect to the origin. Specify the HTTPS port that the origin listens on.\n')
    origin_keepalive_timeout: typing.Union[int, float, None] = pydantic.Field(None, description="Specifies how long, in seconds, CloudFront persists its connection to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 5 seconds. For more information, see `Origin Keep-alive Timeout <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginKeepaliveTimeout>`_ in the *Amazon CloudFront Developer Guide* .\n")
    origin_read_timeout: typing.Union[int, float, None] = pydantic.Field(None, description="Specifies how long, in seconds, CloudFront waits for a response from the origin. This is also known as the *origin response timeout* . The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds. For more information, see `Origin Response Timeout <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout>`_ in the *Amazon CloudFront Developer Guide* .\n")
    origin_ssl_protocols: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting to your origin over HTTPS. Valid values include ``SSLv3`` , ``TLSv1`` , ``TLSv1.1`` , and ``TLSv1.2`` . For more information, see `Minimum Origin SSL Protocol <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginSSLProtocols>`_ in the *Amazon CloudFront Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-customoriginconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    custom_origin_config_property = cloudfront.CfnDistribution.CustomOriginConfigProperty(\n        origin_protocol_policy="originProtocolPolicy",\n\n        # the properties below are optional\n        http_port=123,\n        https_port=123,\n        origin_keepalive_timeout=123,\n        origin_read_timeout=123,\n        origin_ssl_protocols=["originSslProtocols"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['origin_protocol_policy', 'http_port', 'https_port', 'origin_keepalive_timeout', 'origin_read_timeout', 'origin_ssl_protocols']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.CustomOriginConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.DefaultCacheBehaviorProperty
class CfnDistribution_DefaultCacheBehaviorPropertyDef(BaseStruct):
    target_origin_id: str = pydantic.Field(..., description='The value of ``ID`` for the origin that you want CloudFront to route requests to when they use the default cache behavior.\n')
    viewer_protocol_policy: str = pydantic.Field(..., description="The protocol that viewers can use to access the files in the origin specified by ``TargetOriginId`` when a request matches the path pattern in ``PathPattern`` . You can specify the following options: - ``allow-all`` : Viewers can use HTTP or HTTPS. - ``redirect-to-https`` : If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL. - ``https-only`` : If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden). For more information about requiring the HTTPS protocol, see `Requiring HTTPS Between Viewers and CloudFront <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html>`_ in the *Amazon CloudFront Developer Guide* . .. epigraph:: The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see `Managing Cache Expiration <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* .\n")
    allowed_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices: - CloudFront forwards only ``GET`` and ``HEAD`` requests. - CloudFront forwards only ``GET`` , ``HEAD`` , and ``OPTIONS`` requests. - CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST`` , and ``DELETE`` requests. If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.\n")
    cached_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices: - CloudFront caches responses to ``GET`` and ``HEAD`` requests. - CloudFront caches responses to ``GET`` , ``HEAD`` , and ``OPTIONS`` requests. If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.\n')
    cache_policy_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the cache policy that is attached to the default cache behavior. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues`` . We recommend that you use a ``CachePolicyId`` .\n')
    compress: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify ``true`` ; if not, specify ``false`` . For more information, see `Serving Compressed Files <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    default_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a cache policy instead of this field. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as ``Cache-Control max-age`` , ``Cache-Control s-maxage`` , and ``Expires`` to objects. For more information, see `Managing How Long Content Stays in an Edge Cache (Expiration) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    field_level_encryption_id: typing.Optional[str] = pydantic.Field(None, description='The value of ``ID`` for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for the default cache behavior.\n')
    forwarded_values: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_ForwardedValuesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. For more information, see `Working with policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html>`_ in the *Amazon CloudFront Developer Guide* . If you want to include values in the cache key, use a cache policy. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ or `Using the managed origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html>`_ in the *Amazon CloudFront Developer Guide* . A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues`` . We recommend that you use a ``CachePolicyId`` . A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.\n')
    function_associations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_FunctionAssociationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to the ``LIVE`` stage to associate them with a cache behavior.\n')
    lambda_function_associations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LambdaFunctionAssociationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.\n')
    max_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache policy instead of this field. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as ``Cache-Control max-age`` , ``Cache-Control s-maxage`` , and ``Expires`` to objects. For more information, see `Managing How Long Content Stays in an Edge Cache (Expiration) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    min_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache policy instead of this field. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ or `Using the managed cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html>`_ in the *Amazon CloudFront Developer Guide* . The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see `Managing How Long Content Stays in an Edge Cache (Expiration) <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html>`_ in the *Amazon CloudFront Developer Guide* . You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward all headers to your origin (under ``Headers`` , if you specify ``1`` for ``Quantity`` and ``*`` for ``Name`` ).\n')
    origin_request_policy_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the origin request policy that is attached to the default cache behavior. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ or `Using the managed origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    realtime_log_config_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information, see `Real-time logs <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    response_headers_policy_id: typing.Optional[str] = pydantic.Field(None, description='The identifier for a response headers policy.\n')
    smooth_streaming: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify ``true`` ; if not, specify ``false`` . If you specify ``true`` for ``SmoothStreaming`` , you can still distribute other content using this cache behavior if the content matches the value of ``PathPattern`` .\n')
    trusted_key_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of key groups that CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see `Serving private content <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    trusted_signers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='.. epigraph:: We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners`` . A list of AWS account IDs whose public keys CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with the private key of a CloudFront key pair in a trusted signer\'s AWS account . The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see `Serving private content <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html>`_ in the *Amazon CloudFront Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-defaultcachebehavior.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    default_cache_behavior_property = cloudfront.CfnDistribution.DefaultCacheBehaviorProperty(\n        target_origin_id="targetOriginId",\n        viewer_protocol_policy="viewerProtocolPolicy",\n\n        # the properties below are optional\n        allowed_methods=["allowedMethods"],\n        cached_methods=["cachedMethods"],\n        cache_policy_id="cachePolicyId",\n        compress=False,\n        default_ttl=123,\n        field_level_encryption_id="fieldLevelEncryptionId",\n        forwarded_values=cloudfront.CfnDistribution.ForwardedValuesProperty(\n            query_string=False,\n\n            # the properties below are optional\n            cookies=cloudfront.CfnDistribution.CookiesProperty(\n                forward="forward",\n\n                # the properties below are optional\n                whitelisted_names=["whitelistedNames"]\n            ),\n            headers=["headers"],\n            query_string_cache_keys=["queryStringCacheKeys"]\n        ),\n        function_associations=[cloudfront.CfnDistribution.FunctionAssociationProperty(\n            event_type="eventType",\n            function_arn="functionArn"\n        )],\n        lambda_function_associations=[cloudfront.CfnDistribution.LambdaFunctionAssociationProperty(\n            event_type="eventType",\n            include_body=False,\n            lambda_function_arn="lambdaFunctionArn"\n        )],\n        max_ttl=123,\n        min_ttl=123,\n        origin_request_policy_id="originRequestPolicyId",\n        realtime_log_config_arn="realtimeLogConfigArn",\n        response_headers_policy_id="responseHeadersPolicyId",\n        smooth_streaming=False,\n        trusted_key_groups=["trustedKeyGroups"],\n        trusted_signers=["trustedSigners"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_origin_id', 'viewer_protocol_policy', 'allowed_methods', 'cached_methods', 'cache_policy_id', 'compress', 'default_ttl', 'field_level_encryption_id', 'forwarded_values', 'function_associations', 'lambda_function_associations', 'max_ttl', 'min_ttl', 'origin_request_policy_id', 'realtime_log_config_arn', 'response_headers_policy_id', 'smooth_streaming', 'trusted_key_groups', 'trusted_signers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.DefaultCacheBehaviorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.DistributionConfigProperty
class CfnDistribution_DistributionConfigPropertyDef(BaseStruct):
    default_cache_behavior: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_DefaultCacheBehaviorPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description="A complex type that describes the default cache behavior if you don't specify a ``CacheBehavior`` element or if files don't match any of the values of ``PathPattern`` in ``CacheBehavior`` elements. You must create exactly one default cache behavior.\n")
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='From this field, you can enable or disable the selected distribution.\n')
    aliases: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.\n')
    cache_behaviors: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_CacheBehaviorPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A complex type that contains zero or more ``CacheBehavior`` elements.\n')
    cnam_es: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``CfnDistribution.DistributionConfigProperty.CNAMEs``.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the distribution. The comment cannot be longer than 128 characters.\n')
    continuous_deployment_policy_id: typing.Optional[str] = pydantic.Field(None, description='The identifier of a continuous deployment policy. For more information, see ``CreateContinuousDeploymentPolicy`` .\n')
    custom_error_responses: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_CustomErrorResponsePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A complex type that controls the following:. - Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer. - How long CloudFront caches HTTP status codes in the 4xx and 5xx range. For more information about custom error pages, see `Customizing Error Responses <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    custom_origin: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LegacyCustomOriginPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnDistribution.DistributionConfigProperty.CustomOrigin``.\n')
    default_root_object: typing.Optional[str] = pydantic.Field(None, description="The object that you want CloudFront to request from your origin (for example, ``index.html`` ) when a viewer requests the root URL for your distribution ( ``https://www.example.com`` ) instead of an object in your distribution ( ``https://www.example.com/product-description.html`` ). Specifying a default root object avoids exposing the contents of your distribution. Specify only the object name, for example, ``index.html`` . Don't add a ``/`` before the object name. If you don't want to specify a default root object when you create a distribution, include an empty ``DefaultRootObject`` element. To delete the default root object from an existing distribution, update the distribution configuration and include an empty ``DefaultRootObject`` element. To replace the default root object, update the distribution configuration and specify the new object. For more information about the default root object, see `Creating a Default Root Object <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html>`_ in the *Amazon CloudFront Developer Guide* .\n")
    http_version: typing.Optional[str] = pydantic.Field(None, description='(Optional) Specify the maximum HTTP version(s) that you want viewers to use to communicate with CloudFront . The default value for new distributions is ``http1.1`` . For viewers and CloudFront to use HTTP/2, viewers must support TLSv1.2 or later, and must support Server Name Indication (SNI). For viewers and CloudFront to use HTTP/3, viewers must support TLSv1.3 and Server Name Indication (SNI). CloudFront supports HTTP/3 connection migration to allow the viewer to switch networks without losing connection. For more information about connection migration, see `Connection Migration <https://docs.aws.amazon.com/https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-migration>`_ at RFC 9000. For more information about supported TLSv1.3 ciphers, see `Supported protocols and ciphers between viewers and CloudFront <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html>`_ .\n')
    ipv6_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your distribution, specify ``true`` . If you specify ``false`` , CloudFront responds to IPv6 DNS requests with the DNS response code ``NOERROR`` and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for your distribution. In general, you should enable IPv6 if you have users on IPv6 networks who want to access your content. However, if you're using signed URLs or signed cookies to restrict access to your content, and if you're using a custom policy that includes the ``IpAddress`` parameter to restrict the IP addresses that can access your content, don't enable IPv6. If you want to restrict access to some content by IP address and not restrict access to other content (or restrict access but not by IP address), you can create two distributions. For more information, see `Creating a Signed URL Using a Custom Policy <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-custom-policy.html>`_ in the *Amazon CloudFront Developer Guide* . If you're using an Amazon Route 53 AWS Integration alias resource record set to route traffic to your CloudFront distribution, you need to create a second alias resource record set when both of the following are true: - You enable IPv6 for the distribution - You're using alternate domain names in the URLs for your objects For more information, see `Routing Traffic to an Amazon CloudFront Web Distribution by Using Your Domain Name <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html>`_ in the *Amazon Route 53 AWS Integration Developer Guide* . If you created a CNAME resource record set, either with Amazon Route 53 AWS Integration or with another DNS service, you don't need to make any changes. A CNAME record will route traffic to your distribution regardless of the IP address format of the viewer request.\n")
    logging: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LoggingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A complex type that controls whether access logs are written for the distribution. For more information about logging, see `Access Logs <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    origin_groups: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A complex type that contains information about origin groups for this distribution.\n')
    origins: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A complex type that contains information about origins for this distribution.\n')
    price_class: typing.Optional[str] = pydantic.Field(None, description='The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you specify ``PriceClass_All`` , CloudFront responds to requests for your objects from all CloudFront edge locations. If you specify a price class other than ``PriceClass_All`` , CloudFront serves your objects from the CloudFront edge location that has the lowest latency among the edge locations in your price class. Viewers who are in or near regions that are excluded from your specified price class may encounter slower performance. For more information about price classes, see `Choosing the Price Class for a CloudFront Distribution <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html>`_ in the *Amazon CloudFront Developer Guide* . For information about CloudFront pricing, including how price classes (such as Price Class 100) map to CloudFront regions, see `Amazon CloudFront Pricing <https://docs.aws.amazon.com/cloudfront/pricing/>`_ .\n')
    restrictions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_RestrictionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A complex type that identifies ways in which you want to restrict distribution of your content.\n')
    s3_origin: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LegacyS3OriginPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnDistribution.DistributionConfigProperty.S3Origin``.\n')
    staging: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A Boolean that indicates whether this is a staging distribution. When this value is ``true`` , this is a staging distribution. When this value is ``false`` , this is not a staging distribution.\n')
    viewer_certificate: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_ViewerCertificatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.\n")
    web_acl_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution. To specify a web ACL created using the latest version of AWS WAF , use the ACL ARN, for example ``arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a`` . To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example ``473e64fd-f30b-4765-81a0-62ad96dd167a`` . AWS WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions that you specify, such as the IP addresses that requests originate from or the values of query strings, CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden). You can also configure CloudFront to return a custom error page when a request is blocked. For more information about AWS WAF , see the `AWS WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-distributionconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    distribution_config_property = cloudfront.CfnDistribution.DistributionConfigProperty(\n        default_cache_behavior=cloudfront.CfnDistribution.DefaultCacheBehaviorProperty(\n            target_origin_id="targetOriginId",\n            viewer_protocol_policy="viewerProtocolPolicy",\n\n            # the properties below are optional\n            allowed_methods=["allowedMethods"],\n            cached_methods=["cachedMethods"],\n            cache_policy_id="cachePolicyId",\n            compress=False,\n            default_ttl=123,\n            field_level_encryption_id="fieldLevelEncryptionId",\n            forwarded_values=cloudfront.CfnDistribution.ForwardedValuesProperty(\n                query_string=False,\n\n                # the properties below are optional\n                cookies=cloudfront.CfnDistribution.CookiesProperty(\n                    forward="forward",\n\n                    # the properties below are optional\n                    whitelisted_names=["whitelistedNames"]\n                ),\n                headers=["headers"],\n                query_string_cache_keys=["queryStringCacheKeys"]\n            ),\n            function_associations=[cloudfront.CfnDistribution.FunctionAssociationProperty(\n                event_type="eventType",\n                function_arn="functionArn"\n            )],\n            lambda_function_associations=[cloudfront.CfnDistribution.LambdaFunctionAssociationProperty(\n                event_type="eventType",\n                include_body=False,\n                lambda_function_arn="lambdaFunctionArn"\n            )],\n            max_ttl=123,\n            min_ttl=123,\n            origin_request_policy_id="originRequestPolicyId",\n            realtime_log_config_arn="realtimeLogConfigArn",\n            response_headers_policy_id="responseHeadersPolicyId",\n            smooth_streaming=False,\n            trusted_key_groups=["trustedKeyGroups"],\n            trusted_signers=["trustedSigners"]\n        ),\n        enabled=False,\n\n        # the properties below are optional\n        aliases=["aliases"],\n        cache_behaviors=[cloudfront.CfnDistribution.CacheBehaviorProperty(\n            path_pattern="pathPattern",\n            target_origin_id="targetOriginId",\n            viewer_protocol_policy="viewerProtocolPolicy",\n\n            # the properties below are optional\n            allowed_methods=["allowedMethods"],\n            cached_methods=["cachedMethods"],\n            cache_policy_id="cachePolicyId",\n            compress=False,\n            default_ttl=123,\n            field_level_encryption_id="fieldLevelEncryptionId",\n            forwarded_values=cloudfront.CfnDistribution.ForwardedValuesProperty(\n                query_string=False,\n\n                # the properties below are optional\n                cookies=cloudfront.CfnDistribution.CookiesProperty(\n                    forward="forward",\n\n                    # the properties below are optional\n                    whitelisted_names=["whitelistedNames"]\n                ),\n                headers=["headers"],\n                query_string_cache_keys=["queryStringCacheKeys"]\n            ),\n            function_associations=[cloudfront.CfnDistribution.FunctionAssociationProperty(\n                event_type="eventType",\n                function_arn="functionArn"\n            )],\n            lambda_function_associations=[cloudfront.CfnDistribution.LambdaFunctionAssociationProperty(\n                event_type="eventType",\n                include_body=False,\n                lambda_function_arn="lambdaFunctionArn"\n            )],\n            max_ttl=123,\n            min_ttl=123,\n            origin_request_policy_id="originRequestPolicyId",\n            realtime_log_config_arn="realtimeLogConfigArn",\n            response_headers_policy_id="responseHeadersPolicyId",\n            smooth_streaming=False,\n            trusted_key_groups=["trustedKeyGroups"],\n            trusted_signers=["trustedSigners"]\n        )],\n        cnam_es=["cnamEs"],\n        comment="comment",\n        continuous_deployment_policy_id="continuousDeploymentPolicyId",\n        custom_error_responses=[cloudfront.CfnDistribution.CustomErrorResponseProperty(\n            error_code=123,\n\n            # the properties below are optional\n            error_caching_min_ttl=123,\n            response_code=123,\n            response_page_path="responsePagePath"\n        )],\n        custom_origin=cloudfront.CfnDistribution.LegacyCustomOriginProperty(\n            dns_name="dnsName",\n            origin_protocol_policy="originProtocolPolicy",\n            origin_ssl_protocols=["originSslProtocols"],\n\n            # the properties below are optional\n            http_port=123,\n            https_port=123\n        ),\n        default_root_object="defaultRootObject",\n        http_version="httpVersion",\n        ipv6_enabled=False,\n        logging=cloudfront.CfnDistribution.LoggingProperty(\n            bucket="bucket",\n\n            # the properties below are optional\n            include_cookies=False,\n            prefix="prefix"\n        ),\n        origin_groups=cloudfront.CfnDistribution.OriginGroupsProperty(\n            quantity=123,\n\n            # the properties below are optional\n            items=[cloudfront.CfnDistribution.OriginGroupProperty(\n                failover_criteria=cloudfront.CfnDistribution.OriginGroupFailoverCriteriaProperty(\n                    status_codes=cloudfront.CfnDistribution.StatusCodesProperty(\n                        items=[123],\n                        quantity=123\n                    )\n                ),\n                id="id",\n                members=cloudfront.CfnDistribution.OriginGroupMembersProperty(\n                    items=[cloudfront.CfnDistribution.OriginGroupMemberProperty(\n                        origin_id="originId"\n                    )],\n                    quantity=123\n                )\n            )]\n        ),\n        origins=[cloudfront.CfnDistribution.OriginProperty(\n            domain_name="domainName",\n            id="id",\n\n            # the properties below are optional\n            connection_attempts=123,\n            connection_timeout=123,\n            custom_origin_config=cloudfront.CfnDistribution.CustomOriginConfigProperty(\n                origin_protocol_policy="originProtocolPolicy",\n\n                # the properties below are optional\n                http_port=123,\n                https_port=123,\n                origin_keepalive_timeout=123,\n                origin_read_timeout=123,\n                origin_ssl_protocols=["originSslProtocols"]\n            ),\n            origin_access_control_id="originAccessControlId",\n            origin_custom_headers=[cloudfront.CfnDistribution.OriginCustomHeaderProperty(\n                header_name="headerName",\n                header_value="headerValue"\n            )],\n            origin_path="originPath",\n            origin_shield=cloudfront.CfnDistribution.OriginShieldProperty(\n                enabled=False,\n                origin_shield_region="originShieldRegion"\n            ),\n            s3_origin_config=cloudfront.CfnDistribution.S3OriginConfigProperty(\n                origin_access_identity="originAccessIdentity"\n            )\n        )],\n        price_class="priceClass",\n        restrictions=cloudfront.CfnDistribution.RestrictionsProperty(\n            geo_restriction=cloudfront.CfnDistribution.GeoRestrictionProperty(\n                restriction_type="restrictionType",\n\n                # the properties below are optional\n                locations=["locations"]\n            )\n        ),\n        s3_origin=cloudfront.CfnDistribution.LegacyS3OriginProperty(\n            dns_name="dnsName",\n\n            # the properties below are optional\n            origin_access_identity="originAccessIdentity"\n        ),\n        staging=False,\n        viewer_certificate=cloudfront.CfnDistribution.ViewerCertificateProperty(\n            acm_certificate_arn="acmCertificateArn",\n            cloud_front_default_certificate=False,\n            iam_certificate_id="iamCertificateId",\n            minimum_protocol_version="minimumProtocolVersion",\n            ssl_support_method="sslSupportMethod"\n        ),\n        web_acl_id="webAclId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_cache_behavior', 'enabled', 'aliases', 'cache_behaviors', 'cnam_es', 'comment', 'continuous_deployment_policy_id', 'custom_error_responses', 'custom_origin', 'default_root_object', 'http_version', 'ipv6_enabled', 'logging', 'origin_groups', 'origins', 'price_class', 'restrictions', 's3_origin', 'staging', 'viewer_certificate', 'web_acl_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.DistributionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.ForwardedValuesProperty
class CfnDistribution_ForwardedValuesPropertyDef(BaseStruct):
    query_string: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description="This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include query strings in the cache key, use a cache policy. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ in the *Amazon CloudFront Developer Guide* . If you want to send query strings to the origin but not include them in the cache key, use an origin request policy. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ in the *Amazon CloudFront Developer Guide* . Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends on the value of ``QueryString`` and on the values that you specify for ``QueryStringCacheKeys`` , if any: If you specify true for ``QueryString`` and you don't specify any values for ``QueryStringCacheKeys`` , CloudFront forwards all query string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin. If you specify true for ``QueryString`` and you specify one or more values for ``QueryStringCacheKeys`` , CloudFront forwards all query string parameters to the origin, but it only caches based on the query string parameters that you specify. If you specify false for ``QueryString`` , CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string parameters. For more information, see `Configuring CloudFront to Cache Based on Query String Parameters <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html>`_ in the *Amazon CloudFront Developer Guide* .\n")
    cookies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_CookiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ in the *Amazon CloudFront Developer Guide* . If you want to send cookies to the origin but not include them in the cache key, use an origin request policy. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ in the *Amazon CloudFront Developer Guide* . A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see `How CloudFront Forwards, Caches, and Logs Cookies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include headers in the cache key, use a cache policy. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ in the *Amazon CloudFront Developer Guide* . If you want to send headers to the origin but not include them in the cache key, use an origin request policy. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ in the *Amazon CloudFront Developer Guide* . A complex type that specifies the ``Headers`` , if any, that you want CloudFront to forward to the origin for this cache behavior (whitelisted headers). For the headers that you specify, CloudFront also caches separate versions of a specified object that is based on the header values in viewer requests. For more information, see `Caching Content Based on Request Headers <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    query_string_cache_keys: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include query strings in the cache key, use a cache policy. For more information, see `Creating cache policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy>`_ in the *Amazon CloudFront Developer Guide* . If you want to send query strings to the origin but not include them in the cache key, use an origin request policy. For more information, see `Creating origin request policies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy>`_ in the *Amazon CloudFront Developer Guide* . A complex type that contains information about the query string parameters that you want CloudFront to use for caching for this cache behavior.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    forwarded_values_property = cloudfront.CfnDistribution.ForwardedValuesProperty(\n        query_string=False,\n\n        # the properties below are optional\n        cookies=cloudfront.CfnDistribution.CookiesProperty(\n            forward="forward",\n\n            # the properties below are optional\n            whitelisted_names=["whitelistedNames"]\n        ),\n        headers=["headers"],\n        query_string_cache_keys=["queryStringCacheKeys"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['query_string', 'cookies', 'headers', 'query_string_cache_keys']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.ForwardedValuesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.FunctionAssociationProperty
class CfnDistribution_FunctionAssociationPropertyDef(BaseStruct):
    event_type: typing.Optional[str] = pydantic.Field(None, description='The event type of the function, either ``viewer-request`` or ``viewer-response`` . You cannot use origin-facing event types ( ``origin-request`` and ``origin-response`` ) with a CloudFront function.\n')
    function_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the function.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-functionassociation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    function_association_property = cloudfront.CfnDistribution.FunctionAssociationProperty(\n        event_type="eventType",\n        function_arn="functionArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_type', 'function_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.FunctionAssociationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.GeoRestrictionProperty
class CfnDistribution_GeoRestrictionPropertyDef(BaseStruct):
    restriction_type: str = pydantic.Field(..., description="The method that you want to use to restrict distribution of your content by country:. - ``none`` : No geo restriction is enabled, meaning access to content is not restricted by client geo location. - ``blacklist`` : The ``Location`` elements specify the countries in which you don't want CloudFront to distribute your content. - ``whitelist`` : The ``Location`` elements specify the countries in which you want CloudFront to distribute your content.\n")
    locations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A complex type that contains a ``Location`` element for each country in which you want CloudFront either to distribute your content ( ``whitelist`` ) or not distribute your content ( ``blacklist`` ). The ``Location`` element is a two-letter, uppercase country code for a country that you want to include in your ``blacklist`` or ``whitelist`` . Include one ``Location`` element for each country. CloudFront and ``MaxMind`` both use ``ISO 3166`` country codes. For the current list of countries and the corresponding codes, see ``ISO 3166-1-alpha-2`` code on the *International Organization for Standardization* website. You can also refer to the country list on the CloudFront console, which includes both country names and codes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-georestriction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    geo_restriction_property = cloudfront.CfnDistribution.GeoRestrictionProperty(\n        restriction_type="restrictionType",\n\n        # the properties below are optional\n        locations=["locations"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['restriction_type', 'locations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.GeoRestrictionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.LambdaFunctionAssociationProperty
class CfnDistribution_LambdaFunctionAssociationPropertyDef(BaseStruct):
    event_type: typing.Optional[str] = pydantic.Field(None, description="Specifies the event type that triggers a Lambda@Edge function invocation. You can specify the following values:. - ``viewer-request`` : The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache. - ``origin-request`` : The function executes only when CloudFront sends a request to your origin. When the requested object is in the edge cache, the function doesn't execute. - ``origin-response`` : The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute. - ``viewer-response`` : The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache. If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.\n")
    include_body: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A flag that allows a Lambda@Edge function to have read access to the body content. For more information, see `Accessing the Request Body by Choosing the Include Body Option <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html>`_ in the Amazon CloudFront Developer Guide.\n')
    lambda_function_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the Lambda@Edge function. You must specify the ARN of a function version; you can\'t specify an alias or $LATEST.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-lambdafunctionassociation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    lambda_function_association_property = cloudfront.CfnDistribution.LambdaFunctionAssociationProperty(\n        event_type="eventType",\n        include_body=False,\n        lambda_function_arn="lambdaFunctionArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_type', 'include_body', 'lambda_function_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.LambdaFunctionAssociationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.LegacyCustomOriginProperty
class CfnDistribution_LegacyCustomOriginPropertyDef(BaseStruct):
    dns_name: str = pydantic.Field(..., description='``CfnDistribution.LegacyCustomOriginProperty.DNSName``.')
    origin_protocol_policy: str = pydantic.Field(..., description='``CfnDistribution.LegacyCustomOriginProperty.OriginProtocolPolicy``.\n')
    origin_ssl_protocols: typing.Sequence[str] = pydantic.Field(..., description='``CfnDistribution.LegacyCustomOriginProperty.OriginSSLProtocols``.\n')
    http_port: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnDistribution.LegacyCustomOriginProperty.HTTPPort``.\n')
    https_port: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnDistribution.LegacyCustomOriginProperty.HTTPSPort``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-legacycustomorigin.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    legacy_custom_origin_property = cloudfront.CfnDistribution.LegacyCustomOriginProperty(\n        dns_name="dnsName",\n        origin_protocol_policy="originProtocolPolicy",\n        origin_ssl_protocols=["originSslProtocols"],\n\n        # the properties below are optional\n        http_port=123,\n        https_port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dns_name', 'origin_protocol_policy', 'origin_ssl_protocols', 'http_port', 'https_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.LegacyCustomOriginProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.LegacyS3OriginProperty
class CfnDistribution_LegacyS3OriginPropertyDef(BaseStruct):
    dns_name: str = pydantic.Field(..., description='``CfnDistribution.LegacyS3OriginProperty.DNSName``.')
    origin_access_identity: typing.Optional[str] = pydantic.Field(None, description='``CfnDistribution.LegacyS3OriginProperty.OriginAccessIdentity``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-legacys3origin.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    legacy_s3_origin_property = cloudfront.CfnDistribution.LegacyS3OriginProperty(\n        dns_name="dnsName",\n\n        # the properties below are optional\n        origin_access_identity="originAccessIdentity"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dns_name', 'origin_access_identity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.LegacyS3OriginProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.LoggingProperty
class CfnDistribution_LoggingPropertyDef(BaseStruct):
    bucket: str = pydantic.Field(..., description='The Amazon S3 bucket to store the access logs in, for example, ``myawslogbucket.s3.amazonaws.com`` .\n')
    include_cookies: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="Specifies whether you want CloudFront to include cookies in access logs, specify ``true`` for ``IncludeCookies`` . If you choose to include cookies in logs, CloudFront logs all cookies regardless of how you configure the cache behaviors for this distribution. If you don't want to include cookies when you create a distribution or if you want to disable include cookies for an existing distribution, specify ``false`` for ``IncludeCookies`` .\n")
    prefix: typing.Optional[str] = pydantic.Field(None, description='An optional string that you want CloudFront to prefix to the access log ``filenames`` for this distribution, for example, ``myprefix/`` . If you want to enable logging, but you don\'t want to specify a prefix, you still must include an empty ``Prefix`` element in the ``Logging`` element.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-logging.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    logging_property = cloudfront.CfnDistribution.LoggingProperty(\n        bucket="bucket",\n\n        # the properties below are optional\n        include_cookies=False,\n        prefix="prefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'include_cookies', 'prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.LoggingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.OriginCustomHeaderProperty
class CfnDistribution_OriginCustomHeaderPropertyDef(BaseStruct):
    header_name: str = pydantic.Field(..., description='The name of a header that you want CloudFront to send to your origin. For more information, see `Adding Custom Headers to Origin Requests <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/forward-custom-headers.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    header_value: str = pydantic.Field(..., description='The value for the header that you specified in the ``HeaderName`` field.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-origincustomheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_custom_header_property = cloudfront.CfnDistribution.OriginCustomHeaderProperty(\n        header_name="headerName",\n        header_value="headerValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['header_name', 'header_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.OriginCustomHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupFailoverCriteriaProperty
class CfnDistribution_OriginGroupFailoverCriteriaPropertyDef(BaseStruct):
    status_codes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_StatusCodesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The status codes that, when returned from the primary origin, will trigger CloudFront to failover to the second origin.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-origingroupfailovercriteria.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_group_failover_criteria_property = cloudfront.CfnDistribution.OriginGroupFailoverCriteriaProperty(\n        status_codes=cloudfront.CfnDistribution.StatusCodesProperty(\n            items=[123],\n            quantity=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['status_codes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupFailoverCriteriaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupMemberProperty
class CfnDistribution_OriginGroupMemberPropertyDef(BaseStruct):
    origin_id: str = pydantic.Field(..., description='The ID for an origin in an origin group.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-origingroupmember.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_group_member_property = cloudfront.CfnDistribution.OriginGroupMemberProperty(\n        origin_id="originId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['origin_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupMemberProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupMembersProperty
class CfnDistribution_OriginGroupMembersPropertyDef(BaseStruct):
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupMemberPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Items (origins) in an origin group.\n')
    quantity: typing.Union[int, float] = pydantic.Field(..., description='The number of origins in an origin group.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-origingroupmembers.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_group_members_property = cloudfront.CfnDistribution.OriginGroupMembersProperty(\n        items=[cloudfront.CfnDistribution.OriginGroupMemberProperty(\n            origin_id="originId"\n        )],\n        quantity=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items', 'quantity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupMembersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupProperty
class CfnDistribution_OriginGroupPropertyDef(BaseStruct):
    failover_criteria: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupFailoverCriteriaPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A complex type that contains information about the failover criteria for an origin group.\n')
    members: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupMembersPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A complex type that contains information about the origins in an origin group.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-origingroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_group_property = cloudfront.CfnDistribution.OriginGroupProperty(\n        failover_criteria=cloudfront.CfnDistribution.OriginGroupFailoverCriteriaProperty(\n            status_codes=cloudfront.CfnDistribution.StatusCodesProperty(\n                items=[123],\n                quantity=123\n            )\n        ),\n        id="id",\n        members=cloudfront.CfnDistribution.OriginGroupMembersProperty(\n            items=[cloudfront.CfnDistribution.OriginGroupMemberProperty(\n                origin_id="originId"\n            )],\n            quantity=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['failover_criteria', 'members']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupsProperty
class CfnDistribution_OriginGroupsPropertyDef(BaseStruct):
    quantity: typing.Union[int, float] = pydantic.Field(..., description='The number of origin groups.\n')
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The items (origin groups) in a distribution.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-origingroups.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_groups_property = cloudfront.CfnDistribution.OriginGroupsProperty(\n        quantity=123,\n\n        # the properties below are optional\n        items=[cloudfront.CfnDistribution.OriginGroupProperty(\n            failover_criteria=cloudfront.CfnDistribution.OriginGroupFailoverCriteriaProperty(\n                status_codes=cloudfront.CfnDistribution.StatusCodesProperty(\n                    items=[123],\n                    quantity=123\n                )\n            ),\n            id="id",\n            members=cloudfront.CfnDistribution.OriginGroupMembersProperty(\n                items=[cloudfront.CfnDistribution.OriginGroupMemberProperty(\n                    origin_id="originId"\n                )],\n                quantity=123\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['quantity', 'items']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.OriginGroupsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.OriginProperty
class CfnDistribution_OriginPropertyDef(BaseStruct):
    domain_name: str = pydantic.Field(..., description='The domain name for the origin. For more information, see `Origin Domain Name <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesDomainName>`_ in the *Amazon CloudFront Developer Guide* .\n')
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description="The number of times that CloudFront attempts to connect to the origin. The minimum number is 1, the maximum is 3, and the default (if you don't specify otherwise) is 3. For a custom origin (including an Amazon S3 bucket that's configured with static website hosting), this value also specifies the number of times that CloudFront attempts to get a response from the origin, in the case of an `Origin Response Timeout <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout>`_ . For more information, see `Origin Connection Attempts <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#origin-connection-attempts>`_ in the *Amazon CloudFront Developer Guide* .\n")
    connection_timeout: typing.Union[int, float, None] = pydantic.Field(None, description="The number of seconds that CloudFront waits when trying to establish a connection to the origin. The minimum timeout is 1 second, the maximum is 10 seconds, and the default (if you don't specify otherwise) is 10 seconds. For more information, see `Origin Connection Timeout <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#origin-connection-timeout>`_ in the *Amazon CloudFront Developer Guide* .\n")
    custom_origin_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_CustomOriginConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use this type to specify an origin that is not an Amazon S3 bucket, with one exception. If the Amazon S3 bucket is configured with static website hosting, use this type. If the Amazon S3 bucket is not configured with static website hosting, use the ``S3OriginConfig`` type instead.\n')
    origin_access_control_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of an origin access control for this origin. For more information, see `Restricting access to an Amazon S3 origin <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    origin_custom_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginCustomHeaderPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to the requests that it sends to the origin. For more information, see `Adding Custom Headers to Origin Requests <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/add-origin-custom-headers.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description='An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. For more information, see `Origin Path <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginPath>`_ in the *Amazon CloudFront Developer Guide* .\n')
    origin_shield: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginShieldPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='CloudFront Origin Shield. Using Origin Shield can help reduce the load on your origin. For more information, see `Using Origin Shield <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    s3_origin_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_S3OriginConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use this type to specify an origin that is an Amazon S3 bucket that is not configured with static website hosting. To specify any other type of origin, including an Amazon S3 bucket that is configured with static website hosting, use the ``CustomOriginConfig`` type instead.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-origin.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_property = cloudfront.CfnDistribution.OriginProperty(\n        domain_name="domainName",\n        id="id",\n\n        # the properties below are optional\n        connection_attempts=123,\n        connection_timeout=123,\n        custom_origin_config=cloudfront.CfnDistribution.CustomOriginConfigProperty(\n            origin_protocol_policy="originProtocolPolicy",\n\n            # the properties below are optional\n            http_port=123,\n            https_port=123,\n            origin_keepalive_timeout=123,\n            origin_read_timeout=123,\n            origin_ssl_protocols=["originSslProtocols"]\n        ),\n        origin_access_control_id="originAccessControlId",\n        origin_custom_headers=[cloudfront.CfnDistribution.OriginCustomHeaderProperty(\n            header_name="headerName",\n            header_value="headerValue"\n        )],\n        origin_path="originPath",\n        origin_shield=cloudfront.CfnDistribution.OriginShieldProperty(\n            enabled=False,\n            origin_shield_region="originShieldRegion"\n        ),\n        s3_origin_config=cloudfront.CfnDistribution.S3OriginConfigProperty(\n            origin_access_identity="originAccessIdentity"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_name', 'connection_attempts', 'connection_timeout', 'custom_origin_config', 'origin_access_control_id', 'origin_custom_headers', 'origin_path', 'origin_shield', 's3_origin_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.OriginProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.OriginShieldProperty
class CfnDistribution_OriginShieldPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="A flag that specifies whether Origin Shield is enabled. When it's enabled, CloudFront routes all requests through Origin Shield, which can help protect your origin. When it's disabled, CloudFront might send requests directly to your origin from multiple edge locations or regional edge caches.\n")
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='The AWS Region for Origin Shield. Specify the AWS Region that has the lowest latency to your origin. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as ``us-east-2`` . When you enable CloudFront Origin Shield, you must specify the AWS Region for Origin Shield. For the list of AWS Regions that you can specify, and for help choosing the best Region for your origin, see `Choosing the AWS Region for Origin Shield <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html#choose-origin-shield-region>`_ in the *Amazon CloudFront Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-originshield.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_shield_property = cloudfront.CfnDistribution.OriginShieldProperty(\n        enabled=False,\n        origin_shield_region="originShieldRegion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.OriginShieldProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.RestrictionsProperty
class CfnDistribution_RestrictionsPropertyDef(BaseStruct):
    geo_restriction: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_GeoRestrictionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A complex type that controls the countries in which your content is distributed. CloudFront determines the location of your users using ``MaxMind`` GeoIP databases. To disable geo restriction, remove the `Restrictions <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-distributionconfig.html#cfn-cloudfront-distribution-distributionconfig-restrictions>`_ property from your stack template.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-restrictions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    restrictions_property = cloudfront.CfnDistribution.RestrictionsProperty(\n        geo_restriction=cloudfront.CfnDistribution.GeoRestrictionProperty(\n            restriction_type="restrictionType",\n\n            # the properties below are optional\n            locations=["locations"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['geo_restriction']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.RestrictionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.S3OriginConfigProperty
class CfnDistribution_S3OriginConfigPropertyDef(BaseStruct):
    origin_access_identity: typing.Optional[str] = pydantic.Field(None, description='The CloudFront origin access identity to associate with the origin. Use an origin access identity to configure the origin so that viewers can *only* access objects in an Amazon S3 bucket through CloudFront. The format of the value is: origin-access-identity/cloudfront/ *ID-of-origin-access-identity* where ``*ID-of-origin-access-identity*`` is the value that CloudFront returned in the ``ID`` element when you created the origin access identity. If you want viewers to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty ``OriginAccessIdentity`` element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty ``OriginAccessIdentity`` element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information about the origin access identity, see `Serving Private Content through CloudFront <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html>`_ in the *Amazon CloudFront Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-s3originconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    s3_origin_config_property = cloudfront.CfnDistribution.S3OriginConfigProperty(\n        origin_access_identity="originAccessIdentity"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['origin_access_identity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.S3OriginConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.StatusCodesProperty
class CfnDistribution_StatusCodesPropertyDef(BaseStruct):
    items: typing.Union[typing.Sequence[typing.Union[int, float]], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='The items (status codes) for an origin group.\n')
    quantity: typing.Union[int, float] = pydantic.Field(..., description='The number of status codes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-statuscodes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    status_codes_property = cloudfront.CfnDistribution.StatusCodesProperty(\n        items=[123],\n        quantity=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items', 'quantity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.StatusCodesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution.ViewerCertificateProperty
class CfnDistribution_ViewerCertificatePropertyDef(BaseStruct):
    acm_certificate_arn: typing.Optional[str] = pydantic.Field(None, description='.. epigraph:: In CloudFormation, this field name is ``AcmCertificateArn`` . Note the different capitalization. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS certificate is stored in `AWS Certificate Manager (ACM) <https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html>`_ , provide the Amazon Resource Name (ARN) of the ACM certificate. CloudFront only supports ACM certificates in the US East (N. Virginia) Region ( ``us-east-1`` ). If you specify an ACM certificate ARN, you must also specify values for ``MinimumProtocolVersion`` and ``SSLSupportMethod`` . (In CloudFormation, the field name is ``SslSupportMethod`` . Note the different capitalization.)\n')
    cloud_front_default_certificate: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='If the distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net`` , set this field to ``true`` . If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), set this field to ``false`` and specify values for the following fields: - ``ACMCertificateArn`` or ``IAMCertificateId`` (specify a value for one, not both) In CloudFormation, these field names are ``AcmCertificateArn`` and ``IamCertificateId`` . Note the different capitalization. - ``MinimumProtocolVersion`` - ``SSLSupportMethod`` (In CloudFormation, this field name is ``SslSupportMethod`` . Note the different capitalization.)\n')
    iam_certificate_id: typing.Optional[str] = pydantic.Field(None, description='.. epigraph:: In CloudFormation, this field name is ``IamCertificateId`` . Note the different capitalization. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS certificate is stored in `AWS Identity and Access Management (IAM) <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html>`_ , provide the ID of the IAM certificate. If you specify an IAM certificate ID, you must also specify values for ``MinimumProtocolVersion`` and ``SSLSupportMethod`` . (In CloudFormation, the field name is ``SslSupportMethod`` . Note the different capitalization.)\n')
    minimum_protocol_version: typing.Optional[str] = pydantic.Field(None, description="If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), specify the security policy that you want CloudFront to use for HTTPS connections with viewers. The security policy determines two settings: - The minimum SSL/TLS protocol that CloudFront can use to communicate with viewers. - The ciphers that CloudFront can use to encrypt the content that it returns to viewers. For more information, see `Security Policy <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy>`_ and `Supported Protocols and Ciphers Between Viewers and CloudFront <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html#secure-connections-supported-ciphers>`_ in the *Amazon CloudFront Developer Guide* . .. epigraph:: On the CloudFront console, this setting is called *Security Policy* . When you're using SNI only (you set ``SSLSupportMethod`` to ``sni-only`` ), you must specify ``TLSv1`` or higher. (In CloudFormation, the field name is ``SslSupportMethod`` . Note the different capitalization.) If the distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net`` (you set ``CloudFrontDefaultCertificate`` to ``true`` ), CloudFront automatically sets the security policy to ``TLSv1`` regardless of the value that you set here.\n")
    ssl_support_method: typing.Optional[str] = pydantic.Field(None, description='.. epigraph:: In CloudFormation, this field name is ``SslSupportMethod`` . Note the different capitalization. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), specify which viewers the distribution accepts HTTPS connections from. - ``sni-only`` – The distribution accepts HTTPS connections from only viewers that support `server name indication (SNI) <https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Server_Name_Indication>`_ . This is recommended. Most browsers and clients support SNI. - ``vip`` – The distribution accepts HTTPS connections from all viewers including those that don\'t support SNI. This is not recommended, and results in additional monthly charges from CloudFront. - ``static-ip`` - Do not specify this value unless your distribution has been enabled for this feature by the CloudFront team. If you have a use case that requires static IP addresses for a distribution, contact CloudFront through the `AWS Support Center <https://docs.aws.amazon.com/support/home>`_ . If the distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net`` , don\'t set a value for this field.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-viewercertificate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    viewer_certificate_property = cloudfront.CfnDistribution.ViewerCertificateProperty(\n        acm_certificate_arn="acmCertificateArn",\n        cloud_front_default_certificate=False,\n        iam_certificate_id="iamCertificateId",\n        minimum_protocol_version="minimumProtocolVersion",\n        ssl_support_method="sslSupportMethod"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['acm_certificate_arn', 'cloud_front_default_certificate', 'iam_certificate_id', 'minimum_protocol_version', 'ssl_support_method']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution.ViewerCertificateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnFunction.FunctionConfigProperty
class CfnFunction_FunctionConfigPropertyDef(BaseStruct):
    comment: str = pydantic.Field(..., description='A comment to describe the function.\n')
    runtime: str = pydantic.Field(..., description='The function\'s runtime environment. The only valid value is ``cloudfront-js-1.0`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-function-functionconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    function_config_property = cloudfront.CfnFunction.FunctionConfigProperty(\n        comment="comment",\n        runtime="runtime"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comment', 'runtime']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnFunction.FunctionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnFunction.FunctionMetadataProperty
class CfnFunction_FunctionMetadataPropertyDef(BaseStruct):
    function_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the function. The ARN uniquely identifies the function.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-function-functionmetadata.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    function_metadata_property = cloudfront.CfnFunction.FunctionMetadataProperty(\n        function_arn="functionArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['function_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnFunction.FunctionMetadataProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnKeyGroup.KeyGroupConfigProperty
class CfnKeyGroup_KeyGroupConfigPropertyDef(BaseStruct):
    items: typing.Sequence[str] = pydantic.Field(..., description='A list of the identifiers of the public keys in the key group.\n')
    name: str = pydantic.Field(..., description='A name to identify the key group.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the key group. The comment cannot be longer than 128 characters.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-keygroup-keygroupconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    key_group_config_property = cloudfront.CfnKeyGroup.KeyGroupConfigProperty(\n        items=["items"],\n        name="name",\n\n        # the properties below are optional\n        comment="comment"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items', 'name', 'comment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnKeyGroup.KeyGroupConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnMonitoringSubscription.MonitoringSubscriptionProperty
class CfnMonitoringSubscription_MonitoringSubscriptionPropertyDef(BaseStruct):
    realtime_metrics_subscription_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnMonitoringSubscription_RealtimeMetricsSubscriptionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A subscription configuration for additional CloudWatch metrics.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-monitoringsubscription-monitoringsubscription.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    monitoring_subscription_property = cloudfront.CfnMonitoringSubscription.MonitoringSubscriptionProperty(\n        realtime_metrics_subscription_config=cloudfront.CfnMonitoringSubscription.RealtimeMetricsSubscriptionConfigProperty(\n            realtime_metrics_subscription_status="realtimeMetricsSubscriptionStatus"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['realtime_metrics_subscription_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnMonitoringSubscription.MonitoringSubscriptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnMonitoringSubscription.RealtimeMetricsSubscriptionConfigProperty
class CfnMonitoringSubscription_RealtimeMetricsSubscriptionConfigPropertyDef(BaseStruct):
    realtime_metrics_subscription_status: str = pydantic.Field(..., description='A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-monitoringsubscription-realtimemetricssubscriptionconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    realtime_metrics_subscription_config_property = cloudfront.CfnMonitoringSubscription.RealtimeMetricsSubscriptionConfigProperty(\n        realtime_metrics_subscription_status="realtimeMetricsSubscriptionStatus"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['realtime_metrics_subscription_status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnMonitoringSubscription.RealtimeMetricsSubscriptionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnOriginAccessControl.OriginAccessControlConfigProperty
class CfnOriginAccessControl_OriginAccessControlConfigPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='A name to identify the origin access control.\n')
    origin_access_control_origin_type: str = pydantic.Field(..., description='The type of origin that this origin access control is for.\n')
    signing_behavior: str = pydantic.Field(..., description="Specifies which requests CloudFront signs (adds authentication information to). Specify ``always`` for the most common use case. For more information, see `origin access control advanced settings <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#oac-advanced-settings>`_ in the *Amazon CloudFront Developer Guide* . This field can have one of the following values: - ``always`` – CloudFront signs all origin requests, overwriting the ``Authorization`` header from the viewer request if one exists. - ``never`` – CloudFront doesn't sign any origin requests. This value turns off origin access control for all origins in all distributions that use this origin access control. - ``no-override`` – If the viewer request doesn't contain the ``Authorization`` header, then CloudFront signs the origin request. If the viewer request contains the ``Authorization`` header, then CloudFront doesn't sign the origin request and instead passes along the ``Authorization`` header from the viewer request. *WARNING: To pass along the ``Authorization`` header from the viewer request, you *must* add the ``Authorization`` header to a `cache policy <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html>`_ for all cache behaviors that use origins associated with this origin access control.*\n")
    signing_protocol: str = pydantic.Field(..., description='The signing protocol of the origin access control, which determines how CloudFront signs (authenticates) requests. The only valid value is ``sigv4`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the origin access control.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-originaccesscontrol-originaccesscontrolconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_access_control_config_property = cloudfront.CfnOriginAccessControl.OriginAccessControlConfigProperty(\n        name="name",\n        origin_access_control_origin_type="originAccessControlOriginType",\n        signing_behavior="signingBehavior",\n        signing_protocol="signingProtocol",\n\n        # the properties below are optional\n        description="description"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'origin_access_control_origin_type', 'signing_behavior', 'signing_protocol', 'description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnOriginAccessControl.OriginAccessControlConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnOriginRequestPolicy.CookiesConfigProperty
class CfnOriginRequestPolicy_CookiesConfigPropertyDef(BaseStruct):
    cookie_behavior: str = pydantic.Field(..., description='Determines whether cookies in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:. - ``none`` – No cookies in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to ``none`` , any cookies that are listed in a ``CachePolicy`` *are* included in origin requests. - ``whitelist`` – Only the cookies in viewer requests that are listed in the ``CookieNames`` type are included in requests that CloudFront sends to the origin. - ``all`` – All cookies in viewer requests are included in requests that CloudFront sends to the origin. - ``allExcept`` – All cookies in viewer requests are included in requests that CloudFront sends to the origin, **except** for those listed in the ``CookieNames`` type, which are not included.\n')
    cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Contains a list of cookie names.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-originrequestpolicy-cookiesconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cookies_config_property = cloudfront.CfnOriginRequestPolicy.CookiesConfigProperty(\n        cookie_behavior="cookieBehavior",\n\n        # the properties below are optional\n        cookies=["cookies"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cookie_behavior', 'cookies']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnOriginRequestPolicy.CookiesConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnOriginRequestPolicy.HeadersConfigProperty
class CfnOriginRequestPolicy_HeadersConfigPropertyDef(BaseStruct):
    header_behavior: str = pydantic.Field(..., description='Determines whether any HTTP headers are included in requests that CloudFront sends to the origin. Valid values are:. - ``none`` – No HTTP headers in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to ``none`` , any headers that are listed in a ``CachePolicy`` *are* included in origin requests. - ``whitelist`` – Only the HTTP headers that are listed in the ``Headers`` type are included in requests that CloudFront sends to the origin. - ``allViewer`` – All HTTP headers in viewer requests are included in requests that CloudFront sends to the origin. - ``allViewerAndWhitelistCloudFront`` – All HTTP headers in viewer requests and the additional CloudFront headers that are listed in the ``Headers`` type are included in requests that CloudFront sends to the origin. The additional headers are added by CloudFront. - ``allExcept`` – All HTTP headers in viewer requests are included in requests that CloudFront sends to the origin, **except** for those listed in the ``Headers`` type, which are not included.\n')
    headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Contains a list of HTTP header names.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-originrequestpolicy-headersconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    headers_config_property = cloudfront.CfnOriginRequestPolicy.HeadersConfigProperty(\n        header_behavior="headerBehavior",\n\n        # the properties below are optional\n        headers=["headers"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['header_behavior', 'headers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnOriginRequestPolicy.HeadersConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnOriginRequestPolicy.OriginRequestPolicyConfigProperty
class CfnOriginRequestPolicy_OriginRequestPolicyConfigPropertyDef(BaseStruct):
    cookies_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginRequestPolicy_CookiesConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The cookies from viewer requests to include in origin requests.\n')
    headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginRequestPolicy_HeadersConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The HTTP headers to include in origin requests. These can include headers from viewer requests and additional headers added by CloudFront.\n')
    name: str = pydantic.Field(..., description='A unique name to identify the origin request policy.\n')
    query_strings_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginRequestPolicy_QueryStringsConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The URL query strings from viewer requests to include in origin requests.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the origin request policy. The comment cannot be longer than 128 characters.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-originrequestpolicy-originrequestpolicyconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_request_policy_config_property = cloudfront.CfnOriginRequestPolicy.OriginRequestPolicyConfigProperty(\n        cookies_config=cloudfront.CfnOriginRequestPolicy.CookiesConfigProperty(\n            cookie_behavior="cookieBehavior",\n\n            # the properties below are optional\n            cookies=["cookies"]\n        ),\n        headers_config=cloudfront.CfnOriginRequestPolicy.HeadersConfigProperty(\n            header_behavior="headerBehavior",\n\n            # the properties below are optional\n            headers=["headers"]\n        ),\n        name="name",\n        query_strings_config=cloudfront.CfnOriginRequestPolicy.QueryStringsConfigProperty(\n            query_string_behavior="queryStringBehavior",\n\n            # the properties below are optional\n            query_strings=["queryStrings"]\n        ),\n\n        # the properties below are optional\n        comment="comment"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cookies_config', 'headers_config', 'name', 'query_strings_config', 'comment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnOriginRequestPolicy.OriginRequestPolicyConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnOriginRequestPolicy.QueryStringsConfigProperty
class CfnOriginRequestPolicy_QueryStringsConfigPropertyDef(BaseStruct):
    query_string_behavior: str = pydantic.Field(..., description='Determines whether any URL query strings in viewer requests are included in requests that CloudFront sends to the origin. Valid values are: - ``none`` – No query strings in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to ``none`` , any query strings that are listed in a ``CachePolicy`` *are* included in origin requests. - ``whitelist`` – Only the query strings in viewer requests that are listed in the ``QueryStringNames`` type are included in requests that CloudFront sends to the origin. - ``all`` – All query strings in viewer requests are included in requests that CloudFront sends to the origin. - ``allExcept`` – All query strings in viewer requests are included in requests that CloudFront sends to the origin, **except** for those listed in the ``QueryStringNames`` type, which are not included.\n')
    query_strings: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Contains a list of query string names.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-originrequestpolicy-querystringsconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    query_strings_config_property = cloudfront.CfnOriginRequestPolicy.QueryStringsConfigProperty(\n        query_string_behavior="queryStringBehavior",\n\n        # the properties below are optional\n        query_strings=["queryStrings"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['query_string_behavior', 'query_strings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnOriginRequestPolicy.QueryStringsConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnPublicKey.PublicKeyConfigProperty
class CfnPublicKey_PublicKeyConfigPropertyDef(BaseStruct):
    caller_reference: str = pydantic.Field(..., description="A string included in the request to help make sure that the request can't be replayed.\n")
    encoded_key: str = pydantic.Field(..., description='The public key that you can use with `signed URLs and signed cookies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html>`_ , or with `field-level encryption <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html>`_ .\n')
    name: str = pydantic.Field(..., description='A name to help identify the public key.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the public key. The comment cannot be longer than 128 characters.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-publickey-publickeyconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    public_key_config_property = cloudfront.CfnPublicKey.PublicKeyConfigProperty(\n        caller_reference="callerReference",\n        encoded_key="encodedKey",\n        name="name",\n\n        # the properties below are optional\n        comment="comment"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['caller_reference', 'encoded_key', 'name', 'comment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnPublicKey.PublicKeyConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnRealtimeLogConfig.EndPointProperty
class CfnRealtimeLogConfig_EndPointPropertyDef(BaseStruct):
    kinesis_stream_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnRealtimeLogConfig_KinesisStreamConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains information about the Amazon Kinesis data stream where you are sending real-time log data.\n')
    stream_type: str = pydantic.Field(..., description='The type of data stream where you are sending real-time log data. The only valid value is ``Kinesis`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-realtimelogconfig-endpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    end_point_property = cloudfront.CfnRealtimeLogConfig.EndPointProperty(\n        kinesis_stream_config=cloudfront.CfnRealtimeLogConfig.KinesisStreamConfigProperty(\n            role_arn="roleArn",\n            stream_arn="streamArn"\n        ),\n        stream_type="streamType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kinesis_stream_config', 'stream_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnRealtimeLogConfig.EndPointProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnRealtimeLogConfig.KinesisStreamConfigProperty
class CfnRealtimeLogConfig_KinesisStreamConfigPropertyDef(BaseStruct):
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that CloudFront can use to send real-time log data to your Kinesis data stream. For more information the IAM role, see `Real-time log configuration IAM role <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-iam-role>`_ in the *Amazon CloudFront Developer Guide* .\n')
    stream_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Kinesis data stream where you are sending real-time log data.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-realtimelogconfig-kinesisstreamconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    kinesis_stream_config_property = cloudfront.CfnRealtimeLogConfig.KinesisStreamConfigProperty(\n        role_arn="roleArn",\n        stream_arn="streamArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role_arn', 'stream_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnRealtimeLogConfig.KinesisStreamConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.AccessControlAllowHeadersProperty
class CfnResponseHeadersPolicy_AccessControlAllowHeadersPropertyDef(BaseStruct):
    items: typing.Sequence[str] = pydantic.Field(..., description='The list of HTTP header names. You can specify ``*`` to allow all headers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-accesscontrolallowheaders.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    access_control_allow_headers_property = cloudfront.CfnResponseHeadersPolicy.AccessControlAllowHeadersProperty(\n        items=["items"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.AccessControlAllowHeadersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.AccessControlAllowMethodsProperty
class CfnResponseHeadersPolicy_AccessControlAllowMethodsPropertyDef(BaseStruct):
    items: typing.Sequence[str] = pydantic.Field(..., description='The list of HTTP methods. Valid values are:. - ``GET`` - ``DELETE`` - ``HEAD`` - ``OPTIONS`` - ``PATCH`` - ``POST`` - ``PUT`` - ``ALL`` ``ALL`` is a special value that includes all of the listed HTTP methods.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-accesscontrolallowmethods.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    access_control_allow_methods_property = cloudfront.CfnResponseHeadersPolicy.AccessControlAllowMethodsProperty(\n        items=["items"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.AccessControlAllowMethodsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.AccessControlAllowOriginsProperty
class CfnResponseHeadersPolicy_AccessControlAllowOriginsPropertyDef(BaseStruct):
    items: typing.Sequence[str] = pydantic.Field(..., description='The list of origins (domain names). You can specify ``*`` to allow all origins.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-accesscontrolalloworigins.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    access_control_allow_origins_property = cloudfront.CfnResponseHeadersPolicy.AccessControlAllowOriginsProperty(\n        items=["items"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.AccessControlAllowOriginsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.AccessControlExposeHeadersProperty
class CfnResponseHeadersPolicy_AccessControlExposeHeadersPropertyDef(BaseStruct):
    items: typing.Sequence[str] = pydantic.Field(..., description='The list of HTTP headers. You can specify ``*`` to expose all headers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-accesscontrolexposeheaders.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    access_control_expose_headers_property = cloudfront.CfnResponseHeadersPolicy.AccessControlExposeHeadersProperty(\n        items=["items"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.AccessControlExposeHeadersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ContentSecurityPolicyProperty
class CfnResponseHeadersPolicy_ContentSecurityPolicyPropertyDef(BaseStruct):
    content_security_policy: str = pydantic.Field(..., description='The policy directives and their values that CloudFront includes as values for the ``Content-Security-Policy`` HTTP response header.\n')
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the ``Content-Security-Policy`` HTTP response header received from the origin with the one specified in this response headers policy.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-contentsecuritypolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    content_security_policy_property = cloudfront.CfnResponseHeadersPolicy.ContentSecurityPolicyProperty(\n        content_security_policy="contentSecurityPolicy",\n        override=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_security_policy', 'override']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ContentSecurityPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ContentTypeOptionsProperty
class CfnResponseHeadersPolicy_ContentTypeOptionsPropertyDef(BaseStruct):
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the ``X-Content-Type-Options`` HTTP response header received from the origin with the one specified in this response headers policy.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-contenttypeoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    content_type_options_property = cloudfront.CfnResponseHeadersPolicy.ContentTypeOptionsProperty(\n        override=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['override']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ContentTypeOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.CorsConfigProperty
class CfnResponseHeadersPolicy_CorsConfigPropertyDef(BaseStruct):
    access_control_allow_credentials: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that CloudFront uses as the value for the ``Access-Control-Allow-Credentials`` HTTP response header. For more information about the ``Access-Control-Allow-Credentials`` HTTP response header, see `Access-Control-Allow-Credentials <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials>`_ in the MDN Web Docs.\n')
    access_control_allow_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_AccessControlAllowHeadersPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A list of HTTP header names that CloudFront includes as values for the ``Access-Control-Allow-Headers`` HTTP response header. For more information about the ``Access-Control-Allow-Headers`` HTTP response header, see `Access-Control-Allow-Headers <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers>`_ in the MDN Web Docs.\n')
    access_control_allow_methods: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_AccessControlAllowMethodsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A list of HTTP methods that CloudFront includes as values for the ``Access-Control-Allow-Methods`` HTTP response header. For more information about the ``Access-Control-Allow-Methods`` HTTP response header, see `Access-Control-Allow-Methods <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods>`_ in the MDN Web Docs.\n')
    access_control_allow_origins: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_AccessControlAllowOriginsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A list of origins (domain names) that CloudFront can use as the value for the ``Access-Control-Allow-Origin`` HTTP response header. For more information about the ``Access-Control-Allow-Origin`` HTTP response header, see `Access-Control-Allow-Origin <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin>`_ in the MDN Web Docs.\n')
    origin_override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides HTTP response headers received from the origin with the ones specified in this response headers policy.\n')
    access_control_expose_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_AccessControlExposeHeadersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of HTTP headers that CloudFront includes as values for the ``Access-Control-Expose-Headers`` HTTP response header. For more information about the ``Access-Control-Expose-Headers`` HTTP response header, see `Access-Control-Expose-Headers <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers>`_ in the MDN Web Docs.\n')
    access_control_max_age_sec: typing.Union[int, float, None] = pydantic.Field(None, description='A number that CloudFront uses as the value for the ``Access-Control-Max-Age`` HTTP response header. For more information about the ``Access-Control-Max-Age`` HTTP response header, see `Access-Control-Max-Age <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age>`_ in the MDN Web Docs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-corsconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cors_config_property = cloudfront.CfnResponseHeadersPolicy.CorsConfigProperty(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=cloudfront.CfnResponseHeadersPolicy.AccessControlAllowHeadersProperty(\n            items=["items"]\n        ),\n        access_control_allow_methods=cloudfront.CfnResponseHeadersPolicy.AccessControlAllowMethodsProperty(\n            items=["items"]\n        ),\n        access_control_allow_origins=cloudfront.CfnResponseHeadersPolicy.AccessControlAllowOriginsProperty(\n            items=["items"]\n        ),\n        origin_override=False,\n\n        # the properties below are optional\n        access_control_expose_headers=cloudfront.CfnResponseHeadersPolicy.AccessControlExposeHeadersProperty(\n            items=["items"]\n        ),\n        access_control_max_age_sec=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_control_allow_credentials', 'access_control_allow_headers', 'access_control_allow_methods', 'access_control_allow_origins', 'origin_override', 'access_control_expose_headers', 'access_control_max_age_sec']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.CorsConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.CustomHeaderProperty
class CfnResponseHeadersPolicy_CustomHeaderPropertyDef(BaseStruct):
    header: str = pydantic.Field(..., description='The HTTP response header name.\n')
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides a response header with the same name received from the origin with the header specified here.\n')
    value: str = pydantic.Field(..., description='The value for the HTTP response header.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-customheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    custom_header_property = cloudfront.CfnResponseHeadersPolicy.CustomHeaderProperty(\n        header="header",\n        override=False,\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['header', 'override', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.CustomHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.CustomHeadersConfigProperty
class CfnResponseHeadersPolicy_CustomHeadersConfigPropertyDef(BaseStruct):
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_CustomHeaderPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The list of HTTP response headers and their values.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-customheadersconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    custom_headers_config_property = cloudfront.CfnResponseHeadersPolicy.CustomHeadersConfigProperty(\n        items=[cloudfront.CfnResponseHeadersPolicy.CustomHeaderProperty(\n            header="header",\n            override=False,\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.CustomHeadersConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.FrameOptionsProperty
class CfnResponseHeadersPolicy_FrameOptionsPropertyDef(BaseStruct):
    frame_option: str = pydantic.Field(..., description='The value of the ``X-Frame-Options`` HTTP response header. Valid values are ``DENY`` and ``SAMEORIGIN`` . For more information about these values, see `X-Frame-Options <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options>`_ in the MDN Web Docs.\n')
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the ``X-Frame-Options`` HTTP response header received from the origin with the one specified in this response headers policy.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-frameoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    frame_options_property = cloudfront.CfnResponseHeadersPolicy.FrameOptionsProperty(\n        frame_option="frameOption",\n        override=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['frame_option', 'override']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.FrameOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ReferrerPolicyProperty
class CfnResponseHeadersPolicy_ReferrerPolicyPropertyDef(BaseStruct):
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the ``Referrer-Policy`` HTTP response header received from the origin with the one specified in this response headers policy.\n')
    referrer_policy: str = pydantic.Field(..., description='The value of the ``Referrer-Policy`` HTTP response header. Valid values are:. - ``no-referrer`` - ``no-referrer-when-downgrade`` - ``origin`` - ``origin-when-cross-origin`` - ``same-origin`` - ``strict-origin`` - ``strict-origin-when-cross-origin`` - ``unsafe-url`` For more information about these values, see `Referrer-Policy <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy>`_ in the MDN Web Docs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-referrerpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    referrer_policy_property = cloudfront.CfnResponseHeadersPolicy.ReferrerPolicyProperty(\n        override=False,\n        referrer_policy="referrerPolicy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['override', 'referrer_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ReferrerPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.RemoveHeaderProperty
class CfnResponseHeadersPolicy_RemoveHeaderPropertyDef(BaseStruct):
    header: str = pydantic.Field(..., description='The HTTP header name.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-removeheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    remove_header_property = cloudfront.CfnResponseHeadersPolicy.RemoveHeaderProperty(\n        header="header"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['header']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.RemoveHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.RemoveHeadersConfigProperty
class CfnResponseHeadersPolicy_RemoveHeadersConfigPropertyDef(BaseStruct):
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_RemoveHeaderPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The list of HTTP header names.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-removeheadersconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    remove_headers_config_property = cloudfront.CfnResponseHeadersPolicy.RemoveHeadersConfigProperty(\n        items=[cloudfront.CfnResponseHeadersPolicy.RemoveHeaderProperty(\n            header="header"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.RemoveHeadersConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ResponseHeadersPolicyConfigProperty
class CfnResponseHeadersPolicy_ResponseHeadersPolicyConfigPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='A name to identify the response headers policy. The name must be unique for response headers policies in this AWS account .\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the response headers policy. The comment cannot be longer than 128 characters.\n')
    cors_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_CorsConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of HTTP response headers that are used for cross-origin resource sharing (CORS).\n')
    custom_headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_CustomHeadersConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of custom HTTP response headers.\n')
    remove_headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_RemoveHeadersConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of HTTP headers to remove from the HTTP response.\n')
    security_headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_SecurityHeadersConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of security-related HTTP response headers.\n')
    server_timing_headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ServerTimingHeadersConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for enabling the ``Server-Timing`` header in HTTP responses sent from CloudFront.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-responseheaderspolicyconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    response_headers_policy_config_property = cloudfront.CfnResponseHeadersPolicy.ResponseHeadersPolicyConfigProperty(\n        name="name",\n\n        # the properties below are optional\n        comment="comment",\n        cors_config=cloudfront.CfnResponseHeadersPolicy.CorsConfigProperty(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=cloudfront.CfnResponseHeadersPolicy.AccessControlAllowHeadersProperty(\n                items=["items"]\n            ),\n            access_control_allow_methods=cloudfront.CfnResponseHeadersPolicy.AccessControlAllowMethodsProperty(\n                items=["items"]\n            ),\n            access_control_allow_origins=cloudfront.CfnResponseHeadersPolicy.AccessControlAllowOriginsProperty(\n                items=["items"]\n            ),\n            origin_override=False,\n\n            # the properties below are optional\n            access_control_expose_headers=cloudfront.CfnResponseHeadersPolicy.AccessControlExposeHeadersProperty(\n                items=["items"]\n            ),\n            access_control_max_age_sec=123\n        ),\n        custom_headers_config=cloudfront.CfnResponseHeadersPolicy.CustomHeadersConfigProperty(\n            items=[cloudfront.CfnResponseHeadersPolicy.CustomHeaderProperty(\n                header="header",\n                override=False,\n                value="value"\n            )]\n        ),\n        remove_headers_config=cloudfront.CfnResponseHeadersPolicy.RemoveHeadersConfigProperty(\n            items=[cloudfront.CfnResponseHeadersPolicy.RemoveHeaderProperty(\n                header="header"\n            )]\n        ),\n        security_headers_config=cloudfront.CfnResponseHeadersPolicy.SecurityHeadersConfigProperty(\n            content_security_policy=cloudfront.CfnResponseHeadersPolicy.ContentSecurityPolicyProperty(\n                content_security_policy="contentSecurityPolicy",\n                override=False\n            ),\n            content_type_options=cloudfront.CfnResponseHeadersPolicy.ContentTypeOptionsProperty(\n                override=False\n            ),\n            frame_options=cloudfront.CfnResponseHeadersPolicy.FrameOptionsProperty(\n                frame_option="frameOption",\n                override=False\n            ),\n            referrer_policy=cloudfront.CfnResponseHeadersPolicy.ReferrerPolicyProperty(\n                override=False,\n                referrer_policy="referrerPolicy"\n            ),\n            strict_transport_security=cloudfront.CfnResponseHeadersPolicy.StrictTransportSecurityProperty(\n                access_control_max_age_sec=123,\n                override=False,\n\n                # the properties below are optional\n                include_subdomains=False,\n                preload=False\n            ),\n            xss_protection=cloudfront.CfnResponseHeadersPolicy.XSSProtectionProperty(\n                override=False,\n                protection=False,\n\n                # the properties below are optional\n                mode_block=False,\n                report_uri="reportUri"\n            )\n        ),\n        server_timing_headers_config=cloudfront.CfnResponseHeadersPolicy.ServerTimingHeadersConfigProperty(\n            enabled=False,\n\n            # the properties below are optional\n            sampling_rate=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'comment', 'cors_config', 'custom_headers_config', 'remove_headers_config', 'security_headers_config', 'server_timing_headers_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ResponseHeadersPolicyConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.SecurityHeadersConfigProperty
class CfnResponseHeadersPolicy_SecurityHeadersConfigPropertyDef(BaseStruct):
    content_security_policy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ContentSecurityPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The policy directives and their values that CloudFront includes as values for the ``Content-Security-Policy`` HTTP response header. For more information about the ``Content-Security-Policy`` HTTP response header, see `Content-Security-Policy <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy>`_ in the MDN Web Docs.\n')
    content_type_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ContentTypeOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines whether CloudFront includes the ``X-Content-Type-Options`` HTTP response header with its value set to ``nosniff`` . For more information about the ``X-Content-Type-Options`` HTTP response header, see `X-Content-Type-Options <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options>`_ in the MDN Web Docs.\n')
    frame_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_FrameOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Determines whether CloudFront includes the ``X-Frame-Options`` HTTP response header and the header's value. For more information about the ``X-Frame-Options`` HTTP response header, see `X-Frame-Options <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options>`_ in the MDN Web Docs.\n")
    referrer_policy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ReferrerPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Determines whether CloudFront includes the ``Referrer-Policy`` HTTP response header and the header's value. For more information about the ``Referrer-Policy`` HTTP response header, see `Referrer-Policy <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy>`_ in the MDN Web Docs.\n")
    strict_transport_security: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_StrictTransportSecurityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Determines whether CloudFront includes the ``Strict-Transport-Security`` HTTP response header and the header's value. For more information about the ``Strict-Transport-Security`` HTTP response header, see `Strict-Transport-Security <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security>`_ in the MDN Web Docs.\n")
    xss_protection: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_XSSProtectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines whether CloudFront includes the ``X-XSS-Protection`` HTTP response header and the header\'s value. For more information about the ``X-XSS-Protection`` HTTP response header, see `X-XSS-Protection <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection>`_ in the MDN Web Docs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-securityheadersconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    security_headers_config_property = cloudfront.CfnResponseHeadersPolicy.SecurityHeadersConfigProperty(\n        content_security_policy=cloudfront.CfnResponseHeadersPolicy.ContentSecurityPolicyProperty(\n            content_security_policy="contentSecurityPolicy",\n            override=False\n        ),\n        content_type_options=cloudfront.CfnResponseHeadersPolicy.ContentTypeOptionsProperty(\n            override=False\n        ),\n        frame_options=cloudfront.CfnResponseHeadersPolicy.FrameOptionsProperty(\n            frame_option="frameOption",\n            override=False\n        ),\n        referrer_policy=cloudfront.CfnResponseHeadersPolicy.ReferrerPolicyProperty(\n            override=False,\n            referrer_policy="referrerPolicy"\n        ),\n        strict_transport_security=cloudfront.CfnResponseHeadersPolicy.StrictTransportSecurityProperty(\n            access_control_max_age_sec=123,\n            override=False,\n\n            # the properties below are optional\n            include_subdomains=False,\n            preload=False\n        ),\n        xss_protection=cloudfront.CfnResponseHeadersPolicy.XSSProtectionProperty(\n            override=False,\n            protection=False,\n\n            # the properties below are optional\n            mode_block=False,\n            report_uri="reportUri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_security_policy', 'content_type_options', 'frame_options', 'referrer_policy', 'strict_transport_security', 'xss_protection']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.SecurityHeadersConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ServerTimingHeadersConfigProperty
class CfnResponseHeadersPolicy_ServerTimingHeadersConfigPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description="A Boolean that determines whether CloudFront adds the ``Server-Timing`` header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.\n")
    sampling_rate: typing.Union[int, float, None] = pydantic.Field(None, description='A number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the ``Server-Timing`` header to. When you set the sampling rate to 100, CloudFront adds the ``Server-Timing`` header to the HTTP response for every request that matches the cache behavior that this response headers policy is attached to. When you set it to 50, CloudFront adds the header to 50% of the responses for requests that match the cache behavior. You can set the sampling rate to any number 0–100 with up to four decimal places.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-servertimingheadersconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    server_timing_headers_config_property = cloudfront.CfnResponseHeadersPolicy.ServerTimingHeadersConfigProperty(\n        enabled=False,\n\n        # the properties below are optional\n        sampling_rate=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'sampling_rate']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.ServerTimingHeadersConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.StrictTransportSecurityProperty
class CfnResponseHeadersPolicy_StrictTransportSecurityPropertyDef(BaseStruct):
    access_control_max_age_sec: typing.Union[int, float] = pydantic.Field(..., description='A number that CloudFront uses as the value for the ``max-age`` directive in the ``Strict-Transport-Security`` HTTP response header.\n')
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the ``Strict-Transport-Security`` HTTP response header received from the origin with the one specified in this response headers policy.\n')
    include_subdomains: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A Boolean that determines whether CloudFront includes the ``includeSubDomains`` directive in the ``Strict-Transport-Security`` HTTP response header.\n')
    preload: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A Boolean that determines whether CloudFront includes the ``preload`` directive in the ``Strict-Transport-Security`` HTTP response header.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-stricttransportsecurity.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    strict_transport_security_property = cloudfront.CfnResponseHeadersPolicy.StrictTransportSecurityProperty(\n        access_control_max_age_sec=123,\n        override=False,\n\n        # the properties below are optional\n        include_subdomains=False,\n        preload=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_control_max_age_sec', 'override', 'include_subdomains', 'preload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.StrictTransportSecurityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.XSSProtectionProperty
class CfnResponseHeadersPolicy_XSSProtectionPropertyDef(BaseStruct):
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the ``X-XSS-Protection`` HTTP response header received from the origin with the one specified in this response headers policy.\n')
    protection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='A Boolean that determines the value of the ``X-XSS-Protection`` HTTP response header. When this setting is ``true`` , the value of the ``X-XSS-Protection`` header is ``1`` . When this setting is ``false`` , the value of the ``X-XSS-Protection`` header is ``0`` . For more information about these settings, see `X-XSS-Protection <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection>`_ in the MDN Web Docs.\n')
    mode_block: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A Boolean that determines whether CloudFront includes the ``mode=block`` directive in the ``X-XSS-Protection`` header. For more information about this directive, see `X-XSS-Protection <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection>`_ in the MDN Web Docs.\n')
    report_uri: typing.Optional[str] = pydantic.Field(None, description='A reporting URI, which CloudFront uses as the value of the ``report`` directive in the ``X-XSS-Protection`` header. You cannot specify a ``ReportUri`` when ``ModeBlock`` is ``true`` . For more information about using a reporting URL, see `X-XSS-Protection <https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection>`_ in the MDN Web Docs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-responseheaderspolicy-xssprotection.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    x_sSProtection_property = cloudfront.CfnResponseHeadersPolicy.XSSProtectionProperty(\n        override=False,\n        protection=False,\n\n        # the properties below are optional\n        mode_block=False,\n        report_uri="reportUri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['override', 'protection', 'mode_block', 'report_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy.XSSProtectionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnStreamingDistribution.LoggingProperty
class CfnStreamingDistribution_LoggingPropertyDef(BaseStruct):
    bucket: str = pydantic.Field(..., description='The Amazon S3 bucket to store the access logs in, for example, ``myawslogbucket.s3.amazonaws.com`` .\n')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description="Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you don't want to enable logging when you create a streaming distribution or if you want to disable logging for an existing streaming distribution, specify ``false`` for ``Enabled`` , and specify ``empty Bucket`` and ``Prefix`` elements. If you specify ``false`` for ``Enabled`` but you specify values for ``Bucket`` and ``Prefix`` , the values are automatically deleted.\n")
    prefix: str = pydantic.Field(..., description='An optional string that you want CloudFront to prefix to the access log filenames for this streaming distribution, for example, ``myprefix/`` . If you want to enable logging, but you don\'t want to specify a prefix, you still must include an empty ``Prefix`` element in the ``Logging`` element.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-streamingdistribution-logging.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    logging_property = cloudfront.CfnStreamingDistribution.LoggingProperty(\n        bucket="bucket",\n        enabled=False,\n        prefix="prefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'enabled', 'prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnStreamingDistribution.LoggingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnStreamingDistribution.S3OriginProperty
class CfnStreamingDistribution_S3OriginPropertyDef(BaseStruct):
    domain_name: str = pydantic.Field(..., description='The DNS name of the Amazon S3 origin.\n')
    origin_access_identity: str = pydantic.Field(..., description='The CloudFront origin access identity to associate with the distribution. Use an origin access identity to configure the distribution so that end users can only access objects in an Amazon S3 bucket through CloudFront. If you want end users to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty ``OriginAccessIdentity`` element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty ``OriginAccessIdentity`` element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information, see `Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html>`_ in the *Amazon CloudFront Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-streamingdistribution-s3origin.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    s3_origin_property = cloudfront.CfnStreamingDistribution.S3OriginProperty(\n        domain_name="domainName",\n        origin_access_identity="originAccessIdentity"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_name', 'origin_access_identity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnStreamingDistribution.S3OriginProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnStreamingDistribution.StreamingDistributionConfigProperty
class CfnStreamingDistribution_StreamingDistributionConfigPropertyDef(BaseStruct):
    comment: str = pydantic.Field(..., description='Any comments you want to include about the streaming distribution.\n')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Whether the streaming distribution is enabled to accept user requests for content.\n')
    s3_origin: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnStreamingDistribution_S3OriginPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.\n')
    trusted_signers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnStreamingDistribution_TrustedSignersPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A complex type that specifies any AWS accounts that you want to permit to create signed URLs for private content. If you want the distribution to use signed URLs, include this element; if you want the distribution to use public URLs, remove this element. For more information, see `Serving Private Content through CloudFront <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    aliases: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution.\n')
    logging: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnStreamingDistribution_LoggingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A complex type that controls whether access logs are written for the streaming distribution.\n')
    price_class: typing.Optional[str] = pydantic.Field(None, description='A complex type that contains information about price class for this streaming distribution.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-streamingdistribution-streamingdistributionconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    streaming_distribution_config_property = cloudfront.CfnStreamingDistribution.StreamingDistributionConfigProperty(\n        comment="comment",\n        enabled=False,\n        s3_origin=cloudfront.CfnStreamingDistribution.S3OriginProperty(\n            domain_name="domainName",\n            origin_access_identity="originAccessIdentity"\n        ),\n        trusted_signers=cloudfront.CfnStreamingDistribution.TrustedSignersProperty(\n            enabled=False,\n\n            # the properties below are optional\n            aws_account_numbers=["awsAccountNumbers"]\n        ),\n\n        # the properties below are optional\n        aliases=["aliases"],\n        logging=cloudfront.CfnStreamingDistribution.LoggingProperty(\n            bucket="bucket",\n            enabled=False,\n            prefix="prefix"\n        ),\n        price_class="priceClass"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comment', 'enabled', 's3_origin', 'trusted_signers', 'aliases', 'logging', 'price_class']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnStreamingDistribution.StreamingDistributionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnStreamingDistribution.TrustedSignersProperty
class CfnStreamingDistribution_TrustedSignersPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='This field is ``true`` if any of the AWS accounts in the list are configured as trusted signers. If not, this field is ``false`` .\n')
    aws_account_numbers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An AWS account number that contains active CloudFront key pairs that CloudFront can use to verify the signatures of signed URLs and signed cookies. If the AWS account that owns the key pairs is the same account that owns the CloudFront distribution, the value of this field is ``self`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-streamingdistribution-trustedsigners.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    trusted_signers_property = cloudfront.CfnStreamingDistribution.TrustedSignersProperty(\n        enabled=False,\n\n        # the properties below are optional\n        aws_account_numbers=["awsAccountNumbers"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'aws_account_numbers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnStreamingDistribution.TrustedSignersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CloudFrontWebDistributionAttributes
class CloudFrontWebDistributionAttributesDef(BaseStruct):
    distribution_id: str = pydantic.Field(..., description='The distribution ID for this distribution.\n')
    domain_name: str = pydantic.Field(..., description='The generated domain name of the Distribution, such as d111111abcdef8.cloudfront.net.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cloud_front_web_distribution_attributes = cloudfront.CloudFrontWebDistributionAttributes(\n        distribution_id="distributionId",\n        domain_name="domainName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['distribution_id', 'domain_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CloudFrontWebDistributionAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CloudFrontWebDistributionProps
class CloudFrontWebDistributionPropsDef(BaseStruct):
    origin_configs: typing.Sequence[typing.Union[models.aws_cloudfront.SourceConfigurationDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The origin configurations for this distribution. Behaviors are a part of the origin.')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment for this distribution in the CloudFront console. Default: - No comment is added to distribution.\n')
    default_root_object: typing.Optional[str] = pydantic.Field(None, description='The default object to serve. Default: - "index.html" is served.\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Enable or disable the distribution. Default: true\n')
    enable_ip_v6: typing.Optional[bool] = pydantic.Field(None, description='If your distribution should have IPv6 enabled. Default: true\n')
    error_configurations: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.CfnDistribution_CustomErrorResponsePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='How CloudFront should handle requests that are not successful (eg PageNotFound). By default, CloudFront does not replace HTTP status codes in the 4xx and 5xx range with custom error messages. CloudFront does not cache HTTP status codes. Default: - No custom error configuration.\n')
    geo_restriction: typing.Optional[models.aws_cloudfront.GeoRestrictionDef] = pydantic.Field(None, description='Controls the countries in which your content is distributed. Default: No geo restriction\n')
    http_version: typing.Optional[aws_cdk.aws_cloudfront.HttpVersion] = pydantic.Field(None, description='The max supported HTTP Versions. Default: HttpVersion.HTTP2\n')
    logging_config: typing.Union[models.aws_cloudfront.LoggingConfigurationDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Optional - if we should enable logging. You can pass an empty object ({}) to have us auto create a bucket for logging. Omission of this property indicates no logging is to be enabled. Default: - no logging is enabled by default.\n')
    price_class: typing.Optional[aws_cdk.aws_cloudfront.PriceClass] = pydantic.Field(None, description='The price class for the distribution (this impacts how many locations CloudFront uses for your distribution, and billing). Default: PriceClass.PRICE_CLASS_100 the cheapest option for CloudFront is picked by default.\n')
    viewer_certificate: typing.Optional[models.aws_cloudfront.ViewerCertificateDef] = pydantic.Field(None, description="Specifies whether you want viewers to use HTTP or HTTPS to request your objects, whether you're using an alternate domain name with HTTPS, and if so, if you're using AWS Certificate Manager (ACM) or a third-party certificate authority. Default: ViewerCertificate.fromCloudFrontDefaultCertificate()\n")
    viewer_protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.ViewerProtocolPolicy] = pydantic.Field(None, description='The default viewer policy for incoming clients. Default: RedirectToHTTPs\n')
    web_acl_id: typing.Optional[str] = pydantic.Field(None, description='Unique identifier that specifies the AWS WAF web ACL to associate with this CloudFront distribution. To specify a web ACL created using the latest version of AWS WAF, use the ACL ARN, for example ``arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a``. To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example ``473e64fd-f30b-4765-81a0-62ad96dd167a``. Default: - No AWS Web Application Firewall web access control list (web ACL).\n\n:exampleMetadata: infused\n\nExample::\n\n    # source_bucket: s3.Bucket\n\n    viewer_certificate = cloudfront.ViewerCertificate.from_iam_certificate("MYIAMROLEIDENTIFIER",\n        aliases=["MYALIAS"]\n    )\n\n    cloudfront.CloudFrontWebDistribution(self, "MyCfWebDistribution",\n        origin_configs=[cloudfront.SourceConfiguration(\n            s3_origin_source=cloudfront.S3OriginConfig(\n                s3_bucket_source=source_bucket\n            ),\n            behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n        )\n        ],\n        viewer_certificate=viewer_certificate\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['origin_configs', 'comment', 'default_root_object', 'enabled', 'enable_ip_v6', 'error_configurations', 'geo_restriction', 'http_version', 'logging_config', 'price_class', 'viewer_certificate', 'viewer_protocol_policy', 'web_acl_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CloudFrontWebDistributionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CustomOriginConfig
class CustomOriginConfigDef(BaseStruct):
    domain_name: str = pydantic.Field(..., description='The domain name of the custom origin. Should not include the path - that should be in the parent SourceConfiguration\n')
    allowed_origin_ssl_versions: typing.Optional[typing.Sequence[aws_cdk.aws_cloudfront.OriginSslPolicy]] = pydantic.Field(None, description='The SSL versions to use when interacting with the origin. Default: OriginSslPolicy.TLS_V1_2\n')
    http_port: typing.Union[int, float, None] = pydantic.Field(None, description='The origin HTTP port. Default: 80\n')
    https_port: typing.Union[int, float, None] = pydantic.Field(None, description='The origin HTTPS port. Default: 443\n')
    origin_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Any additional headers to pass to the origin. Default: - No additional headers are passed.\n')
    origin_keepalive_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The keep alive timeout when making calls in seconds. Default: Duration.seconds(5)\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description='The relative path to the origin root to use for sources. Default: /\n')
    origin_protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.OriginProtocolPolicy] = pydantic.Field(None, description='The protocol (http or https) policy to use when interacting with the origin. Default: OriginProtocolPolicy.HttpsOnly\n')
    origin_read_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The read timeout when calling the origin in seconds. Default: Duration.seconds(30)\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n\n:exampleMetadata: infused\n\nExample::\n\n    # source_bucket: s3.Bucket\n    # oai: cloudfront.OriginAccessIdentity\n\n\n    cloudfront.CloudFrontWebDistribution(self, "MyCfWebDistribution",\n        origin_configs=[cloudfront.SourceConfiguration(\n            s3_origin_source=cloudfront.S3OriginConfig(\n                s3_bucket_source=source_bucket,\n                origin_access_identity=oai\n            ),\n            behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n        ), cloudfront.SourceConfiguration(\n            custom_origin_source=cloudfront.CustomOriginConfig(\n                domain_name="MYALIAS"\n            ),\n            behaviors=[cloudfront.Behavior(path_pattern="/somewhere")]\n        )\n        ]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_name', 'allowed_origin_ssl_versions', 'http_port', 'https_port', 'origin_headers', 'origin_keepalive_timeout', 'origin_path', 'origin_protocol_policy', 'origin_read_timeout', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CustomOriginConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.DistributionAttributes
class DistributionAttributesDef(BaseStruct):
    distribution_id: str = pydantic.Field(..., description='The distribution ID for this distribution.\n')
    domain_name: str = pydantic.Field(..., description='The generated domain name of the Distribution, such as d111111abcdef8.cloudfront.net.\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using a reference to an imported Distribution\n    distribution = cloudfront.Distribution.from_distribution_attributes(self, "ImportedDist",\n        domain_name="d111111abcdef8.cloudfront.net",\n        distribution_id="012345ABCDEF"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['distribution_id', 'domain_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.DistributionAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.DistributionProps
class DistributionPropsDef(BaseStruct):
    default_behavior: typing.Union[models.aws_cloudfront.BehaviorOptionsDef, dict[str, typing.Any]] = pydantic.Field(..., description='The default behavior for the distribution.\n')
    additional_behaviors: typing.Optional[typing.Mapping[str, typing.Union[models.aws_cloudfront.BehaviorOptionsDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Additional behaviors for the distribution, mapped by the pathPattern that specifies which requests to apply the behavior to. Default: - no additional behaviors are added.\n')
    certificate: typing.Optional[typing.Union[models.aws_certificatemanager.CertificateDef, models.aws_certificatemanager.DnsValidatedCertificateDef, models.aws_certificatemanager.PrivateCertificateDef]] = pydantic.Field(None, description='A certificate to associate with the distribution. The certificate must be located in N. Virginia (us-east-1). Default: - the CloudFront wildcard certificate (*.cloudfront.net) will be used.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments you want to include about the distribution. Default: - no comment\n')
    default_root_object: typing.Optional[str] = pydantic.Field(None, description="The object that you want CloudFront to request from your origin (for example, index.html) when a viewer requests the root URL for your distribution. If no default object is set, the request goes to the origin's root (e.g., example.com/). Default: - no default root object\n")
    domain_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Alternative domain names for this distribution. If you want to use your own domain name, such as www.example.com, instead of the cloudfront.net domain name, you can add an alternate domain name to your distribution. If you attach a certificate to the distribution, you must add (at least one of) the domain names of the certificate to this list. Default: - The distribution will only support the default generated name (e.g., d111111abcdef8.cloudfront.net)\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Enable or disable the distribution. Default: true\n')
    enable_ipv6: typing.Optional[bool] = pydantic.Field(None, description='Whether CloudFront will respond to IPv6 DNS requests with an IPv6 address. If you specify false, CloudFront responds to IPv6 DNS requests with the DNS response code NOERROR and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for your distribution. Default: true\n')
    enable_logging: typing.Optional[bool] = pydantic.Field(None, description='Enable access logging for the distribution. Default: - false, unless ``logBucket`` is specified.\n')
    error_responses: typing.Optional[typing.Sequence[typing.Union[models.aws_cloudfront.ErrorResponseDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='How CloudFront should handle requests that are not successful (e.g., PageNotFound). Default: - No custom error responses.\n')
    geo_restriction: typing.Optional[models.aws_cloudfront.GeoRestrictionDef] = pydantic.Field(None, description='Controls the countries in which your content is distributed. Default: - No geographic restrictions\n')
    http_version: typing.Optional[aws_cdk.aws_cloudfront.HttpVersion] = pydantic.Field(None, description='Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. For viewers and CloudFront to use HTTP/2, viewers must support TLS 1.2 or later, and must support server name identification (SNI). Default: HttpVersion.HTTP2\n')
    log_bucket: typing.Optional[typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef]] = pydantic.Field(None, description='The Amazon S3 bucket to store the access logs in. Make sure to set ``objectOwnership`` to ``s3.ObjectOwnership.OBJECT_WRITER`` in your custom bucket. Default: - A bucket is created if ``enableLogging`` is true\n')
    log_file_prefix: typing.Optional[str] = pydantic.Field(None, description='An optional string that you want CloudFront to prefix to the access log filenames for this distribution. Default: - no prefix\n')
    log_includes_cookies: typing.Optional[bool] = pydantic.Field(None, description='Specifies whether you want CloudFront to include cookies in access logs. Default: false\n')
    minimum_protocol_version: typing.Optional[aws_cdk.aws_cloudfront.SecurityPolicyProtocol] = pydantic.Field(None, description="The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. CloudFront serves your objects only to browsers or devices that support at least the SSL version that you specify. Default: - SecurityPolicyProtocol.TLS_V1_2_2021 if the '@aws-cdk/aws-cloudfront:defaultSecurityPolicyTLSv1.2_2021' feature flag is set; otherwise, SecurityPolicyProtocol.TLS_V1_2_2019.\n")
    price_class: typing.Optional[aws_cdk.aws_cloudfront.PriceClass] = pydantic.Field(None, description='The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you specify PriceClass_All, CloudFront responds to requests for your objects from all CloudFront edge locations. If you specify a price class other than PriceClass_All, CloudFront serves your objects from the CloudFront edge location that has the lowest latency among the edge locations in your price class. Default: PriceClass.PRICE_CLASS_ALL\n')
    ssl_support_method: typing.Optional[aws_cdk.aws_cloudfront.SSLMethod] = pydantic.Field(None, description='The SSL method CloudFront will use for your distribution. Server Name Indication (SNI) - is an extension to the TLS computer networking protocol by which a client indicates which hostname it is attempting to connect to at the start of the handshaking process. This allows a server to present multiple certificates on the same IP address and TCP port number and hence allows multiple secure (HTTPS) websites (or any other service over TLS) to be served by the same IP address without requiring all those sites to use the same certificate. CloudFront can use SNI to host multiple distributions on the same IP - which a large majority of clients will support. If your clients cannot support SNI however - CloudFront can use dedicated IPs for your distribution - but there is a prorated monthly charge for using this feature. By default, we use SNI - but you can optionally enable dedicated IPs (VIP). See the CloudFront SSL for more details about pricing : https://aws.amazon.com/cloudfront/custom-ssl-domains/ Default: SSLMethod.SNI\n')
    web_acl_id: typing.Optional[str] = pydantic.Field(None, description='Unique identifier that specifies the AWS WAF web ACL to associate with this CloudFront distribution. To specify a web ACL created using the latest version of AWS WAF, use the ACL ARN, for example ``arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a``. To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example ``473e64fd-f30b-4765-81a0-62ad96dd167a``. Default: - No AWS Web Application Firewall web access control list (web ACL).\n\n:exampleMetadata: infused\n\nExample::\n\n    # s3_bucket: s3.Bucket\n    # Add a cloudfront Function to a Distribution\n    cf_function = cloudfront.Function(self, "Function",\n        code=cloudfront.FunctionCode.from_inline("function handler(event) { return event.request }")\n    )\n    cloudfront.Distribution(self, "distro",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=origins.S3Origin(s3_bucket),\n            function_associations=[cloudfront.FunctionAssociation(\n                function=cf_function,\n                event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_behavior', 'additional_behaviors', 'certificate', 'comment', 'default_root_object', 'domain_names', 'enabled', 'enable_ipv6', 'enable_logging', 'error_responses', 'geo_restriction', 'http_version', 'log_bucket', 'log_file_prefix', 'log_includes_cookies', 'minimum_protocol_version', 'price_class', 'ssl_support_method', 'web_acl_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.DistributionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.EdgeLambda
class EdgeLambdaDef(BaseStruct):
    event_type: aws_cdk.aws_cloudfront.LambdaEdgeEventType = pydantic.Field(..., description='The type of event in response to which should the function be invoked.\n')
    function_version: typing.Union[models.aws_lambda.VersionDef] = pydantic.Field(..., description="The version of the Lambda function that will be invoked. **Note**: it's not possible to use the '$LATEST' function version for Lambda@Edge!\n")
    include_body: typing.Optional[bool] = pydantic.Field(None, description='Allows a Lambda function to have read access to the body content. Only valid for "request" event types (``ORIGIN_REQUEST`` or ``VIEWER_REQUEST``). See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html Default: false\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n    from aws_cdk import aws_lambda as lambda_\n\n    # version: lambda.Version\n\n    edge_lambda = cloudfront.EdgeLambda(\n        event_type=cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n        function_version=version,\n\n        # the properties below are optional\n        include_body=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_type', 'function_version', 'include_body']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.EdgeLambda'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[EdgeLambdaDefConfig] = pydantic.Field(None)


class EdgeLambdaDefConfig(pydantic.BaseModel):
    function_version_config: typing.Optional[models._interface_methods.AwsLambdaIVersionDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cloudfront.ErrorResponse
class ErrorResponseDef(BaseStruct):
    http_status: typing.Union[int, float] = pydantic.Field(..., description='The HTTP status code for which you want to specify a custom error page and/or a caching duration.\n')
    response_http_status: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. If you specify a value for ``responseHttpStatus``, you must also specify a value for ``responsePagePath``. Default: - the error code will be returned as the response code.\n')
    response_page_path: typing.Optional[str] = pydantic.Field(None, description='The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the ``httpStatus``, for example, /4xx-errors/403-forbidden.html. Default: - the default CloudFront response is shown.\n')
    ttl: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ErrorCode. Default: - the default caching TTL behavior applies\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    error_response = cloudfront.ErrorResponse(\n        http_status=123,\n\n        # the properties below are optional\n        response_http_status=123,\n        response_page_path="responsePagePath",\n        ttl=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['http_status', 'response_http_status', 'response_page_path', 'ttl']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ErrorResponse'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.FileCodeOptions
class FileCodeOptionsDef(BaseStruct):
    file_path: str = pydantic.Field(..., description='The path of the file to read the code from.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    file_code_options = cloudfront.FileCodeOptions(\n        file_path="filePath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['file_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.FileCodeOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.FunctionAssociation
class FunctionAssociationDef(BaseStruct):
    event_type: aws_cdk.aws_cloudfront.FunctionEventType = pydantic.Field(..., description='The type of event which should invoke the function.\n')
    function: typing.Union[models.aws_cloudfront.FunctionDef] = pydantic.Field(..., description='The CloudFront function that will be invoked.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    # function_: cloudfront.Function\n\n    function_association = cloudfront.FunctionAssociation(\n        event_type=cloudfront.FunctionEventType.VIEWER_REQUEST,\n        function=function_\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_type', 'function']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.FunctionAssociation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.FunctionAttributes
class FunctionAttributesDef(BaseStruct):
    function_arn: str = pydantic.Field(..., description='The ARN of the function.\n')
    function_name: str = pydantic.Field(..., description='The name of the function.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    function_attributes = cloudfront.FunctionAttributes(\n        function_arn="functionArn",\n        function_name="functionName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['function_arn', 'function_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.FunctionAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.FunctionProps
class FunctionPropsDef(BaseStruct):
    code: models.aws_cloudfront.FunctionCodeDef = pydantic.Field(..., description='The source code of the function.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the function. Default: - same as ``functionName``\n')
    function_name: typing.Optional[str] = pydantic.Field(None, description='A name to identify the function. Default: - generated from the ``id``\n\n:exampleMetadata: infused\n\nExample::\n\n    # s3_bucket: s3.Bucket\n    # Add a cloudfront Function to a Distribution\n    cf_function = cloudfront.Function(self, "Function",\n        code=cloudfront.FunctionCode.from_inline("function handler(event) { return event.request }")\n    )\n    cloudfront.Distribution(self, "distro",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=origins.S3Origin(s3_bucket),\n            function_associations=[cloudfront.FunctionAssociation(\n                function=cf_function,\n                event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['code', 'comment', 'function_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.FunctionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[FunctionPropsDefConfig] = pydantic.Field(None)


class FunctionPropsDefConfig(pydantic.BaseModel):
    code_config: typing.Optional[models.aws_cloudfront.FunctionCodeDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cloudfront.KeyGroupProps
class KeyGroupPropsDef(BaseStruct):
    items: typing.Sequence[typing.Union[models.aws_cloudfront.PublicKeyDef]] = pydantic.Field(..., description='A list of public keys to add to the key group.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the key group. Default: - no comment\n')
    key_group_name: typing.Optional[str] = pydantic.Field(None, description='A name to identify the key group. Default: - generated from the ``id``\n\n:exampleMetadata: infused\n\nExample::\n\n    # Validating signed URLs or signed cookies with Trusted Key Groups\n\n    # public key in PEM format\n    # public_key: str\n\n    pub_key = cloudfront.PublicKey(self, "MyPubKey",\n        encoded_key=public_key\n    )\n\n    key_group = cloudfront.KeyGroup(self, "MyKeyGroup",\n        items=[pub_key\n        ]\n    )\n\n    cloudfront.Distribution(self, "Dist",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=origins.HttpOrigin("www.example.com"),\n            trusted_key_groups=[key_group\n            ]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['items', 'comment', 'key_group_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.KeyGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.LambdaFunctionAssociation
class LambdaFunctionAssociationDef(BaseStruct):
    event_type: aws_cdk.aws_cloudfront.LambdaEdgeEventType = pydantic.Field(..., description='The lambda event type defines at which event the lambda is called during the request lifecycle.')
    lambda_function: typing.Union[models.aws_lambda.VersionDef] = pydantic.Field(..., description='A version of the lambda to associate.\n')
    include_body: typing.Optional[bool] = pydantic.Field(None, description='Allows a Lambda function to have read access to the body content. Only valid for "request" event types (``ORIGIN_REQUEST`` or ``VIEWER_REQUEST``). See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html Default: false\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n    from aws_cdk import aws_lambda as lambda_\n\n    # version: lambda.Version\n\n    lambda_function_association = cloudfront.LambdaFunctionAssociation(\n        event_type=cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n        lambda_function=version,\n\n        # the properties below are optional\n        include_body=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_type', 'lambda_function', 'include_body']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.LambdaFunctionAssociation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[LambdaFunctionAssociationDefConfig] = pydantic.Field(None)


class LambdaFunctionAssociationDefConfig(pydantic.BaseModel):
    lambda_function_config: typing.Optional[models._interface_methods.AwsLambdaIVersionDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cloudfront.LoggingConfiguration
class LoggingConfigurationDef(BaseStruct):
    bucket: typing.Optional[typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef]] = pydantic.Field(None, description='Bucket to log requests to. Default: - A logging bucket is automatically created.\n')
    include_cookies: typing.Optional[bool] = pydantic.Field(None, description='Whether to include the cookies in the logs. Default: false\n')
    prefix: typing.Optional[str] = pydantic.Field(None, description='Where in the bucket to store logs. Default: - No prefix.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n    from aws_cdk import aws_s3 as s3\n\n    # bucket: s3.Bucket\n\n    logging_configuration = cloudfront.LoggingConfiguration(\n        bucket=bucket,\n        include_cookies=False,\n        prefix="prefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'include_cookies', 'prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.LoggingConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.OriginAccessIdentityProps
class OriginAccessIdentityPropsDef(BaseStruct):
    comment: typing.Optional[str] = pydantic.Field(None, description='Any comments you want to include about the origin access identity. Default: "Allows CloudFront to reach the bucket"\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_access_identity_props = cloudfront.OriginAccessIdentityProps(\n        comment="comment"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginAccessIdentityProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.OriginBindConfig
class OriginBindConfigDef(BaseStruct):
    failover_config: typing.Union[models.aws_cloudfront.OriginFailoverConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The failover configuration for this Origin. Default: - nothing is returned\n')
    origin_property: typing.Union[models.aws_cloudfront.CfnDistribution_OriginPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The CloudFormation OriginProperty configuration for this Origin. Default: - nothing is returned\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    # origin: cloudfront.IOrigin\n\n    origin_bind_config = cloudfront.OriginBindConfig(\n        failover_config=cloudfront.OriginFailoverConfig(\n            failover_origin=origin,\n\n            # the properties below are optional\n            status_codes=[123]\n        ),\n        origin_property=cloudfront.CfnDistribution.OriginProperty(\n            domain_name="domainName",\n            id="id",\n\n            # the properties below are optional\n            connection_attempts=123,\n            connection_timeout=123,\n            custom_origin_config=cloudfront.CfnDistribution.CustomOriginConfigProperty(\n                origin_protocol_policy="originProtocolPolicy",\n\n                # the properties below are optional\n                http_port=123,\n                https_port=123,\n                origin_keepalive_timeout=123,\n                origin_read_timeout=123,\n                origin_ssl_protocols=["originSslProtocols"]\n            ),\n            origin_access_control_id="originAccessControlId",\n            origin_custom_headers=[cloudfront.CfnDistribution.OriginCustomHeaderProperty(\n                header_name="headerName",\n                header_value="headerValue"\n            )],\n            origin_path="originPath",\n            origin_shield=cloudfront.CfnDistribution.OriginShieldProperty(\n                enabled=False,\n                origin_shield_region="originShieldRegion"\n            ),\n            s3_origin_config=cloudfront.CfnDistribution.S3OriginConfigProperty(\n                origin_access_identity="originAccessIdentity"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['failover_config', 'origin_property']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginBindConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.OriginBindOptions
class OriginBindOptionsDef(BaseStruct):
    origin_id: str = pydantic.Field(..., description='The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_bind_options = cloudfront.OriginBindOptions(\n        origin_id="originId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['origin_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginBindOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.OriginFailoverConfig
class OriginFailoverConfigDef(BaseStruct):
    failover_origin: typing.Union[models.aws_cloudfront.OriginBaseDef, models.aws_cloudfront_origins.HttpOriginDef, models.aws_cloudfront_origins.LoadBalancerV2OriginDef, models.aws_cloudfront_origins.OriginGroupDef, models.aws_cloudfront_origins.RestApiOriginDef, models.aws_cloudfront_origins.S3OriginDef] = pydantic.Field(..., description='The origin to use as the fallback origin.\n')
    status_codes: typing.Optional[typing.Sequence[typing.Union[int, float]]] = pydantic.Field(None, description='The HTTP status codes of the response that trigger querying the failover Origin. Default: - 500, 502, 503 and 504\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    # origin: cloudfront.IOrigin\n\n    origin_failover_config = cloudfront.OriginFailoverConfig(\n        failover_origin=origin,\n\n        # the properties below are optional\n        status_codes=[123]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['failover_origin', 'status_codes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginFailoverConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[OriginFailoverConfigDefConfig] = pydantic.Field(None)


class OriginFailoverConfigDefConfig(pydantic.BaseModel):
    failover_origin_config: typing.Optional[models._interface_methods.AwsCloudfrontIOriginDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cloudfront.OriginOptions
class OriginOptionsDef(BaseStruct):
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_options = cloudfront.OriginOptions(\n        connection_attempts=123,\n        connection_timeout=cdk.Duration.minutes(30),\n        custom_headers={\n            "custom_headers_key": "customHeaders"\n        },\n        origin_id="originId",\n        origin_shield_enabled=False,\n        origin_shield_region="originShieldRegion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.OriginProps
class OriginPropsDef(BaseStruct):
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description='An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with \'/\' (e.g., \'/production/images\'). Default: \'/\'\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    origin_props = cloudfront.OriginProps(\n        connection_attempts=123,\n        connection_timeout=cdk.Duration.minutes(30),\n        custom_headers={\n            "custom_headers_key": "customHeaders"\n        },\n        origin_id="originId",\n        origin_path="originPath",\n        origin_shield_enabled=False,\n        origin_shield_region="originShieldRegion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region', 'origin_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.OriginRequestPolicyProps
class OriginRequestPolicyPropsDef(BaseStruct):
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the origin request policy. Default: - no comment\n')
    cookie_behavior: typing.Optional[models.aws_cloudfront.OriginRequestCookieBehaviorDef] = pydantic.Field(None, description='The cookies from viewer requests to include in origin requests. Default: OriginRequestCookieBehavior.none()\n')
    header_behavior: typing.Optional[models.aws_cloudfront.OriginRequestHeaderBehaviorDef] = pydantic.Field(None, description='The HTTP headers to include in origin requests. These can include headers from viewer requests and additional headers added by CloudFront. Default: OriginRequestHeaderBehavior.none()\n')
    origin_request_policy_name: typing.Optional[str] = pydantic.Field(None, description="A unique name to identify the origin request policy. The name must only include '-', '_', or alphanumeric characters. Default: - generated from the ``id``\n")
    query_string_behavior: typing.Optional[models.aws_cloudfront.OriginRequestQueryStringBehaviorDef] = pydantic.Field(None, description='The URL query strings from viewer requests to include in origin requests. Default: OriginRequestQueryStringBehavior.none()\n\n:exampleMetadata: infused\n\nExample::\n\n    # Creating a custom origin request policy for a Distribution -- all parameters optional\n    # bucket_origin: origins.S3Origin\n\n    my_origin_request_policy = cloudfront.OriginRequestPolicy(self, "OriginRequestPolicy",\n        origin_request_policy_name="MyPolicy",\n        comment="A default policy",\n        cookie_behavior=cloudfront.OriginRequestCookieBehavior.none(),\n        header_behavior=cloudfront.OriginRequestHeaderBehavior.all("CloudFront-Is-Android-Viewer"),\n        query_string_behavior=cloudfront.OriginRequestQueryStringBehavior.allow_list("username")\n    )\n\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            origin_request_policy=my_origin_request_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comment', 'cookie_behavior', 'header_behavior', 'origin_request_policy_name', 'query_string_behavior']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.OriginRequestPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.PublicKeyProps
class PublicKeyPropsDef(BaseStruct):
    encoded_key: str = pydantic.Field(..., description='The public key that you can use with signed URLs and signed cookies, or with field-level encryption. The ``encodedKey`` parameter must include ``-----BEGIN PUBLIC KEY-----`` and ``-----END PUBLIC KEY-----`` lines.\n')
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the public key. Default: - no comment\n')
    public_key_name: typing.Optional[str] = pydantic.Field(None, description='A name to identify the public key. Default: - generated from the ``id``\n\n:exampleMetadata: infused\n\nExample::\n\n    # Validating signed URLs or signed cookies with Trusted Key Groups\n\n    # public key in PEM format\n    # public_key: str\n\n    pub_key = cloudfront.PublicKey(self, "MyPubKey",\n        encoded_key=public_key\n    )\n\n    key_group = cloudfront.KeyGroup(self, "MyKeyGroup",\n        items=[pub_key\n        ]\n    )\n\n    cloudfront.Distribution(self, "Dist",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=origins.HttpOrigin("www.example.com"),\n            trusted_key_groups=[key_group\n            ]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encoded_key', 'comment', 'public_key_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.PublicKeyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseCustomHeader
class ResponseCustomHeaderDef(BaseStruct):
    header: str = pydantic.Field(..., description='The HTTP response header name.\n')
    override: bool = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides a response header with the same name received from the origin with the header specified here.\n')
    value: str = pydantic.Field(..., description='The value for the HTTP response header.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    response_custom_header = cloudfront.ResponseCustomHeader(\n        header="header",\n        override=False,\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['header', 'override', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseCustomHeader'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseCustomHeadersBehavior
class ResponseCustomHeadersBehaviorDef(BaseStruct):
    custom_headers: typing.Sequence[typing.Union[models.aws_cloudfront.ResponseCustomHeaderDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The list of HTTP response headers and their values.\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_headers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseCustomHeadersBehavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseHeadersContentSecurityPolicy
class ResponseHeadersContentSecurityPolicyDef(BaseStruct):
    content_security_policy: str = pydantic.Field(..., description='The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header.\n')
    override: bool = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the Content-Security-Policy HTTP response header received from the origin with the one specified in this response headers policy.\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_security_policy', 'override']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseHeadersContentSecurityPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseHeadersContentTypeOptions
class ResponseHeadersContentTypeOptionsDef(BaseStruct):
    override: bool = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the X-Content-Type-Options HTTP response header received from the origin with the one specified in this response headers policy.\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['override']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseHeadersContentTypeOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseHeadersCorsBehavior
class ResponseHeadersCorsBehaviorDef(BaseStruct):
    access_control_allow_credentials: bool = pydantic.Field(..., description='A Boolean that CloudFront uses as the value for the Access-Control-Allow-Credentials HTTP response header.\n')
    access_control_allow_headers: typing.Sequence[str] = pydantic.Field(..., description="A list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header. You can specify ``['*']`` to allow all headers.\n")
    access_control_allow_methods: typing.Sequence[str] = pydantic.Field(..., description='A list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header.\n')
    access_control_allow_origins: typing.Sequence[str] = pydantic.Field(..., description="A list of origins (domain names) that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header. You can specify ``['*']`` to allow all origins.\n")
    origin_override: bool = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides HTTP response headers received from the origin with the ones specified in this response headers policy.\n')
    access_control_expose_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header. You can specify ``['*']`` to expose all headers. Default: - no headers exposed\n")
    access_control_max_age: typing.Optional[models.DurationDef] = pydantic.Field(None, description='A number that CloudFront uses as the value for the Access-Control-Max-Age HTTP response header. Default: - no max age\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_control_allow_credentials', 'access_control_allow_headers', 'access_control_allow_methods', 'access_control_allow_origins', 'origin_override', 'access_control_expose_headers', 'access_control_max_age']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseHeadersCorsBehavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseHeadersFrameOptions
class ResponseHeadersFrameOptionsDef(BaseStruct):
    frame_option: aws_cdk.aws_cloudfront.HeadersFrameOption = pydantic.Field(..., description='The value of the X-Frame-Options HTTP response header.\n')
    override: bool = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the X-Frame-Options HTTP response header received from the origin with the one specified in this response headers policy.\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['frame_option', 'override']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseHeadersFrameOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseHeadersPolicyProps
class ResponseHeadersPolicyPropsDef(BaseStruct):
    comment: typing.Optional[str] = pydantic.Field(None, description='A comment to describe the response headers policy. Default: - no comment\n')
    cors_behavior: typing.Union[models.aws_cloudfront.ResponseHeadersCorsBehaviorDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of HTTP response headers that are used for cross-origin resource sharing (CORS). Default: - no cors behavior\n')
    custom_headers_behavior: typing.Union[models.aws_cloudfront.ResponseCustomHeadersBehaviorDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of custom HTTP response headers. Default: - no custom headers behavior\n')
    remove_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of HTTP response headers that CloudFront removes from HTTP responses that it sends to viewers. Default: - no headers are removed\n')
    response_headers_policy_name: typing.Optional[str] = pydantic.Field(None, description='A unique name to identify the response headers policy. Default: - generated from the ``id``\n')
    security_headers_behavior: typing.Union[models.aws_cloudfront.ResponseSecurityHeadersBehaviorDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for a set of security-related HTTP response headers. Default: - no security headers behavior\n')
    server_timing_sampling_rate: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of responses that you want CloudFront to add the Server-Timing header to. Default: - no Server-Timing header is added to HTTP responses\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comment', 'cors_behavior', 'custom_headers_behavior', 'remove_headers', 'response_headers_policy_name', 'security_headers_behavior', 'server_timing_sampling_rate']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseHeadersPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseHeadersReferrerPolicy
class ResponseHeadersReferrerPolicyDef(BaseStruct):
    override: bool = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the Referrer-Policy HTTP response header received from the origin with the one specified in this response headers policy.\n')
    referrer_policy: aws_cdk.aws_cloudfront.HeadersReferrerPolicy = pydantic.Field(..., description='The value of the Referrer-Policy HTTP response header.\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['override', 'referrer_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseHeadersReferrerPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseHeadersStrictTransportSecurity
class ResponseHeadersStrictTransportSecurityDef(BaseStruct):
    access_control_max_age: models.DurationDef = pydantic.Field(..., description='A number that CloudFront uses as the value for the max-age directive in the Strict-Transport-Security HTTP response header.\n')
    override: bool = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the Strict-Transport-Security HTTP response header received from the origin with the one specified in this response headers policy.\n')
    include_subdomains: typing.Optional[bool] = pydantic.Field(None, description='A Boolean that determines whether CloudFront includes the includeSubDomains directive in the Strict-Transport-Security HTTP response header. Default: false\n')
    preload: typing.Optional[bool] = pydantic.Field(None, description='A Boolean that determines whether CloudFront includes the preload directive in the Strict-Transport-Security HTTP response header. Default: false\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_control_max_age', 'override', 'include_subdomains', 'preload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseHeadersStrictTransportSecurity'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ResponseHeadersStrictTransportSecurityDefConfig] = pydantic.Field(None)


class ResponseHeadersStrictTransportSecurityDefConfig(pydantic.BaseModel):
    access_control_max_age_config: typing.Optional[models.core.DurationDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cloudfront.ResponseHeadersXSSProtection
class ResponseHeadersXSSProtectionDef(BaseStruct):
    override: bool = pydantic.Field(..., description='A Boolean that determines whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.\n')
    protection: bool = pydantic.Field(..., description='A Boolean that determines the value of the X-XSS-Protection HTTP response header. When this setting is true, the value of the X-XSS-Protection header is 1. When this setting is false, the value of the X-XSS-Protection header is 0.\n')
    mode_block: typing.Optional[bool] = pydantic.Field(None, description='A Boolean that determines whether CloudFront includes the mode=block directive in the X-XSS-Protection header. Default: false\n')
    report_uri: typing.Optional[str] = pydantic.Field(None, description='A reporting URI, which CloudFront uses as the value of the report directive in the X-XSS-Protection header. You cannot specify a ReportUri when ModeBlock is true. Default: - no report uri\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['override', 'protection', 'mode_block', 'report_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseHeadersXSSProtection'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ResponseSecurityHeadersBehavior
class ResponseSecurityHeadersBehaviorDef(BaseStruct):
    content_security_policy: typing.Union[models.aws_cloudfront.ResponseHeadersContentSecurityPolicyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. Default: - no content security policy\n')
    content_type_options: typing.Union[models.aws_cloudfront.ResponseHeadersContentTypeOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. Default: - no content type options\n')
    frame_options: typing.Union[models.aws_cloudfront.ResponseHeadersFrameOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header’s value. Default: - no frame options\n')
    referrer_policy: typing.Union[models.aws_cloudfront.ResponseHeadersReferrerPolicyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. Default: - no referrer policy\n')
    strict_transport_security: typing.Union[models.aws_cloudfront.ResponseHeadersStrictTransportSecurityDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header’s value. Default: - no strict transport security\n')
    xss_protection: typing.Union[models.aws_cloudfront.ResponseHeadersXSSProtectionDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines whether CloudFront includes the X-XSS-Protection HTTP response header and the header’s value. Default: - no xss protection\n\n:exampleMetadata: infused\n\nExample::\n\n    # Using an existing managed response headers policy\n    # bucket_origin: origins.S3Origin\n\n    cloudfront.Distribution(self, "myDistManagedPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n        )\n    )\n\n    # Creating a custom response headers policy -- all parameters optional\n    my_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, "ResponseHeadersPolicy",\n        response_headers_policy_name="MyPolicy",\n        comment="A default policy",\n        cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n            access_control_allow_credentials=False,\n            access_control_allow_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_allow_methods=["GET", "POST"],\n            access_control_allow_origins=["*"],\n            access_control_expose_headers=["X-Custom-Header-1", "X-Custom-Header-2"],\n            access_control_max_age=Duration.seconds(600),\n            origin_override=True\n        ),\n        custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n            custom_headers=[cloudfront.ResponseCustomHeader(header="X-Amz-Date", value="some-value", override=True), cloudfront.ResponseCustomHeader(header="X-Amz-Security-Token", value="some-value", override=False)\n            ]\n        ),\n        security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n            content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy="default-src https:;", override=True),\n            content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n            frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n            referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n            strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n            xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri="https://example.com/csp-report", override=True)\n        ),\n        remove_headers=["Server"],\n        server_timing_sampling_rate=50\n    )\n    cloudfront.Distribution(self, "myDistCustomPolicy",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            response_headers_policy=my_response_headers_policy\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_security_policy', 'content_type_options', 'frame_options', 'referrer_policy', 'strict_transport_security', 'xss_protection']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ResponseSecurityHeadersBehavior'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.S3OriginConfig
class S3OriginConfigDef(BaseStruct):
    s3_bucket_source: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='The source bucket to serve content from.\n')
    origin_access_identity: typing.Optional[typing.Union[models.aws_cloudfront.OriginAccessIdentityDef]] = pydantic.Field(None, description='The optional Origin Access Identity of the origin identity cloudfront will use when calling your s3 bucket. Default: No Origin Access Identity which requires the S3 bucket to be public accessible\n')
    origin_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Any additional headers to pass to the origin. Default: - No additional headers are passed.\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description='The relative path to the origin root to use for sources. Default: /\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n\n:exampleMetadata: infused\n\nExample::\n\n    # source_bucket: s3.Bucket\n\n    viewer_certificate = cloudfront.ViewerCertificate.from_iam_certificate("MYIAMROLEIDENTIFIER",\n        aliases=["MYALIAS"]\n    )\n\n    cloudfront.CloudFrontWebDistribution(self, "MyCfWebDistribution",\n        origin_configs=[cloudfront.SourceConfiguration(\n            s3_origin_source=cloudfront.S3OriginConfig(\n                s3_bucket_source=source_bucket\n            ),\n            behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n        )\n        ],\n        viewer_certificate=viewer_certificate\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_bucket_source', 'origin_access_identity', 'origin_headers', 'origin_path', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.S3OriginConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[S3OriginConfigDefConfig] = pydantic.Field(None)


class S3OriginConfigDefConfig(pydantic.BaseModel):
    s3_bucket_source_config: typing.Optional[models._interface_methods.AwsS3IBucketDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cloudfront.SourceConfiguration
class SourceConfigurationDef(BaseStruct):
    behaviors: typing.Sequence[typing.Union[models.aws_cloudfront.BehaviorDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The behaviors associated with this source. At least one (default) behavior must be included.\n')
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin. You can specify 1, 2, or 3 as the number of attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. You can specify a number of seconds between 1 and 10 (inclusive). Default: cdk.Duration.seconds(10)\n')
    custom_origin_source: typing.Union[models.aws_cloudfront.CustomOriginConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A custom origin source - for all non-s3 sources.\n')
    failover_criteria_status_codes: typing.Optional[typing.Sequence[aws_cdk.aws_cloudfront.FailoverStatusCode]] = pydantic.Field(None, description='HTTP status code to failover to second origin. Default: [500, 502, 503, 504]\n')
    failover_custom_origin_source: typing.Union[models.aws_cloudfront.CustomOriginConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A custom origin source for failover in case the s3OriginSource returns invalid status code. Default: - no failover configuration\n')
    failover_s3_origin_source: typing.Union[models.aws_cloudfront.S3OriginConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An s3 origin source for failover in case the s3OriginSource returns invalid status code. Default: - no failover configuration\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n')
    s3_origin_source: typing.Union[models.aws_cloudfront.S3OriginConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An s3 origin source - if you\'re using s3 for your assets.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_cloudfront as cloudfront\n    from aws_cdk import aws_lambda as lambda_\n    from aws_cdk import aws_s3 as s3\n\n    # bucket: s3.Bucket\n    # function_: cloudfront.Function\n    # key_group: cloudfront.KeyGroup\n    # origin_access_identity: cloudfront.OriginAccessIdentity\n    # version: lambda.Version\n\n    source_configuration = cloudfront.SourceConfiguration(\n        behaviors=[cloudfront.Behavior(\n            allowed_methods=cloudfront.CloudFrontAllowedMethods.GET_HEAD,\n            cached_methods=cloudfront.CloudFrontAllowedCachedMethods.GET_HEAD,\n            compress=False,\n            default_ttl=cdk.Duration.minutes(30),\n            forwarded_values=cloudfront.CfnDistribution.ForwardedValuesProperty(\n                query_string=False,\n\n                # the properties below are optional\n                cookies=cloudfront.CfnDistribution.CookiesProperty(\n                    forward="forward",\n\n                    # the properties below are optional\n                    whitelisted_names=["whitelistedNames"]\n                ),\n                headers=["headers"],\n                query_string_cache_keys=["queryStringCacheKeys"]\n            ),\n            function_associations=[cloudfront.FunctionAssociation(\n                event_type=cloudfront.FunctionEventType.VIEWER_REQUEST,\n                function=function_\n            )],\n            is_default_behavior=False,\n            lambda_function_associations=[cloudfront.LambdaFunctionAssociation(\n                event_type=cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n                lambda_function=version,\n\n                # the properties below are optional\n                include_body=False\n            )],\n            max_ttl=cdk.Duration.minutes(30),\n            min_ttl=cdk.Duration.minutes(30),\n            path_pattern="pathPattern",\n            trusted_key_groups=[key_group],\n            trusted_signers=["trustedSigners"],\n            viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.HTTPS_ONLY\n        )],\n\n        # the properties below are optional\n        connection_attempts=123,\n        connection_timeout=cdk.Duration.minutes(30),\n        custom_origin_source=cloudfront.CustomOriginConfig(\n            domain_name="domainName",\n\n            # the properties below are optional\n            allowed_origin_sSLVersions=[cloudfront.OriginSslPolicy.SSL_V3],\n            http_port=123,\n            https_port=123,\n            origin_headers={\n                "origin_headers_key": "originHeaders"\n            },\n            origin_keepalive_timeout=cdk.Duration.minutes(30),\n            origin_path="originPath",\n            origin_protocol_policy=cloudfront.OriginProtocolPolicy.HTTP_ONLY,\n            origin_read_timeout=cdk.Duration.minutes(30),\n            origin_shield_region="originShieldRegion"\n        ),\n        failover_criteria_status_codes=[cloudfront.FailoverStatusCode.FORBIDDEN],\n        failover_custom_origin_source=cloudfront.CustomOriginConfig(\n            domain_name="domainName",\n\n            # the properties below are optional\n            allowed_origin_sSLVersions=[cloudfront.OriginSslPolicy.SSL_V3],\n            http_port=123,\n            https_port=123,\n            origin_headers={\n                "origin_headers_key": "originHeaders"\n            },\n            origin_keepalive_timeout=cdk.Duration.minutes(30),\n            origin_path="originPath",\n            origin_protocol_policy=cloudfront.OriginProtocolPolicy.HTTP_ONLY,\n            origin_read_timeout=cdk.Duration.minutes(30),\n            origin_shield_region="originShieldRegion"\n        ),\n        failover_s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=bucket,\n\n            # the properties below are optional\n            origin_access_identity=origin_access_identity,\n            origin_headers={\n                "origin_headers_key": "originHeaders"\n            },\n            origin_path="originPath",\n            origin_shield_region="originShieldRegion"\n        ),\n        origin_shield_region="originShieldRegion",\n        s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=bucket,\n\n            # the properties below are optional\n            origin_access_identity=origin_access_identity,\n            origin_headers={\n                "origin_headers_key": "originHeaders"\n            },\n            origin_path="originPath",\n            origin_shield_region="originShieldRegion"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['behaviors', 'connection_attempts', 'connection_timeout', 'custom_origin_source', 'failover_criteria_status_codes', 'failover_custom_origin_source', 'failover_s3_origin_source', 'origin_shield_region', 's3_origin_source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.SourceConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.ViewerCertificateOptions
class ViewerCertificateOptionsDef(BaseStruct):
    aliases: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Domain names on the certificate (both main domain name and Subject Alternative names).')
    security_policy: typing.Optional[aws_cdk.aws_cloudfront.SecurityPolicyProtocol] = pydantic.Field(None, description='The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. CloudFront serves your objects only to browsers or devices that support at least the SSL version that you specify. Default: - SSLv3 if sslMethod VIP, TLSv1 if sslMethod SNI\n')
    ssl_method: typing.Optional[aws_cdk.aws_cloudfront.SSLMethod] = pydantic.Field(None, description='How CloudFront should serve HTTPS requests. See the notes on SSLMethod if you wish to use other SSL termination types. Default: SSLMethod.SNI\n\n:exampleMetadata: lit=aws-cloudfront/test/example.iam-cert-alias.lit.ts infused\n\nExample::\n\n    s3_bucket_source = s3.Bucket(self, "Bucket")\n\n    distribution = cloudfront.CloudFrontWebDistribution(self, "AnAmazingWebsiteProbably",\n        origin_configs=[cloudfront.aws_cloudfront.SourceConfiguration(\n            s3_origin_source=cloudfront.aws_cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n            behaviors=[cloudfront.aws_cloudfront.Behavior(is_default_behavior=True)]\n        )],\n        viewer_certificate=cloudfront.ViewerCertificate.from_iam_certificate("certificateId",\n            aliases=["example.com"],\n            security_policy=cloudfront.SecurityPolicyProtocol.SSL_V3,  # default\n            ssl_method=cloudfront.SSLMethod.SNI\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aliases', 'security_policy', 'ssl_method']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.ViewerCertificateOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CloudFrontAllowedCachedMethods
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.CloudFrontAllowedMethods
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.FailoverStatusCode
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.FunctionEventType
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.HeadersFrameOption
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.HeadersReferrerPolicy
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.HttpVersion
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.LambdaEdgeEventType
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.OriginProtocolPolicy
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.OriginSslPolicy
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.PriceClass
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.SecurityPolicyProtocol
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.SSLMethod
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.ViewerProtocolPolicy
# skipping emum

#  autogenerated from aws_cdk.aws_cloudfront.ICachePolicy
#  skipping Interface

#  autogenerated from aws_cdk.aws_cloudfront.IDistribution
#  skipping Interface

#  autogenerated from aws_cdk.aws_cloudfront.IFunction
#  skipping Interface

#  autogenerated from aws_cdk.aws_cloudfront.IKeyGroup
#  skipping Interface

#  autogenerated from aws_cdk.aws_cloudfront.IOrigin
#  skipping Interface

#  autogenerated from aws_cdk.aws_cloudfront.IOriginAccessIdentity
#  skipping Interface

#  autogenerated from aws_cdk.aws_cloudfront.IOriginRequestPolicy
#  skipping Interface

#  autogenerated from aws_cdk.aws_cloudfront.IPublicKey
#  skipping Interface

#  autogenerated from aws_cdk.aws_cloudfront.IResponseHeadersPolicy
#  skipping Interface

#  autogenerated from aws_cdk.aws_cloudfront.CfnCachePolicy
class CfnCachePolicyDef(BaseCfnResource):
    cache_policy_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_CachePolicyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The cache policy configuration.')
    _init_params: typing.ClassVar[list[str]] = ['cache_policy_config']
    _method_names: typing.ClassVar[list[str]] = ['CachePolicyConfigProperty', 'CookiesConfigProperty', 'HeadersConfigProperty', 'ParametersInCacheKeyAndForwardedToOriginProperty', 'QueryStringsConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCachePolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnCachePolicyDefConfig] = pydantic.Field(None)


class CfnCachePolicyDefConfig(pydantic.BaseModel):
    CachePolicyConfigProperty: typing.Optional[list[CfnCachePolicyDefCachepolicyconfigpropertyParams]] = pydantic.Field(None, description='')
    CookiesConfigProperty: typing.Optional[list[CfnCachePolicyDefCookiesconfigpropertyParams]] = pydantic.Field(None, description='')
    HeadersConfigProperty: typing.Optional[list[CfnCachePolicyDefHeadersconfigpropertyParams]] = pydantic.Field(None, description='')
    ParametersInCacheKeyAndForwardedToOriginProperty: typing.Optional[list[CfnCachePolicyDefParametersincachekeyandforwardedtooriginpropertyParams]] = pydantic.Field(None, description='')
    QueryStringsConfigProperty: typing.Optional[list[CfnCachePolicyDefQuerystringsconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnCachePolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnCachePolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnCachePolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnCachePolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnCachePolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnCachePolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnCachePolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnCachePolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnCachePolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnCachePolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnCachePolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnCachePolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnCachePolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnCachePolicyDefCachepolicyconfigpropertyParams(pydantic.BaseModel):
    default_ttl: typing.Union[int, float] = pydantic.Field(..., description='')
    max_ttl: typing.Union[int, float] = pydantic.Field(..., description='')
    min_ttl: typing.Union[int, float] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    parameters_in_cache_key_and_forwarded_to_origin: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_ParametersInCacheKeyAndForwardedToOriginPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    comment: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCachePolicyDefCookiesconfigpropertyParams(pydantic.BaseModel):
    cookie_behavior: str = pydantic.Field(..., description='')
    cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnCachePolicyDefHeadersconfigpropertyParams(pydantic.BaseModel):
    header_behavior: str = pydantic.Field(..., description='')
    headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnCachePolicyDefParametersincachekeyandforwardedtooriginpropertyParams(pydantic.BaseModel):
    cookies_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_CookiesConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enable_accept_encoding_gzip: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_HeadersConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    query_strings_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_QueryStringsConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enable_accept_encoding_brotli: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnCachePolicyDefQuerystringsconfigpropertyParams(pydantic.BaseModel):
    query_string_behavior: str = pydantic.Field(..., description='')
    query_strings: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnCachePolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCachePolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCachePolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCachePolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCachePolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCachePolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCachePolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCachePolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCachePolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCachePolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCachePolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnCachePolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCachePolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCachePolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnCloudFrontOriginAccessIdentity
class CfnCloudFrontOriginAccessIdentityDef(BaseCfnResource):
    cloud_front_origin_access_identity_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The current configuration information for the identity.')
    _init_params: typing.ClassVar[list[str]] = ['cloud_front_origin_access_identity_config']
    _method_names: typing.ClassVar[list[str]] = ['CloudFrontOriginAccessIdentityConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCloudFrontOriginAccessIdentity'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnCloudFrontOriginAccessIdentityDefConfig] = pydantic.Field(None)


class CfnCloudFrontOriginAccessIdentityDefConfig(pydantic.BaseModel):
    CloudFrontOriginAccessIdentityConfigProperty: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefCloudfrontoriginaccessidentityconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnCloudFrontOriginAccessIdentityDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnCloudFrontOriginAccessIdentityDefCloudfrontoriginaccessidentityconfigpropertyParams(pydantic.BaseModel):
    comment: str = pydantic.Field(..., description='')
    ...

class CfnCloudFrontOriginAccessIdentityDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCloudFrontOriginAccessIdentityDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCloudFrontOriginAccessIdentityDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCloudFrontOriginAccessIdentityDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCloudFrontOriginAccessIdentityDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCloudFrontOriginAccessIdentityDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCloudFrontOriginAccessIdentityDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCloudFrontOriginAccessIdentityDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCloudFrontOriginAccessIdentityDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCloudFrontOriginAccessIdentityDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCloudFrontOriginAccessIdentityDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnCloudFrontOriginAccessIdentityDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCloudFrontOriginAccessIdentityDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCloudFrontOriginAccessIdentityDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy
class CfnContinuousDeploymentPolicyDef(BaseCfnResource):
    continuous_deployment_policy_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_ContinuousDeploymentPolicyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains the configuration for a continuous deployment policy.')
    _init_params: typing.ClassVar[list[str]] = ['continuous_deployment_policy_config']
    _method_names: typing.ClassVar[list[str]] = ['ContinuousDeploymentPolicyConfigProperty', 'SessionStickinessConfigProperty', 'SingleHeaderConfigProperty', 'SingleWeightConfigProperty', 'TrafficConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnContinuousDeploymentPolicyDefConfig] = pydantic.Field(None)


class CfnContinuousDeploymentPolicyDefConfig(pydantic.BaseModel):
    ContinuousDeploymentPolicyConfigProperty: typing.Optional[list[CfnContinuousDeploymentPolicyDefContinuousdeploymentpolicyconfigpropertyParams]] = pydantic.Field(None, description='')
    SessionStickinessConfigProperty: typing.Optional[list[CfnContinuousDeploymentPolicyDefSessionstickinessconfigpropertyParams]] = pydantic.Field(None, description='')
    SingleHeaderConfigProperty: typing.Optional[list[CfnContinuousDeploymentPolicyDefSingleheaderconfigpropertyParams]] = pydantic.Field(None, description='')
    SingleWeightConfigProperty: typing.Optional[list[CfnContinuousDeploymentPolicyDefSingleweightconfigpropertyParams]] = pydantic.Field(None, description='')
    TrafficConfigProperty: typing.Optional[list[CfnContinuousDeploymentPolicyDefTrafficconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnContinuousDeploymentPolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnContinuousDeploymentPolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnContinuousDeploymentPolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnContinuousDeploymentPolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnContinuousDeploymentPolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnContinuousDeploymentPolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnContinuousDeploymentPolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnContinuousDeploymentPolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnContinuousDeploymentPolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnContinuousDeploymentPolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnContinuousDeploymentPolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnContinuousDeploymentPolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnContinuousDeploymentPolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnContinuousDeploymentPolicyDefContinuousdeploymentpolicyconfigpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    staging_distribution_dns_names: typing.Sequence[str] = pydantic.Field(..., description='')
    traffic_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_TrafficConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnContinuousDeploymentPolicyDefSessionstickinessconfigpropertyParams(pydantic.BaseModel):
    idle_ttl: typing.Union[int, float] = pydantic.Field(..., description='')
    maximum_ttl: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnContinuousDeploymentPolicyDefSingleheaderconfigpropertyParams(pydantic.BaseModel):
    header: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnContinuousDeploymentPolicyDefSingleweightconfigpropertyParams(pydantic.BaseModel):
    weight: typing.Union[int, float] = pydantic.Field(..., description='')
    session_stickiness_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_SessionStickinessConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnContinuousDeploymentPolicyDefTrafficconfigpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    single_header_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_SingleHeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    single_weight_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_SingleWeightConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnContinuousDeploymentPolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnContinuousDeploymentPolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContinuousDeploymentPolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnContinuousDeploymentPolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContinuousDeploymentPolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnContinuousDeploymentPolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnContinuousDeploymentPolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnContinuousDeploymentPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnContinuousDeploymentPolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnContinuousDeploymentPolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContinuousDeploymentPolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnContinuousDeploymentPolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnContinuousDeploymentPolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContinuousDeploymentPolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnDistribution
class CfnDistributionDef(BaseCfnResource):
    distribution_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_DistributionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description="The distribution's configuration.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A complex type that contains zero or more ``Tag`` elements.')
    _init_params: typing.ClassVar[list[str]] = ['distribution_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CacheBehaviorProperty', 'CookiesProperty', 'CustomErrorResponseProperty', 'CustomOriginConfigProperty', 'DefaultCacheBehaviorProperty', 'DistributionConfigProperty', 'ForwardedValuesProperty', 'FunctionAssociationProperty', 'GeoRestrictionProperty', 'LambdaFunctionAssociationProperty', 'LegacyCustomOriginProperty', 'LegacyS3OriginProperty', 'LoggingProperty', 'OriginCustomHeaderProperty', 'OriginGroupFailoverCriteriaProperty', 'OriginGroupMemberProperty', 'OriginGroupMembersProperty', 'OriginGroupProperty', 'OriginGroupsProperty', 'OriginProperty', 'OriginShieldProperty', 'RestrictionsProperty', 'S3OriginConfigProperty', 'StatusCodesProperty', 'ViewerCertificateProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistribution'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnDistributionDefConfig] = pydantic.Field(None)


class CfnDistributionDefConfig(pydantic.BaseModel):
    CacheBehaviorProperty: typing.Optional[list[CfnDistributionDefCachebehaviorpropertyParams]] = pydantic.Field(None, description='')
    CookiesProperty: typing.Optional[list[CfnDistributionDefCookiespropertyParams]] = pydantic.Field(None, description='')
    CustomErrorResponseProperty: typing.Optional[list[CfnDistributionDefCustomerrorresponsepropertyParams]] = pydantic.Field(None, description='')
    CustomOriginConfigProperty: typing.Optional[list[CfnDistributionDefCustomoriginconfigpropertyParams]] = pydantic.Field(None, description='')
    DefaultCacheBehaviorProperty: typing.Optional[list[CfnDistributionDefDefaultcachebehaviorpropertyParams]] = pydantic.Field(None, description='')
    DistributionConfigProperty: typing.Optional[list[CfnDistributionDefDistributionconfigpropertyParams]] = pydantic.Field(None, description='')
    ForwardedValuesProperty: typing.Optional[list[CfnDistributionDefForwardedvaluespropertyParams]] = pydantic.Field(None, description='')
    FunctionAssociationProperty: typing.Optional[list[CfnDistributionDefFunctionassociationpropertyParams]] = pydantic.Field(None, description='')
    GeoRestrictionProperty: typing.Optional[list[CfnDistributionDefGeorestrictionpropertyParams]] = pydantic.Field(None, description='')
    LambdaFunctionAssociationProperty: typing.Optional[list[CfnDistributionDefLambdafunctionassociationpropertyParams]] = pydantic.Field(None, description='')
    LegacyCustomOriginProperty: typing.Optional[list[CfnDistributionDefLegacycustomoriginpropertyParams]] = pydantic.Field(None, description='')
    LegacyS3OriginProperty: typing.Optional[list[CfnDistributionDefLegacys3OriginpropertyParams]] = pydantic.Field(None, description='')
    LoggingProperty: typing.Optional[list[CfnDistributionDefLoggingpropertyParams]] = pydantic.Field(None, description='')
    OriginCustomHeaderProperty: typing.Optional[list[CfnDistributionDefOrigincustomheaderpropertyParams]] = pydantic.Field(None, description='')
    OriginGroupFailoverCriteriaProperty: typing.Optional[list[CfnDistributionDefOrigingroupfailovercriteriapropertyParams]] = pydantic.Field(None, description='')
    OriginGroupMemberProperty: typing.Optional[list[CfnDistributionDefOrigingroupmemberpropertyParams]] = pydantic.Field(None, description='')
    OriginGroupMembersProperty: typing.Optional[list[CfnDistributionDefOrigingroupmemberspropertyParams]] = pydantic.Field(None, description='')
    OriginGroupProperty: typing.Optional[list[CfnDistributionDefOrigingrouppropertyParams]] = pydantic.Field(None, description='')
    OriginGroupsProperty: typing.Optional[list[CfnDistributionDefOrigingroupspropertyParams]] = pydantic.Field(None, description='')
    OriginProperty: typing.Optional[list[CfnDistributionDefOriginpropertyParams]] = pydantic.Field(None, description='')
    OriginShieldProperty: typing.Optional[list[CfnDistributionDefOriginshieldpropertyParams]] = pydantic.Field(None, description='')
    RestrictionsProperty: typing.Optional[list[CfnDistributionDefRestrictionspropertyParams]] = pydantic.Field(None, description='')
    S3OriginConfigProperty: typing.Optional[list[CfnDistributionDefS3OriginconfigpropertyParams]] = pydantic.Field(None, description='')
    StatusCodesProperty: typing.Optional[list[CfnDistributionDefStatuscodespropertyParams]] = pydantic.Field(None, description='')
    ViewerCertificateProperty: typing.Optional[list[CfnDistributionDefViewercertificatepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnDistributionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnDistributionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnDistributionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnDistributionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnDistributionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnDistributionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnDistributionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnDistributionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnDistributionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnDistributionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnDistributionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnDistributionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnDistributionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDistributionDefCachebehaviorpropertyParams(pydantic.BaseModel):
    path_pattern: str = pydantic.Field(..., description='')
    target_origin_id: str = pydantic.Field(..., description='')
    viewer_protocol_policy: str = pydantic.Field(..., description='')
    allowed_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    cached_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    cache_policy_id: typing.Optional[str] = pydantic.Field(None, description='')
    compress: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    default_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='')
    field_level_encryption_id: typing.Optional[str] = pydantic.Field(None, description='')
    forwarded_values: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_ForwardedValuesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    function_associations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_FunctionAssociationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    lambda_function_associations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LambdaFunctionAssociationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    max_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='')
    origin_request_policy_id: typing.Optional[str] = pydantic.Field(None, description='')
    realtime_log_config_arn: typing.Optional[str] = pydantic.Field(None, description='')
    response_headers_policy_id: typing.Optional[str] = pydantic.Field(None, description='')
    smooth_streaming: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    trusted_key_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    trusted_signers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefCookiespropertyParams(pydantic.BaseModel):
    forward: str = pydantic.Field(..., description='')
    whitelisted_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefCustomerrorresponsepropertyParams(pydantic.BaseModel):
    error_code: typing.Union[int, float] = pydantic.Field(..., description='')
    error_caching_min_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='')
    response_code: typing.Union[int, float, None] = pydantic.Field(None, description='')
    response_page_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefCustomoriginconfigpropertyParams(pydantic.BaseModel):
    origin_protocol_policy: str = pydantic.Field(..., description='')
    http_port: typing.Union[int, float, None] = pydantic.Field(None, description='')
    https_port: typing.Union[int, float, None] = pydantic.Field(None, description='')
    origin_keepalive_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    origin_read_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    origin_ssl_protocols: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefDefaultcachebehaviorpropertyParams(pydantic.BaseModel):
    target_origin_id: str = pydantic.Field(..., description='')
    viewer_protocol_policy: str = pydantic.Field(..., description='')
    allowed_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    cached_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    cache_policy_id: typing.Optional[str] = pydantic.Field(None, description='')
    compress: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    default_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='')
    field_level_encryption_id: typing.Optional[str] = pydantic.Field(None, description='')
    forwarded_values: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_ForwardedValuesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    function_associations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_FunctionAssociationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    lambda_function_associations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LambdaFunctionAssociationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    max_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_ttl: typing.Union[int, float, None] = pydantic.Field(None, description='')
    origin_request_policy_id: typing.Optional[str] = pydantic.Field(None, description='')
    realtime_log_config_arn: typing.Optional[str] = pydantic.Field(None, description='')
    response_headers_policy_id: typing.Optional[str] = pydantic.Field(None, description='')
    smooth_streaming: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    trusted_key_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    trusted_signers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefDistributionconfigpropertyParams(pydantic.BaseModel):
    default_cache_behavior: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_DefaultCacheBehaviorPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    aliases: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    cache_behaviors: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_CacheBehaviorPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    cnam_es: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    comment: typing.Optional[str] = pydantic.Field(None, description='')
    continuous_deployment_policy_id: typing.Optional[str] = pydantic.Field(None, description='')
    custom_error_responses: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_CustomErrorResponsePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    custom_origin: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LegacyCustomOriginPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_root_object: typing.Optional[str] = pydantic.Field(None, description='')
    http_version: typing.Optional[str] = pydantic.Field(None, description='')
    ipv6_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    logging: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LoggingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    origin_groups: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    origins: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    price_class: typing.Optional[str] = pydantic.Field(None, description='')
    restrictions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_RestrictionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_origin: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_LegacyS3OriginPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    staging: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    viewer_certificate: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_ViewerCertificatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    web_acl_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefForwardedvaluespropertyParams(pydantic.BaseModel):
    query_string: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    cookies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_CookiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    query_string_cache_keys: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefFunctionassociationpropertyParams(pydantic.BaseModel):
    event_type: typing.Optional[str] = pydantic.Field(None, description='')
    function_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefGeorestrictionpropertyParams(pydantic.BaseModel):
    restriction_type: str = pydantic.Field(..., description='')
    locations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefLambdafunctionassociationpropertyParams(pydantic.BaseModel):
    event_type: typing.Optional[str] = pydantic.Field(None, description='')
    include_body: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    lambda_function_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefLegacycustomoriginpropertyParams(pydantic.BaseModel):
    dns_name: str = pydantic.Field(..., description='')
    origin_protocol_policy: str = pydantic.Field(..., description='')
    origin_ssl_protocols: typing.Sequence[str] = pydantic.Field(..., description='')
    http_port: typing.Union[int, float, None] = pydantic.Field(None, description='')
    https_port: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefLegacys3OriginpropertyParams(pydantic.BaseModel):
    dns_name: str = pydantic.Field(..., description='')
    origin_access_identity: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefLoggingpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    include_cookies: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefOrigincustomheaderpropertyParams(pydantic.BaseModel):
    header_name: str = pydantic.Field(..., description='')
    header_value: str = pydantic.Field(..., description='')
    ...

class CfnDistributionDefOrigingroupfailovercriteriapropertyParams(pydantic.BaseModel):
    status_codes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_StatusCodesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnDistributionDefOrigingroupmemberpropertyParams(pydantic.BaseModel):
    origin_id: str = pydantic.Field(..., description='')
    ...

class CfnDistributionDefOrigingroupmemberspropertyParams(pydantic.BaseModel):
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupMemberPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    quantity: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnDistributionDefOrigingrouppropertyParams(pydantic.BaseModel):
    failover_criteria: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupFailoverCriteriaPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    id: str = pydantic.Field(..., description='')
    members: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupMembersPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnDistributionDefOrigingroupspropertyParams(pydantic.BaseModel):
    quantity: typing.Union[int, float] = pydantic.Field(..., description='')
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefOriginpropertyParams(pydantic.BaseModel):
    domain_name: str = pydantic.Field(..., description='')
    id: str = pydantic.Field(..., description='')
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='')
    connection_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    custom_origin_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_CustomOriginConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    origin_access_control_id: typing.Optional[str] = pydantic.Field(None, description='')
    origin_custom_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginCustomHeaderPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    origin_path: typing.Optional[str] = pydantic.Field(None, description='')
    origin_shield: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_OriginShieldPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_origin_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_S3OriginConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefOriginshieldpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefRestrictionspropertyParams(pydantic.BaseModel):
    geo_restriction: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_GeoRestrictionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnDistributionDefS3OriginconfigpropertyParams(pydantic.BaseModel):
    origin_access_identity: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefStatuscodespropertyParams(pydantic.BaseModel):
    items: typing.Union[typing.Sequence[typing.Union[int, float]], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    quantity: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnDistributionDefViewercertificatepropertyParams(pydantic.BaseModel):
    acm_certificate_arn: typing.Optional[str] = pydantic.Field(None, description='')
    cloud_front_default_certificate: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    iam_certificate_id: typing.Optional[str] = pydantic.Field(None, description='')
    minimum_protocol_version: typing.Optional[str] = pydantic.Field(None, description='')
    ssl_support_method: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDistributionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDistributionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDistributionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDistributionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDistributionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDistributionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDistributionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDistributionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDistributionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDistributionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDistributionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnDistributionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDistributionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDistributionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnFunction
class CfnFunctionDef(BaseCfnResource):
    function_code: str = pydantic.Field(..., description='The function code. For more information about writing a CloudFront function, see `Writing function code for CloudFront Functions <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    function_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnFunction_FunctionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains configuration information about a CloudFront function.\n')
    name: str = pydantic.Field(..., description='A name to identify the function.\n')
    auto_publish: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A flag that determines whether to automatically publish the function to the ``LIVE`` stage when it’s created. To automatically publish to the ``LIVE`` stage, set this property to ``true`` .\n')
    function_metadata: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnFunction_FunctionMetadataPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains metadata about a CloudFront function.')
    _init_params: typing.ClassVar[list[str]] = ['function_code', 'function_config', 'name', 'auto_publish', 'function_metadata']
    _method_names: typing.ClassVar[list[str]] = ['FunctionConfigProperty', 'FunctionMetadataProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnFunction'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnFunctionDefConfig] = pydantic.Field(None)


class CfnFunctionDefConfig(pydantic.BaseModel):
    FunctionConfigProperty: typing.Optional[list[CfnFunctionDefFunctionconfigpropertyParams]] = pydantic.Field(None, description='')
    FunctionMetadataProperty: typing.Optional[list[CfnFunctionDefFunctionmetadatapropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnFunctionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnFunctionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnFunctionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnFunctionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnFunctionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnFunctionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnFunctionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnFunctionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnFunctionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnFunctionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnFunctionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnFunctionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnFunctionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnFunctionDefFunctionconfigpropertyParams(pydantic.BaseModel):
    comment: str = pydantic.Field(..., description='')
    runtime: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefFunctionmetadatapropertyParams(pydantic.BaseModel):
    function_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFunctionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFunctionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFunctionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFunctionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFunctionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFunctionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFunctionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFunctionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFunctionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFunctionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnFunctionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFunctionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFunctionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnKeyGroup
class CfnKeyGroupDef(BaseCfnResource):
    key_group_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnKeyGroup_KeyGroupConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The key group configuration.')
    _init_params: typing.ClassVar[list[str]] = ['key_group_config']
    _method_names: typing.ClassVar[list[str]] = ['KeyGroupConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnKeyGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnKeyGroupDefConfig] = pydantic.Field(None)


class CfnKeyGroupDefConfig(pydantic.BaseModel):
    KeyGroupConfigProperty: typing.Optional[list[CfnKeyGroupDefKeygroupconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnKeyGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnKeyGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnKeyGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnKeyGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnKeyGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnKeyGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnKeyGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnKeyGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnKeyGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnKeyGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnKeyGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnKeyGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnKeyGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnKeyGroupDefKeygroupconfigpropertyParams(pydantic.BaseModel):
    items: typing.Sequence[str] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    comment: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnKeyGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnKeyGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnKeyGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnKeyGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnKeyGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnKeyGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnKeyGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnKeyGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnKeyGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnKeyGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnKeyGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnKeyGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnKeyGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnKeyGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnMonitoringSubscription
class CfnMonitoringSubscriptionDef(BaseCfnResource):
    distribution_id: str = pydantic.Field(..., description='The ID of the distribution that you are enabling metrics for.\n')
    monitoring_subscription: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnMonitoringSubscription_MonitoringSubscriptionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A subscription configuration for additional CloudWatch metrics.')
    _init_params: typing.ClassVar[list[str]] = ['distribution_id', 'monitoring_subscription']
    _method_names: typing.ClassVar[list[str]] = ['MonitoringSubscriptionProperty', 'RealtimeMetricsSubscriptionConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnMonitoringSubscription'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnMonitoringSubscriptionDefConfig] = pydantic.Field(None)


class CfnMonitoringSubscriptionDefConfig(pydantic.BaseModel):
    MonitoringSubscriptionProperty: typing.Optional[list[CfnMonitoringSubscriptionDefMonitoringsubscriptionpropertyParams]] = pydantic.Field(None, description='')
    RealtimeMetricsSubscriptionConfigProperty: typing.Optional[list[CfnMonitoringSubscriptionDefRealtimemetricssubscriptionconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnMonitoringSubscriptionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnMonitoringSubscriptionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnMonitoringSubscriptionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnMonitoringSubscriptionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnMonitoringSubscriptionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnMonitoringSubscriptionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnMonitoringSubscriptionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnMonitoringSubscriptionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnMonitoringSubscriptionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnMonitoringSubscriptionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnMonitoringSubscriptionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnMonitoringSubscriptionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnMonitoringSubscriptionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnMonitoringSubscriptionDefMonitoringsubscriptionpropertyParams(pydantic.BaseModel):
    realtime_metrics_subscription_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnMonitoringSubscription_RealtimeMetricsSubscriptionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMonitoringSubscriptionDefRealtimemetricssubscriptionconfigpropertyParams(pydantic.BaseModel):
    realtime_metrics_subscription_status: str = pydantic.Field(..., description='')
    ...

class CfnMonitoringSubscriptionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMonitoringSubscriptionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMonitoringSubscriptionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMonitoringSubscriptionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMonitoringSubscriptionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMonitoringSubscriptionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMonitoringSubscriptionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMonitoringSubscriptionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMonitoringSubscriptionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMonitoringSubscriptionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMonitoringSubscriptionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnMonitoringSubscriptionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMonitoringSubscriptionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMonitoringSubscriptionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnOriginAccessControl
class CfnOriginAccessControlDef(BaseCfnResource):
    origin_access_control_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginAccessControl_OriginAccessControlConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The origin access control.')
    _init_params: typing.ClassVar[list[str]] = ['origin_access_control_config']
    _method_names: typing.ClassVar[list[str]] = ['OriginAccessControlConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnOriginAccessControl'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnOriginAccessControlDefConfig] = pydantic.Field(None)


class CfnOriginAccessControlDefConfig(pydantic.BaseModel):
    OriginAccessControlConfigProperty: typing.Optional[list[CfnOriginAccessControlDefOriginaccesscontrolconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnOriginAccessControlDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnOriginAccessControlDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnOriginAccessControlDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnOriginAccessControlDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnOriginAccessControlDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnOriginAccessControlDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnOriginAccessControlDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnOriginAccessControlDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnOriginAccessControlDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnOriginAccessControlDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnOriginAccessControlDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnOriginAccessControlDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnOriginAccessControlDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnOriginAccessControlDefOriginaccesscontrolconfigpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    origin_access_control_origin_type: str = pydantic.Field(..., description='')
    signing_behavior: str = pydantic.Field(..., description='')
    signing_protocol: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginAccessControlDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnOriginAccessControlDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginAccessControlDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnOriginAccessControlDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginAccessControlDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnOriginAccessControlDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnOriginAccessControlDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnOriginAccessControlDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnOriginAccessControlDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnOriginAccessControlDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginAccessControlDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnOriginAccessControlDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnOriginAccessControlDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginAccessControlDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnOriginRequestPolicy
class CfnOriginRequestPolicyDef(BaseCfnResource):
    origin_request_policy_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginRequestPolicy_OriginRequestPolicyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The origin request policy configuration.')
    _init_params: typing.ClassVar[list[str]] = ['origin_request_policy_config']
    _method_names: typing.ClassVar[list[str]] = ['CookiesConfigProperty', 'HeadersConfigProperty', 'OriginRequestPolicyConfigProperty', 'QueryStringsConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnOriginRequestPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnOriginRequestPolicyDefConfig] = pydantic.Field(None)


class CfnOriginRequestPolicyDefConfig(pydantic.BaseModel):
    CookiesConfigProperty: typing.Optional[list[CfnOriginRequestPolicyDefCookiesconfigpropertyParams]] = pydantic.Field(None, description='')
    HeadersConfigProperty: typing.Optional[list[CfnOriginRequestPolicyDefHeadersconfigpropertyParams]] = pydantic.Field(None, description='')
    OriginRequestPolicyConfigProperty: typing.Optional[list[CfnOriginRequestPolicyDefOriginrequestpolicyconfigpropertyParams]] = pydantic.Field(None, description='')
    QueryStringsConfigProperty: typing.Optional[list[CfnOriginRequestPolicyDefQuerystringsconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnOriginRequestPolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnOriginRequestPolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnOriginRequestPolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnOriginRequestPolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnOriginRequestPolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnOriginRequestPolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnOriginRequestPolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnOriginRequestPolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnOriginRequestPolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnOriginRequestPolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnOriginRequestPolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnOriginRequestPolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnOriginRequestPolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnOriginRequestPolicyDefCookiesconfigpropertyParams(pydantic.BaseModel):
    cookie_behavior: str = pydantic.Field(..., description='')
    cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnOriginRequestPolicyDefHeadersconfigpropertyParams(pydantic.BaseModel):
    header_behavior: str = pydantic.Field(..., description='')
    headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnOriginRequestPolicyDefOriginrequestpolicyconfigpropertyParams(pydantic.BaseModel):
    cookies_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginRequestPolicy_CookiesConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginRequestPolicy_HeadersConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    query_strings_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginRequestPolicy_QueryStringsConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    comment: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginRequestPolicyDefQuerystringsconfigpropertyParams(pydantic.BaseModel):
    query_string_behavior: str = pydantic.Field(..., description='')
    query_strings: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnOriginRequestPolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnOriginRequestPolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginRequestPolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnOriginRequestPolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginRequestPolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnOriginRequestPolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnOriginRequestPolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnOriginRequestPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnOriginRequestPolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnOriginRequestPolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginRequestPolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnOriginRequestPolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnOriginRequestPolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginRequestPolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnPublicKey
class CfnPublicKeyDef(BaseCfnResource):
    public_key_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnPublicKey_PublicKeyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configuration information about a public key that you can use with `signed URLs and signed cookies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html>`_ , or with `field-level encryption <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['public_key_config']
    _method_names: typing.ClassVar[list[str]] = ['PublicKeyConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnPublicKey'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPublicKeyDefConfig] = pydantic.Field(None)


class CfnPublicKeyDefConfig(pydantic.BaseModel):
    PublicKeyConfigProperty: typing.Optional[list[CfnPublicKeyDefPublickeyconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnPublicKeyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPublicKeyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPublicKeyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPublicKeyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPublicKeyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPublicKeyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPublicKeyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPublicKeyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPublicKeyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPublicKeyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPublicKeyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPublicKeyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPublicKeyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnPublicKeyDefPublickeyconfigpropertyParams(pydantic.BaseModel):
    caller_reference: str = pydantic.Field(..., description='')
    encoded_key: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    comment: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPublicKeyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPublicKeyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPublicKeyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPublicKeyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPublicKeyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPublicKeyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPublicKeyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPublicKeyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPublicKeyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPublicKeyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPublicKeyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnPublicKeyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPublicKeyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPublicKeyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnRealtimeLogConfig
class CfnRealtimeLogConfigDef(BaseCfnResource):
    end_points: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnRealtimeLogConfig_EndPointPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.\n')
    fields: typing.Sequence[str] = pydantic.Field(..., description='A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream. For more information about fields, see `Real-time log configuration fields <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields>`_ in the *Amazon CloudFront Developer Guide* .\n')
    name: str = pydantic.Field(..., description='The unique name of this real-time log configuration.\n')
    sampling_rate: typing.Union[int, float] = pydantic.Field(..., description='The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.')
    _init_params: typing.ClassVar[list[str]] = ['end_points', 'fields', 'name', 'sampling_rate']
    _method_names: typing.ClassVar[list[str]] = ['EndPointProperty', 'KinesisStreamConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnRealtimeLogConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnRealtimeLogConfigDefConfig] = pydantic.Field(None)


class CfnRealtimeLogConfigDefConfig(pydantic.BaseModel):
    EndPointProperty: typing.Optional[list[CfnRealtimeLogConfigDefEndpointpropertyParams]] = pydantic.Field(None, description='')
    KinesisStreamConfigProperty: typing.Optional[list[CfnRealtimeLogConfigDefKinesisstreamconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnRealtimeLogConfigDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnRealtimeLogConfigDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnRealtimeLogConfigDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnRealtimeLogConfigDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnRealtimeLogConfigDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnRealtimeLogConfigDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnRealtimeLogConfigDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnRealtimeLogConfigDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnRealtimeLogConfigDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnRealtimeLogConfigDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnRealtimeLogConfigDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnRealtimeLogConfigDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnRealtimeLogConfigDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnRealtimeLogConfigDefEndpointpropertyParams(pydantic.BaseModel):
    kinesis_stream_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnRealtimeLogConfig_KinesisStreamConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    stream_type: str = pydantic.Field(..., description='')
    ...

class CfnRealtimeLogConfigDefKinesisstreamconfigpropertyParams(pydantic.BaseModel):
    role_arn: str = pydantic.Field(..., description='')
    stream_arn: str = pydantic.Field(..., description='')
    ...

class CfnRealtimeLogConfigDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRealtimeLogConfigDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRealtimeLogConfigDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRealtimeLogConfigDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRealtimeLogConfigDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRealtimeLogConfigDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRealtimeLogConfigDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRealtimeLogConfigDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRealtimeLogConfigDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRealtimeLogConfigDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRealtimeLogConfigDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnRealtimeLogConfigDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRealtimeLogConfigDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRealtimeLogConfigDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy
class CfnResponseHeadersPolicyDef(BaseCfnResource):
    response_headers_policy_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ResponseHeadersPolicyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A response headers policy configuration.')
    _init_params: typing.ClassVar[list[str]] = ['response_headers_policy_config']
    _method_names: typing.ClassVar[list[str]] = ['AccessControlAllowHeadersProperty', 'AccessControlAllowMethodsProperty', 'AccessControlAllowOriginsProperty', 'AccessControlExposeHeadersProperty', 'ContentSecurityPolicyProperty', 'ContentTypeOptionsProperty', 'CorsConfigProperty', 'CustomHeaderProperty', 'CustomHeadersConfigProperty', 'FrameOptionsProperty', 'ReferrerPolicyProperty', 'RemoveHeaderProperty', 'RemoveHeadersConfigProperty', 'ResponseHeadersPolicyConfigProperty', 'SecurityHeadersConfigProperty', 'ServerTimingHeadersConfigProperty', 'StrictTransportSecurityProperty', 'XSSProtectionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnResponseHeadersPolicyDefConfig] = pydantic.Field(None)


class CfnResponseHeadersPolicyDefConfig(pydantic.BaseModel):
    AccessControlAllowHeadersProperty: typing.Optional[list[CfnResponseHeadersPolicyDefAccesscontrolallowheaderspropertyParams]] = pydantic.Field(None, description='')
    AccessControlAllowMethodsProperty: typing.Optional[list[CfnResponseHeadersPolicyDefAccesscontrolallowmethodspropertyParams]] = pydantic.Field(None, description='')
    AccessControlAllowOriginsProperty: typing.Optional[list[CfnResponseHeadersPolicyDefAccesscontrolalloworiginspropertyParams]] = pydantic.Field(None, description='')
    AccessControlExposeHeadersProperty: typing.Optional[list[CfnResponseHeadersPolicyDefAccesscontrolexposeheaderspropertyParams]] = pydantic.Field(None, description='')
    ContentSecurityPolicyProperty: typing.Optional[list[CfnResponseHeadersPolicyDefContentsecuritypolicypropertyParams]] = pydantic.Field(None, description='')
    ContentTypeOptionsProperty: typing.Optional[list[CfnResponseHeadersPolicyDefContenttypeoptionspropertyParams]] = pydantic.Field(None, description='')
    CorsConfigProperty: typing.Optional[list[CfnResponseHeadersPolicyDefCorsconfigpropertyParams]] = pydantic.Field(None, description='')
    CustomHeaderProperty: typing.Optional[list[CfnResponseHeadersPolicyDefCustomheaderpropertyParams]] = pydantic.Field(None, description='')
    CustomHeadersConfigProperty: typing.Optional[list[CfnResponseHeadersPolicyDefCustomheadersconfigpropertyParams]] = pydantic.Field(None, description='')
    FrameOptionsProperty: typing.Optional[list[CfnResponseHeadersPolicyDefFrameoptionspropertyParams]] = pydantic.Field(None, description='')
    ReferrerPolicyProperty: typing.Optional[list[CfnResponseHeadersPolicyDefReferrerpolicypropertyParams]] = pydantic.Field(None, description='')
    RemoveHeaderProperty: typing.Optional[list[CfnResponseHeadersPolicyDefRemoveheaderpropertyParams]] = pydantic.Field(None, description='')
    RemoveHeadersConfigProperty: typing.Optional[list[CfnResponseHeadersPolicyDefRemoveheadersconfigpropertyParams]] = pydantic.Field(None, description='')
    ResponseHeadersPolicyConfigProperty: typing.Optional[list[CfnResponseHeadersPolicyDefResponseheaderspolicyconfigpropertyParams]] = pydantic.Field(None, description='')
    SecurityHeadersConfigProperty: typing.Optional[list[CfnResponseHeadersPolicyDefSecurityheadersconfigpropertyParams]] = pydantic.Field(None, description='')
    ServerTimingHeadersConfigProperty: typing.Optional[list[CfnResponseHeadersPolicyDefServertimingheadersconfigpropertyParams]] = pydantic.Field(None, description='')
    StrictTransportSecurityProperty: typing.Optional[list[CfnResponseHeadersPolicyDefStricttransportsecuritypropertyParams]] = pydantic.Field(None, description='')
    XSSProtectionProperty: typing.Optional[list[CfnResponseHeadersPolicyDefXssprotectionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnResponseHeadersPolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnResponseHeadersPolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnResponseHeadersPolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnResponseHeadersPolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnResponseHeadersPolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnResponseHeadersPolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnResponseHeadersPolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnResponseHeadersPolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnResponseHeadersPolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnResponseHeadersPolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnResponseHeadersPolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnResponseHeadersPolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnResponseHeadersPolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnResponseHeadersPolicyDefAccesscontrolallowheaderspropertyParams(pydantic.BaseModel):
    items: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefAccesscontrolallowmethodspropertyParams(pydantic.BaseModel):
    items: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefAccesscontrolalloworiginspropertyParams(pydantic.BaseModel):
    items: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefAccesscontrolexposeheaderspropertyParams(pydantic.BaseModel):
    items: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefContentsecuritypolicypropertyParams(pydantic.BaseModel):
    content_security_policy: str = pydantic.Field(..., description='')
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefContenttypeoptionspropertyParams(pydantic.BaseModel):
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefCorsconfigpropertyParams(pydantic.BaseModel):
    access_control_allow_credentials: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    access_control_allow_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_AccessControlAllowHeadersPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    access_control_allow_methods: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_AccessControlAllowMethodsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    access_control_allow_origins: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_AccessControlAllowOriginsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    origin_override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    access_control_expose_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_AccessControlExposeHeadersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    access_control_max_age_sec: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnResponseHeadersPolicyDefCustomheaderpropertyParams(pydantic.BaseModel):
    header: str = pydantic.Field(..., description='')
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefCustomheadersconfigpropertyParams(pydantic.BaseModel):
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_CustomHeaderPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefFrameoptionspropertyParams(pydantic.BaseModel):
    frame_option: str = pydantic.Field(..., description='')
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefReferrerpolicypropertyParams(pydantic.BaseModel):
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    referrer_policy: str = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefRemoveheaderpropertyParams(pydantic.BaseModel):
    header: str = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefRemoveheadersconfigpropertyParams(pydantic.BaseModel):
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_RemoveHeaderPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnResponseHeadersPolicyDefResponseheaderspolicyconfigpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    comment: typing.Optional[str] = pydantic.Field(None, description='')
    cors_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_CorsConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    custom_headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_CustomHeadersConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    remove_headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_RemoveHeadersConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_SecurityHeadersConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    server_timing_headers_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ServerTimingHeadersConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnResponseHeadersPolicyDefSecurityheadersconfigpropertyParams(pydantic.BaseModel):
    content_security_policy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ContentSecurityPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    content_type_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ContentTypeOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    frame_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_FrameOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    referrer_policy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ReferrerPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    strict_transport_security: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_StrictTransportSecurityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    xss_protection: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_XSSProtectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnResponseHeadersPolicyDefServertimingheadersconfigpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    sampling_rate: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnResponseHeadersPolicyDefStricttransportsecuritypropertyParams(pydantic.BaseModel):
    access_control_max_age_sec: typing.Union[int, float] = pydantic.Field(..., description='')
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    include_subdomains: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    preload: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnResponseHeadersPolicyDefXssprotectionpropertyParams(pydantic.BaseModel):
    override: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    protection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    mode_block: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    report_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnResponseHeadersPolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnResponseHeadersPolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnResponseHeadersPolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnResponseHeadersPolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnResponseHeadersPolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnResponseHeadersPolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnResponseHeadersPolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnResponseHeadersPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnResponseHeadersPolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnResponseHeadersPolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnResponseHeadersPolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnResponseHeadersPolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnResponseHeadersPolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnResponseHeadersPolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnStreamingDistribution
class CfnStreamingDistributionDef(BaseCfnResource):
    streaming_distribution_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnStreamingDistribution_StreamingDistributionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The current configuration information for the RTMP distribution.\n')
    tags: typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]] = pydantic.Field(..., description='A complex type that contains zero or more ``Tag`` elements.')
    _init_params: typing.ClassVar[list[str]] = ['streaming_distribution_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['LoggingProperty', 'S3OriginProperty', 'StreamingDistributionConfigProperty', 'TrustedSignersProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnStreamingDistribution'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnStreamingDistributionDefConfig] = pydantic.Field(None)


class CfnStreamingDistributionDefConfig(pydantic.BaseModel):
    LoggingProperty: typing.Optional[list[CfnStreamingDistributionDefLoggingpropertyParams]] = pydantic.Field(None, description='')
    S3OriginProperty: typing.Optional[list[CfnStreamingDistributionDefS3OriginpropertyParams]] = pydantic.Field(None, description='')
    StreamingDistributionConfigProperty: typing.Optional[list[CfnStreamingDistributionDefStreamingdistributionconfigpropertyParams]] = pydantic.Field(None, description='')
    TrustedSignersProperty: typing.Optional[list[CfnStreamingDistributionDefTrustedsignerspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnStreamingDistributionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnStreamingDistributionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnStreamingDistributionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnStreamingDistributionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnStreamingDistributionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnStreamingDistributionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnStreamingDistributionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnStreamingDistributionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnStreamingDistributionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnStreamingDistributionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnStreamingDistributionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnStreamingDistributionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnStreamingDistributionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnStreamingDistributionDefLoggingpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    prefix: str = pydantic.Field(..., description='')
    ...

class CfnStreamingDistributionDefS3OriginpropertyParams(pydantic.BaseModel):
    domain_name: str = pydantic.Field(..., description='')
    origin_access_identity: str = pydantic.Field(..., description='')
    ...

class CfnStreamingDistributionDefStreamingdistributionconfigpropertyParams(pydantic.BaseModel):
    comment: str = pydantic.Field(..., description='')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    s3_origin: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnStreamingDistribution_S3OriginPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    trusted_signers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnStreamingDistribution_TrustedSignersPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    aliases: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    logging: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnStreamingDistribution_LoggingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    price_class: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStreamingDistributionDefTrustedsignerspropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    aws_account_numbers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnStreamingDistributionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStreamingDistributionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStreamingDistributionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStreamingDistributionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStreamingDistributionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStreamingDistributionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStreamingDistributionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStreamingDistributionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStreamingDistributionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStreamingDistributionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStreamingDistributionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnStreamingDistributionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStreamingDistributionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStreamingDistributionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront.CfnCachePolicyProps
class CfnCachePolicyPropsDef(BaseCfnProperty):
    cache_policy_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCachePolicy_CachePolicyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The cache policy configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-cachepolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_cache_policy_props = cloudfront.CfnCachePolicyProps(\n        cache_policy_config=cloudfront.CfnCachePolicy.CachePolicyConfigProperty(\n            default_ttl=123,\n            max_ttl=123,\n            min_ttl=123,\n            name="name",\n            parameters_in_cache_key_and_forwarded_to_origin=cloudfront.CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty(\n                cookies_config=cloudfront.CfnCachePolicy.CookiesConfigProperty(\n                    cookie_behavior="cookieBehavior",\n\n                    # the properties below are optional\n                    cookies=["cookies"]\n                ),\n                enable_accept_encoding_gzip=False,\n                headers_config=cloudfront.CfnCachePolicy.HeadersConfigProperty(\n                    header_behavior="headerBehavior",\n\n                    # the properties below are optional\n                    headers=["headers"]\n                ),\n                query_strings_config=cloudfront.CfnCachePolicy.QueryStringsConfigProperty(\n                    query_string_behavior="queryStringBehavior",\n\n                    # the properties below are optional\n                    query_strings=["queryStrings"]\n                ),\n\n                # the properties below are optional\n                enable_accept_encoding_brotli=False\n            ),\n\n            # the properties below are optional\n            comment="comment"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cache_policy_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCachePolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnCloudFrontOriginAccessIdentityProps
class CfnCloudFrontOriginAccessIdentityPropsDef(BaseCfnProperty):
    cloud_front_origin_access_identity_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnCloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The current configuration information for the identity.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-cloudfrontoriginaccessidentity.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_cloud_front_origin_access_identity_props = cloudfront.CfnCloudFrontOriginAccessIdentityProps(\n        cloud_front_origin_access_identity_config=cloudfront.CfnCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfigProperty(\n            comment="comment"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_front_origin_access_identity_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnCloudFrontOriginAccessIdentityProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicyProps
class CfnContinuousDeploymentPolicyPropsDef(BaseCfnProperty):
    continuous_deployment_policy_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnContinuousDeploymentPolicy_ContinuousDeploymentPolicyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains the configuration for a continuous deployment policy.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-continuousdeploymentpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_continuous_deployment_policy_props = cloudfront.CfnContinuousDeploymentPolicyProps(\n        continuous_deployment_policy_config=cloudfront.CfnContinuousDeploymentPolicy.ContinuousDeploymentPolicyConfigProperty(\n            enabled=False,\n            staging_distribution_dns_names=["stagingDistributionDnsNames"],\n\n            # the properties below are optional\n            traffic_config=cloudfront.CfnContinuousDeploymentPolicy.TrafficConfigProperty(\n                type="type",\n\n                # the properties below are optional\n                single_header_config=cloudfront.CfnContinuousDeploymentPolicy.SingleHeaderConfigProperty(\n                    header="header",\n                    value="value"\n                ),\n                single_weight_config=cloudfront.CfnContinuousDeploymentPolicy.SingleWeightConfigProperty(\n                    weight=123,\n\n                    # the properties below are optional\n                    session_stickiness_config=cloudfront.CfnContinuousDeploymentPolicy.SessionStickinessConfigProperty(\n                        idle_ttl=123,\n                        maximum_ttl=123\n                    )\n                )\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['continuous_deployment_policy_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnContinuousDeploymentPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnDistributionProps
class CfnDistributionPropsDef(BaseCfnProperty):
    distribution_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnDistribution_DistributionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description="The distribution's configuration.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A complex type that contains zero or more ``Tag`` elements.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_distribution_props = cloudfront.CfnDistributionProps(\n        distribution_config=cloudfront.CfnDistribution.DistributionConfigProperty(\n            default_cache_behavior=cloudfront.CfnDistribution.DefaultCacheBehaviorProperty(\n                target_origin_id="targetOriginId",\n                viewer_protocol_policy="viewerProtocolPolicy",\n\n                # the properties below are optional\n                allowed_methods=["allowedMethods"],\n                cached_methods=["cachedMethods"],\n                cache_policy_id="cachePolicyId",\n                compress=False,\n                default_ttl=123,\n                field_level_encryption_id="fieldLevelEncryptionId",\n                forwarded_values=cloudfront.CfnDistribution.ForwardedValuesProperty(\n                    query_string=False,\n\n                    # the properties below are optional\n                    cookies=cloudfront.CfnDistribution.CookiesProperty(\n                        forward="forward",\n\n                        # the properties below are optional\n                        whitelisted_names=["whitelistedNames"]\n                    ),\n                    headers=["headers"],\n                    query_string_cache_keys=["queryStringCacheKeys"]\n                ),\n                function_associations=[cloudfront.CfnDistribution.FunctionAssociationProperty(\n                    event_type="eventType",\n                    function_arn="functionArn"\n                )],\n                lambda_function_associations=[cloudfront.CfnDistribution.LambdaFunctionAssociationProperty(\n                    event_type="eventType",\n                    include_body=False,\n                    lambda_function_arn="lambdaFunctionArn"\n                )],\n                max_ttl=123,\n                min_ttl=123,\n                origin_request_policy_id="originRequestPolicyId",\n                realtime_log_config_arn="realtimeLogConfigArn",\n                response_headers_policy_id="responseHeadersPolicyId",\n                smooth_streaming=False,\n                trusted_key_groups=["trustedKeyGroups"],\n                trusted_signers=["trustedSigners"]\n            ),\n            enabled=False,\n\n            # the properties below are optional\n            aliases=["aliases"],\n            cache_behaviors=[cloudfront.CfnDistribution.CacheBehaviorProperty(\n                path_pattern="pathPattern",\n                target_origin_id="targetOriginId",\n                viewer_protocol_policy="viewerProtocolPolicy",\n\n                # the properties below are optional\n                allowed_methods=["allowedMethods"],\n                cached_methods=["cachedMethods"],\n                cache_policy_id="cachePolicyId",\n                compress=False,\n                default_ttl=123,\n                field_level_encryption_id="fieldLevelEncryptionId",\n                forwarded_values=cloudfront.CfnDistribution.ForwardedValuesProperty(\n                    query_string=False,\n\n                    # the properties below are optional\n                    cookies=cloudfront.CfnDistribution.CookiesProperty(\n                        forward="forward",\n\n                        # the properties below are optional\n                        whitelisted_names=["whitelistedNames"]\n                    ),\n                    headers=["headers"],\n                    query_string_cache_keys=["queryStringCacheKeys"]\n                ),\n                function_associations=[cloudfront.CfnDistribution.FunctionAssociationProperty(\n                    event_type="eventType",\n                    function_arn="functionArn"\n                )],\n                lambda_function_associations=[cloudfront.CfnDistribution.LambdaFunctionAssociationProperty(\n                    event_type="eventType",\n                    include_body=False,\n                    lambda_function_arn="lambdaFunctionArn"\n                )],\n                max_ttl=123,\n                min_ttl=123,\n                origin_request_policy_id="originRequestPolicyId",\n                realtime_log_config_arn="realtimeLogConfigArn",\n                response_headers_policy_id="responseHeadersPolicyId",\n                smooth_streaming=False,\n                trusted_key_groups=["trustedKeyGroups"],\n                trusted_signers=["trustedSigners"]\n            )],\n            cnam_es=["cnamEs"],\n            comment="comment",\n            continuous_deployment_policy_id="continuousDeploymentPolicyId",\n            custom_error_responses=[cloudfront.CfnDistribution.CustomErrorResponseProperty(\n                error_code=123,\n\n                # the properties below are optional\n                error_caching_min_ttl=123,\n                response_code=123,\n                response_page_path="responsePagePath"\n            )],\n            custom_origin=cloudfront.CfnDistribution.LegacyCustomOriginProperty(\n                dns_name="dnsName",\n                origin_protocol_policy="originProtocolPolicy",\n                origin_ssl_protocols=["originSslProtocols"],\n\n                # the properties below are optional\n                http_port=123,\n                https_port=123\n            ),\n            default_root_object="defaultRootObject",\n            http_version="httpVersion",\n            ipv6_enabled=False,\n            logging=cloudfront.CfnDistribution.LoggingProperty(\n                bucket="bucket",\n\n                # the properties below are optional\n                include_cookies=False,\n                prefix="prefix"\n            ),\n            origin_groups=cloudfront.CfnDistribution.OriginGroupsProperty(\n                quantity=123,\n\n                # the properties below are optional\n                items=[cloudfront.CfnDistribution.OriginGroupProperty(\n                    failover_criteria=cloudfront.CfnDistribution.OriginGroupFailoverCriteriaProperty(\n                        status_codes=cloudfront.CfnDistribution.StatusCodesProperty(\n                            items=[123],\n                            quantity=123\n                        )\n                    ),\n                    id="id",\n                    members=cloudfront.CfnDistribution.OriginGroupMembersProperty(\n                        items=[cloudfront.CfnDistribution.OriginGroupMemberProperty(\n                            origin_id="originId"\n                        )],\n                        quantity=123\n                    )\n                )]\n            ),\n            origins=[cloudfront.CfnDistribution.OriginProperty(\n                domain_name="domainName",\n                id="id",\n\n                # the properties below are optional\n                connection_attempts=123,\n                connection_timeout=123,\n                custom_origin_config=cloudfront.CfnDistribution.CustomOriginConfigProperty(\n                    origin_protocol_policy="originProtocolPolicy",\n\n                    # the properties below are optional\n                    http_port=123,\n                    https_port=123,\n                    origin_keepalive_timeout=123,\n                    origin_read_timeout=123,\n                    origin_ssl_protocols=["originSslProtocols"]\n                ),\n                origin_access_control_id="originAccessControlId",\n                origin_custom_headers=[cloudfront.CfnDistribution.OriginCustomHeaderProperty(\n                    header_name="headerName",\n                    header_value="headerValue"\n                )],\n                origin_path="originPath",\n                origin_shield=cloudfront.CfnDistribution.OriginShieldProperty(\n                    enabled=False,\n                    origin_shield_region="originShieldRegion"\n                ),\n                s3_origin_config=cloudfront.CfnDistribution.S3OriginConfigProperty(\n                    origin_access_identity="originAccessIdentity"\n                )\n            )],\n            price_class="priceClass",\n            restrictions=cloudfront.CfnDistribution.RestrictionsProperty(\n                geo_restriction=cloudfront.CfnDistribution.GeoRestrictionProperty(\n                    restriction_type="restrictionType",\n\n                    # the properties below are optional\n                    locations=["locations"]\n                )\n            ),\n            s3_origin=cloudfront.CfnDistribution.LegacyS3OriginProperty(\n                dns_name="dnsName",\n\n                # the properties below are optional\n                origin_access_identity="originAccessIdentity"\n            ),\n            staging=False,\n            viewer_certificate=cloudfront.CfnDistribution.ViewerCertificateProperty(\n                acm_certificate_arn="acmCertificateArn",\n                cloud_front_default_certificate=False,\n                iam_certificate_id="iamCertificateId",\n                minimum_protocol_version="minimumProtocolVersion",\n                ssl_support_method="sslSupportMethod"\n            ),\n            web_acl_id="webAclId"\n        ),\n\n        # the properties below are optional\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['distribution_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnDistributionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnFunctionProps
class CfnFunctionPropsDef(BaseCfnProperty):
    function_code: str = pydantic.Field(..., description='The function code. For more information about writing a CloudFront function, see `Writing function code for CloudFront Functions <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html>`_ in the *Amazon CloudFront Developer Guide* .\n')
    function_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnFunction_FunctionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains configuration information about a CloudFront function.\n')
    name: str = pydantic.Field(..., description='A name to identify the function.\n')
    auto_publish: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='A flag that determines whether to automatically publish the function to the ``LIVE`` stage when it’s created. To automatically publish to the ``LIVE`` stage, set this property to ``true`` .\n')
    function_metadata: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnFunction_FunctionMetadataPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains metadata about a CloudFront function.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-function.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_function_props = cloudfront.CfnFunctionProps(\n        function_code="functionCode",\n        function_config=cloudfront.CfnFunction.FunctionConfigProperty(\n            comment="comment",\n            runtime="runtime"\n        ),\n        name="name",\n\n        # the properties below are optional\n        auto_publish=False,\n        function_metadata=cloudfront.CfnFunction.FunctionMetadataProperty(\n            function_arn="functionArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['function_code', 'function_config', 'name', 'auto_publish', 'function_metadata']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnFunctionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnKeyGroupProps
class CfnKeyGroupPropsDef(BaseCfnProperty):
    key_group_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnKeyGroup_KeyGroupConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The key group configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-keygroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_key_group_props = cloudfront.CfnKeyGroupProps(\n        key_group_config=cloudfront.CfnKeyGroup.KeyGroupConfigProperty(\n            items=["items"],\n            name="name",\n\n            # the properties below are optional\n            comment="comment"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_group_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnKeyGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnMonitoringSubscriptionProps
class CfnMonitoringSubscriptionPropsDef(BaseCfnProperty):
    distribution_id: str = pydantic.Field(..., description='The ID of the distribution that you are enabling metrics for.\n')
    monitoring_subscription: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnMonitoringSubscription_MonitoringSubscriptionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A subscription configuration for additional CloudWatch metrics.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-monitoringsubscription.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_monitoring_subscription_props = cloudfront.CfnMonitoringSubscriptionProps(\n        distribution_id="distributionId",\n        monitoring_subscription=cloudfront.CfnMonitoringSubscription.MonitoringSubscriptionProperty(\n            realtime_metrics_subscription_config=cloudfront.CfnMonitoringSubscription.RealtimeMetricsSubscriptionConfigProperty(\n                realtime_metrics_subscription_status="realtimeMetricsSubscriptionStatus"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['distribution_id', 'monitoring_subscription']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnMonitoringSubscriptionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnOriginAccessControlProps
class CfnOriginAccessControlPropsDef(BaseCfnProperty):
    origin_access_control_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginAccessControl_OriginAccessControlConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The origin access control.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-originaccesscontrol.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_origin_access_control_props = cloudfront.CfnOriginAccessControlProps(\n        origin_access_control_config=cloudfront.CfnOriginAccessControl.OriginAccessControlConfigProperty(\n            name="name",\n            origin_access_control_origin_type="originAccessControlOriginType",\n            signing_behavior="signingBehavior",\n            signing_protocol="signingProtocol",\n\n            # the properties below are optional\n            description="description"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['origin_access_control_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnOriginAccessControlProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnOriginRequestPolicyProps
class CfnOriginRequestPolicyPropsDef(BaseCfnProperty):
    origin_request_policy_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnOriginRequestPolicy_OriginRequestPolicyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The origin request policy configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-originrequestpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_origin_request_policy_props = cloudfront.CfnOriginRequestPolicyProps(\n        origin_request_policy_config=cloudfront.CfnOriginRequestPolicy.OriginRequestPolicyConfigProperty(\n            cookies_config=cloudfront.CfnOriginRequestPolicy.CookiesConfigProperty(\n                cookie_behavior="cookieBehavior",\n\n                # the properties below are optional\n                cookies=["cookies"]\n            ),\n            headers_config=cloudfront.CfnOriginRequestPolicy.HeadersConfigProperty(\n                header_behavior="headerBehavior",\n\n                # the properties below are optional\n                headers=["headers"]\n            ),\n            name="name",\n            query_strings_config=cloudfront.CfnOriginRequestPolicy.QueryStringsConfigProperty(\n                query_string_behavior="queryStringBehavior",\n\n                # the properties below are optional\n                query_strings=["queryStrings"]\n            ),\n\n            # the properties below are optional\n            comment="comment"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['origin_request_policy_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnOriginRequestPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnPublicKeyProps
class CfnPublicKeyPropsDef(BaseCfnProperty):
    public_key_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnPublicKey_PublicKeyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configuration information about a public key that you can use with `signed URLs and signed cookies <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html>`_ , or with `field-level encryption <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-publickey.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_public_key_props = cloudfront.CfnPublicKeyProps(\n        public_key_config=cloudfront.CfnPublicKey.PublicKeyConfigProperty(\n            caller_reference="callerReference",\n            encoded_key="encodedKey",\n            name="name",\n\n            # the properties below are optional\n            comment="comment"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['public_key_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnPublicKeyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnRealtimeLogConfigProps
class CfnRealtimeLogConfigPropsDef(BaseCfnProperty):
    end_points: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnRealtimeLogConfig_EndPointPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.\n')
    fields: typing.Sequence[str] = pydantic.Field(..., description='A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream. For more information about fields, see `Real-time log configuration fields <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields>`_ in the *Amazon CloudFront Developer Guide* .\n')
    name: str = pydantic.Field(..., description='The unique name of this real-time log configuration.\n')
    sampling_rate: typing.Union[int, float] = pydantic.Field(..., description='The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-realtimelogconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_realtime_log_config_props = cloudfront.CfnRealtimeLogConfigProps(\n        end_points=[cloudfront.CfnRealtimeLogConfig.EndPointProperty(\n            kinesis_stream_config=cloudfront.CfnRealtimeLogConfig.KinesisStreamConfigProperty(\n                role_arn="roleArn",\n                stream_arn="streamArn"\n            ),\n            stream_type="streamType"\n        )],\n        fields=["fields"],\n        name="name",\n        sampling_rate=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end_points', 'fields', 'name', 'sampling_rate']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnRealtimeLogConfigProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnResponseHeadersPolicyProps
class CfnResponseHeadersPolicyPropsDef(BaseCfnProperty):
    response_headers_policy_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnResponseHeadersPolicy_ResponseHeadersPolicyConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A response headers policy configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-responseheaderspolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_response_headers_policy_props = cloudfront.CfnResponseHeadersPolicyProps(\n        response_headers_policy_config=cloudfront.CfnResponseHeadersPolicy.ResponseHeadersPolicyConfigProperty(\n            name="name",\n\n            # the properties below are optional\n            comment="comment",\n            cors_config=cloudfront.CfnResponseHeadersPolicy.CorsConfigProperty(\n                access_control_allow_credentials=False,\n                access_control_allow_headers=cloudfront.CfnResponseHeadersPolicy.AccessControlAllowHeadersProperty(\n                    items=["items"]\n                ),\n                access_control_allow_methods=cloudfront.CfnResponseHeadersPolicy.AccessControlAllowMethodsProperty(\n                    items=["items"]\n                ),\n                access_control_allow_origins=cloudfront.CfnResponseHeadersPolicy.AccessControlAllowOriginsProperty(\n                    items=["items"]\n                ),\n                origin_override=False,\n\n                # the properties below are optional\n                access_control_expose_headers=cloudfront.CfnResponseHeadersPolicy.AccessControlExposeHeadersProperty(\n                    items=["items"]\n                ),\n                access_control_max_age_sec=123\n            ),\n            custom_headers_config=cloudfront.CfnResponseHeadersPolicy.CustomHeadersConfigProperty(\n                items=[cloudfront.CfnResponseHeadersPolicy.CustomHeaderProperty(\n                    header="header",\n                    override=False,\n                    value="value"\n                )]\n            ),\n            remove_headers_config=cloudfront.CfnResponseHeadersPolicy.RemoveHeadersConfigProperty(\n                items=[cloudfront.CfnResponseHeadersPolicy.RemoveHeaderProperty(\n                    header="header"\n                )]\n            ),\n            security_headers_config=cloudfront.CfnResponseHeadersPolicy.SecurityHeadersConfigProperty(\n                content_security_policy=cloudfront.CfnResponseHeadersPolicy.ContentSecurityPolicyProperty(\n                    content_security_policy="contentSecurityPolicy",\n                    override=False\n                ),\n                content_type_options=cloudfront.CfnResponseHeadersPolicy.ContentTypeOptionsProperty(\n                    override=False\n                ),\n                frame_options=cloudfront.CfnResponseHeadersPolicy.FrameOptionsProperty(\n                    frame_option="frameOption",\n                    override=False\n                ),\n                referrer_policy=cloudfront.CfnResponseHeadersPolicy.ReferrerPolicyProperty(\n                    override=False,\n                    referrer_policy="referrerPolicy"\n                ),\n                strict_transport_security=cloudfront.CfnResponseHeadersPolicy.StrictTransportSecurityProperty(\n                    access_control_max_age_sec=123,\n                    override=False,\n\n                    # the properties below are optional\n                    include_subdomains=False,\n                    preload=False\n                ),\n                xss_protection=cloudfront.CfnResponseHeadersPolicy.XSSProtectionProperty(\n                    override=False,\n                    protection=False,\n\n                    # the properties below are optional\n                    mode_block=False,\n                    report_uri="reportUri"\n                )\n            ),\n            server_timing_headers_config=cloudfront.CfnResponseHeadersPolicy.ServerTimingHeadersConfigProperty(\n                enabled=False,\n\n                # the properties below are optional\n                sampling_rate=123\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['response_headers_policy_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnResponseHeadersPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront.CfnStreamingDistributionProps
class CfnStreamingDistributionPropsDef(BaseCfnProperty):
    streaming_distribution_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_cloudfront.CfnStreamingDistribution_StreamingDistributionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The current configuration information for the RTMP distribution.\n')
    tags: typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]] = pydantic.Field(..., description='A complex type that contains zero or more ``Tag`` elements.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-streamingdistribution.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cloudfront as cloudfront\n\n    cfn_streaming_distribution_props = cloudfront.CfnStreamingDistributionProps(\n        streaming_distribution_config=cloudfront.CfnStreamingDistribution.StreamingDistributionConfigProperty(\n            comment="comment",\n            enabled=False,\n            s3_origin=cloudfront.CfnStreamingDistribution.S3OriginProperty(\n                domain_name="domainName",\n                origin_access_identity="originAccessIdentity"\n            ),\n            trusted_signers=cloudfront.CfnStreamingDistribution.TrustedSignersProperty(\n                enabled=False,\n\n                # the properties below are optional\n                aws_account_numbers=["awsAccountNumbers"]\n            ),\n\n            # the properties below are optional\n            aliases=["aliases"],\n            logging=cloudfront.CfnStreamingDistribution.LoggingProperty(\n                bucket="bucket",\n                enabled=False,\n                prefix="prefix"\n            ),\n            price_class="priceClass"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['streaming_distribution_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront.CfnStreamingDistributionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    AllowedMethods: typing.Optional[dict[str, AllowedMethodsDef]] = pydantic.Field(None)
    CacheCookieBehavior: typing.Optional[dict[str, CacheCookieBehaviorDef]] = pydantic.Field(None)
    CachedMethods: typing.Optional[dict[str, CachedMethodsDef]] = pydantic.Field(None)
    CacheHeaderBehavior: typing.Optional[dict[str, CacheHeaderBehaviorDef]] = pydantic.Field(None)
    CacheQueryStringBehavior: typing.Optional[dict[str, CacheQueryStringBehaviorDef]] = pydantic.Field(None)
    FunctionCode: typing.Optional[dict[str, FunctionCodeDef]] = pydantic.Field(None)
    GeoRestriction: typing.Optional[dict[str, GeoRestrictionDef]] = pydantic.Field(None)
    OriginBase: typing.Optional[dict[str, OriginBaseDef]] = pydantic.Field(None)
    OriginRequestCookieBehavior: typing.Optional[dict[str, OriginRequestCookieBehaviorDef]] = pydantic.Field(None)
    OriginRequestHeaderBehavior: typing.Optional[dict[str, OriginRequestHeaderBehaviorDef]] = pydantic.Field(None)
    OriginRequestQueryStringBehavior: typing.Optional[dict[str, OriginRequestQueryStringBehaviorDef]] = pydantic.Field(None)
    ViewerCertificate: typing.Optional[dict[str, ViewerCertificateDef]] = pydantic.Field(None)
    CachePolicy: typing.Optional[dict[str, CachePolicyDef]] = pydantic.Field(None)
    CloudFrontWebDistribution: typing.Optional[dict[str, CloudFrontWebDistributionDef]] = pydantic.Field(None)
    Distribution: typing.Optional[dict[str, DistributionDef]] = pydantic.Field(None)
    Function: typing.Optional[dict[str, FunctionDef]] = pydantic.Field(None)
    KeyGroup: typing.Optional[dict[str, KeyGroupDef]] = pydantic.Field(None)
    OriginAccessIdentity: typing.Optional[dict[str, OriginAccessIdentityDef]] = pydantic.Field(None)
    OriginRequestPolicy: typing.Optional[dict[str, OriginRequestPolicyDef]] = pydantic.Field(None)
    PublicKey: typing.Optional[dict[str, PublicKeyDef]] = pydantic.Field(None)
    ResponseHeadersPolicy: typing.Optional[dict[str, ResponseHeadersPolicyDef]] = pydantic.Field(None)
    AddBehaviorOptions: typing.Optional[dict[str, AddBehaviorOptionsDef]] = pydantic.Field(None)
    Behavior: typing.Optional[dict[str, BehaviorDef]] = pydantic.Field(None)
    BehaviorOptions: typing.Optional[dict[str, BehaviorOptionsDef]] = pydantic.Field(None)
    CachePolicyProps: typing.Optional[dict[str, CachePolicyPropsDef]] = pydantic.Field(None)
    CfnCachePolicy_CachePolicyConfigProperty: typing.Optional[dict[str, CfnCachePolicy_CachePolicyConfigPropertyDef]] = pydantic.Field(None)
    CfnCachePolicy_CookiesConfigProperty: typing.Optional[dict[str, CfnCachePolicy_CookiesConfigPropertyDef]] = pydantic.Field(None)
    CfnCachePolicy_HeadersConfigProperty: typing.Optional[dict[str, CfnCachePolicy_HeadersConfigPropertyDef]] = pydantic.Field(None)
    CfnCachePolicy_ParametersInCacheKeyAndForwardedToOriginProperty: typing.Optional[dict[str, CfnCachePolicy_ParametersInCacheKeyAndForwardedToOriginPropertyDef]] = pydantic.Field(None)
    CfnCachePolicy_QueryStringsConfigProperty: typing.Optional[dict[str, CfnCachePolicy_QueryStringsConfigPropertyDef]] = pydantic.Field(None)
    CfnCloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfigProperty: typing.Optional[dict[str, CfnCloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfigPropertyDef]] = pydantic.Field(None)
    CfnContinuousDeploymentPolicy_ContinuousDeploymentPolicyConfigProperty: typing.Optional[dict[str, CfnContinuousDeploymentPolicy_ContinuousDeploymentPolicyConfigPropertyDef]] = pydantic.Field(None)
    CfnContinuousDeploymentPolicy_SessionStickinessConfigProperty: typing.Optional[dict[str, CfnContinuousDeploymentPolicy_SessionStickinessConfigPropertyDef]] = pydantic.Field(None)
    CfnContinuousDeploymentPolicy_SingleHeaderConfigProperty: typing.Optional[dict[str, CfnContinuousDeploymentPolicy_SingleHeaderConfigPropertyDef]] = pydantic.Field(None)
    CfnContinuousDeploymentPolicy_SingleWeightConfigProperty: typing.Optional[dict[str, CfnContinuousDeploymentPolicy_SingleWeightConfigPropertyDef]] = pydantic.Field(None)
    CfnContinuousDeploymentPolicy_TrafficConfigProperty: typing.Optional[dict[str, CfnContinuousDeploymentPolicy_TrafficConfigPropertyDef]] = pydantic.Field(None)
    CfnDistribution_CacheBehaviorProperty: typing.Optional[dict[str, CfnDistribution_CacheBehaviorPropertyDef]] = pydantic.Field(None)
    CfnDistribution_CookiesProperty: typing.Optional[dict[str, CfnDistribution_CookiesPropertyDef]] = pydantic.Field(None)
    CfnDistribution_CustomErrorResponseProperty: typing.Optional[dict[str, CfnDistribution_CustomErrorResponsePropertyDef]] = pydantic.Field(None)
    CfnDistribution_CustomOriginConfigProperty: typing.Optional[dict[str, CfnDistribution_CustomOriginConfigPropertyDef]] = pydantic.Field(None)
    CfnDistribution_DefaultCacheBehaviorProperty: typing.Optional[dict[str, CfnDistribution_DefaultCacheBehaviorPropertyDef]] = pydantic.Field(None)
    CfnDistribution_DistributionConfigProperty: typing.Optional[dict[str, CfnDistribution_DistributionConfigPropertyDef]] = pydantic.Field(None)
    CfnDistribution_ForwardedValuesProperty: typing.Optional[dict[str, CfnDistribution_ForwardedValuesPropertyDef]] = pydantic.Field(None)
    CfnDistribution_FunctionAssociationProperty: typing.Optional[dict[str, CfnDistribution_FunctionAssociationPropertyDef]] = pydantic.Field(None)
    CfnDistribution_GeoRestrictionProperty: typing.Optional[dict[str, CfnDistribution_GeoRestrictionPropertyDef]] = pydantic.Field(None)
    CfnDistribution_LambdaFunctionAssociationProperty: typing.Optional[dict[str, CfnDistribution_LambdaFunctionAssociationPropertyDef]] = pydantic.Field(None)
    CfnDistribution_LegacyCustomOriginProperty: typing.Optional[dict[str, CfnDistribution_LegacyCustomOriginPropertyDef]] = pydantic.Field(None)
    CfnDistribution_LegacyS3OriginProperty: typing.Optional[dict[str, CfnDistribution_LegacyS3OriginPropertyDef]] = pydantic.Field(None)
    CfnDistribution_LoggingProperty: typing.Optional[dict[str, CfnDistribution_LoggingPropertyDef]] = pydantic.Field(None)
    CfnDistribution_OriginCustomHeaderProperty: typing.Optional[dict[str, CfnDistribution_OriginCustomHeaderPropertyDef]] = pydantic.Field(None)
    CfnDistribution_OriginGroupFailoverCriteriaProperty: typing.Optional[dict[str, CfnDistribution_OriginGroupFailoverCriteriaPropertyDef]] = pydantic.Field(None)
    CfnDistribution_OriginGroupMemberProperty: typing.Optional[dict[str, CfnDistribution_OriginGroupMemberPropertyDef]] = pydantic.Field(None)
    CfnDistribution_OriginGroupMembersProperty: typing.Optional[dict[str, CfnDistribution_OriginGroupMembersPropertyDef]] = pydantic.Field(None)
    CfnDistribution_OriginGroupProperty: typing.Optional[dict[str, CfnDistribution_OriginGroupPropertyDef]] = pydantic.Field(None)
    CfnDistribution_OriginGroupsProperty: typing.Optional[dict[str, CfnDistribution_OriginGroupsPropertyDef]] = pydantic.Field(None)
    CfnDistribution_OriginProperty: typing.Optional[dict[str, CfnDistribution_OriginPropertyDef]] = pydantic.Field(None)
    CfnDistribution_OriginShieldProperty: typing.Optional[dict[str, CfnDistribution_OriginShieldPropertyDef]] = pydantic.Field(None)
    CfnDistribution_RestrictionsProperty: typing.Optional[dict[str, CfnDistribution_RestrictionsPropertyDef]] = pydantic.Field(None)
    CfnDistribution_S3OriginConfigProperty: typing.Optional[dict[str, CfnDistribution_S3OriginConfigPropertyDef]] = pydantic.Field(None)
    CfnDistribution_StatusCodesProperty: typing.Optional[dict[str, CfnDistribution_StatusCodesPropertyDef]] = pydantic.Field(None)
    CfnDistribution_ViewerCertificateProperty: typing.Optional[dict[str, CfnDistribution_ViewerCertificatePropertyDef]] = pydantic.Field(None)
    CfnFunction_FunctionConfigProperty: typing.Optional[dict[str, CfnFunction_FunctionConfigPropertyDef]] = pydantic.Field(None)
    CfnFunction_FunctionMetadataProperty: typing.Optional[dict[str, CfnFunction_FunctionMetadataPropertyDef]] = pydantic.Field(None)
    CfnKeyGroup_KeyGroupConfigProperty: typing.Optional[dict[str, CfnKeyGroup_KeyGroupConfigPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSubscription_MonitoringSubscriptionProperty: typing.Optional[dict[str, CfnMonitoringSubscription_MonitoringSubscriptionPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSubscription_RealtimeMetricsSubscriptionConfigProperty: typing.Optional[dict[str, CfnMonitoringSubscription_RealtimeMetricsSubscriptionConfigPropertyDef]] = pydantic.Field(None)
    CfnOriginAccessControl_OriginAccessControlConfigProperty: typing.Optional[dict[str, CfnOriginAccessControl_OriginAccessControlConfigPropertyDef]] = pydantic.Field(None)
    CfnOriginRequestPolicy_CookiesConfigProperty: typing.Optional[dict[str, CfnOriginRequestPolicy_CookiesConfigPropertyDef]] = pydantic.Field(None)
    CfnOriginRequestPolicy_HeadersConfigProperty: typing.Optional[dict[str, CfnOriginRequestPolicy_HeadersConfigPropertyDef]] = pydantic.Field(None)
    CfnOriginRequestPolicy_OriginRequestPolicyConfigProperty: typing.Optional[dict[str, CfnOriginRequestPolicy_OriginRequestPolicyConfigPropertyDef]] = pydantic.Field(None)
    CfnOriginRequestPolicy_QueryStringsConfigProperty: typing.Optional[dict[str, CfnOriginRequestPolicy_QueryStringsConfigPropertyDef]] = pydantic.Field(None)
    CfnPublicKey_PublicKeyConfigProperty: typing.Optional[dict[str, CfnPublicKey_PublicKeyConfigPropertyDef]] = pydantic.Field(None)
    CfnRealtimeLogConfig_EndPointProperty: typing.Optional[dict[str, CfnRealtimeLogConfig_EndPointPropertyDef]] = pydantic.Field(None)
    CfnRealtimeLogConfig_KinesisStreamConfigProperty: typing.Optional[dict[str, CfnRealtimeLogConfig_KinesisStreamConfigPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_AccessControlAllowHeadersProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_AccessControlAllowHeadersPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_AccessControlAllowMethodsProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_AccessControlAllowMethodsPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_AccessControlAllowOriginsProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_AccessControlAllowOriginsPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_AccessControlExposeHeadersProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_AccessControlExposeHeadersPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_ContentSecurityPolicyProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_ContentSecurityPolicyPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_ContentTypeOptionsProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_ContentTypeOptionsPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_CorsConfigProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_CorsConfigPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_CustomHeaderProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_CustomHeaderPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_CustomHeadersConfigProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_CustomHeadersConfigPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_FrameOptionsProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_FrameOptionsPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_ReferrerPolicyProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_ReferrerPolicyPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_RemoveHeaderProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_RemoveHeaderPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_RemoveHeadersConfigProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_RemoveHeadersConfigPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_ResponseHeadersPolicyConfigProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_ResponseHeadersPolicyConfigPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_SecurityHeadersConfigProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_SecurityHeadersConfigPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_ServerTimingHeadersConfigProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_ServerTimingHeadersConfigPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_StrictTransportSecurityProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_StrictTransportSecurityPropertyDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy_XSSProtectionProperty: typing.Optional[dict[str, CfnResponseHeadersPolicy_XSSProtectionPropertyDef]] = pydantic.Field(None)
    CfnStreamingDistribution_LoggingProperty: typing.Optional[dict[str, CfnStreamingDistribution_LoggingPropertyDef]] = pydantic.Field(None)
    CfnStreamingDistribution_S3OriginProperty: typing.Optional[dict[str, CfnStreamingDistribution_S3OriginPropertyDef]] = pydantic.Field(None)
    CfnStreamingDistribution_StreamingDistributionConfigProperty: typing.Optional[dict[str, CfnStreamingDistribution_StreamingDistributionConfigPropertyDef]] = pydantic.Field(None)
    CfnStreamingDistribution_TrustedSignersProperty: typing.Optional[dict[str, CfnStreamingDistribution_TrustedSignersPropertyDef]] = pydantic.Field(None)
    CloudFrontWebDistributionAttributes: typing.Optional[dict[str, CloudFrontWebDistributionAttributesDef]] = pydantic.Field(None)
    CloudFrontWebDistributionProps: typing.Optional[dict[str, CloudFrontWebDistributionPropsDef]] = pydantic.Field(None)
    CustomOriginConfig: typing.Optional[dict[str, CustomOriginConfigDef]] = pydantic.Field(None)
    DistributionAttributes: typing.Optional[dict[str, DistributionAttributesDef]] = pydantic.Field(None)
    DistributionProps: typing.Optional[dict[str, DistributionPropsDef]] = pydantic.Field(None)
    EdgeLambda: typing.Optional[dict[str, EdgeLambdaDef]] = pydantic.Field(None)
    ErrorResponse: typing.Optional[dict[str, ErrorResponseDef]] = pydantic.Field(None)
    FileCodeOptions: typing.Optional[dict[str, FileCodeOptionsDef]] = pydantic.Field(None)
    FunctionAssociation: typing.Optional[dict[str, FunctionAssociationDef]] = pydantic.Field(None)
    FunctionAttributes: typing.Optional[dict[str, FunctionAttributesDef]] = pydantic.Field(None)
    FunctionProps: typing.Optional[dict[str, FunctionPropsDef]] = pydantic.Field(None)
    KeyGroupProps: typing.Optional[dict[str, KeyGroupPropsDef]] = pydantic.Field(None)
    LambdaFunctionAssociation: typing.Optional[dict[str, LambdaFunctionAssociationDef]] = pydantic.Field(None)
    LoggingConfiguration: typing.Optional[dict[str, LoggingConfigurationDef]] = pydantic.Field(None)
    OriginAccessIdentityProps: typing.Optional[dict[str, OriginAccessIdentityPropsDef]] = pydantic.Field(None)
    OriginBindConfig: typing.Optional[dict[str, OriginBindConfigDef]] = pydantic.Field(None)
    OriginBindOptions: typing.Optional[dict[str, OriginBindOptionsDef]] = pydantic.Field(None)
    OriginFailoverConfig: typing.Optional[dict[str, OriginFailoverConfigDef]] = pydantic.Field(None)
    OriginOptions: typing.Optional[dict[str, OriginOptionsDef]] = pydantic.Field(None)
    OriginProps: typing.Optional[dict[str, OriginPropsDef]] = pydantic.Field(None)
    OriginRequestPolicyProps: typing.Optional[dict[str, OriginRequestPolicyPropsDef]] = pydantic.Field(None)
    PublicKeyProps: typing.Optional[dict[str, PublicKeyPropsDef]] = pydantic.Field(None)
    ResponseCustomHeader: typing.Optional[dict[str, ResponseCustomHeaderDef]] = pydantic.Field(None)
    ResponseCustomHeadersBehavior: typing.Optional[dict[str, ResponseCustomHeadersBehaviorDef]] = pydantic.Field(None)
    ResponseHeadersContentSecurityPolicy: typing.Optional[dict[str, ResponseHeadersContentSecurityPolicyDef]] = pydantic.Field(None)
    ResponseHeadersContentTypeOptions: typing.Optional[dict[str, ResponseHeadersContentTypeOptionsDef]] = pydantic.Field(None)
    ResponseHeadersCorsBehavior: typing.Optional[dict[str, ResponseHeadersCorsBehaviorDef]] = pydantic.Field(None)
    ResponseHeadersFrameOptions: typing.Optional[dict[str, ResponseHeadersFrameOptionsDef]] = pydantic.Field(None)
    ResponseHeadersPolicyProps: typing.Optional[dict[str, ResponseHeadersPolicyPropsDef]] = pydantic.Field(None)
    ResponseHeadersReferrerPolicy: typing.Optional[dict[str, ResponseHeadersReferrerPolicyDef]] = pydantic.Field(None)
    ResponseHeadersStrictTransportSecurity: typing.Optional[dict[str, ResponseHeadersStrictTransportSecurityDef]] = pydantic.Field(None)
    ResponseHeadersXSSProtection: typing.Optional[dict[str, ResponseHeadersXSSProtectionDef]] = pydantic.Field(None)
    ResponseSecurityHeadersBehavior: typing.Optional[dict[str, ResponseSecurityHeadersBehaviorDef]] = pydantic.Field(None)
    S3OriginConfig: typing.Optional[dict[str, S3OriginConfigDef]] = pydantic.Field(None)
    SourceConfiguration: typing.Optional[dict[str, SourceConfigurationDef]] = pydantic.Field(None)
    ViewerCertificateOptions: typing.Optional[dict[str, ViewerCertificateOptionsDef]] = pydantic.Field(None)
    CfnCachePolicy: typing.Optional[dict[str, CfnCachePolicyDef]] = pydantic.Field(None)
    CfnCloudFrontOriginAccessIdentity: typing.Optional[dict[str, CfnCloudFrontOriginAccessIdentityDef]] = pydantic.Field(None)
    CfnContinuousDeploymentPolicy: typing.Optional[dict[str, CfnContinuousDeploymentPolicyDef]] = pydantic.Field(None)
    CfnDistribution: typing.Optional[dict[str, CfnDistributionDef]] = pydantic.Field(None)
    CfnFunction: typing.Optional[dict[str, CfnFunctionDef]] = pydantic.Field(None)
    CfnKeyGroup: typing.Optional[dict[str, CfnKeyGroupDef]] = pydantic.Field(None)
    CfnMonitoringSubscription: typing.Optional[dict[str, CfnMonitoringSubscriptionDef]] = pydantic.Field(None)
    CfnOriginAccessControl: typing.Optional[dict[str, CfnOriginAccessControlDef]] = pydantic.Field(None)
    CfnOriginRequestPolicy: typing.Optional[dict[str, CfnOriginRequestPolicyDef]] = pydantic.Field(None)
    CfnPublicKey: typing.Optional[dict[str, CfnPublicKeyDef]] = pydantic.Field(None)
    CfnRealtimeLogConfig: typing.Optional[dict[str, CfnRealtimeLogConfigDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicy: typing.Optional[dict[str, CfnResponseHeadersPolicyDef]] = pydantic.Field(None)
    CfnStreamingDistribution: typing.Optional[dict[str, CfnStreamingDistributionDef]] = pydantic.Field(None)
    CfnCachePolicyProps: typing.Optional[dict[str, CfnCachePolicyPropsDef]] = pydantic.Field(None)
    CfnCloudFrontOriginAccessIdentityProps: typing.Optional[dict[str, CfnCloudFrontOriginAccessIdentityPropsDef]] = pydantic.Field(None)
    CfnContinuousDeploymentPolicyProps: typing.Optional[dict[str, CfnContinuousDeploymentPolicyPropsDef]] = pydantic.Field(None)
    CfnDistributionProps: typing.Optional[dict[str, CfnDistributionPropsDef]] = pydantic.Field(None)
    CfnFunctionProps: typing.Optional[dict[str, CfnFunctionPropsDef]] = pydantic.Field(None)
    CfnKeyGroupProps: typing.Optional[dict[str, CfnKeyGroupPropsDef]] = pydantic.Field(None)
    CfnMonitoringSubscriptionProps: typing.Optional[dict[str, CfnMonitoringSubscriptionPropsDef]] = pydantic.Field(None)
    CfnOriginAccessControlProps: typing.Optional[dict[str, CfnOriginAccessControlPropsDef]] = pydantic.Field(None)
    CfnOriginRequestPolicyProps: typing.Optional[dict[str, CfnOriginRequestPolicyPropsDef]] = pydantic.Field(None)
    CfnPublicKeyProps: typing.Optional[dict[str, CfnPublicKeyPropsDef]] = pydantic.Field(None)
    CfnRealtimeLogConfigProps: typing.Optional[dict[str, CfnRealtimeLogConfigPropsDef]] = pydantic.Field(None)
    CfnResponseHeadersPolicyProps: typing.Optional[dict[str, CfnResponseHeadersPolicyPropsDef]] = pydantic.Field(None)
    CfnStreamingDistributionProps: typing.Optional[dict[str, CfnStreamingDistributionPropsDef]] = pydantic.Field(None)
    ...
