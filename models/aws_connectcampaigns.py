from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_connectcampaigns.CfnCampaign.AnswerMachineDetectionConfigProperty
class CfnCampaign_AnswerMachineDetectionConfigPropertyDef(BaseStruct):
    enable_answer_machine_detection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='``CfnCampaign.AnswerMachineDetectionConfigProperty.EnableAnswerMachineDetection``.')
    _init_params: typing.ClassVar[list[str]] = ['enable_answer_machine_detection']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connectcampaigns.CfnCampaign.AnswerMachineDetectionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connectcampaigns.CfnCampaign.DialerConfigProperty
class CfnCampaign_DialerConfigPropertyDef(BaseStruct):
    predictive_dialer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_PredictiveDialerConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the predictive dialer.\n')
    progressive_dialer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_ProgressiveDialerConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the progressive dialer.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connectcampaigns-campaign-dialerconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connectcampaigns as connectcampaigns\n\n    dialer_config_property = connectcampaigns.CfnCampaign.DialerConfigProperty(\n        predictive_dialer_config=connectcampaigns.CfnCampaign.PredictiveDialerConfigProperty(\n            bandwidth_allocation=123\n        ),\n        progressive_dialer_config=connectcampaigns.CfnCampaign.ProgressiveDialerConfigProperty(\n            bandwidth_allocation=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['predictive_dialer_config', 'progressive_dialer_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connectcampaigns.CfnCampaign.DialerConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connectcampaigns.CfnCampaign.OutboundCallConfigProperty
class CfnCampaign_OutboundCallConfigPropertyDef(BaseStruct):
    connect_contact_flow_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the flow.\n')
    connect_queue_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the queue.\n')
    answer_machine_detection_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_AnswerMachineDetectionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnCampaign.OutboundCallConfigProperty.AnswerMachineDetectionConfig``.\n')
    connect_source_phone_number: typing.Optional[str] = pydantic.Field(None, description='The phone number associated with the outbound call. This is the caller ID that is displayed to customers when an agent calls them.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connectcampaigns-campaign-outboundcallconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connectcampaigns as connectcampaigns\n\n    outbound_call_config_property = connectcampaigns.CfnCampaign.OutboundCallConfigProperty(\n        connect_contact_flow_arn="connectContactFlowArn",\n        connect_queue_arn="connectQueueArn",\n\n        # the properties below are optional\n        answer_machine_detection_config=connectcampaigns.CfnCampaign.AnswerMachineDetectionConfigProperty(\n            enable_answer_machine_detection=False\n        ),\n        connect_source_phone_number="connectSourcePhoneNumber"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connect_contact_flow_arn', 'connect_queue_arn', 'answer_machine_detection_config', 'connect_source_phone_number']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connectcampaigns.CfnCampaign.OutboundCallConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connectcampaigns.CfnCampaign.PredictiveDialerConfigProperty
class CfnCampaign_PredictiveDialerConfigPropertyDef(BaseStruct):
    bandwidth_allocation: typing.Union[int, float] = pydantic.Field(..., description='Bandwidth allocation for the predictive dialer.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connectcampaigns-campaign-predictivedialerconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connectcampaigns as connectcampaigns\n\n    predictive_dialer_config_property = connectcampaigns.CfnCampaign.PredictiveDialerConfigProperty(\n        bandwidth_allocation=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bandwidth_allocation']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connectcampaigns.CfnCampaign.PredictiveDialerConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connectcampaigns.CfnCampaign.ProgressiveDialerConfigProperty
class CfnCampaign_ProgressiveDialerConfigPropertyDef(BaseStruct):
    bandwidth_allocation: typing.Union[int, float] = pydantic.Field(..., description='Bandwidth allocation for the progressive dialer.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connectcampaigns-campaign-progressivedialerconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connectcampaigns as connectcampaigns\n\n    progressive_dialer_config_property = connectcampaigns.CfnCampaign.ProgressiveDialerConfigProperty(\n        bandwidth_allocation=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bandwidth_allocation']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connectcampaigns.CfnCampaign.ProgressiveDialerConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connectcampaigns.CfnCampaign
class CfnCampaignDef(BaseCfnResource):
    connect_instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Connect instance.\n')
    dialer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_DialerConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains information about the dialer configuration.\n')
    name: str = pydantic.Field(..., description='The name of the campaign.\n')
    outbound_call_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_OutboundCallConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains information about the outbound call configuration.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.')
    _init_params: typing.ClassVar[list[str]] = ['connect_instance_arn', 'dialer_config', 'name', 'outbound_call_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AnswerMachineDetectionConfigProperty', 'DialerConfigProperty', 'OutboundCallConfigProperty', 'PredictiveDialerConfigProperty', 'ProgressiveDialerConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connectcampaigns.CfnCampaign'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnCampaignDefConfig] = pydantic.Field(None)


class CfnCampaignDefConfig(pydantic.BaseModel):
    AnswerMachineDetectionConfigProperty: typing.Optional[list[CfnCampaignDefAnswermachinedetectionconfigpropertyParams]] = pydantic.Field(None, description='')
    DialerConfigProperty: typing.Optional[list[CfnCampaignDefDialerconfigpropertyParams]] = pydantic.Field(None, description='')
    OutboundCallConfigProperty: typing.Optional[list[CfnCampaignDefOutboundcallconfigpropertyParams]] = pydantic.Field(None, description='')
    PredictiveDialerConfigProperty: typing.Optional[list[CfnCampaignDefPredictivedialerconfigpropertyParams]] = pydantic.Field(None, description='')
    ProgressiveDialerConfigProperty: typing.Optional[list[CfnCampaignDefProgressivedialerconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnCampaignDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnCampaignDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnCampaignDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnCampaignDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnCampaignDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnCampaignDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnCampaignDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnCampaignDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnCampaignDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnCampaignDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnCampaignDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnCampaignDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnCampaignDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnCampaignDefAnswermachinedetectionconfigpropertyParams(pydantic.BaseModel):
    enable_answer_machine_detection: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnCampaignDefDialerconfigpropertyParams(pydantic.BaseModel):
    predictive_dialer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_PredictiveDialerConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    progressive_dialer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_ProgressiveDialerConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefOutboundcallconfigpropertyParams(pydantic.BaseModel):
    connect_contact_flow_arn: str = pydantic.Field(..., description='')
    connect_queue_arn: str = pydantic.Field(..., description='')
    answer_machine_detection_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_AnswerMachineDetectionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    connect_source_phone_number: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefPredictivedialerconfigpropertyParams(pydantic.BaseModel):
    bandwidth_allocation: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnCampaignDefProgressivedialerconfigpropertyParams(pydantic.BaseModel):
    bandwidth_allocation: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnCampaignDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCampaignDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCampaignDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCampaignDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCampaignDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCampaignDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCampaignDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCampaignDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCampaignDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCampaignDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCampaignDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnCampaignDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCampaignDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCampaignDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connectcampaigns.CfnCampaignProps
class CfnCampaignPropsDef(BaseCfnProperty):
    connect_instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Connect instance.\n')
    dialer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_DialerConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains information about the dialer configuration.\n')
    name: str = pydantic.Field(..., description='The name of the campaign.\n')
    outbound_call_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connectcampaigns.CfnCampaign_OutboundCallConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains information about the outbound call configuration.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connectcampaigns-campaign.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connectcampaigns as connectcampaigns\n\n    cfn_campaign_props = connectcampaigns.CfnCampaignProps(\n        connect_instance_arn="connectInstanceArn",\n        dialer_config=connectcampaigns.CfnCampaign.DialerConfigProperty(\n            predictive_dialer_config=connectcampaigns.CfnCampaign.PredictiveDialerConfigProperty(\n                bandwidth_allocation=123\n            ),\n            progressive_dialer_config=connectcampaigns.CfnCampaign.ProgressiveDialerConfigProperty(\n                bandwidth_allocation=123\n            )\n        ),\n        name="name",\n        outbound_call_config=connectcampaigns.CfnCampaign.OutboundCallConfigProperty(\n            connect_contact_flow_arn="connectContactFlowArn",\n            connect_queue_arn="connectQueueArn",\n\n            # the properties below are optional\n            answer_machine_detection_config=connectcampaigns.CfnCampaign.AnswerMachineDetectionConfigProperty(\n                enable_answer_machine_detection=False\n            ),\n            connect_source_phone_number="connectSourcePhoneNumber"\n        ),\n\n        # the properties below are optional\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connect_instance_arn', 'dialer_config', 'name', 'outbound_call_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connectcampaigns.CfnCampaignProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnCampaign_AnswerMachineDetectionConfigProperty: typing.Optional[dict[str, CfnCampaign_AnswerMachineDetectionConfigPropertyDef]] = pydantic.Field(None)
    CfnCampaign_DialerConfigProperty: typing.Optional[dict[str, CfnCampaign_DialerConfigPropertyDef]] = pydantic.Field(None)
    CfnCampaign_OutboundCallConfigProperty: typing.Optional[dict[str, CfnCampaign_OutboundCallConfigPropertyDef]] = pydantic.Field(None)
    CfnCampaign_PredictiveDialerConfigProperty: typing.Optional[dict[str, CfnCampaign_PredictiveDialerConfigPropertyDef]] = pydantic.Field(None)
    CfnCampaign_ProgressiveDialerConfigProperty: typing.Optional[dict[str, CfnCampaign_ProgressiveDialerConfigPropertyDef]] = pydantic.Field(None)
    CfnCampaign: typing.Optional[dict[str, CfnCampaignDef]] = pydantic.Field(None)
    CfnCampaignProps: typing.Optional[dict[str, CfnCampaignPropsDef]] = pydantic.Field(None)
    ...
