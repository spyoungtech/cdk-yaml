from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.AcknowledgeFlowProperty
class CfnAlarmModel_AcknowledgeFlowPropertyDef(BaseStruct):
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="The value must be ``TRUE`` or ``FALSE`` . If ``TRUE`` , you receive a notification when the alarm state changes. You must choose to acknowledge the notification before the alarm state can return to ``NORMAL`` . If ``FALSE`` , you won't receive notifications. The alarm automatically changes to the ``NORMAL`` state when the input property value returns to the specified range.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-acknowledgeflow.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    acknowledge_flow_property = iotevents.CfnAlarmModel.AcknowledgeFlowProperty(\n        enabled=False\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.AcknowledgeFlowProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.AlarmActionProperty
class CfnAlarmModel_AlarmActionPropertyDef(BaseStruct):
    dynamo_db: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_DynamoDBPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the `payload <https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html>`_ . One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. You must use expressions for all parameters in ``DynamoDBAction`` . The expressions accept literals, operators, functions, references, and substitution templates. **Examples** - For literal values, the expressions must contain single quotes. For example, the value for the ``hashKeyType`` parameter can be ``'STRING'`` . - For references, you must specify either variables or input values. For example, the value for the ``hashKeyField`` parameter can be ``$input.GreenhouseInput.name`` . - For a substitution template, you must use ``${}`` , and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the ``hashKeyValue`` parameter uses a substitution template. ``'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'`` - For a string concatenation, you must use ``+`` . A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the ``tableName`` parameter uses a string concatenation. ``'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`` For more information, see `Expressions <https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html>`_ in the *AWS IoT Events Developer Guide* . If the defined payload type is a string, ``DynamoDBAction`` writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the ``payloadField`` parameter is ``<payload-field>_raw`` .\n")
    dynamo_d_bv2: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_DynamoDBv2PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the `payload <https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html>`_ . A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify. You must use expressions for all parameters in ``DynamoDBv2Action`` . The expressions accept literals, operators, functions, references, and substitution templates. **Examples** - For literal values, the expressions must contain single quotes. For example, the value for the ``tableName`` parameter can be ``\'GreenhouseTemperatureTable\'`` . - For references, you must specify either variables or input values. For example, the value for the ``tableName`` parameter can be ``$variable.ddbtableName`` . - For a substitution template, you must use ``${}`` , and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the ``contentExpression`` parameter in ``Payload`` uses a substitution template. ``\'{\\"sensorID\\": \\"${$input.GreenhouseInput.sensor_id}\\", \\"temperature\\": \\"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\\"}\'`` - For a string concatenation, you must use ``+`` . A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the ``tableName`` parameter uses a string concatenation. ``\'GreenhouseTemperatureTable \' + $input.GreenhouseInput.date`` For more information, see `Expressions <https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html>`_ in the *AWS IoT Events Developer Guide* . The value for the ``type`` parameter in ``Payload`` must be ``JSON`` .\n')
    firehose: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_FirehosePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.\n')
    iot_events: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_IotEventsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.\n')
    iot_site_wise: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_IotSiteWisePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise . You must use expressions for all parameters in ``IotSiteWiseAction`` . The expressions accept literals, operators, functions, references, and substitutions templates. **Examples** - For literal values, the expressions must contain single quotes. For example, the value for the ``propertyAlias`` parameter can be ``'/company/windfarm/3/turbine/7/temperature'`` . - For references, you must specify either variables or input values. For example, the value for the ``assetId`` parameter can be ``$input.TurbineInput.assetId1`` . - For a substitution template, you must use ``${}`` , and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the ``propertyAlias`` parameter uses a substitution template. ``'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'`` You must specify either ``propertyAlias`` or both ``assetId`` and ``propertyId`` to identify the target asset property in AWS IoT SiteWise . For more information, see `Expressions <https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html>`_ in the *AWS IoT Events Developer Guide* .\n")
    iot_topic_publish: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_IotTopicPublishPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information required to publish the MQTT message through the AWS IoT message broker.\n')
    lambda_: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_LambdaPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.\n')
    sns: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_SnsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information required to publish the Amazon SNS message.\n')
    sqs: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_SqsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-alarmaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    alarm_action_property = iotevents.CfnAlarmModel.AlarmActionProperty(\n        dynamo_db=iotevents.CfnAlarmModel.DynamoDBProperty(\n            hash_key_field="hashKeyField",\n            hash_key_value="hashKeyValue",\n            table_name="tableName",\n\n            # the properties below are optional\n            hash_key_type="hashKeyType",\n            operation="operation",\n            payload=iotevents.CfnAlarmModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            ),\n            payload_field="payloadField",\n            range_key_field="rangeKeyField",\n            range_key_type="rangeKeyType",\n            range_key_value="rangeKeyValue"\n        ),\n        dynamo_dBv2=iotevents.CfnAlarmModel.DynamoDBv2Property(\n            table_name="tableName",\n\n            # the properties below are optional\n            payload=iotevents.CfnAlarmModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        firehose=iotevents.CfnAlarmModel.FirehoseProperty(\n            delivery_stream_name="deliveryStreamName",\n\n            # the properties below are optional\n            payload=iotevents.CfnAlarmModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            ),\n            separator="separator"\n        ),\n        iot_events=iotevents.CfnAlarmModel.IotEventsProperty(\n            input_name="inputName",\n\n            # the properties below are optional\n            payload=iotevents.CfnAlarmModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        iot_site_wise=iotevents.CfnAlarmModel.IotSiteWiseProperty(\n            asset_id="assetId",\n            entry_id="entryId",\n            property_alias="propertyAlias",\n            property_id="propertyId",\n            property_value=iotevents.CfnAlarmModel.AssetPropertyValueProperty(\n                value=iotevents.CfnAlarmModel.AssetPropertyVariantProperty(\n                    boolean_value="booleanValue",\n                    double_value="doubleValue",\n                    integer_value="integerValue",\n                    string_value="stringValue"\n                ),\n\n                # the properties below are optional\n                quality="quality",\n                timestamp=iotevents.CfnAlarmModel.AssetPropertyTimestampProperty(\n                    time_in_seconds="timeInSeconds",\n\n                    # the properties below are optional\n                    offset_in_nanos="offsetInNanos"\n                )\n            )\n        ),\n        iot_topic_publish=iotevents.CfnAlarmModel.IotTopicPublishProperty(\n            mqtt_topic="mqttTopic",\n\n            # the properties below are optional\n            payload=iotevents.CfnAlarmModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        lambda_=iotevents.CfnAlarmModel.LambdaProperty(\n            function_arn="functionArn",\n\n            # the properties below are optional\n            payload=iotevents.CfnAlarmModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        sns=iotevents.CfnAlarmModel.SnsProperty(\n            target_arn="targetArn",\n\n            # the properties below are optional\n            payload=iotevents.CfnAlarmModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        sqs=iotevents.CfnAlarmModel.SqsProperty(\n            queue_url="queueUrl",\n\n            # the properties below are optional\n            payload=iotevents.CfnAlarmModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            ),\n            use_base64=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dynamo_db', 'dynamo_d_bv2', 'firehose', 'iot_events', 'iot_site_wise', 'iot_topic_publish', 'lambda_', 'sns', 'sqs']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.AlarmActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.AlarmCapabilitiesProperty
class CfnAlarmModel_AlarmCapabilitiesPropertyDef(BaseStruct):
    acknowledge_flow: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AcknowledgeFlowPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies whether to get notified for alarm state changes.\n')
    initialization_configuration: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_InitializationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-alarmcapabilities.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    alarm_capabilities_property = iotevents.CfnAlarmModel.AlarmCapabilitiesProperty(\n        acknowledge_flow=iotevents.CfnAlarmModel.AcknowledgeFlowProperty(\n            enabled=False\n        ),\n        initialization_configuration=iotevents.CfnAlarmModel.InitializationConfigurationProperty(\n            disabled_on_initialization=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['acknowledge_flow', 'initialization_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.AlarmCapabilitiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.AlarmEventActionsProperty
class CfnAlarmModel_AlarmEventActionsPropertyDef(BaseStruct):
    alarm_actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AlarmActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies one or more supported actions to receive notifications when the alarm state changes.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-alarmeventactions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    alarm_event_actions_property = iotevents.CfnAlarmModel.AlarmEventActionsProperty(\n        alarm_actions=[iotevents.CfnAlarmModel.AlarmActionProperty(\n            dynamo_db=iotevents.CfnAlarmModel.DynamoDBProperty(\n                hash_key_field="hashKeyField",\n                hash_key_value="hashKeyValue",\n                table_name="tableName",\n\n                # the properties below are optional\n                hash_key_type="hashKeyType",\n                operation="operation",\n                payload=iotevents.CfnAlarmModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                ),\n                payload_field="payloadField",\n                range_key_field="rangeKeyField",\n                range_key_type="rangeKeyType",\n                range_key_value="rangeKeyValue"\n            ),\n            dynamo_dBv2=iotevents.CfnAlarmModel.DynamoDBv2Property(\n                table_name="tableName",\n\n                # the properties below are optional\n                payload=iotevents.CfnAlarmModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            firehose=iotevents.CfnAlarmModel.FirehoseProperty(\n                delivery_stream_name="deliveryStreamName",\n\n                # the properties below are optional\n                payload=iotevents.CfnAlarmModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                ),\n                separator="separator"\n            ),\n            iot_events=iotevents.CfnAlarmModel.IotEventsProperty(\n                input_name="inputName",\n\n                # the properties below are optional\n                payload=iotevents.CfnAlarmModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            iot_site_wise=iotevents.CfnAlarmModel.IotSiteWiseProperty(\n                asset_id="assetId",\n                entry_id="entryId",\n                property_alias="propertyAlias",\n                property_id="propertyId",\n                property_value=iotevents.CfnAlarmModel.AssetPropertyValueProperty(\n                    value=iotevents.CfnAlarmModel.AssetPropertyVariantProperty(\n                        boolean_value="booleanValue",\n                        double_value="doubleValue",\n                        integer_value="integerValue",\n                        string_value="stringValue"\n                    ),\n\n                    # the properties below are optional\n                    quality="quality",\n                    timestamp=iotevents.CfnAlarmModel.AssetPropertyTimestampProperty(\n                        time_in_seconds="timeInSeconds",\n\n                        # the properties below are optional\n                        offset_in_nanos="offsetInNanos"\n                    )\n                )\n            ),\n            iot_topic_publish=iotevents.CfnAlarmModel.IotTopicPublishProperty(\n                mqtt_topic="mqttTopic",\n\n                # the properties below are optional\n                payload=iotevents.CfnAlarmModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            lambda_=iotevents.CfnAlarmModel.LambdaProperty(\n                function_arn="functionArn",\n\n                # the properties below are optional\n                payload=iotevents.CfnAlarmModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            sns=iotevents.CfnAlarmModel.SnsProperty(\n                target_arn="targetArn",\n\n                # the properties below are optional\n                payload=iotevents.CfnAlarmModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            sqs=iotevents.CfnAlarmModel.SqsProperty(\n                queue_url="queueUrl",\n\n                # the properties below are optional\n                payload=iotevents.CfnAlarmModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                ),\n                use_base64=False\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarm_actions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.AlarmEventActionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.AlarmRuleProperty
class CfnAlarmModel_AlarmRulePropertyDef(BaseStruct):
    simple_rule: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_SimpleRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule that compares an input property value to a threshold value with a comparison operator.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-alarmrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    alarm_rule_property = iotevents.CfnAlarmModel.AlarmRuleProperty(\n        simple_rule=iotevents.CfnAlarmModel.SimpleRuleProperty(\n            comparison_operator="comparisonOperator",\n            input_property="inputProperty",\n            threshold="threshold"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['simple_rule']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.AlarmRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.AssetPropertyTimestampProperty
class CfnAlarmModel_AssetPropertyTimestampPropertyDef(BaseStruct):
    time_in_seconds: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199.\n')
    offset_in_nanos: typing.Optional[str] = pydantic.Field(None, description='The nanosecond offset converted from ``timeInSeconds`` . The valid range is between 0-999999999.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-assetpropertytimestamp.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    asset_property_timestamp_property = iotevents.CfnAlarmModel.AssetPropertyTimestampProperty(\n        time_in_seconds="timeInSeconds",\n\n        # the properties below are optional\n        offset_in_nanos="offsetInNanos"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['time_in_seconds', 'offset_in_nanos']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.AssetPropertyTimestampProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.AssetPropertyValueProperty
class CfnAlarmModel_AssetPropertyValuePropertyDef(BaseStruct):
    value: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AssetPropertyVariantPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value to send to an asset property.\n')
    quality: typing.Optional[str] = pydantic.Field(None, description="The quality of the asset property value. The value must be ``'GOOD'`` , ``'BAD'`` , or ``'UNCERTAIN'`` .\n")
    timestamp: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AssetPropertyTimestampPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The timestamp associated with the asset property value. The default is the current event time.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-assetpropertyvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    asset_property_value_property = iotevents.CfnAlarmModel.AssetPropertyValueProperty(\n        value=iotevents.CfnAlarmModel.AssetPropertyVariantProperty(\n            boolean_value="booleanValue",\n            double_value="doubleValue",\n            integer_value="integerValue",\n            string_value="stringValue"\n        ),\n\n        # the properties below are optional\n        quality="quality",\n        timestamp=iotevents.CfnAlarmModel.AssetPropertyTimestampProperty(\n            time_in_seconds="timeInSeconds",\n\n            # the properties below are optional\n            offset_in_nanos="offsetInNanos"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value', 'quality', 'timestamp']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.AssetPropertyValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.AssetPropertyVariantProperty
class CfnAlarmModel_AssetPropertyVariantPropertyDef(BaseStruct):
    boolean_value: typing.Optional[str] = pydantic.Field(None, description="The asset property value is a Boolean value that must be ``'TRUE'`` or ``'FALSE'`` . You must use an expression, and the evaluated result should be a Boolean value.\n")
    double_value: typing.Optional[str] = pydantic.Field(None, description='The asset property value is a double. You must use an expression, and the evaluated result should be a double.\n')
    integer_value: typing.Optional[str] = pydantic.Field(None, description='The asset property value is an integer. You must use an expression, and the evaluated result should be an integer.\n')
    string_value: typing.Optional[str] = pydantic.Field(None, description='The asset property value is a string. You must use an expression, and the evaluated result should be a string.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-assetpropertyvariant.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    asset_property_variant_property = iotevents.CfnAlarmModel.AssetPropertyVariantProperty(\n        boolean_value="booleanValue",\n        double_value="doubleValue",\n        integer_value="integerValue",\n        string_value="stringValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['boolean_value', 'double_value', 'integer_value', 'string_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.AssetPropertyVariantProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.DynamoDBProperty
class CfnAlarmModel_DynamoDBPropertyDef(BaseStruct):
    hash_key_field: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the hash key (also called the partition key). The ``hashKeyField`` value must match the partition key of the target DynamoDB table.\n')
    hash_key_value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value of the hash key (also called the partition key).\n')
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the DynamoDB table. The ``tableName`` value must match the table name of the target DynamoDB table.\n')
    hash_key_type: typing.Optional[str] = pydantic.Field(None, description="The data type for the hash key (also called the partition key). You can specify the following values:. - ``'STRING'`` - The hash key is a string. - ``'NUMBER'`` - The hash key is a number. If you don't specify ``hashKeyType`` , the default value is ``'STRING'`` .\n")
    operation: typing.Optional[str] = pydantic.Field(None, description="The type of operation to perform. You can specify the following values:. - ``'INSERT'`` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key. - ``'UPDATE'`` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key. - ``'DELETE'`` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key. If you don't specify this parameter, AWS IoT Events triggers the ``'INSERT'`` operation.\n")
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information needed to configure the payload. By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use ``contentExpression`` .\n')
    payload_field: typing.Optional[str] = pydantic.Field(None, description="The name of the DynamoDB column that receives the action payload. If you don't specify this parameter, the name of the DynamoDB column is ``payload`` .\n")
    range_key_field: typing.Optional[str] = pydantic.Field(None, description='The name of the range key (also called the sort key). The ``rangeKeyField`` value must match the sort key of the target DynamoDB table.\n')
    range_key_type: typing.Optional[str] = pydantic.Field(None, description="The data type for the range key (also called the sort key), You can specify the following values:. - ``'STRING'`` - The range key is a string. - ``'NUMBER'`` - The range key is number. If you don't specify ``rangeKeyField`` , the default value is ``'STRING'`` .\n")
    range_key_value: typing.Optional[str] = pydantic.Field(None, description='The value of the range key (also called the sort key).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-dynamodb.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    dynamo_dBProperty = iotevents.CfnAlarmModel.DynamoDBProperty(\n        hash_key_field="hashKeyField",\n        hash_key_value="hashKeyValue",\n        table_name="tableName",\n\n        # the properties below are optional\n        hash_key_type="hashKeyType",\n        operation="operation",\n        payload=iotevents.CfnAlarmModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        ),\n        payload_field="payloadField",\n        range_key_field="rangeKeyField",\n        range_key_type="rangeKeyType",\n        range_key_value="rangeKeyValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hash_key_field', 'hash_key_value', 'table_name', 'hash_key_type', 'operation', 'payload', 'payload_field', 'range_key_field', 'range_key_type', 'range_key_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.DynamoDBProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.DynamoDBv2Property
class CfnAlarmModel_DynamoDBv2PropertyDef(BaseStruct):
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the DynamoDB table.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information needed to configure the payload. By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use ``contentExpression`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-dynamodbv2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    dynamo_dBv2_property = iotevents.CfnAlarmModel.DynamoDBv2Property(\n        table_name="tableName",\n\n        # the properties below are optional\n        payload=iotevents.CfnAlarmModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['table_name', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.DynamoDBv2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.FirehoseProperty
class CfnAlarmModel_FirehosePropertyDef(BaseStruct):
    delivery_stream_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Kinesis Data Firehose delivery stream where the data is written.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message to an Amazon Data Firehose delivery stream.\n')
    separator: typing.Optional[str] = pydantic.Field(None, description='A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: \'\\n\' (newline), \'\\t\' (tab), \'\\r\\n\' (Windows newline), \',\' (comma).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-firehose.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    firehose_property = iotevents.CfnAlarmModel.FirehoseProperty(\n        delivery_stream_name="deliveryStreamName",\n\n        # the properties below are optional\n        payload=iotevents.CfnAlarmModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        ),\n        separator="separator"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delivery_stream_name', 'payload', 'separator']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.FirehoseProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.InitializationConfigurationProperty
class CfnAlarmModel_InitializationConfigurationPropertyDef(BaseStruct):
    disabled_on_initialization: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value must be ``TRUE`` or ``FALSE`` . If ``FALSE`` , all alarm instances created based on the alarm model are activated. The default value is ``TRUE`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-initializationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    initialization_configuration_property = iotevents.CfnAlarmModel.InitializationConfigurationProperty(\n        disabled_on_initialization=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['disabled_on_initialization']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.InitializationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.IotEventsProperty
class CfnAlarmModel_IotEventsPropertyDef(BaseStruct):
    input_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the AWS IoT Events input where the data is sent.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message to an AWS IoT Events input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-iotevents.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    iot_events_property = iotevents.CfnAlarmModel.IotEventsProperty(\n        input_name="inputName",\n\n        # the properties below are optional\n        payload=iotevents.CfnAlarmModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['input_name', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.IotEventsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.IotSiteWiseProperty
class CfnAlarmModel_IotSiteWisePropertyDef(BaseStruct):
    asset_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the asset that has the specified property.\n')
    entry_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier.\n')
    property_alias: typing.Optional[str] = pydantic.Field(None, description='The alias of the asset property.\n')
    property_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the asset property.\n')
    property_value: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AssetPropertyValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-iotsitewise.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    iot_site_wise_property = iotevents.CfnAlarmModel.IotSiteWiseProperty(\n        asset_id="assetId",\n        entry_id="entryId",\n        property_alias="propertyAlias",\n        property_id="propertyId",\n        property_value=iotevents.CfnAlarmModel.AssetPropertyValueProperty(\n            value=iotevents.CfnAlarmModel.AssetPropertyVariantProperty(\n                boolean_value="booleanValue",\n                double_value="doubleValue",\n                integer_value="integerValue",\n                string_value="stringValue"\n            ),\n\n            # the properties below are optional\n            quality="quality",\n            timestamp=iotevents.CfnAlarmModel.AssetPropertyTimestampProperty(\n                time_in_seconds="timeInSeconds",\n\n                # the properties below are optional\n                offset_in_nanos="offsetInNanos"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['asset_id', 'entry_id', 'property_alias', 'property_id', 'property_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.IotSiteWiseProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.IotTopicPublishProperty
class CfnAlarmModel_IotTopicPublishPropertyDef(BaseStruct):
    mqtt_topic: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The MQTT topic of the message. You can use a string expression that includes variables ( ``$variable.<variable-name>`` ) and input values ( ``$input.<input-name>.<path-to-datum>`` ) as the topic string.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you publish a message to an AWS IoT Core topic.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-iottopicpublish.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    iot_topic_publish_property = iotevents.CfnAlarmModel.IotTopicPublishProperty(\n        mqtt_topic="mqttTopic",\n\n        # the properties below are optional\n        payload=iotevents.CfnAlarmModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mqtt_topic', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.IotTopicPublishProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.LambdaProperty
class CfnAlarmModel_LambdaPropertyDef(BaseStruct):
    function_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Lambda function that is executed.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message to a Lambda function.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-lambda.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    lambda_property = iotevents.CfnAlarmModel.LambdaProperty(\n        function_arn="functionArn",\n\n        # the properties below are optional\n        payload=iotevents.CfnAlarmModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['function_arn', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.LambdaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.PayloadProperty
class CfnAlarmModel_PayloadPropertyDef(BaseStruct):
    content_expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The content of the payload. You can use a string expression that includes quoted strings ( ``'<string>'`` ), variables ( ``$variable.<variable-name>`` ), input values ( ``$input.<input-name>.<path-to-datum>`` ), string concatenations, and quoted strings that contain ``${}`` as the content. The recommended maximum size of a content expression is 1 KB.\n")
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value of the payload type can be either ``STRING`` or ``JSON`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-payload.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    payload_property = iotevents.CfnAlarmModel.PayloadProperty(\n        content_expression="contentExpression",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_expression', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.PayloadProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.SimpleRuleProperty
class CfnAlarmModel_SimpleRulePropertyDef(BaseStruct):
    comparison_operator: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The comparison operator.\n')
    input_property: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value on the left side of the comparison operator. You can specify an AWS IoT Events input attribute as an input property.\n')
    threshold: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value on the right side of the comparison operator. You can enter a number or specify an AWS IoT Events input attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-simplerule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    simple_rule_property = iotevents.CfnAlarmModel.SimpleRuleProperty(\n        comparison_operator="comparisonOperator",\n        input_property="inputProperty",\n        threshold="threshold"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison_operator', 'input_property', 'threshold']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.SimpleRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.SnsProperty
class CfnAlarmModel_SnsPropertyDef(BaseStruct):
    target_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Amazon SNS target where the message is sent.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message as an Amazon SNS push notification.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-sns.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    sns_property = iotevents.CfnAlarmModel.SnsProperty(\n        target_arn="targetArn",\n\n        # the properties below are optional\n        payload=iotevents.CfnAlarmModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_arn', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.SnsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel.SqsProperty
class CfnAlarmModel_SqsPropertyDef(BaseStruct):
    queue_url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URL of the SQS queue where the data is written.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message to an Amazon SQS queue.\n')
    use_base64: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-alarmmodel-sqs.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    sqs_property = iotevents.CfnAlarmModel.SqsProperty(\n        queue_url="queueUrl",\n\n        # the properties below are optional\n        payload=iotevents.CfnAlarmModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        ),\n        use_base64=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['queue_url', 'payload', 'use_base64']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel.SqsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.ActionProperty
class CfnDetectorModel_ActionPropertyDef(BaseStruct):
    clear_timer: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_ClearTimerPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information needed to clear the timer.\n')
    dynamo_db: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_DynamoDBPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the `payload <https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html>`_ . One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see `Actions <https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html>`_ in *AWS IoT Events Developer Guide* .\n')
    dynamo_d_bv2: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_DynamoDBv2PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the `payload <https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html>`_ . A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify. For more information, see `Actions <https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html>`_ in *AWS IoT Events Developer Guide* .\n')
    firehose: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_FirehosePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.\n')
    iot_events: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_IotEventsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sends AWS IoT Events input, which passes information about the detector model instance and the event that triggered the action.\n')
    iot_site_wise: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_IotSiteWisePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sends information about the detector model instance and the event that triggered the action to an asset property in AWS IoT SiteWise .\n')
    iot_topic_publish: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_IotTopicPublishPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Publishes an MQTT message with the given topic to the AWS IoT message broker.\n')
    lambda_: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_LambdaPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.\n')
    reset_timer: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_ResetTimerPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information needed to reset the timer.\n')
    set_timer: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_SetTimerPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information needed to set the timer.\n')
    set_variable: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_SetVariablePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sets a variable to a specified value.\n')
    sns: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_SnsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sends an Amazon SNS message.\n')
    sqs: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_SqsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sends an Amazon SNS message.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-action.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    action_property = iotevents.CfnDetectorModel.ActionProperty(\n        clear_timer=iotevents.CfnDetectorModel.ClearTimerProperty(\n            timer_name="timerName"\n        ),\n        dynamo_db=iotevents.CfnDetectorModel.DynamoDBProperty(\n            hash_key_field="hashKeyField",\n            hash_key_value="hashKeyValue",\n            table_name="tableName",\n\n            # the properties below are optional\n            hash_key_type="hashKeyType",\n            operation="operation",\n            payload=iotevents.CfnDetectorModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            ),\n            payload_field="payloadField",\n            range_key_field="rangeKeyField",\n            range_key_type="rangeKeyType",\n            range_key_value="rangeKeyValue"\n        ),\n        dynamo_dBv2=iotevents.CfnDetectorModel.DynamoDBv2Property(\n            table_name="tableName",\n\n            # the properties below are optional\n            payload=iotevents.CfnDetectorModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        firehose=iotevents.CfnDetectorModel.FirehoseProperty(\n            delivery_stream_name="deliveryStreamName",\n\n            # the properties below are optional\n            payload=iotevents.CfnDetectorModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            ),\n            separator="separator"\n        ),\n        iot_events=iotevents.CfnDetectorModel.IotEventsProperty(\n            input_name="inputName",\n\n            # the properties below are optional\n            payload=iotevents.CfnDetectorModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        iot_site_wise=iotevents.CfnDetectorModel.IotSiteWiseProperty(\n            property_value=iotevents.CfnDetectorModel.AssetPropertyValueProperty(\n                value=iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n                    boolean_value="booleanValue",\n                    double_value="doubleValue",\n                    integer_value="integerValue",\n                    string_value="stringValue"\n                ),\n\n                # the properties below are optional\n                quality="quality",\n                timestamp=iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n                    time_in_seconds="timeInSeconds",\n\n                    # the properties below are optional\n                    offset_in_nanos="offsetInNanos"\n                )\n            ),\n\n            # the properties below are optional\n            asset_id="assetId",\n            entry_id="entryId",\n            property_alias="propertyAlias",\n            property_id="propertyId"\n        ),\n        iot_topic_publish=iotevents.CfnDetectorModel.IotTopicPublishProperty(\n            mqtt_topic="mqttTopic",\n\n            # the properties below are optional\n            payload=iotevents.CfnDetectorModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        lambda_=iotevents.CfnDetectorModel.LambdaProperty(\n            function_arn="functionArn",\n\n            # the properties below are optional\n            payload=iotevents.CfnDetectorModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        reset_timer=iotevents.CfnDetectorModel.ResetTimerProperty(\n            timer_name="timerName"\n        ),\n        set_timer=iotevents.CfnDetectorModel.SetTimerProperty(\n            timer_name="timerName",\n\n            # the properties below are optional\n            duration_expression="durationExpression",\n            seconds=123\n        ),\n        set_variable=iotevents.CfnDetectorModel.SetVariableProperty(\n            value="value",\n            variable_name="variableName"\n        ),\n        sns=iotevents.CfnDetectorModel.SnsProperty(\n            target_arn="targetArn",\n\n            # the properties below are optional\n            payload=iotevents.CfnDetectorModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            )\n        ),\n        sqs=iotevents.CfnDetectorModel.SqsProperty(\n            queue_url="queueUrl",\n\n            # the properties below are optional\n            payload=iotevents.CfnDetectorModel.PayloadProperty(\n                content_expression="contentExpression",\n                type="type"\n            ),\n            use_base64=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['clear_timer', 'dynamo_db', 'dynamo_d_bv2', 'firehose', 'iot_events', 'iot_site_wise', 'iot_topic_publish', 'lambda_', 'reset_timer', 'set_timer', 'set_variable', 'sns', 'sqs']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.ActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.AssetPropertyTimestampProperty
class CfnDetectorModel_AssetPropertyTimestampPropertyDef(BaseStruct):
    time_in_seconds: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199.\n')
    offset_in_nanos: typing.Optional[str] = pydantic.Field(None, description='The nanosecond offset converted from ``timeInSeconds`` . The valid range is between 0-999999999.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-assetpropertytimestamp.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    asset_property_timestamp_property = iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n        time_in_seconds="timeInSeconds",\n\n        # the properties below are optional\n        offset_in_nanos="offsetInNanos"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['time_in_seconds', 'offset_in_nanos']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.AssetPropertyTimestampProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.AssetPropertyValueProperty
class CfnDetectorModel_AssetPropertyValuePropertyDef(BaseStruct):
    value: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_AssetPropertyVariantPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value to send to an asset property.\n')
    quality: typing.Optional[str] = pydantic.Field(None, description="The quality of the asset property value. The value must be ``'GOOD'`` , ``'BAD'`` , or ``'UNCERTAIN'`` .\n")
    timestamp: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_AssetPropertyTimestampPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The timestamp associated with the asset property value. The default is the current event time.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-assetpropertyvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    asset_property_value_property = iotevents.CfnDetectorModel.AssetPropertyValueProperty(\n        value=iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n            boolean_value="booleanValue",\n            double_value="doubleValue",\n            integer_value="integerValue",\n            string_value="stringValue"\n        ),\n\n        # the properties below are optional\n        quality="quality",\n        timestamp=iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n            time_in_seconds="timeInSeconds",\n\n            # the properties below are optional\n            offset_in_nanos="offsetInNanos"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value', 'quality', 'timestamp']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.AssetPropertyValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.AssetPropertyVariantProperty
class CfnDetectorModel_AssetPropertyVariantPropertyDef(BaseStruct):
    boolean_value: typing.Optional[str] = pydantic.Field(None, description="The asset property value is a Boolean value that must be ``'TRUE'`` or ``'FALSE'`` . You must use an expression, and the evaluated result should be a Boolean value.\n")
    double_value: typing.Optional[str] = pydantic.Field(None, description='The asset property value is a double. You must use an expression, and the evaluated result should be a double.\n')
    integer_value: typing.Optional[str] = pydantic.Field(None, description='The asset property value is an integer. You must use an expression, and the evaluated result should be an integer.\n')
    string_value: typing.Optional[str] = pydantic.Field(None, description='The asset property value is a string. You must use an expression, and the evaluated result should be a string.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-assetpropertyvariant.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    asset_property_variant_property = iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n        boolean_value="booleanValue",\n        double_value="doubleValue",\n        integer_value="integerValue",\n        string_value="stringValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['boolean_value', 'double_value', 'integer_value', 'string_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.AssetPropertyVariantProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.ClearTimerProperty
class CfnDetectorModel_ClearTimerPropertyDef(BaseStruct):
    timer_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the timer to clear.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-cleartimer.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    clear_timer_property = iotevents.CfnDetectorModel.ClearTimerProperty(\n        timer_name="timerName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['timer_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.ClearTimerProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.DetectorModelDefinitionProperty
class CfnDetectorModel_DetectorModelDefinitionPropertyDef(BaseStruct):
    initial_state_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The state that is entered at the creation of each detector (instance).\n')
    states: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_StatePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about the states of the detector.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-detectormodeldefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['initial_state_name', 'states']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.DetectorModelDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.DynamoDBProperty
class CfnDetectorModel_DynamoDBPropertyDef(BaseStruct):
    hash_key_field: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the hash key (also called the partition key). The ``hashKeyField`` value must match the partition key of the target DynamoDB table.\n')
    hash_key_value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value of the hash key (also called the partition key).\n')
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the DynamoDB table. The ``tableName`` value must match the table name of the target DynamoDB table.\n')
    hash_key_type: typing.Optional[str] = pydantic.Field(None, description="The data type for the hash key (also called the partition key). You can specify the following values:. - ``'STRING'`` - The hash key is a string. - ``'NUMBER'`` - The hash key is a number. If you don't specify ``hashKeyType`` , the default value is ``'STRING'`` .\n")
    operation: typing.Optional[str] = pydantic.Field(None, description="The type of operation to perform. You can specify the following values:. - ``'INSERT'`` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key. - ``'UPDATE'`` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key. - ``'DELETE'`` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key. If you don't specify this parameter, AWS IoT Events triggers the ``'INSERT'`` operation.\n")
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information needed to configure the payload. By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use ``contentExpression`` .\n')
    payload_field: typing.Optional[str] = pydantic.Field(None, description="The name of the DynamoDB column that receives the action payload. If you don't specify this parameter, the name of the DynamoDB column is ``payload`` .\n")
    range_key_field: typing.Optional[str] = pydantic.Field(None, description='The name of the range key (also called the sort key). The ``rangeKeyField`` value must match the sort key of the target DynamoDB table.\n')
    range_key_type: typing.Optional[str] = pydantic.Field(None, description="The data type for the range key (also called the sort key), You can specify the following values:. - ``'STRING'`` - The range key is a string. - ``'NUMBER'`` - The range key is number. If you don't specify ``rangeKeyField`` , the default value is ``'STRING'`` .\n")
    range_key_value: typing.Optional[str] = pydantic.Field(None, description='The value of the range key (also called the sort key).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-dynamodb.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    dynamo_dBProperty = iotevents.CfnDetectorModel.DynamoDBProperty(\n        hash_key_field="hashKeyField",\n        hash_key_value="hashKeyValue",\n        table_name="tableName",\n\n        # the properties below are optional\n        hash_key_type="hashKeyType",\n        operation="operation",\n        payload=iotevents.CfnDetectorModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        ),\n        payload_field="payloadField",\n        range_key_field="rangeKeyField",\n        range_key_type="rangeKeyType",\n        range_key_value="rangeKeyValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hash_key_field', 'hash_key_value', 'table_name', 'hash_key_type', 'operation', 'payload', 'payload_field', 'range_key_field', 'range_key_type', 'range_key_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.DynamoDBProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.DynamoDBv2Property
class CfnDetectorModel_DynamoDBv2PropertyDef(BaseStruct):
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the DynamoDB table.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information needed to configure the payload. By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use ``contentExpression`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-dynamodbv2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    dynamo_dBv2_property = iotevents.CfnDetectorModel.DynamoDBv2Property(\n        table_name="tableName",\n\n        # the properties below are optional\n        payload=iotevents.CfnDetectorModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['table_name', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.DynamoDBv2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.EventProperty
class CfnDetectorModel_EventPropertyDef(BaseStruct):
    event_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the event.\n')
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The actions to be performed.\n')
    condition: typing.Optional[str] = pydantic.Field(None, description='Optional. The Boolean expression that, when TRUE, causes the ``actions`` to be performed. If not present, the actions are performed (=TRUE). If the expression result is not a Boolean value, the actions are not performed (=FALSE).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-event.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    event_property = iotevents.CfnDetectorModel.EventProperty(\n        event_name="eventName",\n\n        # the properties below are optional\n        actions=[iotevents.CfnDetectorModel.ActionProperty(\n            clear_timer=iotevents.CfnDetectorModel.ClearTimerProperty(\n                timer_name="timerName"\n            ),\n            dynamo_db=iotevents.CfnDetectorModel.DynamoDBProperty(\n                hash_key_field="hashKeyField",\n                hash_key_value="hashKeyValue",\n                table_name="tableName",\n\n                # the properties below are optional\n                hash_key_type="hashKeyType",\n                operation="operation",\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                ),\n                payload_field="payloadField",\n                range_key_field="rangeKeyField",\n                range_key_type="rangeKeyType",\n                range_key_value="rangeKeyValue"\n            ),\n            dynamo_dBv2=iotevents.CfnDetectorModel.DynamoDBv2Property(\n                table_name="tableName",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            firehose=iotevents.CfnDetectorModel.FirehoseProperty(\n                delivery_stream_name="deliveryStreamName",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                ),\n                separator="separator"\n            ),\n            iot_events=iotevents.CfnDetectorModel.IotEventsProperty(\n                input_name="inputName",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            iot_site_wise=iotevents.CfnDetectorModel.IotSiteWiseProperty(\n                property_value=iotevents.CfnDetectorModel.AssetPropertyValueProperty(\n                    value=iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n                        boolean_value="booleanValue",\n                        double_value="doubleValue",\n                        integer_value="integerValue",\n                        string_value="stringValue"\n                    ),\n\n                    # the properties below are optional\n                    quality="quality",\n                    timestamp=iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n                        time_in_seconds="timeInSeconds",\n\n                        # the properties below are optional\n                        offset_in_nanos="offsetInNanos"\n                    )\n                ),\n\n                # the properties below are optional\n                asset_id="assetId",\n                entry_id="entryId",\n                property_alias="propertyAlias",\n                property_id="propertyId"\n            ),\n            iot_topic_publish=iotevents.CfnDetectorModel.IotTopicPublishProperty(\n                mqtt_topic="mqttTopic",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            lambda_=iotevents.CfnDetectorModel.LambdaProperty(\n                function_arn="functionArn",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            reset_timer=iotevents.CfnDetectorModel.ResetTimerProperty(\n                timer_name="timerName"\n            ),\n            set_timer=iotevents.CfnDetectorModel.SetTimerProperty(\n                timer_name="timerName",\n\n                # the properties below are optional\n                duration_expression="durationExpression",\n                seconds=123\n            ),\n            set_variable=iotevents.CfnDetectorModel.SetVariableProperty(\n                value="value",\n                variable_name="variableName"\n            ),\n            sns=iotevents.CfnDetectorModel.SnsProperty(\n                target_arn="targetArn",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            sqs=iotevents.CfnDetectorModel.SqsProperty(\n                queue_url="queueUrl",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                ),\n                use_base64=False\n            )\n        )],\n        condition="condition"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_name', 'actions', 'condition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.EventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.FirehoseProperty
class CfnDetectorModel_FirehosePropertyDef(BaseStruct):
    delivery_stream_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Kinesis Data Firehose delivery stream where the data is written.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message to an Amazon Data Firehose delivery stream.\n')
    separator: typing.Optional[str] = pydantic.Field(None, description='A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: \'\\n\' (newline), \'\\t\' (tab), \'\\r\\n\' (Windows newline), \',\' (comma).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-firehose.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    firehose_property = iotevents.CfnDetectorModel.FirehoseProperty(\n        delivery_stream_name="deliveryStreamName",\n\n        # the properties below are optional\n        payload=iotevents.CfnDetectorModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        ),\n        separator="separator"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delivery_stream_name', 'payload', 'separator']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.FirehoseProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.IotEventsProperty
class CfnDetectorModel_IotEventsPropertyDef(BaseStruct):
    input_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the AWS IoT Events input where the data is sent.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message to an AWS IoT Events input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-iotevents.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    iot_events_property = iotevents.CfnDetectorModel.IotEventsProperty(\n        input_name="inputName",\n\n        # the properties below are optional\n        payload=iotevents.CfnDetectorModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['input_name', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.IotEventsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.IotSiteWiseProperty
class CfnDetectorModel_IotSiteWisePropertyDef(BaseStruct):
    property_value: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_AssetPropertyValuePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information.\n')
    asset_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the asset that has the specified property.\n')
    entry_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier.\n')
    property_alias: typing.Optional[str] = pydantic.Field(None, description='The alias of the asset property.\n')
    property_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the asset property.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-iotsitewise.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    iot_site_wise_property = iotevents.CfnDetectorModel.IotSiteWiseProperty(\n        property_value=iotevents.CfnDetectorModel.AssetPropertyValueProperty(\n            value=iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n                boolean_value="booleanValue",\n                double_value="doubleValue",\n                integer_value="integerValue",\n                string_value="stringValue"\n            ),\n\n            # the properties below are optional\n            quality="quality",\n            timestamp=iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n                time_in_seconds="timeInSeconds",\n\n                # the properties below are optional\n                offset_in_nanos="offsetInNanos"\n            )\n        ),\n\n        # the properties below are optional\n        asset_id="assetId",\n        entry_id="entryId",\n        property_alias="propertyAlias",\n        property_id="propertyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['property_value', 'asset_id', 'entry_id', 'property_alias', 'property_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.IotSiteWiseProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.IotTopicPublishProperty
class CfnDetectorModel_IotTopicPublishPropertyDef(BaseStruct):
    mqtt_topic: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The MQTT topic of the message. You can use a string expression that includes variables ( ``$variable.<variable-name>`` ) and input values ( ``$input.<input-name>.<path-to-datum>`` ) as the topic string.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you publish a message to an AWS IoT Core topic.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-iottopicpublish.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    iot_topic_publish_property = iotevents.CfnDetectorModel.IotTopicPublishProperty(\n        mqtt_topic="mqttTopic",\n\n        # the properties below are optional\n        payload=iotevents.CfnDetectorModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mqtt_topic', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.IotTopicPublishProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.LambdaProperty
class CfnDetectorModel_LambdaPropertyDef(BaseStruct):
    function_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Lambda function that is executed.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message to a Lambda function.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-lambda.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    lambda_property = iotevents.CfnDetectorModel.LambdaProperty(\n        function_arn="functionArn",\n\n        # the properties below are optional\n        payload=iotevents.CfnDetectorModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['function_arn', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.LambdaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.OnEnterProperty
class CfnDetectorModel_OnEnterPropertyDef(BaseStruct):
    events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_EventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the actions that are performed when the state is entered and the ``condition`` is ``TRUE`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-onenter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    on_enter_property = iotevents.CfnDetectorModel.OnEnterProperty(\n        events=[iotevents.CfnDetectorModel.EventProperty(\n            event_name="eventName",\n\n            # the properties below are optional\n            actions=[iotevents.CfnDetectorModel.ActionProperty(\n                clear_timer=iotevents.CfnDetectorModel.ClearTimerProperty(\n                    timer_name="timerName"\n                ),\n                dynamo_db=iotevents.CfnDetectorModel.DynamoDBProperty(\n                    hash_key_field="hashKeyField",\n                    hash_key_value="hashKeyValue",\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    hash_key_type="hashKeyType",\n                    operation="operation",\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    payload_field="payloadField",\n                    range_key_field="rangeKeyField",\n                    range_key_type="rangeKeyType",\n                    range_key_value="rangeKeyValue"\n                ),\n                dynamo_dBv2=iotevents.CfnDetectorModel.DynamoDBv2Property(\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                firehose=iotevents.CfnDetectorModel.FirehoseProperty(\n                    delivery_stream_name="deliveryStreamName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    separator="separator"\n                ),\n                iot_events=iotevents.CfnDetectorModel.IotEventsProperty(\n                    input_name="inputName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                iot_site_wise=iotevents.CfnDetectorModel.IotSiteWiseProperty(\n                    property_value=iotevents.CfnDetectorModel.AssetPropertyValueProperty(\n                        value=iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n                            boolean_value="booleanValue",\n                            double_value="doubleValue",\n                            integer_value="integerValue",\n                            string_value="stringValue"\n                        ),\n\n                        # the properties below are optional\n                        quality="quality",\n                        timestamp=iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n                            time_in_seconds="timeInSeconds",\n\n                            # the properties below are optional\n                            offset_in_nanos="offsetInNanos"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    asset_id="assetId",\n                    entry_id="entryId",\n                    property_alias="propertyAlias",\n                    property_id="propertyId"\n                ),\n                iot_topic_publish=iotevents.CfnDetectorModel.IotTopicPublishProperty(\n                    mqtt_topic="mqttTopic",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                lambda_=iotevents.CfnDetectorModel.LambdaProperty(\n                    function_arn="functionArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                reset_timer=iotevents.CfnDetectorModel.ResetTimerProperty(\n                    timer_name="timerName"\n                ),\n                set_timer=iotevents.CfnDetectorModel.SetTimerProperty(\n                    timer_name="timerName",\n\n                    # the properties below are optional\n                    duration_expression="durationExpression",\n                    seconds=123\n                ),\n                set_variable=iotevents.CfnDetectorModel.SetVariableProperty(\n                    value="value",\n                    variable_name="variableName"\n                ),\n                sns=iotevents.CfnDetectorModel.SnsProperty(\n                    target_arn="targetArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                sqs=iotevents.CfnDetectorModel.SqsProperty(\n                    queue_url="queueUrl",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    use_base64=False\n                )\n            )],\n            condition="condition"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['events']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.OnEnterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.OnExitProperty
class CfnDetectorModel_OnExitPropertyDef(BaseStruct):
    events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_EventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the ``actions`` that are performed when the state is exited and the ``condition`` is ``TRUE`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-onexit.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    on_exit_property = iotevents.CfnDetectorModel.OnExitProperty(\n        events=[iotevents.CfnDetectorModel.EventProperty(\n            event_name="eventName",\n\n            # the properties below are optional\n            actions=[iotevents.CfnDetectorModel.ActionProperty(\n                clear_timer=iotevents.CfnDetectorModel.ClearTimerProperty(\n                    timer_name="timerName"\n                ),\n                dynamo_db=iotevents.CfnDetectorModel.DynamoDBProperty(\n                    hash_key_field="hashKeyField",\n                    hash_key_value="hashKeyValue",\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    hash_key_type="hashKeyType",\n                    operation="operation",\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    payload_field="payloadField",\n                    range_key_field="rangeKeyField",\n                    range_key_type="rangeKeyType",\n                    range_key_value="rangeKeyValue"\n                ),\n                dynamo_dBv2=iotevents.CfnDetectorModel.DynamoDBv2Property(\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                firehose=iotevents.CfnDetectorModel.FirehoseProperty(\n                    delivery_stream_name="deliveryStreamName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    separator="separator"\n                ),\n                iot_events=iotevents.CfnDetectorModel.IotEventsProperty(\n                    input_name="inputName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                iot_site_wise=iotevents.CfnDetectorModel.IotSiteWiseProperty(\n                    property_value=iotevents.CfnDetectorModel.AssetPropertyValueProperty(\n                        value=iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n                            boolean_value="booleanValue",\n                            double_value="doubleValue",\n                            integer_value="integerValue",\n                            string_value="stringValue"\n                        ),\n\n                        # the properties below are optional\n                        quality="quality",\n                        timestamp=iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n                            time_in_seconds="timeInSeconds",\n\n                            # the properties below are optional\n                            offset_in_nanos="offsetInNanos"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    asset_id="assetId",\n                    entry_id="entryId",\n                    property_alias="propertyAlias",\n                    property_id="propertyId"\n                ),\n                iot_topic_publish=iotevents.CfnDetectorModel.IotTopicPublishProperty(\n                    mqtt_topic="mqttTopic",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                lambda_=iotevents.CfnDetectorModel.LambdaProperty(\n                    function_arn="functionArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                reset_timer=iotevents.CfnDetectorModel.ResetTimerProperty(\n                    timer_name="timerName"\n                ),\n                set_timer=iotevents.CfnDetectorModel.SetTimerProperty(\n                    timer_name="timerName",\n\n                    # the properties below are optional\n                    duration_expression="durationExpression",\n                    seconds=123\n                ),\n                set_variable=iotevents.CfnDetectorModel.SetVariableProperty(\n                    value="value",\n                    variable_name="variableName"\n                ),\n                sns=iotevents.CfnDetectorModel.SnsProperty(\n                    target_arn="targetArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                sqs=iotevents.CfnDetectorModel.SqsProperty(\n                    queue_url="queueUrl",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    use_base64=False\n                )\n            )],\n            condition="condition"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['events']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.OnExitProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.OnInputProperty
class CfnDetectorModel_OnInputPropertyDef(BaseStruct):
    events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_EventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the actions performed when the ``condition`` evaluates to TRUE.\n')
    transition_events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_TransitionEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the actions performed, and the next state entered, when a ``condition`` evaluates to TRUE.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-oninput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    on_input_property = iotevents.CfnDetectorModel.OnInputProperty(\n        events=[iotevents.CfnDetectorModel.EventProperty(\n            event_name="eventName",\n\n            # the properties below are optional\n            actions=[iotevents.CfnDetectorModel.ActionProperty(\n                clear_timer=iotevents.CfnDetectorModel.ClearTimerProperty(\n                    timer_name="timerName"\n                ),\n                dynamo_db=iotevents.CfnDetectorModel.DynamoDBProperty(\n                    hash_key_field="hashKeyField",\n                    hash_key_value="hashKeyValue",\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    hash_key_type="hashKeyType",\n                    operation="operation",\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    payload_field="payloadField",\n                    range_key_field="rangeKeyField",\n                    range_key_type="rangeKeyType",\n                    range_key_value="rangeKeyValue"\n                ),\n                dynamo_dBv2=iotevents.CfnDetectorModel.DynamoDBv2Property(\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                firehose=iotevents.CfnDetectorModel.FirehoseProperty(\n                    delivery_stream_name="deliveryStreamName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    separator="separator"\n                ),\n                iot_events=iotevents.CfnDetectorModel.IotEventsProperty(\n                    input_name="inputName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                iot_site_wise=iotevents.CfnDetectorModel.IotSiteWiseProperty(\n                    property_value=iotevents.CfnDetectorModel.AssetPropertyValueProperty(\n                        value=iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n                            boolean_value="booleanValue",\n                            double_value="doubleValue",\n                            integer_value="integerValue",\n                            string_value="stringValue"\n                        ),\n\n                        # the properties below are optional\n                        quality="quality",\n                        timestamp=iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n                            time_in_seconds="timeInSeconds",\n\n                            # the properties below are optional\n                            offset_in_nanos="offsetInNanos"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    asset_id="assetId",\n                    entry_id="entryId",\n                    property_alias="propertyAlias",\n                    property_id="propertyId"\n                ),\n                iot_topic_publish=iotevents.CfnDetectorModel.IotTopicPublishProperty(\n                    mqtt_topic="mqttTopic",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                lambda_=iotevents.CfnDetectorModel.LambdaProperty(\n                    function_arn="functionArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                reset_timer=iotevents.CfnDetectorModel.ResetTimerProperty(\n                    timer_name="timerName"\n                ),\n                set_timer=iotevents.CfnDetectorModel.SetTimerProperty(\n                    timer_name="timerName",\n\n                    # the properties below are optional\n                    duration_expression="durationExpression",\n                    seconds=123\n                ),\n                set_variable=iotevents.CfnDetectorModel.SetVariableProperty(\n                    value="value",\n                    variable_name="variableName"\n                ),\n                sns=iotevents.CfnDetectorModel.SnsProperty(\n                    target_arn="targetArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                sqs=iotevents.CfnDetectorModel.SqsProperty(\n                    queue_url="queueUrl",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    use_base64=False\n                )\n            )],\n            condition="condition"\n        )],\n        transition_events=[iotevents.CfnDetectorModel.TransitionEventProperty(\n            condition="condition",\n            event_name="eventName",\n            next_state="nextState",\n\n            # the properties below are optional\n            actions=[iotevents.CfnDetectorModel.ActionProperty(\n                clear_timer=iotevents.CfnDetectorModel.ClearTimerProperty(\n                    timer_name="timerName"\n                ),\n                dynamo_db=iotevents.CfnDetectorModel.DynamoDBProperty(\n                    hash_key_field="hashKeyField",\n                    hash_key_value="hashKeyValue",\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    hash_key_type="hashKeyType",\n                    operation="operation",\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    payload_field="payloadField",\n                    range_key_field="rangeKeyField",\n                    range_key_type="rangeKeyType",\n                    range_key_value="rangeKeyValue"\n                ),\n                dynamo_dBv2=iotevents.CfnDetectorModel.DynamoDBv2Property(\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                firehose=iotevents.CfnDetectorModel.FirehoseProperty(\n                    delivery_stream_name="deliveryStreamName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    separator="separator"\n                ),\n                iot_events=iotevents.CfnDetectorModel.IotEventsProperty(\n                    input_name="inputName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                iot_site_wise=iotevents.CfnDetectorModel.IotSiteWiseProperty(\n                    property_value=iotevents.CfnDetectorModel.AssetPropertyValueProperty(\n                        value=iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n                            boolean_value="booleanValue",\n                            double_value="doubleValue",\n                            integer_value="integerValue",\n                            string_value="stringValue"\n                        ),\n\n                        # the properties below are optional\n                        quality="quality",\n                        timestamp=iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n                            time_in_seconds="timeInSeconds",\n\n                            # the properties below are optional\n                            offset_in_nanos="offsetInNanos"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    asset_id="assetId",\n                    entry_id="entryId",\n                    property_alias="propertyAlias",\n                    property_id="propertyId"\n                ),\n                iot_topic_publish=iotevents.CfnDetectorModel.IotTopicPublishProperty(\n                    mqtt_topic="mqttTopic",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                lambda_=iotevents.CfnDetectorModel.LambdaProperty(\n                    function_arn="functionArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                reset_timer=iotevents.CfnDetectorModel.ResetTimerProperty(\n                    timer_name="timerName"\n                ),\n                set_timer=iotevents.CfnDetectorModel.SetTimerProperty(\n                    timer_name="timerName",\n\n                    # the properties below are optional\n                    duration_expression="durationExpression",\n                    seconds=123\n                ),\n                set_variable=iotevents.CfnDetectorModel.SetVariableProperty(\n                    value="value",\n                    variable_name="variableName"\n                ),\n                sns=iotevents.CfnDetectorModel.SnsProperty(\n                    target_arn="targetArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                sqs=iotevents.CfnDetectorModel.SqsProperty(\n                    queue_url="queueUrl",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnDetectorModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    use_base64=False\n                )\n            )]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['events', 'transition_events']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.OnInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.PayloadProperty
class CfnDetectorModel_PayloadPropertyDef(BaseStruct):
    content_expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The content of the payload. You can use a string expression that includes quoted strings ( ``'<string>'`` ), variables ( ``$variable.<variable-name>`` ), input values ( ``$input.<input-name>.<path-to-datum>`` ), string concatenations, and quoted strings that contain ``${}`` as the content. The recommended maximum size of a content expression is 1 KB.\n")
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value of the payload type can be either ``STRING`` or ``JSON`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-payload.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    payload_property = iotevents.CfnDetectorModel.PayloadProperty(\n        content_expression="contentExpression",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_expression', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.PayloadProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.ResetTimerProperty
class CfnDetectorModel_ResetTimerPropertyDef(BaseStruct):
    timer_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the timer to reset.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-resettimer.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    reset_timer_property = iotevents.CfnDetectorModel.ResetTimerProperty(\n        timer_name="timerName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['timer_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.ResetTimerProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.SetTimerProperty
class CfnDetectorModel_SetTimerPropertyDef(BaseStruct):
    timer_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the timer.\n')
    duration_expression: typing.Optional[str] = pydantic.Field(None, description='The duration of the timer, in seconds. You can use a string expression that includes numbers, variables ( ``$variable.<variable-name>`` ), and input values ( ``$input.<input-name>.<path-to-datum>`` ) as the duration. The range of the duration is 1-31622400 seconds. To ensure accuracy, the minimum duration is 60 seconds. The evaluated result of the duration is rounded down to the nearest whole number.\n')
    seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The number of seconds until the timer expires. The minimum value is 60 seconds to ensure accuracy. The maximum value is 31622400 seconds.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-settimer.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    set_timer_property = iotevents.CfnDetectorModel.SetTimerProperty(\n        timer_name="timerName",\n\n        # the properties below are optional\n        duration_expression="durationExpression",\n        seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['timer_name', 'duration_expression', 'seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.SetTimerProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.SetVariableProperty
class CfnDetectorModel_SetVariablePropertyDef(BaseStruct):
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The new value of the variable.\n')
    variable_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the variable.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-setvariable.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    set_variable_property = iotevents.CfnDetectorModel.SetVariableProperty(\n        value="value",\n        variable_name="variableName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value', 'variable_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.SetVariableProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.SnsProperty
class CfnDetectorModel_SnsPropertyDef(BaseStruct):
    target_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Amazon SNS target where the message is sent.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message as an Amazon SNS push notification.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-sns.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    sns_property = iotevents.CfnDetectorModel.SnsProperty(\n        target_arn="targetArn",\n\n        # the properties below are optional\n        payload=iotevents.CfnDetectorModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_arn', 'payload']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.SnsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.SqsProperty
class CfnDetectorModel_SqsPropertyDef(BaseStruct):
    queue_url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URL of the SQS queue where the data is written.\n')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can configure the action payload when you send a message to an Amazon SQS queue.\n')
    use_base64: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-sqs.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    sqs_property = iotevents.CfnDetectorModel.SqsProperty(\n        queue_url="queueUrl",\n\n        # the properties below are optional\n        payload=iotevents.CfnDetectorModel.PayloadProperty(\n            content_expression="contentExpression",\n            type="type"\n        ),\n        use_base64=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['queue_url', 'payload', 'use_base64']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.SqsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.StateProperty
class CfnDetectorModel_StatePropertyDef(BaseStruct):
    state_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the state.\n')
    on_enter: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_OnEnterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='When entering this state, perform these ``actions`` if the ``condition`` is TRUE.\n')
    on_exit: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_OnExitPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='When exiting this state, perform these ``actions`` if the specified ``condition`` is ``TRUE`` .\n')
    on_input: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_OnInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='When an input is received and the ``condition`` is TRUE, perform the specified ``actions`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-state.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['state_name', 'on_enter', 'on_exit', 'on_input']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.StateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel.TransitionEventProperty
class CfnDetectorModel_TransitionEventPropertyDef(BaseStruct):
    condition: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Required. A Boolean expression that when TRUE causes the actions to be performed and the ``nextState`` to be entered.\n')
    event_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the transition event.\n')
    next_state: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The next state to enter.\n')
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The actions to be performed.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-detectormodel-transitionevent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    transition_event_property = iotevents.CfnDetectorModel.TransitionEventProperty(\n        condition="condition",\n        event_name="eventName",\n        next_state="nextState",\n\n        # the properties below are optional\n        actions=[iotevents.CfnDetectorModel.ActionProperty(\n            clear_timer=iotevents.CfnDetectorModel.ClearTimerProperty(\n                timer_name="timerName"\n            ),\n            dynamo_db=iotevents.CfnDetectorModel.DynamoDBProperty(\n                hash_key_field="hashKeyField",\n                hash_key_value="hashKeyValue",\n                table_name="tableName",\n\n                # the properties below are optional\n                hash_key_type="hashKeyType",\n                operation="operation",\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                ),\n                payload_field="payloadField",\n                range_key_field="rangeKeyField",\n                range_key_type="rangeKeyType",\n                range_key_value="rangeKeyValue"\n            ),\n            dynamo_dBv2=iotevents.CfnDetectorModel.DynamoDBv2Property(\n                table_name="tableName",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            firehose=iotevents.CfnDetectorModel.FirehoseProperty(\n                delivery_stream_name="deliveryStreamName",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                ),\n                separator="separator"\n            ),\n            iot_events=iotevents.CfnDetectorModel.IotEventsProperty(\n                input_name="inputName",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            iot_site_wise=iotevents.CfnDetectorModel.IotSiteWiseProperty(\n                property_value=iotevents.CfnDetectorModel.AssetPropertyValueProperty(\n                    value=iotevents.CfnDetectorModel.AssetPropertyVariantProperty(\n                        boolean_value="booleanValue",\n                        double_value="doubleValue",\n                        integer_value="integerValue",\n                        string_value="stringValue"\n                    ),\n\n                    # the properties below are optional\n                    quality="quality",\n                    timestamp=iotevents.CfnDetectorModel.AssetPropertyTimestampProperty(\n                        time_in_seconds="timeInSeconds",\n\n                        # the properties below are optional\n                        offset_in_nanos="offsetInNanos"\n                    )\n                ),\n\n                # the properties below are optional\n                asset_id="assetId",\n                entry_id="entryId",\n                property_alias="propertyAlias",\n                property_id="propertyId"\n            ),\n            iot_topic_publish=iotevents.CfnDetectorModel.IotTopicPublishProperty(\n                mqtt_topic="mqttTopic",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            lambda_=iotevents.CfnDetectorModel.LambdaProperty(\n                function_arn="functionArn",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            reset_timer=iotevents.CfnDetectorModel.ResetTimerProperty(\n                timer_name="timerName"\n            ),\n            set_timer=iotevents.CfnDetectorModel.SetTimerProperty(\n                timer_name="timerName",\n\n                # the properties below are optional\n                duration_expression="durationExpression",\n                seconds=123\n            ),\n            set_variable=iotevents.CfnDetectorModel.SetVariableProperty(\n                value="value",\n                variable_name="variableName"\n            ),\n            sns=iotevents.CfnDetectorModel.SnsProperty(\n                target_arn="targetArn",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                )\n            ),\n            sqs=iotevents.CfnDetectorModel.SqsProperty(\n                queue_url="queueUrl",\n\n                # the properties below are optional\n                payload=iotevents.CfnDetectorModel.PayloadProperty(\n                    content_expression="contentExpression",\n                    type="type"\n                ),\n                use_base64=False\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['condition', 'event_name', 'next_state', 'actions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel.TransitionEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnInput.AttributeProperty
class CfnInput_AttributePropertyDef(BaseStruct):
    json_path: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events ( ``BatchPutMessage`` ). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the ``condition`` expressions used by detectors. Syntax: ``<field-name>.<field-name>...``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-input-attribute.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    attribute_property = iotevents.CfnInput.AttributeProperty(\n        json_path="jsonPath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['json_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnInput.AttributeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnInput.InputDefinitionProperty
class CfnInput_InputDefinitionPropertyDef(BaseStruct):
    attributes: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnInput_AttributePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using ``BatchPutMessage`` . Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the ``condition`` expressions used by detectors that monitor this input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotevents-input-inputdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    input_definition_property = iotevents.CfnInput.InputDefinitionProperty(\n        attributes=[iotevents.CfnInput.AttributeProperty(\n            json_path="jsonPath"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnInput.InputDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModel
class CfnAlarmModelDef(BaseCfnResource):
    alarm_rule: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AlarmRulePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines when your alarm is invoked.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see `Amazon Resource Names (ARNs) <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_ in the *AWS General Reference* .\n')
    alarm_capabilities: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AlarmCapabilitiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains the configuration information of alarm state changes.\n')
    alarm_event_actions: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AlarmEventActionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about one or more alarm actions.\n')
    alarm_model_description: typing.Optional[str] = pydantic.Field(None, description='The description of the alarm model.\n')
    alarm_model_name: typing.Optional[str] = pydantic.Field(None, description='The name of the alarm model.\n')
    key: typing.Optional[str] = pydantic.Field(None, description='An input attribute used as a key to create an alarm. AWS IoT Events routes `inputs <https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html>`_ associated with this key to the alarm.\n')
    severity: typing.Union[int, float, None] = pydantic.Field(None, description='A non-negative integer that reflects the severity level of the alarm.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see `Tagging your AWS IoT Events resources <https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html>`_ in the *AWS IoT Events Developer Guide* . You can create up to 50 tags for one alarm model.')
    _init_params: typing.ClassVar[list[str]] = ['alarm_rule', 'role_arn', 'alarm_capabilities', 'alarm_event_actions', 'alarm_model_description', 'alarm_model_name', 'key', 'severity', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AcknowledgeFlowProperty', 'AlarmActionProperty', 'AlarmCapabilitiesProperty', 'AlarmEventActionsProperty', 'AlarmRuleProperty', 'AssetPropertyTimestampProperty', 'AssetPropertyValueProperty', 'AssetPropertyVariantProperty', 'DynamoDBProperty', 'DynamoDBv2Property', 'FirehoseProperty', 'InitializationConfigurationProperty', 'IotEventsProperty', 'IotSiteWiseProperty', 'IotTopicPublishProperty', 'LambdaProperty', 'PayloadProperty', 'SimpleRuleProperty', 'SnsProperty', 'SqsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotevents.CfnAlarmModelDefConfig] = pydantic.Field(None)


class CfnAlarmModelDefConfig(pydantic.BaseModel):
    AcknowledgeFlowProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAcknowledgeflowpropertyParams]] = pydantic.Field(None, description='')
    AlarmActionProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAlarmactionpropertyParams]] = pydantic.Field(None, description='')
    AlarmCapabilitiesProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAlarmcapabilitiespropertyParams]] = pydantic.Field(None, description='')
    AlarmEventActionsProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAlarmeventactionspropertyParams]] = pydantic.Field(None, description='')
    AlarmRuleProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAlarmrulepropertyParams]] = pydantic.Field(None, description='')
    AssetPropertyTimestampProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAssetpropertytimestamppropertyParams]] = pydantic.Field(None, description='')
    AssetPropertyValueProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAssetpropertyvaluepropertyParams]] = pydantic.Field(None, description='')
    AssetPropertyVariantProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAssetpropertyvariantpropertyParams]] = pydantic.Field(None, description='')
    DynamoDBProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefDynamodbpropertyParams]] = pydantic.Field(None, description='')
    DynamoDBv2Property: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefDynamodbv2PropertyParams]] = pydantic.Field(None, description='')
    FirehoseProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefFirehosepropertyParams]] = pydantic.Field(None, description='')
    InitializationConfigurationProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefInitializationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    IotEventsProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefIoteventspropertyParams]] = pydantic.Field(None, description='')
    IotSiteWiseProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefIotsitewisepropertyParams]] = pydantic.Field(None, description='')
    IotTopicPublishProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefIottopicpublishpropertyParams]] = pydantic.Field(None, description='')
    LambdaProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefLambdapropertyParams]] = pydantic.Field(None, description='')
    PayloadProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefPayloadpropertyParams]] = pydantic.Field(None, description='')
    SimpleRuleProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefSimplerulepropertyParams]] = pydantic.Field(None, description='')
    SnsProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefSnspropertyParams]] = pydantic.Field(None, description='')
    SqsProperty: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefSqspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotevents.CfnAlarmModelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAlarmModelDefAcknowledgeflowpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefAlarmactionpropertyParams(pydantic.BaseModel):
    dynamo_db: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_DynamoDBPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_d_bv2: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_DynamoDBv2PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    firehose: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_FirehosePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    iot_events: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_IotEventsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    iot_site_wise: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_IotSiteWisePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    iot_topic_publish: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_IotTopicPublishPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    lambda_: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_LambdaPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sns: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_SnsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sqs: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_SqsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefAlarmcapabilitiespropertyParams(pydantic.BaseModel):
    acknowledge_flow: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AcknowledgeFlowPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    initialization_configuration: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_InitializationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefAlarmeventactionspropertyParams(pydantic.BaseModel):
    alarm_actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AlarmActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefAlarmrulepropertyParams(pydantic.BaseModel):
    simple_rule: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_SimpleRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefAssetpropertytimestamppropertyParams(pydantic.BaseModel):
    time_in_seconds: str = pydantic.Field(..., description='')
    offset_in_nanos: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefAssetpropertyvaluepropertyParams(pydantic.BaseModel):
    value: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AssetPropertyVariantPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    quality: typing.Optional[str] = pydantic.Field(None, description='')
    timestamp: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AssetPropertyTimestampPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefAssetpropertyvariantpropertyParams(pydantic.BaseModel):
    boolean_value: typing.Optional[str] = pydantic.Field(None, description='')
    double_value: typing.Optional[str] = pydantic.Field(None, description='')
    integer_value: typing.Optional[str] = pydantic.Field(None, description='')
    string_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefDynamodbpropertyParams(pydantic.BaseModel):
    hash_key_field: str = pydantic.Field(..., description='')
    hash_key_value: str = pydantic.Field(..., description='')
    table_name: str = pydantic.Field(..., description='')
    hash_key_type: typing.Optional[str] = pydantic.Field(None, description='')
    operation: typing.Optional[str] = pydantic.Field(None, description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    payload_field: typing.Optional[str] = pydantic.Field(None, description='')
    range_key_field: typing.Optional[str] = pydantic.Field(None, description='')
    range_key_type: typing.Optional[str] = pydantic.Field(None, description='')
    range_key_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefDynamodbv2PropertyParams(pydantic.BaseModel):
    table_name: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefFirehosepropertyParams(pydantic.BaseModel):
    delivery_stream_name: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    separator: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefInitializationconfigurationpropertyParams(pydantic.BaseModel):
    disabled_on_initialization: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnAlarmModelDefIoteventspropertyParams(pydantic.BaseModel):
    input_name: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefIotsitewisepropertyParams(pydantic.BaseModel):
    asset_id: typing.Optional[str] = pydantic.Field(None, description='')
    entry_id: typing.Optional[str] = pydantic.Field(None, description='')
    property_alias: typing.Optional[str] = pydantic.Field(None, description='')
    property_id: typing.Optional[str] = pydantic.Field(None, description='')
    property_value: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AssetPropertyValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefIottopicpublishpropertyParams(pydantic.BaseModel):
    mqtt_topic: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefLambdapropertyParams(pydantic.BaseModel):
    function_arn: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefPayloadpropertyParams(pydantic.BaseModel):
    content_expression: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnAlarmModelDefSimplerulepropertyParams(pydantic.BaseModel):
    comparison_operator: str = pydantic.Field(..., description='')
    input_property: str = pydantic.Field(..., description='')
    threshold: str = pydantic.Field(..., description='')
    ...

class CfnAlarmModelDefSnspropertyParams(pydantic.BaseModel):
    target_arn: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefSqspropertyParams(pydantic.BaseModel):
    queue_url: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    use_base64: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnAlarmModelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAlarmModelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAlarmModelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAlarmModelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAlarmModelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAlarmModelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAlarmModelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAlarmModelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAlarmModelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAlarmModelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAlarmModelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAlarmModelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAlarmModelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAlarmModelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModel
class CfnDetectorModelDef(BaseCfnResource):
    detector_model_definition: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_DetectorModelDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information that defines how a detector operates.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the role that grants permission to AWS IoT Events to perform its operations.\n')
    detector_model_description: typing.Optional[str] = pydantic.Field(None, description='A brief description of the detector model.\n')
    detector_model_name: typing.Optional[str] = pydantic.Field(None, description='The name of the detector model.\n')
    evaluation_method: typing.Optional[str] = pydantic.Field(None, description='Information about the order in which events are evaluated and how actions are executed.\n')
    key: typing.Optional[str] = pydantic.Field(None, description='The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information. This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['detector_model_definition', 'role_arn', 'detector_model_description', 'detector_model_name', 'evaluation_method', 'key', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ActionProperty', 'AssetPropertyTimestampProperty', 'AssetPropertyValueProperty', 'AssetPropertyVariantProperty', 'ClearTimerProperty', 'DetectorModelDefinitionProperty', 'DynamoDBProperty', 'DynamoDBv2Property', 'EventProperty', 'FirehoseProperty', 'IotEventsProperty', 'IotSiteWiseProperty', 'IotTopicPublishProperty', 'LambdaProperty', 'OnEnterProperty', 'OnExitProperty', 'OnInputProperty', 'PayloadProperty', 'ResetTimerProperty', 'SetTimerProperty', 'SetVariableProperty', 'SnsProperty', 'SqsProperty', 'StateProperty', 'TransitionEventProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotevents.CfnDetectorModelDefConfig] = pydantic.Field(None)


class CfnDetectorModelDefConfig(pydantic.BaseModel):
    ActionProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefActionpropertyParams]] = pydantic.Field(None, description='')
    AssetPropertyTimestampProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAssetpropertytimestamppropertyParams]] = pydantic.Field(None, description='')
    AssetPropertyValueProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAssetpropertyvaluepropertyParams]] = pydantic.Field(None, description='')
    AssetPropertyVariantProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAssetpropertyvariantpropertyParams]] = pydantic.Field(None, description='')
    ClearTimerProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefCleartimerpropertyParams]] = pydantic.Field(None, description='')
    DetectorModelDefinitionProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefDetectormodeldefinitionpropertyParams]] = pydantic.Field(None, description='')
    DynamoDBProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefDynamodbpropertyParams]] = pydantic.Field(None, description='')
    DynamoDBv2Property: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefDynamodbv2PropertyParams]] = pydantic.Field(None, description='')
    EventProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefEventpropertyParams]] = pydantic.Field(None, description='')
    FirehoseProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefFirehosepropertyParams]] = pydantic.Field(None, description='')
    IotEventsProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefIoteventspropertyParams]] = pydantic.Field(None, description='')
    IotSiteWiseProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefIotsitewisepropertyParams]] = pydantic.Field(None, description='')
    IotTopicPublishProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefIottopicpublishpropertyParams]] = pydantic.Field(None, description='')
    LambdaProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefLambdapropertyParams]] = pydantic.Field(None, description='')
    OnEnterProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefOnenterpropertyParams]] = pydantic.Field(None, description='')
    OnExitProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefOnexitpropertyParams]] = pydantic.Field(None, description='')
    OnInputProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefOninputpropertyParams]] = pydantic.Field(None, description='')
    PayloadProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefPayloadpropertyParams]] = pydantic.Field(None, description='')
    ResetTimerProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefResettimerpropertyParams]] = pydantic.Field(None, description='')
    SetTimerProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefSettimerpropertyParams]] = pydantic.Field(None, description='')
    SetVariableProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefSetvariablepropertyParams]] = pydantic.Field(None, description='')
    SnsProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefSnspropertyParams]] = pydantic.Field(None, description='')
    SqsProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefSqspropertyParams]] = pydantic.Field(None, description='')
    StateProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefStatepropertyParams]] = pydantic.Field(None, description='')
    TransitionEventProperty: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefTransitioneventpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotevents.CfnDetectorModelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDetectorModelDefActionpropertyParams(pydantic.BaseModel):
    clear_timer: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_ClearTimerPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_db: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_DynamoDBPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_d_bv2: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_DynamoDBv2PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    firehose: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_FirehosePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    iot_events: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_IotEventsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    iot_site_wise: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_IotSiteWisePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    iot_topic_publish: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_IotTopicPublishPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    lambda_: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_LambdaPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    reset_timer: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_ResetTimerPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    set_timer: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_SetTimerPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    set_variable: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_SetVariablePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sns: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_SnsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sqs: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_SqsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefAssetpropertytimestamppropertyParams(pydantic.BaseModel):
    time_in_seconds: str = pydantic.Field(..., description='')
    offset_in_nanos: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefAssetpropertyvaluepropertyParams(pydantic.BaseModel):
    value: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_AssetPropertyVariantPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    quality: typing.Optional[str] = pydantic.Field(None, description='')
    timestamp: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_AssetPropertyTimestampPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefAssetpropertyvariantpropertyParams(pydantic.BaseModel):
    boolean_value: typing.Optional[str] = pydantic.Field(None, description='')
    double_value: typing.Optional[str] = pydantic.Field(None, description='')
    integer_value: typing.Optional[str] = pydantic.Field(None, description='')
    string_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefCleartimerpropertyParams(pydantic.BaseModel):
    timer_name: str = pydantic.Field(..., description='')
    ...

class CfnDetectorModelDefDetectormodeldefinitionpropertyParams(pydantic.BaseModel):
    initial_state_name: str = pydantic.Field(..., description='')
    states: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_StatePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnDetectorModelDefDynamodbpropertyParams(pydantic.BaseModel):
    hash_key_field: str = pydantic.Field(..., description='')
    hash_key_value: str = pydantic.Field(..., description='')
    table_name: str = pydantic.Field(..., description='')
    hash_key_type: typing.Optional[str] = pydantic.Field(None, description='')
    operation: typing.Optional[str] = pydantic.Field(None, description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    payload_field: typing.Optional[str] = pydantic.Field(None, description='')
    range_key_field: typing.Optional[str] = pydantic.Field(None, description='')
    range_key_type: typing.Optional[str] = pydantic.Field(None, description='')
    range_key_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefDynamodbv2PropertyParams(pydantic.BaseModel):
    table_name: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefEventpropertyParams(pydantic.BaseModel):
    event_name: str = pydantic.Field(..., description='')
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    condition: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefFirehosepropertyParams(pydantic.BaseModel):
    delivery_stream_name: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    separator: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefIoteventspropertyParams(pydantic.BaseModel):
    input_name: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefIotsitewisepropertyParams(pydantic.BaseModel):
    property_value: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_AssetPropertyValuePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    asset_id: typing.Optional[str] = pydantic.Field(None, description='')
    entry_id: typing.Optional[str] = pydantic.Field(None, description='')
    property_alias: typing.Optional[str] = pydantic.Field(None, description='')
    property_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefIottopicpublishpropertyParams(pydantic.BaseModel):
    mqtt_topic: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefLambdapropertyParams(pydantic.BaseModel):
    function_arn: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefOnenterpropertyParams(pydantic.BaseModel):
    events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_EventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefOnexitpropertyParams(pydantic.BaseModel):
    events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_EventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefOninputpropertyParams(pydantic.BaseModel):
    events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_EventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    transition_events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_TransitionEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefPayloadpropertyParams(pydantic.BaseModel):
    content_expression: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnDetectorModelDefResettimerpropertyParams(pydantic.BaseModel):
    timer_name: str = pydantic.Field(..., description='')
    ...

class CfnDetectorModelDefSettimerpropertyParams(pydantic.BaseModel):
    timer_name: str = pydantic.Field(..., description='')
    duration_expression: typing.Optional[str] = pydantic.Field(None, description='')
    seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefSetvariablepropertyParams(pydantic.BaseModel):
    value: str = pydantic.Field(..., description='')
    variable_name: str = pydantic.Field(..., description='')
    ...

class CfnDetectorModelDefSnspropertyParams(pydantic.BaseModel):
    target_arn: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefSqspropertyParams(pydantic.BaseModel):
    queue_url: str = pydantic.Field(..., description='')
    payload: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    use_base64: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefStatepropertyParams(pydantic.BaseModel):
    state_name: str = pydantic.Field(..., description='')
    on_enter: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_OnEnterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    on_exit: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_OnExitPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    on_input: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_OnInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefTransitioneventpropertyParams(pydantic.BaseModel):
    condition: str = pydantic.Field(..., description='')
    event_name: str = pydantic.Field(..., description='')
    next_state: str = pydantic.Field(..., description='')
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorModelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDetectorModelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDetectorModelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDetectorModelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDetectorModelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDetectorModelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDetectorModelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDetectorModelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDetectorModelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDetectorModelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDetectorModelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDetectorModelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDetectorModelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDetectorModelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotevents.CfnInput
class CfnInputDef(BaseCfnResource):
    input_definition: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotevents.CfnInput_InputDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The definition of the input.\n')
    input_description: typing.Optional[str] = pydantic.Field(None, description='A brief description of the input.\n')
    input_name: typing.Optional[str] = pydantic.Field(None, description='The name of the input.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['input_definition', 'input_description', 'input_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AttributeProperty', 'InputDefinitionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnInput'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotevents.CfnInputDefConfig] = pydantic.Field(None)


class CfnInputDefConfig(pydantic.BaseModel):
    AttributeProperty: typing.Optional[list[models.aws_iotevents.CfnInputDefAttributepropertyParams]] = pydantic.Field(None, description='')
    InputDefinitionProperty: typing.Optional[list[models.aws_iotevents.CfnInputDefInputdefinitionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotevents.CfnInputDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotevents.CfnInputDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotevents.CfnInputDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotevents.CfnInputDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotevents.CfnInputDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotevents.CfnInputDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotevents.CfnInputDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotevents.CfnInputDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotevents.CfnInputDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotevents.CfnInputDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotevents.CfnInputDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotevents.CfnInputDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotevents.CfnInputDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnInputDefAttributepropertyParams(pydantic.BaseModel):
    json_path: str = pydantic.Field(..., description='')
    ...

class CfnInputDefInputdefinitionpropertyParams(pydantic.BaseModel):
    attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnInput_AttributePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnInputDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnInputDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInputDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnInputDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInputDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnInputDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnInputDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnInputDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnInputDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnInputDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInputDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnInputDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnInputDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInputDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotevents.CfnAlarmModelProps
class CfnAlarmModelPropsDef(BaseCfnProperty):
    alarm_rule: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AlarmRulePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines when your alarm is invoked.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see `Amazon Resource Names (ARNs) <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_ in the *AWS General Reference* .\n')
    alarm_capabilities: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AlarmCapabilitiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains the configuration information of alarm state changes.\n')
    alarm_event_actions: typing.Union[models.UnsupportedResource, models.aws_iotevents.CfnAlarmModel_AlarmEventActionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about one or more alarm actions.\n')
    alarm_model_description: typing.Optional[str] = pydantic.Field(None, description='The description of the alarm model.\n')
    alarm_model_name: typing.Optional[str] = pydantic.Field(None, description='The name of the alarm model.\n')
    key: typing.Optional[str] = pydantic.Field(None, description='An input attribute used as a key to create an alarm. AWS IoT Events routes `inputs <https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html>`_ associated with this key to the alarm.\n')
    severity: typing.Union[int, float, None] = pydantic.Field(None, description='A non-negative integer that reflects the severity level of the alarm.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see `Tagging your AWS IoT Events resources <https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html>`_ in the *AWS IoT Events Developer Guide* . You can create up to 50 tags for one alarm model.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotevents-alarmmodel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    cfn_alarm_model_props = iotevents.CfnAlarmModelProps(\n        alarm_rule=iotevents.CfnAlarmModel.AlarmRuleProperty(\n            simple_rule=iotevents.CfnAlarmModel.SimpleRuleProperty(\n                comparison_operator="comparisonOperator",\n                input_property="inputProperty",\n                threshold="threshold"\n            )\n        ),\n        role_arn="roleArn",\n\n        # the properties below are optional\n        alarm_capabilities=iotevents.CfnAlarmModel.AlarmCapabilitiesProperty(\n            acknowledge_flow=iotevents.CfnAlarmModel.AcknowledgeFlowProperty(\n                enabled=False\n            ),\n            initialization_configuration=iotevents.CfnAlarmModel.InitializationConfigurationProperty(\n                disabled_on_initialization=False\n            )\n        ),\n        alarm_event_actions=iotevents.CfnAlarmModel.AlarmEventActionsProperty(\n            alarm_actions=[iotevents.CfnAlarmModel.AlarmActionProperty(\n                dynamo_db=iotevents.CfnAlarmModel.DynamoDBProperty(\n                    hash_key_field="hashKeyField",\n                    hash_key_value="hashKeyValue",\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    hash_key_type="hashKeyType",\n                    operation="operation",\n                    payload=iotevents.CfnAlarmModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    payload_field="payloadField",\n                    range_key_field="rangeKeyField",\n                    range_key_type="rangeKeyType",\n                    range_key_value="rangeKeyValue"\n                ),\n                dynamo_dBv2=iotevents.CfnAlarmModel.DynamoDBv2Property(\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnAlarmModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                firehose=iotevents.CfnAlarmModel.FirehoseProperty(\n                    delivery_stream_name="deliveryStreamName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnAlarmModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    separator="separator"\n                ),\n                iot_events=iotevents.CfnAlarmModel.IotEventsProperty(\n                    input_name="inputName",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnAlarmModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                iot_site_wise=iotevents.CfnAlarmModel.IotSiteWiseProperty(\n                    asset_id="assetId",\n                    entry_id="entryId",\n                    property_alias="propertyAlias",\n                    property_id="propertyId",\n                    property_value=iotevents.CfnAlarmModel.AssetPropertyValueProperty(\n                        value=iotevents.CfnAlarmModel.AssetPropertyVariantProperty(\n                            boolean_value="booleanValue",\n                            double_value="doubleValue",\n                            integer_value="integerValue",\n                            string_value="stringValue"\n                        ),\n\n                        # the properties below are optional\n                        quality="quality",\n                        timestamp=iotevents.CfnAlarmModel.AssetPropertyTimestampProperty(\n                            time_in_seconds="timeInSeconds",\n\n                            # the properties below are optional\n                            offset_in_nanos="offsetInNanos"\n                        )\n                    )\n                ),\n                iot_topic_publish=iotevents.CfnAlarmModel.IotTopicPublishProperty(\n                    mqtt_topic="mqttTopic",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnAlarmModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                lambda_=iotevents.CfnAlarmModel.LambdaProperty(\n                    function_arn="functionArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnAlarmModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                sns=iotevents.CfnAlarmModel.SnsProperty(\n                    target_arn="targetArn",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnAlarmModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    )\n                ),\n                sqs=iotevents.CfnAlarmModel.SqsProperty(\n                    queue_url="queueUrl",\n\n                    # the properties below are optional\n                    payload=iotevents.CfnAlarmModel.PayloadProperty(\n                        content_expression="contentExpression",\n                        type="type"\n                    ),\n                    use_base64=False\n                )\n            )]\n        ),\n        alarm_model_description="alarmModelDescription",\n        alarm_model_name="alarmModelName",\n        key="key",\n        severity=123,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarm_rule', 'role_arn', 'alarm_capabilities', 'alarm_event_actions', 'alarm_model_description', 'alarm_model_name', 'key', 'severity', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnAlarmModelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnDetectorModelProps
class CfnDetectorModelPropsDef(BaseCfnProperty):
    detector_model_definition: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotevents.CfnDetectorModel_DetectorModelDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information that defines how a detector operates.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the role that grants permission to AWS IoT Events to perform its operations.\n')
    detector_model_description: typing.Optional[str] = pydantic.Field(None, description='A brief description of the detector model.\n')
    detector_model_name: typing.Optional[str] = pydantic.Field(None, description='The name of the detector model.\n')
    evaluation_method: typing.Optional[str] = pydantic.Field(None, description='Information about the order in which events are evaluated and how actions are executed.\n')
    key: typing.Optional[str] = pydantic.Field(None, description='The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information. This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotevents-detectormodel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['detector_model_definition', 'role_arn', 'detector_model_description', 'detector_model_name', 'evaluation_method', 'key', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnDetectorModelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotevents.CfnInputProps
class CfnInputPropsDef(BaseCfnProperty):
    input_definition: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotevents.CfnInput_InputDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The definition of the input.\n')
    input_description: typing.Optional[str] = pydantic.Field(None, description='A brief description of the input.\n')
    input_name: typing.Optional[str] = pydantic.Field(None, description='The name of the input.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotevents-input.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotevents as iotevents\n\n    cfn_input_props = iotevents.CfnInputProps(\n        input_definition=iotevents.CfnInput.InputDefinitionProperty(\n            attributes=[iotevents.CfnInput.AttributeProperty(\n                json_path="jsonPath"\n            )]\n        ),\n\n        # the properties below are optional\n        input_description="inputDescription",\n        input_name="inputName",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['input_definition', 'input_description', 'input_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotevents.CfnInputProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnAlarmModel_AcknowledgeFlowProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_AcknowledgeFlowPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_AlarmActionProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_AlarmActionPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_AlarmCapabilitiesProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_AlarmCapabilitiesPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_AlarmEventActionsProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_AlarmEventActionsPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_AlarmRuleProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_AlarmRulePropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_AssetPropertyTimestampProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_AssetPropertyTimestampPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_AssetPropertyValueProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_AssetPropertyValuePropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_AssetPropertyVariantProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_AssetPropertyVariantPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_DynamoDBProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_DynamoDBPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_DynamoDBv2Property: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_DynamoDBv2PropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_FirehoseProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_FirehosePropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_InitializationConfigurationProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_InitializationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_IotEventsProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_IotEventsPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_IotSiteWiseProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_IotSiteWisePropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_IotTopicPublishProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_IotTopicPublishPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_LambdaProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_LambdaPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_PayloadProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_PayloadPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_SimpleRuleProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_SimpleRulePropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_SnsProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_SnsPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel_SqsProperty: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModel_SqsPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_ActionProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_ActionPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_AssetPropertyTimestampProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_AssetPropertyTimestampPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_AssetPropertyValueProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_AssetPropertyValuePropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_AssetPropertyVariantProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_AssetPropertyVariantPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_ClearTimerProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_ClearTimerPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_DetectorModelDefinitionProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_DetectorModelDefinitionPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_DynamoDBProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_DynamoDBPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_DynamoDBv2Property: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_DynamoDBv2PropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_EventProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_EventPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_FirehoseProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_FirehosePropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_IotEventsProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_IotEventsPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_IotSiteWiseProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_IotSiteWisePropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_IotTopicPublishProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_IotTopicPublishPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_LambdaProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_LambdaPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_OnEnterProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_OnEnterPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_OnExitProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_OnExitPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_OnInputProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_OnInputPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_PayloadProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_PayloadPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_ResetTimerProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_ResetTimerPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_SetTimerProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_SetTimerPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_SetVariableProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_SetVariablePropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_SnsProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_SnsPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_SqsProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_SqsPropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_StateProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_StatePropertyDef]] = pydantic.Field(None)
    CfnDetectorModel_TransitionEventProperty: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModel_TransitionEventPropertyDef]] = pydantic.Field(None)
    CfnInput_AttributeProperty: typing.Optional[dict[str, models.aws_iotevents.CfnInput_AttributePropertyDef]] = pydantic.Field(None)
    CfnInput_InputDefinitionProperty: typing.Optional[dict[str, models.aws_iotevents.CfnInput_InputDefinitionPropertyDef]] = pydantic.Field(None)
    CfnAlarmModel: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModelDef]] = pydantic.Field(None)
    CfnDetectorModel: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModelDef]] = pydantic.Field(None)
    CfnInput: typing.Optional[dict[str, models.aws_iotevents.CfnInputDef]] = pydantic.Field(None)
    CfnAlarmModelProps: typing.Optional[dict[str, models.aws_iotevents.CfnAlarmModelPropsDef]] = pydantic.Field(None)
    CfnDetectorModelProps: typing.Optional[dict[str, models.aws_iotevents.CfnDetectorModelPropsDef]] = pydantic.Field(None)
    CfnInputProps: typing.Optional[dict[str, models.aws_iotevents.CfnInputPropsDef]] = pydantic.Field(None)
    ...

import models
