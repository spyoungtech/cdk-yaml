from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_elasticloadbalancingv2_targets.AlbArnTarget
class AlbArnTargetDef(BaseClass):
    alb_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the application load balancer to load balance to.\n')
    port: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The port on which the target is listening.')
    _init_params: typing.ClassVar[list[str]] = ['alb_arn', 'port']
    _method_names: typing.ClassVar[list[str]] = ['attach_to_network_target_group']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2_targets.AlbArnTarget'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_elasticloadbalancingv2_targets.AlbArnTargetDefConfig] = pydantic.Field(None)


class AlbArnTargetDefConfig(pydantic.BaseModel):
    attach_to_network_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.AlbArnTargetDefAttachToNetworkTargetGroupParams]] = pydantic.Field(None, description="Register this alb target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")

class AlbArnTargetDefAttachToNetworkTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2_targets.AlbTarget
class AlbTargetDef(BaseClass):
    alb: typing.Union[_REQUIRED_INIT_PARAM, models.aws_elasticloadbalancingv2.ApplicationLoadBalancerDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The application load balancer to load balance to.')
    port: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The port on which the target is listening.')
    _init_params: typing.ClassVar[list[str]] = ['alb', 'port']
    _method_names: typing.ClassVar[list[str]] = ['attach_to_network_target_group']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2_targets.AlbTarget'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_elasticloadbalancingv2_targets.AlbTargetDefConfig] = pydantic.Field(None)


class AlbTargetDefConfig(pydantic.BaseModel):
    attach_to_network_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.AlbTargetDefAttachToNetworkTargetGroupParams]] = pydantic.Field(None, description="Register this alb target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")

class AlbTargetDefAttachToNetworkTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2_targets.InstanceIdTarget
class InstanceIdTargetDef(BaseClass):
    instance_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Instance ID of the instance to register to.\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='Override the default port for the target group.')
    _init_params: typing.ClassVar[list[str]] = ['instance_id', 'port']
    _method_names: typing.ClassVar[list[str]] = ['attach_to_application_target_group', 'attach_to_network_target_group']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2_targets.InstanceIdTarget'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDefConfig] = pydantic.Field(None)


class InstanceIdTargetDefConfig(pydantic.BaseModel):
    attach_to_application_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDefAttachToApplicationTargetGroupParams]] = pydantic.Field(None, description="Register this instance target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")
    attach_to_network_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDefAttachToNetworkTargetGroupParams]] = pydantic.Field(None, description="Register this instance target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")

class InstanceIdTargetDefAttachToApplicationTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef] = pydantic.Field(..., description='-')
    ...

class InstanceIdTargetDefAttachToNetworkTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2_targets.InstanceTarget
class InstanceTargetDef(BaseClass):
    instance: typing.Union[models.aws_ec2.InstanceDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Instance to register to.\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='Override the default port for the target group.')
    _init_params: typing.ClassVar[list[str]] = ['instance', 'port']
    _method_names: typing.ClassVar[list[str]] = ['attach_to_application_target_group', 'attach_to_network_target_group']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2_targets.InstanceTarget'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_elasticloadbalancingv2_targets.InstanceTargetDefConfig] = pydantic.Field(None)


class InstanceTargetDefConfig(pydantic.BaseModel):
    attach_to_application_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.InstanceTargetDefAttachToApplicationTargetGroupParams]] = pydantic.Field(None, description="Register this instance target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")
    attach_to_network_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.InstanceTargetDefAttachToNetworkTargetGroupParams]] = pydantic.Field(None, description="Register this instance target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")

class InstanceTargetDefAttachToApplicationTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef] = pydantic.Field(..., description='-')
    ...

class InstanceTargetDefAttachToNetworkTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2_targets.IpTarget
class IpTargetDef(BaseClass):
    ip_address: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IP Address to load balance to.\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description="Override the group's default port.\n")
    availability_zone: typing.Optional[str] = pydantic.Field(None, description='Availability zone to send traffic from.')
    _init_params: typing.ClassVar[list[str]] = ['ip_address', 'port', 'availability_zone']
    _method_names: typing.ClassVar[list[str]] = ['attach_to_application_target_group', 'attach_to_network_target_group']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2_targets.IpTarget'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_elasticloadbalancingv2_targets.IpTargetDefConfig] = pydantic.Field(None)


class IpTargetDefConfig(pydantic.BaseModel):
    attach_to_application_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.IpTargetDefAttachToApplicationTargetGroupParams]] = pydantic.Field(None, description="Register this instance target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")
    attach_to_network_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.IpTargetDefAttachToNetworkTargetGroupParams]] = pydantic.Field(None, description="Register this instance target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")

class IpTargetDefAttachToApplicationTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef] = pydantic.Field(..., description='-')
    ...

class IpTargetDefAttachToNetworkTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_elasticloadbalancingv2_targets.LambdaTarget
class LambdaTargetDef(BaseClass):
    fn: typing.Union[_REQUIRED_INIT_PARAM, models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    _init_params: typing.ClassVar[list[str]] = ['fn']
    _method_names: typing.ClassVar[list[str]] = ['attach_to_application_target_group', 'attach_to_network_target_group']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_elasticloadbalancingv2_targets.LambdaTarget'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_elasticloadbalancingv2_targets.LambdaTargetDefConfig] = pydantic.Field(None)


class LambdaTargetDefConfig(pydantic.BaseModel):
    attach_to_application_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.LambdaTargetDefAttachToApplicationTargetGroupParams]] = pydantic.Field(None, description="Register this instance target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")
    attach_to_network_target_group: typing.Optional[list[models.aws_elasticloadbalancingv2_targets.LambdaTargetDefAttachToNetworkTargetGroupParams]] = pydantic.Field(None, description="Register this instance target with a load balancer.\nDon't call this, it is called automatically when you add the target to a\nload balancer.")

class LambdaTargetDefAttachToApplicationTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.ApplicationTargetGroupDef] = pydantic.Field(..., description='-')
    ...

class LambdaTargetDefAttachToNetworkTargetGroupParams(pydantic.BaseModel):
    target_group: typing.Union[models.aws_elasticloadbalancingv2.NetworkTargetGroupDef] = pydantic.Field(..., description='-')
    ...


class ModuleModel(pydantic.BaseModel):
    AlbArnTarget: typing.Optional[dict[str, models.aws_elasticloadbalancingv2_targets.AlbArnTargetDef]] = pydantic.Field(None)
    AlbTarget: typing.Optional[dict[str, models.aws_elasticloadbalancingv2_targets.AlbTargetDef]] = pydantic.Field(None)
    InstanceIdTarget: typing.Optional[dict[str, models.aws_elasticloadbalancingv2_targets.InstanceIdTargetDef]] = pydantic.Field(None)
    InstanceTarget: typing.Optional[dict[str, models.aws_elasticloadbalancingv2_targets.InstanceTargetDef]] = pydantic.Field(None)
    IpTarget: typing.Optional[dict[str, models.aws_elasticloadbalancingv2_targets.IpTargetDef]] = pydantic.Field(None)
    LambdaTarget: typing.Optional[dict[str, models.aws_elasticloadbalancingv2_targets.LambdaTargetDef]] = pydantic.Field(None)
    ...

import models
