from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_grafana.CfnWorkspace.AssertionAttributesProperty
class CfnWorkspace_AssertionAttributesPropertyDef(BaseStruct):
    email: typing.Optional[str] = pydantic.Field(None, description='The name of the attribute within the SAML assertion to use as the email names for SAML users.\n')
    groups: typing.Optional[str] = pydantic.Field(None, description='The name of the attribute within the SAML assertion to use as the user full "friendly" names for user groups.\n')
    login: typing.Optional[str] = pydantic.Field(None, description='The name of the attribute within the SAML assertion to use as the login names for SAML users.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the attribute within the SAML assertion to use as the user full "friendly" names for SAML users.\n')
    org: typing.Optional[str] = pydantic.Field(None, description='The name of the attribute within the SAML assertion to use as the user full "friendly" names for the users\' organizations.\n')
    role: typing.Optional[str] = pydantic.Field(None, description='The name of the attribute within the SAML assertion to use as the user roles.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-grafana-workspace-assertionattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_grafana as grafana\n\n    assertion_attributes_property = grafana.CfnWorkspace.AssertionAttributesProperty(\n        email="email",\n        groups="groups",\n        login="login",\n        name="name",\n        org="org",\n        role="role"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email', 'groups', 'login', 'name', 'org', 'role']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_grafana.CfnWorkspace.AssertionAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_grafana.CfnWorkspace.IdpMetadataProperty
class CfnWorkspace_IdpMetadataPropertyDef(BaseStruct):
    url: typing.Optional[str] = pydantic.Field(None, description='The URL of the location containing the IdP metadata.\n')
    xml: typing.Optional[str] = pydantic.Field(None, description='The full IdP metadata, in XML format.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-grafana-workspace-idpmetadata.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_grafana as grafana\n\n    idp_metadata_property = grafana.CfnWorkspace.IdpMetadataProperty(\n        url="url",\n        xml="xml"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['url', 'xml']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_grafana.CfnWorkspace.IdpMetadataProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_grafana.CfnWorkspace.NetworkAccessControlProperty
class CfnWorkspace_NetworkAccessControlPropertyDef(BaseStruct):
    prefix_list_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of prefix list IDs. A prefix list is a list of CIDR ranges of IP addresses. The IP addresses specified are allowed to access your workspace. If the list is not included in the configuration (passed an empty array) then no IP addresses are allowed to access the workspace. You create a prefix list using the Amazon VPC console. Prefix list IDs have the format ``pl- *1a2b3c4d*`` . For more information about prefix lists, see `Group CIDR blocks using managed prefix lists <https://docs.aws.amazon.com/vpc/latest/userguide/managed-prefix-lists.html>`_ in the *Amazon Virtual Private Cloud User Guide* .\n')
    vpce_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of Amazon VPC endpoint IDs for the workspace. You can create VPC endpoints to your Amazon Managed Grafana workspace for access from within a VPC. If a ``NetworkAccessConfiguration`` is specified then only VPC endpoints specified here are allowed to access the workspace. If you pass in an empty array of strings, then no VPCs are allowed to access the workspace. VPC endpoint IDs have the format ``vpce- *1a2b3c4d*`` . For more information about creating an interface VPC endpoint, see `Interface VPC endpoints <https://docs.aws.amazon.com/grafana/latest/userguide/VPC-endpoints>`_ in the *Amazon Managed Grafana User Guide* . .. epigraph:: The only VPC endpoints that can be specified here are interface VPC endpoints for Grafana workspaces (using the ``com.amazonaws.[region].grafana-workspace`` service endpoint). Other VPC endpoints are ignored.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-grafana-workspace-networkaccesscontrol.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_grafana as grafana\n\n    network_access_control_property = grafana.CfnWorkspace.NetworkAccessControlProperty(\n        prefix_list_ids=["prefixListIds"],\n        vpce_ids=["vpceIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['prefix_list_ids', 'vpce_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_grafana.CfnWorkspace.NetworkAccessControlProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_grafana.CfnWorkspace.RoleValuesProperty
class CfnWorkspace_RoleValuesPropertyDef(BaseStruct):
    admin: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of groups from the SAML assertion attribute to grant the Grafana ``Admin`` role to.\n')
    editor: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of groups from the SAML assertion attribute to grant the Grafana ``Editor`` role to.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-grafana-workspace-rolevalues.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_grafana as grafana\n\n    role_values_property = grafana.CfnWorkspace.RoleValuesProperty(\n        admin=["admin"],\n        editor=["editor"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['admin', 'editor']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_grafana.CfnWorkspace.RoleValuesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_grafana.CfnWorkspace.SamlConfigurationProperty
class CfnWorkspace_SamlConfigurationPropertyDef(BaseStruct):
    idp_metadata: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_IdpMetadataPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A structure containing the identity provider (IdP) metadata used to integrate the identity provider with this workspace.\n')
    allowed_organizations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Lists which organizations defined in the SAML assertion are allowed to use the Amazon Managed Grafana workspace. If this is empty, all organizations in the assertion attribute have access.\n')
    assertion_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_AssertionAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A structure that defines which attributes in the SAML assertion are to be used to define information about the users authenticated by that IdP to use the workspace.\n')
    login_validity_duration: typing.Union[int, float, None] = pydantic.Field(None, description='How long a sign-on session by a SAML user is valid, before the user has to sign on again.\n')
    role_values: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_RoleValuesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A structure containing arrays that map group names in the SAML assertion to the Grafana ``Admin`` and ``Editor`` roles in the workspace.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-grafana-workspace-samlconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_grafana as grafana\n\n    saml_configuration_property = grafana.CfnWorkspace.SamlConfigurationProperty(\n        idp_metadata=grafana.CfnWorkspace.IdpMetadataProperty(\n            url="url",\n            xml="xml"\n        ),\n\n        # the properties below are optional\n        allowed_organizations=["allowedOrganizations"],\n        assertion_attributes=grafana.CfnWorkspace.AssertionAttributesProperty(\n            email="email",\n            groups="groups",\n            login="login",\n            name="name",\n            org="org",\n            role="role"\n        ),\n        login_validity_duration=123,\n        role_values=grafana.CfnWorkspace.RoleValuesProperty(\n            admin=["admin"],\n            editor=["editor"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['idp_metadata', 'allowed_organizations', 'assertion_attributes', 'login_validity_duration', 'role_values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_grafana.CfnWorkspace.SamlConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_grafana.CfnWorkspace.VpcConfigurationProperty
class CfnWorkspace_VpcConfigurationPropertyDef(BaseStruct):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='The list of Amazon EC2 security group IDs attached to the Amazon VPC for your Grafana workspace to connect. Duplicates not allowed. *Array Members* : Minimum number of 1 items. Maximum number of 5 items. *Length* : Minimum length of 0. Maximum length of 255.\n')
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='The list of Amazon EC2 subnet IDs created in the Amazon VPC for your Grafana workspace to connect. Duplicates not allowed. *Array Members* : Minimum number of 2 items. Maximum number of 6 items. *Length* : Minimum length of 0. Maximum length of 255.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-grafana-workspace-vpcconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_grafana as grafana\n\n    vpc_configuration_property = grafana.CfnWorkspace.VpcConfigurationProperty(\n        security_group_ids=["securityGroupIds"],\n        subnet_ids=["subnetIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_grafana.CfnWorkspace.VpcConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_grafana.CfnWorkspace
class CfnWorkspaceDef(BaseCfnResource):
    account_access_type: str = pydantic.Field(..., description='Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is ``ORGANIZATION`` , the ``OrganizationalUnits`` parameter specifies which organizational units the workspace can access.\n')
    authentication_providers: typing.Sequence[str] = pydantic.Field(..., description='Specifies whether this workspace uses SAML 2.0, AWS IAM Identity Center (successor to AWS Single Sign-On) , or both to authenticate users for using the Grafana console within a workspace. For more information, see `User authentication in Amazon Managed Grafana <https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html>`_ .\n')
    permission_type: str = pydantic.Field(..., description='If this is ``SERVICE_MANAGED`` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels. If this is ``CUSTOMER_MANAGED`` , you must manage those roles and permissions yourself. If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to ``CUSTOMER_MANAGED`` . For more information about converting between customer and service managed, see `Managing permissions for data sources and notification channels <https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html>`_ . For more information about the roles and permissions that must be managed for customer managed workspaces, see `Amazon Managed Grafana permissions and policies for AWS data sources and notification channels <https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html>`_\n')
    client_token: typing.Optional[str] = pydantic.Field(None, description='A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.\n')
    data_sources: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the AWS data sources that have been configured to have IAM roles and permissions created to allow Amazon Managed Grafana to read data from these sources. This list is only used when the workspace was created through the AWS console, and the ``permissionType`` is ``SERVICE_MANAGED`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The user-defined description of the workspace.\n')
    grafana_version: typing.Optional[str] = pydantic.Field(None, description='Specifies the version of Grafana to support in the new workspace. Supported values are ``8.4`` and ``9.4`` .\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the workspace.\n')
    network_access_control: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_NetworkAccessControlPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration settings for network access to your workspace.\n')
    notification_destinations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The AWS notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, to allow Amazon Managed Grafana to use these channels.\n')
    organizational_units: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.\n')
    organization_role_name: typing.Optional[str] = pydantic.Field(None, description='The name of the IAM role that is used to access resources through Organizations .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The IAM role that grants permissions to the AWS resources that the workspace will view data from. This role must already exist.\n')
    saml_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_SamlConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the ``Admin`` and ``Editor`` roles in the workspace.\n')
    stack_set_name: typing.Optional[str] = pydantic.Field(None, description='The name of the AWS CloudFormation stack set that is used to generate IAM roles to be used for this workspace.\n')
    vpc_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_VpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to. .. epigraph:: Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).')
    _init_params: typing.ClassVar[list[str]] = ['account_access_type', 'authentication_providers', 'permission_type', 'client_token', 'data_sources', 'description', 'grafana_version', 'name', 'network_access_control', 'notification_destinations', 'organizational_units', 'organization_role_name', 'role_arn', 'saml_configuration', 'stack_set_name', 'vpc_configuration']
    _method_names: typing.ClassVar[list[str]] = ['AssertionAttributesProperty', 'IdpMetadataProperty', 'NetworkAccessControlProperty', 'RoleValuesProperty', 'SamlConfigurationProperty', 'VpcConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_grafana.CfnWorkspace'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnWorkspaceDefConfig] = pydantic.Field(None)


class CfnWorkspaceDefConfig(pydantic.BaseModel):
    AssertionAttributesProperty: typing.Optional[list[CfnWorkspaceDefAssertionattributespropertyParams]] = pydantic.Field(None, description='')
    IdpMetadataProperty: typing.Optional[list[CfnWorkspaceDefIdpmetadatapropertyParams]] = pydantic.Field(None, description='')
    NetworkAccessControlProperty: typing.Optional[list[CfnWorkspaceDefNetworkaccesscontrolpropertyParams]] = pydantic.Field(None, description='')
    RoleValuesProperty: typing.Optional[list[CfnWorkspaceDefRolevaluespropertyParams]] = pydantic.Field(None, description='')
    SamlConfigurationProperty: typing.Optional[list[CfnWorkspaceDefSamlconfigurationpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigurationProperty: typing.Optional[list[CfnWorkspaceDefVpcconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnWorkspaceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnWorkspaceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnWorkspaceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnWorkspaceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnWorkspaceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnWorkspaceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnWorkspaceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnWorkspaceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnWorkspaceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnWorkspaceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnWorkspaceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnWorkspaceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnWorkspaceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnWorkspaceDefAssertionattributespropertyParams(pydantic.BaseModel):
    email: typing.Optional[str] = pydantic.Field(None, description='')
    groups: typing.Optional[str] = pydantic.Field(None, description='')
    login: typing.Optional[str] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    org: typing.Optional[str] = pydantic.Field(None, description='')
    role: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnWorkspaceDefIdpmetadatapropertyParams(pydantic.BaseModel):
    url: typing.Optional[str] = pydantic.Field(None, description='')
    xml: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnWorkspaceDefNetworkaccesscontrolpropertyParams(pydantic.BaseModel):
    prefix_list_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    vpce_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnWorkspaceDefRolevaluespropertyParams(pydantic.BaseModel):
    admin: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    editor: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnWorkspaceDefSamlconfigurationpropertyParams(pydantic.BaseModel):
    idp_metadata: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_IdpMetadataPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    allowed_organizations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    assertion_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_AssertionAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    login_validity_duration: typing.Union[int, float, None] = pydantic.Field(None, description='')
    role_values: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_RoleValuesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWorkspaceDefVpcconfigurationpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnWorkspaceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWorkspaceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWorkspaceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWorkspaceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWorkspaceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWorkspaceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWorkspaceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWorkspaceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWorkspaceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWorkspaceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWorkspaceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnWorkspaceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWorkspaceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWorkspaceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_grafana.CfnWorkspaceProps
class CfnWorkspacePropsDef(BaseCfnProperty):
    account_access_type: str = pydantic.Field(..., description='Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is ``ORGANIZATION`` , the ``OrganizationalUnits`` parameter specifies which organizational units the workspace can access.\n')
    authentication_providers: typing.Sequence[str] = pydantic.Field(..., description='Specifies whether this workspace uses SAML 2.0, AWS IAM Identity Center (successor to AWS Single Sign-On) , or both to authenticate users for using the Grafana console within a workspace. For more information, see `User authentication in Amazon Managed Grafana <https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html>`_ .\n')
    permission_type: str = pydantic.Field(..., description='If this is ``SERVICE_MANAGED`` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels. If this is ``CUSTOMER_MANAGED`` , you must manage those roles and permissions yourself. If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to ``CUSTOMER_MANAGED`` . For more information about converting between customer and service managed, see `Managing permissions for data sources and notification channels <https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html>`_ . For more information about the roles and permissions that must be managed for customer managed workspaces, see `Amazon Managed Grafana permissions and policies for AWS data sources and notification channels <https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html>`_\n')
    client_token: typing.Optional[str] = pydantic.Field(None, description='A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.\n')
    data_sources: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the AWS data sources that have been configured to have IAM roles and permissions created to allow Amazon Managed Grafana to read data from these sources. This list is only used when the workspace was created through the AWS console, and the ``permissionType`` is ``SERVICE_MANAGED`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The user-defined description of the workspace.\n')
    grafana_version: typing.Optional[str] = pydantic.Field(None, description='Specifies the version of Grafana to support in the new workspace. Supported values are ``8.4`` and ``9.4`` .\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the workspace.\n')
    network_access_control: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_NetworkAccessControlPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration settings for network access to your workspace.\n')
    notification_destinations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The AWS notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, to allow Amazon Managed Grafana to use these channels.\n')
    organizational_units: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.\n')
    organization_role_name: typing.Optional[str] = pydantic.Field(None, description='The name of the IAM role that is used to access resources through Organizations .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The IAM role that grants permissions to the AWS resources that the workspace will view data from. This role must already exist.\n')
    saml_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_SamlConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the ``Admin`` and ``Editor`` roles in the workspace.\n')
    stack_set_name: typing.Optional[str] = pydantic.Field(None, description='The name of the AWS CloudFormation stack set that is used to generate IAM roles to be used for this workspace.\n')
    vpc_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_grafana.CfnWorkspace_VpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to. .. epigraph:: Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-grafana-workspace.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_grafana as grafana\n\n    cfn_workspace_props = grafana.CfnWorkspaceProps(\n        account_access_type="accountAccessType",\n        authentication_providers=["authenticationProviders"],\n        permission_type="permissionType",\n\n        # the properties below are optional\n        client_token="clientToken",\n        data_sources=["dataSources"],\n        description="description",\n        grafana_version="grafanaVersion",\n        name="name",\n        network_access_control=grafana.CfnWorkspace.NetworkAccessControlProperty(\n            prefix_list_ids=["prefixListIds"],\n            vpce_ids=["vpceIds"]\n        ),\n        notification_destinations=["notificationDestinations"],\n        organizational_units=["organizationalUnits"],\n        organization_role_name="organizationRoleName",\n        role_arn="roleArn",\n        saml_configuration=grafana.CfnWorkspace.SamlConfigurationProperty(\n            idp_metadata=grafana.CfnWorkspace.IdpMetadataProperty(\n                url="url",\n                xml="xml"\n            ),\n\n            # the properties below are optional\n            allowed_organizations=["allowedOrganizations"],\n            assertion_attributes=grafana.CfnWorkspace.AssertionAttributesProperty(\n                email="email",\n                groups="groups",\n                login="login",\n                name="name",\n                org="org",\n                role="role"\n            ),\n            login_validity_duration=123,\n            role_values=grafana.CfnWorkspace.RoleValuesProperty(\n                admin=["admin"],\n                editor=["editor"]\n            )\n        ),\n        stack_set_name="stackSetName",\n        vpc_configuration=grafana.CfnWorkspace.VpcConfigurationProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['account_access_type', 'authentication_providers', 'permission_type', 'client_token', 'data_sources', 'description', 'grafana_version', 'name', 'network_access_control', 'notification_destinations', 'organizational_units', 'organization_role_name', 'role_arn', 'saml_configuration', 'stack_set_name', 'vpc_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_grafana.CfnWorkspaceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnWorkspace_AssertionAttributesProperty: typing.Optional[dict[str, CfnWorkspace_AssertionAttributesPropertyDef]] = pydantic.Field(None)
    CfnWorkspace_IdpMetadataProperty: typing.Optional[dict[str, CfnWorkspace_IdpMetadataPropertyDef]] = pydantic.Field(None)
    CfnWorkspace_NetworkAccessControlProperty: typing.Optional[dict[str, CfnWorkspace_NetworkAccessControlPropertyDef]] = pydantic.Field(None)
    CfnWorkspace_RoleValuesProperty: typing.Optional[dict[str, CfnWorkspace_RoleValuesPropertyDef]] = pydantic.Field(None)
    CfnWorkspace_SamlConfigurationProperty: typing.Optional[dict[str, CfnWorkspace_SamlConfigurationPropertyDef]] = pydantic.Field(None)
    CfnWorkspace_VpcConfigurationProperty: typing.Optional[dict[str, CfnWorkspace_VpcConfigurationPropertyDef]] = pydantic.Field(None)
    CfnWorkspace: typing.Optional[dict[str, CfnWorkspaceDef]] = pydantic.Field(None)
    CfnWorkspaceProps: typing.Optional[dict[str, CfnWorkspacePropsDef]] = pydantic.Field(None)
    ...
