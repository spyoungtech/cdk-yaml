from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_ses.DkimIdentity
class DkimIdentityDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = ['byo_dkim', 'easy_dkim']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.DkimIdentity'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.DkimIdentityDefConfig] = pydantic.Field(None)


class DkimIdentityDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_ses.DkimIdentityDefBindParams]] = pydantic.Field(None, description='Binds this DKIM identity to the email identity.')
    byo_dkim: typing.Optional[list[models.aws_ses.DkimIdentityDefByoDkimParams]] = pydantic.Field(None, description='Bring Your Own DKIM.')
    easy_dkim: typing.Optional[list[models.aws_ses.DkimIdentityDefEasyDkimParams]] = pydantic.Field(None, description='Easy DKIM.')

class DkimIdentityDefBindParams(pydantic.BaseModel):
    email_identity: models.aws_ses.EmailIdentityDef = pydantic.Field(..., description='-\n')
    hosted_zone: typing.Optional[typing.Union[models.aws_route53.PublicHostedZoneDef]] = pydantic.Field(None, description='-')
    ...

class DkimIdentityDefByoDkimParams(pydantic.BaseModel):
    private_key: models.SecretValueDef = pydantic.Field(..., description="The private key that's used to generate a DKIM signature.\n")
    selector: str = pydantic.Field(..., description="A string that's used to identify a public key in the DNS configuration for a domain.\n")
    public_key: typing.Optional[str] = pydantic.Field(None, description='The public key. If specified, a TXT record with the public key is created. Default: - the validation TXT record with the public key is not created\n\n:see: https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-bring-your-own.html\n')
    return_config: typing.Optional[list[models.aws_ses.DkimIdentityDefConfig]] = pydantic.Field(None)
    ...

class DkimIdentityDefEasyDkimParams(pydantic.BaseModel):
    signing_key_length: typing.Optional[aws_cdk.aws_ses.EasyDkimSigningKeyLength] = pydantic.Field(None, description='The length of the signing key. This can be changed at most once per day.\n\n:see: https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-easy.html\n')
    return_config: typing.Optional[list[models.aws_ses.DkimIdentityDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_ses.EventDestination
class EventDestinationDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['cloud_watch_dimensions', 'sns_topic']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.EventDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.EventDestinationDefConfig] = pydantic.Field(None)


class EventDestinationDefConfig(pydantic.BaseModel):
    cloud_watch_dimensions: typing.Optional[list[models.aws_ses.EventDestinationDefCloudWatchDimensionsParams]] = pydantic.Field(None, description='Use CloudWatch dimensions as event destination.')
    sns_topic: typing.Optional[list[models.aws_ses.EventDestinationDefSnsTopicParams]] = pydantic.Field(None, description='Use a SNS topic as event destination.')

class EventDestinationDefCloudWatchDimensionsParams(pydantic.BaseModel):
    dimensions: typing.Sequence[typing.Union[models.aws_ses.CloudWatchDimensionDef, dict[str, typing.Any]]] = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_ses.EventDestinationDefConfig]] = pydantic.Field(None)
    ...

class EventDestinationDefSnsTopicParams(pydantic.BaseModel):
    topic: typing.Union[models.aws_sns.TopicBaseDef, models.aws_sns.TopicDef] = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_ses.EventDestinationDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_ses.Identity
class IdentityDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['domain', 'email', 'public_hosted_zone']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.Identity'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.IdentityDefConfig] = pydantic.Field(None)


class IdentityDefConfig(pydantic.BaseModel):
    domain: typing.Optional[list[models.aws_ses.IdentityDefDomainParams]] = pydantic.Field(None, description='Verify a domain name.\nDKIM records will have to be added manually to complete the verification\nprocess')
    email: typing.Optional[list[models.aws_ses.IdentityDefEmailParams]] = pydantic.Field(None, description='Verify an email address.\nTo complete the verification process look for an email from\nno-reply-aws@amazon.com, open it and click the link.')
    public_hosted_zone: typing.Optional[list[models.aws_ses.IdentityDefPublicHostedZoneParams]] = pydantic.Field(None, description='Verify a public hosted zone.\nDKIM and MAIL FROM records will be added automatically to the hosted\nzone')

class IdentityDefDomainParams(pydantic.BaseModel):
    domain: str = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_ses.IdentityDefConfig]] = pydantic.Field(None)
    ...

class IdentityDefEmailParams(pydantic.BaseModel):
    email: str = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_ses.IdentityDefConfig]] = pydantic.Field(None)
    ...

class IdentityDefPublicHostedZoneParams(pydantic.BaseModel):
    hosted_zone: typing.Union[models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_ses.IdentityDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_ses.AllowListReceiptFilter
class AllowListReceiptFilterDef(BaseConstruct):
    ips: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of ip addresses or ranges to allow list.')
    _init_params: typing.ClassVar[list[str]] = ['ips']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.AllowListReceiptFilter'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.ConfigurationSet
class ConfigurationSetDef(BaseConstruct):
    configuration_set_name: typing.Optional[str] = pydantic.Field(None, description='A name for the configuration set. Default: - a CloudFormation generated name\n')
    custom_tracking_redirect_domain: typing.Optional[str] = pydantic.Field(None, description='The custom subdomain that is used to redirect email recipients to the Amazon SES event tracking domain. Default: - use the default awstrack.me domain\n')
    dedicated_ip_pool: typing.Optional[typing.Union[models.aws_ses.DedicatedIpPoolDef]] = pydantic.Field(None, description='The dedicated IP pool to associate with the configuration set. Default: - do not use a dedicated IP pool\n')
    reputation_metrics: typing.Optional[bool] = pydantic.Field(None, description='Whether to publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch. Default: false\n')
    sending_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether email sending is enabled. Default: true\n')
    suppression_reasons: typing.Optional[aws_cdk.aws_ses.SuppressionReasons] = pydantic.Field(None, description="The reasons for which recipient email addresses should be automatically added to your account's suppression list. Default: - use account level settings\n")
    tls_policy: typing.Optional[aws_cdk.aws_ses.ConfigurationSetTlsPolicy] = pydantic.Field(None, description='Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Default: ConfigurationSetTlsPolicy.OPTIONAL')
    _init_params: typing.ClassVar[list[str]] = ['configuration_set_name', 'custom_tracking_redirect_domain', 'dedicated_ip_pool', 'reputation_metrics', 'sending_enabled', 'suppression_reasons', 'tls_policy']
    _method_names: typing.ClassVar[list[str]] = ['add_event_destination', 'apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_configuration_set_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ConfigurationSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_configuration_set_name']
    ...


    from_configuration_set_name: typing.Optional[models.aws_ses.ConfigurationSetDefFromConfigurationSetNameParams] = pydantic.Field(None, description='Use an existing configuration set.')
    resource_config: typing.Optional[models.aws_ses.ConfigurationSetDefConfig] = pydantic.Field(None)


class ConfigurationSetDefConfig(pydantic.BaseModel):
    add_event_destination: typing.Optional[list[models.aws_ses.ConfigurationSetDefAddEventDestinationParams]] = pydantic.Field(None, description='Adds an event destination to this configuration set.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class ConfigurationSetDefAddEventDestinationParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    destination: models.aws_ses.EventDestinationDef = pydantic.Field(..., description='The event destination.\n')
    configuration_set_event_destination_name: typing.Optional[str] = pydantic.Field(None, description='A name for the configuration set event destination. Default: - a CloudFormation generated name\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether Amazon SES publishes events to this destination. Default: true\n')
    events: typing.Optional[typing.Sequence[aws_cdk.aws_ses.EmailSendingEvent]] = pydantic.Field(None, description='The type of email sending events to publish to the event destination. Default: - send all event types')
    return_config: typing.Optional[list[models.aws_ses.ConfigurationSetEventDestinationDefConfig]] = pydantic.Field(None)
    ...

class ConfigurationSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class ConfigurationSetDefFromConfigurationSetNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    configuration_set_name: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_ses.ConfigurationSetEventDestination
class ConfigurationSetEventDestinationDef(BaseConstruct):
    configuration_set: typing.Union[_REQUIRED_INIT_PARAM, models.aws_ses.ConfigurationSetDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The configuration set that contains the event destination.\n')
    destination: typing.Union[models.aws_ses.EventDestinationDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The event destination.\n')
    configuration_set_event_destination_name: typing.Optional[str] = pydantic.Field(None, description='A name for the configuration set event destination. Default: - a CloudFormation generated name\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether Amazon SES publishes events to this destination. Default: true\n')
    events: typing.Optional[typing.Sequence[aws_cdk.aws_ses.EmailSendingEvent]] = pydantic.Field(None, description='The type of email sending events to publish to the event destination. Default: - send all event types')
    _init_params: typing.ClassVar[list[str]] = ['configuration_set', 'destination', 'configuration_set_event_destination_name', 'enabled', 'events']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_configuration_set_event_destination_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ConfigurationSetEventDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_configuration_set_event_destination_id']
    ...


    from_configuration_set_event_destination_id: typing.Optional[models.aws_ses.ConfigurationSetEventDestinationDefFromConfigurationSetEventDestinationIdParams] = pydantic.Field(None, description='Use an existing configuration set.')
    resource_config: typing.Optional[models.aws_ses.ConfigurationSetEventDestinationDefConfig] = pydantic.Field(None)


class ConfigurationSetEventDestinationDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class ConfigurationSetEventDestinationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class ConfigurationSetEventDestinationDefFromConfigurationSetEventDestinationIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    configuration_set_event_destination_id: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_ses.DedicatedIpPool
class DedicatedIpPoolDef(BaseConstruct):
    dedicated_ip_pool_name: typing.Optional[str] = pydantic.Field(None, description='A name for the dedicated IP pool. Default: - a CloudFormation generated name')
    _init_params: typing.ClassVar[list[str]] = ['dedicated_ip_pool_name']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_dedicated_ip_pool_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.DedicatedIpPool'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_dedicated_ip_pool_name']
    ...


    from_dedicated_ip_pool_name: typing.Optional[models.aws_ses.DedicatedIpPoolDefFromDedicatedIpPoolNameParams] = pydantic.Field(None, description='Use an existing dedicated IP pool.')
    resource_config: typing.Optional[models.aws_ses.DedicatedIpPoolDefConfig] = pydantic.Field(None)


class DedicatedIpPoolDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class DedicatedIpPoolDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class DedicatedIpPoolDefFromDedicatedIpPoolNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    dedicated_ip_pool_name: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_ses.DropSpamReceiptRule
class DropSpamReceiptRuleDef(BaseConstruct):
    rule_set: typing.Union[_REQUIRED_INIT_PARAM, models.aws_ses.ReceiptRuleSetDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the rule set that the receipt rule will be added to.\n')
    actions: typing.Optional[typing.Sequence[typing.Union[models.aws_ses_actions.AddHeaderDef, models.aws_ses_actions.BounceDef, models.aws_ses_actions.LambdaDef, models.aws_ses_actions.S3Def, models.aws_ses_actions.SnsDef, models.aws_ses_actions.StopDef]]] = pydantic.Field(None, description='An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule. Default: - No actions.\n')
    after: typing.Optional[typing.Union[models.aws_ses.ReceiptRuleDef]] = pydantic.Field(None, description='An existing rule after which the new rule will be placed. Default: - The new rule is inserted at the beginning of the rule list.\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether the rule is active. Default: true\n')
    receipt_rule_name: typing.Optional[str] = pydantic.Field(None, description='The name for the rule. Default: - A CloudFormation generated name.\n')
    recipients: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The recipient domains and email addresses that the receipt rule applies to. Default: - Match all recipients under all verified domains.\n')
    scan_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether to scan for spam and viruses. Default: false\n')
    tls_policy: typing.Optional[aws_cdk.aws_ses.TlsPolicy] = pydantic.Field(None, description='Whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). Default: - Optional which will not check for TLS.')
    _init_params: typing.ClassVar[list[str]] = ['rule_set', 'actions', 'after', 'enabled', 'receipt_rule_name', 'recipients', 'scan_enabled', 'tls_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.DropSpamReceiptRule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.EmailIdentity
class EmailIdentityDef(BaseConstruct):
    identity: typing.Union[models.aws_ses.IdentityDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The email address or domain to verify.\n')
    configuration_set: typing.Optional[typing.Union[models.aws_ses.ConfigurationSetDef]] = pydantic.Field(None, description='The configuration set to associate with the email identity. Default: - do not use a specific configuration set\n')
    dkim_identity: typing.Optional[models.aws_ses.DkimIdentityDef] = pydantic.Field(None, description='The type of DKIM identity to use. Default: - Easy DKIM with a key length of 2048-bit\n')
    dkim_signing: typing.Optional[bool] = pydantic.Field(None, description='Whether the messages that are sent from the identity are signed using DKIM. Default: true\n')
    feedback_forwarding: typing.Optional[bool] = pydantic.Field(None, description="Whether to receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the ``Return-Path`` header of the original email. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled). Default: true\n")
    mail_from_behavior_on_mx_failure: typing.Optional[aws_cdk.aws_ses.MailFromBehaviorOnMxFailure] = pydantic.Field(None, description="The action to take if the required MX record for the MAIL FROM domain isn't found when you send an email. Default: MailFromBehaviorOnMxFailure.USE_DEFAULT_VALUE\n")
    mail_from_domain: typing.Optional[str] = pydantic.Field(None, description='The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must meet the following criteria: - It has to be a subdomain of the verified identity - It can\'t be used to receive email - It can\'t be used in a "From" address if the MAIL FROM domain is a destination for feedback forwarding emails Default: - use amazonses.com')
    _init_params: typing.ClassVar[list[str]] = ['identity', 'configuration_set', 'dkim_identity', 'dkim_signing', 'feedback_forwarding', 'mail_from_behavior_on_mx_failure', 'mail_from_domain']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_email_identity_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.EmailIdentity'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_email_identity_name']
    ...


    from_email_identity_name: typing.Optional[models.aws_ses.EmailIdentityDefFromEmailIdentityNameParams] = pydantic.Field(None, description='Use an existing email identity.')
    resource_config: typing.Optional[models.aws_ses.EmailIdentityDefConfig] = pydantic.Field(None)


class EmailIdentityDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class EmailIdentityDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class EmailIdentityDefFromEmailIdentityNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    email_identity_name: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_ses.ReceiptFilter
class ReceiptFilterDef(BaseConstruct):
    ip: typing.Optional[str] = pydantic.Field(None, description='The ip address or range to filter. Default: 0.0.0.0/0\n')
    policy: typing.Optional[aws_cdk.aws_ses.ReceiptFilterPolicy] = pydantic.Field(None, description='The policy for the filter. Default: Block\n')
    receipt_filter_name: typing.Optional[str] = pydantic.Field(None, description='The name for the receipt filter. Default: a CloudFormation generated name')
    _init_params: typing.ClassVar[list[str]] = ['ip', 'policy', 'receipt_filter_name']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ReceiptFilter'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.ReceiptFilterDefConfig] = pydantic.Field(None)


class ReceiptFilterDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class ReceiptFilterDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_ses.ReceiptRule
class ReceiptRuleDef(BaseConstruct):
    rule_set: typing.Union[_REQUIRED_INIT_PARAM, models.aws_ses.ReceiptRuleSetDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the rule set that the receipt rule will be added to.\n')
    actions: typing.Optional[typing.Sequence[typing.Union[models.aws_ses_actions.AddHeaderDef, models.aws_ses_actions.BounceDef, models.aws_ses_actions.LambdaDef, models.aws_ses_actions.S3Def, models.aws_ses_actions.SnsDef, models.aws_ses_actions.StopDef]]] = pydantic.Field(None, description='An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule. Default: - No actions.\n')
    after: typing.Optional[typing.Union[models.aws_ses.ReceiptRuleDef]] = pydantic.Field(None, description='An existing rule after which the new rule will be placed. Default: - The new rule is inserted at the beginning of the rule list.\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether the rule is active. Default: true\n')
    receipt_rule_name: typing.Optional[str] = pydantic.Field(None, description='The name for the rule. Default: - A CloudFormation generated name.\n')
    recipients: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The recipient domains and email addresses that the receipt rule applies to. Default: - Match all recipients under all verified domains.\n')
    scan_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether to scan for spam and viruses. Default: false\n')
    tls_policy: typing.Optional[aws_cdk.aws_ses.TlsPolicy] = pydantic.Field(None, description='Whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). Default: - Optional which will not check for TLS.')
    _init_params: typing.ClassVar[list[str]] = ['rule_set', 'actions', 'after', 'enabled', 'receipt_rule_name', 'recipients', 'scan_enabled', 'tls_policy']
    _method_names: typing.ClassVar[list[str]] = ['add_action', 'apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_receipt_rule_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ReceiptRule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_receipt_rule_name']
    ...


    from_receipt_rule_name: typing.Optional[models.aws_ses.ReceiptRuleDefFromReceiptRuleNameParams] = pydantic.Field(None, description='')
    resource_config: typing.Optional[models.aws_ses.ReceiptRuleDefConfig] = pydantic.Field(None)


class ReceiptRuleDefConfig(pydantic.BaseModel):
    add_action: typing.Optional[list[models.aws_ses.ReceiptRuleDefAddActionParams]] = pydantic.Field(None, description='Adds an action to this receipt rule.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class ReceiptRuleDefAddActionParams(pydantic.BaseModel):
    action: typing.Union[models.aws_ses_actions.AddHeaderDef, models.aws_ses_actions.BounceDef, models.aws_ses_actions.LambdaDef, models.aws_ses_actions.S3Def, models.aws_ses_actions.SnsDef, models.aws_ses_actions.StopDef] = pydantic.Field(..., description='-')
    ...

class ReceiptRuleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class ReceiptRuleDefFromReceiptRuleNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-')
    id: str = pydantic.Field(..., description='-\n')
    receipt_rule_name: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_ses.ReceiptRuleSet
class ReceiptRuleSetDef(BaseConstruct):
    drop_spam: typing.Optional[bool] = pydantic.Field(None, description='Whether to add a first rule to stop processing messages that have at least one spam indicator. Default: false\n')
    receipt_rule_set_name: typing.Optional[str] = pydantic.Field(None, description='The name for the receipt rule set. Default: - A CloudFormation generated name.\n')
    rules: typing.Optional[typing.Sequence[typing.Union[models.aws_ses.ReceiptRuleOptionsDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The list of rules to add to this rule set. Rules are added in the same order as they appear in the list. Default: - No rules are added to the rule set.')
    _init_params: typing.ClassVar[list[str]] = ['drop_spam', 'receipt_rule_set_name', 'rules']
    _method_names: typing.ClassVar[list[str]] = ['add_rule', 'apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_receipt_rule_set_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ReceiptRuleSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_receipt_rule_set_name']
    ...


    from_receipt_rule_set_name: typing.Optional[models.aws_ses.ReceiptRuleSetDefFromReceiptRuleSetNameParams] = pydantic.Field(None, description='Import an exported receipt rule set.')
    resource_config: typing.Optional[models.aws_ses.ReceiptRuleSetDefConfig] = pydantic.Field(None)


class ReceiptRuleSetDefConfig(pydantic.BaseModel):
    add_rule: typing.Optional[list[models.aws_ses.ReceiptRuleSetDefAddRuleParams]] = pydantic.Field(None, description='Adds a new receipt rule in this rule set.\nThe new rule is added after\nthe last added rule unless ``after`` is specified.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class ReceiptRuleSetDefAddRuleParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    actions: typing.Optional[typing.Sequence[typing.Union[models.aws_ses_actions.AddHeaderDef, models.aws_ses_actions.BounceDef, models.aws_ses_actions.LambdaDef, models.aws_ses_actions.S3Def, models.aws_ses_actions.SnsDef, models.aws_ses_actions.StopDef]]] = pydantic.Field(None, description='An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule. Default: - No actions.\n')
    after: typing.Optional[typing.Union[models.aws_ses.ReceiptRuleDef]] = pydantic.Field(None, description='An existing rule after which the new rule will be placed. Default: - The new rule is inserted at the beginning of the rule list.\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether the rule is active. Default: true\n')
    receipt_rule_name: typing.Optional[str] = pydantic.Field(None, description='The name for the rule. Default: - A CloudFormation generated name.\n')
    recipients: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The recipient domains and email addresses that the receipt rule applies to. Default: - Match all recipients under all verified domains.\n')
    scan_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether to scan for spam and viruses. Default: false\n')
    tls_policy: typing.Optional[aws_cdk.aws_ses.TlsPolicy] = pydantic.Field(None, description='Whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). Default: - Optional which will not check for TLS.')
    return_config: typing.Optional[list[models.aws_ses.ReceiptRuleDefConfig]] = pydantic.Field(None)
    ...

class ReceiptRuleSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class ReceiptRuleSetDefFromReceiptRuleSetNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    receipt_rule_set_name: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_ses.VdmAttributes
class VdmAttributesDef(BaseConstruct):
    engagement_metrics: typing.Optional[bool] = pydantic.Field(None, description='Whether engagement metrics are enabled for your account. Default: true\n')
    optimized_shared_delivery: typing.Optional[bool] = pydantic.Field(None, description='Whether optimized shared delivery is enabled for your account. Default: true')
    _init_params: typing.ClassVar[list[str]] = ['engagement_metrics', 'optimized_shared_delivery']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_vdm_attributes_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.VdmAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_vdm_attributes_name']
    ...


    from_vdm_attributes_name: typing.Optional[models.aws_ses.VdmAttributesDefFromVdmAttributesNameParams] = pydantic.Field(None, description='Use an existing Virtual Deliverablity Manager attributes resource.')
    resource_config: typing.Optional[models.aws_ses.VdmAttributesDefConfig] = pydantic.Field(None)


class VdmAttributesDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class VdmAttributesDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class VdmAttributesDefFromVdmAttributesNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    vdm_attributes_name: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_ses.AddHeaderActionConfig
class AddHeaderActionConfigDef(BaseStruct):
    header_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the header that you want to add to the incoming message.\n')
    header_value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The content that you want to include in the header.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    add_header_action_config = ses.AddHeaderActionConfig(\n        header_name="headerName",\n        header_value="headerValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['header_name', 'header_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.AddHeaderActionConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.AllowListReceiptFilterProps
class AllowListReceiptFilterPropsDef(BaseStruct):
    ips: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of ip addresses or ranges to allow list.\n\n:exampleMetadata: infused\n\nExample::\n\n    ses.AllowListReceiptFilter(self, "AllowList",\n        ips=["10.0.0.0/16", "1.2.3.4/16"\n        ]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ips']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.AllowListReceiptFilterProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.BounceActionConfig
class BounceActionConfigDef(BaseStruct):
    message: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Human-readable text to include in the bounce message.\n')
    sender: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The email address of the sender of the bounced email. This is the address that the bounce message is sent from.\n')
    smtp_reply_code: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SMTP reply code, as defined by RFC 5321.\n')
    status_code: typing.Optional[str] = pydantic.Field(None, description='The SMTP enhanced status code, as defined by RFC 3463. Default: - No status code.\n')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the bounce action is taken. Default: - No notification is sent to SNS.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    bounce_action_config = ses.BounceActionConfig(\n        message="message",\n        sender="sender",\n        smtp_reply_code="smtpReplyCode",\n\n        # the properties below are optional\n        status_code="statusCode",\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['message', 'sender', 'smtp_reply_code', 'status_code', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.BounceActionConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.ByoDkimOptions
class ByoDkimOptionsDef(BaseStruct):
    private_key: typing.Union[models.SecretValueDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The private key that's used to generate a DKIM signature.\n")
    selector: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="A string that's used to identify a public key in the DNS configuration for a domain.\n")
    public_key: typing.Optional[str] = pydantic.Field(None, description='The public key. If specified, a TXT record with the public key is created. Default: - the validation TXT record with the public key is not created\n\n:exampleMetadata: infused\n\nExample::\n\n    # my_hosted_zone: route53.IPublicHostedZone\n\n\n    ses.EmailIdentity(self, "Identity",\n        identity=ses.Identity.public_hosted_zone(my_hosted_zone),\n        dkim_identity=ses.DkimIdentity.byo_dkim(\n            private_key=SecretValue.secrets_manager("dkim-private-key"),\n            public_key="...base64-encoded-public-key...",\n            selector="selector"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['private_key', 'selector', 'public_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ByoDkimOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.ByoDkimOptionsDefConfig] = pydantic.Field(None)


class ByoDkimOptionsDefConfig(pydantic.BaseModel):
    private_key_config: typing.Optional[models.core.SecretValueDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSet.DashboardOptionsProperty
class CfnConfigurationSet_DashboardOptionsPropertyDef(BaseStruct):
    engagement_metrics: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the status of your VDM engagement metrics collection. Can be one of the following:. - ``ENABLED`` – Amazon SES enables engagement metrics for the configuration set. - ``DISABLED`` – Amazon SES disables engagement metrics for the configuration set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationset-dashboardoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    dashboard_options_property = ses.CfnConfigurationSet.DashboardOptionsProperty(\n        engagement_metrics="engagementMetrics"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['engagement_metrics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSet.DashboardOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSet.DeliveryOptionsProperty
class CfnConfigurationSet_DeliveryOptionsPropertyDef(BaseStruct):
    sending_pool_name: typing.Optional[str] = pydantic.Field(None, description='The name of the dedicated IP pool to associate with the configuration set.\n')
    tls_policy: typing.Optional[str] = pydantic.Field(None, description='Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is ``REQUIRE`` , messages are only delivered if a TLS connection can be established. If the value is ``OPTIONAL`` , messages can be delivered in plain text if a TLS connection can\'t be established. Valid Values: ``REQUIRE | OPTIONAL``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationset-deliveryoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    delivery_options_property = ses.CfnConfigurationSet.DeliveryOptionsProperty(\n        sending_pool_name="sendingPoolName",\n        tls_policy="tlsPolicy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sending_pool_name', 'tls_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSet.DeliveryOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSet.GuardianOptionsProperty
class CfnConfigurationSet_GuardianOptionsPropertyDef(BaseStruct):
    optimized_shared_delivery: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the status of your VDM optimized shared delivery. Can be one of the following:. - ``ENABLED`` – Amazon SES enables optimized shared delivery for the configuration set. - ``DISABLED`` – Amazon SES disables optimized shared delivery for the configuration set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationset-guardianoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    guardian_options_property = ses.CfnConfigurationSet.GuardianOptionsProperty(\n        optimized_shared_delivery="optimizedSharedDelivery"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['optimized_shared_delivery']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSet.GuardianOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSet.ReputationOptionsProperty
class CfnConfigurationSet_ReputationOptionsPropertyDef(BaseStruct):
    reputation_metrics_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Describes whether or not Amazon SES publishes reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch. If the value is ``true`` , reputation metrics are published. If the value is ``false`` , reputation metrics are not published. The default value is ``false`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationset-reputationoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    reputation_options_property = ses.CfnConfigurationSet.ReputationOptionsProperty(\n        reputation_metrics_enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['reputation_metrics_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSet.ReputationOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSet.SendingOptionsProperty
class CfnConfigurationSet_SendingOptionsPropertyDef(BaseStruct):
    sending_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If ``true`` , email sending is enabled for the configuration set. If ``false`` , email sending is disabled for the configuration set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationset-sendingoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    sending_options_property = ses.CfnConfigurationSet.SendingOptionsProperty(\n        sending_enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sending_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSet.SendingOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSet.SuppressionOptionsProperty
class CfnConfigurationSet_SuppressionOptionsPropertyDef(BaseStruct):
    suppressed_reasons: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list that contains the reasons that email addresses are automatically added to the suppression list for your account. This list can contain any or all of the following: - ``COMPLAINT`` – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint. - ``BOUNCE`` – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationset-suppressionoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    suppression_options_property = ses.CfnConfigurationSet.SuppressionOptionsProperty(\n        suppressed_reasons=["suppressedReasons"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['suppressed_reasons']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSet.SuppressionOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSet.TrackingOptionsProperty
class CfnConfigurationSet_TrackingOptionsPropertyDef(BaseStruct):
    custom_redirect_domain: typing.Optional[str] = pydantic.Field(None, description='The custom subdomain that is used to redirect email recipients to the Amazon SES event tracking domain.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationset-trackingoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    tracking_options_property = ses.CfnConfigurationSet.TrackingOptionsProperty(\n        custom_redirect_domain="customRedirectDomain"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_redirect_domain']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSet.TrackingOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSet.VdmOptionsProperty
class CfnConfigurationSet_VdmOptionsPropertyDef(BaseStruct):
    dashboard_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_DashboardOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Settings for your VDM configuration as applicable to the Dashboard.\n')
    guardian_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_GuardianOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Settings for your VDM configuration as applicable to the Guardian.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationset-vdmoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    vdm_options_property = ses.CfnConfigurationSet.VdmOptionsProperty(\n        dashboard_options=ses.CfnConfigurationSet.DashboardOptionsProperty(\n            engagement_metrics="engagementMetrics"\n        ),\n        guardian_options=ses.CfnConfigurationSet.GuardianOptionsProperty(\n            optimized_shared_delivery="optimizedSharedDelivery"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dashboard_options', 'guardian_options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSet.VdmOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSetEventDestination.CloudWatchDestinationProperty
class CfnConfigurationSetEventDestination_CloudWatchDestinationPropertyDef(BaseStruct):
    dimension_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_DimensionConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationseteventdestination-cloudwatchdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cloud_watch_destination_property = ses.CfnConfigurationSetEventDestination.CloudWatchDestinationProperty(\n        dimension_configurations=[ses.CfnConfigurationSetEventDestination.DimensionConfigurationProperty(\n            default_dimension_value="defaultDimensionValue",\n            dimension_name="dimensionName",\n            dimension_value_source="dimensionValueSource"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dimension_configurations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSetEventDestination.CloudWatchDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSetEventDestination.DimensionConfigurationProperty
class CfnConfigurationSetEventDestination_DimensionConfigurationPropertyDef(BaseStruct):
    default_dimension_value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email. The default value must meet the following requirements: - Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), at signs (@), or periods (.). - Contain 256 characters or fewer.\n')
    dimension_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of an Amazon CloudWatch dimension associated with an email sending metric. The name must meet the following requirements: - Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), or colons (:). - Contain 256 characters or fewer.\n')
    dimension_value_source: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an ``X-SES-MESSAGE-TAGS`` header or a parameter to the ``SendEmail`` / ``SendRawEmail`` API, specify ``messageTag`` . To use your own email headers, specify ``emailHeader`` . To put a custom tag on any link included in your email, specify ``linkTag`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationseteventdestination-dimensionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    dimension_configuration_property = ses.CfnConfigurationSetEventDestination.DimensionConfigurationProperty(\n        default_dimension_value="defaultDimensionValue",\n        dimension_name="dimensionName",\n        dimension_value_source="dimensionValueSource"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_dimension_value', 'dimension_name', 'dimension_value_source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSetEventDestination.DimensionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSetEventDestination.EventDestinationProperty
class CfnConfigurationSetEventDestination_EventDestinationPropertyDef(BaseStruct):
    matching_event_types: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The type of email sending events to publish to the event destination. - ``send`` - The send request was successful and SES will attempt to deliver the message to the recipient’s mail server. (If account-level or global suppression is being used, SES will still count it as a send, but delivery is suppressed.) - ``reject`` - SES accepted the email, but determined that it contained a virus and didn’t attempt to deliver it to the recipient’s mail server. - ``bounce`` - ( *Hard bounce* ) The recipient's mail server permanently rejected the email. ( *Soft bounces* are only included when SES fails to deliver the email after retrying for a period of time.) - ``complaint`` - The email was successfully delivered to the recipient’s mail server, but the recipient marked it as spam. - ``delivery`` - SES successfully delivered the email to the recipient's mail server. - ``open`` - The recipient received the message and opened it in their email client. - ``click`` - The recipient clicked one or more links in the email. - ``renderingFailure`` - The email wasn't sent because of a template rendering issue. This event type can occur when template data is missing, or when there is a mismatch between template parameters and data. (This event type only occurs when you send email using the ```SendTemplatedEmail`` <https://docs.aws.amazon.com/ses/latest/APIReference/API_SendTemplatedEmail.html>`_ or ```SendBulkTemplatedEmail`` <https://docs.aws.amazon.com/ses/latest/APIReference/API_SendBulkTemplatedEmail.html>`_ API operations.) - ``deliveryDelay`` - The email couldn't be delivered to the recipient’s mail server because a temporary issue occurred. Delivery delays can occur, for example, when the recipient's inbox is full, or when the receiving email server experiences a transient issue. - ``subscription`` - The email was successfully delivered, but the recipient updated their subscription preferences by clicking on an *unsubscribe* link as part of your `subscription management <https://docs.aws.amazon.com/ses/latest/dg/sending-email-subscription-management.html>`_ .\n")
    cloud_watch_destination: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_CloudWatchDestinationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to ``true`` to enable publishing to this destination; set to ``false`` to prevent publishing to this destination. The default value is ``false`` .\n')
    kinesis_firehose_destination: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_KinesisFirehoseDestinationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the event destination. The name must meet the following requirements:. - Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). - Contain 64 characters or fewer.\n')
    sns_destination: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_SnsDestinationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationseteventdestination-eventdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    event_destination_property = ses.CfnConfigurationSetEventDestination.EventDestinationProperty(\n        matching_event_types=["matchingEventTypes"],\n\n        # the properties below are optional\n        cloud_watch_destination=ses.CfnConfigurationSetEventDestination.CloudWatchDestinationProperty(\n            dimension_configurations=[ses.CfnConfigurationSetEventDestination.DimensionConfigurationProperty(\n                default_dimension_value="defaultDimensionValue",\n                dimension_name="dimensionName",\n                dimension_value_source="dimensionValueSource"\n            )]\n        ),\n        enabled=False,\n        kinesis_firehose_destination=ses.CfnConfigurationSetEventDestination.KinesisFirehoseDestinationProperty(\n            delivery_stream_arn="deliveryStreamArn",\n            iam_role_arn="iamRoleArn"\n        ),\n        name="name",\n        sns_destination=ses.CfnConfigurationSetEventDestination.SnsDestinationProperty(\n            topic_arn="topicArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['matching_event_types', 'cloud_watch_destination', 'enabled', 'kinesis_firehose_destination', 'name', 'sns_destination']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSetEventDestination.EventDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSetEventDestination.KinesisFirehoseDestinationProperty
class CfnConfigurationSetEventDestination_KinesisFirehoseDestinationPropertyDef(BaseStruct):
    delivery_stream_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.\n')
    iam_role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose stream.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationseteventdestination-kinesisfirehosedestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    kinesis_firehose_destination_property = ses.CfnConfigurationSetEventDestination.KinesisFirehoseDestinationProperty(\n        delivery_stream_arn="deliveryStreamArn",\n        iam_role_arn="iamRoleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delivery_stream_arn', 'iam_role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSetEventDestination.KinesisFirehoseDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSetEventDestination.SnsDestinationProperty
class CfnConfigurationSetEventDestination_SnsDestinationPropertyDef(BaseStruct):
    topic_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Amazon SNS topic for email sending events. You can find the ARN of a topic by using the `ListTopics <https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html>`_ Amazon SNS operation. For more information about Amazon SNS topics, see the `Amazon SNS Developer Guide <https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-configurationseteventdestination-snsdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    sns_destination_property = ses.CfnConfigurationSetEventDestination.SnsDestinationProperty(\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSetEventDestination.SnsDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnContactList.TopicProperty
class CfnContactList_TopicPropertyDef(BaseStruct):
    default_subscription_status: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the topic the contact will see.\n')
    topic_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the topic.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of what the topic is about, which the contact will see.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-contactlist-topic.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    topic_property = ses.CfnContactList.TopicProperty(\n        default_subscription_status="defaultSubscriptionStatus",\n        display_name="displayName",\n        topic_name="topicName",\n\n        # the properties below are optional\n        description="description"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_subscription_status', 'display_name', 'topic_name', 'description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnContactList.TopicProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnEmailIdentity.ConfigurationSetAttributesProperty
class CfnEmailIdentity_ConfigurationSetAttributesPropertyDef(BaseStruct):
    configuration_set_name: typing.Optional[str] = pydantic.Field(None, description='The configuration set to associate with an email identity.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-emailidentity-configurationsetattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    configuration_set_attributes_property = ses.CfnEmailIdentity.ConfigurationSetAttributesProperty(\n        configuration_set_name="configurationSetName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_set_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnEmailIdentity.ConfigurationSetAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnEmailIdentity.DkimAttributesProperty
class CfnEmailIdentity_DkimAttributesPropertyDef(BaseStruct):
    signing_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Sets the DKIM signing configuration for the identity. When you set this value ``true`` , then the messages that are sent from the identity are signed using DKIM. If you set this value to ``false`` , your messages are sent without DKIM signing.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-emailidentity-dkimattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    dkim_attributes_property = ses.CfnEmailIdentity.DkimAttributesProperty(\n        signing_enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['signing_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnEmailIdentity.DkimAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnEmailIdentity.DkimSigningAttributesProperty
class CfnEmailIdentity_DkimSigningAttributesPropertyDef(BaseStruct):
    domain_signing_private_key: typing.Optional[str] = pydantic.Field(None, description="[Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding. .. epigraph:: Rather than embedding sensitive information directly in your CFN templates, we recommend you use dynamic parameters in the stack template to reference sensitive information that is stored and managed outside of CFN, such as in the AWS Systems Manager Parameter Store or AWS Secrets Manager. For more information, see the `Do not embed credentials in your templates <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#creds>`_ best practice.\n")
    domain_signing_selector: typing.Optional[str] = pydantic.Field(None, description="[Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.\n")
    next_signing_key_length: typing.Optional[str] = pydantic.Field(None, description='[Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day. Valid Values: ``RSA_1024_BIT | RSA_2048_BIT``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-emailidentity-dkimsigningattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    dkim_signing_attributes_property = ses.CfnEmailIdentity.DkimSigningAttributesProperty(\n        domain_signing_private_key="domainSigningPrivateKey",\n        domain_signing_selector="domainSigningSelector",\n        next_signing_key_length="nextSigningKeyLength"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_signing_private_key', 'domain_signing_selector', 'next_signing_key_length']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnEmailIdentity.DkimSigningAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnEmailIdentity.FeedbackAttributesProperty
class CfnEmailIdentity_FeedbackAttributesPropertyDef(BaseStruct):
    email_forwarding_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Sets the feedback forwarding configuration for the identity. If the value is ``true`` , you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the ``Return-Path`` header of the original email. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-emailidentity-feedbackattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    feedback_attributes_property = ses.CfnEmailIdentity.FeedbackAttributesProperty(\n        email_forwarding_enabled=False\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['email_forwarding_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnEmailIdentity.FeedbackAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnEmailIdentity.MailFromAttributesProperty
class CfnEmailIdentity_MailFromAttributesPropertyDef(BaseStruct):
    behavior_on_mx_failure: typing.Optional[str] = pydantic.Field(None, description="The action to take if the required MX record isn't found when you send an email. When you set this value to ``USE_DEFAULT_VALUE`` , the mail is sent using *amazonses.com* as the MAIL FROM domain. When you set this value to ``REJECT_MESSAGE`` , the Amazon SES API v2 returns a ``MailFromDomainNotVerified`` error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the ``Pending`` , ``Failed`` , and ``TemporaryFailure`` states. Valid Values: ``USE_DEFAULT_VALUE | REJECT_MESSAGE``\n")
    mail_from_domain: typing.Optional[str] = pydantic.Field(None, description='The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must meet the following criteria: - It has to be a subdomain of the verified identity. - It can\'t be used to receive email. - It can\'t be used in a "From" address if the MAIL FROM domain is a destination for feedback forwarding emails.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-emailidentity-mailfromattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    mail_from_attributes_property = ses.CfnEmailIdentity.MailFromAttributesProperty(\n        behavior_on_mx_failure="behaviorOnMxFailure",\n        mail_from_domain="mailFromDomain"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['behavior_on_mx_failure', 'mail_from_domain']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnEmailIdentity.MailFromAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptFilter.FilterProperty
class CfnReceiptFilter_FilterPropertyDef(BaseStruct):
    ip_filter: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ses.CfnReceiptFilter_IpFilterPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the IP address filter. The name must meet the following requirements:. - Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). - Start and end with a letter or number. - Contain 64 characters or fewer.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptfilter-filter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    filter_property = ses.CfnReceiptFilter.FilterProperty(\n        ip_filter=ses.CfnReceiptFilter.IpFilterProperty(\n            cidr="cidr",\n            policy="policy"\n        ),\n\n        # the properties below are optional\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ip_filter', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptFilter.FilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptFilter.IpFilterProperty
class CfnReceiptFilter_IpFilterPropertyDef(BaseStruct):
    cidr: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A single IP address or a range of IP addresses to block or allow, specified in Classless Inter-Domain Routing (CIDR) notation. An example of a single email address is 10.0.0.1. An example of a range of IP addresses is 10.0.0.1/24. For more information about CIDR notation, see `RFC 2317 <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc2317>`_ .\n')
    policy: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether to block or allow incoming mail from the specified IP addresses.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptfilter-ipfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    ip_filter_property = ses.CfnReceiptFilter.IpFilterProperty(\n        cidr="cidr",\n        policy="policy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cidr', 'policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptFilter.IpFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule.ActionProperty
class CfnReceiptRule_ActionPropertyDef(BaseStruct):
    add_header_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_AddHeaderActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Adds a header to the received email.\n')
    bounce_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_BounceActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Rejects the received email by returning a bounce response to the sender and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).\n')
    lambda_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_LambdaActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Calls an AWS Lambda function, and optionally, publishes a notification to Amazon SNS.\n')
    s3_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_S3ActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Saves the received message to an Amazon Simple Storage Service (Amazon S3) bucket and, optionally, publishes a notification to Amazon SNS.\n')
    sns_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_SNSActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Publishes the email content within a notification to Amazon SNS.\n')
    stop_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_StopActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Terminates the evaluation of the receipt rule set and optionally publishes a notification to Amazon SNS.\n')
    workmail_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_WorkmailActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Calls Amazon WorkMail and, optionally, publishes a notification to Amazon Amazon SNS.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptrule-action.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    action_property = ses.CfnReceiptRule.ActionProperty(\n        add_header_action=ses.CfnReceiptRule.AddHeaderActionProperty(\n            header_name="headerName",\n            header_value="headerValue"\n        ),\n        bounce_action=ses.CfnReceiptRule.BounceActionProperty(\n            message="message",\n            sender="sender",\n            smtp_reply_code="smtpReplyCode",\n\n            # the properties below are optional\n            status_code="statusCode",\n            topic_arn="topicArn"\n        ),\n        lambda_action=ses.CfnReceiptRule.LambdaActionProperty(\n            function_arn="functionArn",\n\n            # the properties below are optional\n            invocation_type="invocationType",\n            topic_arn="topicArn"\n        ),\n        s3_action=ses.CfnReceiptRule.S3ActionProperty(\n            bucket_name="bucketName",\n\n            # the properties below are optional\n            kms_key_arn="kmsKeyArn",\n            object_key_prefix="objectKeyPrefix",\n            topic_arn="topicArn"\n        ),\n        sns_action=ses.CfnReceiptRule.SNSActionProperty(\n            encoding="encoding",\n            topic_arn="topicArn"\n        ),\n        stop_action=ses.CfnReceiptRule.StopActionProperty(\n            scope="scope",\n\n            # the properties below are optional\n            topic_arn="topicArn"\n        ),\n        workmail_action=ses.CfnReceiptRule.WorkmailActionProperty(\n            organization_arn="organizationArn",\n\n            # the properties below are optional\n            topic_arn="topicArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['add_header_action', 'bounce_action', 'lambda_action', 's3_action', 'sns_action', 'stop_action', 'workmail_action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule.ActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule.AddHeaderActionProperty
class CfnReceiptRule_AddHeaderActionPropertyDef(BaseStruct):
    header_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the header to add to the incoming message. The name must contain at least one character, and can contain up to 50 characters. It consists of alphanumeric (a–z, A–Z, 0–9) characters and dashes.\n')
    header_value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The content to include in the header. This value can contain up to 2048 characters. It can\'t contain newline ( ``\\n`` ) or carriage return ( ``\\r`` ) characters.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptrule-addheaderaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    add_header_action_property = ses.CfnReceiptRule.AddHeaderActionProperty(\n        header_name="headerName",\n        header_value="headerValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['header_name', 'header_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule.AddHeaderActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule.BounceActionProperty
class CfnReceiptRule_BounceActionPropertyDef(BaseStruct):
    message: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Human-readable text to include in the bounce message.\n')
    sender: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The email address of the sender of the bounced email. This is the address from which the bounce message is sent.\n')
    smtp_reply_code: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SMTP reply code, as defined by `RFC 5321 <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc5321>`_ .\n')
    status_code: typing.Optional[str] = pydantic.Field(None, description='The SMTP enhanced status code, as defined by `RFC 3463 <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc3463>`_ .\n')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the bounce action is taken. You can find the ARN of a topic by using the `ListTopics <https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html>`_ operation in Amazon SNS. For more information about Amazon SNS topics, see the `Amazon SNS Developer Guide <https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptrule-bounceaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    bounce_action_property = ses.CfnReceiptRule.BounceActionProperty(\n        message="message",\n        sender="sender",\n        smtp_reply_code="smtpReplyCode",\n\n        # the properties below are optional\n        status_code="statusCode",\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['message', 'sender', 'smtp_reply_code', 'status_code', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule.BounceActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule.LambdaActionProperty
class CfnReceiptRule_LambdaActionPropertyDef(BaseStruct):
    function_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the AWS Lambda function. An example of an AWS Lambda function ARN is ``arn:aws:lambda:us-west-2:account-id:function:MyFunction`` . For more information about AWS Lambda, see the `AWS Lambda Developer Guide <https://docs.aws.amazon.com/lambda/latest/dg/welcome.html>`_ .\n')
    invocation_type: typing.Optional[str] = pydantic.Field(None, description='The invocation type of the AWS Lambda function. An invocation type of ``RequestResponse`` means that the execution of the function immediately results in a response, and a value of ``Event`` means that the function is invoked asynchronously. The default value is ``Event`` . For information about AWS Lambda invocation types, see the `AWS Lambda Developer Guide <https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html>`_ . .. epigraph:: There is a 30-second timeout on ``RequestResponse`` invocations. You should use ``Event`` invocation in most cases. Use ``RequestResponse`` only to make a mail flow decision, such as whether to stop the receipt rule or the receipt rule set.\n')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is executed. You can find the ARN of a topic by using the `ListTopics <https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html>`_ operation in Amazon SNS. For more information about Amazon SNS topics, see the `Amazon SNS Developer Guide <https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptrule-lambdaaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    lambda_action_property = ses.CfnReceiptRule.LambdaActionProperty(\n        function_arn="functionArn",\n\n        # the properties below are optional\n        invocation_type="invocationType",\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['function_arn', 'invocation_type', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule.LambdaActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule.RuleProperty
class CfnReceiptRule_RulePropertyDef(BaseStruct):
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If ``true`` , the receipt rule is active. The default value is ``false`` .\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the receipt rule. The name must meet the following requirements:. - Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), or periods (.). - Start and end with a letter or number. - Contain 64 characters or fewer.\n')
    recipients: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule matches all recipients on all verified domains.\n')
    scan_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If ``true`` , then messages that this receipt rule applies to are scanned for spam and viruses. The default value is ``false`` .\n')
    tls_policy: typing.Optional[str] = pydantic.Field(None, description='Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to ``Require`` , Amazon SES bounces emails that are not received over TLS. The default is ``Optional`` . Valid Values: ``Require | Optional``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptrule-rule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    rule_property = ses.CfnReceiptRule.RuleProperty(\n        actions=[ses.CfnReceiptRule.ActionProperty(\n            add_header_action=ses.CfnReceiptRule.AddHeaderActionProperty(\n                header_name="headerName",\n                header_value="headerValue"\n            ),\n            bounce_action=ses.CfnReceiptRule.BounceActionProperty(\n                message="message",\n                sender="sender",\n                smtp_reply_code="smtpReplyCode",\n\n                # the properties below are optional\n                status_code="statusCode",\n                topic_arn="topicArn"\n            ),\n            lambda_action=ses.CfnReceiptRule.LambdaActionProperty(\n                function_arn="functionArn",\n\n                # the properties below are optional\n                invocation_type="invocationType",\n                topic_arn="topicArn"\n            ),\n            s3_action=ses.CfnReceiptRule.S3ActionProperty(\n                bucket_name="bucketName",\n\n                # the properties below are optional\n                kms_key_arn="kmsKeyArn",\n                object_key_prefix="objectKeyPrefix",\n                topic_arn="topicArn"\n            ),\n            sns_action=ses.CfnReceiptRule.SNSActionProperty(\n                encoding="encoding",\n                topic_arn="topicArn"\n            ),\n            stop_action=ses.CfnReceiptRule.StopActionProperty(\n                scope="scope",\n\n                # the properties below are optional\n                topic_arn="topicArn"\n            ),\n            workmail_action=ses.CfnReceiptRule.WorkmailActionProperty(\n                organization_arn="organizationArn",\n\n                # the properties below are optional\n                topic_arn="topicArn"\n            )\n        )],\n        enabled=False,\n        name="name",\n        recipients=["recipients"],\n        scan_enabled=False,\n        tls_policy="tlsPolicy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'enabled', 'name', 'recipients', 'scan_enabled', 'tls_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule.RuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule.S3ActionProperty
class CfnReceiptRule_S3ActionPropertyDef(BaseStruct):
    bucket_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon S3 bucket for incoming email.\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description="The customer master key that Amazon SES should use to encrypt your emails before saving them to the Amazon S3 bucket. You can use the default master key or a custom master key that you created in AWS KMS as follows: - To use the default master key, provide an ARN in the form of ``arn:aws:kms:REGION:ACCOUNT-ID-WITHOUT-HYPHENS:alias/aws/ses`` . For example, if your AWS account ID is 123456789012 and you want to use the default master key in the US West (Oregon) Region, the ARN of the default master key would be ``arn:aws:kms:us-west-2:123456789012:alias/aws/ses`` . If you use the default master key, you don't need to perform any extra steps to give Amazon SES permission to use the key. - To use a custom master key that you created in AWS KMS, provide the ARN of the master key and ensure that you add a statement to your key's policy to give Amazon SES permission to use it. For more information about giving permissions, see the `Amazon SES Developer Guide <https://docs.aws.amazon.com/ses/latest/dg/receiving-email-permissions.html>`_ . For more information about key policies, see the `AWS KMS Developer Guide <https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html>`_ . If you do not specify a master key, Amazon SES does not encrypt your emails. .. epigraph:: Your mail is encrypted by Amazon SES using the Amazon S3 encryption client before the mail is submitted to Amazon S3 for storage. It is not encrypted using Amazon S3 server-side encryption. This means that you must use the Amazon S3 encryption client to decrypt the email after retrieving it from Amazon S3, as the service has no access to use your AWS KMS keys for decryption. This encryption client is currently available with the `AWS SDK for Java <https://docs.aws.amazon.com/sdk-for-java/>`_ and `AWS SDK for Ruby <https://docs.aws.amazon.com/sdk-for-ruby/>`_ only. For more information about client-side encryption using AWS KMS master keys, see the `Amazon S3 Developer Guide <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html>`_ .\n")
    object_key_prefix: typing.Optional[str] = pydantic.Field(None, description='The key prefix of the Amazon S3 bucket. The key prefix is similar to a directory name that enables you to store similar data under the same directory in a bucket.\n')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the Amazon SNS topic to notify when the message is saved to the Amazon S3 bucket. You can find the ARN of a topic by using the `ListTopics <https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html>`_ operation in Amazon SNS. For more information about Amazon SNS topics, see the `Amazon SNS Developer Guide <https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptrule-s3action.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    s3_action_property = ses.CfnReceiptRule.S3ActionProperty(\n        bucket_name="bucketName",\n\n        # the properties below are optional\n        kms_key_arn="kmsKeyArn",\n        object_key_prefix="objectKeyPrefix",\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'kms_key_arn', 'object_key_prefix', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule.S3ActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule.SNSActionProperty
class CfnReceiptRule_SNSActionPropertyDef(BaseStruct):
    encoding: typing.Optional[str] = pydantic.Field(None, description='The encoding to use for the email within the Amazon SNS notification. UTF-8 is easier to use, but may not preserve all special characters when a message was encoded with a different encoding format. Base64 preserves all special characters. The default value is UTF-8.\n')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify. You can find the ARN of a topic by using the `ListTopics <https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html>`_ operation in Amazon SNS. For more information about Amazon SNS topics, see the `Amazon SNS Developer Guide <https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptrule-snsaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    s_nSAction_property = ses.CfnReceiptRule.SNSActionProperty(\n        encoding="encoding",\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encoding', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule.SNSActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule.StopActionProperty
class CfnReceiptRule_StopActionPropertyDef(BaseStruct):
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the stop action is taken. You can find the ARN of a topic by using the `ListTopics <https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html>`_ Amazon SNS operation. For more information about Amazon SNS topics, see the `Amazon SNS Developer Guide <https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptrule-stopaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    stop_action_property = ses.CfnReceiptRule.StopActionProperty(\n        scope="scope",\n\n        # the properties below are optional\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule.StopActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule.WorkmailActionProperty
class CfnReceiptRule_WorkmailActionPropertyDef(BaseStruct):
    organization_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the Amazon WorkMail organization. Amazon WorkMail ARNs use the following format:. ``arn:aws:workmail:<region>:<awsAccountId>:organization/<workmailOrganizationId>`` You can find the ID of your organization by using the `ListOrganizations <https://docs.aws.amazon.com/workmail/latest/APIReference/API_ListOrganizations.html>`_ operation in Amazon WorkMail. Amazon WorkMail organization IDs begin with " ``m-`` ", followed by a string of alphanumeric characters. For information about Amazon WorkMail organizations, see the `Amazon WorkMail Administrator Guide <https://docs.aws.amazon.com/workmail/latest/adminguide/organizations_overview.html>`_ .\n')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the WorkMail action is called. You can find the ARN of a topic by using the `ListTopics <https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html>`_ operation in Amazon SNS. For more information about Amazon SNS topics, see the `Amazon SNS Developer Guide <https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-receiptrule-workmailaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    workmail_action_property = ses.CfnReceiptRule.WorkmailActionProperty(\n        organization_arn="organizationArn",\n\n        # the properties below are optional\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['organization_arn', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule.WorkmailActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnTemplate.TemplateProperty
class CfnTemplate_TemplatePropertyDef(BaseStruct):
    subject_part: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The subject line of the email.\n')
    html_part: typing.Optional[str] = pydantic.Field(None, description='The HTML body of the email.\n')
    template_name: typing.Optional[str] = pydantic.Field(None, description='The name of the template.\n')
    text_part: typing.Optional[str] = pydantic.Field(None, description='The email body that is visible to recipients whose email clients do not display HTML content.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-template-template.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    template_property = ses.CfnTemplate.TemplateProperty(\n        subject_part="subjectPart",\n\n        # the properties below are optional\n        html_part="htmlPart",\n        template_name="templateName",\n        text_part="textPart"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['subject_part', 'html_part', 'template_name', 'text_part']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnTemplate.TemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnVdmAttributes.DashboardAttributesProperty
class CfnVdmAttributes_DashboardAttributesPropertyDef(BaseStruct):
    engagement_metrics: typing.Optional[str] = pydantic.Field(None, description='Specifies the status of your VDM engagement metrics collection. Can be one of the following:. - ``ENABLED`` – Amazon SES enables engagement metrics for your account. - ``DISABLED`` – Amazon SES disables engagement metrics for your account.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-vdmattributes-dashboardattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    dashboard_attributes_property = ses.CfnVdmAttributes.DashboardAttributesProperty(\n        engagement_metrics="engagementMetrics"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['engagement_metrics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnVdmAttributes.DashboardAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnVdmAttributes.GuardianAttributesProperty
class CfnVdmAttributes_GuardianAttributesPropertyDef(BaseStruct):
    optimized_shared_delivery: typing.Optional[str] = pydantic.Field(None, description='Specifies the status of your VDM optimized shared delivery. Can be one of the following:. - ``ENABLED`` – Amazon SES enables optimized shared delivery for your account. - ``DISABLED`` – Amazon SES disables optimized shared delivery for your account.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ses-vdmattributes-guardianattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    guardian_attributes_property = ses.CfnVdmAttributes.GuardianAttributesProperty(\n        optimized_shared_delivery="optimizedSharedDelivery"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['optimized_shared_delivery']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnVdmAttributes.GuardianAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CloudWatchDimension
class CloudWatchDimensionDef(BaseStruct):
    default_value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of an Amazon CloudWatch dimension associated with an email sending metric.\n')
    source: typing.Union[aws_cdk.aws_ses.CloudWatchDimensionSource, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cloud_watch_dimension = ses.CloudWatchDimension(\n        default_value="defaultValue",\n        name="name",\n        source=ses.CloudWatchDimensionSource.EMAIL_HEADER\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_value', 'name', 'source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CloudWatchDimension'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.ConfigurationSetEventDestinationOptions
class ConfigurationSetEventDestinationOptionsDef(BaseStruct):
    destination: typing.Union[models.aws_ses.EventDestinationDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The event destination.\n')
    configuration_set_event_destination_name: typing.Optional[str] = pydantic.Field(None, description='A name for the configuration set event destination. Default: - a CloudFormation generated name\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether Amazon SES publishes events to this destination. Default: true\n')
    events: typing.Optional[typing.Sequence[aws_cdk.aws_ses.EmailSendingEvent]] = pydantic.Field(None, description='The type of email sending events to publish to the event destination. Default: - send all event types\n\n:exampleMetadata: infused\n\nExample::\n\n    # my_configuration_set: ses.ConfigurationSet\n    # my_topic: sns.Topic\n\n\n    my_configuration_set.add_event_destination("ToSns",\n        destination=ses.EventDestination.sns_topic(my_topic)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'configuration_set_event_destination_name', 'enabled', 'events']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ConfigurationSetEventDestinationOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.ConfigurationSetEventDestinationProps
class ConfigurationSetEventDestinationPropsDef(BaseStruct):
    destination: typing.Union[models.aws_ses.EventDestinationDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The event destination.\n')
    configuration_set_event_destination_name: typing.Optional[str] = pydantic.Field(None, description='A name for the configuration set event destination. Default: - a CloudFormation generated name\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether Amazon SES publishes events to this destination. Default: true\n')
    events: typing.Optional[typing.Sequence[aws_cdk.aws_ses.EmailSendingEvent]] = pydantic.Field(None, description='The type of email sending events to publish to the event destination. Default: - send all event types\n')
    configuration_set: typing.Union[_REQUIRED_INIT_PARAM, models.aws_ses.ConfigurationSetDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The configuration set that contains the event destination.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    # configuration_set: ses.ConfigurationSet\n    # event_destination: ses.EventDestination\n\n    configuration_set_event_destination_props = ses.ConfigurationSetEventDestinationProps(\n        configuration_set=configuration_set,\n        destination=event_destination,\n\n        # the properties below are optional\n        configuration_set_event_destination_name="configurationSetEventDestinationName",\n        enabled=False,\n        events=[ses.EmailSendingEvent.SEND]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'configuration_set_event_destination_name', 'enabled', 'events', 'configuration_set']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ConfigurationSetEventDestinationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.ConfigurationSetProps
class ConfigurationSetPropsDef(BaseStruct):
    configuration_set_name: typing.Optional[str] = pydantic.Field(None, description='A name for the configuration set. Default: - a CloudFormation generated name\n')
    custom_tracking_redirect_domain: typing.Optional[str] = pydantic.Field(None, description='The custom subdomain that is used to redirect email recipients to the Amazon SES event tracking domain. Default: - use the default awstrack.me domain\n')
    dedicated_ip_pool: typing.Optional[typing.Union[models.aws_ses.DedicatedIpPoolDef]] = pydantic.Field(None, description='The dedicated IP pool to associate with the configuration set. Default: - do not use a dedicated IP pool\n')
    reputation_metrics: typing.Optional[bool] = pydantic.Field(None, description='Whether to publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch. Default: false\n')
    sending_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether email sending is enabled. Default: true\n')
    suppression_reasons: typing.Optional[aws_cdk.aws_ses.SuppressionReasons] = pydantic.Field(None, description="The reasons for which recipient email addresses should be automatically added to your account's suppression list. Default: - use account level settings\n")
    tls_policy: typing.Optional[aws_cdk.aws_ses.ConfigurationSetTlsPolicy] = pydantic.Field(None, description='Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Default: ConfigurationSetTlsPolicy.OPTIONAL\n\n:exampleMetadata: infused\n\nExample::\n\n    # my_pool: ses.IDedicatedIpPool\n\n\n    ses.ConfigurationSet(self, "ConfigurationSet",\n        custom_tracking_redirect_domain="track.cdk.dev",\n        suppression_reasons=ses.SuppressionReasons.COMPLAINTS_ONLY,\n        tls_policy=ses.ConfigurationSetTlsPolicy.REQUIRE,\n        dedicated_ip_pool=my_pool\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_set_name', 'custom_tracking_redirect_domain', 'dedicated_ip_pool', 'reputation_metrics', 'sending_enabled', 'suppression_reasons', 'tls_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ConfigurationSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.DedicatedIpPoolProps
class DedicatedIpPoolPropsDef(BaseStruct):
    dedicated_ip_pool_name: typing.Optional[str] = pydantic.Field(None, description='A name for the dedicated IP pool. Default: - a CloudFormation generated name\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    dedicated_ip_pool_props = ses.DedicatedIpPoolProps(\n        dedicated_ip_pool_name="dedicatedIpPoolName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dedicated_ip_pool_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.DedicatedIpPoolProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.DkimIdentityConfig
class DkimIdentityConfigDef(BaseStruct):
    domain_signing_private_key: typing.Optional[str] = pydantic.Field(None, description="A private key that's used to generate a DKIM signature. Default: - use Easy DKIM\n")
    domain_signing_selector: typing.Optional[str] = pydantic.Field(None, description="A string that's used to identify a public key in the DNS configuration for a domain. Default: - use Easy DKIM\n")
    next_signing_key_length: typing.Optional[aws_cdk.aws_ses.EasyDkimSigningKeyLength] = pydantic.Field(None, description='The key length of the future DKIM key pair to be generated. This can be changed at most once per day. Default: EasyDkimSigningKeyLength.RSA_2048_BIT\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    dkim_identity_config = ses.DkimIdentityConfig(\n        domain_signing_private_key="domainSigningPrivateKey",\n        domain_signing_selector="domainSigningSelector",\n        next_signing_key_length=ses.EasyDkimSigningKeyLength.RSA_1024_BIT\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_signing_private_key', 'domain_signing_selector', 'next_signing_key_length']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.DkimIdentityConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.DkimRecord
class DkimRecordDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the record.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value of the record.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    dkim_record = ses.DkimRecord(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.DkimRecord'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.DropSpamReceiptRuleProps
class DropSpamReceiptRulePropsDef(BaseStruct):
    actions: typing.Optional[typing.Sequence[typing.Union[models.aws_ses_actions.AddHeaderDef, models.aws_ses_actions.BounceDef, models.aws_ses_actions.LambdaDef, models.aws_ses_actions.S3Def, models.aws_ses_actions.SnsDef, models.aws_ses_actions.StopDef]]] = pydantic.Field(None, description='An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule. Default: - No actions.')
    after: typing.Optional[typing.Union[models.aws_ses.ReceiptRuleDef]] = pydantic.Field(None, description='An existing rule after which the new rule will be placed. Default: - The new rule is inserted at the beginning of the rule list.\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether the rule is active. Default: true\n')
    receipt_rule_name: typing.Optional[str] = pydantic.Field(None, description='The name for the rule. Default: - A CloudFormation generated name.\n')
    recipients: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The recipient domains and email addresses that the receipt rule applies to. Default: - Match all recipients under all verified domains.\n')
    scan_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether to scan for spam and viruses. Default: false\n')
    tls_policy: typing.Optional[aws_cdk.aws_ses.TlsPolicy] = pydantic.Field(None, description='Whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). Default: - Optional which will not check for TLS.\n')
    rule_set: typing.Union[_REQUIRED_INIT_PARAM, models.aws_ses.ReceiptRuleSetDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the rule set that the receipt rule will be added to.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    # receipt_rule: ses.ReceiptRule\n    # receipt_rule_action: ses.IReceiptRuleAction\n    # receipt_rule_set: ses.ReceiptRuleSet\n\n    drop_spam_receipt_rule_props = ses.DropSpamReceiptRuleProps(\n        rule_set=receipt_rule_set,\n\n        # the properties below are optional\n        actions=[receipt_rule_action],\n        after=receipt_rule,\n        enabled=False,\n        receipt_rule_name="receiptRuleName",\n        recipients=["recipients"],\n        scan_enabled=False,\n        tls_policy=ses.TlsPolicy.OPTIONAL\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'after', 'enabled', 'receipt_rule_name', 'recipients', 'scan_enabled', 'tls_policy', 'rule_set']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.DropSpamReceiptRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.DropSpamReceiptRulePropsDefConfig] = pydantic.Field(None)


class DropSpamReceiptRulePropsDefConfig(pydantic.BaseModel):
    rule_set_config: typing.Optional[models._interface_methods.AwsSesIReceiptRuleSetDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_ses.EmailIdentityProps
class EmailIdentityPropsDef(BaseStruct):
    identity: typing.Union[models.aws_ses.IdentityDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The email address or domain to verify.\n')
    configuration_set: typing.Optional[typing.Union[models.aws_ses.ConfigurationSetDef]] = pydantic.Field(None, description='The configuration set to associate with the email identity. Default: - do not use a specific configuration set\n')
    dkim_identity: typing.Optional[models.aws_ses.DkimIdentityDef] = pydantic.Field(None, description='The type of DKIM identity to use. Default: - Easy DKIM with a key length of 2048-bit\n')
    dkim_signing: typing.Optional[bool] = pydantic.Field(None, description='Whether the messages that are sent from the identity are signed using DKIM. Default: true\n')
    feedback_forwarding: typing.Optional[bool] = pydantic.Field(None, description="Whether to receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the ``Return-Path`` header of the original email. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled). Default: true\n")
    mail_from_behavior_on_mx_failure: typing.Optional[aws_cdk.aws_ses.MailFromBehaviorOnMxFailure] = pydantic.Field(None, description="The action to take if the required MX record for the MAIL FROM domain isn't found when you send an email. Default: MailFromBehaviorOnMxFailure.USE_DEFAULT_VALUE\n")
    mail_from_domain: typing.Optional[str] = pydantic.Field(None, description='The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must meet the following criteria: - It has to be a subdomain of the verified identity - It can\'t be used to receive email - It can\'t be used in a "From" address if the MAIL FROM domain is a destination for feedback forwarding emails Default: - use amazonses.com\n\n:exampleMetadata: infused\n\nExample::\n\n    # my_hosted_zone: route53.IPublicHostedZone\n\n\n    identity = ses.EmailIdentity(self, "Identity",\n        identity=ses.Identity.public_hosted_zone(my_hosted_zone),\n        mail_from_domain="mail.cdk.dev"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['identity', 'configuration_set', 'dkim_identity', 'dkim_signing', 'feedback_forwarding', 'mail_from_behavior_on_mx_failure', 'mail_from_domain']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.EmailIdentityProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.LambdaActionConfig
class LambdaActionConfigDef(BaseStruct):
    function_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the AWS Lambda function.\n')
    invocation_type: typing.Optional[str] = pydantic.Field(None, description="The invocation type of the AWS Lambda function. Default: 'Event'\n")
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is executed. Default: - No notification is sent to SNS.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    lambda_action_config = ses.LambdaActionConfig(\n        function_arn="functionArn",\n\n        # the properties below are optional\n        invocation_type="invocationType",\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['function_arn', 'invocation_type', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.LambdaActionConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.ReceiptFilterProps
class ReceiptFilterPropsDef(BaseStruct):
    ip: typing.Optional[str] = pydantic.Field(None, description='The ip address or range to filter. Default: 0.0.0.0/0\n')
    policy: typing.Optional[aws_cdk.aws_ses.ReceiptFilterPolicy] = pydantic.Field(None, description='The policy for the filter. Default: Block\n')
    receipt_filter_name: typing.Optional[str] = pydantic.Field(None, description='The name for the receipt filter. Default: a CloudFormation generated name\n\n:exampleMetadata: infused\n\nExample::\n\n    ses.ReceiptFilter(self, "Filter",\n        ip="1.2.3.4/16"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ip', 'policy', 'receipt_filter_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ReceiptFilterProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.ReceiptRuleActionConfig
class ReceiptRuleActionConfigDef(BaseStruct):
    add_header_action: typing.Union[models.aws_ses.AddHeaderActionConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Adds a header to the received email.\n')
    bounce_action: typing.Union[models.aws_ses.BounceActionConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Rejects the received email by returning a bounce response to the sender and, optionally, publishes a notification to Amazon SNS.\n')
    lambda_action: typing.Union[models.aws_ses.LambdaActionConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Calls an AWS Lambda function, and optionally, publishes a notification to Amazon SNS.\n')
    s3_action: typing.Union[models.aws_ses.S3ActionConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Saves the received message to an Amazon S3 bucket and, optionally, publishes a notification to Amazon SNS.\n')
    sns_action: typing.Union[models.aws_ses.SNSActionConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Publishes the email content within a notification to Amazon SNS.\n')
    stop_action: typing.Union[models.aws_ses.StopActionConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Terminates the evaluation of the receipt rule set and optionally publishes a notification to Amazon SNS.\n')
    workmail_action: typing.Union[models.aws_ses.WorkmailActionConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Calls Amazon WorkMail and, optionally, publishes a notification to Amazon SNS.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    receipt_rule_action_config = ses.ReceiptRuleActionConfig(\n        add_header_action=ses.AddHeaderActionConfig(\n            header_name="headerName",\n            header_value="headerValue"\n        ),\n        bounce_action=ses.BounceActionConfig(\n            message="message",\n            sender="sender",\n            smtp_reply_code="smtpReplyCode",\n\n            # the properties below are optional\n            status_code="statusCode",\n            topic_arn="topicArn"\n        ),\n        lambda_action=ses.LambdaActionConfig(\n            function_arn="functionArn",\n\n            # the properties below are optional\n            invocation_type="invocationType",\n            topic_arn="topicArn"\n        ),\n        s3_action=ses.S3ActionConfig(\n            bucket_name="bucketName",\n\n            # the properties below are optional\n            kms_key_arn="kmsKeyArn",\n            object_key_prefix="objectKeyPrefix",\n            topic_arn="topicArn"\n        ),\n        sns_action=ses.SNSActionConfig(\n            encoding="encoding",\n            topic_arn="topicArn"\n        ),\n        stop_action=ses.StopActionConfig(\n            scope="scope",\n\n            # the properties below are optional\n            topic_arn="topicArn"\n        ),\n        workmail_action=ses.WorkmailActionConfig(\n            organization_arn="organizationArn",\n\n            # the properties below are optional\n            topic_arn="topicArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['add_header_action', 'bounce_action', 'lambda_action', 's3_action', 'sns_action', 'stop_action', 'workmail_action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ReceiptRuleActionConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.ReceiptRuleOptions
class ReceiptRuleOptionsDef(BaseStruct):
    actions: typing.Optional[typing.Sequence[typing.Union[models.aws_ses_actions.AddHeaderDef, models.aws_ses_actions.BounceDef, models.aws_ses_actions.LambdaDef, models.aws_ses_actions.S3Def, models.aws_ses_actions.SnsDef, models.aws_ses_actions.StopDef]]] = pydantic.Field(None, description='An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule. Default: - No actions.\n')
    after: typing.Optional[typing.Union[models.aws_ses.ReceiptRuleDef]] = pydantic.Field(None, description='An existing rule after which the new rule will be placed. Default: - The new rule is inserted at the beginning of the rule list.\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether the rule is active. Default: true\n')
    receipt_rule_name: typing.Optional[str] = pydantic.Field(None, description='The name for the rule. Default: - A CloudFormation generated name.\n')
    recipients: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The recipient domains and email addresses that the receipt rule applies to. Default: - Match all recipients under all verified domains.\n')
    scan_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether to scan for spam and viruses. Default: false\n')
    tls_policy: typing.Optional[aws_cdk.aws_ses.TlsPolicy] = pydantic.Field(None, description='Whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). Default: - Optional which will not check for TLS.\n\n:exampleMetadata: infused\n\nExample::\n\n    rule_set = ses.ReceiptRuleSet(self, "RuleSet")\n\n    aws_rule = rule_set.add_rule("Aws",\n        recipients=["aws.com"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'after', 'enabled', 'receipt_rule_name', 'recipients', 'scan_enabled', 'tls_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ReceiptRuleOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.ReceiptRuleProps
class ReceiptRulePropsDef(BaseStruct):
    actions: typing.Optional[typing.Sequence[typing.Union[models.aws_ses_actions.AddHeaderDef, models.aws_ses_actions.BounceDef, models.aws_ses_actions.LambdaDef, models.aws_ses_actions.S3Def, models.aws_ses_actions.SnsDef, models.aws_ses_actions.StopDef]]] = pydantic.Field(None, description='An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule. Default: - No actions.\n')
    after: typing.Optional[typing.Union[models.aws_ses.ReceiptRuleDef]] = pydantic.Field(None, description='An existing rule after which the new rule will be placed. Default: - The new rule is inserted at the beginning of the rule list.\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether the rule is active. Default: true\n')
    receipt_rule_name: typing.Optional[str] = pydantic.Field(None, description='The name for the rule. Default: - A CloudFormation generated name.\n')
    recipients: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The recipient domains and email addresses that the receipt rule applies to. Default: - Match all recipients under all verified domains.\n')
    scan_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether to scan for spam and viruses. Default: false\n')
    tls_policy: typing.Optional[aws_cdk.aws_ses.TlsPolicy] = pydantic.Field(None, description='Whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). Default: - Optional which will not check for TLS.\n')
    rule_set: typing.Union[_REQUIRED_INIT_PARAM, models.aws_ses.ReceiptRuleSetDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the rule set that the receipt rule will be added to.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    # receipt_rule: ses.ReceiptRule\n    # receipt_rule_action: ses.IReceiptRuleAction\n    # receipt_rule_set: ses.ReceiptRuleSet\n\n    receipt_rule_props = ses.ReceiptRuleProps(\n        rule_set=receipt_rule_set,\n\n        # the properties below are optional\n        actions=[receipt_rule_action],\n        after=receipt_rule,\n        enabled=False,\n        receipt_rule_name="receiptRuleName",\n        recipients=["recipients"],\n        scan_enabled=False,\n        tls_policy=ses.TlsPolicy.OPTIONAL\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'after', 'enabled', 'receipt_rule_name', 'recipients', 'scan_enabled', 'tls_policy', 'rule_set']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ReceiptRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.ReceiptRulePropsDefConfig] = pydantic.Field(None)


class ReceiptRulePropsDefConfig(pydantic.BaseModel):
    rule_set_config: typing.Optional[models._interface_methods.AwsSesIReceiptRuleSetDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_ses.ReceiptRuleSetProps
class ReceiptRuleSetPropsDef(BaseStruct):
    drop_spam: typing.Optional[bool] = pydantic.Field(None, description='Whether to add a first rule to stop processing messages that have at least one spam indicator. Default: false\n')
    receipt_rule_set_name: typing.Optional[str] = pydantic.Field(None, description='The name for the receipt rule set. Default: - A CloudFormation generated name.\n')
    rules: typing.Optional[typing.Sequence[typing.Union[models.aws_ses.ReceiptRuleOptionsDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The list of rules to add to this rule set. Rules are added in the same order as they appear in the list. Default: - No rules are added to the rule set.\n\n:exampleMetadata: infused\n\nExample::\n\n    import aws_cdk.aws_s3 as s3\n    import aws_cdk.aws_ses_actions as actions\n\n\n    bucket = s3.Bucket(self, "Bucket")\n    topic = sns.Topic(self, "Topic")\n\n    ses.ReceiptRuleSet(self, "RuleSet",\n        rules=[ses.ReceiptRuleOptions(\n            recipients=["hello@aws.com"],\n            actions=[\n                actions.AddHeader(\n                    name="X-Special-Header",\n                    value="aws"\n                ),\n                actions.S3(\n                    bucket=bucket,\n                    object_key_prefix="emails/",\n                    topic=topic\n                )\n            ]\n        ), ses.ReceiptRuleOptions(\n            recipients=["aws.com"],\n            actions=[\n                actions.Sns(\n                    topic=topic\n                )\n            ]\n        )\n        ]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['drop_spam', 'receipt_rule_set_name', 'rules']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.ReceiptRuleSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.S3ActionConfig
class S3ActionConfigDef(BaseStruct):
    bucket_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon S3 bucket that you want to send incoming mail to.\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='The customer master key that Amazon SES should use to encrypt your emails before saving them to the Amazon S3 bucket. Default: - Emails are not encrypted.\n')
    object_key_prefix: typing.Optional[str] = pydantic.Field(None, description='The key prefix of the Amazon S3 bucket. Default: - No prefix.\n')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the Amazon SNS topic to notify when the message is saved to the Amazon S3 bucket. Default: - No notification is sent to SNS.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    s3_action_config = ses.S3ActionConfig(\n        bucket_name="bucketName",\n\n        # the properties below are optional\n        kms_key_arn="kmsKeyArn",\n        object_key_prefix="objectKeyPrefix",\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'kms_key_arn', 'object_key_prefix', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.S3ActionConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.SNSActionConfig
class SNSActionConfigDef(BaseStruct):
    encoding: typing.Optional[str] = pydantic.Field(None, description="The encoding to use for the email within the Amazon SNS notification. Default: 'UTF-8'\n")
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify. Default: - No notification is sent to SNS.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    s_nSAction_config = ses.SNSActionConfig(\n        encoding="encoding",\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encoding', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.SNSActionConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.StopActionConfig
class StopActionConfigDef(BaseStruct):
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the stop action is taken. Default: - No notification is sent to SNS.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    stop_action_config = ses.StopActionConfig(\n        scope="scope",\n\n        # the properties below are optional\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.StopActionConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.VdmAttributesProps
class VdmAttributesPropsDef(BaseStruct):
    engagement_metrics: typing.Optional[bool] = pydantic.Field(None, description='Whether engagement metrics are enabled for your account. Default: true\n')
    optimized_shared_delivery: typing.Optional[bool] = pydantic.Field(None, description='Whether optimized shared delivery is enabled for your account. Default: true\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    vdm_attributes_props = ses.VdmAttributesProps(\n        engagement_metrics=False,\n        optimized_shared_delivery=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['engagement_metrics', 'optimized_shared_delivery']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.VdmAttributesProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.WorkmailActionConfig
class WorkmailActionConfigDef(BaseStruct):
    organization_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the Amazon WorkMail organization.\n')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the WorkMail action is called. Default: - No notification is sent to SNS.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    workmail_action_config = ses.WorkmailActionConfig(\n        organization_arn="organizationArn",\n\n        # the properties below are optional\n        topic_arn="topicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['organization_arn', 'topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.WorkmailActionConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CloudWatchDimensionSource
# skipping emum

#  autogenerated from aws_cdk.aws_ses.ConfigurationSetTlsPolicy
# skipping emum

#  autogenerated from aws_cdk.aws_ses.EasyDkimSigningKeyLength
# skipping emum

#  autogenerated from aws_cdk.aws_ses.EmailSendingEvent
# skipping emum

#  autogenerated from aws_cdk.aws_ses.MailFromBehaviorOnMxFailure
# skipping emum

#  autogenerated from aws_cdk.aws_ses.ReceiptFilterPolicy
# skipping emum

#  autogenerated from aws_cdk.aws_ses.SuppressionReasons
# skipping emum

#  autogenerated from aws_cdk.aws_ses.TlsPolicy
# skipping emum

#  autogenerated from aws_cdk.aws_ses.IConfigurationSet
#  skipping Interface

#  autogenerated from aws_cdk.aws_ses.IConfigurationSetEventDestination
#  skipping Interface

#  autogenerated from aws_cdk.aws_ses.IDedicatedIpPool
#  skipping Interface

#  autogenerated from aws_cdk.aws_ses.IEmailIdentity
#  skipping Interface

#  autogenerated from aws_cdk.aws_ses.IReceiptRule
#  skipping Interface

#  autogenerated from aws_cdk.aws_ses.IReceiptRuleAction
#  skipping Interface

#  autogenerated from aws_cdk.aws_ses.IReceiptRuleSet
#  skipping Interface

#  autogenerated from aws_cdk.aws_ses.IVdmAttributes
#  skipping Interface

#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSet
class CfnConfigurationSetDef(BaseCfnResource):
    delivery_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_DeliveryOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the configuration set. The name must meet the following requirements:. - Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). - Contain 64 characters or fewer.\n')
    reputation_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_ReputationOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that represents the reputation settings for the configuration set.\n')
    sending_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_SendingOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that defines whether or not Amazon SES can send email that you send using the configuration set.\n')
    suppression_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_SuppressionOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains information about the suppression list preferences for your account.\n')
    tracking_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_TrackingOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The name of the custom open and click tracking domain associated with the configuration set.\n')
    vdm_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_VdmOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Virtual Deliverability Manager (VDM) options that apply to the configuration set.')
    _init_params: typing.ClassVar[list[str]] = ['delivery_options', 'name', 'reputation_options', 'sending_options', 'suppression_options', 'tracking_options', 'vdm_options']
    _method_names: typing.ClassVar[list[str]] = ['DashboardOptionsProperty', 'DeliveryOptionsProperty', 'GuardianOptionsProperty', 'ReputationOptionsProperty', 'SendingOptionsProperty', 'SuppressionOptionsProperty', 'TrackingOptionsProperty', 'VdmOptionsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnConfigurationSetDefConfig] = pydantic.Field(None)


class CfnConfigurationSetDefConfig(pydantic.BaseModel):
    DashboardOptionsProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefDashboardoptionspropertyParams]] = pydantic.Field(None, description='')
    DeliveryOptionsProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefDeliveryoptionspropertyParams]] = pydantic.Field(None, description='')
    GuardianOptionsProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefGuardianoptionspropertyParams]] = pydantic.Field(None, description='')
    ReputationOptionsProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefReputationoptionspropertyParams]] = pydantic.Field(None, description='')
    SendingOptionsProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefSendingoptionspropertyParams]] = pydantic.Field(None, description='')
    SuppressionOptionsProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefSuppressionoptionspropertyParams]] = pydantic.Field(None, description='')
    TrackingOptionsProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefTrackingoptionspropertyParams]] = pydantic.Field(None, description='')
    VdmOptionsProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefVdmoptionspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnConfigurationSetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnConfigurationSetDefDashboardoptionspropertyParams(pydantic.BaseModel):
    engagement_metrics: str = pydantic.Field(..., description='')
    ...

class CfnConfigurationSetDefDeliveryoptionspropertyParams(pydantic.BaseModel):
    sending_pool_name: typing.Optional[str] = pydantic.Field(None, description='')
    tls_policy: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigurationSetDefGuardianoptionspropertyParams(pydantic.BaseModel):
    optimized_shared_delivery: str = pydantic.Field(..., description='')
    ...

class CfnConfigurationSetDefReputationoptionspropertyParams(pydantic.BaseModel):
    reputation_metrics_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnConfigurationSetDefSendingoptionspropertyParams(pydantic.BaseModel):
    sending_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnConfigurationSetDefSuppressionoptionspropertyParams(pydantic.BaseModel):
    suppressed_reasons: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnConfigurationSetDefTrackingoptionspropertyParams(pydantic.BaseModel):
    custom_redirect_domain: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigurationSetDefVdmoptionspropertyParams(pydantic.BaseModel):
    dashboard_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_DashboardOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    guardian_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_GuardianOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConfigurationSetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnConfigurationSetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigurationSetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnConfigurationSetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigurationSetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnConfigurationSetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnConfigurationSetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnConfigurationSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnConfigurationSetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnConfigurationSetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigurationSetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnConfigurationSetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnConfigurationSetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigurationSetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSetEventDestination
class CfnConfigurationSetEventDestinationDef(BaseCfnResource):
    configuration_set_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the configuration set that contains the event destination.\n')
    event_destination: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_EventDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The event destination object.')
    _init_params: typing.ClassVar[list[str]] = ['configuration_set_name', 'event_destination']
    _method_names: typing.ClassVar[list[str]] = ['CloudWatchDestinationProperty', 'DimensionConfigurationProperty', 'EventDestinationProperty', 'KinesisFirehoseDestinationProperty', 'SnsDestinationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSetEventDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnConfigurationSetEventDestinationDefConfig] = pydantic.Field(None)


class CfnConfigurationSetEventDestinationDefConfig(pydantic.BaseModel):
    CloudWatchDestinationProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefCloudwatchdestinationpropertyParams]] = pydantic.Field(None, description='')
    DimensionConfigurationProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefDimensionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    EventDestinationProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefEventdestinationpropertyParams]] = pydantic.Field(None, description='')
    KinesisFirehoseDestinationProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefKinesisfirehosedestinationpropertyParams]] = pydantic.Field(None, description='')
    SnsDestinationProperty: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefSnsdestinationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnConfigurationSetEventDestinationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnConfigurationSetEventDestinationDefCloudwatchdestinationpropertyParams(pydantic.BaseModel):
    dimension_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_DimensionConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnConfigurationSetEventDestinationDefDimensionconfigurationpropertyParams(pydantic.BaseModel):
    default_dimension_value: str = pydantic.Field(..., description='')
    dimension_name: str = pydantic.Field(..., description='')
    dimension_value_source: str = pydantic.Field(..., description='')
    ...

class CfnConfigurationSetEventDestinationDefEventdestinationpropertyParams(pydantic.BaseModel):
    matching_event_types: typing.Sequence[str] = pydantic.Field(..., description='')
    cloud_watch_destination: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_CloudWatchDestinationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    kinesis_firehose_destination: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_KinesisFirehoseDestinationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    sns_destination: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_SnsDestinationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConfigurationSetEventDestinationDefKinesisfirehosedestinationpropertyParams(pydantic.BaseModel):
    delivery_stream_arn: str = pydantic.Field(..., description='')
    iam_role_arn: str = pydantic.Field(..., description='')
    ...

class CfnConfigurationSetEventDestinationDefSnsdestinationpropertyParams(pydantic.BaseModel):
    topic_arn: str = pydantic.Field(..., description='')
    ...

class CfnConfigurationSetEventDestinationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnConfigurationSetEventDestinationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigurationSetEventDestinationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnConfigurationSetEventDestinationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigurationSetEventDestinationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnConfigurationSetEventDestinationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnConfigurationSetEventDestinationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnConfigurationSetEventDestinationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnConfigurationSetEventDestinationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnConfigurationSetEventDestinationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigurationSetEventDestinationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnConfigurationSetEventDestinationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnConfigurationSetEventDestinationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigurationSetEventDestinationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnContactList
class CfnContactListDef(BaseCfnResource):
    contact_list_name: typing.Optional[str] = pydantic.Field(None, description='The name of the contact list.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of what the contact list is about.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags associated with a contact list.\n')
    topics: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ses.CfnContactList_TopicPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An interest group, theme, or label within a list. A contact list can have multiple topics.')
    _init_params: typing.ClassVar[list[str]] = ['contact_list_name', 'description', 'tags', 'topics']
    _method_names: typing.ClassVar[list[str]] = ['TopicProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnContactList'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnContactListDefConfig] = pydantic.Field(None)


class CfnContactListDefConfig(pydantic.BaseModel):
    TopicProperty: typing.Optional[list[models.aws_ses.CfnContactListDefTopicpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnContactListDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnContactListDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnContactListDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnContactListDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnContactListDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnContactListDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnContactListDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnContactListDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnContactListDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnContactListDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnContactListDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnContactListDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnContactListDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnContactListDefTopicpropertyParams(pydantic.BaseModel):
    default_subscription_status: str = pydantic.Field(..., description='')
    display_name: str = pydantic.Field(..., description='')
    topic_name: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnContactListDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnContactListDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactListDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnContactListDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactListDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnContactListDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnContactListDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnContactListDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnContactListDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnContactListDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactListDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnContactListDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnContactListDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactListDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnDedicatedIpPool
class CfnDedicatedIpPoolDef(BaseCfnResource):
    pool_name: typing.Optional[str] = pydantic.Field(None, description='The name of the dedicated IP pool that the IP address is associated with.\n')
    scaling_mode: typing.Optional[str] = pydantic.Field(None, description="The type of scaling mode. The following options are available: - ``STANDARD`` - The customer controls which IPs are part of the dedicated IP pool. - ``MANAGED`` - The reputation and number of IPs are automatically managed by Amazon SES . The ``STANDARD`` option is selected by default if no value is specified. .. epigraph:: Updating *ScalingMode* doesn't require a replacement if you're updating its value from ``STANDARD`` to ``MANAGED`` . However, updating *ScalingMode* from ``MANAGED`` to ``STANDARD`` is not supported.")
    _init_params: typing.ClassVar[list[str]] = ['pool_name', 'scaling_mode']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnDedicatedIpPool'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnDedicatedIpPoolDefConfig] = pydantic.Field(None)


class CfnDedicatedIpPoolDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnDedicatedIpPoolDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnDedicatedIpPoolDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDedicatedIpPoolDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDedicatedIpPoolDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDedicatedIpPoolDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDedicatedIpPoolDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDedicatedIpPoolDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDedicatedIpPoolDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDedicatedIpPoolDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDedicatedIpPoolDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDedicatedIpPoolDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDedicatedIpPoolDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDedicatedIpPoolDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDedicatedIpPoolDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDedicatedIpPoolDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnEmailIdentity
class CfnEmailIdentityDef(BaseCfnResource):
    email_identity: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The email address or domain to verify.\n')
    configuration_set_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_ConfigurationSetAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used to associate a configuration set with an email identity.\n')
    dkim_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_DkimAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains information about the DKIM attributes for the identity.\n')
    dkim_signing_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_DkimSigningAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If your request includes this object, Amazon SES configures the identity to use Bring Your Own DKIM (BYODKIM) for DKIM authentication purposes, or, configures the key length to be used for `Easy DKIM <https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-easy.html>`_ .\n')
    feedback_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_FeedbackAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used to enable or disable feedback forwarding for an identity.\n')
    mail_from_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_MailFromAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used to enable or disable the custom Mail-From domain configuration for an email identity.')
    _init_params: typing.ClassVar[list[str]] = ['email_identity', 'configuration_set_attributes', 'dkim_attributes', 'dkim_signing_attributes', 'feedback_attributes', 'mail_from_attributes']
    _method_names: typing.ClassVar[list[str]] = ['ConfigurationSetAttributesProperty', 'DkimAttributesProperty', 'DkimSigningAttributesProperty', 'FeedbackAttributesProperty', 'MailFromAttributesProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnEmailIdentity'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnEmailIdentityDefConfig] = pydantic.Field(None)


class CfnEmailIdentityDefConfig(pydantic.BaseModel):
    ConfigurationSetAttributesProperty: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefConfigurationsetattributespropertyParams]] = pydantic.Field(None, description='')
    DkimAttributesProperty: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefDkimattributespropertyParams]] = pydantic.Field(None, description='')
    DkimSigningAttributesProperty: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefDkimsigningattributespropertyParams]] = pydantic.Field(None, description='')
    FeedbackAttributesProperty: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefFeedbackattributespropertyParams]] = pydantic.Field(None, description='')
    MailFromAttributesProperty: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefMailfromattributespropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnEmailIdentityDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnEmailIdentityDefConfigurationsetattributespropertyParams(pydantic.BaseModel):
    configuration_set_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEmailIdentityDefDkimattributespropertyParams(pydantic.BaseModel):
    signing_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnEmailIdentityDefDkimsigningattributespropertyParams(pydantic.BaseModel):
    domain_signing_private_key: typing.Optional[str] = pydantic.Field(None, description='')
    domain_signing_selector: typing.Optional[str] = pydantic.Field(None, description='')
    next_signing_key_length: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEmailIdentityDefFeedbackattributespropertyParams(pydantic.BaseModel):
    email_forwarding_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnEmailIdentityDefMailfromattributespropertyParams(pydantic.BaseModel):
    behavior_on_mx_failure: typing.Optional[str] = pydantic.Field(None, description='')
    mail_from_domain: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEmailIdentityDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEmailIdentityDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEmailIdentityDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEmailIdentityDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEmailIdentityDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEmailIdentityDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEmailIdentityDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEmailIdentityDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEmailIdentityDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEmailIdentityDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEmailIdentityDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnEmailIdentityDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEmailIdentityDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEmailIdentityDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnReceiptFilter
class CfnReceiptFilterDef(BaseCfnResource):
    filter: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ses.CfnReceiptFilter_FilterPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A data structure that describes the IP address filter to create, which consists of a name, an IP address range, and whether to allow or block mail from it.')
    _init_params: typing.ClassVar[list[str]] = ['filter']
    _method_names: typing.ClassVar[list[str]] = ['FilterProperty', 'IpFilterProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptFilter'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnReceiptFilterDefConfig] = pydantic.Field(None)


class CfnReceiptFilterDefConfig(pydantic.BaseModel):
    FilterProperty: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefFilterpropertyParams]] = pydantic.Field(None, description='')
    IpFilterProperty: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefIpfilterpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnReceiptFilterDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnReceiptFilterDefFilterpropertyParams(pydantic.BaseModel):
    ip_filter: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptFilter_IpFilterPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnReceiptFilterDefIpfilterpropertyParams(pydantic.BaseModel):
    cidr: str = pydantic.Field(..., description='')
    policy: str = pydantic.Field(..., description='')
    ...

class CfnReceiptFilterDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnReceiptFilterDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnReceiptFilterDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnReceiptFilterDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnReceiptFilterDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnReceiptFilterDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnReceiptFilterDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnReceiptFilterDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnReceiptFilterDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnReceiptFilterDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnReceiptFilterDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnReceiptFilterDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnReceiptFilterDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnReceiptFilterDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnReceiptRule
class CfnReceiptRuleDef(BaseCfnResource):
    rule: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ses.CfnReceiptRule_RulePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="A data structure that contains the specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.\n")
    rule_set_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the rule set where the receipt rule is added.\n')
    after: typing.Optional[str] = pydantic.Field(None, description='The name of an existing rule after which the new rule is placed. If this parameter is null, the new rule is inserted at the beginning of the rule list.')
    _init_params: typing.ClassVar[list[str]] = ['rule', 'rule_set_name', 'after']
    _method_names: typing.ClassVar[list[str]] = ['ActionProperty', 'AddHeaderActionProperty', 'BounceActionProperty', 'LambdaActionProperty', 'RuleProperty', 'S3ActionProperty', 'SNSActionProperty', 'StopActionProperty', 'WorkmailActionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnReceiptRuleDefConfig] = pydantic.Field(None)


class CfnReceiptRuleDefConfig(pydantic.BaseModel):
    ActionProperty: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefActionpropertyParams]] = pydantic.Field(None, description='')
    AddHeaderActionProperty: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefAddheaderactionpropertyParams]] = pydantic.Field(None, description='')
    BounceActionProperty: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefBounceactionpropertyParams]] = pydantic.Field(None, description='')
    LambdaActionProperty: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefLambdaactionpropertyParams]] = pydantic.Field(None, description='')
    RuleProperty: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefRulepropertyParams]] = pydantic.Field(None, description='')
    S3ActionProperty: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefS3ActionpropertyParams]] = pydantic.Field(None, description='')
    SNSActionProperty: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefSnsactionpropertyParams]] = pydantic.Field(None, description='')
    StopActionProperty: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefStopactionpropertyParams]] = pydantic.Field(None, description='')
    WorkmailActionProperty: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefWorkmailactionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnReceiptRuleDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnReceiptRuleDefActionpropertyParams(pydantic.BaseModel):
    add_header_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_AddHeaderActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    bounce_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_BounceActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    lambda_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_LambdaActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_S3ActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sns_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_SNSActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    stop_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_StopActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    workmail_action: typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_WorkmailActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnReceiptRuleDefAddheaderactionpropertyParams(pydantic.BaseModel):
    header_name: str = pydantic.Field(..., description='')
    header_value: str = pydantic.Field(..., description='')
    ...

class CfnReceiptRuleDefBounceactionpropertyParams(pydantic.BaseModel):
    message: str = pydantic.Field(..., description='')
    sender: str = pydantic.Field(..., description='')
    smtp_reply_code: str = pydantic.Field(..., description='')
    status_code: typing.Optional[str] = pydantic.Field(None, description='')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnReceiptRuleDefLambdaactionpropertyParams(pydantic.BaseModel):
    function_arn: str = pydantic.Field(..., description='')
    invocation_type: typing.Optional[str] = pydantic.Field(None, description='')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnReceiptRuleDefRulepropertyParams(pydantic.BaseModel):
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ses.CfnReceiptRule_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    recipients: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    scan_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    tls_policy: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnReceiptRuleDefS3ActionpropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    object_key_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnReceiptRuleDefSnsactionpropertyParams(pydantic.BaseModel):
    encoding: typing.Optional[str] = pydantic.Field(None, description='')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnReceiptRuleDefStopactionpropertyParams(pydantic.BaseModel):
    scope: str = pydantic.Field(..., description='')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnReceiptRuleDefWorkmailactionpropertyParams(pydantic.BaseModel):
    organization_arn: str = pydantic.Field(..., description='')
    topic_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnReceiptRuleDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnReceiptRuleDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnReceiptRuleDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnReceiptRuleDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnReceiptRuleDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnReceiptRuleDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnReceiptRuleDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnReceiptRuleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnReceiptRuleDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnReceiptRuleDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnReceiptRuleDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnReceiptRuleDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnReceiptRuleDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnReceiptRuleDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnReceiptRuleSet
class CfnReceiptRuleSetDef(BaseCfnResource):
    rule_set_name: typing.Optional[str] = pydantic.Field(None, description='The name of the receipt rule set to reorder.')
    _init_params: typing.ClassVar[list[str]] = ['rule_set_name']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRuleSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnReceiptRuleSetDefConfig] = pydantic.Field(None)


class CfnReceiptRuleSetDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnReceiptRuleSetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnReceiptRuleSetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnReceiptRuleSetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnReceiptRuleSetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnReceiptRuleSetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnReceiptRuleSetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnReceiptRuleSetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnReceiptRuleSetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnReceiptRuleSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnReceiptRuleSetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnReceiptRuleSetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnReceiptRuleSetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnReceiptRuleSetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnReceiptRuleSetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnReceiptRuleSetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnTemplate
class CfnTemplateDef(BaseCfnResource):
    template: typing.Union[models.UnsupportedResource, models.aws_ses.CfnTemplate_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The content of the email, composed of a subject line and either an HTML part or a text-only part.')
    _init_params: typing.ClassVar[list[str]] = ['template']
    _method_names: typing.ClassVar[list[str]] = ['TemplateProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnTemplate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnTemplateDefConfig] = pydantic.Field(None)


class CfnTemplateDefConfig(pydantic.BaseModel):
    TemplateProperty: typing.Optional[list[models.aws_ses.CfnTemplateDefTemplatepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnTemplateDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnTemplateDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnTemplateDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnTemplateDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnTemplateDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnTemplateDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnTemplateDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnTemplateDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnTemplateDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnTemplateDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnTemplateDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnTemplateDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnTemplateDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnTemplateDefTemplatepropertyParams(pydantic.BaseModel):
    subject_part: str = pydantic.Field(..., description='')
    html_part: typing.Optional[str] = pydantic.Field(None, description='')
    template_name: typing.Optional[str] = pydantic.Field(None, description='')
    text_part: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnTemplateDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnTemplateDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTemplateDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnTemplateDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTemplateDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnTemplateDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnTemplateDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnTemplateDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnTemplateDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnTemplateDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTemplateDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnTemplateDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnTemplateDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTemplateDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnVdmAttributes
class CfnVdmAttributesDef(BaseCfnResource):
    dashboard_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnVdmAttributes_DashboardAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies additional settings for your VDM configuration as applicable to the Dashboard.\n')
    guardian_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnVdmAttributes_GuardianAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies additional settings for your VDM configuration as applicable to the Guardian.')
    _init_params: typing.ClassVar[list[str]] = ['dashboard_attributes', 'guardian_attributes']
    _method_names: typing.ClassVar[list[str]] = ['DashboardAttributesProperty', 'GuardianAttributesProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnVdmAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_ses.CfnVdmAttributesDefConfig] = pydantic.Field(None)


class CfnVdmAttributesDefConfig(pydantic.BaseModel):
    DashboardAttributesProperty: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefDashboardattributespropertyParams]] = pydantic.Field(None, description='')
    GuardianAttributesProperty: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefGuardianattributespropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_ses.CfnVdmAttributesDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnVdmAttributesDefDashboardattributespropertyParams(pydantic.BaseModel):
    engagement_metrics: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnVdmAttributesDefGuardianattributespropertyParams(pydantic.BaseModel):
    optimized_shared_delivery: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnVdmAttributesDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnVdmAttributesDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnVdmAttributesDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnVdmAttributesDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnVdmAttributesDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnVdmAttributesDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnVdmAttributesDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnVdmAttributesDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnVdmAttributesDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnVdmAttributesDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnVdmAttributesDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnVdmAttributesDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnVdmAttributesDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnVdmAttributesDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSetEventDestinationProps
class CfnConfigurationSetEventDestinationPropsDef(BaseCfnProperty):
    configuration_set_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the configuration set that contains the event destination.\n')
    event_destination: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ses.CfnConfigurationSetEventDestination_EventDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The event destination object.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-configurationseteventdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_configuration_set_event_destination_props = ses.CfnConfigurationSetEventDestinationProps(\n        configuration_set_name="configurationSetName",\n        event_destination=ses.CfnConfigurationSetEventDestination.EventDestinationProperty(\n            matching_event_types=["matchingEventTypes"],\n\n            # the properties below are optional\n            cloud_watch_destination=ses.CfnConfigurationSetEventDestination.CloudWatchDestinationProperty(\n                dimension_configurations=[ses.CfnConfigurationSetEventDestination.DimensionConfigurationProperty(\n                    default_dimension_value="defaultDimensionValue",\n                    dimension_name="dimensionName",\n                    dimension_value_source="dimensionValueSource"\n                )]\n            ),\n            enabled=False,\n            kinesis_firehose_destination=ses.CfnConfigurationSetEventDestination.KinesisFirehoseDestinationProperty(\n                delivery_stream_arn="deliveryStreamArn",\n                iam_role_arn="iamRoleArn"\n            ),\n            name="name",\n            sns_destination=ses.CfnConfigurationSetEventDestination.SnsDestinationProperty(\n                topic_arn="topicArn"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_set_name', 'event_destination']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSetEventDestinationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnConfigurationSetProps
class CfnConfigurationSetPropsDef(BaseCfnProperty):
    delivery_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_DeliveryOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the configuration set. The name must meet the following requirements:. - Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). - Contain 64 characters or fewer.\n')
    reputation_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_ReputationOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that represents the reputation settings for the configuration set.\n')
    sending_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_SendingOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that defines whether or not Amazon SES can send email that you send using the configuration set.\n')
    suppression_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_SuppressionOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains information about the suppression list preferences for your account.\n')
    tracking_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_TrackingOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The name of the custom open and click tracking domain associated with the configuration set.\n')
    vdm_options: typing.Union[models.UnsupportedResource, models.aws_ses.CfnConfigurationSet_VdmOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Virtual Deliverability Manager (VDM) options that apply to the configuration set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-configurationset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_configuration_set_props = ses.CfnConfigurationSetProps(\n        delivery_options=ses.CfnConfigurationSet.DeliveryOptionsProperty(\n            sending_pool_name="sendingPoolName",\n            tls_policy="tlsPolicy"\n        ),\n        name="name",\n        reputation_options=ses.CfnConfigurationSet.ReputationOptionsProperty(\n            reputation_metrics_enabled=False\n        ),\n        sending_options=ses.CfnConfigurationSet.SendingOptionsProperty(\n            sending_enabled=False\n        ),\n        suppression_options=ses.CfnConfigurationSet.SuppressionOptionsProperty(\n            suppressed_reasons=["suppressedReasons"]\n        ),\n        tracking_options=ses.CfnConfigurationSet.TrackingOptionsProperty(\n            custom_redirect_domain="customRedirectDomain"\n        ),\n        vdm_options=ses.CfnConfigurationSet.VdmOptionsProperty(\n            dashboard_options=ses.CfnConfigurationSet.DashboardOptionsProperty(\n                engagement_metrics="engagementMetrics"\n            ),\n            guardian_options=ses.CfnConfigurationSet.GuardianOptionsProperty(\n                optimized_shared_delivery="optimizedSharedDelivery"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delivery_options', 'name', 'reputation_options', 'sending_options', 'suppression_options', 'tracking_options', 'vdm_options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnConfigurationSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnContactListProps
class CfnContactListPropsDef(BaseCfnProperty):
    contact_list_name: typing.Optional[str] = pydantic.Field(None, description='The name of the contact list.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of what the contact list is about.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags associated with a contact list.\n')
    topics: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ses.CfnContactList_TopicPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An interest group, theme, or label within a list. A contact list can have multiple topics.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-contactlist.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_contact_list_props = ses.CfnContactListProps(\n        contact_list_name="contactListName",\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        topics=[ses.CfnContactList.TopicProperty(\n            default_subscription_status="defaultSubscriptionStatus",\n            display_name="displayName",\n            topic_name="topicName",\n\n            # the properties below are optional\n            description="description"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['contact_list_name', 'description', 'tags', 'topics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnContactListProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnDedicatedIpPoolProps
class CfnDedicatedIpPoolPropsDef(BaseCfnProperty):
    pool_name: typing.Optional[str] = pydantic.Field(None, description='The name of the dedicated IP pool that the IP address is associated with.\n')
    scaling_mode: typing.Optional[str] = pydantic.Field(None, description='The type of scaling mode. The following options are available: - ``STANDARD`` - The customer controls which IPs are part of the dedicated IP pool. - ``MANAGED`` - The reputation and number of IPs are automatically managed by Amazon SES . The ``STANDARD`` option is selected by default if no value is specified. .. epigraph:: Updating *ScalingMode* doesn\'t require a replacement if you\'re updating its value from ``STANDARD`` to ``MANAGED`` . However, updating *ScalingMode* from ``MANAGED`` to ``STANDARD`` is not supported.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-dedicatedippool.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_dedicated_ip_pool_props = ses.CfnDedicatedIpPoolProps(\n        pool_name="poolName",\n        scaling_mode="scalingMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['pool_name', 'scaling_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnDedicatedIpPoolProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnEmailIdentityProps
class CfnEmailIdentityPropsDef(BaseCfnProperty):
    email_identity: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The email address or domain to verify.\n')
    configuration_set_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_ConfigurationSetAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used to associate a configuration set with an email identity.\n')
    dkim_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_DkimAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains information about the DKIM attributes for the identity.\n')
    dkim_signing_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_DkimSigningAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If your request includes this object, Amazon SES configures the identity to use Bring Your Own DKIM (BYODKIM) for DKIM authentication purposes, or, configures the key length to be used for `Easy DKIM <https://docs.aws.amazon.com/ses/latest/dg/send-email-authentication-dkim-easy.html>`_ .\n')
    feedback_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_FeedbackAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used to enable or disable feedback forwarding for an identity.\n')
    mail_from_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnEmailIdentity_MailFromAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used to enable or disable the custom Mail-From domain configuration for an email identity.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-emailidentity.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_email_identity_props = ses.CfnEmailIdentityProps(\n        email_identity="emailIdentity",\n\n        # the properties below are optional\n        configuration_set_attributes=ses.CfnEmailIdentity.ConfigurationSetAttributesProperty(\n            configuration_set_name="configurationSetName"\n        ),\n        dkim_attributes=ses.CfnEmailIdentity.DkimAttributesProperty(\n            signing_enabled=False\n        ),\n        dkim_signing_attributes=ses.CfnEmailIdentity.DkimSigningAttributesProperty(\n            domain_signing_private_key="domainSigningPrivateKey",\n            domain_signing_selector="domainSigningSelector",\n            next_signing_key_length="nextSigningKeyLength"\n        ),\n        feedback_attributes=ses.CfnEmailIdentity.FeedbackAttributesProperty(\n            email_forwarding_enabled=False\n        ),\n        mail_from_attributes=ses.CfnEmailIdentity.MailFromAttributesProperty(\n            behavior_on_mx_failure="behaviorOnMxFailure",\n            mail_from_domain="mailFromDomain"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email_identity', 'configuration_set_attributes', 'dkim_attributes', 'dkim_signing_attributes', 'feedback_attributes', 'mail_from_attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnEmailIdentityProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptFilterProps
class CfnReceiptFilterPropsDef(BaseCfnProperty):
    filter: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ses.CfnReceiptFilter_FilterPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A data structure that describes the IP address filter to create, which consists of a name, an IP address range, and whether to allow or block mail from it.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-receiptfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_receipt_filter_props = ses.CfnReceiptFilterProps(\n        filter=ses.CfnReceiptFilter.FilterProperty(\n            ip_filter=ses.CfnReceiptFilter.IpFilterProperty(\n                cidr="cidr",\n                policy="policy"\n            ),\n\n            # the properties below are optional\n            name="name"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['filter']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptFilterProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRuleProps
class CfnReceiptRulePropsDef(BaseCfnProperty):
    rule: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ses.CfnReceiptRule_RulePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="A data structure that contains the specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.\n")
    rule_set_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the rule set where the receipt rule is added.\n')
    after: typing.Optional[str] = pydantic.Field(None, description='The name of an existing rule after which the new rule is placed. If this parameter is null, the new rule is inserted at the beginning of the rule list.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-receiptrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_receipt_rule_props = ses.CfnReceiptRuleProps(\n        rule=ses.CfnReceiptRule.RuleProperty(\n            actions=[ses.CfnReceiptRule.ActionProperty(\n                add_header_action=ses.CfnReceiptRule.AddHeaderActionProperty(\n                    header_name="headerName",\n                    header_value="headerValue"\n                ),\n                bounce_action=ses.CfnReceiptRule.BounceActionProperty(\n                    message="message",\n                    sender="sender",\n                    smtp_reply_code="smtpReplyCode",\n\n                    # the properties below are optional\n                    status_code="statusCode",\n                    topic_arn="topicArn"\n                ),\n                lambda_action=ses.CfnReceiptRule.LambdaActionProperty(\n                    function_arn="functionArn",\n\n                    # the properties below are optional\n                    invocation_type="invocationType",\n                    topic_arn="topicArn"\n                ),\n                s3_action=ses.CfnReceiptRule.S3ActionProperty(\n                    bucket_name="bucketName",\n\n                    # the properties below are optional\n                    kms_key_arn="kmsKeyArn",\n                    object_key_prefix="objectKeyPrefix",\n                    topic_arn="topicArn"\n                ),\n                sns_action=ses.CfnReceiptRule.SNSActionProperty(\n                    encoding="encoding",\n                    topic_arn="topicArn"\n                ),\n                stop_action=ses.CfnReceiptRule.StopActionProperty(\n                    scope="scope",\n\n                    # the properties below are optional\n                    topic_arn="topicArn"\n                ),\n                workmail_action=ses.CfnReceiptRule.WorkmailActionProperty(\n                    organization_arn="organizationArn",\n\n                    # the properties below are optional\n                    topic_arn="topicArn"\n                )\n            )],\n            enabled=False,\n            name="name",\n            recipients=["recipients"],\n            scan_enabled=False,\n            tls_policy="tlsPolicy"\n        ),\n        rule_set_name="ruleSetName",\n\n        # the properties below are optional\n        after="after"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rule', 'rule_set_name', 'after']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnReceiptRuleSetProps
class CfnReceiptRuleSetPropsDef(BaseCfnProperty):
    rule_set_name: typing.Optional[str] = pydantic.Field(None, description='The name of the receipt rule set to reorder.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-receiptruleset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_receipt_rule_set_props = ses.CfnReceiptRuleSetProps(\n        rule_set_name="ruleSetName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rule_set_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnReceiptRuleSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnTemplateProps
class CfnTemplatePropsDef(BaseCfnProperty):
    template: typing.Union[models.UnsupportedResource, models.aws_ses.CfnTemplate_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The content of the email, composed of a subject line and either an HTML part or a text-only part.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-template.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_template_props = ses.CfnTemplateProps(\n        template=ses.CfnTemplate.TemplateProperty(\n            subject_part="subjectPart",\n\n            # the properties below are optional\n            html_part="htmlPart",\n            template_name="templateName",\n            text_part="textPart"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['template']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnTemplateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ses.CfnVdmAttributesProps
class CfnVdmAttributesPropsDef(BaseCfnProperty):
    dashboard_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnVdmAttributes_DashboardAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies additional settings for your VDM configuration as applicable to the Dashboard.\n')
    guardian_attributes: typing.Union[models.UnsupportedResource, models.aws_ses.CfnVdmAttributes_GuardianAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies additional settings for your VDM configuration as applicable to the Guardian.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-vdmattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ses as ses\n\n    cfn_vdm_attributes_props = ses.CfnVdmAttributesProps(\n        dashboard_attributes=ses.CfnVdmAttributes.DashboardAttributesProperty(\n            engagement_metrics="engagementMetrics"\n        ),\n        guardian_attributes=ses.CfnVdmAttributes.GuardianAttributesProperty(\n            optimized_shared_delivery="optimizedSharedDelivery"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dashboard_attributes', 'guardian_attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ses.CfnVdmAttributesProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    DkimIdentity: typing.Optional[dict[str, models.aws_ses.DkimIdentityDef]] = pydantic.Field(None)
    EventDestination: typing.Optional[dict[str, models.aws_ses.EventDestinationDef]] = pydantic.Field(None)
    Identity: typing.Optional[dict[str, models.aws_ses.IdentityDef]] = pydantic.Field(None)
    AllowListReceiptFilter: typing.Optional[dict[str, models.aws_ses.AllowListReceiptFilterDef]] = pydantic.Field(None)
    ConfigurationSet: typing.Optional[dict[str, models.aws_ses.ConfigurationSetDef]] = pydantic.Field(None)
    ConfigurationSetEventDestination: typing.Optional[dict[str, models.aws_ses.ConfigurationSetEventDestinationDef]] = pydantic.Field(None)
    DedicatedIpPool: typing.Optional[dict[str, models.aws_ses.DedicatedIpPoolDef]] = pydantic.Field(None)
    DropSpamReceiptRule: typing.Optional[dict[str, models.aws_ses.DropSpamReceiptRuleDef]] = pydantic.Field(None)
    EmailIdentity: typing.Optional[dict[str, models.aws_ses.EmailIdentityDef]] = pydantic.Field(None)
    ReceiptFilter: typing.Optional[dict[str, models.aws_ses.ReceiptFilterDef]] = pydantic.Field(None)
    ReceiptRule: typing.Optional[dict[str, models.aws_ses.ReceiptRuleDef]] = pydantic.Field(None)
    ReceiptRuleSet: typing.Optional[dict[str, models.aws_ses.ReceiptRuleSetDef]] = pydantic.Field(None)
    VdmAttributes: typing.Optional[dict[str, models.aws_ses.VdmAttributesDef]] = pydantic.Field(None)
    AddHeaderActionConfig: typing.Optional[dict[str, models.aws_ses.AddHeaderActionConfigDef]] = pydantic.Field(None)
    AllowListReceiptFilterProps: typing.Optional[dict[str, models.aws_ses.AllowListReceiptFilterPropsDef]] = pydantic.Field(None)
    BounceActionConfig: typing.Optional[dict[str, models.aws_ses.BounceActionConfigDef]] = pydantic.Field(None)
    ByoDkimOptions: typing.Optional[dict[str, models.aws_ses.ByoDkimOptionsDef]] = pydantic.Field(None)
    CfnConfigurationSet_DashboardOptionsProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSet_DashboardOptionsPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSet_DeliveryOptionsProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSet_DeliveryOptionsPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSet_GuardianOptionsProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSet_GuardianOptionsPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSet_ReputationOptionsProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSet_ReputationOptionsPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSet_SendingOptionsProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSet_SendingOptionsPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSet_SuppressionOptionsProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSet_SuppressionOptionsPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSet_TrackingOptionsProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSet_TrackingOptionsPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSet_VdmOptionsProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSet_VdmOptionsPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSetEventDestination_CloudWatchDestinationProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSetEventDestination_CloudWatchDestinationPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSetEventDestination_DimensionConfigurationProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSetEventDestination_DimensionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSetEventDestination_EventDestinationProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSetEventDestination_EventDestinationPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSetEventDestination_KinesisFirehoseDestinationProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSetEventDestination_KinesisFirehoseDestinationPropertyDef]] = pydantic.Field(None)
    CfnConfigurationSetEventDestination_SnsDestinationProperty: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSetEventDestination_SnsDestinationPropertyDef]] = pydantic.Field(None)
    CfnContactList_TopicProperty: typing.Optional[dict[str, models.aws_ses.CfnContactList_TopicPropertyDef]] = pydantic.Field(None)
    CfnEmailIdentity_ConfigurationSetAttributesProperty: typing.Optional[dict[str, models.aws_ses.CfnEmailIdentity_ConfigurationSetAttributesPropertyDef]] = pydantic.Field(None)
    CfnEmailIdentity_DkimAttributesProperty: typing.Optional[dict[str, models.aws_ses.CfnEmailIdentity_DkimAttributesPropertyDef]] = pydantic.Field(None)
    CfnEmailIdentity_DkimSigningAttributesProperty: typing.Optional[dict[str, models.aws_ses.CfnEmailIdentity_DkimSigningAttributesPropertyDef]] = pydantic.Field(None)
    CfnEmailIdentity_FeedbackAttributesProperty: typing.Optional[dict[str, models.aws_ses.CfnEmailIdentity_FeedbackAttributesPropertyDef]] = pydantic.Field(None)
    CfnEmailIdentity_MailFromAttributesProperty: typing.Optional[dict[str, models.aws_ses.CfnEmailIdentity_MailFromAttributesPropertyDef]] = pydantic.Field(None)
    CfnReceiptFilter_FilterProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptFilter_FilterPropertyDef]] = pydantic.Field(None)
    CfnReceiptFilter_IpFilterProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptFilter_IpFilterPropertyDef]] = pydantic.Field(None)
    CfnReceiptRule_ActionProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptRule_ActionPropertyDef]] = pydantic.Field(None)
    CfnReceiptRule_AddHeaderActionProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptRule_AddHeaderActionPropertyDef]] = pydantic.Field(None)
    CfnReceiptRule_BounceActionProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptRule_BounceActionPropertyDef]] = pydantic.Field(None)
    CfnReceiptRule_LambdaActionProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptRule_LambdaActionPropertyDef]] = pydantic.Field(None)
    CfnReceiptRule_RuleProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptRule_RulePropertyDef]] = pydantic.Field(None)
    CfnReceiptRule_S3ActionProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptRule_S3ActionPropertyDef]] = pydantic.Field(None)
    CfnReceiptRule_SNSActionProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptRule_SNSActionPropertyDef]] = pydantic.Field(None)
    CfnReceiptRule_StopActionProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptRule_StopActionPropertyDef]] = pydantic.Field(None)
    CfnReceiptRule_WorkmailActionProperty: typing.Optional[dict[str, models.aws_ses.CfnReceiptRule_WorkmailActionPropertyDef]] = pydantic.Field(None)
    CfnTemplate_TemplateProperty: typing.Optional[dict[str, models.aws_ses.CfnTemplate_TemplatePropertyDef]] = pydantic.Field(None)
    CfnVdmAttributes_DashboardAttributesProperty: typing.Optional[dict[str, models.aws_ses.CfnVdmAttributes_DashboardAttributesPropertyDef]] = pydantic.Field(None)
    CfnVdmAttributes_GuardianAttributesProperty: typing.Optional[dict[str, models.aws_ses.CfnVdmAttributes_GuardianAttributesPropertyDef]] = pydantic.Field(None)
    CloudWatchDimension: typing.Optional[dict[str, models.aws_ses.CloudWatchDimensionDef]] = pydantic.Field(None)
    ConfigurationSetEventDestinationOptions: typing.Optional[dict[str, models.aws_ses.ConfigurationSetEventDestinationOptionsDef]] = pydantic.Field(None)
    ConfigurationSetEventDestinationProps: typing.Optional[dict[str, models.aws_ses.ConfigurationSetEventDestinationPropsDef]] = pydantic.Field(None)
    ConfigurationSetProps: typing.Optional[dict[str, models.aws_ses.ConfigurationSetPropsDef]] = pydantic.Field(None)
    DedicatedIpPoolProps: typing.Optional[dict[str, models.aws_ses.DedicatedIpPoolPropsDef]] = pydantic.Field(None)
    DkimIdentityConfig: typing.Optional[dict[str, models.aws_ses.DkimIdentityConfigDef]] = pydantic.Field(None)
    DkimRecord: typing.Optional[dict[str, models.aws_ses.DkimRecordDef]] = pydantic.Field(None)
    DropSpamReceiptRuleProps: typing.Optional[dict[str, models.aws_ses.DropSpamReceiptRulePropsDef]] = pydantic.Field(None)
    EmailIdentityProps: typing.Optional[dict[str, models.aws_ses.EmailIdentityPropsDef]] = pydantic.Field(None)
    LambdaActionConfig: typing.Optional[dict[str, models.aws_ses.LambdaActionConfigDef]] = pydantic.Field(None)
    ReceiptFilterProps: typing.Optional[dict[str, models.aws_ses.ReceiptFilterPropsDef]] = pydantic.Field(None)
    ReceiptRuleActionConfig: typing.Optional[dict[str, models.aws_ses.ReceiptRuleActionConfigDef]] = pydantic.Field(None)
    ReceiptRuleOptions: typing.Optional[dict[str, models.aws_ses.ReceiptRuleOptionsDef]] = pydantic.Field(None)
    ReceiptRuleProps: typing.Optional[dict[str, models.aws_ses.ReceiptRulePropsDef]] = pydantic.Field(None)
    ReceiptRuleSetProps: typing.Optional[dict[str, models.aws_ses.ReceiptRuleSetPropsDef]] = pydantic.Field(None)
    S3ActionConfig: typing.Optional[dict[str, models.aws_ses.S3ActionConfigDef]] = pydantic.Field(None)
    SNSActionConfig: typing.Optional[dict[str, models.aws_ses.SNSActionConfigDef]] = pydantic.Field(None)
    StopActionConfig: typing.Optional[dict[str, models.aws_ses.StopActionConfigDef]] = pydantic.Field(None)
    VdmAttributesProps: typing.Optional[dict[str, models.aws_ses.VdmAttributesPropsDef]] = pydantic.Field(None)
    WorkmailActionConfig: typing.Optional[dict[str, models.aws_ses.WorkmailActionConfigDef]] = pydantic.Field(None)
    CfnConfigurationSet: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSetDef]] = pydantic.Field(None)
    CfnConfigurationSetEventDestination: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSetEventDestinationDef]] = pydantic.Field(None)
    CfnContactList: typing.Optional[dict[str, models.aws_ses.CfnContactListDef]] = pydantic.Field(None)
    CfnDedicatedIpPool: typing.Optional[dict[str, models.aws_ses.CfnDedicatedIpPoolDef]] = pydantic.Field(None)
    CfnEmailIdentity: typing.Optional[dict[str, models.aws_ses.CfnEmailIdentityDef]] = pydantic.Field(None)
    CfnReceiptFilter: typing.Optional[dict[str, models.aws_ses.CfnReceiptFilterDef]] = pydantic.Field(None)
    CfnReceiptRule: typing.Optional[dict[str, models.aws_ses.CfnReceiptRuleDef]] = pydantic.Field(None)
    CfnReceiptRuleSet: typing.Optional[dict[str, models.aws_ses.CfnReceiptRuleSetDef]] = pydantic.Field(None)
    CfnTemplate: typing.Optional[dict[str, models.aws_ses.CfnTemplateDef]] = pydantic.Field(None)
    CfnVdmAttributes: typing.Optional[dict[str, models.aws_ses.CfnVdmAttributesDef]] = pydantic.Field(None)
    CfnConfigurationSetEventDestinationProps: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSetEventDestinationPropsDef]] = pydantic.Field(None)
    CfnConfigurationSetProps: typing.Optional[dict[str, models.aws_ses.CfnConfigurationSetPropsDef]] = pydantic.Field(None)
    CfnContactListProps: typing.Optional[dict[str, models.aws_ses.CfnContactListPropsDef]] = pydantic.Field(None)
    CfnDedicatedIpPoolProps: typing.Optional[dict[str, models.aws_ses.CfnDedicatedIpPoolPropsDef]] = pydantic.Field(None)
    CfnEmailIdentityProps: typing.Optional[dict[str, models.aws_ses.CfnEmailIdentityPropsDef]] = pydantic.Field(None)
    CfnReceiptFilterProps: typing.Optional[dict[str, models.aws_ses.CfnReceiptFilterPropsDef]] = pydantic.Field(None)
    CfnReceiptRuleProps: typing.Optional[dict[str, models.aws_ses.CfnReceiptRulePropsDef]] = pydantic.Field(None)
    CfnReceiptRuleSetProps: typing.Optional[dict[str, models.aws_ses.CfnReceiptRuleSetPropsDef]] = pydantic.Field(None)
    CfnTemplateProps: typing.Optional[dict[str, models.aws_ses.CfnTemplatePropsDef]] = pydantic.Field(None)
    CfnVdmAttributesProps: typing.Optional[dict[str, models.aws_ses.CfnVdmAttributesPropsDef]] = pydantic.Field(None)
    ...

import models
