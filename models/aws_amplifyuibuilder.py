from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ActionParametersProperty
class CfnComponent_ActionParametersPropertyDef(BaseStruct):
    anchor: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The HTML anchor link to the location to open. Specify this value for a navigation action.\n')
    fields: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.\n')
    global_: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies whether the user should be signed out globally. Specify this value for an auth sign out action.\n')
    model: typing.Optional[str] = pydantic.Field(None, description='The name of the data model. Use when the action performs an operation on an Amplify DataStore model.\n')
    state: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_MutationActionSetStateParameterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A key-value pair that specifies the state property name and its initial value.\n')
    target: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The element within the same component to modify when the action occurs.\n')
    type: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The type of navigation action. Valid values are ``url`` and ``anchor`` . This value is required for a navigation action.\n')
    url: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The URL to the location to open. Specify this value for a navigation action.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-actionparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # component_property_property_: amplifyuibuilder.CfnComponent.ComponentPropertyProperty\n\n    action_parameters_property = amplifyuibuilder.CfnComponent.ActionParametersProperty(\n        anchor=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            bindings={\n                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                    element="element",\n                    property="property"\n                )\n            },\n            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            component_name="componentName",\n            concat=[component_property_property_],\n            condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                else=component_property_property_,\n                field="field",\n                operand="operand",\n                operand_type="operandType",\n                operator="operator",\n                property="property",\n                then=component_property_property_\n            ),\n            configured=False,\n            default_value="defaultValue",\n            event="event",\n            imported_value="importedValue",\n            model="model",\n            property="property",\n            type="type",\n            user_attribute="userAttribute",\n            value="value"\n        ),\n        fields={\n            "fields_key": amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                bindings={\n                    "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                        element="element",\n                        property="property"\n                    )\n                },\n                collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                component_name="componentName",\n                concat=[component_property_property_],\n                condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                    else=component_property_property_,\n                    field="field",\n                    operand="operand",\n                    operand_type="operandType",\n                    operator="operator",\n                    property="property",\n                    then=component_property_property_\n                ),\n                configured=False,\n                default_value="defaultValue",\n                event="event",\n                imported_value="importedValue",\n                model="model",\n                property="property",\n                type="type",\n                user_attribute="userAttribute",\n                value="value"\n            )\n        },\n        global=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            bindings={\n                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                    element="element",\n                    property="property"\n                )\n            },\n            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            component_name="componentName",\n            concat=[component_property_property_],\n            condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                else=component_property_property_,\n                field="field",\n                operand="operand",\n                operand_type="operandType",\n                operator="operator",\n                property="property",\n                then=component_property_property_\n            ),\n            configured=False,\n            default_value="defaultValue",\n            event="event",\n            imported_value="importedValue",\n            model="model",\n            property="property",\n            type="type",\n            user_attribute="userAttribute",\n            value="value"\n        ),\n        id=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            bindings={\n                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                    element="element",\n                    property="property"\n                )\n            },\n            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            component_name="componentName",\n            concat=[component_property_property_],\n            condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                else=component_property_property_,\n                field="field",\n                operand="operand",\n                operand_type="operandType",\n                operator="operator",\n                property="property",\n                then=component_property_property_\n            ),\n            configured=False,\n            default_value="defaultValue",\n            event="event",\n            imported_value="importedValue",\n            model="model",\n            property="property",\n            type="type",\n            user_attribute="userAttribute",\n            value="value"\n        ),\n        model="model",\n        state=amplifyuibuilder.CfnComponent.MutationActionSetStateParameterProperty(\n            component_name="componentName",\n            property="property",\n            set=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                bindings={\n                    "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                        element="element",\n                        property="property"\n                    )\n                },\n                collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                component_name="componentName",\n                concat=[component_property_property_],\n                condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                    else=component_property_property_,\n                    field="field",\n                    operand="operand",\n                    operand_type="operandType",\n                    operator="operator",\n                    property="property",\n                    then=component_property_property_\n                ),\n                configured=False,\n                default_value="defaultValue",\n                event="event",\n                imported_value="importedValue",\n                model="model",\n                property="property",\n                type="type",\n                user_attribute="userAttribute",\n                value="value"\n            )\n        ),\n        target=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            bindings={\n                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                    element="element",\n                    property="property"\n                )\n            },\n            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            component_name="componentName",\n            concat=[component_property_property_],\n            condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                else=component_property_property_,\n                field="field",\n                operand="operand",\n                operand_type="operandType",\n                operator="operator",\n                property="property",\n                then=component_property_property_\n            ),\n            configured=False,\n            default_value="defaultValue",\n            event="event",\n            imported_value="importedValue",\n            model="model",\n            property="property",\n            type="type",\n            user_attribute="userAttribute",\n            value="value"\n        ),\n        type=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            bindings={\n                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                    element="element",\n                    property="property"\n                )\n            },\n            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            component_name="componentName",\n            concat=[component_property_property_],\n            condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                else=component_property_property_,\n                field="field",\n                operand="operand",\n                operand_type="operandType",\n                operator="operator",\n                property="property",\n                then=component_property_property_\n            ),\n            configured=False,\n            default_value="defaultValue",\n            event="event",\n            imported_value="importedValue",\n            model="model",\n            property="property",\n            type="type",\n            user_attribute="userAttribute",\n            value="value"\n        ),\n        url=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            bindings={\n                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                    element="element",\n                    property="property"\n                )\n            },\n            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            component_name="componentName",\n            concat=[component_property_property_],\n            condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                else=component_property_property_,\n                field="field",\n                operand="operand",\n                operand_type="operandType",\n                operator="operator",\n                property="property",\n                then=component_property_property_\n            ),\n            configured=False,\n            default_value="defaultValue",\n            event="event",\n            imported_value="importedValue",\n            model="model",\n            property="property",\n            type="type",\n            user_attribute="userAttribute",\n            value="value"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['anchor', 'fields', 'global_', 'model', 'state', 'target', 'type', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ActionParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentBindingPropertiesValuePropertiesProperty
class CfnComponent_ComponentBindingPropertiesValuePropertiesPropertyDef(BaseStruct):
    bucket: typing.Optional[str] = pydantic.Field(None, description='An Amazon S3 bucket.\n')
    default_value: typing.Optional[str] = pydantic.Field(None, description='The default value to assign to the property.\n')
    field: typing.Optional[str] = pydantic.Field(None, description='The field to bind the data to.\n')
    key: typing.Optional[str] = pydantic.Field(None, description='The storage key for an Amazon S3 bucket.\n')
    model: typing.Optional[str] = pydantic.Field(None, description='An Amplify DataStore model.\n')
    predicates: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_PredicatePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of predicates for binding a component's properties to data.\n")
    user_attribute: typing.Optional[str] = pydantic.Field(None, description='An authenticated user attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-componentbindingpropertiesvalueproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # predicate_property_: amplifyuibuilder.CfnComponent.PredicateProperty\n\n    component_binding_properties_value_properties_property = amplifyuibuilder.CfnComponent.ComponentBindingPropertiesValuePropertiesProperty(\n        bucket="bucket",\n        default_value="defaultValue",\n        field="field",\n        key="key",\n        model="model",\n        predicates=[amplifyuibuilder.CfnComponent.PredicateProperty(\n            and=[predicate_property_],\n            field="field",\n            operand="operand",\n            operator="operator",\n            or=[predicate_property_]\n        )],\n        user_attribute="userAttribute"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'default_value', 'field', 'key', 'model', 'predicates', 'user_attribute']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentBindingPropertiesValuePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentBindingPropertiesValueProperty
class CfnComponent_ComponentBindingPropertiesValuePropertyDef(BaseStruct):
    binding_properties: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentBindingPropertiesValuePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the properties to customize with data at runtime.\n')
    default_value: typing.Optional[str] = pydantic.Field(None, description='The default value of the property.\n')
    type: typing.Optional[str] = pydantic.Field(None, description='The property type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-componentbindingpropertiesvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # predicate_property_: amplifyuibuilder.CfnComponent.PredicateProperty\n\n    component_binding_properties_value_property = amplifyuibuilder.CfnComponent.ComponentBindingPropertiesValueProperty(\n        binding_properties=amplifyuibuilder.CfnComponent.ComponentBindingPropertiesValuePropertiesProperty(\n            bucket="bucket",\n            default_value="defaultValue",\n            field="field",\n            key="key",\n            model="model",\n            predicates=[amplifyuibuilder.CfnComponent.PredicateProperty(\n                and=[predicate_property_],\n                field="field",\n                operand="operand",\n                operator="operator",\n                or=[predicate_property_]\n            )],\n            user_attribute="userAttribute"\n        ),\n        default_value="defaultValue",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['binding_properties', 'default_value', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentBindingPropertiesValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentChildProperty
class CfnComponent_ComponentChildPropertyDef(BaseStruct):
    component_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the child component.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the child component.\n')
    properties: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="Describes the properties of the child component. You can't specify ``tags`` as a valid property for ``properties`` .\n")
    children: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentChildPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The list of ``ComponentChild`` instances for this component.\n')
    events: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes the events that can be raised on the child component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-componentchild.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # component_child_property_: amplifyuibuilder.CfnComponent.ComponentChildProperty\n    # component_property_property_: amplifyuibuilder.CfnComponent.ComponentPropertyProperty\n\n    component_child_property = amplifyuibuilder.CfnComponent.ComponentChildProperty(\n        component_type="componentType",\n        name="name",\n        properties={\n            "properties_key": amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                bindings={\n                    "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                        element="element",\n                        property="property"\n                    )\n                },\n                collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                component_name="componentName",\n                concat=[component_property_property_],\n                condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                    else=component_property_property_,\n                    field="field",\n                    operand="operand",\n                    operand_type="operandType",\n                    operator="operator",\n                    property="property",\n                    then=component_property_property_\n                ),\n                configured=False,\n                default_value="defaultValue",\n                event="event",\n                imported_value="importedValue",\n                model="model",\n                property="property",\n                type="type",\n                user_attribute="userAttribute",\n                value="value"\n            )\n        },\n\n        # the properties below are optional\n        children=[component_child_property_],\n        events={\n            "events_key": amplifyuibuilder.CfnComponent.ComponentEventProperty(\n                action="action",\n                parameters=amplifyuibuilder.CfnComponent.ActionParametersProperty(\n                    anchor=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                        binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        bindings={\n                            "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                                element="element",\n                                property="property"\n                            )\n                        },\n                        collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        component_name="componentName",\n                        concat=[component_property_property_],\n                        condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                            else=component_property_property_,\n                            field="field",\n                            operand="operand",\n                            operand_type="operandType",\n                            operator="operator",\n                            property="property",\n                            then=component_property_property_\n                        ),\n                        configured=False,\n                        default_value="defaultValue",\n                        event="event",\n                        imported_value="importedValue",\n                        model="model",\n                        property="property",\n                        type="type",\n                        user_attribute="userAttribute",\n                        value="value"\n                    ),\n                    fields={\n                        "fields_key": amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                                property="property",\n\n                                # the properties below are optional\n                                field="field"\n                            ),\n                            bindings={\n                                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                                    element="element",\n                                    property="property"\n                                )\n                            },\n                            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                                property="property",\n\n                                # the properties below are optional\n                                field="field"\n                            ),\n                            component_name="componentName",\n                            concat=[component_property_property_],\n                            condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                                else=component_property_property_,\n                                field="field",\n                                operand="operand",\n                                operand_type="operandType",\n                                operator="operator",\n                                property="property",\n                                then=component_property_property_\n                            ),\n                            configured=False,\n                            default_value="defaultValue",\n                            event="event",\n                            imported_value="importedValue",\n                            model="model",\n                            property="property",\n                            type="type",\n                            user_attribute="userAttribute",\n                            value="value"\n                        )\n                    },\n                    global=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                        binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        bindings={\n                            "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                                element="element",\n                                property="property"\n                            )\n                        },\n                        collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        component_name="componentName",\n                        concat=[component_property_property_],\n                        condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                            else=component_property_property_,\n                            field="field",\n                            operand="operand",\n                            operand_type="operandType",\n                            operator="operator",\n                            property="property",\n                            then=component_property_property_\n                        ),\n                        configured=False,\n                        default_value="defaultValue",\n                        event="event",\n                        imported_value="importedValue",\n                        model="model",\n                        property="property",\n                        type="type",\n                        user_attribute="userAttribute",\n                        value="value"\n                    ),\n                    id=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                        binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        bindings={\n                            "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                                element="element",\n                                property="property"\n                            )\n                        },\n                        collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        component_name="componentName",\n                        concat=[component_property_property_],\n                        condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                            else=component_property_property_,\n                            field="field",\n                            operand="operand",\n                            operand_type="operandType",\n                            operator="operator",\n                            property="property",\n                            then=component_property_property_\n                        ),\n                        configured=False,\n                        default_value="defaultValue",\n                        event="event",\n                        imported_value="importedValue",\n                        model="model",\n                        property="property",\n                        type="type",\n                        user_attribute="userAttribute",\n                        value="value"\n                    ),\n                    model="model",\n                    state=amplifyuibuilder.CfnComponent.MutationActionSetStateParameterProperty(\n                        component_name="componentName",\n                        property="property",\n                        set=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                                property="property",\n\n                                # the properties below are optional\n                                field="field"\n                            ),\n                            bindings={\n                                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                                    element="element",\n                                    property="property"\n                                )\n                            },\n                            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                                property="property",\n\n                                # the properties below are optional\n                                field="field"\n                            ),\n                            component_name="componentName",\n                            concat=[component_property_property_],\n                            condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                                else=component_property_property_,\n                                field="field",\n                                operand="operand",\n                                operand_type="operandType",\n                                operator="operator",\n                                property="property",\n                                then=component_property_property_\n                            ),\n                            configured=False,\n                            default_value="defaultValue",\n                            event="event",\n                            imported_value="importedValue",\n                            model="model",\n                            property="property",\n                            type="type",\n                            user_attribute="userAttribute",\n                            value="value"\n                        )\n                    ),\n                    target=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                        binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        bindings={\n                            "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                                element="element",\n                                property="property"\n                            )\n                        },\n                        collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        component_name="componentName",\n                        concat=[component_property_property_],\n                        condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                            else=component_property_property_,\n                            field="field",\n                            operand="operand",\n                            operand_type="operandType",\n                            operator="operator",\n                            property="property",\n                            then=component_property_property_\n                        ),\n                        configured=False,\n                        default_value="defaultValue",\n                        event="event",\n                        imported_value="importedValue",\n                        model="model",\n                        property="property",\n                        type="type",\n                        user_attribute="userAttribute",\n                        value="value"\n                    ),\n                    type=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                        binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        bindings={\n                            "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                                element="element",\n                                property="property"\n                            )\n                        },\n                        collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        component_name="componentName",\n                        concat=[component_property_property_],\n                        condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                            else=component_property_property_,\n                            field="field",\n                            operand="operand",\n                            operand_type="operandType",\n                            operator="operator",\n                            property="property",\n                            then=component_property_property_\n                        ),\n                        configured=False,\n                        default_value="defaultValue",\n                        event="event",\n                        imported_value="importedValue",\n                        model="model",\n                        property="property",\n                        type="type",\n                        user_attribute="userAttribute",\n                        value="value"\n                    ),\n                    url=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                        binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        bindings={\n                            "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                                element="element",\n                                property="property"\n                            )\n                        },\n                        collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                            property="property",\n\n                            # the properties below are optional\n                            field="field"\n                        ),\n                        component_name="componentName",\n                        concat=[component_property_property_],\n                        condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                            else=component_property_property_,\n                            field="field",\n                            operand="operand",\n                            operand_type="operandType",\n                            operator="operator",\n                            property="property",\n                            then=component_property_property_\n                        ),\n                        configured=False,\n                        default_value="defaultValue",\n                        event="event",\n                        imported_value="importedValue",\n                        model="model",\n                        property="property",\n                        type="type",\n                        user_attribute="userAttribute",\n                        value="value"\n                    )\n                )\n            )\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['component_type', 'name', 'properties', 'children', 'events']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentChildProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty
class CfnComponent_ComponentConditionPropertyPropertyDef(BaseStruct):
    else_: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value to assign to the property if the condition is not met.\n')
    field: typing.Optional[str] = pydantic.Field(None, description='The name of a field. Specify this when the property is a data model.\n')
    operand: typing.Optional[str] = pydantic.Field(None, description='The value of the property to evaluate.\n')
    operand_type: typing.Optional[str] = pydantic.Field(None, description='The type of the property to evaluate.\n')
    operator: typing.Optional[str] = pydantic.Field(None, description='The operator to use to perform the evaluation, such as ``eq`` to represent equals.\n')
    property: typing.Optional[str] = pydantic.Field(None, description='The name of the conditional property.\n')
    then: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value to assign to the property if the condition is met.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-componentconditionproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # component_condition_property_property_: amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty\n    # component_property_property_: amplifyuibuilder.CfnComponent.ComponentPropertyProperty\n\n    component_condition_property_property = amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n        else=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            bindings={\n                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                    element="element",\n                    property="property"\n                )\n            },\n            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            component_name="componentName",\n            concat=[component_property_property_],\n            condition=component_condition_property_property_,\n            configured=False,\n            default_value="defaultValue",\n            event="event",\n            imported_value="importedValue",\n            model="model",\n            property="property",\n            type="type",\n            user_attribute="userAttribute",\n            value="value"\n        ),\n        field="field",\n        operand="operand",\n        operand_type="operandType",\n        operator="operator",\n        property="property",\n        then=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            bindings={\n                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                    element="element",\n                    property="property"\n                )\n            },\n            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            component_name="componentName",\n            concat=[component_property_property_],\n            condition=component_condition_property_property_,\n            configured=False,\n            default_value="defaultValue",\n            event="event",\n            imported_value="importedValue",\n            model="model",\n            property="property",\n            type="type",\n            user_attribute="userAttribute",\n            value="value"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['else_', 'field', 'operand', 'operand_type', 'operator', 'property', 'then']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentDataConfigurationProperty
class CfnComponent_ComponentDataConfigurationPropertyDef(BaseStruct):
    model: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the data model to use to bind data to a component.\n')
    identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.\n')
    predicate: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_PredicatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the conditional logic to use when binding data to a component. Use this property to retrieve only a subset of the data in a collection.\n')
    sort: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_SortPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes how to sort the component\'s properties.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-componentdataconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # predicate_property_: amplifyuibuilder.CfnComponent.PredicateProperty\n\n    component_data_configuration_property = amplifyuibuilder.CfnComponent.ComponentDataConfigurationProperty(\n        model="model",\n\n        # the properties below are optional\n        identifiers=["identifiers"],\n        predicate=amplifyuibuilder.CfnComponent.PredicateProperty(\n            and=[predicate_property_],\n            field="field",\n            operand="operand",\n            operator="operator",\n            or=[predicate_property_]\n        ),\n        sort=[amplifyuibuilder.CfnComponent.SortPropertyProperty(\n            direction="direction",\n            field="field"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['model', 'identifiers', 'predicate', 'sort']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentDataConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentEventProperty
class CfnComponent_ComponentEventPropertyDef(BaseStruct):
    action: typing.Optional[str] = pydantic.Field(None, description='The action to perform when a specific event is raised.\n')
    parameters: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ActionParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes information about the action.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-componentevent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # component_property_property_: amplifyuibuilder.CfnComponent.ComponentPropertyProperty\n\n    component_event_property = amplifyuibuilder.CfnComponent.ComponentEventProperty(\n        action="action",\n        parameters=amplifyuibuilder.CfnComponent.ActionParametersProperty(\n            anchor=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                bindings={\n                    "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                        element="element",\n                        property="property"\n                    )\n                },\n                collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                component_name="componentName",\n                concat=[component_property_property_],\n                condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                    else=component_property_property_,\n                    field="field",\n                    operand="operand",\n                    operand_type="operandType",\n                    operator="operator",\n                    property="property",\n                    then=component_property_property_\n                ),\n                configured=False,\n                default_value="defaultValue",\n                event="event",\n                imported_value="importedValue",\n                model="model",\n                property="property",\n                type="type",\n                user_attribute="userAttribute",\n                value="value"\n            ),\n            fields={\n                "fields_key": amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                    binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                        property="property",\n\n                        # the properties below are optional\n                        field="field"\n                    ),\n                    bindings={\n                        "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                            element="element",\n                            property="property"\n                        )\n                    },\n                    collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                        property="property",\n\n                        # the properties below are optional\n                        field="field"\n                    ),\n                    component_name="componentName",\n                    concat=[component_property_property_],\n                    condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                        else=component_property_property_,\n                        field="field",\n                        operand="operand",\n                        operand_type="operandType",\n                        operator="operator",\n                        property="property",\n                        then=component_property_property_\n                    ),\n                    configured=False,\n                    default_value="defaultValue",\n                    event="event",\n                    imported_value="importedValue",\n                    model="model",\n                    property="property",\n                    type="type",\n                    user_attribute="userAttribute",\n                    value="value"\n                )\n            },\n            global=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                bindings={\n                    "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                        element="element",\n                        property="property"\n                    )\n                },\n                collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                component_name="componentName",\n                concat=[component_property_property_],\n                condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                    else=component_property_property_,\n                    field="field",\n                    operand="operand",\n                    operand_type="operandType",\n                    operator="operator",\n                    property="property",\n                    then=component_property_property_\n                ),\n                configured=False,\n                default_value="defaultValue",\n                event="event",\n                imported_value="importedValue",\n                model="model",\n                property="property",\n                type="type",\n                user_attribute="userAttribute",\n                value="value"\n            ),\n            id=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                bindings={\n                    "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                        element="element",\n                        property="property"\n                    )\n                },\n                collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                component_name="componentName",\n                concat=[component_property_property_],\n                condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                    else=component_property_property_,\n                    field="field",\n                    operand="operand",\n                    operand_type="operandType",\n                    operator="operator",\n                    property="property",\n                    then=component_property_property_\n                ),\n                configured=False,\n                default_value="defaultValue",\n                event="event",\n                imported_value="importedValue",\n                model="model",\n                property="property",\n                type="type",\n                user_attribute="userAttribute",\n                value="value"\n            ),\n            model="model",\n            state=amplifyuibuilder.CfnComponent.MutationActionSetStateParameterProperty(\n                component_name="componentName",\n                property="property",\n                set=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                    binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                        property="property",\n\n                        # the properties below are optional\n                        field="field"\n                    ),\n                    bindings={\n                        "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                            element="element",\n                            property="property"\n                        )\n                    },\n                    collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                        property="property",\n\n                        # the properties below are optional\n                        field="field"\n                    ),\n                    component_name="componentName",\n                    concat=[component_property_property_],\n                    condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                        else=component_property_property_,\n                        field="field",\n                        operand="operand",\n                        operand_type="operandType",\n                        operator="operator",\n                        property="property",\n                        then=component_property_property_\n                    ),\n                    configured=False,\n                    default_value="defaultValue",\n                    event="event",\n                    imported_value="importedValue",\n                    model="model",\n                    property="property",\n                    type="type",\n                    user_attribute="userAttribute",\n                    value="value"\n                )\n            ),\n            target=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                bindings={\n                    "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                        element="element",\n                        property="property"\n                    )\n                },\n                collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                component_name="componentName",\n                concat=[component_property_property_],\n                condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                    else=component_property_property_,\n                    field="field",\n                    operand="operand",\n                    operand_type="operandType",\n                    operator="operator",\n                    property="property",\n                    then=component_property_property_\n                ),\n                configured=False,\n                default_value="defaultValue",\n                event="event",\n                imported_value="importedValue",\n                model="model",\n                property="property",\n                type="type",\n                user_attribute="userAttribute",\n                value="value"\n            ),\n            type=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                bindings={\n                    "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                        element="element",\n                        property="property"\n                    )\n                },\n                collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                component_name="componentName",\n                concat=[component_property_property_],\n                condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                    else=component_property_property_,\n                    field="field",\n                    operand="operand",\n                    operand_type="operandType",\n                    operator="operator",\n                    property="property",\n                    then=component_property_property_\n                ),\n                configured=False,\n                default_value="defaultValue",\n                event="event",\n                imported_value="importedValue",\n                model="model",\n                property="property",\n                type="type",\n                user_attribute="userAttribute",\n                value="value"\n            ),\n            url=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n                binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                bindings={\n                    "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                        element="element",\n                        property="property"\n                    )\n                },\n                collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                    property="property",\n\n                    # the properties below are optional\n                    field="field"\n                ),\n                component_name="componentName",\n                concat=[component_property_property_],\n                condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                    else=component_property_property_,\n                    field="field",\n                    operand="operand",\n                    operand_type="operandType",\n                    operator="operator",\n                    property="property",\n                    then=component_property_property_\n                ),\n                configured=False,\n                default_value="defaultValue",\n                event="event",\n                imported_value="importedValue",\n                model="model",\n                property="property",\n                type="type",\n                user_attribute="userAttribute",\n                value="value"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty
class CfnComponent_ComponentPropertyBindingPropertiesPropertyDef(BaseStruct):
    property: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The component property to bind to the data field.\n')
    field: typing.Optional[str] = pydantic.Field(None, description='The data field to bind the property to.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-componentpropertybindingproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    component_property_binding_properties_property = amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n        property="property",\n\n        # the properties below are optional\n        field="field"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['property', 'field']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentPropertyProperty
class CfnComponent_ComponentPropertyPropertyDef(BaseStruct):
    binding_properties: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyBindingPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The information to bind the component property to data at runtime.\n')
    bindings: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_FormBindingElementPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The information to bind the component property to form data.\n')
    collection_binding_properties: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyBindingPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The information to bind the component property to data at runtime. Use this for collection components.\n')
    component_name: typing.Optional[str] = pydantic.Field(None, description='The name of the component that is affected by an event.\n')
    concat: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of component properties to concatenate to create the value to assign to this component property.\n')
    condition: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentConditionPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The conditional expression to use to assign a value to the component property.\n')
    configured: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether the user configured the property in Amplify Studio after importing it.\n')
    default_value: typing.Optional[str] = pydantic.Field(None, description='The default value to assign to the component property.\n')
    event: typing.Optional[str] = pydantic.Field(None, description='An event that occurs in your app. Use this for workflow data binding.\n')
    imported_value: typing.Optional[str] = pydantic.Field(None, description='The default value assigned to the property when the component is imported into an app.\n')
    model: typing.Optional[str] = pydantic.Field(None, description='The data model to use to assign a value to the component property.\n')
    property: typing.Optional[str] = pydantic.Field(None, description="The name of the component's property that is affected by an event.\n")
    type: typing.Optional[str] = pydantic.Field(None, description='The component type.\n')
    user_attribute: typing.Optional[str] = pydantic.Field(None, description='An authenticated user attribute to use to assign a value to the component property.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value to assign to the component property.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-componentproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # component_property_property_: amplifyuibuilder.CfnComponent.ComponentPropertyProperty\n\n    component_property_property = amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n        binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n            property="property",\n\n            # the properties below are optional\n            field="field"\n        ),\n        bindings={\n            "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                element="element",\n                property="property"\n            )\n        },\n        collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n            property="property",\n\n            # the properties below are optional\n            field="field"\n        ),\n        component_name="componentName",\n        concat=[component_property_property_],\n        condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n            else=component_property_property_,\n            field="field",\n            operand="operand",\n            operand_type="operandType",\n            operator="operator",\n            property="property",\n            then=component_property_property_\n        ),\n        configured=False,\n        default_value="defaultValue",\n        event="event",\n        imported_value="importedValue",\n        model="model",\n        property="property",\n        type="type",\n        user_attribute="userAttribute",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['binding_properties', 'bindings', 'collection_binding_properties', 'component_name', 'concat', 'condition', 'configured', 'default_value', 'event', 'imported_value', 'model', 'property', 'type', 'user_attribute', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentPropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentVariantProperty
class CfnComponent_ComponentVariantPropertyDef(BaseStruct):
    overrides: typing.Any = pydantic.Field(None, description="The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify ``tags`` as a valid property for ``overrides`` .\n")
    variant_values: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='The combination of variants that comprise this variant.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-componentvariant.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # overrides: Any\n\n    component_variant_property = amplifyuibuilder.CfnComponent.ComponentVariantProperty(\n        overrides=overrides,\n        variant_values={\n            "variant_values_key": "variantValues"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['overrides', 'variant_values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.ComponentVariantProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.FormBindingElementProperty
class CfnComponent_FormBindingElementPropertyDef(BaseStruct):
    element: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the component to retrieve a value from.\n')
    property: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The property to retrieve a value from.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-formbindingelement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    form_binding_element_property = amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n        element="element",\n        property="property"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['element', 'property']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.FormBindingElementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.MutationActionSetStateParameterProperty
class CfnComponent_MutationActionSetStateParameterPropertyDef(BaseStruct):
    component_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the component that is being modified.\n')
    property: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the component property to apply the state configuration to.\n')
    set: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The state configuration to assign to the property.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-mutationactionsetstateparameter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # component_property_property_: amplifyuibuilder.CfnComponent.ComponentPropertyProperty\n\n    mutation_action_set_state_parameter_property = amplifyuibuilder.CfnComponent.MutationActionSetStateParameterProperty(\n        component_name="componentName",\n        property="property",\n        set=amplifyuibuilder.CfnComponent.ComponentPropertyProperty(\n            binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            bindings={\n                "bindings_key": amplifyuibuilder.CfnComponent.FormBindingElementProperty(\n                    element="element",\n                    property="property"\n                )\n            },\n            collection_binding_properties=amplifyuibuilder.CfnComponent.ComponentPropertyBindingPropertiesProperty(\n                property="property",\n\n                # the properties below are optional\n                field="field"\n            ),\n            component_name="componentName",\n            concat=[component_property_property_],\n            condition=amplifyuibuilder.CfnComponent.ComponentConditionPropertyProperty(\n                else=component_property_property_,\n                field="field",\n                operand="operand",\n                operand_type="operandType",\n                operator="operator",\n                property="property",\n                then=component_property_property_\n            ),\n            configured=False,\n            default_value="defaultValue",\n            event="event",\n            imported_value="importedValue",\n            model="model",\n            property="property",\n            type="type",\n            user_attribute="userAttribute",\n            value="value"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['component_name', 'property', 'set']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.MutationActionSetStateParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.PredicateProperty
class CfnComponent_PredicatePropertyDef(BaseStruct):
    and_: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_PredicatePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of predicates to combine logically.\n')
    field: typing.Optional[str] = pydantic.Field(None, description='The field to query.\n')
    operand: typing.Optional[str] = pydantic.Field(None, description='The value to use when performing the evaluation.\n')
    operator: typing.Optional[str] = pydantic.Field(None, description='The operator to use to perform the evaluation.\n')
    or_: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_PredicatePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of predicates to combine logically.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-predicate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # predicate_property_: amplifyuibuilder.CfnComponent.PredicateProperty\n\n    predicate_property = amplifyuibuilder.CfnComponent.PredicateProperty(\n        and=[predicate_property_],\n        field="field",\n        operand="operand",\n        operator="operator",\n        or=[predicate_property_]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['and_', 'field', 'operand', 'operator', 'or_']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.PredicateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent.SortPropertyProperty
class CfnComponent_SortPropertyPropertyDef(BaseStruct):
    direction: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The direction of the sort, either ascending or descending.\n')
    field: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The field to perform the sort on.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-component-sortproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    sort_property_property = amplifyuibuilder.CfnComponent.SortPropertyProperty(\n        direction="direction",\n        field="field"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['direction', 'field']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent.SortPropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FieldConfigProperty
class CfnForm_FieldConfigPropertyDef(BaseStruct):
    excluded: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to hide a field.\n')
    input_type: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldInputConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the configuration for the default input value to display for a field.\n')
    label: typing.Optional[str] = pydantic.Field(None, description='The label for the field.\n')
    position: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldPositionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the field position.\n')
    validations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldValidationConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The validations to perform on the value in the field.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-fieldconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    field_config_property = amplifyuibuilder.CfnForm.FieldConfigProperty(\n        excluded=False,\n        input_type=amplifyuibuilder.CfnForm.FieldInputConfigProperty(\n            type="type",\n\n            # the properties below are optional\n            default_checked=False,\n            default_country_code="defaultCountryCode",\n            default_value="defaultValue",\n            descriptive_text="descriptiveText",\n            file_uploader_config=amplifyuibuilder.CfnForm.FileUploaderFieldConfigProperty(\n                accepted_file_types=["acceptedFileTypes"],\n                access_level="accessLevel",\n\n                # the properties below are optional\n                is_resumable=False,\n                max_file_count=123,\n                max_size=123,\n                show_thumbnails=False\n            ),\n            is_array=False,\n            max_value=123,\n            min_value=123,\n            name="name",\n            placeholder="placeholder",\n            read_only=False,\n            required=False,\n            step=123,\n            value="value",\n            value_mappings=amplifyuibuilder.CfnForm.ValueMappingsProperty(\n                values=[amplifyuibuilder.CfnForm.ValueMappingProperty(\n                    value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n                        value="value"\n                    ),\n\n                    # the properties below are optional\n                    display_value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n                        value="value"\n                    )\n                )]\n            )\n        ),\n        label="label",\n        position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n            below="below",\n            fixed="fixed",\n            right_of="rightOf"\n        ),\n        validations=[amplifyuibuilder.CfnForm.FieldValidationConfigurationProperty(\n            type="type",\n\n            # the properties below are optional\n            num_values=[123],\n            str_values=["strValues"],\n            validation_message="validationMessage"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['excluded', 'input_type', 'label', 'position', 'validations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FieldConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FieldInputConfigProperty
class CfnForm_FieldInputConfigPropertyDef(BaseStruct):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The input type for the field.\n')
    default_checked: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether a field has a default value.\n')
    default_country_code: typing.Optional[str] = pydantic.Field(None, description='The default country code for a phone number.\n')
    default_value: typing.Optional[str] = pydantic.Field(None, description='The default value for the field.\n')
    descriptive_text: typing.Optional[str] = pydantic.Field(None, description='The text to display to describe the field.\n')
    file_uploader_config: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FileUploaderFieldConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for the file uploader field.\n')
    is_array: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to render the field as an array. This property is ignored if the ``dataSourceType`` for the form is a Data Store.\n')
    max_value: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum value to display for the field.\n')
    min_value: typing.Union[int, float, None] = pydantic.Field(None, description='The minimum value to display for the field.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the field.\n')
    placeholder: typing.Optional[str] = pydantic.Field(None, description='The text to display as a placeholder for the field.\n')
    read_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies a read only field.\n')
    required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies a field that requires input.\n')
    step: typing.Union[int, float, None] = pydantic.Field(None, description='The stepping increment for a numeric value in a field.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value for the field.\n')
    value_mappings: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_ValueMappingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The information to use to customize the input fields with data at runtime.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-fieldinputconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    field_input_config_property = amplifyuibuilder.CfnForm.FieldInputConfigProperty(\n        type="type",\n\n        # the properties below are optional\n        default_checked=False,\n        default_country_code="defaultCountryCode",\n        default_value="defaultValue",\n        descriptive_text="descriptiveText",\n        file_uploader_config=amplifyuibuilder.CfnForm.FileUploaderFieldConfigProperty(\n            accepted_file_types=["acceptedFileTypes"],\n            access_level="accessLevel",\n\n            # the properties below are optional\n            is_resumable=False,\n            max_file_count=123,\n            max_size=123,\n            show_thumbnails=False\n        ),\n        is_array=False,\n        max_value=123,\n        min_value=123,\n        name="name",\n        placeholder="placeholder",\n        read_only=False,\n        required=False,\n        step=123,\n        value="value",\n        value_mappings=amplifyuibuilder.CfnForm.ValueMappingsProperty(\n            values=[amplifyuibuilder.CfnForm.ValueMappingProperty(\n                value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n                    value="value"\n                ),\n\n                # the properties below are optional\n                display_value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n                    value="value"\n                )\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'default_checked', 'default_country_code', 'default_value', 'descriptive_text', 'file_uploader_config', 'is_array', 'max_value', 'min_value', 'name', 'placeholder', 'read_only', 'required', 'step', 'value', 'value_mappings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FieldInputConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FieldPositionProperty
class CfnForm_FieldPositionPropertyDef(BaseStruct):
    below: typing.Optional[str] = pydantic.Field(None, description='The field position is below the field specified by the string.\n')
    fixed: typing.Optional[str] = pydantic.Field(None, description="The field position is fixed and doesn't change in relation to other fields.\n")
    right_of: typing.Optional[str] = pydantic.Field(None, description='The field position is to the right of the field specified by the string.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-fieldposition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    field_position_property = amplifyuibuilder.CfnForm.FieldPositionProperty(\n        below="below",\n        fixed="fixed",\n        right_of="rightOf"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['below', 'fixed', 'right_of']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FieldPositionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FieldValidationConfigurationProperty
class CfnForm_FieldValidationConfigurationPropertyDef(BaseStruct):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The validation to perform on an object type. ``\n')
    num_values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[int, float]], None] = pydantic.Field(None, description='The validation to perform on a number value.\n')
    str_values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The validation to perform on a string value.\n')
    validation_message: typing.Optional[str] = pydantic.Field(None, description='The validation message to display.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-fieldvalidationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    field_validation_configuration_property = amplifyuibuilder.CfnForm.FieldValidationConfigurationProperty(\n        type="type",\n\n        # the properties below are optional\n        num_values=[123],\n        str_values=["strValues"],\n        validation_message="validationMessage"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'num_values', 'str_values', 'validation_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FieldValidationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FileUploaderFieldConfigProperty
class CfnForm_FileUploaderFieldConfigPropertyDef(BaseStruct):
    accepted_file_types: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The file types that are allowed to be uploaded by the file uploader. Provide this information in an array of strings specifying the valid file extensions.\n')
    access_level: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The access level to assign to the uploaded files in the Amazon S3 bucket where they are stored. The valid values for this property are ``private`` , ``protected`` , or ``public`` . For detailed information about the permissions associated with each access level, see `File access levels <https://docs.aws.amazon.com/https://docs.amplify.aws/lib/storage/configureaccess/q/platform/js/>`_ in the *Amplify documentation* .\n')
    is_resumable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Allows the file upload operation to be paused and resumed. The default value is ``false`` . When ``isResumable`` is set to ``true`` , the file uploader uses a multipart upload to break the files into chunks before upload. The progress of the upload isn't continuous, because the file uploader uploads a chunk at a time.\n")
    max_file_count: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the maximum number of files that can be selected to upload. The default value is an unlimited number of files.\n')
    max_size: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum file size in bytes that the file uploader will accept. The default value is an unlimited file size.\n')
    show_thumbnails: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to display or hide the image preview after selecting a file for upload. The default value is ``true`` to display the image preview.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-fileuploaderfieldconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    file_uploader_field_config_property = amplifyuibuilder.CfnForm.FileUploaderFieldConfigProperty(\n        accepted_file_types=["acceptedFileTypes"],\n        access_level="accessLevel",\n\n        # the properties below are optional\n        is_resumable=False,\n        max_file_count=123,\n        max_size=123,\n        show_thumbnails=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['accepted_file_types', 'access_level', 'is_resumable', 'max_file_count', 'max_size', 'show_thumbnails']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FileUploaderFieldConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FormButtonProperty
class CfnForm_FormButtonPropertyDef(BaseStruct):
    children: typing.Optional[str] = pydantic.Field(None, description="Describes the button's properties.\n")
    excluded: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether the button is visible on the form.\n')
    position: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldPositionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The position of the button.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-formbutton.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    form_button_property = amplifyuibuilder.CfnForm.FormButtonProperty(\n        children="children",\n        excluded=False,\n        position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n            below="below",\n            fixed="fixed",\n            right_of="rightOf"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['children', 'excluded', 'position']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FormButtonProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FormCTAProperty
class CfnForm_FormCTAPropertyDef(BaseStruct):
    cancel: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Displays a cancel button.\n')
    clear: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Displays a clear button.\n')
    position: typing.Optional[str] = pydantic.Field(None, description='The position of the button.\n')
    submit: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Displays a submit button.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-formcta.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    form_cTAProperty = amplifyuibuilder.CfnForm.FormCTAProperty(\n        cancel=amplifyuibuilder.CfnForm.FormButtonProperty(\n            children="children",\n            excluded=False,\n            position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n                below="below",\n                fixed="fixed",\n                right_of="rightOf"\n            )\n        ),\n        clear=amplifyuibuilder.CfnForm.FormButtonProperty(\n            children="children",\n            excluded=False,\n            position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n                below="below",\n                fixed="fixed",\n                right_of="rightOf"\n            )\n        ),\n        position="position",\n        submit=amplifyuibuilder.CfnForm.FormButtonProperty(\n            children="children",\n            excluded=False,\n            position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n                below="below",\n                fixed="fixed",\n                right_of="rightOf"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cancel', 'clear', 'position', 'submit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FormCTAProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FormDataTypeConfigProperty
class CfnForm_FormDataTypeConfigPropertyDef(BaseStruct):
    data_source_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The data source type, either an Amplify DataStore model or a custom data type.\n')
    data_type_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique name of the data type you are using as the data source for the form.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-formdatatypeconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    form_data_type_config_property = amplifyuibuilder.CfnForm.FormDataTypeConfigProperty(\n        data_source_type="dataSourceType",\n        data_type_name="dataTypeName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_source_type', 'data_type_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FormDataTypeConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FormInputValuePropertyProperty
class CfnForm_FormInputValuePropertyPropertyDef(BaseStruct):
    value: typing.Optional[str] = pydantic.Field(None, description='The value to assign to the input field.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-forminputvalueproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    form_input_value_property_property = amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FormInputValuePropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FormStyleConfigProperty
class CfnForm_FormStyleConfigPropertyDef(BaseStruct):
    token_reference: typing.Optional[str] = pydantic.Field(None, description="A reference to a design token to use to bind the form's style properties to an existing theme.\n")
    value: typing.Optional[str] = pydantic.Field(None, description='The value of the style setting.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-formstyleconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    form_style_config_property = amplifyuibuilder.CfnForm.FormStyleConfigProperty(\n        token_reference="tokenReference",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['token_reference', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FormStyleConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.FormStyleProperty
class CfnForm_FormStylePropertyDef(BaseStruct):
    horizontal_gap: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormStyleConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The spacing for the horizontal gap.\n')
    outer_padding: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormStyleConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The size of the outer padding for the form.\n')
    vertical_gap: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormStyleConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The spacing for the vertical gap.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-formstyle.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    form_style_property = amplifyuibuilder.CfnForm.FormStyleProperty(\n        horizontal_gap=amplifyuibuilder.CfnForm.FormStyleConfigProperty(\n            token_reference="tokenReference",\n            value="value"\n        ),\n        outer_padding=amplifyuibuilder.CfnForm.FormStyleConfigProperty(\n            token_reference="tokenReference",\n            value="value"\n        ),\n        vertical_gap=amplifyuibuilder.CfnForm.FormStyleConfigProperty(\n            token_reference="tokenReference",\n            value="value"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['horizontal_gap', 'outer_padding', 'vertical_gap']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.FormStyleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.SectionalElementProperty
class CfnForm_SectionalElementPropertyDef(BaseStruct):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of sectional element. Valid values are ``Heading`` , ``Text`` , and ``Divider`` .\n')
    excluded: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Excludes a sectional element that was generated by default for a specified data model.\n')
    level: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the size of the font for a ``Heading`` sectional element. Valid values are ``1 | 2 | 3 | 4 | 5 | 6`` .\n')
    orientation: typing.Optional[str] = pydantic.Field(None, description='Specifies the orientation for a ``Divider`` sectional element. Valid values are ``horizontal`` or ``vertical`` .\n')
    position: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldPositionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the position of the text in a field for a ``Text`` sectional element.\n')
    text: typing.Optional[str] = pydantic.Field(None, description='The text for a ``Text`` sectional element.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-sectionalelement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    sectional_element_property = amplifyuibuilder.CfnForm.SectionalElementProperty(\n        type="type",\n\n        # the properties below are optional\n        excluded=False,\n        level=123,\n        orientation="orientation",\n        position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n            below="below",\n            fixed="fixed",\n            right_of="rightOf"\n        ),\n        text="text"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'excluded', 'level', 'orientation', 'position', 'text']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.SectionalElementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.ValueMappingProperty
class CfnForm_ValueMappingPropertyDef(BaseStruct):
    value: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormInputValuePropertyPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The complex object.\n')
    display_value: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormInputValuePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value to display for the complex object.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-valuemapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    value_mapping_property = amplifyuibuilder.CfnForm.ValueMappingProperty(\n        value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n            value="value"\n        ),\n\n        # the properties below are optional\n        display_value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n            value="value"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value', 'display_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.ValueMappingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm.ValueMappingsProperty
class CfnForm_ValueMappingsPropertyDef(BaseStruct):
    values: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_ValueMappingPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value and display value pairs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-form-valuemappings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    value_mappings_property = amplifyuibuilder.CfnForm.ValueMappingsProperty(\n        values=[amplifyuibuilder.CfnForm.ValueMappingProperty(\n            value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n                value="value"\n            ),\n\n            # the properties below are optional\n            display_value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n                value="value"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm.ValueMappingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnTheme.ThemeValueProperty
class CfnTheme_ThemeValuePropertyDef(BaseStruct):
    children: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnTheme_ThemeValuesPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of key-value pairs that define the theme's properties.\n")
    value: typing.Optional[str] = pydantic.Field(None, description='The value of a theme property.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-theme-themevalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # theme_value_property_: amplifyuibuilder.CfnTheme.ThemeValueProperty\n\n    theme_value_property = amplifyuibuilder.CfnTheme.ThemeValueProperty(\n        children=[amplifyuibuilder.CfnTheme.ThemeValuesProperty(\n            key="key",\n            value=theme_value_property_\n        )],\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['children', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnTheme.ThemeValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnTheme.ThemeValuesProperty
class CfnTheme_ThemeValuesPropertyDef(BaseStruct):
    key: typing.Optional[str] = pydantic.Field(None, description='The name of the property.\n')
    value: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnTheme_ThemeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value of the property.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-amplifyuibuilder-theme-themevalues.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # theme_values_property_: amplifyuibuilder.CfnTheme.ThemeValuesProperty\n\n    theme_values_property = amplifyuibuilder.CfnTheme.ThemeValuesProperty(\n        key="key",\n        value=amplifyuibuilder.CfnTheme.ThemeValueProperty(\n            children=[theme_values_property_],\n            value="value"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnTheme.ThemeValuesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponent
class CfnComponentDef(BaseCfnResource):
    binding_properties: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentBindingPropertiesValuePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The information to connect a component's properties to data at runtime. You can't specify ``tags`` as a valid property for ``bindingProperties`` .\n")
    component_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the component. This can be an Amplify custom UI component or another custom component.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the component.\n')
    overrides: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Describes the component's properties that can be overriden in a customized instance of the component. You can't specify ``tags`` as a valid property for ``overrides`` .\n")
    properties: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="Describes the component's properties. You can't specify ``tags`` as a valid property for ``properties`` .\n")
    variants: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentVariantPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="A list of the component's variants. A variant is a unique style configuration of a main component.\n")
    app_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the Amplify app associated with the component.\n')
    children: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentChildPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of the component's ``ComponentChild`` instances.\n")
    collection_properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentDataConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The data binding configuration for the component's properties. Use this for a collection component. You can't specify ``tags`` as a valid property for ``collectionProperties`` .\n")
    environment_name: typing.Optional[str] = pydantic.Field(None, description='The name of the backend environment that is a part of the Amplify app.\n')
    events: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes the events that can be raised on the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.\n')
    schema_version: typing.Optional[str] = pydantic.Field(None, description='The schema version of the component when it was imported.\n')
    source_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the component in its original source system, such as Figma.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='One or more key-value pairs to use when tagging the component.')
    _init_params: typing.ClassVar[list[str]] = ['binding_properties', 'component_type', 'name', 'overrides', 'properties', 'variants', 'app_id', 'children', 'collection_properties', 'environment_name', 'events', 'schema_version', 'source_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ActionParametersProperty', 'ComponentBindingPropertiesValuePropertiesProperty', 'ComponentBindingPropertiesValueProperty', 'ComponentChildProperty', 'ComponentConditionPropertyProperty', 'ComponentDataConfigurationProperty', 'ComponentEventProperty', 'ComponentPropertyBindingPropertiesProperty', 'ComponentPropertyProperty', 'ComponentVariantProperty', 'FormBindingElementProperty', 'MutationActionSetStateParameterProperty', 'PredicateProperty', 'SortPropertyProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponent'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnComponentDefConfig] = pydantic.Field(None)


class CfnComponentDefConfig(pydantic.BaseModel):
    ActionParametersProperty: typing.Optional[list[CfnComponentDefActionparameterspropertyParams]] = pydantic.Field(None, description='')
    ComponentBindingPropertiesValuePropertiesProperty: typing.Optional[list[CfnComponentDefComponentbindingpropertiesvaluepropertiespropertyParams]] = pydantic.Field(None, description='')
    ComponentBindingPropertiesValueProperty: typing.Optional[list[CfnComponentDefComponentbindingpropertiesvaluepropertyParams]] = pydantic.Field(None, description='')
    ComponentChildProperty: typing.Optional[list[CfnComponentDefComponentchildpropertyParams]] = pydantic.Field(None, description='')
    ComponentConditionPropertyProperty: typing.Optional[list[CfnComponentDefComponentconditionpropertypropertyParams]] = pydantic.Field(None, description='')
    ComponentDataConfigurationProperty: typing.Optional[list[CfnComponentDefComponentdataconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ComponentEventProperty: typing.Optional[list[CfnComponentDefComponenteventpropertyParams]] = pydantic.Field(None, description='')
    ComponentPropertyBindingPropertiesProperty: typing.Optional[list[CfnComponentDefComponentpropertybindingpropertiespropertyParams]] = pydantic.Field(None, description='')
    ComponentPropertyProperty: typing.Optional[list[CfnComponentDefComponentpropertypropertyParams]] = pydantic.Field(None, description='')
    ComponentVariantProperty: typing.Optional[list[CfnComponentDefComponentvariantpropertyParams]] = pydantic.Field(None, description='')
    FormBindingElementProperty: typing.Optional[list[CfnComponentDefFormbindingelementpropertyParams]] = pydantic.Field(None, description='')
    MutationActionSetStateParameterProperty: typing.Optional[list[CfnComponentDefMutationactionsetstateparameterpropertyParams]] = pydantic.Field(None, description='')
    PredicateProperty: typing.Optional[list[CfnComponentDefPredicatepropertyParams]] = pydantic.Field(None, description='')
    SortPropertyProperty: typing.Optional[list[CfnComponentDefSortpropertypropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnComponentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnComponentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnComponentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnComponentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnComponentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnComponentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnComponentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnComponentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnComponentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnComponentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnComponentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnComponentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnComponentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnComponentDefActionparameterspropertyParams(pydantic.BaseModel):
    anchor: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    fields: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    global_: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    id: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model: typing.Optional[str] = pydantic.Field(None, description='')
    state: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_MutationActionSetStateParameterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    target: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    type: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    url: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnComponentDefComponentbindingpropertiesvaluepropertiespropertyParams(pydantic.BaseModel):
    bucket: typing.Optional[str] = pydantic.Field(None, description='')
    default_value: typing.Optional[str] = pydantic.Field(None, description='')
    field: typing.Optional[str] = pydantic.Field(None, description='')
    key: typing.Optional[str] = pydantic.Field(None, description='')
    model: typing.Optional[str] = pydantic.Field(None, description='')
    predicates: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_PredicatePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    user_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentDefComponentbindingpropertiesvaluepropertyParams(pydantic.BaseModel):
    binding_properties: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentBindingPropertiesValuePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_value: typing.Optional[str] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentDefComponentchildpropertyParams(pydantic.BaseModel):
    component_type: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    children: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentChildPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    events: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnComponentDefComponentconditionpropertypropertyParams(pydantic.BaseModel):
    else_: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    field: typing.Optional[str] = pydantic.Field(None, description='')
    operand: typing.Optional[str] = pydantic.Field(None, description='')
    operand_type: typing.Optional[str] = pydantic.Field(None, description='')
    operator: typing.Optional[str] = pydantic.Field(None, description='')
    property: typing.Optional[str] = pydantic.Field(None, description='')
    then: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnComponentDefComponentdataconfigurationpropertyParams(pydantic.BaseModel):
    model: str = pydantic.Field(..., description='')
    identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    predicate: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_PredicatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sort: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_SortPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnComponentDefComponenteventpropertyParams(pydantic.BaseModel):
    action: typing.Optional[str] = pydantic.Field(None, description='')
    parameters: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ActionParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnComponentDefComponentpropertybindingpropertiespropertyParams(pydantic.BaseModel):
    property: str = pydantic.Field(..., description='')
    field: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentDefComponentpropertypropertyParams(pydantic.BaseModel):
    binding_properties: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyBindingPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    bindings: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_FormBindingElementPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    collection_binding_properties: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyBindingPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    component_name: typing.Optional[str] = pydantic.Field(None, description='')
    concat: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    condition: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentConditionPropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    configured: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    default_value: typing.Optional[str] = pydantic.Field(None, description='')
    event: typing.Optional[str] = pydantic.Field(None, description='')
    imported_value: typing.Optional[str] = pydantic.Field(None, description='')
    model: typing.Optional[str] = pydantic.Field(None, description='')
    property: typing.Optional[str] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    user_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentDefComponentvariantpropertyParams(pydantic.BaseModel):
    overrides: typing.Any = pydantic.Field(None, description='')
    variant_values: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ...

class CfnComponentDefFormbindingelementpropertyParams(pydantic.BaseModel):
    element: str = pydantic.Field(..., description='')
    property: str = pydantic.Field(..., description='')
    ...

class CfnComponentDefMutationactionsetstateparameterpropertyParams(pydantic.BaseModel):
    component_name: str = pydantic.Field(..., description='')
    property: str = pydantic.Field(..., description='')
    set: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnComponentDefPredicatepropertyParams(pydantic.BaseModel):
    and_: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_PredicatePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    field: typing.Optional[str] = pydantic.Field(None, description='')
    operand: typing.Optional[str] = pydantic.Field(None, description='')
    operator: typing.Optional[str] = pydantic.Field(None, description='')
    or_: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_PredicatePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnComponentDefSortpropertypropertyParams(pydantic.BaseModel):
    direction: str = pydantic.Field(..., description='')
    field: str = pydantic.Field(..., description='')
    ...

class CfnComponentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnComponentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnComponentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnComponentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnComponentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnComponentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnComponentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnComponentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnComponentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnComponentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnComponentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnComponentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnComponentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnComponentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnForm
class CfnFormDef(BaseCfnResource):
    data_type: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormDataTypeConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of data source to use to create the form.\n')
    fields: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The configuration information for the form's fields.\n")
    form_action_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether to perform a create or update action on the form.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the form.\n')
    schema_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The schema version of the form.\n')
    sectional_elements: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_SectionalElementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The configuration information for the visual helper elements for the form. These elements are not associated with any data.\n')
    style: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormStylePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The configuration for the form's style.\n")
    app_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the Amplify app associated with the form.\n')
    cta: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormCTAPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The ``FormCTA`` object that stores the call to action configuration for the form.\n')
    environment_name: typing.Optional[str] = pydantic.Field(None, description='The name of the backend environment that is a part of the Amplify app.\n')
    label_decorator: typing.Optional[str] = pydantic.Field(None, description='Specifies an icon or decoration to display on the form.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='One or more key-value pairs to use when tagging the form data.')
    _init_params: typing.ClassVar[list[str]] = ['data_type', 'fields', 'form_action_type', 'name', 'schema_version', 'sectional_elements', 'style', 'app_id', 'cta', 'environment_name', 'label_decorator', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['FieldConfigProperty', 'FieldInputConfigProperty', 'FieldPositionProperty', 'FieldValidationConfigurationProperty', 'FileUploaderFieldConfigProperty', 'FormButtonProperty', 'FormCTAProperty', 'FormDataTypeConfigProperty', 'FormInputValuePropertyProperty', 'FormStyleConfigProperty', 'FormStyleProperty', 'SectionalElementProperty', 'ValueMappingProperty', 'ValueMappingsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnForm'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnFormDefConfig] = pydantic.Field(None)


class CfnFormDefConfig(pydantic.BaseModel):
    FieldConfigProperty: typing.Optional[list[CfnFormDefFieldconfigpropertyParams]] = pydantic.Field(None, description='')
    FieldInputConfigProperty: typing.Optional[list[CfnFormDefFieldinputconfigpropertyParams]] = pydantic.Field(None, description='')
    FieldPositionProperty: typing.Optional[list[CfnFormDefFieldpositionpropertyParams]] = pydantic.Field(None, description='')
    FieldValidationConfigurationProperty: typing.Optional[list[CfnFormDefFieldvalidationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    FileUploaderFieldConfigProperty: typing.Optional[list[CfnFormDefFileuploaderfieldconfigpropertyParams]] = pydantic.Field(None, description='')
    FormButtonProperty: typing.Optional[list[CfnFormDefFormbuttonpropertyParams]] = pydantic.Field(None, description='')
    FormCTAProperty: typing.Optional[list[CfnFormDefFormctapropertyParams]] = pydantic.Field(None, description='')
    FormDataTypeConfigProperty: typing.Optional[list[CfnFormDefFormdatatypeconfigpropertyParams]] = pydantic.Field(None, description='')
    FormInputValuePropertyProperty: typing.Optional[list[CfnFormDefForminputvaluepropertypropertyParams]] = pydantic.Field(None, description='')
    FormStyleConfigProperty: typing.Optional[list[CfnFormDefFormstyleconfigpropertyParams]] = pydantic.Field(None, description='')
    FormStyleProperty: typing.Optional[list[CfnFormDefFormstylepropertyParams]] = pydantic.Field(None, description='')
    SectionalElementProperty: typing.Optional[list[CfnFormDefSectionalelementpropertyParams]] = pydantic.Field(None, description='')
    ValueMappingProperty: typing.Optional[list[CfnFormDefValuemappingpropertyParams]] = pydantic.Field(None, description='')
    ValueMappingsProperty: typing.Optional[list[CfnFormDefValuemappingspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnFormDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnFormDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnFormDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnFormDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnFormDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnFormDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnFormDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnFormDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnFormDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnFormDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnFormDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnFormDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnFormDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFormDefFieldconfigpropertyParams(pydantic.BaseModel):
    excluded: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    input_type: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldInputConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    label: typing.Optional[str] = pydantic.Field(None, description='')
    position: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldPositionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    validations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldValidationConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnFormDefFieldinputconfigpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    default_checked: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    default_country_code: typing.Optional[str] = pydantic.Field(None, description='')
    default_value: typing.Optional[str] = pydantic.Field(None, description='')
    descriptive_text: typing.Optional[str] = pydantic.Field(None, description='')
    file_uploader_config: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FileUploaderFieldConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    is_array: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    max_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    placeholder: typing.Optional[str] = pydantic.Field(None, description='')
    read_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    step: typing.Union[int, float, None] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    value_mappings: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_ValueMappingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFormDefFieldpositionpropertyParams(pydantic.BaseModel):
    below: typing.Optional[str] = pydantic.Field(None, description='')
    fixed: typing.Optional[str] = pydantic.Field(None, description='')
    right_of: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFormDefFieldvalidationconfigurationpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    num_values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[int, float]], None] = pydantic.Field(None, description='')
    str_values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    validation_message: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFormDefFileuploaderfieldconfigpropertyParams(pydantic.BaseModel):
    accepted_file_types: typing.Sequence[str] = pydantic.Field(..., description='')
    access_level: str = pydantic.Field(..., description='')
    is_resumable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    max_file_count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    show_thumbnails: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnFormDefFormbuttonpropertyParams(pydantic.BaseModel):
    children: typing.Optional[str] = pydantic.Field(None, description='')
    excluded: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    position: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldPositionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFormDefFormctapropertyParams(pydantic.BaseModel):
    cancel: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    clear: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    position: typing.Optional[str] = pydantic.Field(None, description='')
    submit: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFormDefFormdatatypeconfigpropertyParams(pydantic.BaseModel):
    data_source_type: str = pydantic.Field(..., description='')
    data_type_name: str = pydantic.Field(..., description='')
    ...

class CfnFormDefForminputvaluepropertypropertyParams(pydantic.BaseModel):
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFormDefFormstyleconfigpropertyParams(pydantic.BaseModel):
    token_reference: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFormDefFormstylepropertyParams(pydantic.BaseModel):
    horizontal_gap: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormStyleConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    outer_padding: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormStyleConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    vertical_gap: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormStyleConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFormDefSectionalelementpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    excluded: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    level: typing.Union[int, float, None] = pydantic.Field(None, description='')
    orientation: typing.Optional[str] = pydantic.Field(None, description='')
    position: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldPositionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    text: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFormDefValuemappingpropertyParams(pydantic.BaseModel):
    value: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormInputValuePropertyPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    display_value: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormInputValuePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFormDefValuemappingspropertyParams(pydantic.BaseModel):
    values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_ValueMappingPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnFormDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFormDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFormDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFormDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFormDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFormDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFormDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFormDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFormDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFormDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFormDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnFormDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFormDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFormDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnTheme
class CfnThemeDef(BaseCfnResource):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the theme.\n')
    values: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnTheme_ThemeValuesPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of key-value pairs that defines the properties of the theme.\n')
    app_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID for the Amplify app associated with the theme.\n')
    environment_name: typing.Optional[str] = pydantic.Field(None, description='The name of the backend environment that is a part of the Amplify app.\n')
    overrides: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnTheme_ThemeValuesPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes the properties that can be overriden to customize a theme.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='One or more key-value pairs to use when tagging the theme.')
    _init_params: typing.ClassVar[list[str]] = ['name', 'values', 'app_id', 'environment_name', 'overrides', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ThemeValueProperty', 'ThemeValuesProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnTheme'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnThemeDefConfig] = pydantic.Field(None)


class CfnThemeDefConfig(pydantic.BaseModel):
    ThemeValueProperty: typing.Optional[list[CfnThemeDefThemevaluepropertyParams]] = pydantic.Field(None, description='')
    ThemeValuesProperty: typing.Optional[list[CfnThemeDefThemevaluespropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnThemeDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnThemeDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnThemeDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnThemeDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnThemeDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnThemeDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnThemeDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnThemeDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnThemeDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnThemeDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnThemeDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnThemeDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnThemeDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnThemeDefThemevaluepropertyParams(pydantic.BaseModel):
    children: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnTheme_ThemeValuesPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnThemeDefThemevaluespropertyParams(pydantic.BaseModel):
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnTheme_ThemeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnThemeDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnThemeDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnThemeDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnThemeDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnThemeDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnThemeDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnThemeDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnThemeDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnThemeDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnThemeDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnThemeDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnThemeDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnThemeDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnThemeDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnComponentProps
class CfnComponentPropsDef(BaseCfnProperty):
    binding_properties: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentBindingPropertiesValuePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The information to connect a component's properties to data at runtime. You can't specify ``tags`` as a valid property for ``bindingProperties`` .\n")
    component_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the component. This can be an Amplify custom UI component or another custom component.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the component.\n')
    overrides: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Describes the component's properties that can be overriden in a customized instance of the component. You can't specify ``tags`` as a valid property for ``overrides`` .\n")
    properties: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentPropertyPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="Describes the component's properties. You can't specify ``tags`` as a valid property for ``properties`` .\n")
    variants: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentVariantPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="A list of the component's variants. A variant is a unique style configuration of a main component.\n")
    app_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the Amplify app associated with the component.\n')
    children: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentChildPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of the component's ``ComponentChild`` instances.\n")
    collection_properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentDataConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The data binding configuration for the component's properties. Use this for a collection component. You can't specify ``tags`` as a valid property for ``collectionProperties`` .\n")
    environment_name: typing.Optional[str] = pydantic.Field(None, description='The name of the backend environment that is a part of the Amplify app.\n')
    events: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnComponent_ComponentEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes the events that can be raised on the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.\n')
    schema_version: typing.Optional[str] = pydantic.Field(None, description='The schema version of the component when it was imported.\n')
    source_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the component in its original source system, such as Figma.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='One or more key-value pairs to use when tagging the component.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplifyuibuilder-component.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['binding_properties', 'component_type', 'name', 'overrides', 'properties', 'variants', 'app_id', 'children', 'collection_properties', 'environment_name', 'events', 'schema_version', 'source_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnComponentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnFormProps
class CfnFormPropsDef(BaseCfnProperty):
    data_type: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormDataTypeConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of data source to use to create the form.\n')
    fields: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FieldConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The configuration information for the form's fields.\n")
    form_action_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether to perform a create or update action on the form.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the form.\n')
    schema_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The schema version of the form.\n')
    sectional_elements: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_SectionalElementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The configuration information for the visual helper elements for the form. These elements are not associated with any data.\n')
    style: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormStylePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The configuration for the form's style.\n")
    app_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the Amplify app associated with the form.\n')
    cta: typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnForm_FormCTAPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The ``FormCTA`` object that stores the call to action configuration for the form.\n')
    environment_name: typing.Optional[str] = pydantic.Field(None, description='The name of the backend environment that is a part of the Amplify app.\n')
    label_decorator: typing.Optional[str] = pydantic.Field(None, description='Specifies an icon or decoration to display on the form.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='One or more key-value pairs to use when tagging the form data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplifyuibuilder-form.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    cfn_form_props = amplifyuibuilder.CfnFormProps(\n        data_type=amplifyuibuilder.CfnForm.FormDataTypeConfigProperty(\n            data_source_type="dataSourceType",\n            data_type_name="dataTypeName"\n        ),\n        fields={\n            "fields_key": amplifyuibuilder.CfnForm.FieldConfigProperty(\n                excluded=False,\n                input_type=amplifyuibuilder.CfnForm.FieldInputConfigProperty(\n                    type="type",\n\n                    # the properties below are optional\n                    default_checked=False,\n                    default_country_code="defaultCountryCode",\n                    default_value="defaultValue",\n                    descriptive_text="descriptiveText",\n                    file_uploader_config=amplifyuibuilder.CfnForm.FileUploaderFieldConfigProperty(\n                        accepted_file_types=["acceptedFileTypes"],\n                        access_level="accessLevel",\n\n                        # the properties below are optional\n                        is_resumable=False,\n                        max_file_count=123,\n                        max_size=123,\n                        show_thumbnails=False\n                    ),\n                    is_array=False,\n                    max_value=123,\n                    min_value=123,\n                    name="name",\n                    placeholder="placeholder",\n                    read_only=False,\n                    required=False,\n                    step=123,\n                    value="value",\n                    value_mappings=amplifyuibuilder.CfnForm.ValueMappingsProperty(\n                        values=[amplifyuibuilder.CfnForm.ValueMappingProperty(\n                            value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n                                value="value"\n                            ),\n\n                            # the properties below are optional\n                            display_value=amplifyuibuilder.CfnForm.FormInputValuePropertyProperty(\n                                value="value"\n                            )\n                        )]\n                    )\n                ),\n                label="label",\n                position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n                    below="below",\n                    fixed="fixed",\n                    right_of="rightOf"\n                ),\n                validations=[amplifyuibuilder.CfnForm.FieldValidationConfigurationProperty(\n                    type="type",\n\n                    # the properties below are optional\n                    num_values=[123],\n                    str_values=["strValues"],\n                    validation_message="validationMessage"\n                )]\n            )\n        },\n        form_action_type="formActionType",\n        name="name",\n        schema_version="schemaVersion",\n        sectional_elements={\n            "sectional_elements_key": amplifyuibuilder.CfnForm.SectionalElementProperty(\n                type="type",\n\n                # the properties below are optional\n                excluded=False,\n                level=123,\n                orientation="orientation",\n                position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n                    below="below",\n                    fixed="fixed",\n                    right_of="rightOf"\n                ),\n                text="text"\n            )\n        },\n        style=amplifyuibuilder.CfnForm.FormStyleProperty(\n            horizontal_gap=amplifyuibuilder.CfnForm.FormStyleConfigProperty(\n                token_reference="tokenReference",\n                value="value"\n            ),\n            outer_padding=amplifyuibuilder.CfnForm.FormStyleConfigProperty(\n                token_reference="tokenReference",\n                value="value"\n            ),\n            vertical_gap=amplifyuibuilder.CfnForm.FormStyleConfigProperty(\n                token_reference="tokenReference",\n                value="value"\n            )\n        ),\n\n        # the properties below are optional\n        app_id="appId",\n        cta=amplifyuibuilder.CfnForm.FormCTAProperty(\n            cancel=amplifyuibuilder.CfnForm.FormButtonProperty(\n                children="children",\n                excluded=False,\n                position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n                    below="below",\n                    fixed="fixed",\n                    right_of="rightOf"\n                )\n            ),\n            clear=amplifyuibuilder.CfnForm.FormButtonProperty(\n                children="children",\n                excluded=False,\n                position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n                    below="below",\n                    fixed="fixed",\n                    right_of="rightOf"\n                )\n            ),\n            position="position",\n            submit=amplifyuibuilder.CfnForm.FormButtonProperty(\n                children="children",\n                excluded=False,\n                position=amplifyuibuilder.CfnForm.FieldPositionProperty(\n                    below="below",\n                    fixed="fixed",\n                    right_of="rightOf"\n                )\n            )\n        ),\n        environment_name="environmentName",\n        label_decorator="labelDecorator",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_type', 'fields', 'form_action_type', 'name', 'schema_version', 'sectional_elements', 'style', 'app_id', 'cta', 'environment_name', 'label_decorator', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnFormProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_amplifyuibuilder.CfnThemeProps
class CfnThemePropsDef(BaseCfnProperty):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the theme.\n')
    values: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnTheme_ThemeValuesPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of key-value pairs that defines the properties of the theme.\n')
    app_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID for the Amplify app associated with the theme.\n')
    environment_name: typing.Optional[str] = pydantic.Field(None, description='The name of the backend environment that is a part of the Amplify app.\n')
    overrides: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_amplifyuibuilder.CfnTheme_ThemeValuesPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes the properties that can be overriden to customize a theme.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='One or more key-value pairs to use when tagging the theme.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplifyuibuilder-theme.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_amplifyuibuilder as amplifyuibuilder\n\n    # theme_values_property_: amplifyuibuilder.CfnTheme.ThemeValuesProperty\n\n    cfn_theme_props = amplifyuibuilder.CfnThemeProps(\n        name="name",\n        values=[amplifyuibuilder.CfnTheme.ThemeValuesProperty(\n            key="key",\n            value=amplifyuibuilder.CfnTheme.ThemeValueProperty(\n                children=[theme_values_property_],\n                value="value"\n            )\n        )],\n\n        # the properties below are optional\n        app_id="appId",\n        environment_name="environmentName",\n        overrides=[amplifyuibuilder.CfnTheme.ThemeValuesProperty(\n            key="key",\n            value=amplifyuibuilder.CfnTheme.ThemeValueProperty(\n                children=[theme_values_property_],\n                value="value"\n            )\n        )],\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'values', 'app_id', 'environment_name', 'overrides', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_amplifyuibuilder.CfnThemeProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnComponent_ActionParametersProperty: typing.Optional[dict[str, CfnComponent_ActionParametersPropertyDef]] = pydantic.Field(None)
    CfnComponent_ComponentBindingPropertiesValuePropertiesProperty: typing.Optional[dict[str, CfnComponent_ComponentBindingPropertiesValuePropertiesPropertyDef]] = pydantic.Field(None)
    CfnComponent_ComponentBindingPropertiesValueProperty: typing.Optional[dict[str, CfnComponent_ComponentBindingPropertiesValuePropertyDef]] = pydantic.Field(None)
    CfnComponent_ComponentChildProperty: typing.Optional[dict[str, CfnComponent_ComponentChildPropertyDef]] = pydantic.Field(None)
    CfnComponent_ComponentConditionPropertyProperty: typing.Optional[dict[str, CfnComponent_ComponentConditionPropertyPropertyDef]] = pydantic.Field(None)
    CfnComponent_ComponentDataConfigurationProperty: typing.Optional[dict[str, CfnComponent_ComponentDataConfigurationPropertyDef]] = pydantic.Field(None)
    CfnComponent_ComponentEventProperty: typing.Optional[dict[str, CfnComponent_ComponentEventPropertyDef]] = pydantic.Field(None)
    CfnComponent_ComponentPropertyBindingPropertiesProperty: typing.Optional[dict[str, CfnComponent_ComponentPropertyBindingPropertiesPropertyDef]] = pydantic.Field(None)
    CfnComponent_ComponentPropertyProperty: typing.Optional[dict[str, CfnComponent_ComponentPropertyPropertyDef]] = pydantic.Field(None)
    CfnComponent_ComponentVariantProperty: typing.Optional[dict[str, CfnComponent_ComponentVariantPropertyDef]] = pydantic.Field(None)
    CfnComponent_FormBindingElementProperty: typing.Optional[dict[str, CfnComponent_FormBindingElementPropertyDef]] = pydantic.Field(None)
    CfnComponent_MutationActionSetStateParameterProperty: typing.Optional[dict[str, CfnComponent_MutationActionSetStateParameterPropertyDef]] = pydantic.Field(None)
    CfnComponent_PredicateProperty: typing.Optional[dict[str, CfnComponent_PredicatePropertyDef]] = pydantic.Field(None)
    CfnComponent_SortPropertyProperty: typing.Optional[dict[str, CfnComponent_SortPropertyPropertyDef]] = pydantic.Field(None)
    CfnForm_FieldConfigProperty: typing.Optional[dict[str, CfnForm_FieldConfigPropertyDef]] = pydantic.Field(None)
    CfnForm_FieldInputConfigProperty: typing.Optional[dict[str, CfnForm_FieldInputConfigPropertyDef]] = pydantic.Field(None)
    CfnForm_FieldPositionProperty: typing.Optional[dict[str, CfnForm_FieldPositionPropertyDef]] = pydantic.Field(None)
    CfnForm_FieldValidationConfigurationProperty: typing.Optional[dict[str, CfnForm_FieldValidationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnForm_FileUploaderFieldConfigProperty: typing.Optional[dict[str, CfnForm_FileUploaderFieldConfigPropertyDef]] = pydantic.Field(None)
    CfnForm_FormButtonProperty: typing.Optional[dict[str, CfnForm_FormButtonPropertyDef]] = pydantic.Field(None)
    CfnForm_FormCTAProperty: typing.Optional[dict[str, CfnForm_FormCTAPropertyDef]] = pydantic.Field(None)
    CfnForm_FormDataTypeConfigProperty: typing.Optional[dict[str, CfnForm_FormDataTypeConfigPropertyDef]] = pydantic.Field(None)
    CfnForm_FormInputValuePropertyProperty: typing.Optional[dict[str, CfnForm_FormInputValuePropertyPropertyDef]] = pydantic.Field(None)
    CfnForm_FormStyleConfigProperty: typing.Optional[dict[str, CfnForm_FormStyleConfigPropertyDef]] = pydantic.Field(None)
    CfnForm_FormStyleProperty: typing.Optional[dict[str, CfnForm_FormStylePropertyDef]] = pydantic.Field(None)
    CfnForm_SectionalElementProperty: typing.Optional[dict[str, CfnForm_SectionalElementPropertyDef]] = pydantic.Field(None)
    CfnForm_ValueMappingProperty: typing.Optional[dict[str, CfnForm_ValueMappingPropertyDef]] = pydantic.Field(None)
    CfnForm_ValueMappingsProperty: typing.Optional[dict[str, CfnForm_ValueMappingsPropertyDef]] = pydantic.Field(None)
    CfnTheme_ThemeValueProperty: typing.Optional[dict[str, CfnTheme_ThemeValuePropertyDef]] = pydantic.Field(None)
    CfnTheme_ThemeValuesProperty: typing.Optional[dict[str, CfnTheme_ThemeValuesPropertyDef]] = pydantic.Field(None)
    CfnComponent: typing.Optional[dict[str, CfnComponentDef]] = pydantic.Field(None)
    CfnForm: typing.Optional[dict[str, CfnFormDef]] = pydantic.Field(None)
    CfnTheme: typing.Optional[dict[str, CfnThemeDef]] = pydantic.Field(None)
    CfnComponentProps: typing.Optional[dict[str, CfnComponentPropsDef]] = pydantic.Field(None)
    CfnFormProps: typing.Optional[dict[str, CfnFormPropsDef]] = pydantic.Field(None)
    CfnThemeProps: typing.Optional[dict[str, CfnThemePropsDef]] = pydantic.Field(None)
    ...
