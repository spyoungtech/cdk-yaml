from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_qbusiness.CfnApplication.AttachmentsConfigurationProperty
class CfnApplication_AttachmentsConfigurationPropertyDef(BaseStruct):
    attachments_control_mode: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Status information about whether file upload functionality is activated or deactivated for your end user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-application-attachmentsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    attachments_configuration_property = qbusiness.CfnApplication.AttachmentsConfigurationProperty(\n        attachments_control_mode="attachmentsControlMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attachments_control_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnApplication.AttachmentsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnApplication.EncryptionConfigurationProperty
class CfnApplication_EncryptionConfigurationPropertyDef(BaseStruct):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The identifier of the AWS KMS key. Amazon Q Business doesn\'t support asymmetric keys.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-application-encryptionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    encryption_configuration_property = qbusiness.CfnApplication.EncryptionConfigurationProperty(\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnApplication.EncryptionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnDataSource.DataSourceVpcConfigurationProperty
class CfnDataSource_DataSourceVpcConfigurationPropertyDef(BaseStruct):
    security_group_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of identifiers of security groups within your Amazon VPC. The security groups should enable Amazon Q Business to connect to the data source.\n')
    subnet_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of identifiers for subnets within your Amazon VPC. The subnets should be able to connect to each other in the VPC, and they should have outgoing access to the Internet through a NAT device.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-datasource-datasourcevpcconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    data_source_vpc_configuration_property = qbusiness.CfnDataSource.DataSourceVpcConfigurationProperty(\n        security_group_ids=["securityGroupIds"],\n        subnet_ids=["subnetIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnDataSource.DataSourceVpcConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnDataSource.DocumentAttributeConditionProperty
class CfnDataSource_DocumentAttributeConditionPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The identifier of the document attribute used for the condition. For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents. Amazon Q Business currently doesn't support ``_document_body`` as an attribute key used for the condition.\n")
    operator: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The identifier of the document attribute used for the condition. For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents. Amazon Q Business currently does not support ``_document_body`` as an attribute key used for the condition.\n")
    value: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value of a document attribute. You can only provide one value for a document attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-datasource-documentattributecondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    document_attribute_condition_property = qbusiness.CfnDataSource.DocumentAttributeConditionProperty(\n        key="key",\n        operator="operator",\n\n        # the properties below are optional\n        value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n            date_value="dateValue",\n            long_value=123,\n            string_list_value=["stringListValue"],\n            string_value="stringValue"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'operator', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnDataSource.DocumentAttributeConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnDataSource.DocumentAttributeTargetProperty
class CfnDataSource_DocumentAttributeTargetPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.\n")
    attribute_value_operator: typing.Optional[str] = pydantic.Field(None, description='``TRUE`` to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to ``TRUE`` .\n')
    value: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value of a document attribute. You can only provide one value for a document attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-datasource-documentattributetarget.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    document_attribute_target_property = qbusiness.CfnDataSource.DocumentAttributeTargetProperty(\n        key="key",\n\n        # the properties below are optional\n        attribute_value_operator="attributeValueOperator",\n        value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n            date_value="dateValue",\n            long_value=123,\n            string_list_value=["stringListValue"],\n            string_value="stringValue"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'attribute_value_operator', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnDataSource.DocumentAttributeTargetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnDataSource.DocumentAttributeValueProperty
class CfnDataSource_DocumentAttributeValuePropertyDef(BaseStruct):
    date_value: typing.Optional[str] = pydantic.Field(None, description="A date expressed as an ISO 8601 string. It's important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.\n")
    long_value: typing.Union[int, float, None] = pydantic.Field(None, description='A long integer value.\n')
    string_list_value: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of strings.\n')
    string_value: typing.Optional[str] = pydantic.Field(None, description='A string.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-datasource-documentattributevalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    document_attribute_value_property = qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n        date_value="dateValue",\n        long_value=123,\n        string_list_value=["stringListValue"],\n        string_value="stringValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['date_value', 'long_value', 'string_list_value', 'string_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnDataSource.DocumentAttributeValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnDataSource.DocumentEnrichmentConfigurationProperty
class CfnDataSource_DocumentEnrichmentConfigurationPropertyDef(BaseStruct):
    inline_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_InlineDocumentEnrichmentConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Configuration information to alter document attributes or metadata fields and content when ingesting documents into Amazon Q Business.\n')
    post_extraction_hook_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_HookConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for invoking a Lambda function in AWS Lambda on the structured documents with their metadata and text extracted. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see `Using Lambda functions <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/cde-lambda-operations.html>`_ .\n')
    pre_extraction_hook_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_HookConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for invoking a Lambda function in AWS Lambda on the original or raw documents before extracting their metadata and text. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see `Using Lambda functions <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/cde-lambda-operations.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-datasource-documentenrichmentconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    document_enrichment_configuration_property = qbusiness.CfnDataSource.DocumentEnrichmentConfigurationProperty(\n        inline_configurations=[qbusiness.CfnDataSource.InlineDocumentEnrichmentConfigurationProperty(\n            condition=qbusiness.CfnDataSource.DocumentAttributeConditionProperty(\n                key="key",\n                operator="operator",\n\n                # the properties below are optional\n                value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                    date_value="dateValue",\n                    long_value=123,\n                    string_list_value=["stringListValue"],\n                    string_value="stringValue"\n                )\n            ),\n            document_content_operator="documentContentOperator",\n            target=qbusiness.CfnDataSource.DocumentAttributeTargetProperty(\n                key="key",\n\n                # the properties below are optional\n                attribute_value_operator="attributeValueOperator",\n                value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                    date_value="dateValue",\n                    long_value=123,\n                    string_list_value=["stringListValue"],\n                    string_value="stringValue"\n                )\n            )\n        )],\n        post_extraction_hook_configuration=qbusiness.CfnDataSource.HookConfigurationProperty(\n            invocation_condition=qbusiness.CfnDataSource.DocumentAttributeConditionProperty(\n                key="key",\n                operator="operator",\n\n                # the properties below are optional\n                value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                    date_value="dateValue",\n                    long_value=123,\n                    string_list_value=["stringListValue"],\n                    string_value="stringValue"\n                )\n            ),\n            lambda_arn="lambdaArn",\n            role_arn="roleArn",\n            s3_bucket_name="s3BucketName"\n        ),\n        pre_extraction_hook_configuration=qbusiness.CfnDataSource.HookConfigurationProperty(\n            invocation_condition=qbusiness.CfnDataSource.DocumentAttributeConditionProperty(\n                key="key",\n                operator="operator",\n\n                # the properties below are optional\n                value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                    date_value="dateValue",\n                    long_value=123,\n                    string_list_value=["stringListValue"],\n                    string_value="stringValue"\n                )\n            ),\n            lambda_arn="lambdaArn",\n            role_arn="roleArn",\n            s3_bucket_name="s3BucketName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['inline_configurations', 'post_extraction_hook_configuration', 'pre_extraction_hook_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnDataSource.DocumentEnrichmentConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnDataSource.HookConfigurationProperty
class CfnDataSource_HookConfigurationPropertyDef(BaseStruct):
    invocation_condition: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The condition used for when a Lambda function should be invoked. For example, you can specify a condition that if there are empty date-time values, then Amazon Q Business should invoke a function that inserts the current date-time.\n')
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see `IAM roles for Custom Document Enrichment (CDE) <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/iam-roles.html#cde-iam-role>`_ .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of a role with permission to run ``PreExtractionHookConfiguration`` and ``PostExtractionHookConfiguration`` for altering document metadata and content during the document ingestion process.\n')
    s3_bucket_name: typing.Optional[str] = pydantic.Field(None, description='Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see `Data contracts for Lambda functions <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/cde-lambda-operations.html#cde-lambda-operations-data-contracts>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-datasource-hookconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    hook_configuration_property = qbusiness.CfnDataSource.HookConfigurationProperty(\n        invocation_condition=qbusiness.CfnDataSource.DocumentAttributeConditionProperty(\n            key="key",\n            operator="operator",\n\n            # the properties below are optional\n            value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                date_value="dateValue",\n                long_value=123,\n                string_list_value=["stringListValue"],\n                string_value="stringValue"\n            )\n        ),\n        lambda_arn="lambdaArn",\n        role_arn="roleArn",\n        s3_bucket_name="s3BucketName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['invocation_condition', 'lambda_arn', 'role_arn', 's3_bucket_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnDataSource.HookConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnDataSource.InlineDocumentEnrichmentConfigurationProperty
class CfnDataSource_InlineDocumentEnrichmentConfigurationPropertyDef(BaseStruct):
    condition: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of the condition used for the target document attribute or metadata field when ingesting documents into Amazon Q Business .\n')
    document_content_operator: typing.Optional[str] = pydantic.Field(None, description='``TRUE`` to delete content if the condition used for the target attribute is met.\n')
    target: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeTargetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of the target document attribute or metadata field when ingesting documents into Amazon Q Business . You can also include a value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-datasource-inlinedocumentenrichmentconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    inline_document_enrichment_configuration_property = qbusiness.CfnDataSource.InlineDocumentEnrichmentConfigurationProperty(\n        condition=qbusiness.CfnDataSource.DocumentAttributeConditionProperty(\n            key="key",\n            operator="operator",\n\n            # the properties below are optional\n            value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                date_value="dateValue",\n                long_value=123,\n                string_list_value=["stringListValue"],\n                string_value="stringValue"\n            )\n        ),\n        document_content_operator="documentContentOperator",\n        target=qbusiness.CfnDataSource.DocumentAttributeTargetProperty(\n            key="key",\n\n            # the properties below are optional\n            attribute_value_operator="attributeValueOperator",\n            value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                date_value="dateValue",\n                long_value=123,\n                string_list_value=["stringListValue"],\n                string_value="stringValue"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['condition', 'document_content_operator', 'target']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnDataSource.InlineDocumentEnrichmentConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnIndex.DocumentAttributeConfigurationProperty
class CfnIndex_DocumentAttributeConfigurationPropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the document attribute.\n')
    search: typing.Optional[str] = pydantic.Field(None, description='Information about whether the document attribute can be used by an end user to search for information on their web experience.\n')
    type: typing.Optional[str] = pydantic.Field(None, description='The type of document attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-index-documentattributeconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    document_attribute_configuration_property = qbusiness.CfnIndex.DocumentAttributeConfigurationProperty(\n        name="name",\n        search="search",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'search', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnIndex.DocumentAttributeConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnIndex.IndexCapacityConfigurationProperty
class CfnIndex_IndexCapacityConfigurationPropertyDef(BaseStruct):
    units: typing.Union[int, float, None] = pydantic.Field(None, description='The number of storage units configured for an Amazon Q Business index.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-index-indexcapacityconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    index_capacity_configuration_property = qbusiness.CfnIndex.IndexCapacityConfigurationProperty(\n        units=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['units']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnIndex.IndexCapacityConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnIndex.IndexStatisticsProperty
class CfnIndex_IndexStatisticsPropertyDef(BaseStruct):
    text_document_statistics: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnIndex_TextDocumentStatisticsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The number of documents indexed.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-index-indexstatistics.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    index_statistics_property = qbusiness.CfnIndex.IndexStatisticsProperty(\n        text_document_statistics=qbusiness.CfnIndex.TextDocumentStatisticsProperty(\n            indexed_text_bytes=123,\n            indexed_text_document_count=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['text_document_statistics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnIndex.IndexStatisticsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnIndex.TextDocumentStatisticsProperty
class CfnIndex_TextDocumentStatisticsPropertyDef(BaseStruct):
    indexed_text_bytes: typing.Union[int, float, None] = pydantic.Field(None, description='The total size, in bytes, of the indexed documents.\n')
    indexed_text_document_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of text documents indexed.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-index-textdocumentstatistics.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    text_document_statistics_property = qbusiness.CfnIndex.TextDocumentStatisticsProperty(\n        indexed_text_bytes=123,\n        indexed_text_document_count=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['indexed_text_bytes', 'indexed_text_document_count']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnIndex.TextDocumentStatisticsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnPlugin.APISchemaProperty
class CfnPlugin_APISchemaPropertyDef(BaseStruct):
    payload: typing.Optional[str] = pydantic.Field(None, description='The JSON or YAML-formatted payload defining the OpenAPI schema for a custom plugin.\n')
    s3: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_S3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains details about the S3 object containing the OpenAPI schema for a custom plugin. The schema could be in either JSON or YAML format.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-plugin-apischema.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    a_pISchema_property = qbusiness.CfnPlugin.APISchemaProperty(\n        payload="payload",\n        s3=qbusiness.CfnPlugin.S3Property(\n            bucket="bucket",\n            key="key"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['payload', 's3']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnPlugin.APISchemaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnPlugin.BasicAuthConfigurationProperty
class CfnPlugin_BasicAuthConfigurationPropertyDef(BaseStruct):
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.\n')
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Secrets Manager secret that stores the basic authentication credentials used for plugin configuration..\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-plugin-basicauthconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    basic_auth_configuration_property = qbusiness.CfnPlugin.BasicAuthConfigurationProperty(\n        role_arn="roleArn",\n        secret_arn="secretArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role_arn', 'secret_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnPlugin.BasicAuthConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnPlugin.CustomPluginConfigurationProperty
class CfnPlugin_CustomPluginConfigurationPropertyDef(BaseStruct):
    api_schema: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_APISchemaPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema.\n')
    api_schema_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of OpenAPI schema to use.\n')
    description: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A description for your custom plugin configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-plugin-custompluginconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    custom_plugin_configuration_property = qbusiness.CfnPlugin.CustomPluginConfigurationProperty(\n        api_schema=qbusiness.CfnPlugin.APISchemaProperty(\n            payload="payload",\n            s3=qbusiness.CfnPlugin.S3Property(\n                bucket="bucket",\n                key="key"\n            )\n        ),\n        api_schema_type="apiSchemaType",\n        description="description"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['api_schema', 'api_schema_type', 'description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnPlugin.CustomPluginConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnPlugin.OAuth2ClientCredentialConfigurationProperty
class CfnPlugin_OAuth2ClientCredentialConfigurationPropertyDef(BaseStruct):
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of an IAM role used by Amazon Q Business to access the OAuth 2.0 authentication credentials stored in a Secrets Manager secret.\n')
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Secrets Manager secret that stores the OAuth 2.0 credentials/token used for plugin configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-plugin-oauth2clientcredentialconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    o_auth2_client_credential_configuration_property = qbusiness.CfnPlugin.OAuth2ClientCredentialConfigurationProperty(\n        role_arn="roleArn",\n        secret_arn="secretArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role_arn', 'secret_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnPlugin.OAuth2ClientCredentialConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnPlugin.PluginAuthConfigurationProperty
class CfnPlugin_PluginAuthConfigurationPropertyDef(BaseStruct):
    basic_auth_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_BasicAuthConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the basic authentication credentials used to configure a plugin.\n')
    no_auth_configuration: typing.Any = pydantic.Field(None, description='Information about invoking a custom plugin without any authentication.\n')
    o_auth2_client_credential_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_OAuth2ClientCredentialConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the OAuth 2.0 authentication credential/token used to configure a plugin.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-plugin-pluginauthconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    # no_auth_configuration: Any\n\n    plugin_auth_configuration_property = qbusiness.CfnPlugin.PluginAuthConfigurationProperty(\n        basic_auth_configuration=qbusiness.CfnPlugin.BasicAuthConfigurationProperty(\n            role_arn="roleArn",\n            secret_arn="secretArn"\n        ),\n        no_auth_configuration=no_auth_configuration,\n        o_auth2_client_credential_configuration=qbusiness.CfnPlugin.OAuth2ClientCredentialConfigurationProperty(\n            role_arn="roleArn",\n            secret_arn="secretArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['basic_auth_configuration', 'no_auth_configuration', 'o_auth2_client_credential_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnPlugin.PluginAuthConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnPlugin.S3Property
class CfnPlugin_S3PropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the S3 bucket that contains the file.\n')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the file.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-plugin-s3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    s3_property = qbusiness.CfnPlugin.S3Property(\n        bucket="bucket",\n        key="key"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnPlugin.S3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnRetriever.KendraIndexConfigurationProperty
class CfnRetriever_KendraIndexConfigurationPropertyDef(BaseStruct):
    index_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Kendra index.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-retriever-kendraindexconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    kendra_index_configuration_property = qbusiness.CfnRetriever.KendraIndexConfigurationProperty(\n        index_id="indexId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['index_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnRetriever.KendraIndexConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnRetriever.NativeIndexConfigurationProperty
class CfnRetriever_NativeIndexConfigurationPropertyDef(BaseStruct):
    index_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier for the Amazon Q Business index.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-retriever-nativeindexconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    native_index_configuration_property = qbusiness.CfnRetriever.NativeIndexConfigurationProperty(\n        index_id="indexId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['index_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnRetriever.NativeIndexConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnRetriever.RetrieverConfigurationProperty
class CfnRetriever_RetrieverConfigurationPropertyDef(BaseStruct):
    kendra_index_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnRetriever_KendraIndexConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information on how the Amazon Kendra index used as a retriever for your Amazon Q Business application is configured.\n')
    native_index_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnRetriever_NativeIndexConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information on how a Amazon Q Business index used as a retriever for your Amazon Q Business application is configured.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-qbusiness-retriever-retrieverconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    retriever_configuration_property = qbusiness.CfnRetriever.RetrieverConfigurationProperty(\n        kendra_index_configuration=qbusiness.CfnRetriever.KendraIndexConfigurationProperty(\n            index_id="indexId"\n        ),\n        native_index_configuration=qbusiness.CfnRetriever.NativeIndexConfigurationProperty(\n            index_id="indexId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kendra_index_configuration', 'native_index_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnRetriever.RetrieverConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnApplication
class CfnApplicationDef(BaseCfnResource):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon Q Business application.\n')
    attachments_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnApplication_AttachmentsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for the file upload during chat feature.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the Amazon Q Business application.\n')
    encryption_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnApplication_EncryptionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Provides the identifier of the AWS KMS key used to encrypt data indexed by Amazon Q Business. Amazon Q Business doesn't support asymmetric keys.\n")
    identity_center_instance_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM Identity Center instance you are either creating for—or connecting to—your Amazon Q Business application. *Required* : ``Yes``\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an IAM role with permissions to access your Amazon CloudWatch logs and metrics.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize your Amazon Q Business application. You can also use tags to help control access to the application. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'attachments_configuration', 'description', 'encryption_configuration', 'identity_center_instance_arn', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AttachmentsConfigurationProperty', 'EncryptionConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnApplication'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_qbusiness.CfnApplicationDefConfig] = pydantic.Field(None)


class CfnApplicationDefConfig(pydantic.BaseModel):
    AttachmentsConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefAttachmentsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    EncryptionConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefEncryptionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_qbusiness.CfnApplicationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnApplicationDefAttachmentsconfigurationpropertyParams(pydantic.BaseModel):
    attachments_control_mode: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefEncryptionconfigurationpropertyParams(pydantic.BaseModel):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApplicationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApplicationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApplicationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApplicationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApplicationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApplicationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApplicationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnApplicationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApplicationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_qbusiness.CfnDataSource
class CfnDataSourceDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Q Business application the data source will be attached to.\n')
    configuration: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Configuration information to connect to your data source repository. For configuration templates for your specific data source, see `Supported connectors <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connectors-list.html>`_ .\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon Q Business data source.\n')
    index_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the index the data source is attached to.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the data source connector.\n')
    document_enrichment_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentEnrichmentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information for altering document metadata and content during the document ingestion process. For more information, see `Custom document enrichment <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html>`_ .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.\n')
    sync_schedule: typing.Optional[str] = pydantic.Field(None, description="Sets the frequency for Amazon Q Business to check the documents in your data source repository and update your index. If you don't set a schedule, Amazon Q Business won't periodically update the index. Specify a ``cron-`` format schedule string or an empty string to indicate that the index is updated on demand. You can't specify the ``Schedule`` parameter when the ``Type`` parameter is set to ``CUSTOM`` . If you do, you receive a ``ValidationException`` exception.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize the data source connector. You can also use tags to help control access to the data source connector. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -\n')
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DataSourceVpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for an Amazon VPC (Virtual Private Cloud) to connect to your data source. For more information, see `Using Amazon VPC with Amazon Q Business connectors <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connector-vpc.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'configuration', 'display_name', 'index_id', 'description', 'document_enrichment_configuration', 'role_arn', 'sync_schedule', 'tags', 'vpc_configuration']
    _method_names: typing.ClassVar[list[str]] = ['DataSourceVpcConfigurationProperty', 'DocumentAttributeConditionProperty', 'DocumentAttributeTargetProperty', 'DocumentAttributeValueProperty', 'DocumentEnrichmentConfigurationProperty', 'HookConfigurationProperty', 'InlineDocumentEnrichmentConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnDataSource'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_qbusiness.CfnDataSourceDefConfig] = pydantic.Field(None)


class CfnDataSourceDefConfig(pydantic.BaseModel):
    DataSourceVpcConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefDatasourcevpcconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DocumentAttributeConditionProperty: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefDocumentattributeconditionpropertyParams]] = pydantic.Field(None, description='')
    DocumentAttributeTargetProperty: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefDocumentattributetargetpropertyParams]] = pydantic.Field(None, description='')
    DocumentAttributeValueProperty: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefDocumentattributevaluepropertyParams]] = pydantic.Field(None, description='')
    DocumentEnrichmentConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefDocumentenrichmentconfigurationpropertyParams]] = pydantic.Field(None, description='')
    HookConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefHookconfigurationpropertyParams]] = pydantic.Field(None, description='')
    InlineDocumentEnrichmentConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefInlinedocumentenrichmentconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_qbusiness.CfnDataSourceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDataSourceDefDatasourcevpcconfigurationpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefDocumentattributeconditionpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    operator: str = pydantic.Field(..., description='')
    value: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDocumentattributetargetpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    attribute_value_operator: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDocumentattributevaluepropertyParams(pydantic.BaseModel):
    date_value: typing.Optional[str] = pydantic.Field(None, description='')
    long_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    string_list_value: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    string_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDocumentenrichmentconfigurationpropertyParams(pydantic.BaseModel):
    inline_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_InlineDocumentEnrichmentConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    post_extraction_hook_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_HookConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    pre_extraction_hook_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_HookConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefHookconfigurationpropertyParams(pydantic.BaseModel):
    invocation_condition: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='')
    s3_bucket_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefInlinedocumentenrichmentconfigurationpropertyParams(pydantic.BaseModel):
    condition: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    document_content_operator: typing.Optional[str] = pydantic.Field(None, description='')
    target: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentAttributeTargetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDataSourceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataSourceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDataSourceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataSourceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDataSourceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDataSourceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDataSourceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDataSourceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDataSourceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataSourceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDataSourceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDataSourceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataSourceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_qbusiness.CfnIndex
class CfnIndexDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Q Business application using the index.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index.\n')
    capacity_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnIndex_IndexCapacityConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The capacity units you want to provision for your index. You can add and remove capacity to fit your usage needs.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the Amazon Q Business index.\n')
    document_attribute_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnIndex_DocumentAttributeConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Configuration information for document attributes. Document attributes are metadata or fields associated with your documents. For example, the company department name associated with each document. For more information, see `Understanding document attributes <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/doc-attributes.html>`_ .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize the index. You can also use tags to help control access to the index. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -\n')
    type: typing.Optional[str] = pydantic.Field(None, description="The index type that's suitable for your needs. For more information on what's included in each type of index, see `Amazon Q Business tiers <https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/tiers.html#index-tiers>`_ .")
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'display_name', 'capacity_configuration', 'description', 'document_attribute_configurations', 'tags', 'type']
    _method_names: typing.ClassVar[list[str]] = ['DocumentAttributeConfigurationProperty', 'IndexCapacityConfigurationProperty', 'IndexStatisticsProperty', 'TextDocumentStatisticsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnIndex'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_qbusiness.CfnIndexDefConfig] = pydantic.Field(None)


class CfnIndexDefConfig(pydantic.BaseModel):
    DocumentAttributeConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnIndexDefDocumentattributeconfigurationpropertyParams]] = pydantic.Field(None, description='')
    IndexCapacityConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnIndexDefIndexcapacityconfigurationpropertyParams]] = pydantic.Field(None, description='')
    IndexStatisticsProperty: typing.Optional[list[models.aws_qbusiness.CfnIndexDefIndexstatisticspropertyParams]] = pydantic.Field(None, description='')
    TextDocumentStatisticsProperty: typing.Optional[list[models.aws_qbusiness.CfnIndexDefTextdocumentstatisticspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnIndexDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_qbusiness.CfnIndexDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_qbusiness.CfnIndexDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_qbusiness.CfnIndexDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_qbusiness.CfnIndexDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnIndexDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_qbusiness.CfnIndexDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_qbusiness.CfnIndexDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_qbusiness.CfnIndexDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_qbusiness.CfnIndexDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_qbusiness.CfnIndexDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_qbusiness.CfnIndexDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_qbusiness.CfnIndexDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_index_statistics_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnIndexDefDocumentattributeconfigurationpropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    search: typing.Optional[str] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnIndexDefIndexcapacityconfigurationpropertyParams(pydantic.BaseModel):
    units: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnIndexDefIndexstatisticspropertyParams(pydantic.BaseModel):
    text_document_statistics: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnIndex_TextDocumentStatisticsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnIndexDefTextdocumentstatisticspropertyParams(pydantic.BaseModel):
    indexed_text_bytes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    indexed_text_document_count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnIndexDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnIndexDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIndexDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnIndexDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIndexDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnIndexDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnIndexDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnIndexDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnIndexDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnIndexDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIndexDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnIndexDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnIndexDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIndexDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_qbusiness.CfnPlugin
class CfnPluginDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the application that will contain the plugin.\n')
    auth_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_PluginAuthConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Authentication configuration information for an Amazon Q Business plugin.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the plugin.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the plugin.\n')
    custom_plugin_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_CustomPluginConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information required to create a custom plugin.\n')
    server_url: typing.Optional[str] = pydantic.Field(None, description='The plugin server URL used for configuration.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The current status of the plugin.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize the data source connector. You can also use tags to help control access to the data source connector. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'auth_configuration', 'display_name', 'type', 'custom_plugin_configuration', 'server_url', 'state', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['APISchemaProperty', 'BasicAuthConfigurationProperty', 'CustomPluginConfigurationProperty', 'OAuth2ClientCredentialConfigurationProperty', 'PluginAuthConfigurationProperty', 'S3Property', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnPlugin'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_qbusiness.CfnPluginDefConfig] = pydantic.Field(None)


class CfnPluginDefConfig(pydantic.BaseModel):
    APISchemaProperty: typing.Optional[list[models.aws_qbusiness.CfnPluginDefApischemapropertyParams]] = pydantic.Field(None, description='')
    BasicAuthConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnPluginDefBasicauthconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CustomPluginConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnPluginDefCustompluginconfigurationpropertyParams]] = pydantic.Field(None, description='')
    OAuth2ClientCredentialConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnPluginDefOauth2ClientcredentialconfigurationpropertyParams]] = pydantic.Field(None, description='')
    PluginAuthConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnPluginDefPluginauthconfigurationpropertyParams]] = pydantic.Field(None, description='')
    S3Property: typing.Optional[list[models.aws_qbusiness.CfnPluginDefS3PropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnPluginDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_qbusiness.CfnPluginDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_qbusiness.CfnPluginDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_qbusiness.CfnPluginDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_qbusiness.CfnPluginDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnPluginDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_qbusiness.CfnPluginDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_qbusiness.CfnPluginDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_qbusiness.CfnPluginDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_qbusiness.CfnPluginDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_qbusiness.CfnPluginDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_qbusiness.CfnPluginDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_qbusiness.CfnPluginDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPluginDefApischemapropertyParams(pydantic.BaseModel):
    payload: typing.Optional[str] = pydantic.Field(None, description='')
    s3: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_S3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPluginDefBasicauthconfigurationpropertyParams(pydantic.BaseModel):
    role_arn: str = pydantic.Field(..., description='')
    secret_arn: str = pydantic.Field(..., description='')
    ...

class CfnPluginDefCustompluginconfigurationpropertyParams(pydantic.BaseModel):
    api_schema: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_APISchemaPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    api_schema_type: str = pydantic.Field(..., description='')
    description: str = pydantic.Field(..., description='')
    ...

class CfnPluginDefOauth2ClientcredentialconfigurationpropertyParams(pydantic.BaseModel):
    role_arn: str = pydantic.Field(..., description='')
    secret_arn: str = pydantic.Field(..., description='')
    ...

class CfnPluginDefPluginauthconfigurationpropertyParams(pydantic.BaseModel):
    basic_auth_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_BasicAuthConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    no_auth_configuration: typing.Any = pydantic.Field(None, description='')
    o_auth2_client_credential_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_OAuth2ClientCredentialConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPluginDefS3PropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    ...

class CfnPluginDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPluginDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPluginDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPluginDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPluginDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPluginDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPluginDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPluginDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPluginDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPluginDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPluginDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPluginDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPluginDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPluginDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_qbusiness.CfnRetriever
class CfnRetrieverDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Q Business application using the retriever.\n')
    configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_qbusiness.CfnRetriever_RetrieverConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Provides information on how the retriever used for your Amazon Q Business application is configured.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of your retriever.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of your retriever.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'configuration', 'display_name', 'type', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['KendraIndexConfigurationProperty', 'NativeIndexConfigurationProperty', 'RetrieverConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnRetriever'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_qbusiness.CfnRetrieverDefConfig] = pydantic.Field(None)


class CfnRetrieverDefConfig(pydantic.BaseModel):
    KendraIndexConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefKendraindexconfigurationpropertyParams]] = pydantic.Field(None, description='')
    NativeIndexConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefNativeindexconfigurationpropertyParams]] = pydantic.Field(None, description='')
    RetrieverConfigurationProperty: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefRetrieverconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_qbusiness.CfnRetrieverDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnRetrieverDefKendraindexconfigurationpropertyParams(pydantic.BaseModel):
    index_id: str = pydantic.Field(..., description='')
    ...

class CfnRetrieverDefNativeindexconfigurationpropertyParams(pydantic.BaseModel):
    index_id: str = pydantic.Field(..., description='')
    ...

class CfnRetrieverDefRetrieverconfigurationpropertyParams(pydantic.BaseModel):
    kendra_index_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnRetriever_KendraIndexConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    native_index_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnRetriever_NativeIndexConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRetrieverDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRetrieverDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRetrieverDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRetrieverDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRetrieverDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRetrieverDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRetrieverDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRetrieverDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRetrieverDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRetrieverDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRetrieverDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnRetrieverDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRetrieverDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRetrieverDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_qbusiness.CfnWebExperience
class CfnWebExperienceDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Q Business web experience.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the service role attached to your web experience.\n')
    sample_prompts_control_mode: typing.Optional[str] = pydantic.Field(None, description='Determines whether sample prompts are enabled in the web experience for an end user.\n')
    subtitle: typing.Optional[str] = pydantic.Field(None, description='A subtitle to personalize your Amazon Q Business web experience.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize your Amazon Q Business web experience. You can also use tags to help control access to the web experience. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -\n')
    title: typing.Optional[str] = pydantic.Field(None, description='The title for your Amazon Q Business web experience.\n')
    welcome_message: typing.Optional[str] = pydantic.Field(None, description='A message in an Amazon Q Business web experience.')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'role_arn', 'sample_prompts_control_mode', 'subtitle', 'tags', 'title', 'welcome_message']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnWebExperience'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_qbusiness.CfnWebExperienceDefConfig] = pydantic.Field(None)


class CfnWebExperienceDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_qbusiness.CfnWebExperienceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnWebExperienceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWebExperienceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWebExperienceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWebExperienceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWebExperienceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWebExperienceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWebExperienceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWebExperienceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWebExperienceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWebExperienceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWebExperienceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnWebExperienceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWebExperienceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWebExperienceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_qbusiness.CfnApplicationProps
class CfnApplicationPropsDef(BaseCfnProperty):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon Q Business application.\n')
    attachments_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnApplication_AttachmentsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for the file upload during chat feature.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the Amazon Q Business application.\n')
    encryption_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnApplication_EncryptionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Provides the identifier of the AWS KMS key used to encrypt data indexed by Amazon Q Business. Amazon Q Business doesn't support asymmetric keys.\n")
    identity_center_instance_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM Identity Center instance you are either creating for—or connecting to—your Amazon Q Business application. *Required* : ``Yes``\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an IAM role with permissions to access your Amazon CloudWatch logs and metrics.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize your Amazon Q Business application. You can also use tags to help control access to the application. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-qbusiness-application.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    cfn_application_props = qbusiness.CfnApplicationProps(\n        display_name="displayName",\n\n        # the properties below are optional\n        attachments_configuration=qbusiness.CfnApplication.AttachmentsConfigurationProperty(\n            attachments_control_mode="attachmentsControlMode"\n        ),\n        description="description",\n        encryption_configuration=qbusiness.CfnApplication.EncryptionConfigurationProperty(\n            kms_key_id="kmsKeyId"\n        ),\n        identity_center_instance_arn="identityCenterInstanceArn",\n        role_arn="roleArn",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'attachments_configuration', 'description', 'encryption_configuration', 'identity_center_instance_arn', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnApplicationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnDataSourceProps
class CfnDataSourcePropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Q Business application the data source will be attached to.\n')
    configuration: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Configuration information to connect to your data source repository. For configuration templates for your specific data source, see `Supported connectors <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connectors-list.html>`_ .\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon Q Business data source.\n')
    index_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the index the data source is attached to.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the data source connector.\n')
    document_enrichment_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DocumentEnrichmentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information for altering document metadata and content during the document ingestion process. For more information, see `Custom document enrichment <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html>`_ .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.\n')
    sync_schedule: typing.Optional[str] = pydantic.Field(None, description="Sets the frequency for Amazon Q Business to check the documents in your data source repository and update your index. If you don't set a schedule, Amazon Q Business won't periodically update the index. Specify a ``cron-`` format schedule string or an empty string to indicate that the index is updated on demand. You can't specify the ``Schedule`` parameter when the ``Type`` parameter is set to ``CUSTOM`` . If you do, you receive a ``ValidationException`` exception.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize the data source connector. You can also use tags to help control access to the data source connector. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -\n')
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnDataSource_DataSourceVpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for an Amazon VPC (Virtual Private Cloud) to connect to your data source. For more information, see `Using Amazon VPC with Amazon Q Business connectors <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connector-vpc.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-qbusiness-datasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    # configuration: Any\n\n    cfn_data_source_props = qbusiness.CfnDataSourceProps(\n        application_id="applicationId",\n        configuration=configuration,\n        display_name="displayName",\n        index_id="indexId",\n\n        # the properties below are optional\n        description="description",\n        document_enrichment_configuration=qbusiness.CfnDataSource.DocumentEnrichmentConfigurationProperty(\n            inline_configurations=[qbusiness.CfnDataSource.InlineDocumentEnrichmentConfigurationProperty(\n                condition=qbusiness.CfnDataSource.DocumentAttributeConditionProperty(\n                    key="key",\n                    operator="operator",\n\n                    # the properties below are optional\n                    value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                        date_value="dateValue",\n                        long_value=123,\n                        string_list_value=["stringListValue"],\n                        string_value="stringValue"\n                    )\n                ),\n                document_content_operator="documentContentOperator",\n                target=qbusiness.CfnDataSource.DocumentAttributeTargetProperty(\n                    key="key",\n\n                    # the properties below are optional\n                    attribute_value_operator="attributeValueOperator",\n                    value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                        date_value="dateValue",\n                        long_value=123,\n                        string_list_value=["stringListValue"],\n                        string_value="stringValue"\n                    )\n                )\n            )],\n            post_extraction_hook_configuration=qbusiness.CfnDataSource.HookConfigurationProperty(\n                invocation_condition=qbusiness.CfnDataSource.DocumentAttributeConditionProperty(\n                    key="key",\n                    operator="operator",\n\n                    # the properties below are optional\n                    value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                        date_value="dateValue",\n                        long_value=123,\n                        string_list_value=["stringListValue"],\n                        string_value="stringValue"\n                    )\n                ),\n                lambda_arn="lambdaArn",\n                role_arn="roleArn",\n                s3_bucket_name="s3BucketName"\n            ),\n            pre_extraction_hook_configuration=qbusiness.CfnDataSource.HookConfigurationProperty(\n                invocation_condition=qbusiness.CfnDataSource.DocumentAttributeConditionProperty(\n                    key="key",\n                    operator="operator",\n\n                    # the properties below are optional\n                    value=qbusiness.CfnDataSource.DocumentAttributeValueProperty(\n                        date_value="dateValue",\n                        long_value=123,\n                        string_list_value=["stringListValue"],\n                        string_value="stringValue"\n                    )\n                ),\n                lambda_arn="lambdaArn",\n                role_arn="roleArn",\n                s3_bucket_name="s3BucketName"\n            )\n        ),\n        role_arn="roleArn",\n        sync_schedule="syncSchedule",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        vpc_configuration=qbusiness.CfnDataSource.DataSourceVpcConfigurationProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'configuration', 'display_name', 'index_id', 'description', 'document_enrichment_configuration', 'role_arn', 'sync_schedule', 'tags', 'vpc_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnDataSourceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnIndexProps
class CfnIndexPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Q Business application using the index.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index.\n')
    capacity_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnIndex_IndexCapacityConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The capacity units you want to provision for your index. You can add and remove capacity to fit your usage needs.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the Amazon Q Business index.\n')
    document_attribute_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnIndex_DocumentAttributeConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Configuration information for document attributes. Document attributes are metadata or fields associated with your documents. For example, the company department name associated with each document. For more information, see `Understanding document attributes <https://docs.aws.amazon.com/amazonq/latest/business-use-dg/doc-attributes.html>`_ .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize the index. You can also use tags to help control access to the index. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -\n')
    type: typing.Optional[str] = pydantic.Field(None, description='The index type that\'s suitable for your needs. For more information on what\'s included in each type of index, see `Amazon Q Business tiers <https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/tiers.html#index-tiers>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-qbusiness-index.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    cfn_index_props = qbusiness.CfnIndexProps(\n        application_id="applicationId",\n        display_name="displayName",\n\n        # the properties below are optional\n        capacity_configuration=qbusiness.CfnIndex.IndexCapacityConfigurationProperty(\n            units=123\n        ),\n        description="description",\n        document_attribute_configurations=[qbusiness.CfnIndex.DocumentAttributeConfigurationProperty(\n            name="name",\n            search="search",\n            type="type"\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'display_name', 'capacity_configuration', 'description', 'document_attribute_configurations', 'tags', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnIndexProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnPluginProps
class CfnPluginPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the application that will contain the plugin.\n')
    auth_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_PluginAuthConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Authentication configuration information for an Amazon Q Business plugin.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the plugin.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the plugin.\n')
    custom_plugin_configuration: typing.Union[models.UnsupportedResource, models.aws_qbusiness.CfnPlugin_CustomPluginConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information required to create a custom plugin.\n')
    server_url: typing.Optional[str] = pydantic.Field(None, description='The plugin server URL used for configuration.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The current status of the plugin.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize the data source connector. You can also use tags to help control access to the data source connector. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-qbusiness-plugin.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    # no_auth_configuration: Any\n\n    cfn_plugin_props = qbusiness.CfnPluginProps(\n        application_id="applicationId",\n        auth_configuration=qbusiness.CfnPlugin.PluginAuthConfigurationProperty(\n            basic_auth_configuration=qbusiness.CfnPlugin.BasicAuthConfigurationProperty(\n                role_arn="roleArn",\n                secret_arn="secretArn"\n            ),\n            no_auth_configuration=no_auth_configuration,\n            o_auth2_client_credential_configuration=qbusiness.CfnPlugin.OAuth2ClientCredentialConfigurationProperty(\n                role_arn="roleArn",\n                secret_arn="secretArn"\n            )\n        ),\n        display_name="displayName",\n        type="type",\n\n        # the properties below are optional\n        custom_plugin_configuration=qbusiness.CfnPlugin.CustomPluginConfigurationProperty(\n            api_schema=qbusiness.CfnPlugin.APISchemaProperty(\n                payload="payload",\n                s3=qbusiness.CfnPlugin.S3Property(\n                    bucket="bucket",\n                    key="key"\n                )\n            ),\n            api_schema_type="apiSchemaType",\n            description="description"\n        ),\n        server_url="serverUrl",\n        state="state",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'auth_configuration', 'display_name', 'type', 'custom_plugin_configuration', 'server_url', 'state', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnPluginProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnRetrieverProps
class CfnRetrieverPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Q Business application using the retriever.\n')
    configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_qbusiness.CfnRetriever_RetrieverConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Provides information on how the retriever used for your Amazon Q Business application is configured.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of your retriever.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of your retriever.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-qbusiness-retriever.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    cfn_retriever_props = qbusiness.CfnRetrieverProps(\n        application_id="applicationId",\n        configuration=qbusiness.CfnRetriever.RetrieverConfigurationProperty(\n            kendra_index_configuration=qbusiness.CfnRetriever.KendraIndexConfigurationProperty(\n                index_id="indexId"\n            ),\n            native_index_configuration=qbusiness.CfnRetriever.NativeIndexConfigurationProperty(\n                index_id="indexId"\n            )\n        ),\n        display_name="displayName",\n        type="type",\n\n        # the properties below are optional\n        role_arn="roleArn",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'configuration', 'display_name', 'type', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnRetrieverProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_qbusiness.CfnWebExperienceProps
class CfnWebExperiencePropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Q Business web experience.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the service role attached to your web experience.\n')
    sample_prompts_control_mode: typing.Optional[str] = pydantic.Field(None, description='Determines whether sample prompts are enabled in the web experience for an end user.\n')
    subtitle: typing.Optional[str] = pydantic.Field(None, description='A subtitle to personalize your Amazon Q Business web experience.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that identify or categorize your Amazon Q Business web experience. You can also use tags to help control access to the web experience. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + -\n')
    title: typing.Optional[str] = pydantic.Field(None, description='The title for your Amazon Q Business web experience.\n')
    welcome_message: typing.Optional[str] = pydantic.Field(None, description='A message in an Amazon Q Business web experience.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-qbusiness-webexperience.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_qbusiness as qbusiness\n\n    cfn_web_experience_props = qbusiness.CfnWebExperienceProps(\n        application_id="applicationId",\n\n        # the properties below are optional\n        role_arn="roleArn",\n        sample_prompts_control_mode="samplePromptsControlMode",\n        subtitle="subtitle",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        title="title",\n        welcome_message="welcomeMessage"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'role_arn', 'sample_prompts_control_mode', 'subtitle', 'tags', 'title', 'welcome_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_qbusiness.CfnWebExperienceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnApplication_AttachmentsConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnApplication_AttachmentsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_EncryptionConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnApplication_EncryptionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DataSourceVpcConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnDataSource_DataSourceVpcConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DocumentAttributeConditionProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnDataSource_DocumentAttributeConditionPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DocumentAttributeTargetProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnDataSource_DocumentAttributeTargetPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DocumentAttributeValueProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnDataSource_DocumentAttributeValuePropertyDef]] = pydantic.Field(None)
    CfnDataSource_DocumentEnrichmentConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnDataSource_DocumentEnrichmentConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_HookConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnDataSource_HookConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_InlineDocumentEnrichmentConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnDataSource_InlineDocumentEnrichmentConfigurationPropertyDef]] = pydantic.Field(None)
    CfnIndex_DocumentAttributeConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnIndex_DocumentAttributeConfigurationPropertyDef]] = pydantic.Field(None)
    CfnIndex_IndexCapacityConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnIndex_IndexCapacityConfigurationPropertyDef]] = pydantic.Field(None)
    CfnIndex_IndexStatisticsProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnIndex_IndexStatisticsPropertyDef]] = pydantic.Field(None)
    CfnIndex_TextDocumentStatisticsProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnIndex_TextDocumentStatisticsPropertyDef]] = pydantic.Field(None)
    CfnPlugin_APISchemaProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnPlugin_APISchemaPropertyDef]] = pydantic.Field(None)
    CfnPlugin_BasicAuthConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnPlugin_BasicAuthConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPlugin_CustomPluginConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnPlugin_CustomPluginConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPlugin_OAuth2ClientCredentialConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnPlugin_OAuth2ClientCredentialConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPlugin_PluginAuthConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnPlugin_PluginAuthConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPlugin_S3Property: typing.Optional[dict[str, models.aws_qbusiness.CfnPlugin_S3PropertyDef]] = pydantic.Field(None)
    CfnRetriever_KendraIndexConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnRetriever_KendraIndexConfigurationPropertyDef]] = pydantic.Field(None)
    CfnRetriever_NativeIndexConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnRetriever_NativeIndexConfigurationPropertyDef]] = pydantic.Field(None)
    CfnRetriever_RetrieverConfigurationProperty: typing.Optional[dict[str, models.aws_qbusiness.CfnRetriever_RetrieverConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication: typing.Optional[dict[str, models.aws_qbusiness.CfnApplicationDef]] = pydantic.Field(None)
    CfnDataSource: typing.Optional[dict[str, models.aws_qbusiness.CfnDataSourceDef]] = pydantic.Field(None)
    CfnIndex: typing.Optional[dict[str, models.aws_qbusiness.CfnIndexDef]] = pydantic.Field(None)
    CfnPlugin: typing.Optional[dict[str, models.aws_qbusiness.CfnPluginDef]] = pydantic.Field(None)
    CfnRetriever: typing.Optional[dict[str, models.aws_qbusiness.CfnRetrieverDef]] = pydantic.Field(None)
    CfnWebExperience: typing.Optional[dict[str, models.aws_qbusiness.CfnWebExperienceDef]] = pydantic.Field(None)
    CfnApplicationProps: typing.Optional[dict[str, models.aws_qbusiness.CfnApplicationPropsDef]] = pydantic.Field(None)
    CfnDataSourceProps: typing.Optional[dict[str, models.aws_qbusiness.CfnDataSourcePropsDef]] = pydantic.Field(None)
    CfnIndexProps: typing.Optional[dict[str, models.aws_qbusiness.CfnIndexPropsDef]] = pydantic.Field(None)
    CfnPluginProps: typing.Optional[dict[str, models.aws_qbusiness.CfnPluginPropsDef]] = pydantic.Field(None)
    CfnRetrieverProps: typing.Optional[dict[str, models.aws_qbusiness.CfnRetrieverPropsDef]] = pydantic.Field(None)
    CfnWebExperienceProps: typing.Optional[dict[str, models.aws_qbusiness.CfnWebExperiencePropsDef]] = pydantic.Field(None)
    ...

import models
