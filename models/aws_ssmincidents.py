from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_ssmincidents.CfnReplicationSet.RegionConfigurationProperty
class CfnReplicationSet_RegionConfigurationPropertyDef(BaseStruct):
    sse_kms_key_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The KMS key ID to use to encrypt your replication set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-replicationset-regionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    region_configuration_property = ssmincidents.CfnReplicationSet.RegionConfigurationProperty(\n        sse_kms_key_id="sseKmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sse_kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnReplicationSet.RegionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnReplicationSet.ReplicationRegionProperty
class CfnReplicationSet_ReplicationRegionPropertyDef(BaseStruct):
    region_configuration: typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnReplicationSet_RegionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the Region configuration.\n')
    region_name: typing.Optional[str] = pydantic.Field(None, description='Specifies the region name to add to the replication set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-replicationset-replicationregion.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    replication_region_property = ssmincidents.CfnReplicationSet.ReplicationRegionProperty(\n        region_configuration=ssmincidents.CfnReplicationSet.RegionConfigurationProperty(\n            sse_kms_key_id="sseKmsKeyId"\n        ),\n        region_name="regionName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['region_configuration', 'region_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnReplicationSet.ReplicationRegionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.ActionProperty
class CfnResponsePlan_ActionPropertyDef(BaseStruct):
    ssm_automation: typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_SsmAutomationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details about the Systems Manager automation document that will be used as a runbook during an incident.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-action.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    action_property = ssmincidents.CfnResponsePlan.ActionProperty(\n        ssm_automation=ssmincidents.CfnResponsePlan.SsmAutomationProperty(\n            document_name="documentName",\n            role_arn="roleArn",\n\n            # the properties below are optional\n            document_version="documentVersion",\n            dynamic_parameters=[ssmincidents.CfnResponsePlan.DynamicSsmParameterProperty(\n                key="key",\n                value=ssmincidents.CfnResponsePlan.DynamicSsmParameterValueProperty(\n                    variable="variable"\n                )\n            )],\n            parameters=[ssmincidents.CfnResponsePlan.SsmParameterProperty(\n                key="key",\n                values=["values"]\n            )],\n            target_account="targetAccount"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ssm_automation']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.ActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.ChatChannelProperty
class CfnResponsePlan_ChatChannelPropertyDef(BaseStruct):
    chatbot_sns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The SNS targets that AWS Chatbot uses to notify the chat channel of updates to an incident. You can also make updates to the incident through the chat channel by using the SNS topics\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-chatchannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    chat_channel_property = ssmincidents.CfnResponsePlan.ChatChannelProperty(\n        chatbot_sns=["chatbotSns"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['chatbot_sns']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.ChatChannelProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.DynamicSsmParameterProperty
class CfnResponsePlan_DynamicSsmParameterPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key parameter to use when running the Systems Manager Automation runbook.\n')
    value: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_DynamicSsmParameterValuePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The dynamic parameter value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-dynamicssmparameter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    dynamic_ssm_parameter_property = ssmincidents.CfnResponsePlan.DynamicSsmParameterProperty(\n        key="key",\n        value=ssmincidents.CfnResponsePlan.DynamicSsmParameterValueProperty(\n            variable="variable"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.DynamicSsmParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.DynamicSsmParameterValueProperty
class CfnResponsePlan_DynamicSsmParameterValuePropertyDef(BaseStruct):
    variable: typing.Optional[str] = pydantic.Field(None, description='Variable dynamic parameters. A parameter value is determined when an incident is created.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-dynamicssmparametervalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    dynamic_ssm_parameter_value_property = ssmincidents.CfnResponsePlan.DynamicSsmParameterValueProperty(\n        variable="variable"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['variable']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.DynamicSsmParameterValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.IncidentTemplateProperty
class CfnResponsePlan_IncidentTemplatePropertyDef(BaseStruct):
    impact: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan. **Possible impacts:** - ``1`` - Critical impact, this typically relates to full application failure that impacts many to all customers. - ``2`` - High impact, partial application failure with impact to many customers. - ``3`` - Medium impact, the application is providing reduced service to customers. - ``4`` - Low impact, customer might aren't impacted by the problem yet. - ``5`` - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.\n")
    title: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The title of the incident is a brief and easily recognizable.\n')
    dedupe_string: typing.Optional[str] = pydantic.Field(None, description='Used to create only one incident record for an incident.\n')
    incident_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Tags to assign to the template. When the ``StartIncident`` API action is called, Incident Manager assigns the tags specified in the template to the incident.\n')
    notification_targets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_NotificationTargetItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The SNS targets that AWS Chatbot uses to notify the chat channel of updates to an incident. You can also make updates to the incident through the chat channel using the SNS topics.\n')
    summary: typing.Optional[str] = pydantic.Field(None, description='The summary describes what has happened during the incident.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-incidenttemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    incident_template_property = ssmincidents.CfnResponsePlan.IncidentTemplateProperty(\n        impact=123,\n        title="title",\n\n        # the properties below are optional\n        dedupe_string="dedupeString",\n        incident_tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        notification_targets=[ssmincidents.CfnResponsePlan.NotificationTargetItemProperty(\n            sns_topic_arn="snsTopicArn"\n        )],\n        summary="summary"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['impact', 'title', 'dedupe_string', 'incident_tags', 'notification_targets', 'summary']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.IncidentTemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.IntegrationProperty
class CfnResponsePlan_IntegrationPropertyDef(BaseStruct):
    pager_duty_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_PagerDutyConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about the PagerDuty service where the response plan creates an incident.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-integration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    integration_property = ssmincidents.CfnResponsePlan.IntegrationProperty(\n        pager_duty_configuration=ssmincidents.CfnResponsePlan.PagerDutyConfigurationProperty(\n            name="name",\n            pager_duty_incident_configuration=ssmincidents.CfnResponsePlan.PagerDutyIncidentConfigurationProperty(\n                service_id="serviceId"\n            ),\n            secret_id="secretId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['pager_duty_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.IntegrationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.NotificationTargetItemProperty
class CfnResponsePlan_NotificationTargetItemPropertyDef(BaseStruct):
    sns_topic_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the SNS topic.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-notificationtargetitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    notification_target_item_property = ssmincidents.CfnResponsePlan.NotificationTargetItemProperty(\n        sns_topic_arn="snsTopicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sns_topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.NotificationTargetItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.PagerDutyConfigurationProperty
class CfnResponsePlan_PagerDutyConfigurationPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the PagerDuty configuration.\n')
    pager_duty_incident_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_PagerDutyIncidentConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Details about the PagerDuty service associated with the configuration.\n')
    secret_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the AWS Secrets Manager secret that stores your PagerDuty key, either a General Access REST API Key or User Token REST API Key, and other user credentials.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-pagerdutyconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    pager_duty_configuration_property = ssmincidents.CfnResponsePlan.PagerDutyConfigurationProperty(\n        name="name",\n        pager_duty_incident_configuration=ssmincidents.CfnResponsePlan.PagerDutyIncidentConfigurationProperty(\n            service_id="serviceId"\n        ),\n        secret_id="secretId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'pager_duty_incident_configuration', 'secret_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.PagerDutyConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.PagerDutyIncidentConfigurationProperty
class CfnResponsePlan_PagerDutyIncidentConfigurationPropertyDef(BaseStruct):
    service_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the PagerDuty service that the response plan associates with an incident when it launches.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-pagerdutyincidentconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    pager_duty_incident_configuration_property = ssmincidents.CfnResponsePlan.PagerDutyIncidentConfigurationProperty(\n        service_id="serviceId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['service_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.PagerDutyIncidentConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.SsmAutomationProperty
class CfnResponsePlan_SsmAutomationPropertyDef(BaseStruct):
    document_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The automation document's name.\n")
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the role that the automation document will assume when running commands.\n')
    document_version: typing.Optional[str] = pydantic.Field(None, description="The automation document's version to use when running.\n")
    dynamic_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_DynamicSsmParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The key-value pairs to resolve dynamic parameter values when processing a Systems Manager Automation runbook.\n')
    parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_SsmParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The key-value pair parameters to use when running the automation document.\n')
    target_account: typing.Optional[str] = pydantic.Field(None, description='The account that the automation document will be run in. This can be in either the management account or an application account.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-ssmautomation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    ssm_automation_property = ssmincidents.CfnResponsePlan.SsmAutomationProperty(\n        document_name="documentName",\n        role_arn="roleArn",\n\n        # the properties below are optional\n        document_version="documentVersion",\n        dynamic_parameters=[ssmincidents.CfnResponsePlan.DynamicSsmParameterProperty(\n            key="key",\n            value=ssmincidents.CfnResponsePlan.DynamicSsmParameterValueProperty(\n                variable="variable"\n            )\n        )],\n        parameters=[ssmincidents.CfnResponsePlan.SsmParameterProperty(\n            key="key",\n            values=["values"]\n        )],\n        target_account="targetAccount"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['document_name', 'role_arn', 'document_version', 'dynamic_parameters', 'parameters', 'target_account']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.SsmAutomationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan.SsmParameterProperty
class CfnResponsePlan_SsmParameterPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key parameter to use when running the automation document.\n')
    values: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value parameter to use when running the automation document.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssmincidents-responseplan-ssmparameter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    ssm_parameter_property = ssmincidents.CfnResponsePlan.SsmParameterProperty(\n        key="key",\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan.SsmParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnReplicationSet
class CfnReplicationSetDef(BaseCfnResource):
    regions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnReplicationSet_ReplicationRegionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the Regions of the replication set.\n')
    deletion_protected: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Determines if the replication set deletion protection is enabled or not. If deletion protection is enabled, you can't delete the last Region in the replication set.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of tags to add to the replication set.')
    _init_params: typing.ClassVar[list[str]] = ['regions', 'deletion_protected', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['RegionConfigurationProperty', 'ReplicationRegionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnReplicationSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnReplicationSetDefConfig] = pydantic.Field(None)


class CfnReplicationSetDefConfig(pydantic.BaseModel):
    RegionConfigurationProperty: typing.Optional[list[CfnReplicationSetDefRegionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ReplicationRegionProperty: typing.Optional[list[CfnReplicationSetDefReplicationregionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnReplicationSetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnReplicationSetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnReplicationSetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnReplicationSetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnReplicationSetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnReplicationSetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnReplicationSetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnReplicationSetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnReplicationSetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnReplicationSetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnReplicationSetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnReplicationSetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnReplicationSetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnReplicationSetDefRegionconfigurationpropertyParams(pydantic.BaseModel):
    sse_kms_key_id: str = pydantic.Field(..., description='')
    ...

class CfnReplicationSetDefReplicationregionpropertyParams(pydantic.BaseModel):
    region_configuration: typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnReplicationSet_RegionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    region_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnReplicationSetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnReplicationSetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnReplicationSetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnReplicationSetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnReplicationSetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnReplicationSetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnReplicationSetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnReplicationSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnReplicationSetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnReplicationSetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnReplicationSetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnReplicationSetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnReplicationSetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnReplicationSetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlan
class CfnResponsePlanDef(BaseCfnResource):
    incident_template: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_IncidentTemplatePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Details used to create an incident when using this response plan.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the response plan.\n')
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The actions that the response plan starts at the beginning of an incident.\n')
    chat_channel: typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_ChatChannelPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The AWS Chatbot chat channel used for collaboration during an incident.\n')
    display_name: typing.Optional[str] = pydantic.Field(None, description='The human readable name of the response plan.\n')
    engagements: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.\n')
    integrations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_IntegrationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about third-party services integrated into the response plan.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['incident_template', 'name', 'actions', 'chat_channel', 'display_name', 'engagements', 'integrations', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ActionProperty', 'ChatChannelProperty', 'DynamicSsmParameterProperty', 'DynamicSsmParameterValueProperty', 'IncidentTemplateProperty', 'IntegrationProperty', 'NotificationTargetItemProperty', 'PagerDutyConfigurationProperty', 'PagerDutyIncidentConfigurationProperty', 'SsmAutomationProperty', 'SsmParameterProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlan'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnResponsePlanDefConfig] = pydantic.Field(None)


class CfnResponsePlanDefConfig(pydantic.BaseModel):
    ActionProperty: typing.Optional[list[CfnResponsePlanDefActionpropertyParams]] = pydantic.Field(None, description='')
    ChatChannelProperty: typing.Optional[list[CfnResponsePlanDefChatchannelpropertyParams]] = pydantic.Field(None, description='')
    DynamicSsmParameterProperty: typing.Optional[list[CfnResponsePlanDefDynamicssmparameterpropertyParams]] = pydantic.Field(None, description='')
    DynamicSsmParameterValueProperty: typing.Optional[list[CfnResponsePlanDefDynamicssmparametervaluepropertyParams]] = pydantic.Field(None, description='')
    IncidentTemplateProperty: typing.Optional[list[CfnResponsePlanDefIncidenttemplatepropertyParams]] = pydantic.Field(None, description='')
    IntegrationProperty: typing.Optional[list[CfnResponsePlanDefIntegrationpropertyParams]] = pydantic.Field(None, description='')
    NotificationTargetItemProperty: typing.Optional[list[CfnResponsePlanDefNotificationtargetitempropertyParams]] = pydantic.Field(None, description='')
    PagerDutyConfigurationProperty: typing.Optional[list[CfnResponsePlanDefPagerdutyconfigurationpropertyParams]] = pydantic.Field(None, description='')
    PagerDutyIncidentConfigurationProperty: typing.Optional[list[CfnResponsePlanDefPagerdutyincidentconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SsmAutomationProperty: typing.Optional[list[CfnResponsePlanDefSsmautomationpropertyParams]] = pydantic.Field(None, description='')
    SsmParameterProperty: typing.Optional[list[CfnResponsePlanDefSsmparameterpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnResponsePlanDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnResponsePlanDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnResponsePlanDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnResponsePlanDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnResponsePlanDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnResponsePlanDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnResponsePlanDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnResponsePlanDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnResponsePlanDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnResponsePlanDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnResponsePlanDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnResponsePlanDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnResponsePlanDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnResponsePlanDefActionpropertyParams(pydantic.BaseModel):
    ssm_automation: typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_SsmAutomationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnResponsePlanDefChatchannelpropertyParams(pydantic.BaseModel):
    chatbot_sns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnResponsePlanDefDynamicssmparameterpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_DynamicSsmParameterValuePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnResponsePlanDefDynamicssmparametervaluepropertyParams(pydantic.BaseModel):
    variable: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnResponsePlanDefIncidenttemplatepropertyParams(pydantic.BaseModel):
    impact: typing.Union[int, float] = pydantic.Field(..., description='')
    title: str = pydantic.Field(..., description='')
    dedupe_string: typing.Optional[str] = pydantic.Field(None, description='')
    incident_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    notification_targets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_NotificationTargetItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    summary: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnResponsePlanDefIntegrationpropertyParams(pydantic.BaseModel):
    pager_duty_configuration: typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_PagerDutyConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnResponsePlanDefNotificationtargetitempropertyParams(pydantic.BaseModel):
    sns_topic_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnResponsePlanDefPagerdutyconfigurationpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    pager_duty_incident_configuration: typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_PagerDutyIncidentConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    secret_id: str = pydantic.Field(..., description='')
    ...

class CfnResponsePlanDefPagerdutyincidentconfigurationpropertyParams(pydantic.BaseModel):
    service_id: str = pydantic.Field(..., description='')
    ...

class CfnResponsePlanDefSsmautomationpropertyParams(pydantic.BaseModel):
    document_name: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    document_version: typing.Optional[str] = pydantic.Field(None, description='')
    dynamic_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_DynamicSsmParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_SsmParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    target_account: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnResponsePlanDefSsmparameterpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    values: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnResponsePlanDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnResponsePlanDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnResponsePlanDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnResponsePlanDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnResponsePlanDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnResponsePlanDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnResponsePlanDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnResponsePlanDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnResponsePlanDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnResponsePlanDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnResponsePlanDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnResponsePlanDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnResponsePlanDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnResponsePlanDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ssmincidents.CfnReplicationSetProps
class CfnReplicationSetPropsDef(BaseCfnProperty):
    regions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnReplicationSet_ReplicationRegionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the Regions of the replication set.\n')
    deletion_protected: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Determines if the replication set deletion protection is enabled or not. If deletion protection is enabled, you can't delete the last Region in the replication set.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of tags to add to the replication set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssmincidents-replicationset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    cfn_replication_set_props = ssmincidents.CfnReplicationSetProps(\n        regions=[ssmincidents.CfnReplicationSet.ReplicationRegionProperty(\n            region_configuration=ssmincidents.CfnReplicationSet.RegionConfigurationProperty(\n                sse_kms_key_id="sseKmsKeyId"\n            ),\n            region_name="regionName"\n        )],\n\n        # the properties below are optional\n        deletion_protected=False,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['regions', 'deletion_protected', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnReplicationSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ssmincidents.CfnResponsePlanProps
class CfnResponsePlanPropsDef(BaseCfnProperty):
    incident_template: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_IncidentTemplatePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Details used to create an incident when using this response plan.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the response plan.\n')
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The actions that the response plan starts at the beginning of an incident.\n')
    chat_channel: typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_ChatChannelPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The AWS Chatbot chat channel used for collaboration during an incident.\n')
    display_name: typing.Optional[str] = pydantic.Field(None, description='The human readable name of the response plan.\n')
    engagements: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.\n')
    integrations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_ssmincidents.CfnResponsePlan_IntegrationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about third-party services integrated into the response plan.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssmincidents-responseplan.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ssmincidents as ssmincidents\n\n    cfn_response_plan_props = ssmincidents.CfnResponsePlanProps(\n        incident_template=ssmincidents.CfnResponsePlan.IncidentTemplateProperty(\n            impact=123,\n            title="title",\n\n            # the properties below are optional\n            dedupe_string="dedupeString",\n            incident_tags=[CfnTag(\n                key="key",\n                value="value"\n            )],\n            notification_targets=[ssmincidents.CfnResponsePlan.NotificationTargetItemProperty(\n                sns_topic_arn="snsTopicArn"\n            )],\n            summary="summary"\n        ),\n        name="name",\n\n        # the properties below are optional\n        actions=[ssmincidents.CfnResponsePlan.ActionProperty(\n            ssm_automation=ssmincidents.CfnResponsePlan.SsmAutomationProperty(\n                document_name="documentName",\n                role_arn="roleArn",\n\n                # the properties below are optional\n                document_version="documentVersion",\n                dynamic_parameters=[ssmincidents.CfnResponsePlan.DynamicSsmParameterProperty(\n                    key="key",\n                    value=ssmincidents.CfnResponsePlan.DynamicSsmParameterValueProperty(\n                        variable="variable"\n                    )\n                )],\n                parameters=[ssmincidents.CfnResponsePlan.SsmParameterProperty(\n                    key="key",\n                    values=["values"]\n                )],\n                target_account="targetAccount"\n            )\n        )],\n        chat_channel=ssmincidents.CfnResponsePlan.ChatChannelProperty(\n            chatbot_sns=["chatbotSns"]\n        ),\n        display_name="displayName",\n        engagements=["engagements"],\n        integrations=[ssmincidents.CfnResponsePlan.IntegrationProperty(\n            pager_duty_configuration=ssmincidents.CfnResponsePlan.PagerDutyConfigurationProperty(\n                name="name",\n                pager_duty_incident_configuration=ssmincidents.CfnResponsePlan.PagerDutyIncidentConfigurationProperty(\n                    service_id="serviceId"\n                ),\n                secret_id="secretId"\n            )\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['incident_template', 'name', 'actions', 'chat_channel', 'display_name', 'engagements', 'integrations', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ssmincidents.CfnResponsePlanProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnReplicationSet_RegionConfigurationProperty: typing.Optional[dict[str, CfnReplicationSet_RegionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnReplicationSet_ReplicationRegionProperty: typing.Optional[dict[str, CfnReplicationSet_ReplicationRegionPropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_ActionProperty: typing.Optional[dict[str, CfnResponsePlan_ActionPropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_ChatChannelProperty: typing.Optional[dict[str, CfnResponsePlan_ChatChannelPropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_DynamicSsmParameterProperty: typing.Optional[dict[str, CfnResponsePlan_DynamicSsmParameterPropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_DynamicSsmParameterValueProperty: typing.Optional[dict[str, CfnResponsePlan_DynamicSsmParameterValuePropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_IncidentTemplateProperty: typing.Optional[dict[str, CfnResponsePlan_IncidentTemplatePropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_IntegrationProperty: typing.Optional[dict[str, CfnResponsePlan_IntegrationPropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_NotificationTargetItemProperty: typing.Optional[dict[str, CfnResponsePlan_NotificationTargetItemPropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_PagerDutyConfigurationProperty: typing.Optional[dict[str, CfnResponsePlan_PagerDutyConfigurationPropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_PagerDutyIncidentConfigurationProperty: typing.Optional[dict[str, CfnResponsePlan_PagerDutyIncidentConfigurationPropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_SsmAutomationProperty: typing.Optional[dict[str, CfnResponsePlan_SsmAutomationPropertyDef]] = pydantic.Field(None)
    CfnResponsePlan_SsmParameterProperty: typing.Optional[dict[str, CfnResponsePlan_SsmParameterPropertyDef]] = pydantic.Field(None)
    CfnReplicationSet: typing.Optional[dict[str, CfnReplicationSetDef]] = pydantic.Field(None)
    CfnResponsePlan: typing.Optional[dict[str, CfnResponsePlanDef]] = pydantic.Field(None)
    CfnReplicationSetProps: typing.Optional[dict[str, CfnReplicationSetPropsDef]] = pydantic.Field(None)
    CfnResponsePlanProps: typing.Optional[dict[str, CfnResponsePlanPropsDef]] = pydantic.Field(None)
    ...
