from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpAlbIntegration
class HttpAlbIntegrationDef(BaseClass):
    listener: typing.Union[_REQUIRED_INIT_PARAM, models.aws_elasticloadbalancingv2.ApplicationListenerDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='the ELB application listener.\n')
    method: typing.Optional[aws_cdk.aws_apigatewayv2.HttpMethod] = pydantic.Field(None, description='The HTTP method that must be used to invoke the underlying HTTP proxy. Default: HttpMethod.ANY\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    secure_server_name: typing.Optional[str] = pydantic.Field(None, description='Specifies the server name to verified by HTTPS when calling the backend integration. Default: undefined private integration traffic will use HTTP protocol\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n')
    vpc_link: typing.Optional[typing.Union[models.aws_apigatewayv2.VpcLinkDef]] = pydantic.Field(None, description='The vpc link to be used for the private integration. Default: - a new VpcLink is created')
    _init_params: typing.ClassVar[list[str]] = ['listener', 'method', 'parameter_mapping', 'secure_server_name', 'timeout', 'vpc_link']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpAlbIntegration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.HttpAlbIntegrationDefConfig] = pydantic.Field(None)


class HttpAlbIntegrationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_apigatewayv2_integrations.HttpAlbIntegrationDefBindParams]] = pydantic.Field(None, description='Bind this integration to the route.')

class HttpAlbIntegrationDefBindParams(pydantic.BaseModel):
    route: typing.Union[models.aws_apigatewayv2.HttpRouteDef] = pydantic.Field(..., description='The route to which this is being bound.\n')
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The current scope in which the bind is occurring. If the ``HttpRouteIntegration`` being bound creates additional constructs, this will be used as their parent scope.')
    ...


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpLambdaIntegration
class HttpLambdaIntegrationDef(BaseClass):
    handler: typing.Union[_REQUIRED_INIT_PARAM, models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='the Lambda handler to integrate with.\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    payload_format_version: typing.Optional[models.aws_apigatewayv2.PayloadFormatVersionDef] = pydantic.Field(None, description='Version of the payload sent to the lambda handler. Default: PayloadFormatVersion.VERSION_2_0\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)')
    _init_params: typing.ClassVar[list[str]] = ['handler', 'parameter_mapping', 'payload_format_version', 'timeout']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpLambdaIntegration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.HttpLambdaIntegrationDefConfig] = pydantic.Field(None)


class HttpLambdaIntegrationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_apigatewayv2_integrations.HttpLambdaIntegrationDefBindParams]] = pydantic.Field(None, description='Bind this integration to the route.')

class HttpLambdaIntegrationDefBindParams(pydantic.BaseModel):
    route: typing.Union[models.aws_apigatewayv2.HttpRouteDef] = pydantic.Field(..., description='The route to which this is being bound.\n')
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The current scope in which the bind is occurring. If the ``HttpRouteIntegration`` being bound creates additional constructs, this will be used as their parent scope.')
    ...


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpNlbIntegration
class HttpNlbIntegrationDef(BaseClass):
    listener: typing.Union[_REQUIRED_INIT_PARAM, models.aws_elasticloadbalancingv2.NetworkListenerDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='the ELB network listener.\n')
    method: typing.Optional[aws_cdk.aws_apigatewayv2.HttpMethod] = pydantic.Field(None, description='The HTTP method that must be used to invoke the underlying HTTP proxy. Default: HttpMethod.ANY\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    secure_server_name: typing.Optional[str] = pydantic.Field(None, description='Specifies the server name to verified by HTTPS when calling the backend integration. Default: undefined private integration traffic will use HTTP protocol\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n')
    vpc_link: typing.Optional[typing.Union[models.aws_apigatewayv2.VpcLinkDef]] = pydantic.Field(None, description='The vpc link to be used for the private integration. Default: - a new VpcLink is created')
    _init_params: typing.ClassVar[list[str]] = ['listener', 'method', 'parameter_mapping', 'secure_server_name', 'timeout', 'vpc_link']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpNlbIntegration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.HttpNlbIntegrationDefConfig] = pydantic.Field(None)


class HttpNlbIntegrationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_apigatewayv2_integrations.HttpNlbIntegrationDefBindParams]] = pydantic.Field(None, description='Bind this integration to the route.')

class HttpNlbIntegrationDefBindParams(pydantic.BaseModel):
    route: typing.Union[models.aws_apigatewayv2.HttpRouteDef] = pydantic.Field(..., description='The route to which this is being bound.\n')
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The current scope in which the bind is occurring. If the ``HttpRouteIntegration`` being bound creates additional constructs, this will be used as their parent scope.')
    ...


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpServiceDiscoveryIntegration
class HttpServiceDiscoveryIntegrationDef(BaseClass):
    service: typing.Union[_REQUIRED_INIT_PARAM, models.aws_servicediscovery.ServiceDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='the service discovery resource to integrate with.\n')
    method: typing.Optional[aws_cdk.aws_apigatewayv2.HttpMethod] = pydantic.Field(None, description='The HTTP method that must be used to invoke the underlying HTTP proxy. Default: HttpMethod.ANY\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    secure_server_name: typing.Optional[str] = pydantic.Field(None, description='Specifies the server name to verified by HTTPS when calling the backend integration. Default: undefined private integration traffic will use HTTP protocol\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n')
    vpc_link: typing.Optional[typing.Union[models.aws_apigatewayv2.VpcLinkDef]] = pydantic.Field(None, description='The vpc link to be used for the private integration. Default: - a new VpcLink is created')
    _init_params: typing.ClassVar[list[str]] = ['service', 'method', 'parameter_mapping', 'secure_server_name', 'timeout', 'vpc_link']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpServiceDiscoveryIntegration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.HttpServiceDiscoveryIntegrationDefConfig] = pydantic.Field(None)


class HttpServiceDiscoveryIntegrationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_apigatewayv2_integrations.HttpServiceDiscoveryIntegrationDefBindParams]] = pydantic.Field(None, description='Bind this integration to the route.')

class HttpServiceDiscoveryIntegrationDefBindParams(pydantic.BaseModel):
    route: typing.Union[models.aws_apigatewayv2.HttpRouteDef] = pydantic.Field(..., description='The route to which this is being bound.\n')
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The current scope in which the bind is occurring. If the ``HttpRouteIntegration`` being bound creates additional constructs, this will be used as their parent scope.')
    ...


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpStepFunctionsIntegration
class HttpStepFunctionsIntegrationDef(BaseClass):
    state_machine: typing.Union[models.aws_stepfunctions.StateMachineDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Statemachine that Integrates with API Gateway.\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. When the subtype is either ``START_EXECUTION`` or ``START_SYNC_EXECUTION``, it is necessary to specify the ``StateMachineArn``. Conversely, when the subtype is ``STOP_EXECUTION``, the ``ExecutionArn`` must be specified. Default: - specify only ``StateMachineArn``\n')
    subtype: typing.Optional[aws_cdk.aws_apigatewayv2.HttpIntegrationSubtype] = pydantic.Field(None, description='The subtype of the HTTP integration. Only subtypes starting with STEPFUNCTIONS_ can be specified. Default: HttpIntegrationSubtype.STEPFUNCTIONS_START_EXECUTION')
    _init_params: typing.ClassVar[list[str]] = ['state_machine', 'parameter_mapping', 'subtype']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpStepFunctionsIntegration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.HttpStepFunctionsIntegrationDefConfig] = pydantic.Field(None)


class HttpStepFunctionsIntegrationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_apigatewayv2_integrations.HttpStepFunctionsIntegrationDefBindParams]] = pydantic.Field(None, description='Bind this integration to the route.')

class HttpStepFunctionsIntegrationDefBindParams(pydantic.BaseModel):
    route: typing.Union[models.aws_apigatewayv2.HttpRouteDef] = pydantic.Field(..., description='The route to which this is being bound.\n')
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The current scope in which the bind is occurring. If the ``HttpRouteIntegration`` being bound creates additional constructs, this will be used as their parent scope.')
    ...


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpUrlIntegration
class HttpUrlIntegrationDef(BaseClass):
    url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='the URL to proxy to.\n')
    method: typing.Optional[aws_cdk.aws_apigatewayv2.HttpMethod] = pydantic.Field(None, description='The HTTP method that must be used to invoke the underlying HTTP proxy. Default: HttpMethod.ANY\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)')
    _init_params: typing.ClassVar[list[str]] = ['url', 'method', 'parameter_mapping', 'timeout']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpUrlIntegration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.HttpUrlIntegrationDefConfig] = pydantic.Field(None)


class HttpUrlIntegrationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_apigatewayv2_integrations.HttpUrlIntegrationDefBindParams]] = pydantic.Field(None, description='Bind this integration to the route.')

class HttpUrlIntegrationDefBindParams(pydantic.BaseModel):
    route: typing.Union[models.aws_apigatewayv2.HttpRouteDef] = pydantic.Field(..., description='The route to which this is being bound.\n')
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The current scope in which the bind is occurring. If the ``HttpRouteIntegration`` being bound creates additional constructs, this will be used as their parent scope.')
    ...


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.WebSocketAwsIntegration
class WebSocketAwsIntegrationDef(BaseClass):
    integration_method: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Specifies the integration's HTTP method type.\n")
    integration_uri: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Integration URI.\n')
    content_handling: typing.Optional[aws_cdk.aws_apigatewayv2.ContentHandling] = pydantic.Field(None, description='Specifies how to handle response payload content type conversions. Default: - The response payload will be passed through from the integration response to the route response or method response without modification.\n')
    credentials_role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description='Specifies the credentials role required for the integration. Default: - No credential role provided.\n')
    passthrough_behavior: typing.Optional[aws_cdk.aws_apigatewayv2.PassthroughBehavior] = pydantic.Field(None, description='Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Default: - No passthrough behavior required.\n')
    request_parameters: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='The request parameters that API Gateway sends with the backend request. Specify request parameters as key-value pairs (string-to-string mappings), with a destination as the key and a source as the value. Default: - No request parameter provided to the integration.\n')
    request_templates: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A map of Apache Velocity templates that are applied on the request payload. Example:: { "application/json": "{ \\"statusCode\\": 200 }" } Default: - No request template provided to the integration.\n')
    template_selection_expression: typing.Optional[str] = pydantic.Field(None, description='The template selection expression for the integration. Default: - No template selection expression provided.\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)')
    _init_params: typing.ClassVar[list[str]] = ['integration_method', 'integration_uri', 'content_handling', 'credentials_role', 'passthrough_behavior', 'request_parameters', 'request_templates', 'template_selection_expression', 'timeout']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.WebSocketAwsIntegration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.WebSocketAwsIntegrationDefConfig] = pydantic.Field(None)


class WebSocketAwsIntegrationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_apigatewayv2_integrations.WebSocketAwsIntegrationDefBindParams]] = pydantic.Field(None, description='Bind this integration to the route.')

class WebSocketAwsIntegrationDefBindParams(pydantic.BaseModel):
    route: typing.Union[models.aws_apigatewayv2.WebSocketRouteDef] = pydantic.Field(..., description='The route to which this is being bound.\n')
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The current scope in which the bind is occurring. If the ``WebSocketRouteIntegration`` being bound creates additional constructs, this will be used as their parent scope.')
    ...


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.WebSocketLambdaIntegration
class WebSocketLambdaIntegrationDef(BaseClass):
    handler: typing.Union[_REQUIRED_INIT_PARAM, models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='the Lambda function handler.\n')
    content_handling: typing.Optional[aws_cdk.aws_apigatewayv2.ContentHandling] = pydantic.Field(None, description='Specifies how to handle response payload content type conversions. Default: - The response payload will be passed through from the integration response to the route response or method response without modification.\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)')
    _init_params: typing.ClassVar[list[str]] = ['handler', 'content_handling', 'timeout']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.WebSocketLambdaIntegration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.WebSocketLambdaIntegrationDefConfig] = pydantic.Field(None)


class WebSocketLambdaIntegrationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_apigatewayv2_integrations.WebSocketLambdaIntegrationDefBindParams]] = pydantic.Field(None, description='Bind this integration to the route.')

class WebSocketLambdaIntegrationDefBindParams(pydantic.BaseModel):
    route: typing.Union[models.aws_apigatewayv2.WebSocketRouteDef] = pydantic.Field(..., description='The route to which this is being bound.\n')
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The current scope in which the bind is occurring. If the ``WebSocketRouteIntegration`` being bound creates additional constructs, this will be used as their parent scope.')
    ...


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.WebSocketMockIntegration
class WebSocketMockIntegrationDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.WebSocketMockIntegration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.WebSocketMockIntegrationDefConfig] = pydantic.Field(None)


class WebSocketMockIntegrationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_apigatewayv2_integrations.WebSocketMockIntegrationDefBindParams]] = pydantic.Field(None, description='Bind this integration to the route.')

class WebSocketMockIntegrationDefBindParams(pydantic.BaseModel):
    route: typing.Union[models.aws_apigatewayv2.WebSocketRouteDef] = pydantic.Field(..., description='The route to which this is being bound.\n')
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The current scope in which the bind is occurring. If the ``WebSocketRouteIntegration`` being bound creates additional constructs, this will be used as their parent scope.')
    ...


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpAlbIntegrationProps
class HttpAlbIntegrationPropsDef(BaseStruct):
    method: typing.Optional[aws_cdk.aws_apigatewayv2.HttpMethod] = pydantic.Field(None, description='The HTTP method that must be used to invoke the underlying HTTP proxy. Default: HttpMethod.ANY\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    secure_server_name: typing.Optional[str] = pydantic.Field(None, description='Specifies the server name to verified by HTTPS when calling the backend integration. Default: undefined private integration traffic will use HTTP protocol\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n')
    vpc_link: typing.Optional[typing.Union[models.aws_apigatewayv2.VpcLinkDef]] = pydantic.Field(None, description='The vpc link to be used for the private integration. Default: - a new VpcLink is created\n\n:exampleMetadata: infused\n\nExample::\n\n    from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n    # lb: elbv2.ApplicationLoadBalancer\n\n    listener = lb.add_listener("listener", port=80)\n    listener.add_targets("target",\n        port=80\n    )\n\n    http_endpoint = apigwv2.HttpApi(self, "HttpProxyPrivateApi",\n        default_integration=HttpAlbIntegration("DefaultIntegration", listener,\n            parameter_mapping=apigwv2.ParameterMapping().custom("myKey", "myValue")\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['method', 'parameter_mapping', 'secure_server_name', 'timeout', 'vpc_link']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpAlbIntegrationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpLambdaIntegrationProps
class HttpLambdaIntegrationPropsDef(BaseStruct):
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    payload_format_version: typing.Optional[models.aws_apigatewayv2.PayloadFormatVersionDef] = pydantic.Field(None, description='Version of the payload sent to the lambda handler. Default: PayloadFormatVersion.VERSION_2_0\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_apigatewayv2 as apigatewayv2\n    from aws_cdk import aws_apigatewayv2_integrations as apigatewayv2_integrations\n\n    # parameter_mapping: apigatewayv2.ParameterMapping\n    # payload_format_version: apigatewayv2.PayloadFormatVersion\n\n    http_lambda_integration_props = apigatewayv2_integrations.HttpLambdaIntegrationProps(\n        parameter_mapping=parameter_mapping,\n        payload_format_version=payload_format_version,\n        timeout=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['parameter_mapping', 'payload_format_version', 'timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpLambdaIntegrationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpNlbIntegrationProps
class HttpNlbIntegrationPropsDef(BaseStruct):
    method: typing.Optional[aws_cdk.aws_apigatewayv2.HttpMethod] = pydantic.Field(None, description='The HTTP method that must be used to invoke the underlying HTTP proxy. Default: HttpMethod.ANY\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    secure_server_name: typing.Optional[str] = pydantic.Field(None, description='Specifies the server name to verified by HTTPS when calling the backend integration. Default: undefined private integration traffic will use HTTP protocol\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n')
    vpc_link: typing.Optional[typing.Union[models.aws_apigatewayv2.VpcLinkDef]] = pydantic.Field(None, description='The vpc link to be used for the private integration. Default: - a new VpcLink is created\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_apigatewayv2 as apigatewayv2\n    from aws_cdk import aws_apigatewayv2_integrations as apigatewayv2_integrations\n\n    # parameter_mapping: apigatewayv2.ParameterMapping\n    # vpc_link: apigatewayv2.VpcLink\n\n    http_nlb_integration_props = apigatewayv2_integrations.HttpNlbIntegrationProps(\n        method=apigatewayv2.HttpMethod.ANY,\n        parameter_mapping=parameter_mapping,\n        secure_server_name="secureServerName",\n        timeout=cdk.Duration.minutes(30),\n        vpc_link=vpc_link\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['method', 'parameter_mapping', 'secure_server_name', 'timeout', 'vpc_link']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpNlbIntegrationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpPrivateIntegrationOptions
class HttpPrivateIntegrationOptionsDef(BaseStruct):
    method: typing.Optional[aws_cdk.aws_apigatewayv2.HttpMethod] = pydantic.Field(None, description='The HTTP method that must be used to invoke the underlying HTTP proxy. Default: HttpMethod.ANY\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    secure_server_name: typing.Optional[str] = pydantic.Field(None, description='Specifies the server name to verified by HTTPS when calling the backend integration. Default: undefined private integration traffic will use HTTP protocol\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n')
    vpc_link: typing.Optional[typing.Union[models.aws_apigatewayv2.VpcLinkDef]] = pydantic.Field(None, description='The vpc link to be used for the private integration. Default: - a new VpcLink is created\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_apigatewayv2 as apigatewayv2\n    from aws_cdk import aws_apigatewayv2_integrations as apigatewayv2_integrations\n\n    # parameter_mapping: apigatewayv2.ParameterMapping\n    # vpc_link: apigatewayv2.VpcLink\n\n    http_private_integration_options = apigatewayv2_integrations.HttpPrivateIntegrationOptions(\n        method=apigatewayv2.HttpMethod.ANY,\n        parameter_mapping=parameter_mapping,\n        secure_server_name="secureServerName",\n        timeout=cdk.Duration.minutes(30),\n        vpc_link=vpc_link\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['method', 'parameter_mapping', 'secure_server_name', 'timeout', 'vpc_link']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpPrivateIntegrationOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpServiceDiscoveryIntegrationProps
class HttpServiceDiscoveryIntegrationPropsDef(BaseStruct):
    method: typing.Optional[aws_cdk.aws_apigatewayv2.HttpMethod] = pydantic.Field(None, description='The HTTP method that must be used to invoke the underlying HTTP proxy. Default: HttpMethod.ANY\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    secure_server_name: typing.Optional[str] = pydantic.Field(None, description='Specifies the server name to verified by HTTPS when calling the backend integration. Default: undefined private integration traffic will use HTTP protocol\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n')
    vpc_link: typing.Optional[typing.Union[models.aws_apigatewayv2.VpcLinkDef]] = pydantic.Field(None, description='The vpc link to be used for the private integration. Default: - a new VpcLink is created\n\n:exampleMetadata: infused\n\nExample::\n\n    import aws_cdk.aws_servicediscovery as servicediscovery\n    from aws_cdk.aws_apigatewayv2_integrations import HttpServiceDiscoveryIntegration\n\n\n    vpc = ec2.Vpc(self, "VPC")\n    vpc_link = apigwv2.VpcLink(self, "VpcLink", vpc=vpc)\n    namespace = servicediscovery.PrivateDnsNamespace(self, "Namespace",\n        name="boobar.com",\n        vpc=vpc\n    )\n    service = namespace.create_service("Service")\n\n    http_endpoint = apigwv2.HttpApi(self, "HttpProxyPrivateApi",\n        default_integration=HttpServiceDiscoveryIntegration("DefaultIntegration", service,\n            vpc_link=vpc_link\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['method', 'parameter_mapping', 'secure_server_name', 'timeout', 'vpc_link']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpServiceDiscoveryIntegrationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpStepFunctionsIntegrationProps
class HttpStepFunctionsIntegrationPropsDef(BaseStruct):
    state_machine: typing.Union[models.aws_stepfunctions.StateMachineDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Statemachine that Integrates with API Gateway.\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. When the subtype is either ``START_EXECUTION`` or ``START_SYNC_EXECUTION``, it is necessary to specify the ``StateMachineArn``. Conversely, when the subtype is ``STOP_EXECUTION``, the ``ExecutionArn`` must be specified. Default: - specify only ``StateMachineArn``\n')
    subtype: typing.Optional[aws_cdk.aws_apigatewayv2.HttpIntegrationSubtype] = pydantic.Field(None, description='The subtype of the HTTP integration. Only subtypes starting with STEPFUNCTIONS_ can be specified. Default: HttpIntegrationSubtype.STEPFUNCTIONS_START_EXECUTION\n\n:exampleMetadata: infused\n\nExample::\n\n    from aws_cdk.aws_apigatewayv2_integrations import HttpStepFunctionsIntegration\n    import aws_cdk.aws_stepfunctions as sfn\n\n    # state_machine: sfn.StateMachine\n    # http_api: apigwv2.HttpApi\n\n\n    http_api.add_routes(\n        path="/start",\n        methods=[apigwv2.HttpMethod.POST],\n        integration=HttpStepFunctionsIntegration("StartExecutionIntegration",\n            state_machine=state_machine,\n            subtype=apigwv2.HttpIntegrationSubtype.STEPFUNCTIONS_START_EXECUTION\n        )\n    )\n\n    http_api.add_routes(\n        path="/start-sync",\n        methods=[apigwv2.HttpMethod.POST],\n        integration=HttpStepFunctionsIntegration("StartSyncExecutionIntegration",\n            state_machine=state_machine,\n            subtype=apigwv2.HttpIntegrationSubtype.STEPFUNCTIONS_START_SYNC_EXECUTION\n        )\n    )\n\n    http_api.add_routes(\n        path="/stop",\n        methods=[apigwv2.HttpMethod.POST],\n        integration=HttpStepFunctionsIntegration("StopExecutionIntegration",\n            state_machine=state_machine,\n            subtype=apigwv2.HttpIntegrationSubtype.STEPFUNCTIONS_STOP_EXECUTION,\n            # For the `STOP_EXECUTION` subtype, it is necessary to specify the `executionArn`.\n            parameter_mapping=apigwv2.ParameterMapping().custom("ExecutionArn", "$request.querystring.executionArn")\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['state_machine', 'parameter_mapping', 'subtype']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpStepFunctionsIntegrationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_apigatewayv2_integrations.HttpStepFunctionsIntegrationPropsDefConfig] = pydantic.Field(None)


class HttpStepFunctionsIntegrationPropsDefConfig(pydantic.BaseModel):
    state_machine_config: typing.Optional[models.aws_stepfunctions.StateMachineDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.HttpUrlIntegrationProps
class HttpUrlIntegrationPropsDef(BaseStruct):
    method: typing.Optional[aws_cdk.aws_apigatewayv2.HttpMethod] = pydantic.Field(None, description='The HTTP method that must be used to invoke the underlying HTTP proxy. Default: HttpMethod.ANY\n')
    parameter_mapping: typing.Optional[models.aws_apigatewayv2.ParameterMappingDef] = pydantic.Field(None, description='Specifies how to transform HTTP requests before sending them to the backend. Default: undefined requests are sent to the backend unmodified\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_apigatewayv2 as apigatewayv2\n    from aws_cdk import aws_apigatewayv2_integrations as apigatewayv2_integrations\n\n    # parameter_mapping: apigatewayv2.ParameterMapping\n\n    http_url_integration_props = apigatewayv2_integrations.HttpUrlIntegrationProps(\n        method=apigatewayv2.HttpMethod.ANY,\n        parameter_mapping=parameter_mapping,\n        timeout=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['method', 'parameter_mapping', 'timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.HttpUrlIntegrationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.WebSocketAwsIntegrationProps
class WebSocketAwsIntegrationPropsDef(BaseStruct):
    integration_method: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Specifies the integration's HTTP method type.\n")
    integration_uri: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Integration URI.\n')
    content_handling: typing.Optional[aws_cdk.aws_apigatewayv2.ContentHandling] = pydantic.Field(None, description='Specifies how to handle response payload content type conversions. Default: - The response payload will be passed through from the integration response to the route response or method response without modification.\n')
    credentials_role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description='Specifies the credentials role required for the integration. Default: - No credential role provided.\n')
    passthrough_behavior: typing.Optional[aws_cdk.aws_apigatewayv2.PassthroughBehavior] = pydantic.Field(None, description='Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Default: - No passthrough behavior required.\n')
    request_parameters: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='The request parameters that API Gateway sends with the backend request. Specify request parameters as key-value pairs (string-to-string mappings), with a destination as the key and a source as the value. Default: - No request parameter provided to the integration.\n')
    request_templates: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A map of Apache Velocity templates that are applied on the request payload. Example:: { "application/json": "{ \\"statusCode\\": 200 }" } Default: - No request template provided to the integration.\n')
    template_selection_expression: typing.Optional[str] = pydantic.Field(None, description='The template selection expression for the integration. Default: - No template selection expression provided.\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n\n:exampleMetadata: infused\n\nExample::\n\n    from aws_cdk.aws_apigatewayv2_integrations import WebSocketAwsIntegration\n    import aws_cdk.aws_dynamodb as dynamodb\n    import aws_cdk.aws_iam as iam\n\n    # api_role: iam.Role\n    # table: dynamodb.Table\n\n\n    web_socket_api = apigwv2.WebSocketApi(self, "mywsapi")\n    apigwv2.WebSocketStage(self, "mystage",\n        web_socket_api=web_socket_api,\n        stage_name="dev",\n        auto_deploy=True\n    )\n    web_socket_api.add_route("$connect",\n        integration=WebSocketAwsIntegration("DynamodbPutItem",\n            integration_uri=f"arn:aws:apigateway:{this.region}:dynamodb:action/PutItem",\n            integration_method=apigwv2.HttpMethod.POST,\n            credentials_role=api_role,\n            request_templates={\n                "application/json": JSON.stringify({\n                    "TableName": table.table_name,\n                    "Item": {\n                        "id": {\n                            "S": "$context.requestId"\n                        }\n                    }\n                })\n            }\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['integration_method', 'integration_uri', 'content_handling', 'credentials_role', 'passthrough_behavior', 'request_parameters', 'request_templates', 'template_selection_expression', 'timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.WebSocketAwsIntegrationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_apigatewayv2_integrations.WebSocketLambdaIntegrationProps
class WebSocketLambdaIntegrationPropsDef(BaseStruct):
    content_handling: typing.Optional[aws_cdk.aws_apigatewayv2.ContentHandling] = pydantic.Field(None, description='Specifies how to handle response payload content type conversions. Default: - The response payload will be passed through from the integration response to the route response or method response without modification.\n')
    timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The maximum amount of time an integration will run before it returns without a response. Must be between 50 milliseconds and 29 seconds. Default: Duration.seconds(29)\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_apigatewayv2 as apigatewayv2\n    from aws_cdk import aws_apigatewayv2_integrations as apigatewayv2_integrations\n\n    web_socket_lambda_integration_props = apigatewayv2_integrations.WebSocketLambdaIntegrationProps(\n        content_handling=apigatewayv2.ContentHandling.CONVERT_TO_BINARY,\n        timeout=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_handling', 'timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_apigatewayv2_integrations.WebSocketLambdaIntegrationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    HttpAlbIntegration: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpAlbIntegrationDef]] = pydantic.Field(None)
    HttpLambdaIntegration: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpLambdaIntegrationDef]] = pydantic.Field(None)
    HttpNlbIntegration: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpNlbIntegrationDef]] = pydantic.Field(None)
    HttpServiceDiscoveryIntegration: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpServiceDiscoveryIntegrationDef]] = pydantic.Field(None)
    HttpStepFunctionsIntegration: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpStepFunctionsIntegrationDef]] = pydantic.Field(None)
    HttpUrlIntegration: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpUrlIntegrationDef]] = pydantic.Field(None)
    WebSocketAwsIntegration: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.WebSocketAwsIntegrationDef]] = pydantic.Field(None)
    WebSocketLambdaIntegration: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.WebSocketLambdaIntegrationDef]] = pydantic.Field(None)
    WebSocketMockIntegration: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.WebSocketMockIntegrationDef]] = pydantic.Field(None)
    HttpAlbIntegrationProps: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpAlbIntegrationPropsDef]] = pydantic.Field(None)
    HttpLambdaIntegrationProps: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpLambdaIntegrationPropsDef]] = pydantic.Field(None)
    HttpNlbIntegrationProps: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpNlbIntegrationPropsDef]] = pydantic.Field(None)
    HttpPrivateIntegrationOptions: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpPrivateIntegrationOptionsDef]] = pydantic.Field(None)
    HttpServiceDiscoveryIntegrationProps: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpServiceDiscoveryIntegrationPropsDef]] = pydantic.Field(None)
    HttpStepFunctionsIntegrationProps: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpStepFunctionsIntegrationPropsDef]] = pydantic.Field(None)
    HttpUrlIntegrationProps: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.HttpUrlIntegrationPropsDef]] = pydantic.Field(None)
    WebSocketAwsIntegrationProps: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.WebSocketAwsIntegrationPropsDef]] = pydantic.Field(None)
    WebSocketLambdaIntegrationProps: typing.Optional[dict[str, models.aws_apigatewayv2_integrations.WebSocketLambdaIntegrationPropsDef]] = pydantic.Field(None)
    ...

import models
