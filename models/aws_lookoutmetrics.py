from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAlert.ActionProperty
class CfnAlert_ActionPropertyDef(BaseStruct):
    lambda_configuration: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAlert_LambdaConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for an AWS Lambda channel.\n')
    sns_configuration: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAlert_SNSConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A configuration for an Amazon SNS channel.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-alert-action.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    action_property = lookoutmetrics.CfnAlert.ActionProperty(\n        lambda_configuration=lookoutmetrics.CfnAlert.LambdaConfigurationProperty(\n            lambda_arn="lambdaArn",\n            role_arn="roleArn"\n        ),\n        sns_configuration=lookoutmetrics.CfnAlert.SNSConfigurationProperty(\n            role_arn="roleArn",\n            sns_topic_arn="snsTopicArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_configuration', 'sns_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAlert.ActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAlert.LambdaConfigurationProperty
class CfnAlert_LambdaConfigurationPropertyDef(BaseStruct):
    lambda_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Lambda function.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of an IAM role that has permission to invoke the Lambda function.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-alert-lambdaconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    lambda_configuration_property = lookoutmetrics.CfnAlert.LambdaConfigurationProperty(\n        lambda_arn="lambdaArn",\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_arn', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAlert.LambdaConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAlert.SNSConfigurationProperty
class CfnAlert_SNSConfigurationPropertyDef(BaseStruct):
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the IAM role that has access to the target SNS topic.\n')
    sns_topic_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the target SNS topic.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-alert-snsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    s_nSConfiguration_property = lookoutmetrics.CfnAlert.SNSConfigurationProperty(\n        role_arn="roleArn",\n        sns_topic_arn="snsTopicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role_arn', 'sns_topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAlert.SNSConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.AnomalyDetectorConfigProperty
class CfnAnomalyDetector_AnomalyDetectorConfigPropertyDef(BaseStruct):
    anomaly_detector_frequency: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The frequency at which the detector analyzes its source data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-anomalydetectorconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    anomaly_detector_config_property = lookoutmetrics.CfnAnomalyDetector.AnomalyDetectorConfigProperty(\n        anomaly_detector_frequency="anomalyDetectorFrequency"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['anomaly_detector_frequency']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.AnomalyDetectorConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.AppFlowConfigProperty
class CfnAnomalyDetector_AppFlowConfigPropertyDef(BaseStruct):
    flow_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='name of the flow.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An IAM role that gives Amazon Lookout for Metrics permission to access the flow.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-appflowconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    app_flow_config_property = lookoutmetrics.CfnAnomalyDetector.AppFlowConfigProperty(\n        flow_name="flowName",\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['flow_name', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.AppFlowConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.CloudwatchConfigProperty
class CfnAnomalyDetector_CloudwatchConfigPropertyDef(BaseStruct):
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An IAM role that gives Amazon Lookout for Metrics permission to access data in Amazon CloudWatch.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-cloudwatchconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    cloudwatch_config_property = lookoutmetrics.CfnAnomalyDetector.CloudwatchConfigProperty(\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.CloudwatchConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.CsvFormatDescriptorProperty
class CfnAnomalyDetector_CsvFormatDescriptorPropertyDef(BaseStruct):
    charset: typing.Optional[str] = pydantic.Field(None, description='The character set in which the source CSV file is written.\n')
    contains_header: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether or not the source CSV file contains a header.\n')
    delimiter: typing.Optional[str] = pydantic.Field(None, description='The character used to delimit the source CSV file.\n')
    file_compression: typing.Optional[str] = pydantic.Field(None, description='The level of compression of the source CSV file.\n')
    header_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of the source CSV file's headers, if any.\n")
    quote_symbol: typing.Optional[str] = pydantic.Field(None, description='The character used as a quote character.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-csvformatdescriptor.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    csv_format_descriptor_property = lookoutmetrics.CfnAnomalyDetector.CsvFormatDescriptorProperty(\n        charset="charset",\n        contains_header=False,\n        delimiter="delimiter",\n        file_compression="fileCompression",\n        header_list=["headerList"],\n        quote_symbol="quoteSymbol"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['charset', 'contains_header', 'delimiter', 'file_compression', 'header_list', 'quote_symbol']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.CsvFormatDescriptorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.FileFormatDescriptorProperty
class CfnAnomalyDetector_FileFormatDescriptorPropertyDef(BaseStruct):
    csv_format_descriptor: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_CsvFormatDescriptorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about how a source CSV data file should be analyzed.\n')
    json_format_descriptor: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_JsonFormatDescriptorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about how a source JSON data file should be analyzed.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-fileformatdescriptor.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    file_format_descriptor_property = lookoutmetrics.CfnAnomalyDetector.FileFormatDescriptorProperty(\n        csv_format_descriptor=lookoutmetrics.CfnAnomalyDetector.CsvFormatDescriptorProperty(\n            charset="charset",\n            contains_header=False,\n            delimiter="delimiter",\n            file_compression="fileCompression",\n            header_list=["headerList"],\n            quote_symbol="quoteSymbol"\n        ),\n        json_format_descriptor=lookoutmetrics.CfnAnomalyDetector.JsonFormatDescriptorProperty(\n            charset="charset",\n            file_compression="fileCompression"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv_format_descriptor', 'json_format_descriptor']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.FileFormatDescriptorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.JsonFormatDescriptorProperty
class CfnAnomalyDetector_JsonFormatDescriptorPropertyDef(BaseStruct):
    charset: typing.Optional[str] = pydantic.Field(None, description='The character set in which the source JSON file is written.\n')
    file_compression: typing.Optional[str] = pydantic.Field(None, description='The level of compression of the source CSV file.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-jsonformatdescriptor.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    json_format_descriptor_property = lookoutmetrics.CfnAnomalyDetector.JsonFormatDescriptorProperty(\n        charset="charset",\n        file_compression="fileCompression"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['charset', 'file_compression']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.JsonFormatDescriptorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.MetricProperty
class CfnAnomalyDetector_MetricPropertyDef(BaseStruct):
    aggregation_function: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The function with which the metric is calculated.\n')
    metric_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the metric.\n')
    namespace: typing.Optional[str] = pydantic.Field(None, description='The namespace for the metric.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-metric.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    metric_property = lookoutmetrics.CfnAnomalyDetector.MetricProperty(\n        aggregation_function="aggregationFunction",\n        metric_name="metricName",\n\n        # the properties below are optional\n        namespace="namespace"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aggregation_function', 'metric_name', 'namespace']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.MetricProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.MetricSetProperty
class CfnAnomalyDetector_MetricSetPropertyDef(BaseStruct):
    metric_list: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_MetricPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of metrics that the dataset will contain.\n')
    metric_set_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the dataset.\n')
    metric_source: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_MetricSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Contains information about how the source data should be interpreted.\n')
    dimension_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of the fields you want to treat as dimensions.\n')
    metric_set_description: typing.Optional[str] = pydantic.Field(None, description='A description of the dataset you are creating.\n')
    metric_set_frequency: typing.Optional[str] = pydantic.Field(None, description='The frequency with which the source data will be analyzed for anomalies.\n')
    offset: typing.Union[int, float, None] = pydantic.Field(None, description='After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.\n')
    timestamp_column: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_TimestampColumnPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about the column used for tracking time in your source data.\n')
    timezone: typing.Optional[str] = pydantic.Field(None, description='The time zone in which your source data was recorded.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-metricset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    metric_set_property = lookoutmetrics.CfnAnomalyDetector.MetricSetProperty(\n        metric_list=[lookoutmetrics.CfnAnomalyDetector.MetricProperty(\n            aggregation_function="aggregationFunction",\n            metric_name="metricName",\n\n            # the properties below are optional\n            namespace="namespace"\n        )],\n        metric_set_name="metricSetName",\n        metric_source=lookoutmetrics.CfnAnomalyDetector.MetricSourceProperty(\n            app_flow_config=lookoutmetrics.CfnAnomalyDetector.AppFlowConfigProperty(\n                flow_name="flowName",\n                role_arn="roleArn"\n            ),\n            cloudwatch_config=lookoutmetrics.CfnAnomalyDetector.CloudwatchConfigProperty(\n                role_arn="roleArn"\n            ),\n            rds_source_config=lookoutmetrics.CfnAnomalyDetector.RDSSourceConfigProperty(\n                database_host="databaseHost",\n                database_name="databaseName",\n                database_port=123,\n                db_instance_identifier="dbInstanceIdentifier",\n                role_arn="roleArn",\n                secret_manager_arn="secretManagerArn",\n                table_name="tableName",\n                vpc_configuration=lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty(\n                    security_group_id_list=["securityGroupIdList"],\n                    subnet_id_list=["subnetIdList"]\n                )\n            ),\n            redshift_source_config=lookoutmetrics.CfnAnomalyDetector.RedshiftSourceConfigProperty(\n                cluster_identifier="clusterIdentifier",\n                database_host="databaseHost",\n                database_name="databaseName",\n                database_port=123,\n                role_arn="roleArn",\n                secret_manager_arn="secretManagerArn",\n                table_name="tableName",\n                vpc_configuration=lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty(\n                    security_group_id_list=["securityGroupIdList"],\n                    subnet_id_list=["subnetIdList"]\n                )\n            ),\n            s3_source_config=lookoutmetrics.CfnAnomalyDetector.S3SourceConfigProperty(\n                file_format_descriptor=lookoutmetrics.CfnAnomalyDetector.FileFormatDescriptorProperty(\n                    csv_format_descriptor=lookoutmetrics.CfnAnomalyDetector.CsvFormatDescriptorProperty(\n                        charset="charset",\n                        contains_header=False,\n                        delimiter="delimiter",\n                        file_compression="fileCompression",\n                        header_list=["headerList"],\n                        quote_symbol="quoteSymbol"\n                    ),\n                    json_format_descriptor=lookoutmetrics.CfnAnomalyDetector.JsonFormatDescriptorProperty(\n                        charset="charset",\n                        file_compression="fileCompression"\n                    )\n                ),\n                role_arn="roleArn",\n\n                # the properties below are optional\n                historical_data_path_list=["historicalDataPathList"],\n                templated_path_list=["templatedPathList"]\n            )\n        ),\n\n        # the properties below are optional\n        dimension_list=["dimensionList"],\n        metric_set_description="metricSetDescription",\n        metric_set_frequency="metricSetFrequency",\n        offset=123,\n        timestamp_column=lookoutmetrics.CfnAnomalyDetector.TimestampColumnProperty(\n            column_format="columnFormat",\n            column_name="columnName"\n        ),\n        timezone="timezone"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['metric_list', 'metric_set_name', 'metric_source', 'dimension_list', 'metric_set_description', 'metric_set_frequency', 'offset', 'timestamp_column', 'timezone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.MetricSetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.MetricSourceProperty
class CfnAnomalyDetector_MetricSourcePropertyDef(BaseStruct):
    app_flow_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_AppFlowConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details about an AppFlow datasource.\n')
    cloudwatch_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_CloudwatchConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details about an Amazon CloudWatch monitoring datasource.\n')
    rds_source_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_RDSSourceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details about an Amazon Relational Database Service (RDS) datasource.\n')
    redshift_source_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_RedshiftSourceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details about an Amazon Redshift database datasource.\n')
    s3_source_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_S3SourceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about the configuration of the S3 bucket that contains source files.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-metricsource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    metric_source_property = lookoutmetrics.CfnAnomalyDetector.MetricSourceProperty(\n        app_flow_config=lookoutmetrics.CfnAnomalyDetector.AppFlowConfigProperty(\n            flow_name="flowName",\n            role_arn="roleArn"\n        ),\n        cloudwatch_config=lookoutmetrics.CfnAnomalyDetector.CloudwatchConfigProperty(\n            role_arn="roleArn"\n        ),\n        rds_source_config=lookoutmetrics.CfnAnomalyDetector.RDSSourceConfigProperty(\n            database_host="databaseHost",\n            database_name="databaseName",\n            database_port=123,\n            db_instance_identifier="dbInstanceIdentifier",\n            role_arn="roleArn",\n            secret_manager_arn="secretManagerArn",\n            table_name="tableName",\n            vpc_configuration=lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty(\n                security_group_id_list=["securityGroupIdList"],\n                subnet_id_list=["subnetIdList"]\n            )\n        ),\n        redshift_source_config=lookoutmetrics.CfnAnomalyDetector.RedshiftSourceConfigProperty(\n            cluster_identifier="clusterIdentifier",\n            database_host="databaseHost",\n            database_name="databaseName",\n            database_port=123,\n            role_arn="roleArn",\n            secret_manager_arn="secretManagerArn",\n            table_name="tableName",\n            vpc_configuration=lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty(\n                security_group_id_list=["securityGroupIdList"],\n                subnet_id_list=["subnetIdList"]\n            )\n        ),\n        s3_source_config=lookoutmetrics.CfnAnomalyDetector.S3SourceConfigProperty(\n            file_format_descriptor=lookoutmetrics.CfnAnomalyDetector.FileFormatDescriptorProperty(\n                csv_format_descriptor=lookoutmetrics.CfnAnomalyDetector.CsvFormatDescriptorProperty(\n                    charset="charset",\n                    contains_header=False,\n                    delimiter="delimiter",\n                    file_compression="fileCompression",\n                    header_list=["headerList"],\n                    quote_symbol="quoteSymbol"\n                ),\n                json_format_descriptor=lookoutmetrics.CfnAnomalyDetector.JsonFormatDescriptorProperty(\n                    charset="charset",\n                    file_compression="fileCompression"\n                )\n            ),\n            role_arn="roleArn",\n\n            # the properties below are optional\n            historical_data_path_list=["historicalDataPathList"],\n            templated_path_list=["templatedPathList"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_flow_config', 'cloudwatch_config', 'rds_source_config', 'redshift_source_config', 's3_source_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.MetricSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.RDSSourceConfigProperty
class CfnAnomalyDetector_RDSSourceConfigPropertyDef(BaseStruct):
    database_host: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The host name of the database.\n')
    database_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the RDS database.\n')
    database_port: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The port number where the database can be accessed.\n')
    db_instance_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A string identifying the database instance.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the role.\n')
    secret_manager_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the AWS Secrets Manager role.\n')
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the table in the database.\n')
    vpc_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_VpcConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='An object containing information about the Amazon Virtual Private Cloud (VPC) configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-rdssourceconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    r_dSSource_config_property = lookoutmetrics.CfnAnomalyDetector.RDSSourceConfigProperty(\n        database_host="databaseHost",\n        database_name="databaseName",\n        database_port=123,\n        db_instance_identifier="dbInstanceIdentifier",\n        role_arn="roleArn",\n        secret_manager_arn="secretManagerArn",\n        table_name="tableName",\n        vpc_configuration=lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty(\n            security_group_id_list=["securityGroupIdList"],\n            subnet_id_list=["subnetIdList"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['database_host', 'database_name', 'database_port', 'db_instance_identifier', 'role_arn', 'secret_manager_arn', 'table_name', 'vpc_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.RDSSourceConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.RedshiftSourceConfigProperty
class CfnAnomalyDetector_RedshiftSourceConfigPropertyDef(BaseStruct):
    cluster_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A string identifying the Redshift cluster.\n')
    database_host: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the database host.\n')
    database_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Redshift database name.\n')
    database_port: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The port number where the database can be accessed.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the role providing access to the database.\n')
    secret_manager_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the AWS Secrets Manager role.\n')
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The table name of the Redshift database.\n')
    vpc_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_VpcConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Contains information about the Amazon Virtual Private Cloud (VPC) configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-redshiftsourceconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    redshift_source_config_property = lookoutmetrics.CfnAnomalyDetector.RedshiftSourceConfigProperty(\n        cluster_identifier="clusterIdentifier",\n        database_host="databaseHost",\n        database_name="databaseName",\n        database_port=123,\n        role_arn="roleArn",\n        secret_manager_arn="secretManagerArn",\n        table_name="tableName",\n        vpc_configuration=lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty(\n            security_group_id_list=["securityGroupIdList"],\n            subnet_id_list=["subnetIdList"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_identifier', 'database_host', 'database_name', 'database_port', 'role_arn', 'secret_manager_arn', 'table_name', 'vpc_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.RedshiftSourceConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.S3SourceConfigProperty
class CfnAnomalyDetector_S3SourceConfigPropertyDef(BaseStruct):
    file_format_descriptor: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_FileFormatDescriptorPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="Contains information about a source file's formatting.\n")
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of an IAM role that has read and write access permissions to the source S3 bucket.\n')
    historical_data_path_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of paths to the historical data files.\n')
    templated_path_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of templated paths to the source files.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-s3sourceconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    s3_source_config_property = lookoutmetrics.CfnAnomalyDetector.S3SourceConfigProperty(\n        file_format_descriptor=lookoutmetrics.CfnAnomalyDetector.FileFormatDescriptorProperty(\n            csv_format_descriptor=lookoutmetrics.CfnAnomalyDetector.CsvFormatDescriptorProperty(\n                charset="charset",\n                contains_header=False,\n                delimiter="delimiter",\n                file_compression="fileCompression",\n                header_list=["headerList"],\n                quote_symbol="quoteSymbol"\n            ),\n            json_format_descriptor=lookoutmetrics.CfnAnomalyDetector.JsonFormatDescriptorProperty(\n                charset="charset",\n                file_compression="fileCompression"\n            )\n        ),\n        role_arn="roleArn",\n\n        # the properties below are optional\n        historical_data_path_list=["historicalDataPathList"],\n        templated_path_list=["templatedPathList"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['file_format_descriptor', 'role_arn', 'historical_data_path_list', 'templated_path_list']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.S3SourceConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.TimestampColumnProperty
class CfnAnomalyDetector_TimestampColumnPropertyDef(BaseStruct):
    column_format: typing.Optional[str] = pydantic.Field(None, description='The format of the timestamp column.\n')
    column_name: typing.Optional[str] = pydantic.Field(None, description='The name of the timestamp column.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-timestampcolumn.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    timestamp_column_property = lookoutmetrics.CfnAnomalyDetector.TimestampColumnProperty(\n        column_format="columnFormat",\n        column_name="columnName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['column_format', 'column_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.TimestampColumnProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty
class CfnAnomalyDetector_VpcConfigurationPropertyDef(BaseStruct):
    security_group_id_list: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An array of strings containing the list of security groups.\n')
    subnet_id_list: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An array of strings containing the Amazon VPC subnet IDs (e.g., ``subnet-0bb1c79de3EXAMPLE`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lookoutmetrics-anomalydetector-vpcconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    vpc_configuration_property = lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty(\n        security_group_id_list=["securityGroupIdList"],\n        subnet_id_list=["subnetIdList"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_id_list', 'subnet_id_list']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAlert
class CfnAlertDef(BaseCfnResource):
    action: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lookoutmetrics.CfnAlert_ActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Action that will be triggered when there is an alert.\n')
    alert_sensitivity_threshold: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='An integer from 0 to 100 specifying the alert sensitivity threshold.\n')
    anomaly_detector_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the detector to which the alert is attached.\n')
    alert_description: typing.Optional[str] = pydantic.Field(None, description='A description of the alert.\n')
    alert_name: typing.Optional[str] = pydantic.Field(None, description='The name of the alert.')
    _init_params: typing.ClassVar[list[str]] = ['action', 'alert_sensitivity_threshold', 'anomaly_detector_arn', 'alert_description', 'alert_name']
    _method_names: typing.ClassVar[list[str]] = ['ActionProperty', 'LambdaConfigurationProperty', 'SNSConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAlert'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAlertDefConfig] = pydantic.Field(None)


class CfnAlertDefConfig(pydantic.BaseModel):
    ActionProperty: typing.Optional[list[CfnAlertDefActionpropertyParams]] = pydantic.Field(None, description='')
    LambdaConfigurationProperty: typing.Optional[list[CfnAlertDefLambdaconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SNSConfigurationProperty: typing.Optional[list[CfnAlertDefSnsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnAlertDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAlertDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAlertDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAlertDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAlertDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAlertDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAlertDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAlertDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAlertDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAlertDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAlertDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAlertDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAlertDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnAlertDefActionpropertyParams(pydantic.BaseModel):
    lambda_configuration: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAlert_LambdaConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sns_configuration: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAlert_SNSConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAlertDefLambdaconfigurationpropertyParams(pydantic.BaseModel):
    lambda_arn: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    ...

class CfnAlertDefSnsconfigurationpropertyParams(pydantic.BaseModel):
    role_arn: str = pydantic.Field(..., description='')
    sns_topic_arn: str = pydantic.Field(..., description='')
    ...

class CfnAlertDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAlertDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAlertDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAlertDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAlertDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAlertDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAlertDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAlertDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAlertDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAlertDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAlertDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAlertDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAlertDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAlertDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector
class CfnAnomalyDetectorDef(BaseCfnResource):
    anomaly_detector_config: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_AnomalyDetectorConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Contains information about the configuration of the anomaly detector.\n')
    metric_set_list: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_MetricSetPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The detector's dataset.\n")
    anomaly_detector_description: typing.Optional[str] = pydantic.Field(None, description='A description of the detector.\n')
    anomaly_detector_name: typing.Optional[str] = pydantic.Field(None, description='The name of the detector.\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the KMS key to use to encrypt your data.')
    _init_params: typing.ClassVar[list[str]] = ['anomaly_detector_config', 'metric_set_list', 'anomaly_detector_description', 'anomaly_detector_name', 'kms_key_arn']
    _method_names: typing.ClassVar[list[str]] = ['AnomalyDetectorConfigProperty', 'AppFlowConfigProperty', 'CloudwatchConfigProperty', 'CsvFormatDescriptorProperty', 'FileFormatDescriptorProperty', 'JsonFormatDescriptorProperty', 'MetricProperty', 'MetricSetProperty', 'MetricSourceProperty', 'RDSSourceConfigProperty', 'RedshiftSourceConfigProperty', 'S3SourceConfigProperty', 'TimestampColumnProperty', 'VpcConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetector'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAnomalyDetectorDefConfig] = pydantic.Field(None)


class CfnAnomalyDetectorDefConfig(pydantic.BaseModel):
    AnomalyDetectorConfigProperty: typing.Optional[list[CfnAnomalyDetectorDefAnomalydetectorconfigpropertyParams]] = pydantic.Field(None, description='')
    AppFlowConfigProperty: typing.Optional[list[CfnAnomalyDetectorDefAppflowconfigpropertyParams]] = pydantic.Field(None, description='')
    CloudwatchConfigProperty: typing.Optional[list[CfnAnomalyDetectorDefCloudwatchconfigpropertyParams]] = pydantic.Field(None, description='')
    CsvFormatDescriptorProperty: typing.Optional[list[CfnAnomalyDetectorDefCsvformatdescriptorpropertyParams]] = pydantic.Field(None, description='')
    FileFormatDescriptorProperty: typing.Optional[list[CfnAnomalyDetectorDefFileformatdescriptorpropertyParams]] = pydantic.Field(None, description='')
    JsonFormatDescriptorProperty: typing.Optional[list[CfnAnomalyDetectorDefJsonformatdescriptorpropertyParams]] = pydantic.Field(None, description='')
    MetricProperty: typing.Optional[list[CfnAnomalyDetectorDefMetricpropertyParams]] = pydantic.Field(None, description='')
    MetricSetProperty: typing.Optional[list[CfnAnomalyDetectorDefMetricsetpropertyParams]] = pydantic.Field(None, description='')
    MetricSourceProperty: typing.Optional[list[CfnAnomalyDetectorDefMetricsourcepropertyParams]] = pydantic.Field(None, description='')
    RDSSourceConfigProperty: typing.Optional[list[CfnAnomalyDetectorDefRdssourceconfigpropertyParams]] = pydantic.Field(None, description='')
    RedshiftSourceConfigProperty: typing.Optional[list[CfnAnomalyDetectorDefRedshiftsourceconfigpropertyParams]] = pydantic.Field(None, description='')
    S3SourceConfigProperty: typing.Optional[list[CfnAnomalyDetectorDefS3SourceconfigpropertyParams]] = pydantic.Field(None, description='')
    TimestampColumnProperty: typing.Optional[list[CfnAnomalyDetectorDefTimestampcolumnpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigurationProperty: typing.Optional[list[CfnAnomalyDetectorDefVpcconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnAnomalyDetectorDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAnomalyDetectorDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAnomalyDetectorDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAnomalyDetectorDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAnomalyDetectorDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAnomalyDetectorDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAnomalyDetectorDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAnomalyDetectorDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAnomalyDetectorDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAnomalyDetectorDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAnomalyDetectorDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAnomalyDetectorDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAnomalyDetectorDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnAnomalyDetectorDefAnomalydetectorconfigpropertyParams(pydantic.BaseModel):
    anomaly_detector_frequency: str = pydantic.Field(..., description='')
    ...

class CfnAnomalyDetectorDefAppflowconfigpropertyParams(pydantic.BaseModel):
    flow_name: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    ...

class CfnAnomalyDetectorDefCloudwatchconfigpropertyParams(pydantic.BaseModel):
    role_arn: str = pydantic.Field(..., description='')
    ...

class CfnAnomalyDetectorDefCsvformatdescriptorpropertyParams(pydantic.BaseModel):
    charset: typing.Optional[str] = pydantic.Field(None, description='')
    contains_header: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    delimiter: typing.Optional[str] = pydantic.Field(None, description='')
    file_compression: typing.Optional[str] = pydantic.Field(None, description='')
    header_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    quote_symbol: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAnomalyDetectorDefFileformatdescriptorpropertyParams(pydantic.BaseModel):
    csv_format_descriptor: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_CsvFormatDescriptorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_format_descriptor: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_JsonFormatDescriptorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAnomalyDetectorDefJsonformatdescriptorpropertyParams(pydantic.BaseModel):
    charset: typing.Optional[str] = pydantic.Field(None, description='')
    file_compression: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAnomalyDetectorDefMetricpropertyParams(pydantic.BaseModel):
    aggregation_function: str = pydantic.Field(..., description='')
    metric_name: str = pydantic.Field(..., description='')
    namespace: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAnomalyDetectorDefMetricsetpropertyParams(pydantic.BaseModel):
    metric_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_MetricPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    metric_set_name: str = pydantic.Field(..., description='')
    metric_source: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_MetricSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    dimension_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    metric_set_description: typing.Optional[str] = pydantic.Field(None, description='')
    metric_set_frequency: typing.Optional[str] = pydantic.Field(None, description='')
    offset: typing.Union[int, float, None] = pydantic.Field(None, description='')
    timestamp_column: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_TimestampColumnPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timezone: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAnomalyDetectorDefMetricsourcepropertyParams(pydantic.BaseModel):
    app_flow_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_AppFlowConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cloudwatch_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_CloudwatchConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rds_source_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_RDSSourceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    redshift_source_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_RedshiftSourceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_source_config: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_S3SourceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAnomalyDetectorDefRdssourceconfigpropertyParams(pydantic.BaseModel):
    database_host: str = pydantic.Field(..., description='')
    database_name: str = pydantic.Field(..., description='')
    database_port: typing.Union[int, float] = pydantic.Field(..., description='')
    db_instance_identifier: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    secret_manager_arn: str = pydantic.Field(..., description='')
    table_name: str = pydantic.Field(..., description='')
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_VpcConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnAnomalyDetectorDefRedshiftsourceconfigpropertyParams(pydantic.BaseModel):
    cluster_identifier: str = pydantic.Field(..., description='')
    database_host: str = pydantic.Field(..., description='')
    database_name: str = pydantic.Field(..., description='')
    database_port: typing.Union[int, float] = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    secret_manager_arn: str = pydantic.Field(..., description='')
    table_name: str = pydantic.Field(..., description='')
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_VpcConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnAnomalyDetectorDefS3SourceconfigpropertyParams(pydantic.BaseModel):
    file_format_descriptor: typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_FileFormatDescriptorPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    historical_data_path_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    templated_path_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnAnomalyDetectorDefTimestampcolumnpropertyParams(pydantic.BaseModel):
    column_format: typing.Optional[str] = pydantic.Field(None, description='')
    column_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAnomalyDetectorDefVpcconfigurationpropertyParams(pydantic.BaseModel):
    security_group_id_list: typing.Sequence[str] = pydantic.Field(..., description='')
    subnet_id_list: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnAnomalyDetectorDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAnomalyDetectorDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAnomalyDetectorDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAnomalyDetectorDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAnomalyDetectorDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAnomalyDetectorDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAnomalyDetectorDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAnomalyDetectorDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAnomalyDetectorDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAnomalyDetectorDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAnomalyDetectorDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAnomalyDetectorDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAnomalyDetectorDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAnomalyDetectorDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAlertProps
class CfnAlertPropsDef(BaseCfnProperty):
    action: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lookoutmetrics.CfnAlert_ActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Action that will be triggered when there is an alert.\n')
    alert_sensitivity_threshold: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='An integer from 0 to 100 specifying the alert sensitivity threshold.\n')
    anomaly_detector_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the detector to which the alert is attached.\n')
    alert_description: typing.Optional[str] = pydantic.Field(None, description='A description of the alert.\n')
    alert_name: typing.Optional[str] = pydantic.Field(None, description='The name of the alert.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lookoutmetrics-alert.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    cfn_alert_props = lookoutmetrics.CfnAlertProps(\n        action=lookoutmetrics.CfnAlert.ActionProperty(\n            lambda_configuration=lookoutmetrics.CfnAlert.LambdaConfigurationProperty(\n                lambda_arn="lambdaArn",\n                role_arn="roleArn"\n            ),\n            sns_configuration=lookoutmetrics.CfnAlert.SNSConfigurationProperty(\n                role_arn="roleArn",\n                sns_topic_arn="snsTopicArn"\n            )\n        ),\n        alert_sensitivity_threshold=123,\n        anomaly_detector_arn="anomalyDetectorArn",\n\n        # the properties below are optional\n        alert_description="alertDescription",\n        alert_name="alertName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'alert_sensitivity_threshold', 'anomaly_detector_arn', 'alert_description', 'alert_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAlertProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lookoutmetrics.CfnAnomalyDetectorProps
class CfnAnomalyDetectorPropsDef(BaseCfnProperty):
    anomaly_detector_config: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_AnomalyDetectorConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Contains information about the configuration of the anomaly detector.\n')
    metric_set_list: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lookoutmetrics.CfnAnomalyDetector_MetricSetPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The detector's dataset.\n")
    anomaly_detector_description: typing.Optional[str] = pydantic.Field(None, description='A description of the detector.\n')
    anomaly_detector_name: typing.Optional[str] = pydantic.Field(None, description='The name of the detector.\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the KMS key to use to encrypt your data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lookoutmetrics-anomalydetector.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lookoutmetrics as lookoutmetrics\n\n    cfn_anomaly_detector_props = lookoutmetrics.CfnAnomalyDetectorProps(\n        anomaly_detector_config=lookoutmetrics.CfnAnomalyDetector.AnomalyDetectorConfigProperty(\n            anomaly_detector_frequency="anomalyDetectorFrequency"\n        ),\n        metric_set_list=[lookoutmetrics.CfnAnomalyDetector.MetricSetProperty(\n            metric_list=[lookoutmetrics.CfnAnomalyDetector.MetricProperty(\n                aggregation_function="aggregationFunction",\n                metric_name="metricName",\n\n                # the properties below are optional\n                namespace="namespace"\n            )],\n            metric_set_name="metricSetName",\n            metric_source=lookoutmetrics.CfnAnomalyDetector.MetricSourceProperty(\n                app_flow_config=lookoutmetrics.CfnAnomalyDetector.AppFlowConfigProperty(\n                    flow_name="flowName",\n                    role_arn="roleArn"\n                ),\n                cloudwatch_config=lookoutmetrics.CfnAnomalyDetector.CloudwatchConfigProperty(\n                    role_arn="roleArn"\n                ),\n                rds_source_config=lookoutmetrics.CfnAnomalyDetector.RDSSourceConfigProperty(\n                    database_host="databaseHost",\n                    database_name="databaseName",\n                    database_port=123,\n                    db_instance_identifier="dbInstanceIdentifier",\n                    role_arn="roleArn",\n                    secret_manager_arn="secretManagerArn",\n                    table_name="tableName",\n                    vpc_configuration=lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty(\n                        security_group_id_list=["securityGroupIdList"],\n                        subnet_id_list=["subnetIdList"]\n                    )\n                ),\n                redshift_source_config=lookoutmetrics.CfnAnomalyDetector.RedshiftSourceConfigProperty(\n                    cluster_identifier="clusterIdentifier",\n                    database_host="databaseHost",\n                    database_name="databaseName",\n                    database_port=123,\n                    role_arn="roleArn",\n                    secret_manager_arn="secretManagerArn",\n                    table_name="tableName",\n                    vpc_configuration=lookoutmetrics.CfnAnomalyDetector.VpcConfigurationProperty(\n                        security_group_id_list=["securityGroupIdList"],\n                        subnet_id_list=["subnetIdList"]\n                    )\n                ),\n                s3_source_config=lookoutmetrics.CfnAnomalyDetector.S3SourceConfigProperty(\n                    file_format_descriptor=lookoutmetrics.CfnAnomalyDetector.FileFormatDescriptorProperty(\n                        csv_format_descriptor=lookoutmetrics.CfnAnomalyDetector.CsvFormatDescriptorProperty(\n                            charset="charset",\n                            contains_header=False,\n                            delimiter="delimiter",\n                            file_compression="fileCompression",\n                            header_list=["headerList"],\n                            quote_symbol="quoteSymbol"\n                        ),\n                        json_format_descriptor=lookoutmetrics.CfnAnomalyDetector.JsonFormatDescriptorProperty(\n                            charset="charset",\n                            file_compression="fileCompression"\n                        )\n                    ),\n                    role_arn="roleArn",\n\n                    # the properties below are optional\n                    historical_data_path_list=["historicalDataPathList"],\n                    templated_path_list=["templatedPathList"]\n                )\n            ),\n\n            # the properties below are optional\n            dimension_list=["dimensionList"],\n            metric_set_description="metricSetDescription",\n            metric_set_frequency="metricSetFrequency",\n            offset=123,\n            timestamp_column=lookoutmetrics.CfnAnomalyDetector.TimestampColumnProperty(\n                column_format="columnFormat",\n                column_name="columnName"\n            ),\n            timezone="timezone"\n        )],\n\n        # the properties below are optional\n        anomaly_detector_description="anomalyDetectorDescription",\n        anomaly_detector_name="anomalyDetectorName",\n        kms_key_arn="kmsKeyArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['anomaly_detector_config', 'metric_set_list', 'anomaly_detector_description', 'anomaly_detector_name', 'kms_key_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lookoutmetrics.CfnAnomalyDetectorProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnAlert_ActionProperty: typing.Optional[dict[str, CfnAlert_ActionPropertyDef]] = pydantic.Field(None)
    CfnAlert_LambdaConfigurationProperty: typing.Optional[dict[str, CfnAlert_LambdaConfigurationPropertyDef]] = pydantic.Field(None)
    CfnAlert_SNSConfigurationProperty: typing.Optional[dict[str, CfnAlert_SNSConfigurationPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_AnomalyDetectorConfigProperty: typing.Optional[dict[str, CfnAnomalyDetector_AnomalyDetectorConfigPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_AppFlowConfigProperty: typing.Optional[dict[str, CfnAnomalyDetector_AppFlowConfigPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_CloudwatchConfigProperty: typing.Optional[dict[str, CfnAnomalyDetector_CloudwatchConfigPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_CsvFormatDescriptorProperty: typing.Optional[dict[str, CfnAnomalyDetector_CsvFormatDescriptorPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_FileFormatDescriptorProperty: typing.Optional[dict[str, CfnAnomalyDetector_FileFormatDescriptorPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_JsonFormatDescriptorProperty: typing.Optional[dict[str, CfnAnomalyDetector_JsonFormatDescriptorPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_MetricProperty: typing.Optional[dict[str, CfnAnomalyDetector_MetricPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_MetricSetProperty: typing.Optional[dict[str, CfnAnomalyDetector_MetricSetPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_MetricSourceProperty: typing.Optional[dict[str, CfnAnomalyDetector_MetricSourcePropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_RDSSourceConfigProperty: typing.Optional[dict[str, CfnAnomalyDetector_RDSSourceConfigPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_RedshiftSourceConfigProperty: typing.Optional[dict[str, CfnAnomalyDetector_RedshiftSourceConfigPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_S3SourceConfigProperty: typing.Optional[dict[str, CfnAnomalyDetector_S3SourceConfigPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_TimestampColumnProperty: typing.Optional[dict[str, CfnAnomalyDetector_TimestampColumnPropertyDef]] = pydantic.Field(None)
    CfnAnomalyDetector_VpcConfigurationProperty: typing.Optional[dict[str, CfnAnomalyDetector_VpcConfigurationPropertyDef]] = pydantic.Field(None)
    CfnAlert: typing.Optional[dict[str, CfnAlertDef]] = pydantic.Field(None)
    CfnAnomalyDetector: typing.Optional[dict[str, CfnAnomalyDetectorDef]] = pydantic.Field(None)
    CfnAlertProps: typing.Optional[dict[str, CfnAlertPropsDef]] = pydantic.Field(None)
    CfnAnomalyDetectorProps: typing.Optional[dict[str, CfnAnomalyDetectorPropsDef]] = pydantic.Field(None)
    ...
