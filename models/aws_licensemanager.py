from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_licensemanager.CfnLicense.BorrowConfigurationProperty
class CfnLicense_BorrowConfigurationPropertyDef(BaseStruct):
    allow_early_check_in: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Indicates whether early check-ins are allowed.\n')
    max_time_to_live_in_minutes: typing.Union[int, float] = pydantic.Field(..., description='Maximum time for the borrow configuration, in minutes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-licensemanager-license-borrowconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_licensemanager as licensemanager\n\n    borrow_configuration_property = licensemanager.CfnLicense.BorrowConfigurationProperty(\n        allow_early_check_in=False,\n        max_time_to_live_in_minutes=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allow_early_check_in', 'max_time_to_live_in_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnLicense.BorrowConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_licensemanager.CfnLicense.ConsumptionConfigurationProperty
class CfnLicense_ConsumptionConfigurationPropertyDef(BaseStruct):
    borrow_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_BorrowConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details about a borrow configuration.\n')
    provisional_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_ProvisionalConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details about a provisional configuration.\n')
    renew_type: typing.Optional[str] = pydantic.Field(None, description='Renewal frequency.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-licensemanager-license-consumptionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_licensemanager as licensemanager\n\n    consumption_configuration_property = licensemanager.CfnLicense.ConsumptionConfigurationProperty(\n        borrow_configuration=licensemanager.CfnLicense.BorrowConfigurationProperty(\n            allow_early_check_in=False,\n            max_time_to_live_in_minutes=123\n        ),\n        provisional_configuration=licensemanager.CfnLicense.ProvisionalConfigurationProperty(\n            max_time_to_live_in_minutes=123\n        ),\n        renew_type="renewType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['borrow_configuration', 'provisional_configuration', 'renew_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnLicense.ConsumptionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_licensemanager.CfnLicense.EntitlementProperty
class CfnLicense_EntitlementPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='Entitlement name.\n')
    unit: str = pydantic.Field(..., description='Entitlement unit.\n')
    allow_check_in: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether check-ins are allowed.\n')
    max_count: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum entitlement count. Use if the unit is not None.\n')
    overage: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether overages are allowed.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='Entitlement resource. Use only if the unit is None.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-licensemanager-license-entitlement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_licensemanager as licensemanager\n\n    entitlement_property = licensemanager.CfnLicense.EntitlementProperty(\n        name="name",\n        unit="unit",\n\n        # the properties below are optional\n        allow_check_in=False,\n        max_count=123,\n        overage=False,\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'unit', 'allow_check_in', 'max_count', 'overage', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnLicense.EntitlementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_licensemanager.CfnLicense.IssuerDataProperty
class CfnLicense_IssuerDataPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='Issuer name.\n')
    sign_key: typing.Optional[str] = pydantic.Field(None, description='Asymmetric KMS key from AWS Key Management Service . The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-licensemanager-license-issuerdata.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_licensemanager as licensemanager\n\n    issuer_data_property = licensemanager.CfnLicense.IssuerDataProperty(\n        name="name",\n\n        # the properties below are optional\n        sign_key="signKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'sign_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnLicense.IssuerDataProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_licensemanager.CfnLicense.MetadataProperty
class CfnLicense_MetadataPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The key name.\n')
    value: str = pydantic.Field(..., description='The value.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-licensemanager-license-metadata.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_licensemanager as licensemanager\n\n    metadata_property = licensemanager.CfnLicense.MetadataProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnLicense.MetadataProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_licensemanager.CfnLicense.ProvisionalConfigurationProperty
class CfnLicense_ProvisionalConfigurationPropertyDef(BaseStruct):
    max_time_to_live_in_minutes: typing.Union[int, float] = pydantic.Field(..., description='Maximum time for the provisional configuration, in minutes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-licensemanager-license-provisionalconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_licensemanager as licensemanager\n\n    provisional_configuration_property = licensemanager.CfnLicense.ProvisionalConfigurationProperty(\n        max_time_to_live_in_minutes=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_time_to_live_in_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnLicense.ProvisionalConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_licensemanager.CfnLicense.ValidityDateFormatProperty
class CfnLicense_ValidityDateFormatPropertyDef(BaseStruct):
    begin: str = pydantic.Field(..., description='Start of the time range.\n')
    end: str = pydantic.Field(..., description='End of the time range.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-licensemanager-license-validitydateformat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_licensemanager as licensemanager\n\n    validity_date_format_property = licensemanager.CfnLicense.ValidityDateFormatProperty(\n        begin="begin",\n        end="end"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['begin', 'end']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnLicense.ValidityDateFormatProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_licensemanager.CfnGrant
class CfnGrantDef(BaseCfnResource):
    allowed_operations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Allowed operations for the grant.\n')
    grant_name: typing.Optional[str] = pydantic.Field(None, description='Grant name.\n')
    home_region: typing.Optional[str] = pydantic.Field(None, description='Home Region of the grant.\n')
    license_arn: typing.Optional[str] = pydantic.Field(None, description='License ARN.\n')
    principals: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The grant principals. You can specify one of the following as an Amazon Resource Name (ARN):. - An AWS account, which includes only the account specified. - An organizational unit (OU), which includes all accounts in the OU. - An organization, which will include all accounts across your organization.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='Granted license status.')
    _init_params: typing.ClassVar[list[str]] = ['allowed_operations', 'grant_name', 'home_region', 'license_arn', 'principals', 'status']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnGrant'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnGrantDefConfig] = pydantic.Field(None)


class CfnGrantDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnGrantDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnGrantDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnGrantDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnGrantDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnGrantDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnGrantDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnGrantDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnGrantDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnGrantDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnGrantDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnGrantDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnGrantDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnGrantDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnGrantDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnGrantDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGrantDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnGrantDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGrantDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnGrantDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnGrantDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnGrantDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnGrantDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnGrantDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGrantDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnGrantDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnGrantDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGrantDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_licensemanager.CfnLicense
class CfnLicenseDef(BaseCfnResource):
    consumption_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_ConsumptionConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configuration for consumption of the license.\n')
    entitlements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_EntitlementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='License entitlements.\n')
    home_region: str = pydantic.Field(..., description='Home Region of the license.\n')
    issuer: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_IssuerDataPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='License issuer.\n')
    license_name: str = pydantic.Field(..., description='License name.\n')
    product_name: str = pydantic.Field(..., description='Product name.\n')
    validity: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_ValidityDateFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Date and time range during which the license is valid, in ISO8601-UTC format.\n')
    beneficiary: typing.Optional[str] = pydantic.Field(None, description='License beneficiary.\n')
    license_metadata: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_MetadataPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='License metadata.\n')
    product_sku: typing.Optional[str] = pydantic.Field(None, description='Product SKU.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='License status.')
    _init_params: typing.ClassVar[list[str]] = ['consumption_configuration', 'entitlements', 'home_region', 'issuer', 'license_name', 'product_name', 'validity', 'beneficiary', 'license_metadata', 'product_sku', 'status']
    _method_names: typing.ClassVar[list[str]] = ['BorrowConfigurationProperty', 'ConsumptionConfigurationProperty', 'EntitlementProperty', 'IssuerDataProperty', 'MetadataProperty', 'ProvisionalConfigurationProperty', 'ValidityDateFormatProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnLicense'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnLicenseDefConfig] = pydantic.Field(None)


class CfnLicenseDefConfig(pydantic.BaseModel):
    BorrowConfigurationProperty: typing.Optional[list[CfnLicenseDefBorrowconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ConsumptionConfigurationProperty: typing.Optional[list[CfnLicenseDefConsumptionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    EntitlementProperty: typing.Optional[list[CfnLicenseDefEntitlementpropertyParams]] = pydantic.Field(None, description='')
    IssuerDataProperty: typing.Optional[list[CfnLicenseDefIssuerdatapropertyParams]] = pydantic.Field(None, description='')
    MetadataProperty: typing.Optional[list[CfnLicenseDefMetadatapropertyParams]] = pydantic.Field(None, description='')
    ProvisionalConfigurationProperty: typing.Optional[list[CfnLicenseDefProvisionalconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ValidityDateFormatProperty: typing.Optional[list[CfnLicenseDefValiditydateformatpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnLicenseDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnLicenseDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnLicenseDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnLicenseDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnLicenseDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnLicenseDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnLicenseDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnLicenseDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnLicenseDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnLicenseDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnLicenseDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnLicenseDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnLicenseDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnLicenseDefBorrowconfigurationpropertyParams(pydantic.BaseModel):
    allow_early_check_in: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    max_time_to_live_in_minutes: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnLicenseDefConsumptionconfigurationpropertyParams(pydantic.BaseModel):
    borrow_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_BorrowConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    provisional_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_ProvisionalConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    renew_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLicenseDefEntitlementpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    unit: str = pydantic.Field(..., description='')
    allow_check_in: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    max_count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    overage: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLicenseDefIssuerdatapropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    sign_key: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLicenseDefMetadatapropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnLicenseDefProvisionalconfigurationpropertyParams(pydantic.BaseModel):
    max_time_to_live_in_minutes: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnLicenseDefValiditydateformatpropertyParams(pydantic.BaseModel):
    begin: str = pydantic.Field(..., description='')
    end: str = pydantic.Field(..., description='')
    ...

class CfnLicenseDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLicenseDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLicenseDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLicenseDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLicenseDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLicenseDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLicenseDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLicenseDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLicenseDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLicenseDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLicenseDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnLicenseDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLicenseDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLicenseDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_licensemanager.CfnGrantProps
class CfnGrantPropsDef(BaseCfnProperty):
    allowed_operations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Allowed operations for the grant.\n')
    grant_name: typing.Optional[str] = pydantic.Field(None, description='Grant name.\n')
    home_region: typing.Optional[str] = pydantic.Field(None, description='Home Region of the grant.\n')
    license_arn: typing.Optional[str] = pydantic.Field(None, description='License ARN.\n')
    principals: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The grant principals. You can specify one of the following as an Amazon Resource Name (ARN):. - An AWS account, which includes only the account specified. - An organizational unit (OU), which includes all accounts in the OU. - An organization, which will include all accounts across your organization.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='Granted license status.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-grant.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_licensemanager as licensemanager\n\n    cfn_grant_props = licensemanager.CfnGrantProps(\n        allowed_operations=["allowedOperations"],\n        grant_name="grantName",\n        home_region="homeRegion",\n        license_arn="licenseArn",\n        principals=["principals"],\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allowed_operations', 'grant_name', 'home_region', 'license_arn', 'principals', 'status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnGrantProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_licensemanager.CfnLicenseProps
class CfnLicensePropsDef(BaseCfnProperty):
    consumption_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_ConsumptionConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configuration for consumption of the license.\n')
    entitlements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_EntitlementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='License entitlements.\n')
    home_region: str = pydantic.Field(..., description='Home Region of the license.\n')
    issuer: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_IssuerDataPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='License issuer.\n')
    license_name: str = pydantic.Field(..., description='License name.\n')
    product_name: str = pydantic.Field(..., description='Product name.\n')
    validity: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_ValidityDateFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Date and time range during which the license is valid, in ISO8601-UTC format.\n')
    beneficiary: typing.Optional[str] = pydantic.Field(None, description='License beneficiary.\n')
    license_metadata: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_licensemanager.CfnLicense_MetadataPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='License metadata.\n')
    product_sku: typing.Optional[str] = pydantic.Field(None, description='Product SKU.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='License status.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_licensemanager as licensemanager\n\n    cfn_license_props = licensemanager.CfnLicenseProps(\n        consumption_configuration=licensemanager.CfnLicense.ConsumptionConfigurationProperty(\n            borrow_configuration=licensemanager.CfnLicense.BorrowConfigurationProperty(\n                allow_early_check_in=False,\n                max_time_to_live_in_minutes=123\n            ),\n            provisional_configuration=licensemanager.CfnLicense.ProvisionalConfigurationProperty(\n                max_time_to_live_in_minutes=123\n            ),\n            renew_type="renewType"\n        ),\n        entitlements=[licensemanager.CfnLicense.EntitlementProperty(\n            name="name",\n            unit="unit",\n\n            # the properties below are optional\n            allow_check_in=False,\n            max_count=123,\n            overage=False,\n            value="value"\n        )],\n        home_region="homeRegion",\n        issuer=licensemanager.CfnLicense.IssuerDataProperty(\n            name="name",\n\n            # the properties below are optional\n            sign_key="signKey"\n        ),\n        license_name="licenseName",\n        product_name="productName",\n        validity=licensemanager.CfnLicense.ValidityDateFormatProperty(\n            begin="begin",\n            end="end"\n        ),\n\n        # the properties below are optional\n        beneficiary="beneficiary",\n        license_metadata=[licensemanager.CfnLicense.MetadataProperty(\n            name="name",\n            value="value"\n        )],\n        product_sku="productSku",\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['consumption_configuration', 'entitlements', 'home_region', 'issuer', 'license_name', 'product_name', 'validity', 'beneficiary', 'license_metadata', 'product_sku', 'status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_licensemanager.CfnLicenseProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnLicense_BorrowConfigurationProperty: typing.Optional[dict[str, CfnLicense_BorrowConfigurationPropertyDef]] = pydantic.Field(None)
    CfnLicense_ConsumptionConfigurationProperty: typing.Optional[dict[str, CfnLicense_ConsumptionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnLicense_EntitlementProperty: typing.Optional[dict[str, CfnLicense_EntitlementPropertyDef]] = pydantic.Field(None)
    CfnLicense_IssuerDataProperty: typing.Optional[dict[str, CfnLicense_IssuerDataPropertyDef]] = pydantic.Field(None)
    CfnLicense_MetadataProperty: typing.Optional[dict[str, CfnLicense_MetadataPropertyDef]] = pydantic.Field(None)
    CfnLicense_ProvisionalConfigurationProperty: typing.Optional[dict[str, CfnLicense_ProvisionalConfigurationPropertyDef]] = pydantic.Field(None)
    CfnLicense_ValidityDateFormatProperty: typing.Optional[dict[str, CfnLicense_ValidityDateFormatPropertyDef]] = pydantic.Field(None)
    CfnGrant: typing.Optional[dict[str, CfnGrantDef]] = pydantic.Field(None)
    CfnLicense: typing.Optional[dict[str, CfnLicenseDef]] = pydantic.Field(None)
    CfnGrantProps: typing.Optional[dict[str, CfnGrantPropsDef]] = pydantic.Field(None)
    CfnLicenseProps: typing.Optional[dict[str, CfnLicensePropsDef]] = pydantic.Field(None)
    ...
