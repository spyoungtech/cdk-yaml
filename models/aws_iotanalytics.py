from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_iotanalytics.CfnChannel.ChannelStorageProperty
class CfnChannel_ChannelStoragePropertyDef(BaseStruct):
    customer_managed_s3: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnChannel_CustomerManagedS3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Used to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the ``retentionPeriod`` parameter is ignored. You can't change the choice of S3 storage after the data store is created.\n")
    service_managed_s3: typing.Any = pydantic.Field(None, description='Used to store channel data in an S3 bucket managed by AWS IoT Analytics . You can\'t change the choice of S3 storage after the data store is created.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-channel-channelstorage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    # service_managed_s3: Any\n\n    channel_storage_property = iotanalytics.CfnChannel.ChannelStorageProperty(\n        customer_managed_s3=iotanalytics.CfnChannel.CustomerManagedS3Property(\n            bucket="bucket",\n            role_arn="roleArn",\n\n            # the properties below are optional\n            key_prefix="keyPrefix"\n        ),\n        service_managed_s3=service_managed_s3\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['customer_managed_s3', 'service_managed_s3']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnChannel.ChannelStorageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnChannel.CustomerManagedS3Property
class CfnChannel_CustomerManagedS3PropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the S3 bucket in which channel data is stored.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.\n')
    key_prefix: typing.Optional[str] = pydantic.Field(None, description='(Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-channel-customermanageds3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    customer_managed_s3_property = iotanalytics.CfnChannel.CustomerManagedS3Property(\n        bucket="bucket",\n        role_arn="roleArn",\n\n        # the properties below are optional\n        key_prefix="keyPrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'role_arn', 'key_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnChannel.CustomerManagedS3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnChannel.RetentionPeriodProperty
class CfnChannel_RetentionPeriodPropertyDef(BaseStruct):
    number_of_days: typing.Union[int, float, None] = pydantic.Field(None, description='The number of days that message data is kept. The ``unlimited`` parameter must be false.\n')
    unlimited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If true, message data is kept indefinitely.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-channel-retentionperiod.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    retention_period_property = iotanalytics.CfnChannel.RetentionPeriodProperty(\n        number_of_days=123,\n        unlimited=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['number_of_days', 'unlimited']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnChannel.RetentionPeriodProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.ActionProperty
class CfnDataset_ActionPropertyDef(BaseStruct):
    action_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the data set action by which data set contents are automatically created.\n')
    container_action: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_ContainerActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information which allows the system to run a containerized application in order to create the data set contents. The application must be in a Docker container along with any needed support libraries.\n')
    query_action: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_QueryActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An "SqlQueryDatasetAction" object that uses an SQL query to automatically create data set contents.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-action.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    action_property = iotanalytics.CfnDataset.ActionProperty(\n        action_name="actionName",\n\n        # the properties below are optional\n        container_action=iotanalytics.CfnDataset.ContainerActionProperty(\n            execution_role_arn="executionRoleArn",\n            image="image",\n            resource_configuration=iotanalytics.CfnDataset.ResourceConfigurationProperty(\n                compute_type="computeType",\n                volume_size_in_gb=123\n            ),\n\n            # the properties below are optional\n            variables=[iotanalytics.CfnDataset.VariableProperty(\n                variable_name="variableName",\n\n                # the properties below are optional\n                dataset_content_version_value=iotanalytics.CfnDataset.DatasetContentVersionValueProperty(\n                    dataset_name="datasetName"\n                ),\n                double_value=123,\n                output_file_uri_value=iotanalytics.CfnDataset.OutputFileUriValueProperty(\n                    file_name="fileName"\n                ),\n                string_value="stringValue"\n            )]\n        ),\n        query_action=iotanalytics.CfnDataset.QueryActionProperty(\n            sql_query="sqlQuery",\n\n            # the properties below are optional\n            filters=[iotanalytics.CfnDataset.FilterProperty(\n                delta_time=iotanalytics.CfnDataset.DeltaTimeProperty(\n                    offset_seconds=123,\n                    time_expression="timeExpression"\n                )\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action_name', 'container_action', 'query_action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.ActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.ContainerActionProperty
class CfnDataset_ContainerActionPropertyDef(BaseStruct):
    execution_role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the role which gives permission to the system to access needed resources in order to run the "containerAction". This includes, at minimum, permission to retrieve the data set contents which are the input to the containerized application.\n')
    image: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the Docker container stored in your account. The Docker container contains an application and needed support libraries and is used to generate data set contents.\n')
    resource_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_ResourceConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Configuration of the resource which executes the "containerAction".\n')
    variables: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_VariablePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The values of variables used within the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of "stringValue", "datasetContentVersionValue", or "outputFileUriValue".\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-containeraction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    container_action_property = iotanalytics.CfnDataset.ContainerActionProperty(\n        execution_role_arn="executionRoleArn",\n        image="image",\n        resource_configuration=iotanalytics.CfnDataset.ResourceConfigurationProperty(\n            compute_type="computeType",\n            volume_size_in_gb=123\n        ),\n\n        # the properties below are optional\n        variables=[iotanalytics.CfnDataset.VariableProperty(\n            variable_name="variableName",\n\n            # the properties below are optional\n            dataset_content_version_value=iotanalytics.CfnDataset.DatasetContentVersionValueProperty(\n                dataset_name="datasetName"\n            ),\n            double_value=123,\n            output_file_uri_value=iotanalytics.CfnDataset.OutputFileUriValueProperty(\n                file_name="fileName"\n            ),\n            string_value="stringValue"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['execution_role_arn', 'image', 'resource_configuration', 'variables']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.ContainerActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.DatasetContentDeliveryRuleDestinationProperty
class CfnDataset_DatasetContentDeliveryRuleDestinationPropertyDef(BaseStruct):
    iot_events_destination_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_IotEventsDestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for delivery of dataset contents to AWS IoT Events .\n')
    s3_destination_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_S3DestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for delivery of dataset contents to Amazon S3.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-datasetcontentdeliveryruledestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    dataset_content_delivery_rule_destination_property = iotanalytics.CfnDataset.DatasetContentDeliveryRuleDestinationProperty(\n        iot_events_destination_configuration=iotanalytics.CfnDataset.IotEventsDestinationConfigurationProperty(\n            input_name="inputName",\n            role_arn="roleArn"\n        ),\n        s3_destination_configuration=iotanalytics.CfnDataset.S3DestinationConfigurationProperty(\n            bucket="bucket",\n            key="key",\n            role_arn="roleArn",\n\n            # the properties below are optional\n            glue_configuration=iotanalytics.CfnDataset.GlueConfigurationProperty(\n                database_name="databaseName",\n                table_name="tableName"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['iot_events_destination_configuration', 's3_destination_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.DatasetContentDeliveryRuleDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.DatasetContentDeliveryRuleProperty
class CfnDataset_DatasetContentDeliveryRulePropertyDef(BaseStruct):
    destination: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DatasetContentDeliveryRuleDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The destination to which dataset contents are delivered.\n')
    entry_name: typing.Optional[str] = pydantic.Field(None, description='The name of the dataset content delivery rules entry.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-datasetcontentdeliveryrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    dataset_content_delivery_rule_property = iotanalytics.CfnDataset.DatasetContentDeliveryRuleProperty(\n        destination=iotanalytics.CfnDataset.DatasetContentDeliveryRuleDestinationProperty(\n            iot_events_destination_configuration=iotanalytics.CfnDataset.IotEventsDestinationConfigurationProperty(\n                input_name="inputName",\n                role_arn="roleArn"\n            ),\n            s3_destination_configuration=iotanalytics.CfnDataset.S3DestinationConfigurationProperty(\n                bucket="bucket",\n                key="key",\n                role_arn="roleArn",\n\n                # the properties below are optional\n                glue_configuration=iotanalytics.CfnDataset.GlueConfigurationProperty(\n                    database_name="databaseName",\n                    table_name="tableName"\n                )\n            )\n        ),\n\n        # the properties below are optional\n        entry_name="entryName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'entry_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.DatasetContentDeliveryRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.DatasetContentVersionValueProperty
class CfnDataset_DatasetContentVersionValuePropertyDef(BaseStruct):
    dataset_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the dataset whose latest contents are used as input to the notebook or application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-datasetcontentversionvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    dataset_content_version_value_property = iotanalytics.CfnDataset.DatasetContentVersionValueProperty(\n        dataset_name="datasetName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dataset_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.DatasetContentVersionValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.DeltaTimeProperty
class CfnDataset_DeltaTimePropertyDef(BaseStruct):
    offset_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The number of seconds of estimated in-flight lag time of message data. When you create dataset contents using message data from a specified timeframe, some message data might still be in flight when processing begins, and so do not arrive in time to be processed. Use this field to make allowances for the in flight time of your message data, so that data not processed from a previous timeframe is included with the next timeframe. Otherwise, missed message data would be excluded from processing during the next timeframe too, because its timestamp places it within the previous timeframe.\n')
    time_expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An expression by which the time of the message data might be determined. This can be the name of a timestamp field or a SQL expression that is used to derive the time the message data was generated.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-deltatime.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    delta_time_property = iotanalytics.CfnDataset.DeltaTimeProperty(\n        offset_seconds=123,\n        time_expression="timeExpression"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['offset_seconds', 'time_expression']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.DeltaTimeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.DeltaTimeSessionWindowConfigurationProperty
class CfnDataset_DeltaTimeSessionWindowConfigurationPropertyDef(BaseStruct):
    timeout_in_minutes: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='A time interval. You can use ``timeoutInMinutes`` so that AWS IoT Analytics can batch up late data notifications that have been generated since the last execution. AWS IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time. For more information about how to write a timestamp expression, see `Date and Time Functions and Operators <https://docs.aws.amazon.com/https://prestodb.io/docs/current/functions/datetime.html>`_ , in the *Presto 0.172 Documentation* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-deltatimesessionwindowconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    delta_time_session_window_configuration_property = iotanalytics.CfnDataset.DeltaTimeSessionWindowConfigurationProperty(\n        timeout_in_minutes=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['timeout_in_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.DeltaTimeSessionWindowConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.FilterProperty
class CfnDataset_FilterPropertyDef(BaseStruct):
    delta_time: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DeltaTimePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used to limit data to that which has arrived since the last execution of the action.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-filter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    filter_property = iotanalytics.CfnDataset.FilterProperty(\n        delta_time=iotanalytics.CfnDataset.DeltaTimeProperty(\n            offset_seconds=123,\n            time_expression="timeExpression"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delta_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.FilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.GlueConfigurationProperty
class CfnDataset_GlueConfigurationPropertyDef(BaseStruct):
    database_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the database in your AWS Glue Data Catalog in which the table is located. An AWS Glue Data Catalog database contains metadata tables.\n')
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the table in your AWS Glue Data Catalog that is used to perform the ETL operations. An AWS Glue Data Catalog table contains partitioned data and descriptions of data sources and targets.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-glueconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    glue_configuration_property = iotanalytics.CfnDataset.GlueConfigurationProperty(\n        database_name="databaseName",\n        table_name="tableName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['database_name', 'table_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.GlueConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.IotEventsDestinationConfigurationProperty
class CfnDataset_IotEventsDestinationConfigurationPropertyDef(BaseStruct):
    input_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the AWS IoT Events input to which dataset contents are delivered.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the role that grants AWS IoT Analytics permission to deliver dataset contents to an AWS IoT Events input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-ioteventsdestinationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    iot_events_destination_configuration_property = iotanalytics.CfnDataset.IotEventsDestinationConfigurationProperty(\n        input_name="inputName",\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['input_name', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.IotEventsDestinationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.LateDataRuleConfigurationProperty
class CfnDataset_LateDataRuleConfigurationPropertyDef(BaseStruct):
    delta_time_session_window_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DeltaTimeSessionWindowConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The information needed to configure a delta time session window.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-latedataruleconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    late_data_rule_configuration_property = iotanalytics.CfnDataset.LateDataRuleConfigurationProperty(\n        delta_time_session_window_configuration=iotanalytics.CfnDataset.DeltaTimeSessionWindowConfigurationProperty(\n            timeout_in_minutes=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delta_time_session_window_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.LateDataRuleConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.LateDataRuleProperty
class CfnDataset_LateDataRulePropertyDef(BaseStruct):
    rule_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_LateDataRuleConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The information needed to configure the late data rule.\n')
    rule_name: typing.Optional[str] = pydantic.Field(None, description='The name of the late data rule.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-latedatarule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    late_data_rule_property = iotanalytics.CfnDataset.LateDataRuleProperty(\n        rule_configuration=iotanalytics.CfnDataset.LateDataRuleConfigurationProperty(\n            delta_time_session_window_configuration=iotanalytics.CfnDataset.DeltaTimeSessionWindowConfigurationProperty(\n                timeout_in_minutes=123\n            )\n        ),\n\n        # the properties below are optional\n        rule_name="ruleName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rule_configuration', 'rule_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.LateDataRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.OutputFileUriValueProperty
class CfnDataset_OutputFileUriValuePropertyDef(BaseStruct):
    file_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URI of the location where dataset contents are stored, usually the URI of a file in an S3 bucket.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-outputfileurivalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    output_file_uri_value_property = iotanalytics.CfnDataset.OutputFileUriValueProperty(\n        file_name="fileName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['file_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.OutputFileUriValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.QueryActionProperty
class CfnDataset_QueryActionPropertyDef(BaseStruct):
    sql_query: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An "SqlQueryDatasetAction" object that uses an SQL query to automatically create data set contents.\n')
    filters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_FilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Pre-filters applied to message data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-queryaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    query_action_property = iotanalytics.CfnDataset.QueryActionProperty(\n        sql_query="sqlQuery",\n\n        # the properties below are optional\n        filters=[iotanalytics.CfnDataset.FilterProperty(\n            delta_time=iotanalytics.CfnDataset.DeltaTimeProperty(\n                offset_seconds=123,\n                time_expression="timeExpression"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sql_query', 'filters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.QueryActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.ResourceConfigurationProperty
class CfnDataset_ResourceConfigurationPropertyDef(BaseStruct):
    compute_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the compute resource used to execute the ``containerAction`` . Possible values are: ``ACU_1`` (vCPU=4, memory=16 GiB) or ``ACU_2`` (vCPU=8, memory=32 GiB).\n')
    volume_size_in_gb: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The size, in GB, of the persistent storage available to the resource instance used to execute the ``containerAction`` (min: 1, max: 50).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-resourceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    resource_configuration_property = iotanalytics.CfnDataset.ResourceConfigurationProperty(\n        compute_type="computeType",\n        volume_size_in_gb=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['compute_type', 'volume_size_in_gb']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.ResourceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.RetentionPeriodProperty
class CfnDataset_RetentionPeriodPropertyDef(BaseStruct):
    number_of_days: typing.Union[int, float, None] = pydantic.Field(None, description='The number of days that message data is kept. The ``unlimited`` parameter must be false.\n')
    unlimited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If true, message data is kept indefinitely.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-retentionperiod.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    retention_period_property = iotanalytics.CfnDataset.RetentionPeriodProperty(\n        number_of_days=123,\n        unlimited=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['number_of_days', 'unlimited']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.RetentionPeriodProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.S3DestinationConfigurationProperty
class CfnDataset_S3DestinationConfigurationPropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the S3 bucket to which dataset contents are delivered.\n')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The key of the dataset contents object in an S3 bucket. Each object has a key that is a unique identifier. Each object has exactly one key. You can create a unique key with the following options: - Use ``!{iotanalytics:scheduleTime}`` to insert the time of a scheduled SQL query run. - Use ``!{iotanalytics:versionId}`` to insert a unique hash that identifies a dataset content. - Use ``!{iotanalytics:creationTime}`` to insert the creation time of a dataset content. The following example creates a unique key for a CSV file: ``dataset/mydataset/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv`` .. epigraph:: If you don't use ``!{iotanalytics:versionId}`` to specify the key, you might get duplicate keys. For example, you might have two dataset contents with the same ``scheduleTime`` but different ``versionId`` s. This means that one dataset content overwrites the other.\n")
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 and AWS Glue resources.\n')
    glue_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_GlueConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for coordination with AWS Glue , a fully managed extract, transform and load (ETL) service.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-s3destinationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    s3_destination_configuration_property = iotanalytics.CfnDataset.S3DestinationConfigurationProperty(\n        bucket="bucket",\n        key="key",\n        role_arn="roleArn",\n\n        # the properties below are optional\n        glue_configuration=iotanalytics.CfnDataset.GlueConfigurationProperty(\n            database_name="databaseName",\n            table_name="tableName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key', 'role_arn', 'glue_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.S3DestinationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.ScheduleProperty
class CfnDataset_SchedulePropertyDef(BaseStruct):
    schedule_expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The expression that defines when to trigger an update. For more information, see `Schedule Expressions for Rules <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html>`_ in the Amazon CloudWatch documentation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-schedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    schedule_property = iotanalytics.CfnDataset.ScheduleProperty(\n        schedule_expression="scheduleExpression"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['schedule_expression']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.ScheduleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.TriggeringDatasetProperty
class CfnDataset_TriggeringDatasetPropertyDef(BaseStruct):
    dataset_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the data set whose content generation triggers the new data set content generation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-triggeringdataset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    triggering_dataset_property = iotanalytics.CfnDataset.TriggeringDatasetProperty(\n        dataset_name="datasetName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dataset_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.TriggeringDatasetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.TriggerProperty
class CfnDataset_TriggerPropertyDef(BaseStruct):
    schedule: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_SchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The "Schedule" when the trigger is initiated.\n')
    triggering_dataset: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_TriggeringDatasetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the data set whose content generation triggers the new data set content generation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-trigger.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    trigger_property = iotanalytics.CfnDataset.TriggerProperty(\n        schedule=iotanalytics.CfnDataset.ScheduleProperty(\n            schedule_expression="scheduleExpression"\n        ),\n        triggering_dataset=iotanalytics.CfnDataset.TriggeringDatasetProperty(\n            dataset_name="datasetName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['schedule', 'triggering_dataset']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.TriggerProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.VariableProperty
class CfnDataset_VariablePropertyDef(BaseStruct):
    variable_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the variable.\n')
    dataset_content_version_value: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DatasetContentVersionValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value of the variable as a structure that specifies a dataset content version.\n')
    double_value: typing.Union[int, float, None] = pydantic.Field(None, description='The value of the variable as a double (numeric).\n')
    output_file_uri_value: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_OutputFileUriValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value of the variable as a structure that specifies an output file URI.\n')
    string_value: typing.Optional[str] = pydantic.Field(None, description='The value of the variable as a string.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-variable.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    variable_property = iotanalytics.CfnDataset.VariableProperty(\n        variable_name="variableName",\n\n        # the properties below are optional\n        dataset_content_version_value=iotanalytics.CfnDataset.DatasetContentVersionValueProperty(\n            dataset_name="datasetName"\n        ),\n        double_value=123,\n        output_file_uri_value=iotanalytics.CfnDataset.OutputFileUriValueProperty(\n            file_name="fileName"\n        ),\n        string_value="stringValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['variable_name', 'dataset_content_version_value', 'double_value', 'output_file_uri_value', 'string_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.VariableProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset.VersioningConfigurationProperty
class CfnDataset_VersioningConfigurationPropertyDef(BaseStruct):
    max_versions: typing.Union[int, float, None] = pydantic.Field(None, description='How many versions of dataset contents are kept. The ``unlimited`` parameter must be ``false`` .\n')
    unlimited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If true, unlimited versions of dataset contents are kept.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-dataset-versioningconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    versioning_configuration_property = iotanalytics.CfnDataset.VersioningConfigurationProperty(\n        max_versions=123,\n        unlimited=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_versions', 'unlimited']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset.VersioningConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.ColumnProperty
class CfnDatastore_ColumnPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the column.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of data. For more information about the supported data types, see `Common data types <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html>`_ in the *AWS Glue Developer Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-column.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    column_property = iotanalytics.CfnDatastore.ColumnProperty(\n        name="name",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.ColumnProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.CustomerManagedS3Property
class CfnDatastore_CustomerManagedS3PropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon S3 bucket where your data is stored.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.\n')
    key_prefix: typing.Optional[str] = pydantic.Field(None, description='(Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-customermanageds3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    customer_managed_s3_property = iotanalytics.CfnDatastore.CustomerManagedS3Property(\n        bucket="bucket",\n        role_arn="roleArn",\n\n        # the properties below are optional\n        key_prefix="keyPrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'role_arn', 'key_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.CustomerManagedS3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.CustomerManagedS3StorageProperty
class CfnDatastore_CustomerManagedS3StoragePropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon S3 bucket where your data is stored.\n')
    key_prefix: typing.Optional[str] = pydantic.Field(None, description='(Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-customermanageds3storage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    customer_managed_s3_storage_property = iotanalytics.CfnDatastore.CustomerManagedS3StorageProperty(\n        bucket="bucket",\n\n        # the properties below are optional\n        key_prefix="keyPrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.CustomerManagedS3StorageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.DatastorePartitionProperty
class CfnDatastore_DatastorePartitionPropertyDef(BaseStruct):
    partition: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_PartitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A partition dimension defined by an attribute.\n')
    timestamp_partition: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_TimestampPartitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A partition dimension defined by a timestamp attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-datastorepartition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    datastore_partition_property = iotanalytics.CfnDatastore.DatastorePartitionProperty(\n        partition=iotanalytics.CfnDatastore.PartitionProperty(\n            attribute_name="attributeName"\n        ),\n        timestamp_partition=iotanalytics.CfnDatastore.TimestampPartitionProperty(\n            attribute_name="attributeName",\n\n            # the properties below are optional\n            timestamp_format="timestampFormat"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['partition', 'timestamp_partition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.DatastorePartitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.DatastorePartitionsProperty
class CfnDatastore_DatastorePartitionsPropertyDef(BaseStruct):
    partitions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_DatastorePartitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of partition dimensions in a data store.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-datastorepartitions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    datastore_partitions_property = iotanalytics.CfnDatastore.DatastorePartitionsProperty(\n        partitions=[iotanalytics.CfnDatastore.DatastorePartitionProperty(\n            partition=iotanalytics.CfnDatastore.PartitionProperty(\n                attribute_name="attributeName"\n            ),\n            timestamp_partition=iotanalytics.CfnDatastore.TimestampPartitionProperty(\n                attribute_name="attributeName",\n\n                # the properties below are optional\n                timestamp_format="timestampFormat"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['partitions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.DatastorePartitionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.DatastoreStorageProperty
class CfnDatastore_DatastoreStoragePropertyDef(BaseStruct):
    customer_managed_s3: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_CustomerManagedS3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use this to store data store data in an S3 bucket that you manage. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.\n')
    iot_site_wise_multi_layer_storage: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_IotSiteWiseMultiLayerStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Use this to store data used by AWS IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.\n")
    service_managed_s3: typing.Any = pydantic.Field(None, description='Use this to store data store data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-datastorestorage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    # service_managed_s3: Any\n\n    datastore_storage_property = iotanalytics.CfnDatastore.DatastoreStorageProperty(\n        customer_managed_s3=iotanalytics.CfnDatastore.CustomerManagedS3Property(\n            bucket="bucket",\n            role_arn="roleArn",\n\n            # the properties below are optional\n            key_prefix="keyPrefix"\n        ),\n        iot_site_wise_multi_layer_storage=iotanalytics.CfnDatastore.IotSiteWiseMultiLayerStorageProperty(\n            customer_managed_s3_storage=iotanalytics.CfnDatastore.CustomerManagedS3StorageProperty(\n                bucket="bucket",\n\n                # the properties below are optional\n                key_prefix="keyPrefix"\n            )\n        ),\n        service_managed_s3=service_managed_s3\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['customer_managed_s3', 'iot_site_wise_multi_layer_storage', 'service_managed_s3']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.DatastoreStorageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.FileFormatConfigurationProperty
class CfnDatastore_FileFormatConfigurationPropertyDef(BaseStruct):
    json_configuration: typing.Any = pydantic.Field(None, description='Contains the configuration information of the JSON format.\n')
    parquet_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_ParquetConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains the configuration information of the Parquet format.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-fileformatconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    # json_configuration: Any\n\n    file_format_configuration_property = iotanalytics.CfnDatastore.FileFormatConfigurationProperty(\n        json_configuration=json_configuration,\n        parquet_configuration=iotanalytics.CfnDatastore.ParquetConfigurationProperty(\n            schema_definition=iotanalytics.CfnDatastore.SchemaDefinitionProperty(\n                columns=[iotanalytics.CfnDatastore.ColumnProperty(\n                    name="name",\n                    type="type"\n                )]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['json_configuration', 'parquet_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.FileFormatConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.IotSiteWiseMultiLayerStorageProperty
class CfnDatastore_IotSiteWiseMultiLayerStoragePropertyDef(BaseStruct):
    customer_managed_s3_storage: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_CustomerManagedS3StoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Stores data used by AWS IoT SiteWise in an Amazon S3 bucket that you manage.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-iotsitewisemultilayerstorage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    iot_site_wise_multi_layer_storage_property = iotanalytics.CfnDatastore.IotSiteWiseMultiLayerStorageProperty(\n        customer_managed_s3_storage=iotanalytics.CfnDatastore.CustomerManagedS3StorageProperty(\n            bucket="bucket",\n\n            # the properties below are optional\n            key_prefix="keyPrefix"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['customer_managed_s3_storage']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.IotSiteWiseMultiLayerStorageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.ParquetConfigurationProperty
class CfnDatastore_ParquetConfigurationPropertyDef(BaseStruct):
    schema_definition: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_SchemaDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information needed to define a schema.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-parquetconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    parquet_configuration_property = iotanalytics.CfnDatastore.ParquetConfigurationProperty(\n        schema_definition=iotanalytics.CfnDatastore.SchemaDefinitionProperty(\n            columns=[iotanalytics.CfnDatastore.ColumnProperty(\n                name="name",\n                type="type"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['schema_definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.ParquetConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.PartitionProperty
class CfnDatastore_PartitionPropertyDef(BaseStruct):
    attribute_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the attribute that defines a partition dimension.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-partition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    partition_property = iotanalytics.CfnDatastore.PartitionProperty(\n        attribute_name="attributeName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attribute_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.PartitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.RetentionPeriodProperty
class CfnDatastore_RetentionPeriodPropertyDef(BaseStruct):
    number_of_days: typing.Union[int, float, None] = pydantic.Field(None, description='The number of days that message data is kept. The ``unlimited`` parameter must be false.\n')
    unlimited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If true, message data is kept indefinitely.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-retentionperiod.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    retention_period_property = iotanalytics.CfnDatastore.RetentionPeriodProperty(\n        number_of_days=123,\n        unlimited=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['number_of_days', 'unlimited']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.RetentionPeriodProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.SchemaDefinitionProperty
class CfnDatastore_SchemaDefinitionPropertyDef(BaseStruct):
    columns: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_ColumnPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies one or more columns that store your data. Each schema can have up to 100 columns. Each column can have up to 100 nested types.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-schemadefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    schema_definition_property = iotanalytics.CfnDatastore.SchemaDefinitionProperty(\n        columns=[iotanalytics.CfnDatastore.ColumnProperty(\n            name="name",\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['columns']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.SchemaDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore.TimestampPartitionProperty
class CfnDatastore_TimestampPartitionPropertyDef(BaseStruct):
    attribute_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The attribute name of the partition defined by a timestamp.\n')
    timestamp_format: typing.Optional[str] = pydantic.Field(None, description='The timestamp format of a partition defined by a timestamp. The default format is seconds since epoch (January 1, 1970 at midnight UTC time).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-datastore-timestamppartition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    timestamp_partition_property = iotanalytics.CfnDatastore.TimestampPartitionProperty(\n        attribute_name="attributeName",\n\n        # the properties below are optional\n        timestamp_format="timestampFormat"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attribute_name', 'timestamp_format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore.TimestampPartitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.ActivityProperty
class CfnPipeline_ActivityPropertyDef(BaseStruct):
    add_attributes: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_AddAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Adds other attributes based on existing attributes in the message.\n')
    channel: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_ChannelPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines the source of the messages to be processed.\n')
    datastore: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_DatastorePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies where to store the processed message data.\n')
    device_registry_enrich: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_DeviceRegistryEnrichPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Adds data from the AWS IoT device registry to your message.\n')
    device_shadow_enrich: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_DeviceShadowEnrichPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Adds information from the AWS IoT Device Shadows service to a message.\n')
    filter: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_FilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Filters a message based on its attributes.\n')
    lambda_: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_LambdaPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Runs a Lambda function to modify the message.\n')
    math: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_MathPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Computes an arithmetic expression using the message's attributes and adds it to the message.\n")
    remove_attributes: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_RemoveAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Removes attributes from a message.\n')
    select_attributes: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_SelectAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Creates a new message using only the specified attributes from the original message.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-activity.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    activity_property = iotanalytics.CfnPipeline.ActivityProperty(\n        add_attributes=iotanalytics.CfnPipeline.AddAttributesProperty(\n            attributes={\n                "attributes_key": "attributes"\n            },\n            name="name",\n\n            # the properties below are optional\n            next="next"\n        ),\n        channel=iotanalytics.CfnPipeline.ChannelProperty(\n            channel_name="channelName",\n            name="name",\n\n            # the properties below are optional\n            next="next"\n        ),\n        datastore=iotanalytics.CfnPipeline.DatastoreProperty(\n            datastore_name="datastoreName",\n            name="name"\n        ),\n        device_registry_enrich=iotanalytics.CfnPipeline.DeviceRegistryEnrichProperty(\n            attribute="attribute",\n            name="name",\n            role_arn="roleArn",\n            thing_name="thingName",\n\n            # the properties below are optional\n            next="next"\n        ),\n        device_shadow_enrich=iotanalytics.CfnPipeline.DeviceShadowEnrichProperty(\n            attribute="attribute",\n            name="name",\n            role_arn="roleArn",\n            thing_name="thingName",\n\n            # the properties below are optional\n            next="next"\n        ),\n        filter=iotanalytics.CfnPipeline.FilterProperty(\n            filter="filter",\n            name="name",\n\n            # the properties below are optional\n            next="next"\n        ),\n        lambda_=iotanalytics.CfnPipeline.LambdaProperty(\n            batch_size=123,\n            lambda_name="lambdaName",\n            name="name",\n\n            # the properties below are optional\n            next="next"\n        ),\n        math=iotanalytics.CfnPipeline.MathProperty(\n            attribute="attribute",\n            math="math",\n            name="name",\n\n            # the properties below are optional\n            next="next"\n        ),\n        remove_attributes=iotanalytics.CfnPipeline.RemoveAttributesProperty(\n            attributes=["attributes"],\n            name="name",\n\n            # the properties below are optional\n            next="next"\n        ),\n        select_attributes=iotanalytics.CfnPipeline.SelectAttributesProperty(\n            attributes=["attributes"],\n            name="name",\n\n            # the properties below are optional\n            next="next"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['add_attributes', 'channel', 'datastore', 'device_registry_enrich', 'device_shadow_enrich', 'filter', 'lambda_', 'math', 'remove_attributes', 'select_attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.ActivityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.AddAttributesProperty
class CfnPipeline_AddAttributesPropertyDef(BaseStruct):
    attributes: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, str]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of 1-50 "AttributeNameMapping" objects that map an existing attribute to a new attribute. .. epigraph:: The existing attributes remain in the message, so if you want to remove the originals, use "RemoveAttributeActivity".\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the 'addAttributes' activity.\n")
    next: typing.Optional[str] = pydantic.Field(None, description='The next activity in the pipeline.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-addattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    add_attributes_property = iotanalytics.CfnPipeline.AddAttributesProperty(\n        attributes={\n            "attributes_key": "attributes"\n        },\n        name="name",\n\n        # the properties below are optional\n        next="next"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attributes', 'name', 'next']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.AddAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.ChannelProperty
class CfnPipeline_ChannelPropertyDef(BaseStruct):
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel from which the messages are processed.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the 'channel' activity.\n")
    next: typing.Optional[str] = pydantic.Field(None, description='The next activity in the pipeline.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-channel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    channel_property = iotanalytics.CfnPipeline.ChannelProperty(\n        channel_name="channelName",\n        name="name",\n\n        # the properties below are optional\n        next="next"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_name', 'name', 'next']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.ChannelProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.DatastoreProperty
class CfnPipeline_DatastorePropertyDef(BaseStruct):
    datastore_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the data store where processed messages are stored.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the datastore activity.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-datastore.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    datastore_property = iotanalytics.CfnPipeline.DatastoreProperty(\n        datastore_name="datastoreName",\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['datastore_name', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.DatastoreProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.DeviceRegistryEnrichProperty
class CfnPipeline_DeviceRegistryEnrichPropertyDef(BaseStruct):
    attribute: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the attribute that is added to the message.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the 'deviceRegistryEnrich' activity.\n")
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The ARN of the role that allows access to the device's registry information.\n")
    thing_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the IoT device whose registry information is added to the message.\n')
    next: typing.Optional[str] = pydantic.Field(None, description='The next activity in the pipeline.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-deviceregistryenrich.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    device_registry_enrich_property = iotanalytics.CfnPipeline.DeviceRegistryEnrichProperty(\n        attribute="attribute",\n        name="name",\n        role_arn="roleArn",\n        thing_name="thingName",\n\n        # the properties below are optional\n        next="next"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attribute', 'name', 'role_arn', 'thing_name', 'next']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.DeviceRegistryEnrichProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.DeviceShadowEnrichProperty
class CfnPipeline_DeviceShadowEnrichPropertyDef(BaseStruct):
    attribute: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the attribute that is added to the message.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the 'deviceShadowEnrich' activity.\n")
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The ARN of the role that allows access to the device's shadow.\n")
    thing_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the IoT device whose shadow information is added to the message.\n')
    next: typing.Optional[str] = pydantic.Field(None, description='The next activity in the pipeline.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-deviceshadowenrich.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    device_shadow_enrich_property = iotanalytics.CfnPipeline.DeviceShadowEnrichProperty(\n        attribute="attribute",\n        name="name",\n        role_arn="roleArn",\n        thing_name="thingName",\n\n        # the properties below are optional\n        next="next"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attribute', 'name', 'role_arn', 'thing_name', 'next']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.DeviceShadowEnrichProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.FilterProperty
class CfnPipeline_FilterPropertyDef(BaseStruct):
    filter: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An expression that looks like an SQL WHERE clause that must return a Boolean value.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the 'filter' activity.\n")
    next: typing.Optional[str] = pydantic.Field(None, description='The next activity in the pipeline.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-filter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    filter_property = iotanalytics.CfnPipeline.FilterProperty(\n        filter="filter",\n        name="name",\n\n        # the properties below are optional\n        next="next"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['filter', 'name', 'next']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.FilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.LambdaProperty
class CfnPipeline_LambdaPropertyDef(BaseStruct):
    batch_size: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The number of messages passed to the Lambda function for processing. The AWS Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.\n')
    lambda_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Lambda function that is run on the message.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the 'lambda' activity.\n")
    next: typing.Optional[str] = pydantic.Field(None, description='The next activity in the pipeline.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-lambda.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    lambda_property = iotanalytics.CfnPipeline.LambdaProperty(\n        batch_size=123,\n        lambda_name="lambdaName",\n        name="name",\n\n        # the properties below are optional\n        next="next"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['batch_size', 'lambda_name', 'name', 'next']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.LambdaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.MathProperty
class CfnPipeline_MathPropertyDef(BaseStruct):
    attribute: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the attribute that contains the result of the math operation.\n')
    math: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An expression that uses one or more existing attributes and must return an integer value.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the 'math' activity.\n")
    next: typing.Optional[str] = pydantic.Field(None, description='The next activity in the pipeline.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-math.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    math_property = iotanalytics.CfnPipeline.MathProperty(\n        attribute="attribute",\n        math="math",\n        name="name",\n\n        # the properties below are optional\n        next="next"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attribute', 'math', 'name', 'next']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.MathProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.RemoveAttributesProperty
class CfnPipeline_RemoveAttributesPropertyDef(BaseStruct):
    attributes: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of 1-50 attributes to remove from the message.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the 'removeAttributes' activity.\n")
    next: typing.Optional[str] = pydantic.Field(None, description='The next activity in the pipeline.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-removeattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    remove_attributes_property = iotanalytics.CfnPipeline.RemoveAttributesProperty(\n        attributes=["attributes"],\n        name="name",\n\n        # the properties below are optional\n        next="next"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attributes', 'name', 'next']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.RemoveAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline.SelectAttributesProperty
class CfnPipeline_SelectAttributesPropertyDef(BaseStruct):
    attributes: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of the attributes to select from the message.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the 'selectAttributes' activity.\n")
    next: typing.Optional[str] = pydantic.Field(None, description='The next activity in the pipeline.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotanalytics-pipeline-selectattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    select_attributes_property = iotanalytics.CfnPipeline.SelectAttributesProperty(\n        attributes=["attributes"],\n        name="name",\n\n        # the properties below are optional\n        next="next"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attributes', 'name', 'next']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline.SelectAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnChannel
class CfnChannelDef(BaseCfnResource):
    channel_name: typing.Optional[str] = pydantic.Field(None, description='The name of the channel.\n')
    channel_storage: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnChannel_ChannelStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Where channel data is stored.\n')
    retention_period: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnChannel_RetentionPeriodPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='How long, in days, message data is kept for the channel.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Metadata which can be used to manage the channel. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['channel_name', 'channel_storage', 'retention_period', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ChannelStorageProperty', 'CustomerManagedS3Property', 'RetentionPeriodProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotanalytics.CfnChannelDefConfig] = pydantic.Field(None)


class CfnChannelDefConfig(pydantic.BaseModel):
    ChannelStorageProperty: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefChannelstoragepropertyParams]] = pydantic.Field(None, description='')
    CustomerManagedS3Property: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefCustomermanageds3PropertyParams]] = pydantic.Field(None, description='')
    RetentionPeriodProperty: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefRetentionperiodpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotanalytics.CfnChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnChannelDefChannelstoragepropertyParams(pydantic.BaseModel):
    customer_managed_s3: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnChannel_CustomerManagedS3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_managed_s3: typing.Any = pydantic.Field(None, description='')
    ...

class CfnChannelDefCustomermanageds3PropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    key_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnChannelDefRetentionperiodpropertyParams(pydantic.BaseModel):
    number_of_days: typing.Union[int, float, None] = pydantic.Field(None, description='')
    unlimited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotanalytics.CfnDataset
class CfnDatasetDef(BaseCfnResource):
    actions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_ActionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ``DatasetAction`` objects that automatically create the dataset contents.\n')
    content_delivery_rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DatasetContentDeliveryRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='When dataset contents are created they are delivered to destinations specified here.\n')
    dataset_name: typing.Optional[str] = pydantic.Field(None, description='The name of the dataset.\n')
    late_data_rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_LateDataRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of data rules that send notifications to CloudWatch, when data arrives late. To specify ``lateDataRules`` , the dataset must use a `DeltaTimer <https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html>`_ filter.\n')
    retention_period: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_RetentionPeriodPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Optional. How long, in days, message data is kept for the dataset.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Metadata which can be used to manage the data set. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    triggers: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_TriggerPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The ``DatasetTrigger`` objects that specify when the dataset is automatically updated.\n')
    versioning_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_VersioningConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the ``retentionPeriod`` parameter. For more information, see `Keeping Multiple Versions of AWS IoT Analytics datasets <https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions>`_ in the *AWS IoT Analytics User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'content_delivery_rules', 'dataset_name', 'late_data_rules', 'retention_period', 'tags', 'triggers', 'versioning_configuration']
    _method_names: typing.ClassVar[list[str]] = ['ActionProperty', 'ContainerActionProperty', 'DatasetContentDeliveryRuleDestinationProperty', 'DatasetContentDeliveryRuleProperty', 'DatasetContentVersionValueProperty', 'DeltaTimeProperty', 'DeltaTimeSessionWindowConfigurationProperty', 'FilterProperty', 'GlueConfigurationProperty', 'IotEventsDestinationConfigurationProperty', 'LateDataRuleConfigurationProperty', 'LateDataRuleProperty', 'OutputFileUriValueProperty', 'QueryActionProperty', 'ResourceConfigurationProperty', 'RetentionPeriodProperty', 'S3DestinationConfigurationProperty', 'ScheduleProperty', 'TriggerProperty', 'TriggeringDatasetProperty', 'VariableProperty', 'VersioningConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDataset'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotanalytics.CfnDatasetDefConfig] = pydantic.Field(None)


class CfnDatasetDefConfig(pydantic.BaseModel):
    ActionProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefActionpropertyParams]] = pydantic.Field(None, description='')
    ContainerActionProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefContaineractionpropertyParams]] = pydantic.Field(None, description='')
    DatasetContentDeliveryRuleDestinationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefDatasetcontentdeliveryruledestinationpropertyParams]] = pydantic.Field(None, description='')
    DatasetContentDeliveryRuleProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefDatasetcontentdeliveryrulepropertyParams]] = pydantic.Field(None, description='')
    DatasetContentVersionValueProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefDatasetcontentversionvaluepropertyParams]] = pydantic.Field(None, description='')
    DeltaTimeProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefDeltatimepropertyParams]] = pydantic.Field(None, description='')
    DeltaTimeSessionWindowConfigurationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefDeltatimesessionwindowconfigurationpropertyParams]] = pydantic.Field(None, description='')
    FilterProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefFilterpropertyParams]] = pydantic.Field(None, description='')
    GlueConfigurationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefGlueconfigurationpropertyParams]] = pydantic.Field(None, description='')
    IotEventsDestinationConfigurationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefIoteventsdestinationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    LateDataRuleConfigurationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefLatedataruleconfigurationpropertyParams]] = pydantic.Field(None, description='')
    LateDataRuleProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefLatedatarulepropertyParams]] = pydantic.Field(None, description='')
    OutputFileUriValueProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefOutputfileurivaluepropertyParams]] = pydantic.Field(None, description='')
    QueryActionProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefQueryactionpropertyParams]] = pydantic.Field(None, description='')
    ResourceConfigurationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefResourceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    RetentionPeriodProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefRetentionperiodpropertyParams]] = pydantic.Field(None, description='')
    S3DestinationConfigurationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefS3DestinationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ScheduleProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefSchedulepropertyParams]] = pydantic.Field(None, description='')
    TriggerProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefTriggerpropertyParams]] = pydantic.Field(None, description='')
    TriggeringDatasetProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefTriggeringdatasetpropertyParams]] = pydantic.Field(None, description='')
    VariableProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefVariablepropertyParams]] = pydantic.Field(None, description='')
    VersioningConfigurationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefVersioningconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotanalytics.CfnDatasetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDatasetDefActionpropertyParams(pydantic.BaseModel):
    action_name: str = pydantic.Field(..., description='')
    container_action: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_ContainerActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    query_action: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_QueryActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefContaineractionpropertyParams(pydantic.BaseModel):
    execution_role_arn: str = pydantic.Field(..., description='')
    image: str = pydantic.Field(..., description='')
    resource_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_ResourceConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    variables: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_VariablePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefDatasetcontentdeliveryruledestinationpropertyParams(pydantic.BaseModel):
    iot_events_destination_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_IotEventsDestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_destination_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_S3DestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefDatasetcontentdeliveryrulepropertyParams(pydantic.BaseModel):
    destination: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DatasetContentDeliveryRuleDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    entry_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefDatasetcontentversionvaluepropertyParams(pydantic.BaseModel):
    dataset_name: str = pydantic.Field(..., description='')
    ...

class CfnDatasetDefDeltatimepropertyParams(pydantic.BaseModel):
    offset_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    time_expression: str = pydantic.Field(..., description='')
    ...

class CfnDatasetDefDeltatimesessionwindowconfigurationpropertyParams(pydantic.BaseModel):
    timeout_in_minutes: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnDatasetDefFilterpropertyParams(pydantic.BaseModel):
    delta_time: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DeltaTimePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefGlueconfigurationpropertyParams(pydantic.BaseModel):
    database_name: str = pydantic.Field(..., description='')
    table_name: str = pydantic.Field(..., description='')
    ...

class CfnDatasetDefIoteventsdestinationconfigurationpropertyParams(pydantic.BaseModel):
    input_name: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    ...

class CfnDatasetDefLatedataruleconfigurationpropertyParams(pydantic.BaseModel):
    delta_time_session_window_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DeltaTimeSessionWindowConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefLatedatarulepropertyParams(pydantic.BaseModel):
    rule_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_LateDataRuleConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    rule_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefOutputfileurivaluepropertyParams(pydantic.BaseModel):
    file_name: str = pydantic.Field(..., description='')
    ...

class CfnDatasetDefQueryactionpropertyParams(pydantic.BaseModel):
    sql_query: str = pydantic.Field(..., description='')
    filters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_FilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefResourceconfigurationpropertyParams(pydantic.BaseModel):
    compute_type: str = pydantic.Field(..., description='')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnDatasetDefRetentionperiodpropertyParams(pydantic.BaseModel):
    number_of_days: typing.Union[int, float, None] = pydantic.Field(None, description='')
    unlimited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefS3DestinationconfigurationpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    glue_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_GlueConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefSchedulepropertyParams(pydantic.BaseModel):
    schedule_expression: str = pydantic.Field(..., description='')
    ...

class CfnDatasetDefTriggerpropertyParams(pydantic.BaseModel):
    schedule: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_SchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    triggering_dataset: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_TriggeringDatasetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefTriggeringdatasetpropertyParams(pydantic.BaseModel):
    dataset_name: str = pydantic.Field(..., description='')
    ...

class CfnDatasetDefVariablepropertyParams(pydantic.BaseModel):
    variable_name: str = pydantic.Field(..., description='')
    dataset_content_version_value: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DatasetContentVersionValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    double_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    output_file_uri_value: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_OutputFileUriValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    string_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefVersioningconfigurationpropertyParams(pydantic.BaseModel):
    max_versions: typing.Union[int, float, None] = pydantic.Field(None, description='')
    unlimited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDatasetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDatasetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDatasetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDatasetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDatasetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDatasetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDatasetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDatasetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDatasetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDatasetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDatasetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDatasetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDatasetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDatasetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastore
class CfnDatastoreDef(BaseCfnResource):
    datastore_name: typing.Optional[str] = pydantic.Field(None, description='The name of the data store.\n')
    datastore_partitions: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_DatastorePartitionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the partition dimensions in a data store.\n')
    datastore_storage: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_DatastoreStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Where data store data is stored.\n')
    file_format_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_FileFormatConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Contains the configuration information of file formats. AWS IoT Analytics data stores support JSON and `Parquet <https://docs.aws.amazon.com/https://parquet.apache.org/>`_ . The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.\n")
    retention_period: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_RetentionPeriodPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='How long, in days, message data is kept for the data store. When ``customerManagedS3`` storage is selected, this parameter is ignored.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Metadata which can be used to manage the data store. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['datastore_name', 'datastore_partitions', 'datastore_storage', 'file_format_configuration', 'retention_period', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ColumnProperty', 'CustomerManagedS3Property', 'CustomerManagedS3StorageProperty', 'DatastorePartitionProperty', 'DatastorePartitionsProperty', 'DatastoreStorageProperty', 'FileFormatConfigurationProperty', 'IotSiteWiseMultiLayerStorageProperty', 'ParquetConfigurationProperty', 'PartitionProperty', 'RetentionPeriodProperty', 'SchemaDefinitionProperty', 'TimestampPartitionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastore'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotanalytics.CfnDatastoreDefConfig] = pydantic.Field(None)


class CfnDatastoreDefConfig(pydantic.BaseModel):
    ColumnProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefColumnpropertyParams]] = pydantic.Field(None, description='')
    CustomerManagedS3Property: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefCustomermanageds3PropertyParams]] = pydantic.Field(None, description='')
    CustomerManagedS3StorageProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefCustomermanageds3StoragepropertyParams]] = pydantic.Field(None, description='')
    DatastorePartitionProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefDatastorepartitionpropertyParams]] = pydantic.Field(None, description='')
    DatastorePartitionsProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefDatastorepartitionspropertyParams]] = pydantic.Field(None, description='')
    DatastoreStorageProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefDatastorestoragepropertyParams]] = pydantic.Field(None, description='')
    FileFormatConfigurationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefFileformatconfigurationpropertyParams]] = pydantic.Field(None, description='')
    IotSiteWiseMultiLayerStorageProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefIotsitewisemultilayerstoragepropertyParams]] = pydantic.Field(None, description='')
    ParquetConfigurationProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefParquetconfigurationpropertyParams]] = pydantic.Field(None, description='')
    PartitionProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefPartitionpropertyParams]] = pydantic.Field(None, description='')
    RetentionPeriodProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefRetentionperiodpropertyParams]] = pydantic.Field(None, description='')
    SchemaDefinitionProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefSchemadefinitionpropertyParams]] = pydantic.Field(None, description='')
    TimestampPartitionProperty: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefTimestamppartitionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotanalytics.CfnDatastoreDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDatastoreDefColumnpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnDatastoreDefCustomermanageds3PropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    key_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefCustomermanageds3StoragepropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefDatastorepartitionpropertyParams(pydantic.BaseModel):
    partition: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_PartitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timestamp_partition: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_TimestampPartitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefDatastorepartitionspropertyParams(pydantic.BaseModel):
    partitions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_DatastorePartitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefDatastorestoragepropertyParams(pydantic.BaseModel):
    customer_managed_s3: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_CustomerManagedS3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    iot_site_wise_multi_layer_storage: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_IotSiteWiseMultiLayerStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_managed_s3: typing.Any = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefFileformatconfigurationpropertyParams(pydantic.BaseModel):
    json_configuration: typing.Any = pydantic.Field(None, description='')
    parquet_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_ParquetConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefIotsitewisemultilayerstoragepropertyParams(pydantic.BaseModel):
    customer_managed_s3_storage: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_CustomerManagedS3StoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefParquetconfigurationpropertyParams(pydantic.BaseModel):
    schema_definition: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_SchemaDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefPartitionpropertyParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='')
    ...

class CfnDatastoreDefRetentionperiodpropertyParams(pydantic.BaseModel):
    number_of_days: typing.Union[int, float, None] = pydantic.Field(None, description='')
    unlimited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefSchemadefinitionpropertyParams(pydantic.BaseModel):
    columns: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_ColumnPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefTimestamppartitionpropertyParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='')
    timestamp_format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDatastoreDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDatastoreDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDatastoreDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDatastoreDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDatastoreDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDatastoreDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDatastoreDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDatastoreDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDatastoreDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDatastoreDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDatastoreDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDatastoreDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDatastoreDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDatastoreDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipeline
class CfnPipelineDef(BaseCfnResource):
    pipeline_activities: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_ActivityPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of "PipelineActivity" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data. The list can be 2-25 *PipelineActivity* objects and must contain both a ``channel`` and a ``datastore`` activity. Each entry in the list must contain only one activity, for example: ``pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]``\n')
    pipeline_name: typing.Optional[str] = pydantic.Field(None, description='The name of the pipeline.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Metadata which can be used to manage the pipeline. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['pipeline_activities', 'pipeline_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ActivityProperty', 'AddAttributesProperty', 'ChannelProperty', 'DatastoreProperty', 'DeviceRegistryEnrichProperty', 'DeviceShadowEnrichProperty', 'FilterProperty', 'LambdaProperty', 'MathProperty', 'RemoveAttributesProperty', 'SelectAttributesProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipeline'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotanalytics.CfnPipelineDefConfig] = pydantic.Field(None)


class CfnPipelineDefConfig(pydantic.BaseModel):
    ActivityProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefActivitypropertyParams]] = pydantic.Field(None, description='')
    AddAttributesProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefAddattributespropertyParams]] = pydantic.Field(None, description='')
    ChannelProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefChannelpropertyParams]] = pydantic.Field(None, description='')
    DatastoreProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefDatastorepropertyParams]] = pydantic.Field(None, description='')
    DeviceRegistryEnrichProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefDeviceregistryenrichpropertyParams]] = pydantic.Field(None, description='')
    DeviceShadowEnrichProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefDeviceshadowenrichpropertyParams]] = pydantic.Field(None, description='')
    FilterProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefFilterpropertyParams]] = pydantic.Field(None, description='')
    LambdaProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefLambdapropertyParams]] = pydantic.Field(None, description='')
    MathProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefMathpropertyParams]] = pydantic.Field(None, description='')
    RemoveAttributesProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefRemoveattributespropertyParams]] = pydantic.Field(None, description='')
    SelectAttributesProperty: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefSelectattributespropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotanalytics.CfnPipelineDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPipelineDefActivitypropertyParams(pydantic.BaseModel):
    add_attributes: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_AddAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    channel: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_ChannelPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    datastore: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_DatastorePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    device_registry_enrich: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_DeviceRegistryEnrichPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    device_shadow_enrich: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_DeviceShadowEnrichPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    filter: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_FilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    lambda_: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_LambdaPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    math: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_MathPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    remove_attributes: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_RemoveAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    select_attributes: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_SelectAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefAddattributespropertyParams(pydantic.BaseModel):
    attributes: typing.Union[models.UnsupportedResource, typing.Mapping[str, str]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    next: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefChannelpropertyParams(pydantic.BaseModel):
    channel_name: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    next: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefDatastorepropertyParams(pydantic.BaseModel):
    datastore_name: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    ...

class CfnPipelineDefDeviceregistryenrichpropertyParams(pydantic.BaseModel):
    attribute: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    thing_name: str = pydantic.Field(..., description='')
    next: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefDeviceshadowenrichpropertyParams(pydantic.BaseModel):
    attribute: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    thing_name: str = pydantic.Field(..., description='')
    next: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefFilterpropertyParams(pydantic.BaseModel):
    filter: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    next: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefLambdapropertyParams(pydantic.BaseModel):
    batch_size: typing.Union[int, float] = pydantic.Field(..., description='')
    lambda_name: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    next: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefMathpropertyParams(pydantic.BaseModel):
    attribute: str = pydantic.Field(..., description='')
    math: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    next: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefRemoveattributespropertyParams(pydantic.BaseModel):
    attributes: typing.Sequence[str] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    next: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefSelectattributespropertyParams(pydantic.BaseModel):
    attributes: typing.Sequence[str] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    next: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPipelineDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPipelineDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPipelineDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPipelineDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPipelineDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPipelineDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPipelineDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPipelineDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPipelineDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPipelineDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPipelineDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPipelineDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPipelineDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotanalytics.CfnChannelProps
class CfnChannelPropsDef(BaseCfnProperty):
    channel_name: typing.Optional[str] = pydantic.Field(None, description='The name of the channel.\n')
    channel_storage: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnChannel_ChannelStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Where channel data is stored.\n')
    retention_period: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnChannel_RetentionPeriodPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='How long, in days, message data is kept for the channel.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Metadata which can be used to manage the channel. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-channel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    # service_managed_s3: Any\n\n    cfn_channel_props = iotanalytics.CfnChannelProps(\n        channel_name="channelName",\n        channel_storage=iotanalytics.CfnChannel.ChannelStorageProperty(\n            customer_managed_s3=iotanalytics.CfnChannel.CustomerManagedS3Property(\n                bucket="bucket",\n                role_arn="roleArn",\n\n                # the properties below are optional\n                key_prefix="keyPrefix"\n            ),\n            service_managed_s3=service_managed_s3\n        ),\n        retention_period=iotanalytics.CfnChannel.RetentionPeriodProperty(\n            number_of_days=123,\n            unlimited=False\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_name', 'channel_storage', 'retention_period', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatasetProps
class CfnDatasetPropsDef(BaseCfnProperty):
    actions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_ActionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ``DatasetAction`` objects that automatically create the dataset contents.\n')
    content_delivery_rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_DatasetContentDeliveryRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='When dataset contents are created they are delivered to destinations specified here.\n')
    dataset_name: typing.Optional[str] = pydantic.Field(None, description='The name of the dataset.\n')
    late_data_rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_LateDataRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of data rules that send notifications to CloudWatch, when data arrives late. To specify ``lateDataRules`` , the dataset must use a `DeltaTimer <https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html>`_ filter.\n')
    retention_period: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_RetentionPeriodPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Optional. How long, in days, message data is kept for the dataset.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Metadata which can be used to manage the data set. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    triggers: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_TriggerPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The ``DatasetTrigger`` objects that specify when the dataset is automatically updated.\n')
    versioning_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDataset_VersioningConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the ``retentionPeriod`` parameter. For more information, see `Keeping Multiple Versions of AWS IoT Analytics datasets <https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions>`_ in the *AWS IoT Analytics User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-dataset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    cfn_dataset_props = iotanalytics.CfnDatasetProps(\n        actions=[iotanalytics.CfnDataset.ActionProperty(\n            action_name="actionName",\n\n            # the properties below are optional\n            container_action=iotanalytics.CfnDataset.ContainerActionProperty(\n                execution_role_arn="executionRoleArn",\n                image="image",\n                resource_configuration=iotanalytics.CfnDataset.ResourceConfigurationProperty(\n                    compute_type="computeType",\n                    volume_size_in_gb=123\n                ),\n\n                # the properties below are optional\n                variables=[iotanalytics.CfnDataset.VariableProperty(\n                    variable_name="variableName",\n\n                    # the properties below are optional\n                    dataset_content_version_value=iotanalytics.CfnDataset.DatasetContentVersionValueProperty(\n                        dataset_name="datasetName"\n                    ),\n                    double_value=123,\n                    output_file_uri_value=iotanalytics.CfnDataset.OutputFileUriValueProperty(\n                        file_name="fileName"\n                    ),\n                    string_value="stringValue"\n                )]\n            ),\n            query_action=iotanalytics.CfnDataset.QueryActionProperty(\n                sql_query="sqlQuery",\n\n                # the properties below are optional\n                filters=[iotanalytics.CfnDataset.FilterProperty(\n                    delta_time=iotanalytics.CfnDataset.DeltaTimeProperty(\n                        offset_seconds=123,\n                        time_expression="timeExpression"\n                    )\n                )]\n            )\n        )],\n\n        # the properties below are optional\n        content_delivery_rules=[iotanalytics.CfnDataset.DatasetContentDeliveryRuleProperty(\n            destination=iotanalytics.CfnDataset.DatasetContentDeliveryRuleDestinationProperty(\n                iot_events_destination_configuration=iotanalytics.CfnDataset.IotEventsDestinationConfigurationProperty(\n                    input_name="inputName",\n                    role_arn="roleArn"\n                ),\n                s3_destination_configuration=iotanalytics.CfnDataset.S3DestinationConfigurationProperty(\n                    bucket="bucket",\n                    key="key",\n                    role_arn="roleArn",\n\n                    # the properties below are optional\n                    glue_configuration=iotanalytics.CfnDataset.GlueConfigurationProperty(\n                        database_name="databaseName",\n                        table_name="tableName"\n                    )\n                )\n            ),\n\n            # the properties below are optional\n            entry_name="entryName"\n        )],\n        dataset_name="datasetName",\n        late_data_rules=[iotanalytics.CfnDataset.LateDataRuleProperty(\n            rule_configuration=iotanalytics.CfnDataset.LateDataRuleConfigurationProperty(\n                delta_time_session_window_configuration=iotanalytics.CfnDataset.DeltaTimeSessionWindowConfigurationProperty(\n                    timeout_in_minutes=123\n                )\n            ),\n\n            # the properties below are optional\n            rule_name="ruleName"\n        )],\n        retention_period=iotanalytics.CfnDataset.RetentionPeriodProperty(\n            number_of_days=123,\n            unlimited=False\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        triggers=[iotanalytics.CfnDataset.TriggerProperty(\n            schedule=iotanalytics.CfnDataset.ScheduleProperty(\n                schedule_expression="scheduleExpression"\n            ),\n            triggering_dataset=iotanalytics.CfnDataset.TriggeringDatasetProperty(\n                dataset_name="datasetName"\n            )\n        )],\n        versioning_configuration=iotanalytics.CfnDataset.VersioningConfigurationProperty(\n            max_versions=123,\n            unlimited=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'content_delivery_rules', 'dataset_name', 'late_data_rules', 'retention_period', 'tags', 'triggers', 'versioning_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatasetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnDatastoreProps
class CfnDatastorePropsDef(BaseCfnProperty):
    datastore_name: typing.Optional[str] = pydantic.Field(None, description='The name of the data store.\n')
    datastore_partitions: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_DatastorePartitionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the partition dimensions in a data store.\n')
    datastore_storage: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_DatastoreStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Where data store data is stored.\n')
    file_format_configuration: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_FileFormatConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Contains the configuration information of file formats. AWS IoT Analytics data stores support JSON and `Parquet <https://docs.aws.amazon.com/https://parquet.apache.org/>`_ . The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.\n")
    retention_period: typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnDatastore_RetentionPeriodPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='How long, in days, message data is kept for the data store. When ``customerManagedS3`` storage is selected, this parameter is ignored.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Metadata which can be used to manage the data store. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-datastore.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    # json_configuration: Any\n    # service_managed_s3: Any\n\n    cfn_datastore_props = iotanalytics.CfnDatastoreProps(\n        datastore_name="datastoreName",\n        datastore_partitions=iotanalytics.CfnDatastore.DatastorePartitionsProperty(\n            partitions=[iotanalytics.CfnDatastore.DatastorePartitionProperty(\n                partition=iotanalytics.CfnDatastore.PartitionProperty(\n                    attribute_name="attributeName"\n                ),\n                timestamp_partition=iotanalytics.CfnDatastore.TimestampPartitionProperty(\n                    attribute_name="attributeName",\n\n                    # the properties below are optional\n                    timestamp_format="timestampFormat"\n                )\n            )]\n        ),\n        datastore_storage=iotanalytics.CfnDatastore.DatastoreStorageProperty(\n            customer_managed_s3=iotanalytics.CfnDatastore.CustomerManagedS3Property(\n                bucket="bucket",\n                role_arn="roleArn",\n\n                # the properties below are optional\n                key_prefix="keyPrefix"\n            ),\n            iot_site_wise_multi_layer_storage=iotanalytics.CfnDatastore.IotSiteWiseMultiLayerStorageProperty(\n                customer_managed_s3_storage=iotanalytics.CfnDatastore.CustomerManagedS3StorageProperty(\n                    bucket="bucket",\n\n                    # the properties below are optional\n                    key_prefix="keyPrefix"\n                )\n            ),\n            service_managed_s3=service_managed_s3\n        ),\n        file_format_configuration=iotanalytics.CfnDatastore.FileFormatConfigurationProperty(\n            json_configuration=json_configuration,\n            parquet_configuration=iotanalytics.CfnDatastore.ParquetConfigurationProperty(\n                schema_definition=iotanalytics.CfnDatastore.SchemaDefinitionProperty(\n                    columns=[iotanalytics.CfnDatastore.ColumnProperty(\n                        name="name",\n                        type="type"\n                    )]\n                )\n            )\n        ),\n        retention_period=iotanalytics.CfnDatastore.RetentionPeriodProperty(\n            number_of_days=123,\n            unlimited=False\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['datastore_name', 'datastore_partitions', 'datastore_storage', 'file_format_configuration', 'retention_period', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnDatastoreProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotanalytics.CfnPipelineProps
class CfnPipelinePropsDef(BaseCfnProperty):
    pipeline_activities: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotanalytics.CfnPipeline_ActivityPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of "PipelineActivity" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data. The list can be 2-25 *PipelineActivity* objects and must contain both a ``channel`` and a ``datastore`` activity. Each entry in the list must contain only one activity, for example: ``pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]``\n')
    pipeline_name: typing.Optional[str] = pydantic.Field(None, description='The name of the pipeline.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Metadata which can be used to manage the pipeline. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-pipeline.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotanalytics as iotanalytics\n\n    cfn_pipeline_props = iotanalytics.CfnPipelineProps(\n        pipeline_activities=[iotanalytics.CfnPipeline.ActivityProperty(\n            add_attributes=iotanalytics.CfnPipeline.AddAttributesProperty(\n                attributes={\n                    "attributes_key": "attributes"\n                },\n                name="name",\n\n                # the properties below are optional\n                next="next"\n            ),\n            channel=iotanalytics.CfnPipeline.ChannelProperty(\n                channel_name="channelName",\n                name="name",\n\n                # the properties below are optional\n                next="next"\n            ),\n            datastore=iotanalytics.CfnPipeline.DatastoreProperty(\n                datastore_name="datastoreName",\n                name="name"\n            ),\n            device_registry_enrich=iotanalytics.CfnPipeline.DeviceRegistryEnrichProperty(\n                attribute="attribute",\n                name="name",\n                role_arn="roleArn",\n                thing_name="thingName",\n\n                # the properties below are optional\n                next="next"\n            ),\n            device_shadow_enrich=iotanalytics.CfnPipeline.DeviceShadowEnrichProperty(\n                attribute="attribute",\n                name="name",\n                role_arn="roleArn",\n                thing_name="thingName",\n\n                # the properties below are optional\n                next="next"\n            ),\n            filter=iotanalytics.CfnPipeline.FilterProperty(\n                filter="filter",\n                name="name",\n\n                # the properties below are optional\n                next="next"\n            ),\n            lambda_=iotanalytics.CfnPipeline.LambdaProperty(\n                batch_size=123,\n                lambda_name="lambdaName",\n                name="name",\n\n                # the properties below are optional\n                next="next"\n            ),\n            math=iotanalytics.CfnPipeline.MathProperty(\n                attribute="attribute",\n                math="math",\n                name="name",\n\n                # the properties below are optional\n                next="next"\n            ),\n            remove_attributes=iotanalytics.CfnPipeline.RemoveAttributesProperty(\n                attributes=["attributes"],\n                name="name",\n\n                # the properties below are optional\n                next="next"\n            ),\n            select_attributes=iotanalytics.CfnPipeline.SelectAttributesProperty(\n                attributes=["attributes"],\n                name="name",\n\n                # the properties below are optional\n                next="next"\n            )\n        )],\n\n        # the properties below are optional\n        pipeline_name="pipelineName",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['pipeline_activities', 'pipeline_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotanalytics.CfnPipelineProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnChannel_ChannelStorageProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnChannel_ChannelStoragePropertyDef]] = pydantic.Field(None)
    CfnChannel_CustomerManagedS3Property: typing.Optional[dict[str, models.aws_iotanalytics.CfnChannel_CustomerManagedS3PropertyDef]] = pydantic.Field(None)
    CfnChannel_RetentionPeriodProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnChannel_RetentionPeriodPropertyDef]] = pydantic.Field(None)
    CfnDataset_ActionProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_ActionPropertyDef]] = pydantic.Field(None)
    CfnDataset_ContainerActionProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_ContainerActionPropertyDef]] = pydantic.Field(None)
    CfnDataset_DatasetContentDeliveryRuleDestinationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_DatasetContentDeliveryRuleDestinationPropertyDef]] = pydantic.Field(None)
    CfnDataset_DatasetContentDeliveryRuleProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_DatasetContentDeliveryRulePropertyDef]] = pydantic.Field(None)
    CfnDataset_DatasetContentVersionValueProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_DatasetContentVersionValuePropertyDef]] = pydantic.Field(None)
    CfnDataset_DeltaTimeProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_DeltaTimePropertyDef]] = pydantic.Field(None)
    CfnDataset_DeltaTimeSessionWindowConfigurationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_DeltaTimeSessionWindowConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataset_FilterProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_FilterPropertyDef]] = pydantic.Field(None)
    CfnDataset_GlueConfigurationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_GlueConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataset_IotEventsDestinationConfigurationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_IotEventsDestinationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataset_LateDataRuleConfigurationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_LateDataRuleConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataset_LateDataRuleProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_LateDataRulePropertyDef]] = pydantic.Field(None)
    CfnDataset_OutputFileUriValueProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_OutputFileUriValuePropertyDef]] = pydantic.Field(None)
    CfnDataset_QueryActionProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_QueryActionPropertyDef]] = pydantic.Field(None)
    CfnDataset_ResourceConfigurationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_ResourceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataset_RetentionPeriodProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_RetentionPeriodPropertyDef]] = pydantic.Field(None)
    CfnDataset_S3DestinationConfigurationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_S3DestinationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataset_ScheduleProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_SchedulePropertyDef]] = pydantic.Field(None)
    CfnDataset_TriggeringDatasetProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_TriggeringDatasetPropertyDef]] = pydantic.Field(None)
    CfnDataset_TriggerProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_TriggerPropertyDef]] = pydantic.Field(None)
    CfnDataset_VariableProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_VariablePropertyDef]] = pydantic.Field(None)
    CfnDataset_VersioningConfigurationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDataset_VersioningConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDatastore_ColumnProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_ColumnPropertyDef]] = pydantic.Field(None)
    CfnDatastore_CustomerManagedS3Property: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_CustomerManagedS3PropertyDef]] = pydantic.Field(None)
    CfnDatastore_CustomerManagedS3StorageProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_CustomerManagedS3StoragePropertyDef]] = pydantic.Field(None)
    CfnDatastore_DatastorePartitionProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_DatastorePartitionPropertyDef]] = pydantic.Field(None)
    CfnDatastore_DatastorePartitionsProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_DatastorePartitionsPropertyDef]] = pydantic.Field(None)
    CfnDatastore_DatastoreStorageProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_DatastoreStoragePropertyDef]] = pydantic.Field(None)
    CfnDatastore_FileFormatConfigurationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_FileFormatConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDatastore_IotSiteWiseMultiLayerStorageProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_IotSiteWiseMultiLayerStoragePropertyDef]] = pydantic.Field(None)
    CfnDatastore_ParquetConfigurationProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_ParquetConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDatastore_PartitionProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_PartitionPropertyDef]] = pydantic.Field(None)
    CfnDatastore_RetentionPeriodProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_RetentionPeriodPropertyDef]] = pydantic.Field(None)
    CfnDatastore_SchemaDefinitionProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_SchemaDefinitionPropertyDef]] = pydantic.Field(None)
    CfnDatastore_TimestampPartitionProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastore_TimestampPartitionPropertyDef]] = pydantic.Field(None)
    CfnPipeline_ActivityProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_ActivityPropertyDef]] = pydantic.Field(None)
    CfnPipeline_AddAttributesProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_AddAttributesPropertyDef]] = pydantic.Field(None)
    CfnPipeline_ChannelProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_ChannelPropertyDef]] = pydantic.Field(None)
    CfnPipeline_DatastoreProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_DatastorePropertyDef]] = pydantic.Field(None)
    CfnPipeline_DeviceRegistryEnrichProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_DeviceRegistryEnrichPropertyDef]] = pydantic.Field(None)
    CfnPipeline_DeviceShadowEnrichProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_DeviceShadowEnrichPropertyDef]] = pydantic.Field(None)
    CfnPipeline_FilterProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_FilterPropertyDef]] = pydantic.Field(None)
    CfnPipeline_LambdaProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_LambdaPropertyDef]] = pydantic.Field(None)
    CfnPipeline_MathProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_MathPropertyDef]] = pydantic.Field(None)
    CfnPipeline_RemoveAttributesProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_RemoveAttributesPropertyDef]] = pydantic.Field(None)
    CfnPipeline_SelectAttributesProperty: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipeline_SelectAttributesPropertyDef]] = pydantic.Field(None)
    CfnChannel: typing.Optional[dict[str, models.aws_iotanalytics.CfnChannelDef]] = pydantic.Field(None)
    CfnDataset: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatasetDef]] = pydantic.Field(None)
    CfnDatastore: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastoreDef]] = pydantic.Field(None)
    CfnPipeline: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipelineDef]] = pydantic.Field(None)
    CfnChannelProps: typing.Optional[dict[str, models.aws_iotanalytics.CfnChannelPropsDef]] = pydantic.Field(None)
    CfnDatasetProps: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatasetPropsDef]] = pydantic.Field(None)
    CfnDatastoreProps: typing.Optional[dict[str, models.aws_iotanalytics.CfnDatastorePropsDef]] = pydantic.Field(None)
    CfnPipelineProps: typing.Optional[dict[str, models.aws_iotanalytics.CfnPipelinePropsDef]] = pydantic.Field(None)
    ...

import models
