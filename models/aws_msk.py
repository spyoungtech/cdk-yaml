from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_msk.CfnCluster.BrokerLogsProperty
class CfnCluster_BrokerLogsPropertyDef(BaseStruct):
    cloud_watch_logs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_CloudWatchLogsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details of the CloudWatch Logs destination for broker logs.\n')
    firehose: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_FirehosePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details of the Kinesis Data Firehose delivery stream that is the destination for broker logs.\n')
    s3: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_S3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details of the Amazon S3 destination for broker logs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-brokerlogs.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    broker_logs_property = msk.CfnCluster.BrokerLogsProperty(\n        cloud_watch_logs=msk.CfnCluster.CloudWatchLogsProperty(\n            enabled=False,\n\n            # the properties below are optional\n            log_group="logGroup"\n        ),\n        firehose=msk.CfnCluster.FirehoseProperty(\n            enabled=False,\n\n            # the properties below are optional\n            delivery_stream="deliveryStream"\n        ),\n        s3=msk.CfnCluster.S3Property(\n            enabled=False,\n\n            # the properties below are optional\n            bucket="bucket",\n            prefix="prefix"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_logs', 'firehose', 's3']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.BrokerLogsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.BrokerNodeGroupInfoProperty
class CfnCluster_BrokerNodeGroupInfoPropertyDef(BaseStruct):
    client_subnets: typing.Sequence[str] = pydantic.Field(..., description="The list of subnets to connect to in the client virtual private cloud (VPC). Amazon creates elastic network interfaces inside these subnets. Client applications use elastic network interfaces to produce and consume data. If you use the US West (N. California) Region, specify exactly two subnets. For other Regions where Amazon MSK is available, you can specify either two or three subnets. The subnets that you specify must be in distinct Availability Zones. When you create a cluster, Amazon MSK distributes the broker nodes evenly across the subnets that you specify. Client subnets can't occupy the Availability Zone with ID ``use1-az3`` .\n")
    instance_type: str = pydantic.Field(..., description='The type of Amazon EC2 instances to use for brokers. The following instance types are allowed: kafka.m5.large, kafka.m5.xlarge, kafka.m5.2xlarge, kafka.m5.4xlarge, kafka.m5.8xlarge, kafka.m5.12xlarge, kafka.m5.16xlarge, and kafka.m5.24xlarge, and kafka.t3.small.\n')
    broker_az_distribution: typing.Optional[str] = pydantic.Field(None, description='This parameter is currently not in use.\n')
    connectivity_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ConnectivityInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Information about the cluster's connectivity setting.\n")
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="The security groups to associate with the elastic network interfaces in order to specify who can connect to and communicate with the Amazon MSK cluster. If you don't specify a security group, Amazon MSK uses the default security group associated with the VPC. If you specify security groups that were shared with you, you must ensure that you have permissions to them. Specifically, you need the ``ec2:DescribeSecurityGroups`` permission.\n")
    storage_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_StorageInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about storage volumes attached to Amazon MSK broker nodes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-brokernodegroupinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    broker_node_group_info_property = msk.CfnCluster.BrokerNodeGroupInfoProperty(\n        client_subnets=["clientSubnets"],\n        instance_type="instanceType",\n\n        # the properties below are optional\n        broker_az_distribution="brokerAzDistribution",\n        connectivity_info=msk.CfnCluster.ConnectivityInfoProperty(\n            public_access=msk.CfnCluster.PublicAccessProperty(\n                type="type"\n            ),\n            vpc_connectivity=msk.CfnCluster.VpcConnectivityProperty(\n                client_authentication=msk.CfnCluster.VpcConnectivityClientAuthenticationProperty(\n                    sasl=msk.CfnCluster.VpcConnectivitySaslProperty(\n                        iam=msk.CfnCluster.VpcConnectivityIamProperty(\n                            enabled=False\n                        ),\n                        scram=msk.CfnCluster.VpcConnectivityScramProperty(\n                            enabled=False\n                        )\n                    ),\n                    tls=msk.CfnCluster.VpcConnectivityTlsProperty(\n                        enabled=False\n                    )\n                )\n            )\n        ),\n        security_groups=["securityGroups"],\n        storage_info=msk.CfnCluster.StorageInfoProperty(\n            ebs_storage_info=msk.CfnCluster.EBSStorageInfoProperty(\n                provisioned_throughput=msk.CfnCluster.ProvisionedThroughputProperty(\n                    enabled=False,\n                    volume_throughput=123\n                ),\n                volume_size=123\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_subnets', 'instance_type', 'broker_az_distribution', 'connectivity_info', 'security_groups', 'storage_info']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.BrokerNodeGroupInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.ClientAuthenticationProperty
class CfnCluster_ClientAuthenticationPropertyDef(BaseStruct):
    sasl: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_SaslPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details for client authentication using SASL. To turn on SASL, you must also turn on ``EncryptionInTransit`` by setting ``inCluster`` to true. You must set ``clientBroker`` to either ``TLS`` or ``TLS_PLAINTEXT`` . If you choose ``TLS_PLAINTEXT`` , then you must also set ``unauthenticated`` to true.\n')
    tls: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_TlsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details for ClientAuthentication using TLS. To turn on TLS access control, you must also turn on ``EncryptionInTransit`` by setting ``inCluster`` to true and ``clientBroker`` to ``TLS`` .\n')
    unauthenticated: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_UnauthenticatedPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details for ClientAuthentication using no authentication.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-clientauthentication.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    client_authentication_property = msk.CfnCluster.ClientAuthenticationProperty(\n        sasl=msk.CfnCluster.SaslProperty(\n            iam=msk.CfnCluster.IamProperty(\n                enabled=False\n            ),\n            scram=msk.CfnCluster.ScramProperty(\n                enabled=False\n            )\n        ),\n        tls=msk.CfnCluster.TlsProperty(\n            certificate_authority_arn_list=["certificateAuthorityArnList"],\n            enabled=False\n        ),\n        unauthenticated=msk.CfnCluster.UnauthenticatedProperty(\n            enabled=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sasl', 'tls', 'unauthenticated']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.ClientAuthenticationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.CloudWatchLogsProperty
class CfnCluster_CloudWatchLogsPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Specifies whether broker logs get sent to the specified CloudWatch Logs destination.\n')
    log_group: typing.Optional[str] = pydantic.Field(None, description='The CloudWatch log group that is the destination for broker logs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-cloudwatchlogs.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    cloud_watch_logs_property = msk.CfnCluster.CloudWatchLogsProperty(\n        enabled=False,\n\n        # the properties below are optional\n        log_group="logGroup"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'log_group']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.CloudWatchLogsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.ConfigurationInfoProperty
class CfnCluster_ConfigurationInfoPropertyDef(BaseStruct):
    arn: str = pydantic.Field(..., description='ARN of the configuration to use.\n')
    revision: typing.Union[int, float] = pydantic.Field(..., description='The revision of the configuration to use.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-configurationinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    configuration_info_property = msk.CfnCluster.ConfigurationInfoProperty(\n        arn="arn",\n        revision=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['arn', 'revision']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.ConfigurationInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.ConnectivityInfoProperty
class CfnCluster_ConnectivityInfoPropertyDef(BaseStruct):
    public_access: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_PublicAccessPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Access control settings for the cluster's brokers.\n")
    vpc_connectivity: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='VPC connection control settings for brokers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-connectivityinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    connectivity_info_property = msk.CfnCluster.ConnectivityInfoProperty(\n        public_access=msk.CfnCluster.PublicAccessProperty(\n            type="type"\n        ),\n        vpc_connectivity=msk.CfnCluster.VpcConnectivityProperty(\n            client_authentication=msk.CfnCluster.VpcConnectivityClientAuthenticationProperty(\n                sasl=msk.CfnCluster.VpcConnectivitySaslProperty(\n                    iam=msk.CfnCluster.VpcConnectivityIamProperty(\n                        enabled=False\n                    ),\n                    scram=msk.CfnCluster.VpcConnectivityScramProperty(\n                        enabled=False\n                    )\n                ),\n                tls=msk.CfnCluster.VpcConnectivityTlsProperty(\n                    enabled=False\n                )\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['public_access', 'vpc_connectivity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.ConnectivityInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.EBSStorageInfoProperty
class CfnCluster_EBSStorageInfoPropertyDef(BaseStruct):
    provisioned_throughput: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ProvisionedThroughputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='EBS volume provisioned throughput information.\n')
    volume_size: typing.Union[int, float, None] = pydantic.Field(None, description='The size in GiB of the EBS volume for the data drive on each broker node.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-ebsstorageinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    e_bSStorage_info_property = msk.CfnCluster.EBSStorageInfoProperty(\n        provisioned_throughput=msk.CfnCluster.ProvisionedThroughputProperty(\n            enabled=False,\n            volume_throughput=123\n        ),\n        volume_size=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['provisioned_throughput', 'volume_size']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.EBSStorageInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.EncryptionAtRestProperty
class CfnCluster_EncryptionAtRestPropertyDef(BaseStruct):
    data_volume_kms_key_id: str = pydantic.Field(..., description='The ARN of the Amazon KMS key for encrypting data at rest. If you don\'t specify a KMS key, MSK creates one for you and uses it.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-encryptionatrest.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    encryption_at_rest_property = msk.CfnCluster.EncryptionAtRestProperty(\n        data_volume_kms_key_id="dataVolumeKmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_volume_kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.EncryptionAtRestProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.EncryptionInfoProperty
class CfnCluster_EncryptionInfoPropertyDef(BaseStruct):
    encryption_at_rest: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_EncryptionAtRestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The data-volume encryption details.\n')
    encryption_in_transit: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_EncryptionInTransitPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The details for encryption in transit.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-encryptioninfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    encryption_info_property = msk.CfnCluster.EncryptionInfoProperty(\n        encryption_at_rest=msk.CfnCluster.EncryptionAtRestProperty(\n            data_volume_kms_key_id="dataVolumeKmsKeyId"\n        ),\n        encryption_in_transit=msk.CfnCluster.EncryptionInTransitProperty(\n            client_broker="clientBroker",\n            in_cluster=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encryption_at_rest', 'encryption_in_transit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.EncryptionInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.EncryptionInTransitProperty
class CfnCluster_EncryptionInTransitPropertyDef(BaseStruct):
    client_broker: typing.Optional[str] = pydantic.Field(None, description='Indicates the encryption setting for data in transit between clients and brokers. You must set it to one of the following values. ``TLS`` means that client-broker communication is enabled with TLS only. ``TLS_PLAINTEXT`` means that client-broker communication is enabled for both TLS-encrypted, as well as plaintext data. ``PLAINTEXT`` means that client-broker communication is enabled in plaintext only. The default value is ``TLS`` .\n')
    in_cluster: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='When set to true, it indicates that data communication among the broker nodes of the cluster is encrypted. When set to false, the communication happens in plaintext. The default value is true.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-encryptionintransit.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    encryption_in_transit_property = msk.CfnCluster.EncryptionInTransitProperty(\n        client_broker="clientBroker",\n        in_cluster=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_broker', 'in_cluster']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.EncryptionInTransitProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.FirehoseProperty
class CfnCluster_FirehosePropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Specifies whether broker logs get send to the specified Kinesis Data Firehose delivery stream.\n')
    delivery_stream: typing.Optional[str] = pydantic.Field(None, description='The Kinesis Data Firehose delivery stream that is the destination for broker logs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-firehose.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    firehose_property = msk.CfnCluster.FirehoseProperty(\n        enabled=False,\n\n        # the properties below are optional\n        delivery_stream="deliveryStream"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'delivery_stream']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.FirehoseProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.IamProperty
class CfnCluster_IamPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='SASL/IAM authentication is enabled or not.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-iam.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    iam_property = msk.CfnCluster.IamProperty(\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.IamProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.JmxExporterProperty
class CfnCluster_JmxExporterPropertyDef(BaseStruct):
    enabled_in_broker: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Indicates whether you want to enable or disable the JMX Exporter.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-jmxexporter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    jmx_exporter_property = msk.CfnCluster.JmxExporterProperty(\n        enabled_in_broker=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled_in_broker']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.JmxExporterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.LoggingInfoProperty
class CfnCluster_LoggingInfoPropertyDef(BaseStruct):
    broker_logs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_BrokerLogsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='You can configure your MSK cluster to send broker logs to different destination types. This configuration specifies the details of these destinations.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-logginginfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    logging_info_property = msk.CfnCluster.LoggingInfoProperty(\n        broker_logs=msk.CfnCluster.BrokerLogsProperty(\n            cloud_watch_logs=msk.CfnCluster.CloudWatchLogsProperty(\n                enabled=False,\n\n                # the properties below are optional\n                log_group="logGroup"\n            ),\n            firehose=msk.CfnCluster.FirehoseProperty(\n                enabled=False,\n\n                # the properties below are optional\n                delivery_stream="deliveryStream"\n            ),\n            s3=msk.CfnCluster.S3Property(\n                enabled=False,\n\n                # the properties below are optional\n                bucket="bucket",\n                prefix="prefix"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['broker_logs']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.LoggingInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.NodeExporterProperty
class CfnCluster_NodeExporterPropertyDef(BaseStruct):
    enabled_in_broker: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Indicates whether you want to enable or disable the Node Exporter.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-nodeexporter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    node_exporter_property = msk.CfnCluster.NodeExporterProperty(\n        enabled_in_broker=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled_in_broker']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.NodeExporterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.OpenMonitoringProperty
class CfnCluster_OpenMonitoringPropertyDef(BaseStruct):
    prometheus: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_PrometheusPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Prometheus exporter settings.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-openmonitoring.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    open_monitoring_property = msk.CfnCluster.OpenMonitoringProperty(\n        prometheus=msk.CfnCluster.PrometheusProperty(\n            jmx_exporter=msk.CfnCluster.JmxExporterProperty(\n                enabled_in_broker=False\n            ),\n            node_exporter=msk.CfnCluster.NodeExporterProperty(\n                enabled_in_broker=False\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['prometheus']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.OpenMonitoringProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.PrometheusProperty
class CfnCluster_PrometheusPropertyDef(BaseStruct):
    jmx_exporter: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_JmxExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Indicates whether you want to enable or disable the JMX Exporter.\n')
    node_exporter: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_NodeExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Indicates whether you want to enable or disable the Node Exporter.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-prometheus.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    prometheus_property = msk.CfnCluster.PrometheusProperty(\n        jmx_exporter=msk.CfnCluster.JmxExporterProperty(\n            enabled_in_broker=False\n        ),\n        node_exporter=msk.CfnCluster.NodeExporterProperty(\n            enabled_in_broker=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['jmx_exporter', 'node_exporter']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.PrometheusProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.ProvisionedThroughputProperty
class CfnCluster_ProvisionedThroughputPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Provisioned throughput is enabled or not.\n')
    volume_throughput: typing.Union[int, float, None] = pydantic.Field(None, description='Throughput value of the EBS volumes for the data drive on each kafka broker node in MiB per second.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-provisionedthroughput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    provisioned_throughput_property = msk.CfnCluster.ProvisionedThroughputProperty(\n        enabled=False,\n        volume_throughput=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'volume_throughput']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.ProvisionedThroughputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.PublicAccessProperty
class CfnCluster_PublicAccessPropertyDef(BaseStruct):
    type: typing.Optional[str] = pydantic.Field(None, description='DISABLED means that public access is turned off. SERVICE_PROVIDED_EIPS means that public access is turned on.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-publicaccess.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    public_access_property = msk.CfnCluster.PublicAccessProperty(\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.PublicAccessProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.S3Property
class CfnCluster_S3PropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Specifies whether broker logs get sent to the specified Amazon S3 destination.\n')
    bucket: typing.Optional[str] = pydantic.Field(None, description='The name of the S3 bucket that is the destination for broker logs.\n')
    prefix: typing.Optional[str] = pydantic.Field(None, description='The S3 prefix that is the destination for broker logs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-s3.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    s3_property = msk.CfnCluster.S3Property(\n        enabled=False,\n\n        # the properties below are optional\n        bucket="bucket",\n        prefix="prefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'bucket', 'prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.S3Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.SaslProperty
class CfnCluster_SaslPropertyDef(BaseStruct):
    iam: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_IamPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details for ClientAuthentication using IAM.\n')
    scram: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ScramPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details for SASL/SCRAM client authentication.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-sasl.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    sasl_property = msk.CfnCluster.SaslProperty(\n        iam=msk.CfnCluster.IamProperty(\n            enabled=False\n        ),\n        scram=msk.CfnCluster.ScramProperty(\n            enabled=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['iam', 'scram']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.SaslProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.ScramProperty
class CfnCluster_ScramPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='SASL/SCRAM authentication is enabled or not.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-scram.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    scram_property = msk.CfnCluster.ScramProperty(\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.ScramProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.StorageInfoProperty
class CfnCluster_StorageInfoPropertyDef(BaseStruct):
    ebs_storage_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_EBSStorageInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='EBS volume information.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-storageinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    storage_info_property = msk.CfnCluster.StorageInfoProperty(\n        ebs_storage_info=msk.CfnCluster.EBSStorageInfoProperty(\n            provisioned_throughput=msk.CfnCluster.ProvisionedThroughputProperty(\n                enabled=False,\n                volume_throughput=123\n            ),\n            volume_size=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ebs_storage_info']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.StorageInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.TlsProperty
class CfnCluster_TlsPropertyDef(BaseStruct):
    certificate_authority_arn_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='List of AWS Private CA ARNs.\n')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='TLS authentication is enabled or not.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-tls.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    tls_property = msk.CfnCluster.TlsProperty(\n        certificate_authority_arn_list=["certificateAuthorityArnList"],\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_authority_arn_list', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.TlsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.UnauthenticatedProperty
class CfnCluster_UnauthenticatedPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Unauthenticated is enabled or not.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-unauthenticated.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    unauthenticated_property = msk.CfnCluster.UnauthenticatedProperty(\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.UnauthenticatedProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.VpcConnectivityClientAuthenticationProperty
class CfnCluster_VpcConnectivityClientAuthenticationPropertyDef(BaseStruct):
    sasl: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivitySaslPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details for VpcConnectivity ClientAuthentication using SASL.\n')
    tls: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityTlsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details for VpcConnectivity ClientAuthentication using TLS.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-vpcconnectivityclientauthentication.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    vpc_connectivity_client_authentication_property = msk.CfnCluster.VpcConnectivityClientAuthenticationProperty(\n        sasl=msk.CfnCluster.VpcConnectivitySaslProperty(\n            iam=msk.CfnCluster.VpcConnectivityIamProperty(\n                enabled=False\n            ),\n            scram=msk.CfnCluster.VpcConnectivityScramProperty(\n                enabled=False\n            )\n        ),\n        tls=msk.CfnCluster.VpcConnectivityTlsProperty(\n            enabled=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sasl', 'tls']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.VpcConnectivityClientAuthenticationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.VpcConnectivityIamProperty
class CfnCluster_VpcConnectivityIamPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='SASL/IAM authentication is enabled or not.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-vpcconnectivityiam.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    vpc_connectivity_iam_property = msk.CfnCluster.VpcConnectivityIamProperty(\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.VpcConnectivityIamProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.VpcConnectivityProperty
class CfnCluster_VpcConnectivityPropertyDef(BaseStruct):
    client_authentication: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityClientAuthenticationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='VPC connection control settings for brokers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-vpcconnectivity.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    vpc_connectivity_property = msk.CfnCluster.VpcConnectivityProperty(\n        client_authentication=msk.CfnCluster.VpcConnectivityClientAuthenticationProperty(\n            sasl=msk.CfnCluster.VpcConnectivitySaslProperty(\n                iam=msk.CfnCluster.VpcConnectivityIamProperty(\n                    enabled=False\n                ),\n                scram=msk.CfnCluster.VpcConnectivityScramProperty(\n                    enabled=False\n                )\n            ),\n            tls=msk.CfnCluster.VpcConnectivityTlsProperty(\n                enabled=False\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_authentication']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.VpcConnectivityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.VpcConnectivitySaslProperty
class CfnCluster_VpcConnectivitySaslPropertyDef(BaseStruct):
    iam: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityIamPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details for ClientAuthentication using IAM for VpcConnectivity.\n')
    scram: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityScramPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details for SASL/SCRAM client authentication for VpcConnectivity.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-vpcconnectivitysasl.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    vpc_connectivity_sasl_property = msk.CfnCluster.VpcConnectivitySaslProperty(\n        iam=msk.CfnCluster.VpcConnectivityIamProperty(\n            enabled=False\n        ),\n        scram=msk.CfnCluster.VpcConnectivityScramProperty(\n            enabled=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['iam', 'scram']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.VpcConnectivitySaslProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.VpcConnectivityScramProperty
class CfnCluster_VpcConnectivityScramPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='SASL/SCRAM authentication is enabled or not.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-vpcconnectivityscram.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    vpc_connectivity_scram_property = msk.CfnCluster.VpcConnectivityScramProperty(\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.VpcConnectivityScramProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnCluster.VpcConnectivityTlsProperty
class CfnCluster_VpcConnectivityTlsPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='TLS authentication is enabled or not.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-cluster-vpcconnectivitytls.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    vpc_connectivity_tls_property = msk.CfnCluster.VpcConnectivityTlsProperty(\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster.VpcConnectivityTlsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnServerlessCluster.ClientAuthenticationProperty
class CfnServerlessCluster_ClientAuthenticationPropertyDef(BaseStruct):
    sasl: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnServerlessCluster_SaslPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Details for client authentication using SASL. To turn on SASL, you must also turn on ``EncryptionInTransit`` by setting ``inCluster`` to true. You must set ``clientBroker`` to either ``TLS`` or ``TLS_PLAINTEXT`` . If you choose ``TLS_PLAINTEXT`` , then you must also set ``unauthenticated`` to true.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-serverlesscluster-clientauthentication.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    client_authentication_property = msk.CfnServerlessCluster.ClientAuthenticationProperty(\n        sasl=msk.CfnServerlessCluster.SaslProperty(\n            iam=msk.CfnServerlessCluster.IamProperty(\n                enabled=False\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sasl']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnServerlessCluster.ClientAuthenticationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnServerlessCluster.IamProperty
class CfnServerlessCluster_IamPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='SASL/IAM authentication is enabled or not.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-serverlesscluster-iam.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    iam_property = msk.CfnServerlessCluster.IamProperty(\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnServerlessCluster.IamProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnServerlessCluster.SaslProperty
class CfnServerlessCluster_SaslPropertyDef(BaseStruct):
    iam: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnServerlessCluster_IamPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Details for ClientAuthentication using IAM.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-serverlesscluster-sasl.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    sasl_property = msk.CfnServerlessCluster.SaslProperty(\n        iam=msk.CfnServerlessCluster.IamProperty(\n            enabled=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['iam']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnServerlessCluster.SaslProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnServerlessCluster.VpcConfigProperty
class CfnServerlessCluster_VpcConfigPropertyDef(BaseStruct):
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='``CfnServerlessCluster.VpcConfigProperty.SubnetIds``.')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``CfnServerlessCluster.VpcConfigProperty.SecurityGroups``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-msk-serverlesscluster-vpcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    vpc_config_property = msk.CfnServerlessCluster.VpcConfigProperty(\n        subnet_ids=["subnetIds"],\n\n        # the properties below are optional\n        security_groups=["securityGroups"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['subnet_ids', 'security_groups']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnServerlessCluster.VpcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnBatchScramSecret
class CfnBatchScramSecretDef(BaseCfnResource):
    cluster_arn: str = pydantic.Field(..., description='``AWS::MSK::BatchScramSecret.ClusterArn``.\n')
    secret_arn_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``AWS::MSK::BatchScramSecret.SecretArnList``.')
    _init_params: typing.ClassVar[list[str]] = ['cluster_arn', 'secret_arn_list']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnBatchScramSecret'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnBatchScramSecretDefConfig] = pydantic.Field(None)


class CfnBatchScramSecretDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnBatchScramSecretDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnBatchScramSecretDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnBatchScramSecretDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnBatchScramSecretDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnBatchScramSecretDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnBatchScramSecretDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnBatchScramSecretDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnBatchScramSecretDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnBatchScramSecretDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnBatchScramSecretDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnBatchScramSecretDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnBatchScramSecretDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnBatchScramSecretDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnBatchScramSecretDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnBatchScramSecretDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBatchScramSecretDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnBatchScramSecretDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBatchScramSecretDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnBatchScramSecretDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnBatchScramSecretDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnBatchScramSecretDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnBatchScramSecretDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnBatchScramSecretDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBatchScramSecretDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnBatchScramSecretDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnBatchScramSecretDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBatchScramSecretDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_msk.CfnCluster
class CfnClusterDef(BaseCfnResource):
    broker_node_group_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_BrokerNodeGroupInfoPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Information about the broker nodes in the cluster.\n')
    cluster_name: str = pydantic.Field(..., description='The name of the cluster.\n')
    kafka_version: str = pydantic.Field(..., description='The version of Apache Kafka. You can use Amazon MSK to create clusters that use Apache Kafka versions 1.1.1 and 2.2.1.\n')
    number_of_broker_nodes: typing.Union[int, float] = pydantic.Field(..., description='The number of broker nodes in the cluster.\n')
    client_authentication: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ClientAuthenticationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Includes all client authentication related information.\n')
    configuration_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ConfigurationInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the configuration that you want MSK to use for the cluster.\n')
    current_version: typing.Optional[str] = pydantic.Field(None, description='The version of the cluster that you want to update.\n')
    encryption_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_EncryptionInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Includes all encryption-related information.\n')
    enhanced_monitoring: typing.Optional[str] = pydantic.Field(None, description='Specifies the level of monitoring for the MSK cluster. The possible values are ``DEFAULT`` , ``PER_BROKER`` , and ``PER_TOPIC_PER_BROKER`` .\n')
    logging_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_LoggingInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Logging Info details.\n')
    open_monitoring: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_OpenMonitoringPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings for open monitoring.\n')
    storage_mode: typing.Optional[str] = pydantic.Field(None, description='This controls storage mode for supported storage tiers.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Create tags when creating the cluster.')
    _init_params: typing.ClassVar[list[str]] = ['broker_node_group_info', 'cluster_name', 'kafka_version', 'number_of_broker_nodes', 'client_authentication', 'configuration_info', 'current_version', 'encryption_info', 'enhanced_monitoring', 'logging_info', 'open_monitoring', 'storage_mode', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['BrokerLogsProperty', 'BrokerNodeGroupInfoProperty', 'ClientAuthenticationProperty', 'CloudWatchLogsProperty', 'ConfigurationInfoProperty', 'ConnectivityInfoProperty', 'EBSStorageInfoProperty', 'EncryptionAtRestProperty', 'EncryptionInTransitProperty', 'EncryptionInfoProperty', 'FirehoseProperty', 'IamProperty', 'JmxExporterProperty', 'LoggingInfoProperty', 'NodeExporterProperty', 'OpenMonitoringProperty', 'PrometheusProperty', 'ProvisionedThroughputProperty', 'PublicAccessProperty', 'S3Property', 'SaslProperty', 'ScramProperty', 'StorageInfoProperty', 'TlsProperty', 'UnauthenticatedProperty', 'VpcConnectivityClientAuthenticationProperty', 'VpcConnectivityIamProperty', 'VpcConnectivityProperty', 'VpcConnectivitySaslProperty', 'VpcConnectivityScramProperty', 'VpcConnectivityTlsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnCluster'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnClusterDefConfig] = pydantic.Field(None)


class CfnClusterDefConfig(pydantic.BaseModel):
    BrokerLogsProperty: typing.Optional[list[CfnClusterDefBrokerlogspropertyParams]] = pydantic.Field(None, description='')
    BrokerNodeGroupInfoProperty: typing.Optional[list[CfnClusterDefBrokernodegroupinfopropertyParams]] = pydantic.Field(None, description='')
    ClientAuthenticationProperty: typing.Optional[list[CfnClusterDefClientauthenticationpropertyParams]] = pydantic.Field(None, description='')
    CloudWatchLogsProperty: typing.Optional[list[CfnClusterDefCloudwatchlogspropertyParams]] = pydantic.Field(None, description='')
    ConfigurationInfoProperty: typing.Optional[list[CfnClusterDefConfigurationinfopropertyParams]] = pydantic.Field(None, description='')
    ConnectivityInfoProperty: typing.Optional[list[CfnClusterDefConnectivityinfopropertyParams]] = pydantic.Field(None, description='')
    EBSStorageInfoProperty: typing.Optional[list[CfnClusterDefEbsstorageinfopropertyParams]] = pydantic.Field(None, description='')
    EncryptionAtRestProperty: typing.Optional[list[CfnClusterDefEncryptionatrestpropertyParams]] = pydantic.Field(None, description='')
    EncryptionInTransitProperty: typing.Optional[list[CfnClusterDefEncryptionintransitpropertyParams]] = pydantic.Field(None, description='')
    EncryptionInfoProperty: typing.Optional[list[CfnClusterDefEncryptioninfopropertyParams]] = pydantic.Field(None, description='')
    FirehoseProperty: typing.Optional[list[CfnClusterDefFirehosepropertyParams]] = pydantic.Field(None, description='')
    IamProperty: typing.Optional[list[CfnClusterDefIampropertyParams]] = pydantic.Field(None, description='')
    JmxExporterProperty: typing.Optional[list[CfnClusterDefJmxexporterpropertyParams]] = pydantic.Field(None, description='')
    LoggingInfoProperty: typing.Optional[list[CfnClusterDefLogginginfopropertyParams]] = pydantic.Field(None, description='')
    NodeExporterProperty: typing.Optional[list[CfnClusterDefNodeexporterpropertyParams]] = pydantic.Field(None, description='')
    OpenMonitoringProperty: typing.Optional[list[CfnClusterDefOpenmonitoringpropertyParams]] = pydantic.Field(None, description='')
    PrometheusProperty: typing.Optional[list[CfnClusterDefPrometheuspropertyParams]] = pydantic.Field(None, description='')
    ProvisionedThroughputProperty: typing.Optional[list[CfnClusterDefProvisionedthroughputpropertyParams]] = pydantic.Field(None, description='')
    PublicAccessProperty: typing.Optional[list[CfnClusterDefPublicaccesspropertyParams]] = pydantic.Field(None, description='')
    S3Property: typing.Optional[list[CfnClusterDefS3PropertyParams]] = pydantic.Field(None, description='')
    SaslProperty: typing.Optional[list[CfnClusterDefSaslpropertyParams]] = pydantic.Field(None, description='')
    ScramProperty: typing.Optional[list[CfnClusterDefScrampropertyParams]] = pydantic.Field(None, description='')
    StorageInfoProperty: typing.Optional[list[CfnClusterDefStorageinfopropertyParams]] = pydantic.Field(None, description='')
    TlsProperty: typing.Optional[list[CfnClusterDefTlspropertyParams]] = pydantic.Field(None, description='')
    UnauthenticatedProperty: typing.Optional[list[CfnClusterDefUnauthenticatedpropertyParams]] = pydantic.Field(None, description='')
    VpcConnectivityClientAuthenticationProperty: typing.Optional[list[CfnClusterDefVpcconnectivityclientauthenticationpropertyParams]] = pydantic.Field(None, description='')
    VpcConnectivityIamProperty: typing.Optional[list[CfnClusterDefVpcconnectivityiampropertyParams]] = pydantic.Field(None, description='')
    VpcConnectivityProperty: typing.Optional[list[CfnClusterDefVpcconnectivitypropertyParams]] = pydantic.Field(None, description='')
    VpcConnectivitySaslProperty: typing.Optional[list[CfnClusterDefVpcconnectivitysaslpropertyParams]] = pydantic.Field(None, description='')
    VpcConnectivityScramProperty: typing.Optional[list[CfnClusterDefVpcconnectivityscrampropertyParams]] = pydantic.Field(None, description='')
    VpcConnectivityTlsProperty: typing.Optional[list[CfnClusterDefVpcconnectivitytlspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnClusterDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnClusterDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnClusterDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnClusterDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnClusterDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnClusterDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnClusterDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnClusterDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnClusterDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnClusterDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnClusterDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnClusterDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnClusterDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnClusterDefBrokerlogspropertyParams(pydantic.BaseModel):
    cloud_watch_logs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_CloudWatchLogsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    firehose: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_FirehosePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_S3PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefBrokernodegroupinfopropertyParams(pydantic.BaseModel):
    client_subnets: typing.Sequence[str] = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    broker_az_distribution: typing.Optional[str] = pydantic.Field(None, description='')
    connectivity_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ConnectivityInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    storage_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_StorageInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefClientauthenticationpropertyParams(pydantic.BaseModel):
    sasl: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_SaslPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    tls: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_TlsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    unauthenticated: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_UnauthenticatedPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefCloudwatchlogspropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    log_group: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefConfigurationinfopropertyParams(pydantic.BaseModel):
    arn: str = pydantic.Field(..., description='')
    revision: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnClusterDefConnectivityinfopropertyParams(pydantic.BaseModel):
    public_access: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_PublicAccessPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    vpc_connectivity: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefEbsstorageinfopropertyParams(pydantic.BaseModel):
    provisioned_throughput: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ProvisionedThroughputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    volume_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefEncryptionatrestpropertyParams(pydantic.BaseModel):
    data_volume_kms_key_id: str = pydantic.Field(..., description='')
    ...

class CfnClusterDefEncryptionintransitpropertyParams(pydantic.BaseModel):
    client_broker: typing.Optional[str] = pydantic.Field(None, description='')
    in_cluster: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefEncryptioninfopropertyParams(pydantic.BaseModel):
    encryption_at_rest: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_EncryptionAtRestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    encryption_in_transit: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_EncryptionInTransitPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefFirehosepropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    delivery_stream: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefIampropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefJmxexporterpropertyParams(pydantic.BaseModel):
    enabled_in_broker: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefLogginginfopropertyParams(pydantic.BaseModel):
    broker_logs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_BrokerLogsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefNodeexporterpropertyParams(pydantic.BaseModel):
    enabled_in_broker: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefOpenmonitoringpropertyParams(pydantic.BaseModel):
    prometheus: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_PrometheusPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefPrometheuspropertyParams(pydantic.BaseModel):
    jmx_exporter: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_JmxExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    node_exporter: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_NodeExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefProvisionedthroughputpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    volume_throughput: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefPublicaccesspropertyParams(pydantic.BaseModel):
    type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefS3PropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    bucket: typing.Optional[str] = pydantic.Field(None, description='')
    prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefSaslpropertyParams(pydantic.BaseModel):
    iam: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_IamPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    scram: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ScramPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefScrampropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefStorageinfopropertyParams(pydantic.BaseModel):
    ebs_storage_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_EBSStorageInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefTlspropertyParams(pydantic.BaseModel):
    certificate_authority_arn_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefUnauthenticatedpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefVpcconnectivityclientauthenticationpropertyParams(pydantic.BaseModel):
    sasl: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivitySaslPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    tls: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityTlsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefVpcconnectivityiampropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefVpcconnectivitypropertyParams(pydantic.BaseModel):
    client_authentication: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityClientAuthenticationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefVpcconnectivitysaslpropertyParams(pydantic.BaseModel):
    iam: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityIamPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    scram: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_VpcConnectivityScramPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefVpcconnectivityscrampropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefVpcconnectivitytlspropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnClusterDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnClusterDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnClusterDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnClusterDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnClusterDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnClusterDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnClusterDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnClusterDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnClusterDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnClusterDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnClusterDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnClusterDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnClusterDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_msk.CfnClusterPolicy
class CfnClusterPolicyDef(BaseCfnResource):
    cluster_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) that uniquely identifies the cluster.\n')
    policy: typing.Any = pydantic.Field(..., description='Resource policy for the cluster.')
    _init_params: typing.ClassVar[list[str]] = ['cluster_arn', 'policy']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnClusterPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnClusterPolicyDefConfig] = pydantic.Field(None)


class CfnClusterPolicyDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnClusterPolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnClusterPolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnClusterPolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnClusterPolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnClusterPolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnClusterPolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnClusterPolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnClusterPolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnClusterPolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnClusterPolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnClusterPolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnClusterPolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnClusterPolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnClusterPolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnClusterPolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnClusterPolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnClusterPolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnClusterPolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnClusterPolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnClusterPolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnClusterPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnClusterPolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnClusterPolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnClusterPolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnClusterPolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnClusterPolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnClusterPolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_msk.CfnConfiguration
class CfnConfigurationDef(BaseCfnResource):
    name: str = pydantic.Field(..., description='The name of the configuration. Configuration names are strings that match the regex "^[0-9A-Za-z][0-9A-Za-z-]{0,}$".\n')
    server_properties: str = pydantic.Field(..., description='Contents of the server.properties file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the console, the SDK, or the CLI, the contents of server.properties can be in plaintext.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the configuration.\n')
    kafka_versions_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``AWS::MSK::Configuration.KafkaVersionsList``.')
    _init_params: typing.ClassVar[list[str]] = ['name', 'server_properties', 'description', 'kafka_versions_list']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnConfigurationDefConfig] = pydantic.Field(None)


class CfnConfigurationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_msk.CfnServerlessCluster
class CfnServerlessClusterDef(BaseCfnResource):
    client_authentication: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnServerlessCluster_ClientAuthenticationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``AWS::MSK::ServerlessCluster.ClientAuthentication``.\n')
    cluster_name: str = pydantic.Field(..., description='``AWS::MSK::ServerlessCluster.ClusterName``.\n')
    vpc_configs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnServerlessCluster_VpcConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='``AWS::MSK::ServerlessCluster.VpcConfigs``.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='``AWS::MSK::ServerlessCluster.Tags``.')
    _init_params: typing.ClassVar[list[str]] = ['client_authentication', 'cluster_name', 'vpc_configs', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ClientAuthenticationProperty', 'IamProperty', 'SaslProperty', 'VpcConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnServerlessCluster'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnServerlessClusterDefConfig] = pydantic.Field(None)


class CfnServerlessClusterDefConfig(pydantic.BaseModel):
    ClientAuthenticationProperty: typing.Optional[list[CfnServerlessClusterDefClientauthenticationpropertyParams]] = pydantic.Field(None, description='')
    IamProperty: typing.Optional[list[CfnServerlessClusterDefIampropertyParams]] = pydantic.Field(None, description='')
    SaslProperty: typing.Optional[list[CfnServerlessClusterDefSaslpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigProperty: typing.Optional[list[CfnServerlessClusterDefVpcconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnServerlessClusterDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnServerlessClusterDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnServerlessClusterDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnServerlessClusterDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnServerlessClusterDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnServerlessClusterDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnServerlessClusterDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnServerlessClusterDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnServerlessClusterDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnServerlessClusterDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnServerlessClusterDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnServerlessClusterDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnServerlessClusterDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnServerlessClusterDefClientauthenticationpropertyParams(pydantic.BaseModel):
    sasl: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnServerlessCluster_SaslPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnServerlessClusterDefIampropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnServerlessClusterDefSaslpropertyParams(pydantic.BaseModel):
    iam: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnServerlessCluster_IamPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnServerlessClusterDefVpcconfigpropertyParams(pydantic.BaseModel):
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnServerlessClusterDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnServerlessClusterDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnServerlessClusterDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnServerlessClusterDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnServerlessClusterDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnServerlessClusterDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnServerlessClusterDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnServerlessClusterDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnServerlessClusterDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnServerlessClusterDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnServerlessClusterDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnServerlessClusterDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnServerlessClusterDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnServerlessClusterDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_msk.CfnVpcConnection
class CfnVpcConnectionDef(BaseCfnResource):
    authentication: str = pydantic.Field(..., description='The type of private link authentication.\n')
    client_subnets: typing.Sequence[str] = pydantic.Field(..., description='The list of subnets in the client VPC to connect to.\n')
    security_groups: typing.Sequence[str] = pydantic.Field(..., description='The security groups to attach to the ENIs for the broker nodes.\n')
    target_cluster_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the cluster.\n')
    vpc_id: str = pydantic.Field(..., description='The VPC id of the remote client.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Create tags when creating the VPC connection.')
    _init_params: typing.ClassVar[list[str]] = ['authentication', 'client_subnets', 'security_groups', 'target_cluster_arn', 'vpc_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnVpcConnection'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnVpcConnectionDefConfig] = pydantic.Field(None)


class CfnVpcConnectionDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnVpcConnectionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnVpcConnectionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnVpcConnectionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnVpcConnectionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnVpcConnectionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnVpcConnectionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnVpcConnectionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnVpcConnectionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnVpcConnectionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnVpcConnectionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnVpcConnectionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnVpcConnectionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnVpcConnectionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnVpcConnectionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnVpcConnectionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnVpcConnectionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnVpcConnectionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnVpcConnectionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnVpcConnectionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnVpcConnectionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnVpcConnectionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnVpcConnectionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnVpcConnectionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnVpcConnectionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnVpcConnectionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnVpcConnectionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnVpcConnectionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_msk.CfnBatchScramSecretProps
class CfnBatchScramSecretPropsDef(BaseCfnProperty):
    cluster_arn: str = pydantic.Field(..., description='``AWS::MSK::BatchScramSecret.ClusterArn``.\n')
    secret_arn_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``AWS::MSK::BatchScramSecret.SecretArnList``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-msk-batchscramsecret.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    cfn_batch_scram_secret_props = msk.CfnBatchScramSecretProps(\n        cluster_arn="clusterArn",\n\n        # the properties below are optional\n        secret_arn_list=["secretArnList"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_arn', 'secret_arn_list']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnBatchScramSecretProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnClusterPolicyProps
class CfnClusterPolicyPropsDef(BaseCfnProperty):
    cluster_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) that uniquely identifies the cluster.\n')
    policy: typing.Any = pydantic.Field(..., description='Resource policy for the cluster.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-msk-clusterpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    # policy: Any\n\n    cfn_cluster_policy_props = msk.CfnClusterPolicyProps(\n        cluster_arn="clusterArn",\n        policy=policy\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_arn', 'policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnClusterPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnClusterProps
class CfnClusterPropsDef(BaseCfnProperty):
    broker_node_group_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_BrokerNodeGroupInfoPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Information about the broker nodes in the cluster.\n')
    cluster_name: str = pydantic.Field(..., description='The name of the cluster.\n')
    kafka_version: str = pydantic.Field(..., description='The version of Apache Kafka. You can use Amazon MSK to create clusters that use Apache Kafka versions 1.1.1 and 2.2.1.\n')
    number_of_broker_nodes: typing.Union[int, float] = pydantic.Field(..., description='The number of broker nodes in the cluster.\n')
    client_authentication: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ClientAuthenticationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Includes all client authentication related information.\n')
    configuration_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_ConfigurationInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the configuration that you want MSK to use for the cluster.\n')
    current_version: typing.Optional[str] = pydantic.Field(None, description='The version of the cluster that you want to update.\n')
    encryption_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_EncryptionInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Includes all encryption-related information.\n')
    enhanced_monitoring: typing.Optional[str] = pydantic.Field(None, description='Specifies the level of monitoring for the MSK cluster. The possible values are ``DEFAULT`` , ``PER_BROKER`` , and ``PER_TOPIC_PER_BROKER`` .\n')
    logging_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_LoggingInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Logging Info details.\n')
    open_monitoring: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnCluster_OpenMonitoringPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings for open monitoring.\n')
    storage_mode: typing.Optional[str] = pydantic.Field(None, description='This controls storage mode for supported storage tiers.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Create tags when creating the cluster.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-msk-cluster.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    cfn_cluster_props = msk.CfnClusterProps(\n        broker_node_group_info=msk.CfnCluster.BrokerNodeGroupInfoProperty(\n            client_subnets=["clientSubnets"],\n            instance_type="instanceType",\n\n            # the properties below are optional\n            broker_az_distribution="brokerAzDistribution",\n            connectivity_info=msk.CfnCluster.ConnectivityInfoProperty(\n                public_access=msk.CfnCluster.PublicAccessProperty(\n                    type="type"\n                ),\n                vpc_connectivity=msk.CfnCluster.VpcConnectivityProperty(\n                    client_authentication=msk.CfnCluster.VpcConnectivityClientAuthenticationProperty(\n                        sasl=msk.CfnCluster.VpcConnectivitySaslProperty(\n                            iam=msk.CfnCluster.VpcConnectivityIamProperty(\n                                enabled=False\n                            ),\n                            scram=msk.CfnCluster.VpcConnectivityScramProperty(\n                                enabled=False\n                            )\n                        ),\n                        tls=msk.CfnCluster.VpcConnectivityTlsProperty(\n                            enabled=False\n                        )\n                    )\n                )\n            ),\n            security_groups=["securityGroups"],\n            storage_info=msk.CfnCluster.StorageInfoProperty(\n                ebs_storage_info=msk.CfnCluster.EBSStorageInfoProperty(\n                    provisioned_throughput=msk.CfnCluster.ProvisionedThroughputProperty(\n                        enabled=False,\n                        volume_throughput=123\n                    ),\n                    volume_size=123\n                )\n            )\n        ),\n        cluster_name="clusterName",\n        kafka_version="kafkaVersion",\n        number_of_broker_nodes=123,\n\n        # the properties below are optional\n        client_authentication=msk.CfnCluster.ClientAuthenticationProperty(\n            sasl=msk.CfnCluster.SaslProperty(\n                iam=msk.CfnCluster.IamProperty(\n                    enabled=False\n                ),\n                scram=msk.CfnCluster.ScramProperty(\n                    enabled=False\n                )\n            ),\n            tls=msk.CfnCluster.TlsProperty(\n                certificate_authority_arn_list=["certificateAuthorityArnList"],\n                enabled=False\n            ),\n            unauthenticated=msk.CfnCluster.UnauthenticatedProperty(\n                enabled=False\n            )\n        ),\n        configuration_info=msk.CfnCluster.ConfigurationInfoProperty(\n            arn="arn",\n            revision=123\n        ),\n        current_version="currentVersion",\n        encryption_info=msk.CfnCluster.EncryptionInfoProperty(\n            encryption_at_rest=msk.CfnCluster.EncryptionAtRestProperty(\n                data_volume_kms_key_id="dataVolumeKmsKeyId"\n            ),\n            encryption_in_transit=msk.CfnCluster.EncryptionInTransitProperty(\n                client_broker="clientBroker",\n                in_cluster=False\n            )\n        ),\n        enhanced_monitoring="enhancedMonitoring",\n        logging_info=msk.CfnCluster.LoggingInfoProperty(\n            broker_logs=msk.CfnCluster.BrokerLogsProperty(\n                cloud_watch_logs=msk.CfnCluster.CloudWatchLogsProperty(\n                    enabled=False,\n\n                    # the properties below are optional\n                    log_group="logGroup"\n                ),\n                firehose=msk.CfnCluster.FirehoseProperty(\n                    enabled=False,\n\n                    # the properties below are optional\n                    delivery_stream="deliveryStream"\n                ),\n                s3=msk.CfnCluster.S3Property(\n                    enabled=False,\n\n                    # the properties below are optional\n                    bucket="bucket",\n                    prefix="prefix"\n                )\n            )\n        ),\n        open_monitoring=msk.CfnCluster.OpenMonitoringProperty(\n            prometheus=msk.CfnCluster.PrometheusProperty(\n                jmx_exporter=msk.CfnCluster.JmxExporterProperty(\n                    enabled_in_broker=False\n                ),\n                node_exporter=msk.CfnCluster.NodeExporterProperty(\n                    enabled_in_broker=False\n                )\n            )\n        ),\n        storage_mode="storageMode",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['broker_node_group_info', 'cluster_name', 'kafka_version', 'number_of_broker_nodes', 'client_authentication', 'configuration_info', 'current_version', 'encryption_info', 'enhanced_monitoring', 'logging_info', 'open_monitoring', 'storage_mode', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnClusterProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnConfigurationProps
class CfnConfigurationPropsDef(BaseCfnProperty):
    name: str = pydantic.Field(..., description='The name of the configuration. Configuration names are strings that match the regex "^[0-9A-Za-z][0-9A-Za-z-]{0,}$".\n')
    server_properties: str = pydantic.Field(..., description='Contents of the server.properties file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the console, the SDK, or the CLI, the contents of server.properties can be in plaintext.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the configuration.\n')
    kafka_versions_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``AWS::MSK::Configuration.KafkaVersionsList``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-msk-configuration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    cfn_configuration_props = msk.CfnConfigurationProps(\n        name="name",\n        server_properties="serverProperties",\n\n        # the properties below are optional\n        description="description",\n        kafka_versions_list=["kafkaVersionsList"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'server_properties', 'description', 'kafka_versions_list']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnServerlessClusterProps
class CfnServerlessClusterPropsDef(BaseCfnProperty):
    client_authentication: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnServerlessCluster_ClientAuthenticationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``AWS::MSK::ServerlessCluster.ClientAuthentication``.\n')
    cluster_name: str = pydantic.Field(..., description='``AWS::MSK::ServerlessCluster.ClusterName``.\n')
    vpc_configs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_msk.CfnServerlessCluster_VpcConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='``AWS::MSK::ServerlessCluster.VpcConfigs``.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='``AWS::MSK::ServerlessCluster.Tags``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-msk-serverlesscluster.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    cfn_serverless_cluster_props = msk.CfnServerlessClusterProps(\n        client_authentication=msk.CfnServerlessCluster.ClientAuthenticationProperty(\n            sasl=msk.CfnServerlessCluster.SaslProperty(\n                iam=msk.CfnServerlessCluster.IamProperty(\n                    enabled=False\n                )\n            )\n        ),\n        cluster_name="clusterName",\n        vpc_configs=[msk.CfnServerlessCluster.VpcConfigProperty(\n            subnet_ids=["subnetIds"],\n\n            # the properties below are optional\n            security_groups=["securityGroups"]\n        )],\n\n        # the properties below are optional\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_authentication', 'cluster_name', 'vpc_configs', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnServerlessClusterProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_msk.CfnVpcConnectionProps
class CfnVpcConnectionPropsDef(BaseCfnProperty):
    authentication: str = pydantic.Field(..., description='The type of private link authentication.\n')
    client_subnets: typing.Sequence[str] = pydantic.Field(..., description='The list of subnets in the client VPC to connect to.\n')
    security_groups: typing.Sequence[str] = pydantic.Field(..., description='The security groups to attach to the ENIs for the broker nodes.\n')
    target_cluster_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the cluster.\n')
    vpc_id: str = pydantic.Field(..., description='The VPC id of the remote client.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Create tags when creating the VPC connection.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-msk-vpcconnection.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_msk as msk\n\n    cfn_vpc_connection_props = msk.CfnVpcConnectionProps(\n        authentication="authentication",\n        client_subnets=["clientSubnets"],\n        security_groups=["securityGroups"],\n        target_cluster_arn="targetClusterArn",\n        vpc_id="vpcId",\n\n        # the properties below are optional\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['authentication', 'client_subnets', 'security_groups', 'target_cluster_arn', 'vpc_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_msk.CfnVpcConnectionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnCluster_BrokerLogsProperty: typing.Optional[dict[str, CfnCluster_BrokerLogsPropertyDef]] = pydantic.Field(None)
    CfnCluster_BrokerNodeGroupInfoProperty: typing.Optional[dict[str, CfnCluster_BrokerNodeGroupInfoPropertyDef]] = pydantic.Field(None)
    CfnCluster_ClientAuthenticationProperty: typing.Optional[dict[str, CfnCluster_ClientAuthenticationPropertyDef]] = pydantic.Field(None)
    CfnCluster_CloudWatchLogsProperty: typing.Optional[dict[str, CfnCluster_CloudWatchLogsPropertyDef]] = pydantic.Field(None)
    CfnCluster_ConfigurationInfoProperty: typing.Optional[dict[str, CfnCluster_ConfigurationInfoPropertyDef]] = pydantic.Field(None)
    CfnCluster_ConnectivityInfoProperty: typing.Optional[dict[str, CfnCluster_ConnectivityInfoPropertyDef]] = pydantic.Field(None)
    CfnCluster_EBSStorageInfoProperty: typing.Optional[dict[str, CfnCluster_EBSStorageInfoPropertyDef]] = pydantic.Field(None)
    CfnCluster_EncryptionAtRestProperty: typing.Optional[dict[str, CfnCluster_EncryptionAtRestPropertyDef]] = pydantic.Field(None)
    CfnCluster_EncryptionInfoProperty: typing.Optional[dict[str, CfnCluster_EncryptionInfoPropertyDef]] = pydantic.Field(None)
    CfnCluster_EncryptionInTransitProperty: typing.Optional[dict[str, CfnCluster_EncryptionInTransitPropertyDef]] = pydantic.Field(None)
    CfnCluster_FirehoseProperty: typing.Optional[dict[str, CfnCluster_FirehosePropertyDef]] = pydantic.Field(None)
    CfnCluster_IamProperty: typing.Optional[dict[str, CfnCluster_IamPropertyDef]] = pydantic.Field(None)
    CfnCluster_JmxExporterProperty: typing.Optional[dict[str, CfnCluster_JmxExporterPropertyDef]] = pydantic.Field(None)
    CfnCluster_LoggingInfoProperty: typing.Optional[dict[str, CfnCluster_LoggingInfoPropertyDef]] = pydantic.Field(None)
    CfnCluster_NodeExporterProperty: typing.Optional[dict[str, CfnCluster_NodeExporterPropertyDef]] = pydantic.Field(None)
    CfnCluster_OpenMonitoringProperty: typing.Optional[dict[str, CfnCluster_OpenMonitoringPropertyDef]] = pydantic.Field(None)
    CfnCluster_PrometheusProperty: typing.Optional[dict[str, CfnCluster_PrometheusPropertyDef]] = pydantic.Field(None)
    CfnCluster_ProvisionedThroughputProperty: typing.Optional[dict[str, CfnCluster_ProvisionedThroughputPropertyDef]] = pydantic.Field(None)
    CfnCluster_PublicAccessProperty: typing.Optional[dict[str, CfnCluster_PublicAccessPropertyDef]] = pydantic.Field(None)
    CfnCluster_S3Property: typing.Optional[dict[str, CfnCluster_S3PropertyDef]] = pydantic.Field(None)
    CfnCluster_SaslProperty: typing.Optional[dict[str, CfnCluster_SaslPropertyDef]] = pydantic.Field(None)
    CfnCluster_ScramProperty: typing.Optional[dict[str, CfnCluster_ScramPropertyDef]] = pydantic.Field(None)
    CfnCluster_StorageInfoProperty: typing.Optional[dict[str, CfnCluster_StorageInfoPropertyDef]] = pydantic.Field(None)
    CfnCluster_TlsProperty: typing.Optional[dict[str, CfnCluster_TlsPropertyDef]] = pydantic.Field(None)
    CfnCluster_UnauthenticatedProperty: typing.Optional[dict[str, CfnCluster_UnauthenticatedPropertyDef]] = pydantic.Field(None)
    CfnCluster_VpcConnectivityClientAuthenticationProperty: typing.Optional[dict[str, CfnCluster_VpcConnectivityClientAuthenticationPropertyDef]] = pydantic.Field(None)
    CfnCluster_VpcConnectivityIamProperty: typing.Optional[dict[str, CfnCluster_VpcConnectivityIamPropertyDef]] = pydantic.Field(None)
    CfnCluster_VpcConnectivityProperty: typing.Optional[dict[str, CfnCluster_VpcConnectivityPropertyDef]] = pydantic.Field(None)
    CfnCluster_VpcConnectivitySaslProperty: typing.Optional[dict[str, CfnCluster_VpcConnectivitySaslPropertyDef]] = pydantic.Field(None)
    CfnCluster_VpcConnectivityScramProperty: typing.Optional[dict[str, CfnCluster_VpcConnectivityScramPropertyDef]] = pydantic.Field(None)
    CfnCluster_VpcConnectivityTlsProperty: typing.Optional[dict[str, CfnCluster_VpcConnectivityTlsPropertyDef]] = pydantic.Field(None)
    CfnServerlessCluster_ClientAuthenticationProperty: typing.Optional[dict[str, CfnServerlessCluster_ClientAuthenticationPropertyDef]] = pydantic.Field(None)
    CfnServerlessCluster_IamProperty: typing.Optional[dict[str, CfnServerlessCluster_IamPropertyDef]] = pydantic.Field(None)
    CfnServerlessCluster_SaslProperty: typing.Optional[dict[str, CfnServerlessCluster_SaslPropertyDef]] = pydantic.Field(None)
    CfnServerlessCluster_VpcConfigProperty: typing.Optional[dict[str, CfnServerlessCluster_VpcConfigPropertyDef]] = pydantic.Field(None)
    CfnBatchScramSecret: typing.Optional[dict[str, CfnBatchScramSecretDef]] = pydantic.Field(None)
    CfnCluster: typing.Optional[dict[str, CfnClusterDef]] = pydantic.Field(None)
    CfnClusterPolicy: typing.Optional[dict[str, CfnClusterPolicyDef]] = pydantic.Field(None)
    CfnConfiguration: typing.Optional[dict[str, CfnConfigurationDef]] = pydantic.Field(None)
    CfnServerlessCluster: typing.Optional[dict[str, CfnServerlessClusterDef]] = pydantic.Field(None)
    CfnVpcConnection: typing.Optional[dict[str, CfnVpcConnectionDef]] = pydantic.Field(None)
    CfnBatchScramSecretProps: typing.Optional[dict[str, CfnBatchScramSecretPropsDef]] = pydantic.Field(None)
    CfnClusterPolicyProps: typing.Optional[dict[str, CfnClusterPolicyPropsDef]] = pydantic.Field(None)
    CfnClusterProps: typing.Optional[dict[str, CfnClusterPropsDef]] = pydantic.Field(None)
    CfnConfigurationProps: typing.Optional[dict[str, CfnConfigurationPropsDef]] = pydantic.Field(None)
    CfnServerlessClusterProps: typing.Optional[dict[str, CfnServerlessClusterPropsDef]] = pydantic.Field(None)
    CfnVpcConnectionProps: typing.Optional[dict[str, CfnVpcConnectionPropsDef]] = pydantic.Field(None)
    ...
