from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_osis.CfnPipeline.CloudWatchLogDestinationProperty
class CfnPipeline_CloudWatchLogDestinationPropertyDef(BaseStruct):
    log_group: typing.Optional[str] = pydantic.Field(None, description='The name of the CloudWatch Logs group to send pipeline logs to. You can specify an existing log group or create a new one. For example, ``/aws/OpenSearchService/IngestionService/my-pipeline`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-osis-pipeline-cloudwatchlogdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_osis as osis\n\n    cloud_watch_log_destination_property = osis.CfnPipeline.CloudWatchLogDestinationProperty(\n        log_group="logGroup"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_group']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_osis.CfnPipeline.CloudWatchLogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_osis.CfnPipeline.LogPublishingOptionsProperty
class CfnPipeline_LogPublishingOptionsPropertyDef(BaseStruct):
    cloud_watch_log_destination: typing.Union[models.UnsupportedResource, models.aws_osis.CfnPipeline_CloudWatchLogDestinationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if ``IsLoggingEnabled`` is set to ``true`` .\n')
    is_logging_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether logs should be published.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-osis-pipeline-logpublishingoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_osis as osis\n\n    log_publishing_options_property = osis.CfnPipeline.LogPublishingOptionsProperty(\n        cloud_watch_log_destination=osis.CfnPipeline.CloudWatchLogDestinationProperty(\n            log_group="logGroup"\n        ),\n        is_logging_enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_log_destination', 'is_logging_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_osis.CfnPipeline.LogPublishingOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_osis.CfnPipeline.VpcEndpointProperty
class CfnPipeline_VpcEndpointPropertyDef(BaseStruct):
    vpc_endpoint_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the endpoint.\n')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='The ID for your VPC. AWS PrivateLink generates this value when you create a VPC.\n')
    vpc_options: typing.Union[models.UnsupportedResource, models.aws_osis.CfnPipeline_VpcOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the VPC, including associated subnets and security groups.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-osis-pipeline-vpcendpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_osis as osis\n\n    vpc_endpoint_property = osis.CfnPipeline.VpcEndpointProperty(\n        vpc_endpoint_id="vpcEndpointId",\n        vpc_id="vpcId",\n        vpc_options=osis.CfnPipeline.VpcOptionsProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['vpc_endpoint_id', 'vpc_id', 'vpc_options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_osis.CfnPipeline.VpcEndpointProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_osis.CfnPipeline.VpcOptionsProperty
class CfnPipeline_VpcOptionsPropertyDef(BaseStruct):
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of security groups associated with the VPC endpoint.\n')
    subnet_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of subnet IDs associated with the VPC endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-osis-pipeline-vpcoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_osis as osis\n\n    vpc_options_property = osis.CfnPipeline.VpcOptionsProperty(\n        security_group_ids=["securityGroupIds"],\n        subnet_ids=["subnetIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_osis.CfnPipeline.VpcOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_osis.CfnPipeline
class CfnPipelineDef(BaseCfnResource):
    max_units: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The maximum pipeline capacity, in Ingestion Compute Units (ICUs).\n')
    min_units: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum pipeline capacity, in Ingestion Compute Units (ICUs).\n')
    pipeline_configuration_body: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Data Prepper pipeline configuration in YAML format.\n')
    pipeline_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the pipeline.\n')
    log_publishing_options: typing.Union[models.UnsupportedResource, models.aws_osis.CfnPipeline_LogPublishingOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Key-value pairs that represent log publishing settings.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='List of tags to add to the pipeline upon creation.\n')
    vpc_options: typing.Union[models.UnsupportedResource, models.aws_osis.CfnPipeline_VpcOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Options that specify the subnets and security groups for an OpenSearch Ingestion VPC endpoint.')
    _init_params: typing.ClassVar[list[str]] = ['max_units', 'min_units', 'pipeline_configuration_body', 'pipeline_name', 'log_publishing_options', 'tags', 'vpc_options']
    _method_names: typing.ClassVar[list[str]] = ['CloudWatchLogDestinationProperty', 'LogPublishingOptionsProperty', 'VpcEndpointProperty', 'VpcOptionsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_osis.CfnPipeline'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_osis.CfnPipelineDefConfig] = pydantic.Field(None)


class CfnPipelineDefConfig(pydantic.BaseModel):
    CloudWatchLogDestinationProperty: typing.Optional[list[models.aws_osis.CfnPipelineDefCloudwatchlogdestinationpropertyParams]] = pydantic.Field(None, description='')
    LogPublishingOptionsProperty: typing.Optional[list[models.aws_osis.CfnPipelineDefLogpublishingoptionspropertyParams]] = pydantic.Field(None, description='')
    VpcEndpointProperty: typing.Optional[list[models.aws_osis.CfnPipelineDefVpcendpointpropertyParams]] = pydantic.Field(None, description='')
    VpcOptionsProperty: typing.Optional[list[models.aws_osis.CfnPipelineDefVpcoptionspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_osis.CfnPipelineDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_osis.CfnPipelineDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_osis.CfnPipelineDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_osis.CfnPipelineDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_osis.CfnPipelineDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_osis.CfnPipelineDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_osis.CfnPipelineDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_osis.CfnPipelineDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_osis.CfnPipelineDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_osis.CfnPipelineDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_osis.CfnPipelineDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_osis.CfnPipelineDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_osis.CfnPipelineDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_vpc_endpoints_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPipelineDefCloudwatchlogdestinationpropertyParams(pydantic.BaseModel):
    log_group: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefLogpublishingoptionspropertyParams(pydantic.BaseModel):
    cloud_watch_log_destination: typing.Union[models.UnsupportedResource, models.aws_osis.CfnPipeline_CloudWatchLogDestinationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    is_logging_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefVpcendpointpropertyParams(pydantic.BaseModel):
    vpc_endpoint_id: typing.Optional[str] = pydantic.Field(None, description='')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='')
    vpc_options: typing.Union[models.UnsupportedResource, models.aws_osis.CfnPipeline_VpcOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefVpcoptionspropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    subnet_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPipelineDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPipelineDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPipelineDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPipelineDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPipelineDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPipelineDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPipelineDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPipelineDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPipelineDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPipelineDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPipelineDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPipelineDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPipelineDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_osis.CfnPipelineProps
class CfnPipelinePropsDef(BaseCfnProperty):
    max_units: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The maximum pipeline capacity, in Ingestion Compute Units (ICUs).\n')
    min_units: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum pipeline capacity, in Ingestion Compute Units (ICUs).\n')
    pipeline_configuration_body: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Data Prepper pipeline configuration in YAML format.\n')
    pipeline_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the pipeline.\n')
    log_publishing_options: typing.Union[models.UnsupportedResource, models.aws_osis.CfnPipeline_LogPublishingOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Key-value pairs that represent log publishing settings.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='List of tags to add to the pipeline upon creation.\n')
    vpc_options: typing.Union[models.UnsupportedResource, models.aws_osis.CfnPipeline_VpcOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Options that specify the subnets and security groups for an OpenSearch Ingestion VPC endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-osis-pipeline.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_osis as osis\n\n    cfn_pipeline_props = osis.CfnPipelineProps(\n        max_units=123,\n        min_units=123,\n        pipeline_configuration_body="pipelineConfigurationBody",\n        pipeline_name="pipelineName",\n\n        # the properties below are optional\n        log_publishing_options=osis.CfnPipeline.LogPublishingOptionsProperty(\n            cloud_watch_log_destination=osis.CfnPipeline.CloudWatchLogDestinationProperty(\n                log_group="logGroup"\n            ),\n            is_logging_enabled=False\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        vpc_options=osis.CfnPipeline.VpcOptionsProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_units', 'min_units', 'pipeline_configuration_body', 'pipeline_name', 'log_publishing_options', 'tags', 'vpc_options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_osis.CfnPipelineProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnPipeline_CloudWatchLogDestinationProperty: typing.Optional[dict[str, models.aws_osis.CfnPipeline_CloudWatchLogDestinationPropertyDef]] = pydantic.Field(None)
    CfnPipeline_LogPublishingOptionsProperty: typing.Optional[dict[str, models.aws_osis.CfnPipeline_LogPublishingOptionsPropertyDef]] = pydantic.Field(None)
    CfnPipeline_VpcEndpointProperty: typing.Optional[dict[str, models.aws_osis.CfnPipeline_VpcEndpointPropertyDef]] = pydantic.Field(None)
    CfnPipeline_VpcOptionsProperty: typing.Optional[dict[str, models.aws_osis.CfnPipeline_VpcOptionsPropertyDef]] = pydantic.Field(None)
    CfnPipeline: typing.Optional[dict[str, models.aws_osis.CfnPipelineDef]] = pydantic.Field(None)
    CfnPipelineProps: typing.Optional[dict[str, models.aws_osis.CfnPipelinePropsDef]] = pydantic.Field(None)
    ...

import models
