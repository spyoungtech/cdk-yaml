from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan.ApplicationSourceProperty
class CfnScalingPlan_ApplicationSourcePropertyDef(BaseStruct):
    cloud_formation_stack_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of a CloudFormation stack. You must specify either a ``CloudFormationStackARN`` or ``TagFilters`` .\n')
    tag_filters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_TagFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A set of tag filters (keys and values). Each tag filter specified must contain a key with values as optional. Each scaling plan can include up to 50 keys, and each key can include up to 20 values. Tags are part of the syntax that you use to specify the resources you want returned when configuring a scaling plan from the AWS Auto Scaling console. You do not need to specify valid tag filter values when you create a scaling plan with CloudFormation. The ``Key`` and ``Values`` properties can accept any value as long as the combination of values is unique across scaling plans. However, if you also want to use the AWS Auto Scaling console to edit the scaling plan, then you must specify valid values. You must specify either a ``CloudFormationStackARN`` or ``TagFilters`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscalingplans-scalingplan-applicationsource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    application_source_property = autoscalingplans.CfnScalingPlan.ApplicationSourceProperty(\n        cloud_formation_stack_arn="cloudFormationStackArn",\n        tag_filters=[autoscalingplans.CfnScalingPlan.TagFilterProperty(\n            key="key",\n\n            # the properties below are optional\n            values=["values"]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_formation_stack_arn', 'tag_filters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan.ApplicationSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan.CustomizedLoadMetricSpecificationProperty
class CfnScalingPlan_CustomizedLoadMetricSpecificationPropertyDef(BaseStruct):
    metric_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the metric.\n')
    namespace: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The namespace of the metric.\n')
    statistic: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The statistic of the metric. *Allowed Values* : ``Sum``\n')
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_MetricDimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized load metric specification.\n')
    unit: typing.Optional[str] = pydantic.Field(None, description='The unit of the metric.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscalingplans-scalingplan-customizedloadmetricspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    customized_load_metric_specification_property = autoscalingplans.CfnScalingPlan.CustomizedLoadMetricSpecificationProperty(\n        metric_name="metricName",\n        namespace="namespace",\n        statistic="statistic",\n\n        # the properties below are optional\n        dimensions=[autoscalingplans.CfnScalingPlan.MetricDimensionProperty(\n            name="name",\n            value="value"\n        )],\n        unit="unit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['metric_name', 'namespace', 'statistic', 'dimensions', 'unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan.CustomizedLoadMetricSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan.CustomizedScalingMetricSpecificationProperty
class CfnScalingPlan_CustomizedScalingMetricSpecificationPropertyDef(BaseStruct):
    metric_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the metric. To get the exact metric name, namespace, and dimensions, inspect the `Metrics <https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Metric.html>`_ object that is returned by a call to `ListMetrics <https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html>`_ .\n')
    namespace: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The namespace of the metric.\n')
    statistic: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The statistic of the metric.\n')
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_MetricDimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.\n')
    unit: typing.Optional[str] = pydantic.Field(None, description='The unit of the metric. For a complete list of the units that CloudWatch supports, see the `MetricDatum <https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html>`_ data type in the *Amazon CloudWatch API Reference* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscalingplans-scalingplan-customizedscalingmetricspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    customized_scaling_metric_specification_property = autoscalingplans.CfnScalingPlan.CustomizedScalingMetricSpecificationProperty(\n        metric_name="metricName",\n        namespace="namespace",\n        statistic="statistic",\n\n        # the properties below are optional\n        dimensions=[autoscalingplans.CfnScalingPlan.MetricDimensionProperty(\n            name="name",\n            value="value"\n        )],\n        unit="unit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['metric_name', 'namespace', 'statistic', 'dimensions', 'unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan.CustomizedScalingMetricSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan.MetricDimensionProperty
class CfnScalingPlan_MetricDimensionPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the dimension.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value of the dimension.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscalingplans-scalingplan-metricdimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    metric_dimension_property = autoscalingplans.CfnScalingPlan.MetricDimensionProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan.MetricDimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan.PredefinedLoadMetricSpecificationProperty
class CfnScalingPlan_PredefinedLoadMetricSpecificationPropertyDef(BaseStruct):
    predefined_load_metric_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The metric type.\n')
    resource_label: typing.Optional[str] = pydantic.Field(None, description='Identifies the resource associated with the metric type. You can\'t specify a resource label unless the metric type is ``ALBTargetGroupRequestCount`` and there is a target group for an Application Load Balancer attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format is app///targetgroup//, where: - app// is the final portion of the load balancer ARN - targetgroup// is the final portion of the target group ARN. This is an example: app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d. To find the ARN for an Application Load Balancer, use the `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html>`_ API operation. To find the ARN for the target group, use the `DescribeTargetGroups <https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html>`_ API operation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscalingplans-scalingplan-predefinedloadmetricspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    predefined_load_metric_specification_property = autoscalingplans.CfnScalingPlan.PredefinedLoadMetricSpecificationProperty(\n        predefined_load_metric_type="predefinedLoadMetricType",\n\n        # the properties below are optional\n        resource_label="resourceLabel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['predefined_load_metric_type', 'resource_label']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan.PredefinedLoadMetricSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan.PredefinedScalingMetricSpecificationProperty
class CfnScalingPlan_PredefinedScalingMetricSpecificationPropertyDef(BaseStruct):
    predefined_scaling_metric_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The metric type. The ``ALBRequestCountPerTarget`` metric type applies only to Auto Scaling groups, Spot Fleet requests, and ECS services.\n')
    resource_label: typing.Optional[str] = pydantic.Field(None, description='Identifies the resource associated with the metric type. You can\'t specify a resource label unless the metric type is ``ALBRequestCountPerTarget`` and there is a target group for an Application Load Balancer attached to the Auto Scaling group, Spot Fleet request, or ECS service. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format is app///targetgroup//, where: - app// is the final portion of the load balancer ARN - targetgroup// is the final portion of the target group ARN. This is an example: app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d. To find the ARN for an Application Load Balancer, use the `DescribeLoadBalancers <https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html>`_ API operation. To find the ARN for the target group, use the `DescribeTargetGroups <https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html>`_ API operation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscalingplans-scalingplan-predefinedscalingmetricspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    predefined_scaling_metric_specification_property = autoscalingplans.CfnScalingPlan.PredefinedScalingMetricSpecificationProperty(\n        predefined_scaling_metric_type="predefinedScalingMetricType",\n\n        # the properties below are optional\n        resource_label="resourceLabel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['predefined_scaling_metric_type', 'resource_label']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan.PredefinedScalingMetricSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan.ScalingInstructionProperty
class CfnScalingPlan_ScalingInstructionPropertyDef(BaseStruct):
    max_capacity: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for *PredictiveScalingMaxCapacityBehavior* .\n')
    min_capacity: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum capacity of the resource.\n')
    resource_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the resource. This string consists of the resource type and unique identifier. - Auto Scaling group - The resource type is ``autoScalingGroup`` and the unique identifier is the name of the Auto Scaling group. Example: ``autoScalingGroup/my-asg`` . - ECS service - The resource type is ``service`` and the unique identifier is the cluster name and service name. Example: ``service/default/sample-webapp`` . - Spot Fleet request - The resource type is ``spot-fleet-request`` and the unique identifier is the Spot Fleet request ID. Example: ``spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE`` . - DynamoDB table - The resource type is ``table`` and the unique identifier is the resource ID. Example: ``table/my-table`` . - DynamoDB global secondary index - The resource type is ``index`` and the unique identifier is the resource ID. Example: ``table/my-table/index/my-table-index`` . - Aurora DB cluster - The resource type is ``cluster`` and the unique identifier is the cluster name. Example: ``cluster:my-db-cluster`` .\n')
    scalable_dimension: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The scalable dimension associated with the resource. - ``autoscaling:autoScalingGroup:DesiredCapacity`` - The desired capacity of an Auto Scaling group. - ``ecs:service:DesiredCount`` - The desired task count of an ECS service. - ``ec2:spot-fleet-request:TargetCapacity`` - The target capacity of a Spot Fleet request. - ``dynamodb:table:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB table. - ``dynamodb:table:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB table. - ``dynamodb:index:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB global secondary index. - ``dynamodb:index:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB global secondary index. - ``rds:cluster:ReadReplicaCount`` - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n')
    service_namespace: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The namespace of the AWS service.\n')
    target_tracking_configurations: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_TargetTrackingConfigurationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The target tracking configurations (up to 10). Each of these structures must specify a unique scaling metric and a target value for the metric.\n')
    customized_load_metric_specification: typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_CustomizedLoadMetricSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The customized load metric to use for predictive scaling. This property or a *PredefinedLoadMetricSpecification* is required when configuring predictive scaling, and cannot be used otherwise.\n')
    disable_dynamic_scaling: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Controls whether dynamic scaling is disabled. When dynamic scaling is enabled, AWS Auto Scaling creates target tracking scaling policies based on the specified target tracking configurations. The default is enabled ( ``false`` ).\n')
    predefined_load_metric_specification: typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_PredefinedLoadMetricSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The predefined load metric to use for predictive scaling. This property or a *CustomizedLoadMetricSpecification* is required when configuring predictive scaling, and cannot be used otherwise.\n')
    predictive_scaling_max_capacity_behavior: typing.Optional[str] = pydantic.Field(None, description='Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource. The default value is ``SetForecastCapacityToMaxCapacity`` . The following are possible values: - ``SetForecastCapacityToMaxCapacity`` - AWS Auto Scaling cannot scale resource capacity higher than the maximum capacity. The maximum capacity is enforced as a hard limit. - ``SetMaxCapacityToForecastCapacity`` - AWS Auto Scaling can scale resource capacity higher than the maximum capacity to equal but not exceed forecast capacity. - ``SetMaxCapacityAboveForecastCapacity`` - AWS Auto Scaling can scale resource capacity higher than the maximum capacity by a specified buffer value. The intention is to give the target tracking scaling policy extra capacity if unexpected traffic occurs. Valid only when configuring predictive scaling.\n')
    predictive_scaling_max_capacity_buffer: typing.Union[int, float, None] = pydantic.Field(None, description='The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer. With a 10 percent buffer, if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55. Valid only when configuring predictive scaling. Required if *PredictiveScalingMaxCapacityBehavior* is set to ``SetMaxCapacityAboveForecastCapacity`` , and cannot be used otherwise. The range is 1-100.\n')
    predictive_scaling_mode: typing.Optional[str] = pydantic.Field(None, description='The predictive scaling mode. The default value is ``ForecastAndScale`` . Otherwise, AWS Auto Scaling forecasts capacity but does not apply any scheduled scaling actions based on the capacity forecast.\n')
    scaling_policy_update_behavior: typing.Optional[str] = pydantic.Field(None, description="Controls whether a resource's externally created scaling policies are deleted and new target tracking scaling policies created. The default value is ``KeepExternalPolicies`` . Valid only when configuring dynamic scaling.\n")
    scheduled_action_buffer_time: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out. For example, if the forecast says to add capacity at 10:00 AM, and the buffer time is 5 minutes, then the run time of the corresponding scheduled scaling action will be 9:55 AM. The intention is to give resources time to be provisioned. For example, it can take a few minutes to launch an EC2 instance. The actual amount of time required depends on several factors, such as the size of the instance and whether there are startup scripts to complete. The value must be less than the forecast interval duration of 3600 seconds (60 minutes). The default is 300 seconds. Valid only when configuring predictive scaling.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscalingplans-scalingplan-scalinginstruction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    scaling_instruction_property = autoscalingplans.CfnScalingPlan.ScalingInstructionProperty(\n        max_capacity=123,\n        min_capacity=123,\n        resource_id="resourceId",\n        scalable_dimension="scalableDimension",\n        service_namespace="serviceNamespace",\n        target_tracking_configurations=[autoscalingplans.CfnScalingPlan.TargetTrackingConfigurationProperty(\n            target_value=123,\n\n            # the properties below are optional\n            customized_scaling_metric_specification=autoscalingplans.CfnScalingPlan.CustomizedScalingMetricSpecificationProperty(\n                metric_name="metricName",\n                namespace="namespace",\n                statistic="statistic",\n\n                # the properties below are optional\n                dimensions=[autoscalingplans.CfnScalingPlan.MetricDimensionProperty(\n                    name="name",\n                    value="value"\n                )],\n                unit="unit"\n            ),\n            disable_scale_in=False,\n            estimated_instance_warmup=123,\n            predefined_scaling_metric_specification=autoscalingplans.CfnScalingPlan.PredefinedScalingMetricSpecificationProperty(\n                predefined_scaling_metric_type="predefinedScalingMetricType",\n\n                # the properties below are optional\n                resource_label="resourceLabel"\n            ),\n            scale_in_cooldown=123,\n            scale_out_cooldown=123\n        )],\n\n        # the properties below are optional\n        customized_load_metric_specification=autoscalingplans.CfnScalingPlan.CustomizedLoadMetricSpecificationProperty(\n            metric_name="metricName",\n            namespace="namespace",\n            statistic="statistic",\n\n            # the properties below are optional\n            dimensions=[autoscalingplans.CfnScalingPlan.MetricDimensionProperty(\n                name="name",\n                value="value"\n            )],\n            unit="unit"\n        ),\n        disable_dynamic_scaling=False,\n        predefined_load_metric_specification=autoscalingplans.CfnScalingPlan.PredefinedLoadMetricSpecificationProperty(\n            predefined_load_metric_type="predefinedLoadMetricType",\n\n            # the properties below are optional\n            resource_label="resourceLabel"\n        ),\n        predictive_scaling_max_capacity_behavior="predictiveScalingMaxCapacityBehavior",\n        predictive_scaling_max_capacity_buffer=123,\n        predictive_scaling_mode="predictiveScalingMode",\n        scaling_policy_update_behavior="scalingPolicyUpdateBehavior",\n        scheduled_action_buffer_time=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_capacity', 'min_capacity', 'resource_id', 'scalable_dimension', 'service_namespace', 'target_tracking_configurations', 'customized_load_metric_specification', 'disable_dynamic_scaling', 'predefined_load_metric_specification', 'predictive_scaling_max_capacity_behavior', 'predictive_scaling_max_capacity_buffer', 'predictive_scaling_mode', 'scaling_policy_update_behavior', 'scheduled_action_buffer_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan.ScalingInstructionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan.TagFilterProperty
class CfnScalingPlan_TagFilterPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The tag key.\n')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The tag values (0 to 20).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscalingplans-scalingplan-tagfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    tag_filter_property = autoscalingplans.CfnScalingPlan.TagFilterProperty(\n        key="key",\n\n        # the properties below are optional\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan.TagFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan.TargetTrackingConfigurationProperty
class CfnScalingPlan_TargetTrackingConfigurationPropertyDef(BaseStruct):
    target_value: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="The target value for the metric. Although this property accepts numbers of type Double, it won't accept values that are either too small or too large. Values must be in the range of -2^360 to 2^360.\n")
    customized_scaling_metric_specification: typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_CustomizedScalingMetricSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A customized metric. You can specify either a predefined metric or a customized metric.\n')
    disable_scale_in: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Indicates whether scale in by the target tracking scaling policy is disabled. If the value is ``true`` , scale in is disabled and the target tracking scaling policy doesn't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable resource. The default value is ``false`` .\n")
    estimated_instance_warmup: typing.Union[int, float, None] = pydantic.Field(None, description='The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This value is used only if the resource is an Auto Scaling group.\n')
    predefined_scaling_metric_specification: typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_PredefinedScalingMetricSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A predefined metric. You can specify either a predefined metric or a customized metric.\n')
    scale_in_cooldown: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time, in seconds, after a scale-in activity completes before another scale in activity can start. This value is not used if the scalable resource is an Auto Scaling group.\n')
    scale_out_cooldown: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time, in seconds, after a scale-out activity completes before another scale-out activity can start. This value is not used if the scalable resource is an Auto Scaling group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscalingplans-scalingplan-targettrackingconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    target_tracking_configuration_property = autoscalingplans.CfnScalingPlan.TargetTrackingConfigurationProperty(\n        target_value=123,\n\n        # the properties below are optional\n        customized_scaling_metric_specification=autoscalingplans.CfnScalingPlan.CustomizedScalingMetricSpecificationProperty(\n            metric_name="metricName",\n            namespace="namespace",\n            statistic="statistic",\n\n            # the properties below are optional\n            dimensions=[autoscalingplans.CfnScalingPlan.MetricDimensionProperty(\n                name="name",\n                value="value"\n            )],\n            unit="unit"\n        ),\n        disable_scale_in=False,\n        estimated_instance_warmup=123,\n        predefined_scaling_metric_specification=autoscalingplans.CfnScalingPlan.PredefinedScalingMetricSpecificationProperty(\n            predefined_scaling_metric_type="predefinedScalingMetricType",\n\n            # the properties below are optional\n            resource_label="resourceLabel"\n        ),\n        scale_in_cooldown=123,\n        scale_out_cooldown=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_value', 'customized_scaling_metric_specification', 'disable_scale_in', 'estimated_instance_warmup', 'predefined_scaling_metric_specification', 'scale_in_cooldown', 'scale_out_cooldown']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan.TargetTrackingConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlan
class CfnScalingPlanDef(BaseCfnResource):
    application_source: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_ApplicationSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A CloudFormation stack or a set of tags. You can create one scaling plan per application source. The ``ApplicationSource`` property must be present to ensure interoperability with the AWS Auto Scaling console.\n')
    scaling_instructions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_ScalingInstructionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The scaling instructions.')
    _init_params: typing.ClassVar[list[str]] = ['application_source', 'scaling_instructions']
    _method_names: typing.ClassVar[list[str]] = ['ApplicationSourceProperty', 'CustomizedLoadMetricSpecificationProperty', 'CustomizedScalingMetricSpecificationProperty', 'MetricDimensionProperty', 'PredefinedLoadMetricSpecificationProperty', 'PredefinedScalingMetricSpecificationProperty', 'ScalingInstructionProperty', 'TagFilterProperty', 'TargetTrackingConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlan'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnScalingPlanDefConfig] = pydantic.Field(None)


class CfnScalingPlanDefConfig(pydantic.BaseModel):
    ApplicationSourceProperty: typing.Optional[list[CfnScalingPlanDefApplicationsourcepropertyParams]] = pydantic.Field(None, description='')
    CustomizedLoadMetricSpecificationProperty: typing.Optional[list[CfnScalingPlanDefCustomizedloadmetricspecificationpropertyParams]] = pydantic.Field(None, description='')
    CustomizedScalingMetricSpecificationProperty: typing.Optional[list[CfnScalingPlanDefCustomizedscalingmetricspecificationpropertyParams]] = pydantic.Field(None, description='')
    MetricDimensionProperty: typing.Optional[list[CfnScalingPlanDefMetricdimensionpropertyParams]] = pydantic.Field(None, description='')
    PredefinedLoadMetricSpecificationProperty: typing.Optional[list[CfnScalingPlanDefPredefinedloadmetricspecificationpropertyParams]] = pydantic.Field(None, description='')
    PredefinedScalingMetricSpecificationProperty: typing.Optional[list[CfnScalingPlanDefPredefinedscalingmetricspecificationpropertyParams]] = pydantic.Field(None, description='')
    ScalingInstructionProperty: typing.Optional[list[CfnScalingPlanDefScalinginstructionpropertyParams]] = pydantic.Field(None, description='')
    TagFilterProperty: typing.Optional[list[CfnScalingPlanDefTagfilterpropertyParams]] = pydantic.Field(None, description='')
    TargetTrackingConfigurationProperty: typing.Optional[list[CfnScalingPlanDefTargettrackingconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnScalingPlanDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnScalingPlanDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnScalingPlanDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnScalingPlanDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnScalingPlanDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnScalingPlanDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnScalingPlanDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnScalingPlanDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnScalingPlanDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnScalingPlanDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnScalingPlanDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnScalingPlanDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnScalingPlanDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnScalingPlanDefApplicationsourcepropertyParams(pydantic.BaseModel):
    cloud_formation_stack_arn: typing.Optional[str] = pydantic.Field(None, description='')
    tag_filters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_TagFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnScalingPlanDefCustomizedloadmetricspecificationpropertyParams(pydantic.BaseModel):
    metric_name: str = pydantic.Field(..., description='')
    namespace: str = pydantic.Field(..., description='')
    statistic: str = pydantic.Field(..., description='')
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_MetricDimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnScalingPlanDefCustomizedscalingmetricspecificationpropertyParams(pydantic.BaseModel):
    metric_name: str = pydantic.Field(..., description='')
    namespace: str = pydantic.Field(..., description='')
    statistic: str = pydantic.Field(..., description='')
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_MetricDimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnScalingPlanDefMetricdimensionpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnScalingPlanDefPredefinedloadmetricspecificationpropertyParams(pydantic.BaseModel):
    predefined_load_metric_type: str = pydantic.Field(..., description='')
    resource_label: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnScalingPlanDefPredefinedscalingmetricspecificationpropertyParams(pydantic.BaseModel):
    predefined_scaling_metric_type: str = pydantic.Field(..., description='')
    resource_label: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnScalingPlanDefScalinginstructionpropertyParams(pydantic.BaseModel):
    max_capacity: typing.Union[int, float] = pydantic.Field(..., description='')
    min_capacity: typing.Union[int, float] = pydantic.Field(..., description='')
    resource_id: str = pydantic.Field(..., description='')
    scalable_dimension: str = pydantic.Field(..., description='')
    service_namespace: str = pydantic.Field(..., description='')
    target_tracking_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_TargetTrackingConfigurationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    customized_load_metric_specification: typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_CustomizedLoadMetricSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    disable_dynamic_scaling: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    predefined_load_metric_specification: typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_PredefinedLoadMetricSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    predictive_scaling_max_capacity_behavior: typing.Optional[str] = pydantic.Field(None, description='')
    predictive_scaling_max_capacity_buffer: typing.Union[int, float, None] = pydantic.Field(None, description='')
    predictive_scaling_mode: typing.Optional[str] = pydantic.Field(None, description='')
    scaling_policy_update_behavior: typing.Optional[str] = pydantic.Field(None, description='')
    scheduled_action_buffer_time: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnScalingPlanDefTagfilterpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnScalingPlanDefTargettrackingconfigurationpropertyParams(pydantic.BaseModel):
    target_value: typing.Union[int, float] = pydantic.Field(..., description='')
    customized_scaling_metric_specification: typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_CustomizedScalingMetricSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    disable_scale_in: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    estimated_instance_warmup: typing.Union[int, float, None] = pydantic.Field(None, description='')
    predefined_scaling_metric_specification: typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_PredefinedScalingMetricSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    scale_in_cooldown: typing.Union[int, float, None] = pydantic.Field(None, description='')
    scale_out_cooldown: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnScalingPlanDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnScalingPlanDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnScalingPlanDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnScalingPlanDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnScalingPlanDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnScalingPlanDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnScalingPlanDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnScalingPlanDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnScalingPlanDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnScalingPlanDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnScalingPlanDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnScalingPlanDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnScalingPlanDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnScalingPlanDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_autoscalingplans.CfnScalingPlanProps
class CfnScalingPlanPropsDef(BaseCfnProperty):
    application_source: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_ApplicationSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A CloudFormation stack or a set of tags. You can create one scaling plan per application source. The ``ApplicationSource`` property must be present to ensure interoperability with the AWS Auto Scaling console.\n')
    scaling_instructions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_autoscalingplans.CfnScalingPlan_ScalingInstructionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The scaling instructions.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscalingplans-scalingplan.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_autoscalingplans as autoscalingplans\n\n    cfn_scaling_plan_props = autoscalingplans.CfnScalingPlanProps(\n        application_source=autoscalingplans.CfnScalingPlan.ApplicationSourceProperty(\n            cloud_formation_stack_arn="cloudFormationStackArn",\n            tag_filters=[autoscalingplans.CfnScalingPlan.TagFilterProperty(\n                key="key",\n\n                # the properties below are optional\n                values=["values"]\n            )]\n        ),\n        scaling_instructions=[autoscalingplans.CfnScalingPlan.ScalingInstructionProperty(\n            max_capacity=123,\n            min_capacity=123,\n            resource_id="resourceId",\n            scalable_dimension="scalableDimension",\n            service_namespace="serviceNamespace",\n            target_tracking_configurations=[autoscalingplans.CfnScalingPlan.TargetTrackingConfigurationProperty(\n                target_value=123,\n\n                # the properties below are optional\n                customized_scaling_metric_specification=autoscalingplans.CfnScalingPlan.CustomizedScalingMetricSpecificationProperty(\n                    metric_name="metricName",\n                    namespace="namespace",\n                    statistic="statistic",\n\n                    # the properties below are optional\n                    dimensions=[autoscalingplans.CfnScalingPlan.MetricDimensionProperty(\n                        name="name",\n                        value="value"\n                    )],\n                    unit="unit"\n                ),\n                disable_scale_in=False,\n                estimated_instance_warmup=123,\n                predefined_scaling_metric_specification=autoscalingplans.CfnScalingPlan.PredefinedScalingMetricSpecificationProperty(\n                    predefined_scaling_metric_type="predefinedScalingMetricType",\n\n                    # the properties below are optional\n                    resource_label="resourceLabel"\n                ),\n                scale_in_cooldown=123,\n                scale_out_cooldown=123\n            )],\n\n            # the properties below are optional\n            customized_load_metric_specification=autoscalingplans.CfnScalingPlan.CustomizedLoadMetricSpecificationProperty(\n                metric_name="metricName",\n                namespace="namespace",\n                statistic="statistic",\n\n                # the properties below are optional\n                dimensions=[autoscalingplans.CfnScalingPlan.MetricDimensionProperty(\n                    name="name",\n                    value="value"\n                )],\n                unit="unit"\n            ),\n            disable_dynamic_scaling=False,\n            predefined_load_metric_specification=autoscalingplans.CfnScalingPlan.PredefinedLoadMetricSpecificationProperty(\n                predefined_load_metric_type="predefinedLoadMetricType",\n\n                # the properties below are optional\n                resource_label="resourceLabel"\n            ),\n            predictive_scaling_max_capacity_behavior="predictiveScalingMaxCapacityBehavior",\n            predictive_scaling_max_capacity_buffer=123,\n            predictive_scaling_mode="predictiveScalingMode",\n            scaling_policy_update_behavior="scalingPolicyUpdateBehavior",\n            scheduled_action_buffer_time=123\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_source', 'scaling_instructions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscalingplans.CfnScalingPlanProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnScalingPlan_ApplicationSourceProperty: typing.Optional[dict[str, CfnScalingPlan_ApplicationSourcePropertyDef]] = pydantic.Field(None)
    CfnScalingPlan_CustomizedLoadMetricSpecificationProperty: typing.Optional[dict[str, CfnScalingPlan_CustomizedLoadMetricSpecificationPropertyDef]] = pydantic.Field(None)
    CfnScalingPlan_CustomizedScalingMetricSpecificationProperty: typing.Optional[dict[str, CfnScalingPlan_CustomizedScalingMetricSpecificationPropertyDef]] = pydantic.Field(None)
    CfnScalingPlan_MetricDimensionProperty: typing.Optional[dict[str, CfnScalingPlan_MetricDimensionPropertyDef]] = pydantic.Field(None)
    CfnScalingPlan_PredefinedLoadMetricSpecificationProperty: typing.Optional[dict[str, CfnScalingPlan_PredefinedLoadMetricSpecificationPropertyDef]] = pydantic.Field(None)
    CfnScalingPlan_PredefinedScalingMetricSpecificationProperty: typing.Optional[dict[str, CfnScalingPlan_PredefinedScalingMetricSpecificationPropertyDef]] = pydantic.Field(None)
    CfnScalingPlan_ScalingInstructionProperty: typing.Optional[dict[str, CfnScalingPlan_ScalingInstructionPropertyDef]] = pydantic.Field(None)
    CfnScalingPlan_TagFilterProperty: typing.Optional[dict[str, CfnScalingPlan_TagFilterPropertyDef]] = pydantic.Field(None)
    CfnScalingPlan_TargetTrackingConfigurationProperty: typing.Optional[dict[str, CfnScalingPlan_TargetTrackingConfigurationPropertyDef]] = pydantic.Field(None)
    CfnScalingPlan: typing.Optional[dict[str, CfnScalingPlanDef]] = pydantic.Field(None)
    CfnScalingPlanProps: typing.Optional[dict[str, CfnScalingPlanPropsDef]] = pydantic.Field(None)
    ...
