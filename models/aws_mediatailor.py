from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.AdMarkerPassthroughProperty
class CfnPlaybackConfiguration_AdMarkerPassthroughPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnPlaybackConfiguration.AdMarkerPassthroughProperty.Enabled``.')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.AdMarkerPassthroughProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.AvailSuppressionProperty
class CfnPlaybackConfiguration_AvailSuppressionPropertyDef(BaseStruct):
    mode: typing.Optional[str] = pydantic.Field(None, description='``CfnPlaybackConfiguration.AvailSuppressionProperty.Mode``.')
    value: typing.Optional[str] = pydantic.Field(None, description='``CfnPlaybackConfiguration.AvailSuppressionProperty.Value``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediatailor-playbackconfiguration-availsuppression.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediatailor as mediatailor\n\n    avail_suppression_property = mediatailor.CfnPlaybackConfiguration.AvailSuppressionProperty(\n        mode="mode",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mode', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.AvailSuppressionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.BumperProperty
class CfnPlaybackConfiguration_BumperPropertyDef(BaseStruct):
    end_url: typing.Optional[str] = pydantic.Field(None, description='``CfnPlaybackConfiguration.BumperProperty.EndUrl``.')
    start_url: typing.Optional[str] = pydantic.Field(None, description='``CfnPlaybackConfiguration.BumperProperty.StartUrl``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediatailor-playbackconfiguration-bumper.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediatailor as mediatailor\n\n    bumper_property = mediatailor.CfnPlaybackConfiguration.BumperProperty(\n        end_url="endUrl",\n        start_url="startUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end_url', 'start_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.BumperProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.CdnConfigurationProperty
class CfnPlaybackConfiguration_CdnConfigurationPropertyDef(BaseStruct):
    ad_segment_url_prefix: typing.Optional[str] = pydantic.Field(None, description='``CfnPlaybackConfiguration.CdnConfigurationProperty.AdSegmentUrlPrefix``.')
    content_segment_url_prefix: typing.Optional[str] = pydantic.Field(None, description='``CfnPlaybackConfiguration.CdnConfigurationProperty.ContentSegmentUrlPrefix``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediatailor-playbackconfiguration-cdnconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediatailor as mediatailor\n\n    cdn_configuration_property = mediatailor.CfnPlaybackConfiguration.CdnConfigurationProperty(\n        ad_segment_url_prefix="adSegmentUrlPrefix",\n        content_segment_url_prefix="contentSegmentUrlPrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ad_segment_url_prefix', 'content_segment_url_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.CdnConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.DashConfigurationProperty
class CfnPlaybackConfiguration_DashConfigurationPropertyDef(BaseStruct):
    manifest_endpoint_prefix: typing.Optional[str] = pydantic.Field(None, description='The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.\n')
    mpd_location: typing.Optional[str] = pydantic.Field(None, description="The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are ``DISABLED`` and ``EMT_DEFAULT`` . The ``EMT_DEFAULT`` setting enables the inclusion of the tag and is the default value.\n")
    origin_manifest_type: typing.Optional[str] = pydantic.Field(None, description='The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to ``SINGLE_PERIOD`` . The default setting is ``MULTI_PERIOD`` . For multi-period manifests, omit this setting or set it to ``MULTI_PERIOD`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediatailor-playbackconfiguration-dashconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediatailor as mediatailor\n\n    dash_configuration_property = mediatailor.CfnPlaybackConfiguration.DashConfigurationProperty(\n        manifest_endpoint_prefix="manifestEndpointPrefix",\n        mpd_location="mpdLocation",\n        origin_manifest_type="originManifestType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['manifest_endpoint_prefix', 'mpd_location', 'origin_manifest_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.DashConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.HlsConfigurationProperty
class CfnPlaybackConfiguration_HlsConfigurationPropertyDef(BaseStruct):
    manifest_endpoint_prefix: typing.Optional[str] = pydantic.Field(None, description='The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediatailor-playbackconfiguration-hlsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediatailor as mediatailor\n\n    hls_configuration_property = mediatailor.CfnPlaybackConfiguration.HlsConfigurationProperty(\n        manifest_endpoint_prefix="manifestEndpointPrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['manifest_endpoint_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.HlsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.LivePreRollConfigurationProperty
class CfnPlaybackConfiguration_LivePreRollConfigurationPropertyDef(BaseStruct):
    ad_decision_server_url: typing.Optional[str] = pydantic.Field(None, description='``CfnPlaybackConfiguration.LivePreRollConfigurationProperty.AdDecisionServerUrl``.')
    max_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnPlaybackConfiguration.LivePreRollConfigurationProperty.MaxDurationSeconds``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediatailor-playbackconfiguration-liveprerollconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediatailor as mediatailor\n\n    live_pre_roll_configuration_property = mediatailor.CfnPlaybackConfiguration.LivePreRollConfigurationProperty(\n        ad_decision_server_url="adDecisionServerUrl",\n        max_duration_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ad_decision_server_url', 'max_duration_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.LivePreRollConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.ManifestProcessingRulesProperty
class CfnPlaybackConfiguration_ManifestProcessingRulesPropertyDef(BaseStruct):
    ad_marker_passthrough: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_AdMarkerPassthroughPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnPlaybackConfiguration.ManifestProcessingRulesProperty.AdMarkerPassthrough``.')
    _init_params: typing.ClassVar[list[str]] = ['ad_marker_passthrough']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfiguration.ManifestProcessingRulesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfiguration
class CfnPlaybackConfigurationDef(BaseCfnResource):
    ad_decision_server_url: str = pydantic.Field(..., description='``AWS::MediaTailor::PlaybackConfiguration.AdDecisionServerUrl``.\n')
    name: str = pydantic.Field(..., description='``AWS::MediaTailor::PlaybackConfiguration.Name``.\n')
    video_content_source_url: str = pydantic.Field(..., description='``AWS::MediaTailor::PlaybackConfiguration.VideoContentSourceUrl``.\n')
    avail_suppression: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_AvailSuppressionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.AvailSuppression``.\n')
    bumper: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_BumperPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.Bumper``.\n')
    cdn_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_CdnConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.CdnConfiguration``.\n')
    configuration_aliases: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Any], None] = pydantic.Field(None, description='The player parameters and aliases used as dynamic variables during session initialization. For more information, see `Domain Variables <https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html>`_ .\n')
    dash_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_DashConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.DashConfiguration``.\n')
    hls_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_HlsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for HLS content.\n')
    live_pre_roll_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_LivePreRollConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.LivePreRollConfiguration``.\n')
    manifest_processing_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_ManifestProcessingRulesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.ManifestProcessingRules``.\n')
    personalization_threshold_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.PersonalizationThresholdSeconds``.\n')
    slate_ad_url: typing.Optional[str] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.SlateAdUrl``.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.Tags``.\n')
    transcode_profile_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.TranscodeProfileName``.')
    _init_params: typing.ClassVar[list[str]] = ['ad_decision_server_url', 'name', 'video_content_source_url', 'avail_suppression', 'bumper', 'cdn_configuration', 'configuration_aliases', 'dash_configuration', 'hls_configuration', 'live_pre_roll_configuration', 'manifest_processing_rules', 'personalization_threshold_seconds', 'slate_ad_url', 'tags', 'transcode_profile_name']
    _method_names: typing.ClassVar[list[str]] = ['AdMarkerPassthroughProperty', 'AvailSuppressionProperty', 'BumperProperty', 'CdnConfigurationProperty', 'DashConfigurationProperty', 'HlsConfigurationProperty', 'LivePreRollConfigurationProperty', 'ManifestProcessingRulesProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPlaybackConfigurationDefConfig] = pydantic.Field(None)


class CfnPlaybackConfigurationDefConfig(pydantic.BaseModel):
    AdMarkerPassthroughProperty: typing.Optional[list[CfnPlaybackConfigurationDefAdmarkerpassthroughpropertyParams]] = pydantic.Field(None, description='')
    AvailSuppressionProperty: typing.Optional[list[CfnPlaybackConfigurationDefAvailsuppressionpropertyParams]] = pydantic.Field(None, description='')
    BumperProperty: typing.Optional[list[CfnPlaybackConfigurationDefBumperpropertyParams]] = pydantic.Field(None, description='')
    CdnConfigurationProperty: typing.Optional[list[CfnPlaybackConfigurationDefCdnconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DashConfigurationProperty: typing.Optional[list[CfnPlaybackConfigurationDefDashconfigurationpropertyParams]] = pydantic.Field(None, description='')
    HlsConfigurationProperty: typing.Optional[list[CfnPlaybackConfigurationDefHlsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    LivePreRollConfigurationProperty: typing.Optional[list[CfnPlaybackConfigurationDefLiveprerollconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ManifestProcessingRulesProperty: typing.Optional[list[CfnPlaybackConfigurationDefManifestprocessingrulespropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnPlaybackConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPlaybackConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPlaybackConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPlaybackConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPlaybackConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPlaybackConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPlaybackConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPlaybackConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPlaybackConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPlaybackConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPlaybackConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPlaybackConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPlaybackConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPlaybackConfigurationDefAdmarkerpassthroughpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnPlaybackConfigurationDefAvailsuppressionpropertyParams(pydantic.BaseModel):
    mode: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPlaybackConfigurationDefBumperpropertyParams(pydantic.BaseModel):
    end_url: typing.Optional[str] = pydantic.Field(None, description='')
    start_url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPlaybackConfigurationDefCdnconfigurationpropertyParams(pydantic.BaseModel):
    ad_segment_url_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    content_segment_url_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPlaybackConfigurationDefDashconfigurationpropertyParams(pydantic.BaseModel):
    manifest_endpoint_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    mpd_location: typing.Optional[str] = pydantic.Field(None, description='')
    origin_manifest_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPlaybackConfigurationDefHlsconfigurationpropertyParams(pydantic.BaseModel):
    manifest_endpoint_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPlaybackConfigurationDefLiveprerollconfigurationpropertyParams(pydantic.BaseModel):
    ad_decision_server_url: typing.Optional[str] = pydantic.Field(None, description='')
    max_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnPlaybackConfigurationDefManifestprocessingrulespropertyParams(pydantic.BaseModel):
    ad_marker_passthrough: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_AdMarkerPassthroughPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPlaybackConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPlaybackConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPlaybackConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPlaybackConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPlaybackConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPlaybackConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPlaybackConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPlaybackConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPlaybackConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPlaybackConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPlaybackConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnPlaybackConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPlaybackConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPlaybackConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediatailor.CfnPlaybackConfigurationProps
class CfnPlaybackConfigurationPropsDef(BaseCfnProperty):
    ad_decision_server_url: str = pydantic.Field(..., description='``AWS::MediaTailor::PlaybackConfiguration.AdDecisionServerUrl``.\n')
    name: str = pydantic.Field(..., description='``AWS::MediaTailor::PlaybackConfiguration.Name``.\n')
    video_content_source_url: str = pydantic.Field(..., description='``AWS::MediaTailor::PlaybackConfiguration.VideoContentSourceUrl``.\n')
    avail_suppression: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_AvailSuppressionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.AvailSuppression``.\n')
    bumper: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_BumperPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.Bumper``.\n')
    cdn_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_CdnConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.CdnConfiguration``.\n')
    configuration_aliases: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Any], None] = pydantic.Field(None, description='The player parameters and aliases used as dynamic variables during session initialization. For more information, see `Domain Variables <https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html>`_ .\n')
    dash_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_DashConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.DashConfiguration``.\n')
    hls_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_HlsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for HLS content.\n')
    live_pre_roll_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_LivePreRollConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.LivePreRollConfiguration``.\n')
    manifest_processing_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_mediatailor.CfnPlaybackConfiguration_ManifestProcessingRulesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.ManifestProcessingRules``.\n')
    personalization_threshold_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.PersonalizationThresholdSeconds``.\n')
    slate_ad_url: typing.Optional[str] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.SlateAdUrl``.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.Tags``.\n')
    transcode_profile_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::MediaTailor::PlaybackConfiguration.TranscodeProfileName``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediatailor-playbackconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediatailor as mediatailor\n\n    # configuration_aliases: Any\n\n    cfn_playback_configuration_props = mediatailor.CfnPlaybackConfigurationProps(\n        ad_decision_server_url="adDecisionServerUrl",\n        name="name",\n        video_content_source_url="videoContentSourceUrl",\n\n        # the properties below are optional\n        avail_suppression=mediatailor.CfnPlaybackConfiguration.AvailSuppressionProperty(\n            mode="mode",\n            value="value"\n        ),\n        bumper=mediatailor.CfnPlaybackConfiguration.BumperProperty(\n            end_url="endUrl",\n            start_url="startUrl"\n        ),\n        cdn_configuration=mediatailor.CfnPlaybackConfiguration.CdnConfigurationProperty(\n            ad_segment_url_prefix="adSegmentUrlPrefix",\n            content_segment_url_prefix="contentSegmentUrlPrefix"\n        ),\n        configuration_aliases={\n            "configuration_aliases_key": configuration_aliases\n        },\n        dash_configuration=mediatailor.CfnPlaybackConfiguration.DashConfigurationProperty(\n            manifest_endpoint_prefix="manifestEndpointPrefix",\n            mpd_location="mpdLocation",\n            origin_manifest_type="originManifestType"\n        ),\n        hls_configuration=mediatailor.CfnPlaybackConfiguration.HlsConfigurationProperty(\n            manifest_endpoint_prefix="manifestEndpointPrefix"\n        ),\n        live_pre_roll_configuration=mediatailor.CfnPlaybackConfiguration.LivePreRollConfigurationProperty(\n            ad_decision_server_url="adDecisionServerUrl",\n            max_duration_seconds=123\n        ),\n        manifest_processing_rules=mediatailor.CfnPlaybackConfiguration.ManifestProcessingRulesProperty(\n            ad_marker_passthrough=mediatailor.CfnPlaybackConfiguration.AdMarkerPassthroughProperty(\n                enabled=False\n            )\n        ),\n        personalization_threshold_seconds=123,\n        slate_ad_url="slateAdUrl",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        transcode_profile_name="transcodeProfileName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ad_decision_server_url', 'name', 'video_content_source_url', 'avail_suppression', 'bumper', 'cdn_configuration', 'configuration_aliases', 'dash_configuration', 'hls_configuration', 'live_pre_roll_configuration', 'manifest_processing_rules', 'personalization_threshold_seconds', 'slate_ad_url', 'tags', 'transcode_profile_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediatailor.CfnPlaybackConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnPlaybackConfiguration_AdMarkerPassthroughProperty: typing.Optional[dict[str, CfnPlaybackConfiguration_AdMarkerPassthroughPropertyDef]] = pydantic.Field(None)
    CfnPlaybackConfiguration_AvailSuppressionProperty: typing.Optional[dict[str, CfnPlaybackConfiguration_AvailSuppressionPropertyDef]] = pydantic.Field(None)
    CfnPlaybackConfiguration_BumperProperty: typing.Optional[dict[str, CfnPlaybackConfiguration_BumperPropertyDef]] = pydantic.Field(None)
    CfnPlaybackConfiguration_CdnConfigurationProperty: typing.Optional[dict[str, CfnPlaybackConfiguration_CdnConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPlaybackConfiguration_DashConfigurationProperty: typing.Optional[dict[str, CfnPlaybackConfiguration_DashConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPlaybackConfiguration_HlsConfigurationProperty: typing.Optional[dict[str, CfnPlaybackConfiguration_HlsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPlaybackConfiguration_LivePreRollConfigurationProperty: typing.Optional[dict[str, CfnPlaybackConfiguration_LivePreRollConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPlaybackConfiguration_ManifestProcessingRulesProperty: typing.Optional[dict[str, CfnPlaybackConfiguration_ManifestProcessingRulesPropertyDef]] = pydantic.Field(None)
    CfnPlaybackConfiguration: typing.Optional[dict[str, CfnPlaybackConfigurationDef]] = pydantic.Field(None)
    CfnPlaybackConfigurationProps: typing.Optional[dict[str, CfnPlaybackConfigurationPropsDef]] = pydantic.Field(None)
    ...
