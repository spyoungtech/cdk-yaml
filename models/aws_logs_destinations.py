from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_logs_destinations.KinesisDestination
class KinesisDestinationDef(BaseClass):
    stream: typing.Union[models.aws_kinesis.StreamDef] = pydantic.Field(..., description='The Kinesis stream to use as destination.')
    role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description='The role to assume to write log events to the destination. Default: - A new Role is created')
    _init_params: typing.ClassVar[list[str]] = ['stream', 'role']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_logs_destinations.KinesisDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[KinesisDestinationDefConfig] = pydantic.Field(None)


class KinesisDestinationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[KinesisDestinationDefBindParams]] = pydantic.Field(None, description='Return the properties required to send subscription events to this destination.\nIf necessary, the destination can use the properties of the SubscriptionFilter\nobject itself to configure its permissions to allow the subscription to write\nto it.\n\nThe destination may reconfigure its own permissions in response to this\nfunction call.')

class KinesisDestinationDefBindParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    _source_log_group: typing.Union[models.aws_logs.LogGroupDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_logs_destinations.LambdaDestination
class LambdaDestinationDef(BaseClass):
    fn: typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(..., description='-\n')
    add_permissions: typing.Optional[bool] = pydantic.Field(None, description='Whether or not to add Lambda Permissions. Default: true')
    _init_params: typing.ClassVar[list[str]] = ['fn', 'add_permissions']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_logs_destinations.LambdaDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[LambdaDestinationDefConfig] = pydantic.Field(None)


class LambdaDestinationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[LambdaDestinationDefBindParams]] = pydantic.Field(None, description='Return the properties required to send subscription events to this destination.\nIf necessary, the destination can use the properties of the SubscriptionFilter\nobject itself to configure its permissions to allow the subscription to write\nto it.\n\nThe destination may reconfigure its own permissions in response to this\nfunction call.')

class LambdaDestinationDefBindParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    log_group: typing.Union[models.aws_logs.LogGroupDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_logs_destinations.KinesisDestinationProps
class KinesisDestinationPropsDef(BaseStruct):
    role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description='The role to assume to write log events to the destination. Default: - A new Role is created\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iam as iam\n    from aws_cdk import aws_logs_destinations as logs_destinations\n\n    # role: iam.Role\n\n    kinesis_destination_props = logs_destinations.KinesisDestinationProps(\n        role=role\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_logs_destinations.KinesisDestinationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_logs_destinations.LambdaDestinationOptions
class LambdaDestinationOptionsDef(BaseStruct):
    add_permissions: typing.Optional[bool] = pydantic.Field(None, description='Whether or not to add Lambda Permissions. Default: true\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_logs_destinations as logs_destinations\n\n    lambda_destination_options = logs_destinations.LambdaDestinationOptions(\n        add_permissions=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['add_permissions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_logs_destinations.LambdaDestinationOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    KinesisDestination: typing.Optional[dict[str, KinesisDestinationDef]] = pydantic.Field(None)
    LambdaDestination: typing.Optional[dict[str, LambdaDestinationDef]] = pydantic.Field(None)
    KinesisDestinationProps: typing.Optional[dict[str, KinesisDestinationPropsDef]] = pydantic.Field(None)
    LambdaDestinationOptions: typing.Optional[dict[str, LambdaDestinationOptionsDef]] = pydantic.Field(None)
    ...
