from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_lex.CfnBot.AdvancedRecognitionSettingProperty
class CfnBot_AdvancedRecognitionSettingPropertyDef(BaseStruct):
    audio_recognition_strategy: typing.Optional[str] = pydantic.Field(None, description='Enables using the slot values as a custom vocabulary for recognizing user utterances.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-advancedrecognitionsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    advanced_recognition_setting_property = lex.CfnBot.AdvancedRecognitionSettingProperty(\n        audio_recognition_strategy="audioRecognitionStrategy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['audio_recognition_strategy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.AdvancedRecognitionSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.AllowedInputTypesProperty
class CfnBot_AllowedInputTypesPropertyDef(BaseStruct):
    allow_audio_input: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether audio input is allowed.\n')
    allow_dtmf_input: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether DTMF input is allowed.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-allowedinputtypes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    allowed_input_types_property = lex.CfnBot.AllowedInputTypesProperty(\n        allow_audio_input=False,\n        allow_dtmf_input=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allow_audio_input', 'allow_dtmf_input']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.AllowedInputTypesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.AudioAndDTMFInputSpecificationProperty
class CfnBot_AudioAndDTMFInputSpecificationPropertyDef(BaseStruct):
    start_timeout_ms: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.\n")
    audio_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AudioSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the settings on audio input.\n')
    dtmf_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DTMFSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the settings on DTMF input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-audioanddtmfinputspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    audio_and_dTMFInput_specification_property = lex.CfnBot.AudioAndDTMFInputSpecificationProperty(\n        start_timeout_ms=123,\n\n        # the properties below are optional\n        audio_specification=lex.CfnBot.AudioSpecificationProperty(\n            end_timeout_ms=123,\n            max_length_ms=123\n        ),\n        dtmf_specification=lex.CfnBot.DTMFSpecificationProperty(\n            deletion_character="deletionCharacter",\n            end_character="endCharacter",\n            end_timeout_ms=123,\n            max_length=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['start_timeout_ms', 'audio_specification', 'dtmf_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.AudioAndDTMFInputSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.AudioLogDestinationProperty
class CfnBot_AudioLogDestinationPropertyDef(BaseStruct):
    s3_bucket: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_S3BucketLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the Amazon S3 bucket where the audio files are stored.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-audiologdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    audio_log_destination_property = lex.CfnBot.AudioLogDestinationProperty(\n        s3_bucket=lex.CfnBot.S3BucketLogDestinationProperty(\n            log_prefix="logPrefix",\n            s3_bucket_arn="s3BucketArn",\n\n            # the properties below are optional\n            kms_key_arn="kmsKeyArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_bucket']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.AudioLogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.AudioLogSettingProperty
class CfnBot_AudioLogSettingPropertyDef(BaseStruct):
    destination: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_AudioLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the location of the audio log files collected when conversation logging is enabled for a bot.\n')
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines whether audio logging in enabled for the bot.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-audiologsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    audio_log_setting_property = lex.CfnBot.AudioLogSettingProperty(\n        destination=lex.CfnBot.AudioLogDestinationProperty(\n            s3_bucket=lex.CfnBot.S3BucketLogDestinationProperty(\n                log_prefix="logPrefix",\n                s3_bucket_arn="s3BucketArn",\n\n                # the properties below are optional\n                kms_key_arn="kmsKeyArn"\n            )\n        ),\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.AudioLogSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.AudioSpecificationProperty
class CfnBot_AudioSpecificationPropertyDef(BaseStruct):
    end_timeout_ms: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Time for which a bot waits after the customer stops speaking to assume the utterance is finished.\n')
    max_length_ms: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-audiospecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    audio_specification_property = lex.CfnBot.AudioSpecificationProperty(\n        end_timeout_ms=123,\n        max_length_ms=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end_timeout_ms', 'max_length_ms']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.AudioSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.BotAliasLocaleSettingsItemProperty
class CfnBot_BotAliasLocaleSettingsItemPropertyDef(BaseStruct):
    bot_alias_locale_setting: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_BotAliasLocaleSettingsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies locale settings for a locale.\n')
    locale_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the locale that the settings apply to.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-botaliaslocalesettingsitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    bot_alias_locale_settings_item_property = lex.CfnBot.BotAliasLocaleSettingsItemProperty(\n        bot_alias_locale_setting=lex.CfnBot.BotAliasLocaleSettingsProperty(\n            enabled=False,\n\n            # the properties below are optional\n            code_hook_specification=lex.CfnBot.CodeHookSpecificationProperty(\n                lambda_code_hook=lex.CfnBot.LambdaCodeHookProperty(\n                    code_hook_interface_version="codeHookInterfaceVersion",\n                    lambda_arn="lambdaArn"\n                )\n            )\n        ),\n        locale_id="localeId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bot_alias_locale_setting', 'locale_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.BotAliasLocaleSettingsItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.BotAliasLocaleSettingsProperty
class CfnBot_BotAliasLocaleSettingsPropertyDef(BaseStruct):
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description="Determines whether the locale is enabled for the bot. If the value is ``false`` , the locale isn't available for use.\n")
    code_hook_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_CodeHookSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the Lambda function that should be used in the locale.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-botaliaslocalesettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    bot_alias_locale_settings_property = lex.CfnBot.BotAliasLocaleSettingsProperty(\n        enabled=False,\n\n        # the properties below are optional\n        code_hook_specification=lex.CfnBot.CodeHookSpecificationProperty(\n            lambda_code_hook=lex.CfnBot.LambdaCodeHookProperty(\n                code_hook_interface_version="codeHookInterfaceVersion",\n                lambda_arn="lambdaArn"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'code_hook_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.BotAliasLocaleSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.BotLocaleProperty
class CfnBot_BotLocalePropertyDef(BaseStruct):
    locale_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales.\n')
    nlu_confidence_threshold: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines the threshold where Amazon Lex will insert the ``AMAZON.FallbackIntent`` , ``AMAZON.KendraSearchIntent`` , or both when returning alternative intents. You must configure an ``AMAZON.FallbackIntent`` . ``AMAZON.KendraSearchIntent`` is only inserted if it is configured for the bot.\n')
    custom_vocabulary: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_CustomVocabularyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a custom vocabulary to use with a specific locale.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the bot locale. Use this to help identify the bot locale in lists.\n')
    intents: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_IntentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more intents defined for the locale.\n')
    slot_types: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotTypePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more slot types defined for the locale.\n')
    voice_settings: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_VoiceSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines settings for using an Amazon Polly voice to communicate with a user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-botlocale.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['locale_id', 'nlu_confidence_threshold', 'custom_vocabulary', 'description', 'intents', 'slot_types', 'voice_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.BotLocaleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ButtonProperty
class CfnBot_ButtonPropertyDef(BaseStruct):
    text: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-button.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    button_property = lex.CfnBot.ButtonProperty(\n        text="text",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['text', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ButtonProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.CloudWatchLogGroupLogDestinationProperty
class CfnBot_CloudWatchLogGroupLogDestinationPropertyDef(BaseStruct):
    cloud_watch_log_group_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the log group where text and metadata logs are delivered.\n')
    log_prefix: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The prefix of the log stream name within the log group that you specified.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-cloudwatchloggrouplogdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    cloud_watch_log_group_log_destination_property = lex.CfnBot.CloudWatchLogGroupLogDestinationProperty(\n        cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n        log_prefix="logPrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_log_group_arn', 'log_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.CloudWatchLogGroupLogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.CodeHookSpecificationProperty
class CfnBot_CodeHookSpecificationPropertyDef(BaseStruct):
    lambda_code_hook: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_LambdaCodeHookPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies a Lambda function that verifies requests to a bot or fulfills the user\'s request to a bot.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-codehookspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    code_hook_specification_property = lex.CfnBot.CodeHookSpecificationProperty(\n        lambda_code_hook=lex.CfnBot.LambdaCodeHookProperty(\n            code_hook_interface_version="codeHookInterfaceVersion",\n            lambda_arn="lambdaArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_code_hook']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.CodeHookSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ConditionalBranchProperty
class CfnBot_ConditionalBranchPropertyDef(BaseStruct):
    condition: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_ConditionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="Contains the expression to evaluate. If the condition is true, the branch's actions are taken.\n")
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the branch.\n')
    next_step: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The next step in the conversation.\n')
    response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-conditionalbranch.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # slot_value_override_property_: lex.CfnBot.SlotValueOverrideProperty\n\n    conditional_branch_property = lex.CfnBot.ConditionalBranchProperty(\n        condition=lex.CfnBot.ConditionProperty(\n            expression_string="expressionString"\n        ),\n        name="name",\n        next_step=lex.CfnBot.DialogStateProperty(\n            dialog_action=lex.CfnBot.DialogActionProperty(\n                type="type",\n\n                # the properties below are optional\n                slot_to_elicit="slotToElicit",\n                suppress_next_message=False\n            ),\n            intent=lex.CfnBot.IntentOverrideProperty(\n                name="name",\n                slots=[lex.CfnBot.SlotValueOverrideMapProperty(\n                    slot_name="slotName",\n                    slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n                        shape="shape",\n                        value=lex.CfnBot.SlotValueProperty(\n                            interpreted_value="interpretedValue"\n                        ),\n                        values=[slot_value_override_property_]\n                    )\n                )]\n            ),\n            session_attributes=[lex.CfnBot.SessionAttributeProperty(\n                key="key",\n\n                # the properties below are optional\n                value="value"\n            )]\n        ),\n\n        # the properties below are optional\n        response=lex.CfnBot.ResponseSpecificationProperty(\n            message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                message=lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                ),\n\n                # the properties below are optional\n                variations=[lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                )]\n            )],\n\n            # the properties below are optional\n            allow_interrupt=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['condition', 'name', 'next_step', 'response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ConditionalBranchProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ConditionalSpecificationProperty
class CfnBot_ConditionalSpecificationPropertyDef(BaseStruct):
    conditional_branches: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalBranchPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.\n')
    default_branch: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_DefaultConditionalBranchPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.\n')
    is_active: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines whether a conditional branch is active. When ``IsActive`` is false, the conditions are not evaluated.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-conditionalspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # slot_value_override_property_: lex.CfnBot.SlotValueOverrideProperty\n\n    conditional_specification_property = lex.CfnBot.ConditionalSpecificationProperty(\n        conditional_branches=[lex.CfnBot.ConditionalBranchProperty(\n            condition=lex.CfnBot.ConditionProperty(\n                expression_string="expressionString"\n            ),\n            name="name",\n            next_step=lex.CfnBot.DialogStateProperty(\n                dialog_action=lex.CfnBot.DialogActionProperty(\n                    type="type",\n\n                    # the properties below are optional\n                    slot_to_elicit="slotToElicit",\n                    suppress_next_message=False\n                ),\n                intent=lex.CfnBot.IntentOverrideProperty(\n                    name="name",\n                    slots=[lex.CfnBot.SlotValueOverrideMapProperty(\n                        slot_name="slotName",\n                        slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n                            shape="shape",\n                            value=lex.CfnBot.SlotValueProperty(\n                                interpreted_value="interpretedValue"\n                            ),\n                            values=[slot_value_override_property_]\n                        )\n                    )]\n                ),\n                session_attributes=[lex.CfnBot.SessionAttributeProperty(\n                    key="key",\n\n                    # the properties below are optional\n                    value="value"\n                )]\n            ),\n\n            # the properties below are optional\n            response=lex.CfnBot.ResponseSpecificationProperty(\n                message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                    message=lex.CfnBot.MessageProperty(\n                        custom_payload=lex.CfnBot.CustomPayloadProperty(\n                            value="value"\n                        ),\n                        image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                            title="title",\n\n                            # the properties below are optional\n                            buttons=[lex.CfnBot.ButtonProperty(\n                                text="text",\n                                value="value"\n                            )],\n                            image_url="imageUrl",\n                            subtitle="subtitle"\n                        ),\n                        plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                            value="value"\n                        ),\n                        ssml_message=lex.CfnBot.SSMLMessageProperty(\n                            value="value"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    variations=[lex.CfnBot.MessageProperty(\n                        custom_payload=lex.CfnBot.CustomPayloadProperty(\n                            value="value"\n                        ),\n                        image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                            title="title",\n\n                            # the properties below are optional\n                            buttons=[lex.CfnBot.ButtonProperty(\n                                text="text",\n                                value="value"\n                            )],\n                            image_url="imageUrl",\n                            subtitle="subtitle"\n                        ),\n                        plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                            value="value"\n                        ),\n                        ssml_message=lex.CfnBot.SSMLMessageProperty(\n                            value="value"\n                        )\n                    )]\n                )],\n\n                # the properties below are optional\n                allow_interrupt=False\n            )\n        )],\n        default_branch=lex.CfnBot.DefaultConditionalBranchProperty(\n            next_step=lex.CfnBot.DialogStateProperty(\n                dialog_action=lex.CfnBot.DialogActionProperty(\n                    type="type",\n\n                    # the properties below are optional\n                    slot_to_elicit="slotToElicit",\n                    suppress_next_message=False\n                ),\n                intent=lex.CfnBot.IntentOverrideProperty(\n                    name="name",\n                    slots=[lex.CfnBot.SlotValueOverrideMapProperty(\n                        slot_name="slotName",\n                        slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n                            shape="shape",\n                            value=lex.CfnBot.SlotValueProperty(\n                                interpreted_value="interpretedValue"\n                            ),\n                            values=[slot_value_override_property_]\n                        )\n                    )]\n                ),\n                session_attributes=[lex.CfnBot.SessionAttributeProperty(\n                    key="key",\n\n                    # the properties below are optional\n                    value="value"\n                )]\n            ),\n            response=lex.CfnBot.ResponseSpecificationProperty(\n                message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                    message=lex.CfnBot.MessageProperty(\n                        custom_payload=lex.CfnBot.CustomPayloadProperty(\n                            value="value"\n                        ),\n                        image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                            title="title",\n\n                            # the properties below are optional\n                            buttons=[lex.CfnBot.ButtonProperty(\n                                text="text",\n                                value="value"\n                            )],\n                            image_url="imageUrl",\n                            subtitle="subtitle"\n                        ),\n                        plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                            value="value"\n                        ),\n                        ssml_message=lex.CfnBot.SSMLMessageProperty(\n                            value="value"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    variations=[lex.CfnBot.MessageProperty(\n                        custom_payload=lex.CfnBot.CustomPayloadProperty(\n                            value="value"\n                        ),\n                        image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                            title="title",\n\n                            # the properties below are optional\n                            buttons=[lex.CfnBot.ButtonProperty(\n                                text="text",\n                                value="value"\n                            )],\n                            image_url="imageUrl",\n                            subtitle="subtitle"\n                        ),\n                        plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                            value="value"\n                        ),\n                        ssml_message=lex.CfnBot.SSMLMessageProperty(\n                            value="value"\n                        )\n                    )]\n                )],\n\n                # the properties below are optional\n                allow_interrupt=False\n            )\n        ),\n        is_active=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['conditional_branches', 'default_branch', 'is_active']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ConditionalSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ConditionProperty
class CfnBot_ConditionPropertyDef(BaseStruct):
    expression_string: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The expression string that is evaluated.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-condition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    condition_property = lex.CfnBot.ConditionProperty(\n        expression_string="expressionString"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['expression_string']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ConversationLogSettingsProperty
class CfnBot_ConversationLogSettingsPropertyDef(BaseStruct):
    audio_log_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AudioLogSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon S3 settings for logging audio to an S3 bucket.\n')
    text_log_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_TextLogSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon CloudWatch Logs settings for logging text and metadata.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-conversationlogsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    conversation_log_settings_property = lex.CfnBot.ConversationLogSettingsProperty(\n        audio_log_settings=[lex.CfnBot.AudioLogSettingProperty(\n            destination=lex.CfnBot.AudioLogDestinationProperty(\n                s3_bucket=lex.CfnBot.S3BucketLogDestinationProperty(\n                    log_prefix="logPrefix",\n                    s3_bucket_arn="s3BucketArn",\n\n                    # the properties below are optional\n                    kms_key_arn="kmsKeyArn"\n                )\n            ),\n            enabled=False\n        )],\n        text_log_settings=[lex.CfnBot.TextLogSettingProperty(\n            destination=lex.CfnBot.TextLogDestinationProperty(\n                cloud_watch=lex.CfnBot.CloudWatchLogGroupLogDestinationProperty(\n                    cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n                    log_prefix="logPrefix"\n                )\n            ),\n            enabled=False\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['audio_log_settings', 'text_log_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ConversationLogSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.CustomPayloadProperty
class CfnBot_CustomPayloadPropertyDef(BaseStruct):
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The string that is sent to your application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-custompayload.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    custom_payload_property = lex.CfnBot.CustomPayloadProperty(\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.CustomPayloadProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.CustomVocabularyItemProperty
class CfnBot_CustomVocabularyItemPropertyDef(BaseStruct):
    phrase: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies 1 - 4 words that should be recognized.\n')
    display_as: typing.Optional[str] = pydantic.Field(None, description='The DisplayAs value for the custom vocabulary item from the custom vocabulary list.\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the degree to which the phrase recognition is boosted. The default value is 1.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-customvocabularyitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    custom_vocabulary_item_property = lex.CfnBot.CustomVocabularyItemProperty(\n        phrase="phrase",\n\n        # the properties below are optional\n        display_as="displayAs",\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['phrase', 'display_as', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.CustomVocabularyItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.CustomVocabularyProperty
class CfnBot_CustomVocabularyPropertyDef(BaseStruct):
    custom_vocabulary_items: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_CustomVocabularyItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies a list of words that you expect to be used during a conversation with your bot.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-customvocabulary.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    custom_vocabulary_property = lex.CfnBot.CustomVocabularyProperty(\n        custom_vocabulary_items=[lex.CfnBot.CustomVocabularyItemProperty(\n            phrase="phrase",\n\n            # the properties below are optional\n            display_as="displayAs",\n            weight=123\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_vocabulary_items']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.CustomVocabularyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.DataPrivacyProperty
class CfnBot_DataPrivacyPropertyDef(BaseStruct):
    child_directed: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description="For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying ``true`` or ``false`` in the ``childDirected`` field. By specifying ``true`` in the ``childDirected`` field, you confirm that your use of Amazon Lex *is* related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying ``false`` in the ``childDirected`` field, you confirm that your use of Amazon Lex *is not* related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the ``childDirected`` field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the `Amazon Lex FAQ <https://docs.aws.amazon.com/lex/faqs#data-security>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-dataprivacy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    data_privacy_property = lex.CfnBot.DataPrivacyProperty(\n        child_directed=False\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['child_directed']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.DataPrivacyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.DefaultConditionalBranchProperty
class CfnBot_DefaultConditionalBranchPropertyDef(BaseStruct):
    next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The next step in the conversation.\n')
    response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-defaultconditionalbranch.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # slot_value_override_property_: lex.CfnBot.SlotValueOverrideProperty\n\n    default_conditional_branch_property = lex.CfnBot.DefaultConditionalBranchProperty(\n        next_step=lex.CfnBot.DialogStateProperty(\n            dialog_action=lex.CfnBot.DialogActionProperty(\n                type="type",\n\n                # the properties below are optional\n                slot_to_elicit="slotToElicit",\n                suppress_next_message=False\n            ),\n            intent=lex.CfnBot.IntentOverrideProperty(\n                name="name",\n                slots=[lex.CfnBot.SlotValueOverrideMapProperty(\n                    slot_name="slotName",\n                    slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n                        shape="shape",\n                        value=lex.CfnBot.SlotValueProperty(\n                            interpreted_value="interpretedValue"\n                        ),\n                        values=[slot_value_override_property_]\n                    )\n                )]\n            ),\n            session_attributes=[lex.CfnBot.SessionAttributeProperty(\n                key="key",\n\n                # the properties below are optional\n                value="value"\n            )]\n        ),\n        response=lex.CfnBot.ResponseSpecificationProperty(\n            message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                message=lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                ),\n\n                # the properties below are optional\n                variations=[lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                )]\n            )],\n\n            # the properties below are optional\n            allow_interrupt=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['next_step', 'response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.DefaultConditionalBranchProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.DialogActionProperty
class CfnBot_DialogActionPropertyDef(BaseStruct):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The action that the bot should execute.\n')
    slot_to_elicit: typing.Optional[str] = pydantic.Field(None, description='If the dialog action is ``ElicitSlot`` , defines the slot to elicit from the user.\n')
    suppress_next_message: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='When true the next message for the intent is not used.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-dialogaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    dialog_action_property = lex.CfnBot.DialogActionProperty(\n        type="type",\n\n        # the properties below are optional\n        slot_to_elicit="slotToElicit",\n        suppress_next_message=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'slot_to_elicit', 'suppress_next_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.DialogActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.DialogCodeHookInvocationSettingProperty
class CfnBot_DialogCodeHookInvocationSettingPropertyDef(BaseStruct):
    enable_code_hook_invocation: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether a Lambda function should be invoked for the dialog.\n')
    is_active: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines whether a dialog code hook is used when the intent is activated.\n')
    post_code_hook_specification: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_PostDialogCodeHookInvocationSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Contains the responses and actions that Amazon Lex takes after the Lambda function is complete.\n')
    invocation_label: typing.Optional[str] = pydantic.Field(None, description='A label that indicates the dialog step from which the dialog code hook is happening.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-dialogcodehookinvocationsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_code_hook_invocation', 'is_active', 'post_code_hook_specification', 'invocation_label']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.DialogCodeHookInvocationSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.DialogCodeHookSettingProperty
class CfnBot_DialogCodeHookSettingPropertyDef(BaseStruct):
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Enables the dialog code hook so that it processes user requests.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-dialogcodehooksetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    dialog_code_hook_setting_property = lex.CfnBot.DialogCodeHookSettingProperty(\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.DialogCodeHookSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.DialogStateProperty
class CfnBot_DialogStatePropertyDef(BaseStruct):
    dialog_action: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines the action that the bot executes at runtime when the conversation reaches this step.\n')
    intent: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_IntentOverridePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Override settings to configure the intent state.\n')
    session_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SessionAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-dialogstate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # slot_value_override_property_: lex.CfnBot.SlotValueOverrideProperty\n\n    dialog_state_property = lex.CfnBot.DialogStateProperty(\n        dialog_action=lex.CfnBot.DialogActionProperty(\n            type="type",\n\n            # the properties below are optional\n            slot_to_elicit="slotToElicit",\n            suppress_next_message=False\n        ),\n        intent=lex.CfnBot.IntentOverrideProperty(\n            name="name",\n            slots=[lex.CfnBot.SlotValueOverrideMapProperty(\n                slot_name="slotName",\n                slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n                    shape="shape",\n                    value=lex.CfnBot.SlotValueProperty(\n                        interpreted_value="interpretedValue"\n                    ),\n                    values=[slot_value_override_property_]\n                )\n            )]\n        ),\n        session_attributes=[lex.CfnBot.SessionAttributeProperty(\n            key="key",\n\n            # the properties below are optional\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dialog_action', 'intent', 'session_attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.DialogStateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.DTMFSpecificationProperty
class CfnBot_DTMFSpecificationPropertyDef(BaseStruct):
    deletion_character: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The DTMF character that clears the accumulated DTMF digits and immediately ends the input.\n')
    end_character: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.\n')
    end_timeout_ms: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='How long the bot should wait after the last DTMF character input before assuming that the input has concluded.\n')
    max_length: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The maximum number of DTMF digits allowed in an utterance.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-dtmfspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    d_tMFSpecification_property = lex.CfnBot.DTMFSpecificationProperty(\n        deletion_character="deletionCharacter",\n        end_character="endCharacter",\n        end_timeout_ms=123,\n        max_length=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['deletion_character', 'end_character', 'end_timeout_ms', 'max_length']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.DTMFSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ElicitationCodeHookInvocationSettingProperty
class CfnBot_ElicitationCodeHookInvocationSettingPropertyDef(BaseStruct):
    enable_code_hook_invocation: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether a Lambda function should be invoked for the dialog.\n')
    invocation_label: typing.Optional[str] = pydantic.Field(None, description='A label that indicates the dialog step from which the dialog code hook is happening.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-elicitationcodehookinvocationsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    elicitation_code_hook_invocation_setting_property = lex.CfnBot.ElicitationCodeHookInvocationSettingProperty(\n        enable_code_hook_invocation=False,\n\n        # the properties below are optional\n        invocation_label="invocationLabel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_code_hook_invocation', 'invocation_label']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ElicitationCodeHookInvocationSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ExternalSourceSettingProperty
class CfnBot_ExternalSourceSettingPropertyDef(BaseStruct):
    grammar_slot_type_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_GrammarSlotTypeSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Settings required for a slot type based on a grammar that you provide.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-externalsourcesetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    external_source_setting_property = lex.CfnBot.ExternalSourceSettingProperty(\n        grammar_slot_type_setting=lex.CfnBot.GrammarSlotTypeSettingProperty(\n            source=lex.CfnBot.GrammarSlotTypeSourceProperty(\n                s3_bucket_name="s3BucketName",\n                s3_object_key="s3ObjectKey",\n\n                # the properties below are optional\n                kms_key_arn="kmsKeyArn"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['grammar_slot_type_setting']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ExternalSourceSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.FulfillmentCodeHookSettingProperty
class CfnBot_FulfillmentCodeHookSettingPropertyDef(BaseStruct):
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether a Lambda function should be invoked to fulfill a specific intent.\n')
    fulfillment_updates_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_FulfillmentUpdatesSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.\n')
    is_active: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Determines whether the fulfillment code hook is used. When ``active`` is false, the code hook doesn't run.\n")
    post_fulfillment_status_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PostFulfillmentStatusSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-fulfillmentcodehooksetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'fulfillment_updates_specification', 'is_active', 'post_fulfillment_status_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.FulfillmentCodeHookSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.FulfillmentStartResponseSpecificationProperty
class CfnBot_FulfillmentStartResponseSpecificationPropertyDef(BaseStruct):
    delay_in_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.\n")
    message_groups: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='1 - 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user.\n')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Determines whether the user can interrupt the start message while it is playing.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-fulfillmentstartresponsespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    fulfillment_start_response_specification_property = lex.CfnBot.FulfillmentStartResponseSpecificationProperty(\n        delay_in_seconds=123,\n        message_groups=[lex.CfnBot.MessageGroupProperty(\n            message=lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            ),\n\n            # the properties below are optional\n            variations=[lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            )]\n        )],\n\n        # the properties below are optional\n        allow_interrupt=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delay_in_seconds', 'message_groups', 'allow_interrupt']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.FulfillmentStartResponseSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.FulfillmentUpdateResponseSpecificationProperty
class CfnBot_FulfillmentUpdateResponseSpecificationPropertyDef(BaseStruct):
    frequency_in_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.\n')
    message_groups: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='1 - 5 message groups that contain update messages. Amazon Lex chooses one of the messages to play to the user.\n')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Determines whether the user can interrupt an update message while it is playing.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-fulfillmentupdateresponsespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    fulfillment_update_response_specification_property = lex.CfnBot.FulfillmentUpdateResponseSpecificationProperty(\n        frequency_in_seconds=123,\n        message_groups=[lex.CfnBot.MessageGroupProperty(\n            message=lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            ),\n\n            # the properties below are optional\n            variations=[lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            )]\n        )],\n\n        # the properties below are optional\n        allow_interrupt=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['frequency_in_seconds', 'message_groups', 'allow_interrupt']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.FulfillmentUpdateResponseSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.FulfillmentUpdatesSpecificationProperty
class CfnBot_FulfillmentUpdatesSpecificationPropertyDef(BaseStruct):
    active: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent. If the ``active`` field is set to true, the ``startResponse`` , ``updateResponse`` , and ``timeoutInSeconds`` fields are required.\n')
    start_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_FulfillmentStartResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides configuration information for the message sent to users when the fulfillment Lambda functions starts running.\n')
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The length of time that the fulfillment Lambda function should run before it times out.\n')
    update_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_FulfillmentUpdateResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides configuration information for messages sent periodically to the user while the fulfillment Lambda function is running.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-fulfillmentupdatesspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    fulfillment_updates_specification_property = lex.CfnBot.FulfillmentUpdatesSpecificationProperty(\n        active=False,\n\n        # the properties below are optional\n        start_response=lex.CfnBot.FulfillmentStartResponseSpecificationProperty(\n            delay_in_seconds=123,\n            message_groups=[lex.CfnBot.MessageGroupProperty(\n                message=lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                ),\n\n                # the properties below are optional\n                variations=[lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                )]\n            )],\n\n            # the properties below are optional\n            allow_interrupt=False\n        ),\n        timeout_in_seconds=123,\n        update_response=lex.CfnBot.FulfillmentUpdateResponseSpecificationProperty(\n            frequency_in_seconds=123,\n            message_groups=[lex.CfnBot.MessageGroupProperty(\n                message=lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                ),\n\n                # the properties below are optional\n                variations=[lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                )]\n            )],\n\n            # the properties below are optional\n            allow_interrupt=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['active', 'start_response', 'timeout_in_seconds', 'update_response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.FulfillmentUpdatesSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.GrammarSlotTypeSettingProperty
class CfnBot_GrammarSlotTypeSettingPropertyDef(BaseStruct):
    source: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_GrammarSlotTypeSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The source of the grammar used to create the slot type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-grammarslottypesetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    grammar_slot_type_setting_property = lex.CfnBot.GrammarSlotTypeSettingProperty(\n        source=lex.CfnBot.GrammarSlotTypeSourceProperty(\n            s3_bucket_name="s3BucketName",\n            s3_object_key="s3ObjectKey",\n\n            # the properties below are optional\n            kms_key_arn="kmsKeyArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.GrammarSlotTypeSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.GrammarSlotTypeSourceProperty
class CfnBot_GrammarSlotTypeSourcePropertyDef(BaseStruct):
    s3_bucket_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon S3 bucket that contains the grammar source.\n')
    s3_object_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The path to the grammar in the Amazon S3 bucket.\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='The AWS KMS key required to decrypt the contents of the grammar, if any.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-grammarslottypesource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    grammar_slot_type_source_property = lex.CfnBot.GrammarSlotTypeSourceProperty(\n        s3_bucket_name="s3BucketName",\n        s3_object_key="s3ObjectKey",\n\n        # the properties below are optional\n        kms_key_arn="kmsKeyArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_bucket_name', 's3_object_key', 'kms_key_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.GrammarSlotTypeSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ImageResponseCardProperty
class CfnBot_ImageResponseCardPropertyDef(BaseStruct):
    title: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n')
    buttons: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ButtonPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n')
    image_url: typing.Optional[str] = pydantic.Field(None, description='The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n')
    subtitle: typing.Optional[str] = pydantic.Field(None, description='The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-imageresponsecard.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    image_response_card_property = lex.CfnBot.ImageResponseCardProperty(\n        title="title",\n\n        # the properties below are optional\n        buttons=[lex.CfnBot.ButtonProperty(\n            text="text",\n            value="value"\n        )],\n        image_url="imageUrl",\n        subtitle="subtitle"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['title', 'buttons', 'image_url', 'subtitle']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ImageResponseCardProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.InitialResponseSettingProperty
class CfnBot_InitialResponseSettingPropertyDef(BaseStruct):
    code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.\n')
    conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.\n')
    initial_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond the user input.\n')
    next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The next step in the conversation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-initialresponsesetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['code_hook', 'conditional', 'initial_response', 'next_step']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.InitialResponseSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.InputContextProperty
class CfnBot_InputContextPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the context.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-inputcontext.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    input_context_property = lex.CfnBot.InputContextProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.InputContextProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.IntentClosingSettingProperty
class CfnBot_IntentClosingSettingPropertyDef(BaseStruct):
    closing_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The response that Amazon Lex sends to the user when the intent is complete.\n')
    conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A list of conditional branches associated with the intent's closing response. These branches are executed when the ``nextStep`` attribute is set to ``EvalutateConditional`` .\n")
    is_active: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the ``IsActive`` field isn't specified, the default is true.\n")
    next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step that the bot executes after playing the intent\'s closing response.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-intentclosingsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # slot_value_override_property_: lex.CfnBot.SlotValueOverrideProperty\n\n    intent_closing_setting_property = lex.CfnBot.IntentClosingSettingProperty(\n        closing_response=lex.CfnBot.ResponseSpecificationProperty(\n            message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                message=lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                ),\n\n                # the properties below are optional\n                variations=[lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                )]\n            )],\n\n            # the properties below are optional\n            allow_interrupt=False\n        ),\n        conditional=lex.CfnBot.ConditionalSpecificationProperty(\n            conditional_branches=[lex.CfnBot.ConditionalBranchProperty(\n                condition=lex.CfnBot.ConditionProperty(\n                    expression_string="expressionString"\n                ),\n                name="name",\n                next_step=lex.CfnBot.DialogStateProperty(\n                    dialog_action=lex.CfnBot.DialogActionProperty(\n                        type="type",\n\n                        # the properties below are optional\n                        slot_to_elicit="slotToElicit",\n                        suppress_next_message=False\n                    ),\n                    intent=lex.CfnBot.IntentOverrideProperty(\n                        name="name",\n                        slots=[lex.CfnBot.SlotValueOverrideMapProperty(\n                            slot_name="slotName",\n                            slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n                                shape="shape",\n                                value=lex.CfnBot.SlotValueProperty(\n                                    interpreted_value="interpretedValue"\n                                ),\n                                values=[slot_value_override_property_]\n                            )\n                        )]\n                    ),\n                    session_attributes=[lex.CfnBot.SessionAttributeProperty(\n                        key="key",\n\n                        # the properties below are optional\n                        value="value"\n                    )]\n                ),\n\n                # the properties below are optional\n                response=lex.CfnBot.ResponseSpecificationProperty(\n                    message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                        message=lex.CfnBot.MessageProperty(\n                            custom_payload=lex.CfnBot.CustomPayloadProperty(\n                                value="value"\n                            ),\n                            image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                                title="title",\n\n                                # the properties below are optional\n                                buttons=[lex.CfnBot.ButtonProperty(\n                                    text="text",\n                                    value="value"\n                                )],\n                                image_url="imageUrl",\n                                subtitle="subtitle"\n                            ),\n                            plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                                value="value"\n                            ),\n                            ssml_message=lex.CfnBot.SSMLMessageProperty(\n                                value="value"\n                            )\n                        ),\n\n                        # the properties below are optional\n                        variations=[lex.CfnBot.MessageProperty(\n                            custom_payload=lex.CfnBot.CustomPayloadProperty(\n                                value="value"\n                            ),\n                            image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                                title="title",\n\n                                # the properties below are optional\n                                buttons=[lex.CfnBot.ButtonProperty(\n                                    text="text",\n                                    value="value"\n                                )],\n                                image_url="imageUrl",\n                                subtitle="subtitle"\n                            ),\n                            plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                                value="value"\n                            ),\n                            ssml_message=lex.CfnBot.SSMLMessageProperty(\n                                value="value"\n                            )\n                        )]\n                    )],\n\n                    # the properties below are optional\n                    allow_interrupt=False\n                )\n            )],\n            default_branch=lex.CfnBot.DefaultConditionalBranchProperty(\n                next_step=lex.CfnBot.DialogStateProperty(\n                    dialog_action=lex.CfnBot.DialogActionProperty(\n                        type="type",\n\n                        # the properties below are optional\n                        slot_to_elicit="slotToElicit",\n                        suppress_next_message=False\n                    ),\n                    intent=lex.CfnBot.IntentOverrideProperty(\n                        name="name",\n                        slots=[lex.CfnBot.SlotValueOverrideMapProperty(\n                            slot_name="slotName",\n                            slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n                                shape="shape",\n                                value=lex.CfnBot.SlotValueProperty(\n                                    interpreted_value="interpretedValue"\n                                ),\n                                values=[slot_value_override_property_]\n                            )\n                        )]\n                    ),\n                    session_attributes=[lex.CfnBot.SessionAttributeProperty(\n                        key="key",\n\n                        # the properties below are optional\n                        value="value"\n                    )]\n                ),\n                response=lex.CfnBot.ResponseSpecificationProperty(\n                    message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                        message=lex.CfnBot.MessageProperty(\n                            custom_payload=lex.CfnBot.CustomPayloadProperty(\n                                value="value"\n                            ),\n                            image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                                title="title",\n\n                                # the properties below are optional\n                                buttons=[lex.CfnBot.ButtonProperty(\n                                    text="text",\n                                    value="value"\n                                )],\n                                image_url="imageUrl",\n                                subtitle="subtitle"\n                            ),\n                            plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                                value="value"\n                            ),\n                            ssml_message=lex.CfnBot.SSMLMessageProperty(\n                                value="value"\n                            )\n                        ),\n\n                        # the properties below are optional\n                        variations=[lex.CfnBot.MessageProperty(\n                            custom_payload=lex.CfnBot.CustomPayloadProperty(\n                                value="value"\n                            ),\n                            image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                                title="title",\n\n                                # the properties below are optional\n                                buttons=[lex.CfnBot.ButtonProperty(\n                                    text="text",\n                                    value="value"\n                                )],\n                                image_url="imageUrl",\n                                subtitle="subtitle"\n                            ),\n                            plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                                value="value"\n                            ),\n                            ssml_message=lex.CfnBot.SSMLMessageProperty(\n                                value="value"\n                            )\n                        )]\n                    )],\n\n                    # the properties below are optional\n                    allow_interrupt=False\n                )\n            ),\n            is_active=False\n        ),\n        is_active=False,\n        next_step=lex.CfnBot.DialogStateProperty(\n            dialog_action=lex.CfnBot.DialogActionProperty(\n                type="type",\n\n                # the properties below are optional\n                slot_to_elicit="slotToElicit",\n                suppress_next_message=False\n            ),\n            intent=lex.CfnBot.IntentOverrideProperty(\n                name="name",\n                slots=[lex.CfnBot.SlotValueOverrideMapProperty(\n                    slot_name="slotName",\n                    slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n                        shape="shape",\n                        value=lex.CfnBot.SlotValueProperty(\n                            interpreted_value="interpretedValue"\n                        ),\n                        values=[slot_value_override_property_]\n                    )\n                )]\n            ),\n            session_attributes=[lex.CfnBot.SessionAttributeProperty(\n                key="key",\n\n                # the properties below are optional\n                value="value"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['closing_response', 'conditional', 'is_active', 'next_step']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.IntentClosingSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.IntentConfirmationSettingProperty
class CfnBot_IntentConfirmationSettingPropertyDef(BaseStruct):
    prompt_specification: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_PromptSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Prompts the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the ``OrderPizza`` intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information.\n')
    code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The ``DialogCodeHookInvocationSetting`` object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is ``InvokeDialogCodeHook`` .\n")
    confirmation_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of conditional branches to evaluate after the intent is closed.\n')
    confirmation_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step that the bot executes when the customer confirms the intent.\n')
    confirmation_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond the user input.\n')
    declination_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of conditional branches to evaluate after the intent is declined.\n')
    declination_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step that the bot executes when the customer declines the intent.\n')
    declination_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='When the user answers "no" to the question defined in ``promptSpecification`` , Amazon Lex responds with this response to acknowledge that the intent was canceled.\n')
    elicitation_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ElicitationCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The ``DialogCodeHookInvocationSetting`` used when the code hook is invoked during confirmation prompt retries.\n')
    failure_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.\n')
    failure_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The next step to take in the conversation if the confirmation step fails.\n')
    failure_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond the user input when the intent confirmation fails.\n')
    is_active: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the ``IsActive`` field isn't specified, the default is true.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-intentconfirmationsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n")
    _init_params: typing.ClassVar[list[str]] = ['prompt_specification', 'code_hook', 'confirmation_conditional', 'confirmation_next_step', 'confirmation_response', 'declination_conditional', 'declination_next_step', 'declination_response', 'elicitation_code_hook', 'failure_conditional', 'failure_next_step', 'failure_response', 'is_active']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.IntentConfirmationSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.IntentOverrideProperty
class CfnBot_IntentOverridePropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description="The name of the intent. Only required when you're switching intents.\n")
    slots: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueOverrideMapPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren\'t overridden.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-intentoverride.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # slot_value_override_property_: lex.CfnBot.SlotValueOverrideProperty\n\n    intent_override_property = lex.CfnBot.IntentOverrideProperty(\n        name="name",\n        slots=[lex.CfnBot.SlotValueOverrideMapProperty(\n            slot_name="slotName",\n            slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n                shape="shape",\n                value=lex.CfnBot.SlotValueProperty(\n                    interpreted_value="interpretedValue"\n                ),\n                values=[slot_value_override_property_]\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'slots']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.IntentOverrideProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.IntentProperty
class CfnBot_IntentPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the intent. Intent names must be unique within the locale that contains the intent and can't match the name of any built-in intent.\n")
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the intent. Use the description to help identify the intent in lists.\n')
    dialog_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogCodeHookSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction.\n')
    fulfillment_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_FulfillmentCodeHookSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user.\n")
    initial_response_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_InitialResponseSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.\n')
    input_contexts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_InputContextPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of contexts that must be active for this intent to be considered by Amazon Lex .\n')
    intent_closing_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_IntentClosingSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sets the response that Amazon Lex sends to the user when the intent is closed.\n')
    intent_confirmation_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_IntentConfirmationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers "no," the settings contain a statement that is sent to the user to end the intent.\n')
    kendra_configuration: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_KendraConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Provides configuration information for the ``AMAZON.KendraSearchIntent`` intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.\n")
    output_contexts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_OutputContextPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of contexts that the intent activates when it is fulfilled.\n')
    parent_intent_signature: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the built-in intent to base this intent on.\n')
    sample_utterances: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SampleUtterancePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of utterances that a user might say to signal the intent.\n')
    slot_priorities: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotPriorityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Indicates the priority for slots. Amazon Lex prompts the user for slot values in priority order.\n')
    slots: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of slots that the intent requires for fulfillment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-intent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'description', 'dialog_code_hook', 'fulfillment_code_hook', 'initial_response_setting', 'input_contexts', 'intent_closing_setting', 'intent_confirmation_setting', 'kendra_configuration', 'output_contexts', 'parent_intent_signature', 'sample_utterances', 'slot_priorities', 'slots']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.IntentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.KendraConfigurationProperty
class CfnBot_KendraConfigurationPropertyDef(BaseStruct):
    kendra_index: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the ``AMAZON.KendraSearchIntent`` intent to search. The index must be in the same account and Region as the Amazon Lex bot.\n')
    query_filter_string: typing.Optional[str] = pydantic.Field(None, description='A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see `Filtering queries <https://docs.aws.amazon.com/kendra/latest/dg/filtering.html>`_ .\n')
    query_filter_string_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Determines whether the ``AMAZON.KendraSearchIntent`` intent uses a custom query string to query the Amazon Kendra index.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-kendraconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    kendra_configuration_property = lex.CfnBot.KendraConfigurationProperty(\n        kendra_index="kendraIndex",\n\n        # the properties below are optional\n        query_filter_string="queryFilterString",\n        query_filter_string_enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kendra_index', 'query_filter_string', 'query_filter_string_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.KendraConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.LambdaCodeHookProperty
class CfnBot_LambdaCodeHookPropertyDef(BaseStruct):
    code_hook_interface_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.\n')
    lambda_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the Lambda function.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-lambdacodehook.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    lambda_code_hook_property = lex.CfnBot.LambdaCodeHookProperty(\n        code_hook_interface_version="codeHookInterfaceVersion",\n        lambda_arn="lambdaArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['code_hook_interface_version', 'lambda_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.LambdaCodeHookProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.MessageGroupProperty
class CfnBot_MessageGroupPropertyDef(BaseStruct):
    message: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_MessagePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The primary message that Amazon Lex should send to the user.\n')
    variations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-messagegroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    message_group_property = lex.CfnBot.MessageGroupProperty(\n        message=lex.CfnBot.MessageProperty(\n            custom_payload=lex.CfnBot.CustomPayloadProperty(\n                value="value"\n            ),\n            image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                title="title",\n\n                # the properties below are optional\n                buttons=[lex.CfnBot.ButtonProperty(\n                    text="text",\n                    value="value"\n                )],\n                image_url="imageUrl",\n                subtitle="subtitle"\n            ),\n            plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                value="value"\n            ),\n            ssml_message=lex.CfnBot.SSMLMessageProperty(\n                value="value"\n            )\n        ),\n\n        # the properties below are optional\n        variations=[lex.CfnBot.MessageProperty(\n            custom_payload=lex.CfnBot.CustomPayloadProperty(\n                value="value"\n            ),\n            image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                title="title",\n\n                # the properties below are optional\n                buttons=[lex.CfnBot.ButtonProperty(\n                    text="text",\n                    value="value"\n                )],\n                image_url="imageUrl",\n                subtitle="subtitle"\n            ),\n            plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                value="value"\n            ),\n            ssml_message=lex.CfnBot.SSMLMessageProperty(\n                value="value"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['message', 'variations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.MessageGroupProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.MessageProperty
class CfnBot_MessagePropertyDef(BaseStruct):
    custom_payload: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_CustomPayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A message in a custom format defined by the client application.\n')
    image_response_card: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ImageResponseCardPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A message that defines a response card that the client application can show to the user.\n')
    plain_text_message: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PlainTextMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A message in plain text format.\n')
    ssml_message: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SSMLMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A message in Speech Synthesis Markup Language (SSML).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-message.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    message_property = lex.CfnBot.MessageProperty(\n        custom_payload=lex.CfnBot.CustomPayloadProperty(\n            value="value"\n        ),\n        image_response_card=lex.CfnBot.ImageResponseCardProperty(\n            title="title",\n\n            # the properties below are optional\n            buttons=[lex.CfnBot.ButtonProperty(\n                text="text",\n                value="value"\n            )],\n            image_url="imageUrl",\n            subtitle="subtitle"\n        ),\n        plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n            value="value"\n        ),\n        ssml_message=lex.CfnBot.SSMLMessageProperty(\n            value="value"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_payload', 'image_response_card', 'plain_text_message', 'ssml_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.MessageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.MultipleValuesSettingProperty
class CfnBot_MultipleValuesSettingPropertyDef(BaseStruct):
    allow_multiple_values: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether a slot can return multiple values. When ``true`` , the slot may return more than one value in a response. When ``false`` , the slot returns only a single value. Multi-value slots are only available in the en-US locale. If you set this value to ``true`` in any other locale, Amazon Lex throws a ``ValidationException`` . If the ``allowMutlipleValues`` is not set, the default value is ``false`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-multiplevaluessetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    multiple_values_setting_property = lex.CfnBot.MultipleValuesSettingProperty(\n        allow_multiple_values=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allow_multiple_values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.MultipleValuesSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ObfuscationSettingProperty
class CfnBot_ObfuscationSettingPropertyDef(BaseStruct):
    obfuscation_setting_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-obfuscationsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    obfuscation_setting_property = lex.CfnBot.ObfuscationSettingProperty(\n        obfuscation_setting_type="obfuscationSettingType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['obfuscation_setting_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ObfuscationSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.OutputContextProperty
class CfnBot_OutputContextPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the output context.\n')
    time_to_live_in_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.\n')
    turns_to_live: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-outputcontext.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    output_context_property = lex.CfnBot.OutputContextProperty(\n        name="name",\n        time_to_live_in_seconds=123,\n        turns_to_live=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'time_to_live_in_seconds', 'turns_to_live']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.OutputContextProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.PlainTextMessageProperty
class CfnBot_PlainTextMessagePropertyDef(BaseStruct):
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The message to send to the user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-plaintextmessage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    plain_text_message_property = lex.CfnBot.PlainTextMessageProperty(\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.PlainTextMessageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.PostDialogCodeHookInvocationSpecificationProperty
class CfnBot_PostDialogCodeHookInvocationSpecificationPropertyDef(BaseStruct):
    failure_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the ``State`` field of the ``Intent`` object set to ``Failed`` .\n')
    failure_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the ``State`` field of the ``Intent`` object set to ``Failed`` .\n')
    failure_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond the user input when the code hook fails.\n')
    success_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of conditional branches to evaluate after the dialog code hook finishes successfully.\n')
    success_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifics the next step the bot runs after the dialog code hook finishes successfully.\n')
    success_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond when the code hook succeeds.\n')
    timeout_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of conditional branches to evaluate if the code hook times out.\n')
    timeout_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step that the bot runs when the code hook times out.\n')
    timeout_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond to the user input when the code hook times out.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-postdialogcodehookinvocationspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['failure_conditional', 'failure_next_step', 'failure_response', 'success_conditional', 'success_next_step', 'success_response', 'timeout_conditional', 'timeout_next_step', 'timeout_response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.PostDialogCodeHookInvocationSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.PostFulfillmentStatusSpecificationProperty
class CfnBot_PostFulfillmentStatusSpecificationPropertyDef(BaseStruct):
    failure_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of conditional branches to evaluate after the fulfillment code hook throws an exception or returns with the ``State`` field of the ``Intent`` object set to ``Failed`` .\n')
    failure_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step the bot runs after the fulfillment code hook throws an exception or returns with the ``State`` field of the ``Intent`` object set to ``Failed`` .\n')
    failure_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies a list of message groups that Amazon Lex uses to respond when fulfillment isn't successful.\n")
    success_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of conditional branches to evaluate after the fulfillment code hook finishes successfully.\n')
    success_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step in the conversation that Amazon Lex invokes when the fulfillment code hook completes successfully.\n')
    success_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond when the fulfillment is successful.\n')
    timeout_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of conditional branches to evaluate if the fulfillment code hook times out.\n')
    timeout_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step that the bot runs when the fulfillment code hook times out.\n')
    timeout_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies a list of message groups that Amazon Lex uses to respond when fulfillment isn't completed within the timeout period.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-postfulfillmentstatusspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n")
    _init_params: typing.ClassVar[list[str]] = ['failure_conditional', 'failure_next_step', 'failure_response', 'success_conditional', 'success_next_step', 'success_response', 'timeout_conditional', 'timeout_next_step', 'timeout_response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.PostFulfillmentStatusSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.PromptAttemptSpecificationProperty
class CfnBot_PromptAttemptSpecificationPropertyDef(BaseStruct):
    allowed_input_types: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_AllowedInputTypesPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates the allowed input types of the prompt attempt.\n')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether the user can interrupt a speech prompt attempt from the bot.\n')
    audio_and_dtmf_input_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AudioAndDTMFInputSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the settings on audio and DTMF input.\n')
    text_input_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_TextInputSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the settings on text input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-promptattemptspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    prompt_attempt_specification_property = lex.CfnBot.PromptAttemptSpecificationProperty(\n        allowed_input_types=lex.CfnBot.AllowedInputTypesProperty(\n            allow_audio_input=False,\n            allow_dtmf_input=False\n        ),\n\n        # the properties below are optional\n        allow_interrupt=False,\n        audio_and_dtmf_input_specification=lex.CfnBot.AudioAndDTMFInputSpecificationProperty(\n            start_timeout_ms=123,\n\n            # the properties below are optional\n            audio_specification=lex.CfnBot.AudioSpecificationProperty(\n                end_timeout_ms=123,\n                max_length_ms=123\n            ),\n            dtmf_specification=lex.CfnBot.DTMFSpecificationProperty(\n                deletion_character="deletionCharacter",\n                end_character="endCharacter",\n                end_timeout_ms=123,\n                max_length=123\n            )\n        ),\n        text_input_specification=lex.CfnBot.TextInputSpecificationProperty(\n            start_timeout_ms=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allowed_input_types', 'allow_interrupt', 'audio_and_dtmf_input_specification', 'text_input_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.PromptAttemptSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.PromptSpecificationProperty
class CfnBot_PromptSpecificationPropertyDef(BaseStruct):
    max_retries: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The maximum number of times the bot tries to elicit a response from the user using this prompt.\n')
    message_groups_list: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A collection of messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime.\n')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether the user can interrupt a speech prompt from the bot.\n')
    message_selection_strategy: typing.Optional[str] = pydantic.Field(None, description='Indicates how a message is selected from a message group among retries.\n')
    prompt_attempts_specification: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PromptAttemptSpecificationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the advanced settings on each attempt of the prompt.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-promptspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    prompt_specification_property = lex.CfnBot.PromptSpecificationProperty(\n        max_retries=123,\n        message_groups_list=[lex.CfnBot.MessageGroupProperty(\n            message=lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            ),\n\n            # the properties below are optional\n            variations=[lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            )]\n        )],\n\n        # the properties below are optional\n        allow_interrupt=False,\n        message_selection_strategy="messageSelectionStrategy",\n        prompt_attempts_specification={\n            "prompt_attempts_specification_key": lex.CfnBot.PromptAttemptSpecificationProperty(\n                allowed_input_types=lex.CfnBot.AllowedInputTypesProperty(\n                    allow_audio_input=False,\n                    allow_dtmf_input=False\n                ),\n\n                # the properties below are optional\n                allow_interrupt=False,\n                audio_and_dtmf_input_specification=lex.CfnBot.AudioAndDTMFInputSpecificationProperty(\n                    start_timeout_ms=123,\n\n                    # the properties below are optional\n                    audio_specification=lex.CfnBot.AudioSpecificationProperty(\n                        end_timeout_ms=123,\n                        max_length_ms=123\n                    ),\n                    dtmf_specification=lex.CfnBot.DTMFSpecificationProperty(\n                        deletion_character="deletionCharacter",\n                        end_character="endCharacter",\n                        end_timeout_ms=123,\n                        max_length=123\n                    )\n                ),\n                text_input_specification=lex.CfnBot.TextInputSpecificationProperty(\n                    start_timeout_ms=123\n                )\n            )\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_retries', 'message_groups_list', 'allow_interrupt', 'message_selection_strategy', 'prompt_attempts_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.PromptSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.ResponseSpecificationProperty
class CfnBot_ResponseSpecificationPropertyDef(BaseStruct):
    message_groups_list: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-responsespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    response_specification_property = lex.CfnBot.ResponseSpecificationProperty(\n        message_groups_list=[lex.CfnBot.MessageGroupProperty(\n            message=lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            ),\n\n            # the properties below are optional\n            variations=[lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            )]\n        )],\n\n        # the properties below are optional\n        allow_interrupt=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['message_groups_list', 'allow_interrupt']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.ResponseSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.S3BucketLogDestinationProperty
class CfnBot_S3BucketLogDestinationPropertyDef(BaseStruct):
    log_prefix: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The S3 prefix to assign to audio log files.\n')
    s3_bucket_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an Amazon S3 bucket.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-s3bucketlogdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    s3_bucket_log_destination_property = lex.CfnBot.S3BucketLogDestinationProperty(\n        log_prefix="logPrefix",\n        s3_bucket_arn="s3BucketArn",\n\n        # the properties below are optional\n        kms_key_arn="kmsKeyArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_prefix', 's3_bucket_arn', 'kms_key_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.S3BucketLogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.S3LocationProperty
class CfnBot_S3LocationPropertyDef(BaseStruct):
    s3_bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The S3 bucket name.\n')
    s3_object_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The path and file name to the object in the S3 bucket.\n')
    s3_object_version: typing.Optional[str] = pydantic.Field(None, description='The version of the object in the S3 bucket.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-s3location.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    s3_location_property = lex.CfnBot.S3LocationProperty(\n        s3_bucket="s3Bucket",\n        s3_object_key="s3ObjectKey",\n\n        # the properties below are optional\n        s3_object_version="s3ObjectVersion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_bucket', 's3_object_key', 's3_object_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.S3LocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SampleUtteranceProperty
class CfnBot_SampleUtterancePropertyDef(BaseStruct):
    utterance: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A sample utterance that invokes an intent or respond to a slot elicitation prompt.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-sampleutterance.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    sample_utterance_property = lex.CfnBot.SampleUtteranceProperty(\n        utterance="utterance"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['utterance']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SampleUtteranceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SampleValueProperty
class CfnBot_SampleValuePropertyDef(BaseStruct):
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value that can be used for a slot type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-samplevalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    sample_value_property = lex.CfnBot.SampleValueProperty(\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SampleValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SentimentAnalysisSettingsProperty
class CfnBot_SentimentAnalysisSettingsPropertyDef(BaseStruct):
    detect_sentiment: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-sentimentanalysissettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    sentiment_analysis_settings_property = lex.CfnBot.SentimentAnalysisSettingsProperty(\n        detect_sentiment=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['detect_sentiment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SentimentAnalysisSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SessionAttributeProperty
class CfnBot_SessionAttributePropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the session attribute.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The session-specific context information for the session attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-sessionattribute.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    session_attribute_property = lex.CfnBot.SessionAttributeProperty(\n        key="key",\n\n        # the properties below are optional\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SessionAttributeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotCaptureSettingProperty
class CfnBot_SlotCaptureSettingPropertyDef(BaseStruct):
    capture_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of conditional branches to evaluate after the slot value is captured.\n')
    capture_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step that the bot runs when the slot value is captured before the code hook times out.\n')
    capture_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond the user input.\n')
    code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Code hook called after Amazon Lex successfully captures a slot value.\n')
    elicitation_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ElicitationCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Code hook called when Amazon Lex doesn't capture a slot value.\n")
    failure_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A list of conditional branches to evaluate when the slot value isn't captured.\n")
    failure_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the next step that the bot runs when the slot value code is not recognized.\n')
    failure_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a list of message groups that Amazon Lex uses to respond the user input when the slot fails to be captured.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotcapturesetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['capture_conditional', 'capture_next_step', 'capture_response', 'code_hook', 'elicitation_code_hook', 'failure_conditional', 'failure_next_step', 'failure_response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotCaptureSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotDefaultValueProperty
class CfnBot_SlotDefaultValuePropertyDef(BaseStruct):
    default_value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The default value to use when a user doesn\'t provide a value for a slot.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotdefaultvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    slot_default_value_property = lex.CfnBot.SlotDefaultValueProperty(\n        default_value="defaultValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotDefaultValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotDefaultValueSpecificationProperty
class CfnBot_SlotDefaultValueSpecificationPropertyDef(BaseStruct):
    default_value_list: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotDefaultValuePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of default values. Amazon Lex chooses the default value to use in the order that they are presented in the list.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotdefaultvaluespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    slot_default_value_specification_property = lex.CfnBot.SlotDefaultValueSpecificationProperty(\n        default_value_list=[lex.CfnBot.SlotDefaultValueProperty(\n            default_value="defaultValue"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_value_list']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotDefaultValueSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotPriorityProperty
class CfnBot_SlotPriorityPropertyDef(BaseStruct):
    priority: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The priority that Amazon Lex should apply to the slot.\n')
    slot_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the slot.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotpriority.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    slot_priority_property = lex.CfnBot.SlotPriorityProperty(\n        priority=123,\n        slot_name="slotName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['priority', 'slot_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotPriorityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotProperty
class CfnBot_SlotPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name given to the slot.\n')
    slot_type_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the slot type that this slot is based on. The slot type defines the acceptable values for the slot.\n')
    value_elicitation_setting: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueElicitationSettingPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: - ORIGINAL_VALUE - Returns the value entered by the user, if the user value is similar to a slot value. - TOP_RESOLUTION - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don't specify the ``valueSelectionStrategy`` , the default is ``ORIGINAL_VALUE`` .\n")
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the slot.\n')
    multiple_values_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MultipleValuesSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Indicates whether a slot can return multiple values.\n')
    obfuscation_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ObfuscationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines whether the contents of the slot are obfuscated in Amazon CloudWatch Logs logs. Use obfuscated slots to protect information such as personally identifiable information (PII) in logs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slot.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'slot_type_name', 'value_elicitation_setting', 'description', 'multiple_values_setting', 'obfuscation_setting']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotTypeProperty
class CfnBot_SlotTypePropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the slot type. A slot type name must be unique withing the account.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the slot type. Use the description to help identify the slot type in lists.\n')
    external_source_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ExternalSourceSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sets the type of external information used to create the slot type.\n')
    parent_slot_type_signature: typing.Optional[str] = pydantic.Field(None, description='The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent lot type. Only ``AMAZON.AlphaNumeric`` is supported.\n')
    slot_type_values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotTypeValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for the slot.\n')
    value_selection_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueSelectionSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: - ``ORIGINAL_VALUE`` - Returns the value entered by the user, if the user value is similar to the slot value. - ``TOP_RESOLUTION`` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don\'t specify the ``valueSelectionStrategy`` , the default is ``ORIGINAL_VALUE`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slottype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    slot_type_property = lex.CfnBot.SlotTypeProperty(\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        external_source_setting=lex.CfnBot.ExternalSourceSettingProperty(\n            grammar_slot_type_setting=lex.CfnBot.GrammarSlotTypeSettingProperty(\n                source=lex.CfnBot.GrammarSlotTypeSourceProperty(\n                    s3_bucket_name="s3BucketName",\n                    s3_object_key="s3ObjectKey",\n\n                    # the properties below are optional\n                    kms_key_arn="kmsKeyArn"\n                )\n            )\n        ),\n        parent_slot_type_signature="parentSlotTypeSignature",\n        slot_type_values=[lex.CfnBot.SlotTypeValueProperty(\n            sample_value=lex.CfnBot.SampleValueProperty(\n                value="value"\n            ),\n\n            # the properties below are optional\n            synonyms=[lex.CfnBot.SampleValueProperty(\n                value="value"\n            )]\n        )],\n        value_selection_setting=lex.CfnBot.SlotValueSelectionSettingProperty(\n            resolution_strategy="resolutionStrategy",\n\n            # the properties below are optional\n            advanced_recognition_setting=lex.CfnBot.AdvancedRecognitionSettingProperty(\n                audio_recognition_strategy="audioRecognitionStrategy"\n            ),\n            regex_filter=lex.CfnBot.SlotValueRegexFilterProperty(\n                pattern="pattern"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'description', 'external_source_setting', 'parent_slot_type_signature', 'slot_type_values', 'value_selection_setting']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotTypeValueProperty
class CfnBot_SlotTypeValuePropertyDef(BaseStruct):
    sample_value: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_SampleValuePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value of the slot type entry.\n')
    synonyms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SampleValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Additional values related to the slot type entry.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slottypevalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    slot_type_value_property = lex.CfnBot.SlotTypeValueProperty(\n        sample_value=lex.CfnBot.SampleValueProperty(\n            value="value"\n        ),\n\n        # the properties below are optional\n        synonyms=[lex.CfnBot.SampleValueProperty(\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sample_value', 'synonyms']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotTypeValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotValueElicitationSettingProperty
class CfnBot_SlotValueElicitationSettingPropertyDef(BaseStruct):
    slot_constraint: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the slot is required or optional.\n')
    default_value_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotDefaultValueSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A list of default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values.\n")
    prompt_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PromptSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The prompt that Amazon Lex uses to elicit the slot value from the user.\n')
    sample_utterances: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SampleUtterancePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.\n')
    slot_capture_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotCaptureSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the settings that Amazon Lex uses when a slot value is successfully entered by a user.\n')
    wait_and_continue_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_WaitAndContinueSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotvalueelicitationsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n')
    _init_params: typing.ClassVar[list[str]] = ['slot_constraint', 'default_value_specification', 'prompt_specification', 'sample_utterances', 'slot_capture_setting', 'wait_and_continue_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotValueElicitationSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotValueOverrideMapProperty
class CfnBot_SlotValueOverrideMapPropertyDef(BaseStruct):
    slot_name: typing.Optional[str] = pydantic.Field(None, description='The name of the slot.\n')
    slot_value_override: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueOverridePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SlotValueOverride object to which the slot name will be mapped.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotvalueoverridemap.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # slot_value_override_property_: lex.CfnBot.SlotValueOverrideProperty\n\n    slot_value_override_map_property = lex.CfnBot.SlotValueOverrideMapProperty(\n        slot_name="slotName",\n        slot_value_override=lex.CfnBot.SlotValueOverrideProperty(\n            shape="shape",\n            value=lex.CfnBot.SlotValueProperty(\n                interpreted_value="interpretedValue"\n            ),\n            values=[slot_value_override_property_]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['slot_name', 'slot_value_override']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotValueOverrideMapProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotValueOverrideProperty
class CfnBot_SlotValueOverridePropertyDef(BaseStruct):
    shape: typing.Optional[str] = pydantic.Field(None, description='When the shape value is ``List`` , it indicates that the ``values`` field contains a list of slot values. When the value is ``Scalar`` , it indicates that the ``value`` field contains a single value.\n')
    value: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The current value of the slot.\n')
    values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueOverridePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotvalueoverride.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # slot_value_override_property_: lex.CfnBot.SlotValueOverrideProperty\n\n    slot_value_override_property = lex.CfnBot.SlotValueOverrideProperty(\n        shape="shape",\n        value=lex.CfnBot.SlotValueProperty(\n            interpreted_value="interpretedValue"\n        ),\n        values=[slot_value_override_property_]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['shape', 'value', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotValueOverrideProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotValueProperty
class CfnBot_SlotValuePropertyDef(BaseStruct):
    interpreted_value: typing.Optional[str] = pydantic.Field(None, description='The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the ``resolvedValues`` list.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    slot_value_property = lex.CfnBot.SlotValueProperty(\n        interpreted_value="interpretedValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['interpreted_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotValueRegexFilterProperty
class CfnBot_SlotValueRegexFilterPropertyDef(BaseStruct):
    pattern: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A regular expression used to validate the value of a slot. Use a standard regular expression. Amazon Lex supports the following characters in the regular expression: - A-Z, a-z - 0-9 - Unicode characters ("\\\u2060u") Represent Unicode characters with four digits, for example "\\\u2060u0041" or "\\\u2060u005A". The following regular expression operators are not supported: - Infinite repeaters: *, +, or {x,} with no upper bound. - Wild card (.)\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotvalueregexfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    slot_value_regex_filter_property = lex.CfnBot.SlotValueRegexFilterProperty(\n        pattern="pattern"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['pattern']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotValueRegexFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SlotValueSelectionSettingProperty
class CfnBot_SlotValueSelectionSettingPropertyDef(BaseStruct):
    resolution_strategy: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values: - ``ORIGINAL_VALUE`` - Returns the value entered by the user, if the user value is similar to the slot value. - ``TOP_RESOLUTION`` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned. If you don't specify the ``valueSelectionStrategy`` , the default is ``ORIGINAL_VALUE`` .\n")
    advanced_recognition_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AdvancedRecognitionSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.\n')
    regex_filter: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueRegexFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A regular expression used to validate the value of a slot.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-slotvalueselectionsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    slot_value_selection_setting_property = lex.CfnBot.SlotValueSelectionSettingProperty(\n        resolution_strategy="resolutionStrategy",\n\n        # the properties below are optional\n        advanced_recognition_setting=lex.CfnBot.AdvancedRecognitionSettingProperty(\n            audio_recognition_strategy="audioRecognitionStrategy"\n        ),\n        regex_filter=lex.CfnBot.SlotValueRegexFilterProperty(\n            pattern="pattern"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resolution_strategy', 'advanced_recognition_setting', 'regex_filter']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SlotValueSelectionSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.SSMLMessageProperty
class CfnBot_SSMLMessagePropertyDef(BaseStruct):
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SSML text that defines the prompt.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-ssmlmessage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    s_sMLMessage_property = lex.CfnBot.SSMLMessageProperty(\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.SSMLMessageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.StillWaitingResponseSpecificationProperty
class CfnBot_StillWaitingResponseSpecificationPropertyDef(BaseStruct):
    frequency_in_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='How often a message should be sent to the user. Minimum of 1 second, maximum of 5 minutes.\n')
    message_groups_list: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='One or more message groups, each containing one or more messages, that define the prompts that Amazon Lex sends to the user.\n')
    timeout_in_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.\n')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates that the user can interrupt the response by speaking while the message is being played.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-stillwaitingresponsespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    still_waiting_response_specification_property = lex.CfnBot.StillWaitingResponseSpecificationProperty(\n        frequency_in_seconds=123,\n        message_groups_list=[lex.CfnBot.MessageGroupProperty(\n            message=lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            ),\n\n            # the properties below are optional\n            variations=[lex.CfnBot.MessageProperty(\n                custom_payload=lex.CfnBot.CustomPayloadProperty(\n                    value="value"\n                ),\n                image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                    title="title",\n\n                    # the properties below are optional\n                    buttons=[lex.CfnBot.ButtonProperty(\n                        text="text",\n                        value="value"\n                    )],\n                    image_url="imageUrl",\n                    subtitle="subtitle"\n                ),\n                plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                    value="value"\n                ),\n                ssml_message=lex.CfnBot.SSMLMessageProperty(\n                    value="value"\n                )\n            )]\n        )],\n        timeout_in_seconds=123,\n\n        # the properties below are optional\n        allow_interrupt=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['frequency_in_seconds', 'message_groups_list', 'timeout_in_seconds', 'allow_interrupt']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.StillWaitingResponseSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.TestBotAliasSettingsProperty
class CfnBot_TestBotAliasSettingsPropertyDef(BaseStruct):
    bot_alias_locale_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_BotAliasLocaleSettingsItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Specifies settings that are unique to a locale. For example, you can use a different Lambda function depending on the bot's locale.\n")
    conversation_log_settings: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConversationLogSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies settings for conversation logs that save audio, text, and metadata information for conversations with your users.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='Specifies a description for the test bot alias.\n')
    sentiment_analysis_settings: typing.Any = pydantic.Field(None, description='Specifies whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-testbotaliassettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # sentiment_analysis_settings: Any\n\n    test_bot_alias_settings_property = lex.CfnBot.TestBotAliasSettingsProperty(\n        bot_alias_locale_settings=[lex.CfnBot.BotAliasLocaleSettingsItemProperty(\n            bot_alias_locale_setting=lex.CfnBot.BotAliasLocaleSettingsProperty(\n                enabled=False,\n\n                # the properties below are optional\n                code_hook_specification=lex.CfnBot.CodeHookSpecificationProperty(\n                    lambda_code_hook=lex.CfnBot.LambdaCodeHookProperty(\n                        code_hook_interface_version="codeHookInterfaceVersion",\n                        lambda_arn="lambdaArn"\n                    )\n                )\n            ),\n            locale_id="localeId"\n        )],\n        conversation_log_settings=lex.CfnBot.ConversationLogSettingsProperty(\n            audio_log_settings=[lex.CfnBot.AudioLogSettingProperty(\n                destination=lex.CfnBot.AudioLogDestinationProperty(\n                    s3_bucket=lex.CfnBot.S3BucketLogDestinationProperty(\n                        log_prefix="logPrefix",\n                        s3_bucket_arn="s3BucketArn",\n\n                        # the properties below are optional\n                        kms_key_arn="kmsKeyArn"\n                    )\n                ),\n                enabled=False\n            )],\n            text_log_settings=[lex.CfnBot.TextLogSettingProperty(\n                destination=lex.CfnBot.TextLogDestinationProperty(\n                    cloud_watch=lex.CfnBot.CloudWatchLogGroupLogDestinationProperty(\n                        cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n                        log_prefix="logPrefix"\n                    )\n                ),\n                enabled=False\n            )]\n        ),\n        description="description",\n        sentiment_analysis_settings=sentiment_analysis_settings\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bot_alias_locale_settings', 'conversation_log_settings', 'description', 'sentiment_analysis_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.TestBotAliasSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.TextInputSpecificationProperty
class CfnBot_TextInputSpecificationPropertyDef(BaseStruct):
    start_timeout_ms: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Time for which a bot waits before re-prompting a customer for text input.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-textinputspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    text_input_specification_property = lex.CfnBot.TextInputSpecificationProperty(\n        start_timeout_ms=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['start_timeout_ms']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.TextInputSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.TextLogDestinationProperty
class CfnBot_TextLogDestinationPropertyDef(BaseStruct):
    cloud_watch: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_CloudWatchLogGroupLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the Amazon CloudWatch Logs log group where text and metadata logs are delivered.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-textlogdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    text_log_destination_property = lex.CfnBot.TextLogDestinationProperty(\n        cloud_watch=lex.CfnBot.CloudWatchLogGroupLogDestinationProperty(\n            cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n            log_prefix="logPrefix"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.TextLogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.TextLogSettingProperty
class CfnBot_TextLogSettingPropertyDef(BaseStruct):
    destination: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_TextLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the Amazon CloudWatch Logs destination log group for conversation text logs.\n')
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines whether conversation logs should be stored for an alias.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-textlogsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    text_log_setting_property = lex.CfnBot.TextLogSettingProperty(\n        destination=lex.CfnBot.TextLogDestinationProperty(\n            cloud_watch=lex.CfnBot.CloudWatchLogGroupLogDestinationProperty(\n                cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n                log_prefix="logPrefix"\n            )\n        ),\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.TextLogSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.VoiceSettingsProperty
class CfnBot_VoiceSettingsPropertyDef(BaseStruct):
    voice_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon Polly voice to use.\n')
    engine: typing.Optional[str] = pydantic.Field(None, description='Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the ```engine`` parameter of the ``SynthesizeSpeech`` operation <https://docs.aws.amazon.com/polly/latest/dg/API_SynthesizeSpeech.html#polly-SynthesizeSpeech-request-Engine>`_ in the *Amazon Polly developer guide* . If you do not specify a value, the default is ``standard`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-voicesettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    voice_settings_property = lex.CfnBot.VoiceSettingsProperty(\n        voice_id="voiceId",\n\n        # the properties below are optional\n        engine="engine"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['voice_id', 'engine']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.VoiceSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot.WaitAndContinueSpecificationProperty
class CfnBot_WaitAndContinueSpecificationPropertyDef(BaseStruct):
    continue_response: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.\n')
    waiting_response: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.\n')
    is_active: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether the bot will wait for a user to respond. When this field is false, wait and continue responses for a slot aren't used. If the ``IsActive`` field isn't specified, the default is true.\n")
    still_waiting_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_StillWaitingResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-bot-waitandcontinuespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    wait_and_continue_specification_property = lex.CfnBot.WaitAndContinueSpecificationProperty(\n        continue_response=lex.CfnBot.ResponseSpecificationProperty(\n            message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                message=lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                ),\n\n                # the properties below are optional\n                variations=[lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                )]\n            )],\n\n            # the properties below are optional\n            allow_interrupt=False\n        ),\n        waiting_response=lex.CfnBot.ResponseSpecificationProperty(\n            message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                message=lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                ),\n\n                # the properties below are optional\n                variations=[lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                )]\n            )],\n\n            # the properties below are optional\n            allow_interrupt=False\n        ),\n\n        # the properties below are optional\n        is_active=False,\n        still_waiting_response=lex.CfnBot.StillWaitingResponseSpecificationProperty(\n            frequency_in_seconds=123,\n            message_groups_list=[lex.CfnBot.MessageGroupProperty(\n                message=lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                ),\n\n                # the properties below are optional\n                variations=[lex.CfnBot.MessageProperty(\n                    custom_payload=lex.CfnBot.CustomPayloadProperty(\n                        value="value"\n                    ),\n                    image_response_card=lex.CfnBot.ImageResponseCardProperty(\n                        title="title",\n\n                        # the properties below are optional\n                        buttons=[lex.CfnBot.ButtonProperty(\n                            text="text",\n                            value="value"\n                        )],\n                        image_url="imageUrl",\n                        subtitle="subtitle"\n                    ),\n                    plain_text_message=lex.CfnBot.PlainTextMessageProperty(\n                        value="value"\n                    ),\n                    ssml_message=lex.CfnBot.SSMLMessageProperty(\n                        value="value"\n                    )\n                )]\n            )],\n            timeout_in_seconds=123,\n\n            # the properties below are optional\n            allow_interrupt=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['continue_response', 'waiting_response', 'is_active', 'still_waiting_response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot.WaitAndContinueSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.AudioLogDestinationProperty
class CfnBotAlias_AudioLogDestinationPropertyDef(BaseStruct):
    s3_bucket: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBotAlias_S3BucketLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The S3 bucket location where audio logs are stored.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-audiologdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    audio_log_destination_property = lex.CfnBotAlias.AudioLogDestinationProperty(\n        s3_bucket=lex.CfnBotAlias.S3BucketLogDestinationProperty(\n            log_prefix="logPrefix",\n            s3_bucket_arn="s3BucketArn",\n\n            # the properties below are optional\n            kms_key_arn="kmsKeyArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_bucket']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.AudioLogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.AudioLogSettingProperty
class CfnBotAlias_AudioLogSettingPropertyDef(BaseStruct):
    destination: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBotAlias_AudioLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The location of audio log files collected when conversation logging is enabled for a bot.\n')
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines whether audio logging in enabled for the bot.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-audiologsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    audio_log_setting_property = lex.CfnBotAlias.AudioLogSettingProperty(\n        destination=lex.CfnBotAlias.AudioLogDestinationProperty(\n            s3_bucket=lex.CfnBotAlias.S3BucketLogDestinationProperty(\n                log_prefix="logPrefix",\n                s3_bucket_arn="s3BucketArn",\n\n                # the properties below are optional\n                kms_key_arn="kmsKeyArn"\n            )\n        ),\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.AudioLogSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.BotAliasLocaleSettingsItemProperty
class CfnBotAlias_BotAliasLocaleSettingsItemPropertyDef(BaseStruct):
    bot_alias_locale_setting: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBotAlias_BotAliasLocaleSettingsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies settings that are unique to a locale.\n')
    locale_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the locale.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-botaliaslocalesettingsitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    bot_alias_locale_settings_item_property = lex.CfnBotAlias.BotAliasLocaleSettingsItemProperty(\n        bot_alias_locale_setting=lex.CfnBotAlias.BotAliasLocaleSettingsProperty(\n            enabled=False,\n\n            # the properties below are optional\n            code_hook_specification=lex.CfnBotAlias.CodeHookSpecificationProperty(\n                lambda_code_hook=lex.CfnBotAlias.LambdaCodeHookProperty(\n                    code_hook_interface_version="codeHookInterfaceVersion",\n                    lambda_arn="lambdaArn"\n                )\n            )\n        ),\n        locale_id="localeId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bot_alias_locale_setting', 'locale_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.BotAliasLocaleSettingsItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.BotAliasLocaleSettingsProperty
class CfnBotAlias_BotAliasLocaleSettingsPropertyDef(BaseStruct):
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description="Determines whether the locale is enabled for the bot. If the value is ``false`` , the locale isn't available for use.\n")
    code_hook_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_CodeHookSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the Lambda function that should be used in the locale.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-botaliaslocalesettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    bot_alias_locale_settings_property = lex.CfnBotAlias.BotAliasLocaleSettingsProperty(\n        enabled=False,\n\n        # the properties below are optional\n        code_hook_specification=lex.CfnBotAlias.CodeHookSpecificationProperty(\n            lambda_code_hook=lex.CfnBotAlias.LambdaCodeHookProperty(\n                code_hook_interface_version="codeHookInterfaceVersion",\n                lambda_arn="lambdaArn"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'code_hook_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.BotAliasLocaleSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.CloudWatchLogGroupLogDestinationProperty
class CfnBotAlias_CloudWatchLogGroupLogDestinationPropertyDef(BaseStruct):
    cloud_watch_log_group_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the log group where text and metadata logs are delivered.\n')
    log_prefix: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The prefix of the log stream name within the log group that you specified.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-cloudwatchloggrouplogdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    cloud_watch_log_group_log_destination_property = lex.CfnBotAlias.CloudWatchLogGroupLogDestinationProperty(\n        cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n        log_prefix="logPrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_log_group_arn', 'log_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.CloudWatchLogGroupLogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.CodeHookSpecificationProperty
class CfnBotAlias_CodeHookSpecificationPropertyDef(BaseStruct):
    lambda_code_hook: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBotAlias_LambdaCodeHookPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies a Lambda function that verifies requests to a bot or fulfills the user\'s request to a bot.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-codehookspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    code_hook_specification_property = lex.CfnBotAlias.CodeHookSpecificationProperty(\n        lambda_code_hook=lex.CfnBotAlias.LambdaCodeHookProperty(\n            code_hook_interface_version="codeHookInterfaceVersion",\n            lambda_arn="lambdaArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_code_hook']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.CodeHookSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.ConversationLogSettingsProperty
class CfnBotAlias_ConversationLogSettingsPropertyDef(BaseStruct):
    audio_log_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_AudioLogSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon S3 settings for logging audio to an S3 bucket.\n')
    text_log_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_TextLogSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon CloudWatch Logs settings for logging text and metadata.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-conversationlogsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    conversation_log_settings_property = lex.CfnBotAlias.ConversationLogSettingsProperty(\n        audio_log_settings=[lex.CfnBotAlias.AudioLogSettingProperty(\n            destination=lex.CfnBotAlias.AudioLogDestinationProperty(\n                s3_bucket=lex.CfnBotAlias.S3BucketLogDestinationProperty(\n                    log_prefix="logPrefix",\n                    s3_bucket_arn="s3BucketArn",\n\n                    # the properties below are optional\n                    kms_key_arn="kmsKeyArn"\n                )\n            ),\n            enabled=False\n        )],\n        text_log_settings=[lex.CfnBotAlias.TextLogSettingProperty(\n            destination=lex.CfnBotAlias.TextLogDestinationProperty(\n                cloud_watch=lex.CfnBotAlias.CloudWatchLogGroupLogDestinationProperty(\n                    cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n                    log_prefix="logPrefix"\n                )\n            ),\n            enabled=False\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['audio_log_settings', 'text_log_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.ConversationLogSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.LambdaCodeHookProperty
class CfnBotAlias_LambdaCodeHookPropertyDef(BaseStruct):
    code_hook_interface_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.\n')
    lambda_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the Lambda function.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-lambdacodehook.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    lambda_code_hook_property = lex.CfnBotAlias.LambdaCodeHookProperty(\n        code_hook_interface_version="codeHookInterfaceVersion",\n        lambda_arn="lambdaArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['code_hook_interface_version', 'lambda_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.LambdaCodeHookProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.S3BucketLogDestinationProperty
class CfnBotAlias_S3BucketLogDestinationPropertyDef(BaseStruct):
    log_prefix: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The S3 prefix to assign to audio log files.\n')
    s3_bucket_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an Amazon S3 bucket.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-s3bucketlogdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    s3_bucket_log_destination_property = lex.CfnBotAlias.S3BucketLogDestinationProperty(\n        log_prefix="logPrefix",\n        s3_bucket_arn="s3BucketArn",\n\n        # the properties below are optional\n        kms_key_arn="kmsKeyArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_prefix', 's3_bucket_arn', 'kms_key_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.S3BucketLogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.SentimentAnalysisSettingsProperty
class CfnBotAlias_SentimentAnalysisSettingsPropertyDef(BaseStruct):
    detect_sentiment: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Sets whether Amazon Lex uses Amazon Comprehend to detect the sentiment of user utterances.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-sentimentanalysissettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    sentiment_analysis_settings_property = lex.CfnBotAlias.SentimentAnalysisSettingsProperty(\n        detect_sentiment=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['detect_sentiment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.SentimentAnalysisSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.TextLogDestinationProperty
class CfnBotAlias_TextLogDestinationPropertyDef(BaseStruct):
    cloud_watch: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBotAlias_CloudWatchLogGroupLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the Amazon CloudWatch Logs log group where text and metadata logs are delivered.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-textlogdestination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    text_log_destination_property = lex.CfnBotAlias.TextLogDestinationProperty(\n        cloud_watch=lex.CfnBotAlias.CloudWatchLogGroupLogDestinationProperty(\n            cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n            log_prefix="logPrefix"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.TextLogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotAlias.TextLogSettingProperty
class CfnBotAlias_TextLogSettingPropertyDef(BaseStruct):
    destination: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBotAlias_TextLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the Amazon CloudWatch Logs destination log group for conversation text logs.\n')
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines whether conversation logs should be stored for an alias.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botalias-textlogsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    text_log_setting_property = lex.CfnBotAlias.TextLogSettingProperty(\n        destination=lex.CfnBotAlias.TextLogDestinationProperty(\n            cloud_watch=lex.CfnBotAlias.CloudWatchLogGroupLogDestinationProperty(\n                cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n                log_prefix="logPrefix"\n            )\n        ),\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias.TextLogSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotVersion.BotVersionLocaleDetailsProperty
class CfnBotVersion_BotVersionLocaleDetailsPropertyDef(BaseStruct):
    source_bot_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The version of a bot used for a bot locale.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botversion-botversionlocaledetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    bot_version_locale_details_property = lex.CfnBotVersion.BotVersionLocaleDetailsProperty(\n        source_bot_version="sourceBotVersion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['source_bot_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotVersion.BotVersionLocaleDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotVersion.BotVersionLocaleSpecificationProperty
class CfnBotVersion_BotVersionLocaleSpecificationPropertyDef(BaseStruct):
    bot_version_locale_details: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_lex.CfnBotVersion_BotVersionLocaleDetailsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The version of a bot used for a bot locale.\n')
    locale_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the locale to add to the version.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lex-botversion-botversionlocalespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    bot_version_locale_specification_property = lex.CfnBotVersion.BotVersionLocaleSpecificationProperty(\n        bot_version_locale_details=lex.CfnBotVersion.BotVersionLocaleDetailsProperty(\n            source_bot_version="sourceBotVersion"\n        ),\n        locale_id="localeId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bot_version_locale_details', 'locale_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotVersion.BotVersionLocaleSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBot
class CfnBotDef(BaseCfnResource):
    data_privacy: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='By default, data stored by Amazon Lex is encrypted. The ``DataPrivacy`` structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.\n')
    idle_session_ttl_in_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.\n")
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the bot locale.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the IAM role used to build and run the bot.\n')
    auto_build_bot_locales: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether Amazon Lex V2 should automatically build the locales for the bot after a change.\n')
    bot_file_s3_location: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon S3 location of files used to import a bot. The files must be in the import format specified in `JSON format for importing and exporting <https://docs.aws.amazon.com/lexv2/latest/dg/import-export-format.html>`_ in the *Amazon Lex developer guide.*\n')
    bot_locales: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_BotLocalePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of locales for the bot.\n')
    bot_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of tags to add to the bot. You can only add tags when you import a bot. You can't use the ``UpdateBot`` operation to update tags. To update tags, use the ``TagResource`` operation.\n")
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the version.\n')
    test_bot_alias_settings: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_TestBotAliasSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies configuration settings for the alias used to test the bot. If the ``TestBotAliasSettings`` property is not specified, the settings are configured with default values.\n')
    test_bot_alias_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of tags to add to the test alias for a bot. You can only add tags when you import a bot. You can't use the ``UpdateAlias`` operation to update tags. To update tags on the test alias, use the ``TagResource`` operation.")
    _init_params: typing.ClassVar[list[str]] = ['data_privacy', 'idle_session_ttl_in_seconds', 'name', 'role_arn', 'auto_build_bot_locales', 'bot_file_s3_location', 'bot_locales', 'bot_tags', 'description', 'test_bot_alias_settings', 'test_bot_alias_tags']
    _method_names: typing.ClassVar[list[str]] = ['AdvancedRecognitionSettingProperty', 'AllowedInputTypesProperty', 'AudioAndDTMFInputSpecificationProperty', 'AudioLogDestinationProperty', 'AudioLogSettingProperty', 'AudioSpecificationProperty', 'BotAliasLocaleSettingsItemProperty', 'BotAliasLocaleSettingsProperty', 'BotLocaleProperty', 'ButtonProperty', 'CloudWatchLogGroupLogDestinationProperty', 'CodeHookSpecificationProperty', 'ConditionProperty', 'ConditionalBranchProperty', 'ConditionalSpecificationProperty', 'ConversationLogSettingsProperty', 'CustomPayloadProperty', 'CustomVocabularyItemProperty', 'CustomVocabularyProperty', 'DTMFSpecificationProperty', 'DataPrivacyProperty', 'DefaultConditionalBranchProperty', 'DialogActionProperty', 'DialogCodeHookInvocationSettingProperty', 'DialogCodeHookSettingProperty', 'DialogStateProperty', 'ElicitationCodeHookInvocationSettingProperty', 'ExternalSourceSettingProperty', 'FulfillmentCodeHookSettingProperty', 'FulfillmentStartResponseSpecificationProperty', 'FulfillmentUpdateResponseSpecificationProperty', 'FulfillmentUpdatesSpecificationProperty', 'GrammarSlotTypeSettingProperty', 'GrammarSlotTypeSourceProperty', 'ImageResponseCardProperty', 'InitialResponseSettingProperty', 'InputContextProperty', 'IntentClosingSettingProperty', 'IntentConfirmationSettingProperty', 'IntentOverrideProperty', 'IntentProperty', 'KendraConfigurationProperty', 'LambdaCodeHookProperty', 'MessageGroupProperty', 'MessageProperty', 'MultipleValuesSettingProperty', 'ObfuscationSettingProperty', 'OutputContextProperty', 'PlainTextMessageProperty', 'PostDialogCodeHookInvocationSpecificationProperty', 'PostFulfillmentStatusSpecificationProperty', 'PromptAttemptSpecificationProperty', 'PromptSpecificationProperty', 'ResponseSpecificationProperty', 'S3BucketLogDestinationProperty', 'S3LocationProperty', 'SSMLMessageProperty', 'SampleUtteranceProperty', 'SampleValueProperty', 'SentimentAnalysisSettingsProperty', 'SessionAttributeProperty', 'SlotCaptureSettingProperty', 'SlotDefaultValueProperty', 'SlotDefaultValueSpecificationProperty', 'SlotPriorityProperty', 'SlotProperty', 'SlotTypeProperty', 'SlotTypeValueProperty', 'SlotValueElicitationSettingProperty', 'SlotValueOverrideMapProperty', 'SlotValueOverrideProperty', 'SlotValueProperty', 'SlotValueRegexFilterProperty', 'SlotValueSelectionSettingProperty', 'StillWaitingResponseSpecificationProperty', 'TestBotAliasSettingsProperty', 'TextInputSpecificationProperty', 'TextLogDestinationProperty', 'TextLogSettingProperty', 'VoiceSettingsProperty', 'WaitAndContinueSpecificationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBot'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnBotDefConfig] = pydantic.Field(None)


class CfnBotDefConfig(pydantic.BaseModel):
    AdvancedRecognitionSettingProperty: typing.Optional[list[CfnBotDefAdvancedrecognitionsettingpropertyParams]] = pydantic.Field(None, description='')
    AllowedInputTypesProperty: typing.Optional[list[CfnBotDefAllowedinputtypespropertyParams]] = pydantic.Field(None, description='')
    AudioAndDTMFInputSpecificationProperty: typing.Optional[list[CfnBotDefAudioanddtmfinputspecificationpropertyParams]] = pydantic.Field(None, description='')
    AudioLogDestinationProperty: typing.Optional[list[CfnBotDefAudiologdestinationpropertyParams]] = pydantic.Field(None, description='')
    AudioLogSettingProperty: typing.Optional[list[CfnBotDefAudiologsettingpropertyParams]] = pydantic.Field(None, description='')
    AudioSpecificationProperty: typing.Optional[list[CfnBotDefAudiospecificationpropertyParams]] = pydantic.Field(None, description='')
    BotAliasLocaleSettingsItemProperty: typing.Optional[list[CfnBotDefBotaliaslocalesettingsitempropertyParams]] = pydantic.Field(None, description='')
    BotAliasLocaleSettingsProperty: typing.Optional[list[CfnBotDefBotaliaslocalesettingspropertyParams]] = pydantic.Field(None, description='')
    BotLocaleProperty: typing.Optional[list[CfnBotDefBotlocalepropertyParams]] = pydantic.Field(None, description='')
    ButtonProperty: typing.Optional[list[CfnBotDefButtonpropertyParams]] = pydantic.Field(None, description='')
    CloudWatchLogGroupLogDestinationProperty: typing.Optional[list[CfnBotDefCloudwatchloggrouplogdestinationpropertyParams]] = pydantic.Field(None, description='')
    CodeHookSpecificationProperty: typing.Optional[list[CfnBotDefCodehookspecificationpropertyParams]] = pydantic.Field(None, description='')
    ConditionProperty: typing.Optional[list[CfnBotDefConditionpropertyParams]] = pydantic.Field(None, description='')
    ConditionalBranchProperty: typing.Optional[list[CfnBotDefConditionalbranchpropertyParams]] = pydantic.Field(None, description='')
    ConditionalSpecificationProperty: typing.Optional[list[CfnBotDefConditionalspecificationpropertyParams]] = pydantic.Field(None, description='')
    ConversationLogSettingsProperty: typing.Optional[list[CfnBotDefConversationlogsettingspropertyParams]] = pydantic.Field(None, description='')
    CustomPayloadProperty: typing.Optional[list[CfnBotDefCustompayloadpropertyParams]] = pydantic.Field(None, description='')
    CustomVocabularyItemProperty: typing.Optional[list[CfnBotDefCustomvocabularyitempropertyParams]] = pydantic.Field(None, description='')
    CustomVocabularyProperty: typing.Optional[list[CfnBotDefCustomvocabularypropertyParams]] = pydantic.Field(None, description='')
    DTMFSpecificationProperty: typing.Optional[list[CfnBotDefDtmfspecificationpropertyParams]] = pydantic.Field(None, description='')
    DataPrivacyProperty: typing.Optional[list[CfnBotDefDataprivacypropertyParams]] = pydantic.Field(None, description='')
    DefaultConditionalBranchProperty: typing.Optional[list[CfnBotDefDefaultconditionalbranchpropertyParams]] = pydantic.Field(None, description='')
    DialogActionProperty: typing.Optional[list[CfnBotDefDialogactionpropertyParams]] = pydantic.Field(None, description='')
    DialogCodeHookInvocationSettingProperty: typing.Optional[list[CfnBotDefDialogcodehookinvocationsettingpropertyParams]] = pydantic.Field(None, description='')
    DialogCodeHookSettingProperty: typing.Optional[list[CfnBotDefDialogcodehooksettingpropertyParams]] = pydantic.Field(None, description='')
    DialogStateProperty: typing.Optional[list[CfnBotDefDialogstatepropertyParams]] = pydantic.Field(None, description='')
    ElicitationCodeHookInvocationSettingProperty: typing.Optional[list[CfnBotDefElicitationcodehookinvocationsettingpropertyParams]] = pydantic.Field(None, description='')
    ExternalSourceSettingProperty: typing.Optional[list[CfnBotDefExternalsourcesettingpropertyParams]] = pydantic.Field(None, description='')
    FulfillmentCodeHookSettingProperty: typing.Optional[list[CfnBotDefFulfillmentcodehooksettingpropertyParams]] = pydantic.Field(None, description='')
    FulfillmentStartResponseSpecificationProperty: typing.Optional[list[CfnBotDefFulfillmentstartresponsespecificationpropertyParams]] = pydantic.Field(None, description='')
    FulfillmentUpdateResponseSpecificationProperty: typing.Optional[list[CfnBotDefFulfillmentupdateresponsespecificationpropertyParams]] = pydantic.Field(None, description='')
    FulfillmentUpdatesSpecificationProperty: typing.Optional[list[CfnBotDefFulfillmentupdatesspecificationpropertyParams]] = pydantic.Field(None, description='')
    GrammarSlotTypeSettingProperty: typing.Optional[list[CfnBotDefGrammarslottypesettingpropertyParams]] = pydantic.Field(None, description='')
    GrammarSlotTypeSourceProperty: typing.Optional[list[CfnBotDefGrammarslottypesourcepropertyParams]] = pydantic.Field(None, description='')
    ImageResponseCardProperty: typing.Optional[list[CfnBotDefImageresponsecardpropertyParams]] = pydantic.Field(None, description='')
    InitialResponseSettingProperty: typing.Optional[list[CfnBotDefInitialresponsesettingpropertyParams]] = pydantic.Field(None, description='')
    InputContextProperty: typing.Optional[list[CfnBotDefInputcontextpropertyParams]] = pydantic.Field(None, description='')
    IntentClosingSettingProperty: typing.Optional[list[CfnBotDefIntentclosingsettingpropertyParams]] = pydantic.Field(None, description='')
    IntentConfirmationSettingProperty: typing.Optional[list[CfnBotDefIntentconfirmationsettingpropertyParams]] = pydantic.Field(None, description='')
    IntentOverrideProperty: typing.Optional[list[CfnBotDefIntentoverridepropertyParams]] = pydantic.Field(None, description='')
    IntentProperty: typing.Optional[list[CfnBotDefIntentpropertyParams]] = pydantic.Field(None, description='')
    KendraConfigurationProperty: typing.Optional[list[CfnBotDefKendraconfigurationpropertyParams]] = pydantic.Field(None, description='')
    LambdaCodeHookProperty: typing.Optional[list[CfnBotDefLambdacodehookpropertyParams]] = pydantic.Field(None, description='')
    MessageGroupProperty: typing.Optional[list[CfnBotDefMessagegrouppropertyParams]] = pydantic.Field(None, description='')
    MessageProperty: typing.Optional[list[CfnBotDefMessagepropertyParams]] = pydantic.Field(None, description='')
    MultipleValuesSettingProperty: typing.Optional[list[CfnBotDefMultiplevaluessettingpropertyParams]] = pydantic.Field(None, description='')
    ObfuscationSettingProperty: typing.Optional[list[CfnBotDefObfuscationsettingpropertyParams]] = pydantic.Field(None, description='')
    OutputContextProperty: typing.Optional[list[CfnBotDefOutputcontextpropertyParams]] = pydantic.Field(None, description='')
    PlainTextMessageProperty: typing.Optional[list[CfnBotDefPlaintextmessagepropertyParams]] = pydantic.Field(None, description='')
    PostDialogCodeHookInvocationSpecificationProperty: typing.Optional[list[CfnBotDefPostdialogcodehookinvocationspecificationpropertyParams]] = pydantic.Field(None, description='')
    PostFulfillmentStatusSpecificationProperty: typing.Optional[list[CfnBotDefPostfulfillmentstatusspecificationpropertyParams]] = pydantic.Field(None, description='')
    PromptAttemptSpecificationProperty: typing.Optional[list[CfnBotDefPromptattemptspecificationpropertyParams]] = pydantic.Field(None, description='')
    PromptSpecificationProperty: typing.Optional[list[CfnBotDefPromptspecificationpropertyParams]] = pydantic.Field(None, description='')
    ResponseSpecificationProperty: typing.Optional[list[CfnBotDefResponsespecificationpropertyParams]] = pydantic.Field(None, description='')
    S3BucketLogDestinationProperty: typing.Optional[list[CfnBotDefS3BucketlogdestinationpropertyParams]] = pydantic.Field(None, description='')
    S3LocationProperty: typing.Optional[list[CfnBotDefS3LocationpropertyParams]] = pydantic.Field(None, description='')
    SSMLMessageProperty: typing.Optional[list[CfnBotDefSsmlmessagepropertyParams]] = pydantic.Field(None, description='')
    SampleUtteranceProperty: typing.Optional[list[CfnBotDefSampleutterancepropertyParams]] = pydantic.Field(None, description='')
    SampleValueProperty: typing.Optional[list[CfnBotDefSamplevaluepropertyParams]] = pydantic.Field(None, description='')
    SentimentAnalysisSettingsProperty: typing.Optional[list[CfnBotDefSentimentanalysissettingspropertyParams]] = pydantic.Field(None, description='')
    SessionAttributeProperty: typing.Optional[list[CfnBotDefSessionattributepropertyParams]] = pydantic.Field(None, description='')
    SlotCaptureSettingProperty: typing.Optional[list[CfnBotDefSlotcapturesettingpropertyParams]] = pydantic.Field(None, description='')
    SlotDefaultValueProperty: typing.Optional[list[CfnBotDefSlotdefaultvaluepropertyParams]] = pydantic.Field(None, description='')
    SlotDefaultValueSpecificationProperty: typing.Optional[list[CfnBotDefSlotdefaultvaluespecificationpropertyParams]] = pydantic.Field(None, description='')
    SlotPriorityProperty: typing.Optional[list[CfnBotDefSlotprioritypropertyParams]] = pydantic.Field(None, description='')
    SlotProperty: typing.Optional[list[CfnBotDefSlotpropertyParams]] = pydantic.Field(None, description='')
    SlotTypeProperty: typing.Optional[list[CfnBotDefSlottypepropertyParams]] = pydantic.Field(None, description='')
    SlotTypeValueProperty: typing.Optional[list[CfnBotDefSlottypevaluepropertyParams]] = pydantic.Field(None, description='')
    SlotValueElicitationSettingProperty: typing.Optional[list[CfnBotDefSlotvalueelicitationsettingpropertyParams]] = pydantic.Field(None, description='')
    SlotValueOverrideMapProperty: typing.Optional[list[CfnBotDefSlotvalueoverridemappropertyParams]] = pydantic.Field(None, description='')
    SlotValueOverrideProperty: typing.Optional[list[CfnBotDefSlotvalueoverridepropertyParams]] = pydantic.Field(None, description='')
    SlotValueProperty: typing.Optional[list[CfnBotDefSlotvaluepropertyParams]] = pydantic.Field(None, description='')
    SlotValueRegexFilterProperty: typing.Optional[list[CfnBotDefSlotvalueregexfilterpropertyParams]] = pydantic.Field(None, description='')
    SlotValueSelectionSettingProperty: typing.Optional[list[CfnBotDefSlotvalueselectionsettingpropertyParams]] = pydantic.Field(None, description='')
    StillWaitingResponseSpecificationProperty: typing.Optional[list[CfnBotDefStillwaitingresponsespecificationpropertyParams]] = pydantic.Field(None, description='')
    TestBotAliasSettingsProperty: typing.Optional[list[CfnBotDefTestbotaliassettingspropertyParams]] = pydantic.Field(None, description='')
    TextInputSpecificationProperty: typing.Optional[list[CfnBotDefTextinputspecificationpropertyParams]] = pydantic.Field(None, description='')
    TextLogDestinationProperty: typing.Optional[list[CfnBotDefTextlogdestinationpropertyParams]] = pydantic.Field(None, description='')
    TextLogSettingProperty: typing.Optional[list[CfnBotDefTextlogsettingpropertyParams]] = pydantic.Field(None, description='')
    VoiceSettingsProperty: typing.Optional[list[CfnBotDefVoicesettingspropertyParams]] = pydantic.Field(None, description='')
    WaitAndContinueSpecificationProperty: typing.Optional[list[CfnBotDefWaitandcontinuespecificationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnBotDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnBotDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnBotDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnBotDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnBotDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnBotDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnBotDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnBotDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnBotDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnBotDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnBotDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnBotDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnBotDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnBotDefAdvancedrecognitionsettingpropertyParams(pydantic.BaseModel):
    audio_recognition_strategy: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefAllowedinputtypespropertyParams(pydantic.BaseModel):
    allow_audio_input: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    allow_dtmf_input: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotDefAudioanddtmfinputspecificationpropertyParams(pydantic.BaseModel):
    start_timeout_ms: typing.Union[int, float] = pydantic.Field(..., description='')
    audio_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AudioSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dtmf_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DTMFSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefAudiologdestinationpropertyParams(pydantic.BaseModel):
    s3_bucket: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_S3BucketLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnBotDefAudiologsettingpropertyParams(pydantic.BaseModel):
    destination: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AudioLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotDefAudiospecificationpropertyParams(pydantic.BaseModel):
    end_timeout_ms: typing.Union[int, float] = pydantic.Field(..., description='')
    max_length_ms: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnBotDefBotaliaslocalesettingsitempropertyParams(pydantic.BaseModel):
    bot_alias_locale_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_BotAliasLocaleSettingsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    locale_id: str = pydantic.Field(..., description='')
    ...

class CfnBotDefBotaliaslocalesettingspropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    code_hook_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_CodeHookSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefBotlocalepropertyParams(pydantic.BaseModel):
    locale_id: str = pydantic.Field(..., description='')
    nlu_confidence_threshold: typing.Union[int, float] = pydantic.Field(..., description='')
    custom_vocabulary: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_CustomVocabularyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    intents: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_IntentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    slot_types: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotTypePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    voice_settings: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_VoiceSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefButtonpropertyParams(pydantic.BaseModel):
    text: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnBotDefCloudwatchloggrouplogdestinationpropertyParams(pydantic.BaseModel):
    cloud_watch_log_group_arn: str = pydantic.Field(..., description='')
    log_prefix: str = pydantic.Field(..., description='')
    ...

class CfnBotDefCodehookspecificationpropertyParams(pydantic.BaseModel):
    lambda_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_LambdaCodeHookPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnBotDefConditionpropertyParams(pydantic.BaseModel):
    expression_string: str = pydantic.Field(..., description='')
    ...

class CfnBotDefConditionalbranchpropertyParams(pydantic.BaseModel):
    condition: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefConditionalspecificationpropertyParams(pydantic.BaseModel):
    conditional_branches: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalBranchPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    default_branch: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DefaultConditionalBranchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    is_active: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotDefConversationlogsettingspropertyParams(pydantic.BaseModel):
    audio_log_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AudioLogSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    text_log_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_TextLogSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefCustompayloadpropertyParams(pydantic.BaseModel):
    value: str = pydantic.Field(..., description='')
    ...

class CfnBotDefCustomvocabularyitempropertyParams(pydantic.BaseModel):
    phrase: str = pydantic.Field(..., description='')
    display_as: typing.Optional[str] = pydantic.Field(None, description='')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnBotDefCustomvocabularypropertyParams(pydantic.BaseModel):
    custom_vocabulary_items: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_CustomVocabularyItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnBotDefDtmfspecificationpropertyParams(pydantic.BaseModel):
    deletion_character: str = pydantic.Field(..., description='')
    end_character: str = pydantic.Field(..., description='')
    end_timeout_ms: typing.Union[int, float] = pydantic.Field(..., description='')
    max_length: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnBotDefDataprivacypropertyParams(pydantic.BaseModel):
    child_directed: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotDefDefaultconditionalbranchpropertyParams(pydantic.BaseModel):
    next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefDialogactionpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    slot_to_elicit: typing.Optional[str] = pydantic.Field(None, description='')
    suppress_next_message: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnBotDefDialogcodehookinvocationsettingpropertyParams(pydantic.BaseModel):
    enable_code_hook_invocation: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    is_active: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    post_code_hook_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PostDialogCodeHookInvocationSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    invocation_label: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefDialogcodehooksettingpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotDefDialogstatepropertyParams(pydantic.BaseModel):
    dialog_action: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    intent: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_IntentOverridePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    session_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SessionAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefElicitationcodehookinvocationsettingpropertyParams(pydantic.BaseModel):
    enable_code_hook_invocation: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    invocation_label: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefExternalsourcesettingpropertyParams(pydantic.BaseModel):
    grammar_slot_type_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_GrammarSlotTypeSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefFulfillmentcodehooksettingpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    fulfillment_updates_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_FulfillmentUpdatesSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    is_active: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    post_fulfillment_status_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PostFulfillmentStatusSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefFulfillmentstartresponsespecificationpropertyParams(pydantic.BaseModel):
    delay_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    message_groups: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnBotDefFulfillmentupdateresponsespecificationpropertyParams(pydantic.BaseModel):
    frequency_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    message_groups: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnBotDefFulfillmentupdatesspecificationpropertyParams(pydantic.BaseModel):
    active: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    start_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_FulfillmentStartResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    update_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_FulfillmentUpdateResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefGrammarslottypesettingpropertyParams(pydantic.BaseModel):
    source: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_GrammarSlotTypeSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefGrammarslottypesourcepropertyParams(pydantic.BaseModel):
    s3_bucket_name: str = pydantic.Field(..., description='')
    s3_object_key: str = pydantic.Field(..., description='')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefImageresponsecardpropertyParams(pydantic.BaseModel):
    title: str = pydantic.Field(..., description='')
    buttons: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ButtonPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    image_url: typing.Optional[str] = pydantic.Field(None, description='')
    subtitle: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefInitialresponsesettingpropertyParams(pydantic.BaseModel):
    code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    initial_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefInputcontextpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnBotDefIntentclosingsettingpropertyParams(pydantic.BaseModel):
    closing_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    is_active: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefIntentconfirmationsettingpropertyParams(pydantic.BaseModel):
    prompt_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PromptSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    confirmation_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    confirmation_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    confirmation_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    declination_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    declination_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    declination_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    elicitation_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ElicitationCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    is_active: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnBotDefIntentoverridepropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    slots: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueOverrideMapPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefIntentpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    dialog_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogCodeHookSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    fulfillment_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_FulfillmentCodeHookSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    initial_response_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_InitialResponseSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    input_contexts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_InputContextPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    intent_closing_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_IntentClosingSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    intent_confirmation_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_IntentConfirmationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kendra_configuration: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_KendraConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    output_contexts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_OutputContextPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    parent_intent_signature: typing.Optional[str] = pydantic.Field(None, description='')
    sample_utterances: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SampleUtterancePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    slot_priorities: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotPriorityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    slots: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefKendraconfigurationpropertyParams(pydantic.BaseModel):
    kendra_index: str = pydantic.Field(..., description='')
    query_filter_string: typing.Optional[str] = pydantic.Field(None, description='')
    query_filter_string_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnBotDefLambdacodehookpropertyParams(pydantic.BaseModel):
    code_hook_interface_version: str = pydantic.Field(..., description='')
    lambda_arn: str = pydantic.Field(..., description='')
    ...

class CfnBotDefMessagegrouppropertyParams(pydantic.BaseModel):
    message: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessagePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    variations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefMessagepropertyParams(pydantic.BaseModel):
    custom_payload: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_CustomPayloadPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    image_response_card: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ImageResponseCardPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    plain_text_message: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PlainTextMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ssml_message: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SSMLMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefMultiplevaluessettingpropertyParams(pydantic.BaseModel):
    allow_multiple_values: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnBotDefObfuscationsettingpropertyParams(pydantic.BaseModel):
    obfuscation_setting_type: str = pydantic.Field(..., description='')
    ...

class CfnBotDefOutputcontextpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    time_to_live_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    turns_to_live: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnBotDefPlaintextmessagepropertyParams(pydantic.BaseModel):
    value: str = pydantic.Field(..., description='')
    ...

class CfnBotDefPostdialogcodehookinvocationspecificationpropertyParams(pydantic.BaseModel):
    failure_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    success_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    success_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    success_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefPostfulfillmentstatusspecificationpropertyParams(pydantic.BaseModel):
    failure_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    success_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    success_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    success_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefPromptattemptspecificationpropertyParams(pydantic.BaseModel):
    allowed_input_types: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AllowedInputTypesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    audio_and_dtmf_input_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AudioAndDTMFInputSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    text_input_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_TextInputSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefPromptspecificationpropertyParams(pydantic.BaseModel):
    max_retries: typing.Union[int, float] = pydantic.Field(..., description='')
    message_groups_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    message_selection_strategy: typing.Optional[str] = pydantic.Field(None, description='')
    prompt_attempts_specification: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PromptAttemptSpecificationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefResponsespecificationpropertyParams(pydantic.BaseModel):
    message_groups_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnBotDefS3BucketlogdestinationpropertyParams(pydantic.BaseModel):
    log_prefix: str = pydantic.Field(..., description='')
    s3_bucket_arn: str = pydantic.Field(..., description='')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefS3LocationpropertyParams(pydantic.BaseModel):
    s3_bucket: str = pydantic.Field(..., description='')
    s3_object_key: str = pydantic.Field(..., description='')
    s3_object_version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefSsmlmessagepropertyParams(pydantic.BaseModel):
    value: str = pydantic.Field(..., description='')
    ...

class CfnBotDefSampleutterancepropertyParams(pydantic.BaseModel):
    utterance: str = pydantic.Field(..., description='')
    ...

class CfnBotDefSamplevaluepropertyParams(pydantic.BaseModel):
    value: str = pydantic.Field(..., description='')
    ...

class CfnBotDefSentimentanalysissettingspropertyParams(pydantic.BaseModel):
    detect_sentiment: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotDefSessionattributepropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefSlotcapturesettingpropertyParams(pydantic.BaseModel):
    capture_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    capture_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    capture_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    elicitation_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ElicitationCodeHookInvocationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_conditional: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConditionalSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_next_step: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_DialogStatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefSlotdefaultvaluepropertyParams(pydantic.BaseModel):
    default_value: str = pydantic.Field(..., description='')
    ...

class CfnBotDefSlotdefaultvaluespecificationpropertyParams(pydantic.BaseModel):
    default_value_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotDefaultValuePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnBotDefSlotprioritypropertyParams(pydantic.BaseModel):
    priority: typing.Union[int, float] = pydantic.Field(..., description='')
    slot_name: str = pydantic.Field(..., description='')
    ...

class CfnBotDefSlotpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    slot_type_name: str = pydantic.Field(..., description='')
    value_elicitation_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueElicitationSettingPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    multiple_values_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MultipleValuesSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    obfuscation_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ObfuscationSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefSlottypepropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    external_source_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ExternalSourceSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    parent_slot_type_signature: typing.Optional[str] = pydantic.Field(None, description='')
    slot_type_values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotTypeValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    value_selection_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueSelectionSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefSlottypevaluepropertyParams(pydantic.BaseModel):
    sample_value: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SampleValuePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    synonyms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SampleValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefSlotvalueelicitationsettingpropertyParams(pydantic.BaseModel):
    slot_constraint: str = pydantic.Field(..., description='')
    default_value_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotDefaultValueSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    prompt_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_PromptSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sample_utterances: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SampleUtterancePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    slot_capture_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotCaptureSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    wait_and_continue_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_WaitAndContinueSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefSlotvalueoverridemappropertyParams(pydantic.BaseModel):
    slot_name: typing.Optional[str] = pydantic.Field(None, description='')
    slot_value_override: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueOverridePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefSlotvalueoverridepropertyParams(pydantic.BaseModel):
    shape: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueOverridePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefSlotvaluepropertyParams(pydantic.BaseModel):
    interpreted_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefSlotvalueregexfilterpropertyParams(pydantic.BaseModel):
    pattern: str = pydantic.Field(..., description='')
    ...

class CfnBotDefSlotvalueselectionsettingpropertyParams(pydantic.BaseModel):
    resolution_strategy: str = pydantic.Field(..., description='')
    advanced_recognition_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_AdvancedRecognitionSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    regex_filter: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_SlotValueRegexFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefStillwaitingresponsespecificationpropertyParams(pydantic.BaseModel):
    frequency_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    message_groups_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_MessageGroupPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    timeout_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    allow_interrupt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnBotDefTestbotaliassettingspropertyParams(pydantic.BaseModel):
    bot_alias_locale_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_BotAliasLocaleSettingsItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    conversation_log_settings: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ConversationLogSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    sentiment_analysis_settings: typing.Any = pydantic.Field(None, description='')
    ...

class CfnBotDefTextinputspecificationpropertyParams(pydantic.BaseModel):
    start_timeout_ms: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnBotDefTextlogdestinationpropertyParams(pydantic.BaseModel):
    cloud_watch: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_CloudWatchLogGroupLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnBotDefTextlogsettingpropertyParams(pydantic.BaseModel):
    destination: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_TextLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotDefVoicesettingspropertyParams(pydantic.BaseModel):
    voice_id: str = pydantic.Field(..., description='')
    engine: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotDefWaitandcontinuespecificationpropertyParams(pydantic.BaseModel):
    continue_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    waiting_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_ResponseSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    is_active: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    still_waiting_response: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_StillWaitingResponseSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnBotDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBotDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnBotDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBotDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnBotDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnBotDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnBotDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnBotDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnBotDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBotDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnBotDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnBotDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBotDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_lex.CfnBotAlias
class CfnBotAliasDef(BaseCfnResource):
    bot_alias_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the bot alias.\n')
    bot_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the bot.\n')
    bot_alias_locale_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_BotAliasLocaleSettingsItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.\n")
    bot_alias_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. You can only add tags when you specify an alias. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    bot_version: typing.Optional[str] = pydantic.Field(None, description='The version of the bot that the bot alias references.\n')
    conversation_log_settings: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_ConversationLogSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies whether Amazon Lex logs text and audio for conversations with the bot. When you enable conversation logs, text logs store text input, transcripts of audio input, and associated metadata in Amazon CloudWatch logs. Audio logs store input in Amazon S3 .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the bot alias.\n')
    sentiment_analysis_settings: typing.Any = pydantic.Field(None, description='Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.')
    _init_params: typing.ClassVar[list[str]] = ['bot_alias_name', 'bot_id', 'bot_alias_locale_settings', 'bot_alias_tags', 'bot_version', 'conversation_log_settings', 'description', 'sentiment_analysis_settings']
    _method_names: typing.ClassVar[list[str]] = ['AudioLogDestinationProperty', 'AudioLogSettingProperty', 'BotAliasLocaleSettingsItemProperty', 'BotAliasLocaleSettingsProperty', 'CloudWatchLogGroupLogDestinationProperty', 'CodeHookSpecificationProperty', 'ConversationLogSettingsProperty', 'LambdaCodeHookProperty', 'S3BucketLogDestinationProperty', 'SentimentAnalysisSettingsProperty', 'TextLogDestinationProperty', 'TextLogSettingProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAlias'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnBotAliasDefConfig] = pydantic.Field(None)


class CfnBotAliasDefConfig(pydantic.BaseModel):
    AudioLogDestinationProperty: typing.Optional[list[CfnBotAliasDefAudiologdestinationpropertyParams]] = pydantic.Field(None, description='')
    AudioLogSettingProperty: typing.Optional[list[CfnBotAliasDefAudiologsettingpropertyParams]] = pydantic.Field(None, description='')
    BotAliasLocaleSettingsItemProperty: typing.Optional[list[CfnBotAliasDefBotaliaslocalesettingsitempropertyParams]] = pydantic.Field(None, description='')
    BotAliasLocaleSettingsProperty: typing.Optional[list[CfnBotAliasDefBotaliaslocalesettingspropertyParams]] = pydantic.Field(None, description='')
    CloudWatchLogGroupLogDestinationProperty: typing.Optional[list[CfnBotAliasDefCloudwatchloggrouplogdestinationpropertyParams]] = pydantic.Field(None, description='')
    CodeHookSpecificationProperty: typing.Optional[list[CfnBotAliasDefCodehookspecificationpropertyParams]] = pydantic.Field(None, description='')
    ConversationLogSettingsProperty: typing.Optional[list[CfnBotAliasDefConversationlogsettingspropertyParams]] = pydantic.Field(None, description='')
    LambdaCodeHookProperty: typing.Optional[list[CfnBotAliasDefLambdacodehookpropertyParams]] = pydantic.Field(None, description='')
    S3BucketLogDestinationProperty: typing.Optional[list[CfnBotAliasDefS3BucketlogdestinationpropertyParams]] = pydantic.Field(None, description='')
    SentimentAnalysisSettingsProperty: typing.Optional[list[CfnBotAliasDefSentimentanalysissettingspropertyParams]] = pydantic.Field(None, description='')
    TextLogDestinationProperty: typing.Optional[list[CfnBotAliasDefTextlogdestinationpropertyParams]] = pydantic.Field(None, description='')
    TextLogSettingProperty: typing.Optional[list[CfnBotAliasDefTextlogsettingpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnBotAliasDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnBotAliasDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnBotAliasDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnBotAliasDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnBotAliasDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnBotAliasDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnBotAliasDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnBotAliasDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnBotAliasDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnBotAliasDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnBotAliasDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnBotAliasDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnBotAliasDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnBotAliasDefAudiologdestinationpropertyParams(pydantic.BaseModel):
    s3_bucket: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_S3BucketLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnBotAliasDefAudiologsettingpropertyParams(pydantic.BaseModel):
    destination: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_AudioLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotAliasDefBotaliaslocalesettingsitempropertyParams(pydantic.BaseModel):
    bot_alias_locale_setting: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_BotAliasLocaleSettingsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    locale_id: str = pydantic.Field(..., description='')
    ...

class CfnBotAliasDefBotaliaslocalesettingspropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    code_hook_specification: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_CodeHookSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBotAliasDefCloudwatchloggrouplogdestinationpropertyParams(pydantic.BaseModel):
    cloud_watch_log_group_arn: str = pydantic.Field(..., description='')
    log_prefix: str = pydantic.Field(..., description='')
    ...

class CfnBotAliasDefCodehookspecificationpropertyParams(pydantic.BaseModel):
    lambda_code_hook: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_LambdaCodeHookPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnBotAliasDefConversationlogsettingspropertyParams(pydantic.BaseModel):
    audio_log_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_AudioLogSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    text_log_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_TextLogSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnBotAliasDefLambdacodehookpropertyParams(pydantic.BaseModel):
    code_hook_interface_version: str = pydantic.Field(..., description='')
    lambda_arn: str = pydantic.Field(..., description='')
    ...

class CfnBotAliasDefS3BucketlogdestinationpropertyParams(pydantic.BaseModel):
    log_prefix: str = pydantic.Field(..., description='')
    s3_bucket_arn: str = pydantic.Field(..., description='')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBotAliasDefSentimentanalysissettingspropertyParams(pydantic.BaseModel):
    detect_sentiment: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotAliasDefTextlogdestinationpropertyParams(pydantic.BaseModel):
    cloud_watch: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_CloudWatchLogGroupLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnBotAliasDefTextlogsettingpropertyParams(pydantic.BaseModel):
    destination: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_TextLogDestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnBotAliasDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnBotAliasDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBotAliasDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnBotAliasDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBotAliasDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnBotAliasDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnBotAliasDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnBotAliasDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnBotAliasDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnBotAliasDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBotAliasDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnBotAliasDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnBotAliasDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBotAliasDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_lex.CfnBotVersion
class CfnBotVersionDef(BaseCfnResource):
    bot_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the bot.\n')
    bot_version_locale_specification: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotVersion_BotVersionLocaleSpecificationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the version.')
    _init_params: typing.ClassVar[list[str]] = ['bot_id', 'bot_version_locale_specification', 'description']
    _method_names: typing.ClassVar[list[str]] = ['BotVersionLocaleDetailsProperty', 'BotVersionLocaleSpecificationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotVersion'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnBotVersionDefConfig] = pydantic.Field(None)


class CfnBotVersionDefConfig(pydantic.BaseModel):
    BotVersionLocaleDetailsProperty: typing.Optional[list[CfnBotVersionDefBotversionlocaledetailspropertyParams]] = pydantic.Field(None, description='')
    BotVersionLocaleSpecificationProperty: typing.Optional[list[CfnBotVersionDefBotversionlocalespecificationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnBotVersionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnBotVersionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnBotVersionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnBotVersionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnBotVersionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnBotVersionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnBotVersionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnBotVersionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnBotVersionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnBotVersionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnBotVersionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnBotVersionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnBotVersionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnBotVersionDefBotversionlocaledetailspropertyParams(pydantic.BaseModel):
    source_bot_version: str = pydantic.Field(..., description='')
    ...

class CfnBotVersionDefBotversionlocalespecificationpropertyParams(pydantic.BaseModel):
    bot_version_locale_details: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotVersion_BotVersionLocaleDetailsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    locale_id: str = pydantic.Field(..., description='')
    ...

class CfnBotVersionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnBotVersionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBotVersionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnBotVersionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBotVersionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnBotVersionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnBotVersionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnBotVersionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnBotVersionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnBotVersionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBotVersionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnBotVersionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnBotVersionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBotVersionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_lex.CfnResourcePolicy
class CfnResourcePolicyDef(BaseCfnResource):
    policy: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow IAM syntax. If the policy isn't valid, Amazon Lex returns a validation exception.\n")
    resource_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.')
    _init_params: typing.ClassVar[list[str]] = ['policy', 'resource_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnResourcePolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnResourcePolicyDefConfig] = pydantic.Field(None)


class CfnResourcePolicyDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnResourcePolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnResourcePolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnResourcePolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnResourcePolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnResourcePolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnResourcePolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnResourcePolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnResourcePolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnResourcePolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnResourcePolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnResourcePolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnResourcePolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnResourcePolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnResourcePolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnResourcePolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnResourcePolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnResourcePolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnResourcePolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnResourcePolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnResourcePolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnResourcePolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnResourcePolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnResourcePolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnResourcePolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnResourcePolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnResourcePolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnResourcePolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_lex.CfnBotAliasProps
class CfnBotAliasPropsDef(BaseCfnProperty):
    bot_alias_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the bot alias.\n')
    bot_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the bot.\n')
    bot_alias_locale_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_BotAliasLocaleSettingsItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.\n")
    bot_alias_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. You can only add tags when you specify an alias. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    bot_version: typing.Optional[str] = pydantic.Field(None, description='The version of the bot that the bot alias references.\n')
    conversation_log_settings: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotAlias_ConversationLogSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies whether Amazon Lex logs text and audio for conversations with the bot. When you enable conversation logs, text logs store text input, transcripts of audio input, and associated metadata in Amazon CloudWatch logs. Audio logs store input in Amazon S3 .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the bot alias.\n')
    sentiment_analysis_settings: typing.Any = pydantic.Field(None, description='Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lex-botalias.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # sentiment_analysis_settings: Any\n\n    cfn_bot_alias_props = lex.CfnBotAliasProps(\n        bot_alias_name="botAliasName",\n        bot_id="botId",\n\n        # the properties below are optional\n        bot_alias_locale_settings=[lex.CfnBotAlias.BotAliasLocaleSettingsItemProperty(\n            bot_alias_locale_setting=lex.CfnBotAlias.BotAliasLocaleSettingsProperty(\n                enabled=False,\n\n                # the properties below are optional\n                code_hook_specification=lex.CfnBotAlias.CodeHookSpecificationProperty(\n                    lambda_code_hook=lex.CfnBotAlias.LambdaCodeHookProperty(\n                        code_hook_interface_version="codeHookInterfaceVersion",\n                        lambda_arn="lambdaArn"\n                    )\n                )\n            ),\n            locale_id="localeId"\n        )],\n        bot_alias_tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        bot_version="botVersion",\n        conversation_log_settings=lex.CfnBotAlias.ConversationLogSettingsProperty(\n            audio_log_settings=[lex.CfnBotAlias.AudioLogSettingProperty(\n                destination=lex.CfnBotAlias.AudioLogDestinationProperty(\n                    s3_bucket=lex.CfnBotAlias.S3BucketLogDestinationProperty(\n                        log_prefix="logPrefix",\n                        s3_bucket_arn="s3BucketArn",\n\n                        # the properties below are optional\n                        kms_key_arn="kmsKeyArn"\n                    )\n                ),\n                enabled=False\n            )],\n            text_log_settings=[lex.CfnBotAlias.TextLogSettingProperty(\n                destination=lex.CfnBotAlias.TextLogDestinationProperty(\n                    cloud_watch=lex.CfnBotAlias.CloudWatchLogGroupLogDestinationProperty(\n                        cloud_watch_log_group_arn="cloudWatchLogGroupArn",\n                        log_prefix="logPrefix"\n                    )\n                ),\n                enabled=False\n            )]\n        ),\n        description="description",\n        sentiment_analysis_settings=sentiment_analysis_settings\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bot_alias_name', 'bot_id', 'bot_alias_locale_settings', 'bot_alias_tags', 'bot_version', 'conversation_log_settings', 'description', 'sentiment_analysis_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotAliasProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotProps
class CfnBotPropsDef(BaseCfnProperty):
    data_privacy: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='By default, data stored by Amazon Lex is encrypted. The ``DataPrivacy`` structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.\n')
    idle_session_ttl_in_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout. You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.\n")
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the bot locale.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the IAM role used to build and run the bot.\n')
    auto_build_bot_locales: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether Amazon Lex V2 should automatically build the locales for the bot after a change.\n')
    bot_file_s3_location: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon S3 location of files used to import a bot. The files must be in the import format specified in `JSON format for importing and exporting <https://docs.aws.amazon.com/lexv2/latest/dg/import-export-format.html>`_ in the *Amazon Lex developer guide.*\n')
    bot_locales: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_BotLocalePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of locales for the bot.\n')
    bot_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of tags to add to the bot. You can only add tags when you import a bot. You can't use the ``UpdateBot`` operation to update tags. To update tags, use the ``TagResource`` operation.\n")
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the version.\n')
    test_bot_alias_settings: typing.Union[models.UnsupportedResource, models.aws_lex.CfnBot_TestBotAliasSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies configuration settings for the alias used to test the bot. If the ``TestBotAliasSettings`` property is not specified, the settings are configured with default values.\n')
    test_bot_alias_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of tags to add to the test alias for a bot. You can only add tags when you import a bot. You can't use the ``UpdateAlias`` operation to update tags. To update tags on the test alias, use the ``TagResource`` operation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lex-bot.html\n:exampleMetadata: fixture=_generated\n\nExample::\n")
    _init_params: typing.ClassVar[list[str]] = ['data_privacy', 'idle_session_ttl_in_seconds', 'name', 'role_arn', 'auto_build_bot_locales', 'bot_file_s3_location', 'bot_locales', 'bot_tags', 'description', 'test_bot_alias_settings', 'test_bot_alias_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnBotVersionProps
class CfnBotVersionPropsDef(BaseCfnProperty):
    bot_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the bot.\n')
    bot_version_locale_specification: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_lex.CfnBotVersion_BotVersionLocaleSpecificationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the version.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lex-botversion.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    cfn_bot_version_props = lex.CfnBotVersionProps(\n        bot_id="botId",\n        bot_version_locale_specification=[lex.CfnBotVersion.BotVersionLocaleSpecificationProperty(\n            bot_version_locale_details=lex.CfnBotVersion.BotVersionLocaleDetailsProperty(\n                source_bot_version="sourceBotVersion"\n            ),\n            locale_id="localeId"\n        )],\n\n        # the properties below are optional\n        description="description"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bot_id', 'bot_version_locale_specification', 'description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnBotVersionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_lex.CfnResourcePolicyProps
class CfnResourcePolicyPropsDef(BaseCfnProperty):
    policy: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow IAM syntax. If the policy isn't valid, Amazon Lex returns a validation exception.\n")
    resource_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lex-resourcepolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_lex as lex\n\n    # policy: Any\n\n    cfn_resource_policy_props = lex.CfnResourcePolicyProps(\n        policy=policy,\n        resource_arn="resourceArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['policy', 'resource_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lex.CfnResourcePolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnBot_AdvancedRecognitionSettingProperty: typing.Optional[dict[str, CfnBot_AdvancedRecognitionSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_AllowedInputTypesProperty: typing.Optional[dict[str, CfnBot_AllowedInputTypesPropertyDef]] = pydantic.Field(None)
    CfnBot_AudioAndDTMFInputSpecificationProperty: typing.Optional[dict[str, CfnBot_AudioAndDTMFInputSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_AudioLogDestinationProperty: typing.Optional[dict[str, CfnBot_AudioLogDestinationPropertyDef]] = pydantic.Field(None)
    CfnBot_AudioLogSettingProperty: typing.Optional[dict[str, CfnBot_AudioLogSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_AudioSpecificationProperty: typing.Optional[dict[str, CfnBot_AudioSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_BotAliasLocaleSettingsItemProperty: typing.Optional[dict[str, CfnBot_BotAliasLocaleSettingsItemPropertyDef]] = pydantic.Field(None)
    CfnBot_BotAliasLocaleSettingsProperty: typing.Optional[dict[str, CfnBot_BotAliasLocaleSettingsPropertyDef]] = pydantic.Field(None)
    CfnBot_BotLocaleProperty: typing.Optional[dict[str, CfnBot_BotLocalePropertyDef]] = pydantic.Field(None)
    CfnBot_ButtonProperty: typing.Optional[dict[str, CfnBot_ButtonPropertyDef]] = pydantic.Field(None)
    CfnBot_CloudWatchLogGroupLogDestinationProperty: typing.Optional[dict[str, CfnBot_CloudWatchLogGroupLogDestinationPropertyDef]] = pydantic.Field(None)
    CfnBot_CodeHookSpecificationProperty: typing.Optional[dict[str, CfnBot_CodeHookSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_ConditionalBranchProperty: typing.Optional[dict[str, CfnBot_ConditionalBranchPropertyDef]] = pydantic.Field(None)
    CfnBot_ConditionalSpecificationProperty: typing.Optional[dict[str, CfnBot_ConditionalSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_ConditionProperty: typing.Optional[dict[str, CfnBot_ConditionPropertyDef]] = pydantic.Field(None)
    CfnBot_ConversationLogSettingsProperty: typing.Optional[dict[str, CfnBot_ConversationLogSettingsPropertyDef]] = pydantic.Field(None)
    CfnBot_CustomPayloadProperty: typing.Optional[dict[str, CfnBot_CustomPayloadPropertyDef]] = pydantic.Field(None)
    CfnBot_CustomVocabularyItemProperty: typing.Optional[dict[str, CfnBot_CustomVocabularyItemPropertyDef]] = pydantic.Field(None)
    CfnBot_CustomVocabularyProperty: typing.Optional[dict[str, CfnBot_CustomVocabularyPropertyDef]] = pydantic.Field(None)
    CfnBot_DataPrivacyProperty: typing.Optional[dict[str, CfnBot_DataPrivacyPropertyDef]] = pydantic.Field(None)
    CfnBot_DefaultConditionalBranchProperty: typing.Optional[dict[str, CfnBot_DefaultConditionalBranchPropertyDef]] = pydantic.Field(None)
    CfnBot_DialogActionProperty: typing.Optional[dict[str, CfnBot_DialogActionPropertyDef]] = pydantic.Field(None)
    CfnBot_DialogCodeHookInvocationSettingProperty: typing.Optional[dict[str, CfnBot_DialogCodeHookInvocationSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_DialogCodeHookSettingProperty: typing.Optional[dict[str, CfnBot_DialogCodeHookSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_DialogStateProperty: typing.Optional[dict[str, CfnBot_DialogStatePropertyDef]] = pydantic.Field(None)
    CfnBot_DTMFSpecificationProperty: typing.Optional[dict[str, CfnBot_DTMFSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_ElicitationCodeHookInvocationSettingProperty: typing.Optional[dict[str, CfnBot_ElicitationCodeHookInvocationSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_ExternalSourceSettingProperty: typing.Optional[dict[str, CfnBot_ExternalSourceSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_FulfillmentCodeHookSettingProperty: typing.Optional[dict[str, CfnBot_FulfillmentCodeHookSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_FulfillmentStartResponseSpecificationProperty: typing.Optional[dict[str, CfnBot_FulfillmentStartResponseSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_FulfillmentUpdateResponseSpecificationProperty: typing.Optional[dict[str, CfnBot_FulfillmentUpdateResponseSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_FulfillmentUpdatesSpecificationProperty: typing.Optional[dict[str, CfnBot_FulfillmentUpdatesSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_GrammarSlotTypeSettingProperty: typing.Optional[dict[str, CfnBot_GrammarSlotTypeSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_GrammarSlotTypeSourceProperty: typing.Optional[dict[str, CfnBot_GrammarSlotTypeSourcePropertyDef]] = pydantic.Field(None)
    CfnBot_ImageResponseCardProperty: typing.Optional[dict[str, CfnBot_ImageResponseCardPropertyDef]] = pydantic.Field(None)
    CfnBot_InitialResponseSettingProperty: typing.Optional[dict[str, CfnBot_InitialResponseSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_InputContextProperty: typing.Optional[dict[str, CfnBot_InputContextPropertyDef]] = pydantic.Field(None)
    CfnBot_IntentClosingSettingProperty: typing.Optional[dict[str, CfnBot_IntentClosingSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_IntentConfirmationSettingProperty: typing.Optional[dict[str, CfnBot_IntentConfirmationSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_IntentOverrideProperty: typing.Optional[dict[str, CfnBot_IntentOverridePropertyDef]] = pydantic.Field(None)
    CfnBot_IntentProperty: typing.Optional[dict[str, CfnBot_IntentPropertyDef]] = pydantic.Field(None)
    CfnBot_KendraConfigurationProperty: typing.Optional[dict[str, CfnBot_KendraConfigurationPropertyDef]] = pydantic.Field(None)
    CfnBot_LambdaCodeHookProperty: typing.Optional[dict[str, CfnBot_LambdaCodeHookPropertyDef]] = pydantic.Field(None)
    CfnBot_MessageGroupProperty: typing.Optional[dict[str, CfnBot_MessageGroupPropertyDef]] = pydantic.Field(None)
    CfnBot_MessageProperty: typing.Optional[dict[str, CfnBot_MessagePropertyDef]] = pydantic.Field(None)
    CfnBot_MultipleValuesSettingProperty: typing.Optional[dict[str, CfnBot_MultipleValuesSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_ObfuscationSettingProperty: typing.Optional[dict[str, CfnBot_ObfuscationSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_OutputContextProperty: typing.Optional[dict[str, CfnBot_OutputContextPropertyDef]] = pydantic.Field(None)
    CfnBot_PlainTextMessageProperty: typing.Optional[dict[str, CfnBot_PlainTextMessagePropertyDef]] = pydantic.Field(None)
    CfnBot_PostDialogCodeHookInvocationSpecificationProperty: typing.Optional[dict[str, CfnBot_PostDialogCodeHookInvocationSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_PostFulfillmentStatusSpecificationProperty: typing.Optional[dict[str, CfnBot_PostFulfillmentStatusSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_PromptAttemptSpecificationProperty: typing.Optional[dict[str, CfnBot_PromptAttemptSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_PromptSpecificationProperty: typing.Optional[dict[str, CfnBot_PromptSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_ResponseSpecificationProperty: typing.Optional[dict[str, CfnBot_ResponseSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_S3BucketLogDestinationProperty: typing.Optional[dict[str, CfnBot_S3BucketLogDestinationPropertyDef]] = pydantic.Field(None)
    CfnBot_S3LocationProperty: typing.Optional[dict[str, CfnBot_S3LocationPropertyDef]] = pydantic.Field(None)
    CfnBot_SampleUtteranceProperty: typing.Optional[dict[str, CfnBot_SampleUtterancePropertyDef]] = pydantic.Field(None)
    CfnBot_SampleValueProperty: typing.Optional[dict[str, CfnBot_SampleValuePropertyDef]] = pydantic.Field(None)
    CfnBot_SentimentAnalysisSettingsProperty: typing.Optional[dict[str, CfnBot_SentimentAnalysisSettingsPropertyDef]] = pydantic.Field(None)
    CfnBot_SessionAttributeProperty: typing.Optional[dict[str, CfnBot_SessionAttributePropertyDef]] = pydantic.Field(None)
    CfnBot_SlotCaptureSettingProperty: typing.Optional[dict[str, CfnBot_SlotCaptureSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_SlotDefaultValueProperty: typing.Optional[dict[str, CfnBot_SlotDefaultValuePropertyDef]] = pydantic.Field(None)
    CfnBot_SlotDefaultValueSpecificationProperty: typing.Optional[dict[str, CfnBot_SlotDefaultValueSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_SlotPriorityProperty: typing.Optional[dict[str, CfnBot_SlotPriorityPropertyDef]] = pydantic.Field(None)
    CfnBot_SlotProperty: typing.Optional[dict[str, CfnBot_SlotPropertyDef]] = pydantic.Field(None)
    CfnBot_SlotTypeProperty: typing.Optional[dict[str, CfnBot_SlotTypePropertyDef]] = pydantic.Field(None)
    CfnBot_SlotTypeValueProperty: typing.Optional[dict[str, CfnBot_SlotTypeValuePropertyDef]] = pydantic.Field(None)
    CfnBot_SlotValueElicitationSettingProperty: typing.Optional[dict[str, CfnBot_SlotValueElicitationSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_SlotValueOverrideMapProperty: typing.Optional[dict[str, CfnBot_SlotValueOverrideMapPropertyDef]] = pydantic.Field(None)
    CfnBot_SlotValueOverrideProperty: typing.Optional[dict[str, CfnBot_SlotValueOverridePropertyDef]] = pydantic.Field(None)
    CfnBot_SlotValueProperty: typing.Optional[dict[str, CfnBot_SlotValuePropertyDef]] = pydantic.Field(None)
    CfnBot_SlotValueRegexFilterProperty: typing.Optional[dict[str, CfnBot_SlotValueRegexFilterPropertyDef]] = pydantic.Field(None)
    CfnBot_SlotValueSelectionSettingProperty: typing.Optional[dict[str, CfnBot_SlotValueSelectionSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_SSMLMessageProperty: typing.Optional[dict[str, CfnBot_SSMLMessagePropertyDef]] = pydantic.Field(None)
    CfnBot_StillWaitingResponseSpecificationProperty: typing.Optional[dict[str, CfnBot_StillWaitingResponseSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_TestBotAliasSettingsProperty: typing.Optional[dict[str, CfnBot_TestBotAliasSettingsPropertyDef]] = pydantic.Field(None)
    CfnBot_TextInputSpecificationProperty: typing.Optional[dict[str, CfnBot_TextInputSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot_TextLogDestinationProperty: typing.Optional[dict[str, CfnBot_TextLogDestinationPropertyDef]] = pydantic.Field(None)
    CfnBot_TextLogSettingProperty: typing.Optional[dict[str, CfnBot_TextLogSettingPropertyDef]] = pydantic.Field(None)
    CfnBot_VoiceSettingsProperty: typing.Optional[dict[str, CfnBot_VoiceSettingsPropertyDef]] = pydantic.Field(None)
    CfnBot_WaitAndContinueSpecificationProperty: typing.Optional[dict[str, CfnBot_WaitAndContinueSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_AudioLogDestinationProperty: typing.Optional[dict[str, CfnBotAlias_AudioLogDestinationPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_AudioLogSettingProperty: typing.Optional[dict[str, CfnBotAlias_AudioLogSettingPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_BotAliasLocaleSettingsItemProperty: typing.Optional[dict[str, CfnBotAlias_BotAliasLocaleSettingsItemPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_BotAliasLocaleSettingsProperty: typing.Optional[dict[str, CfnBotAlias_BotAliasLocaleSettingsPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_CloudWatchLogGroupLogDestinationProperty: typing.Optional[dict[str, CfnBotAlias_CloudWatchLogGroupLogDestinationPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_CodeHookSpecificationProperty: typing.Optional[dict[str, CfnBotAlias_CodeHookSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_ConversationLogSettingsProperty: typing.Optional[dict[str, CfnBotAlias_ConversationLogSettingsPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_LambdaCodeHookProperty: typing.Optional[dict[str, CfnBotAlias_LambdaCodeHookPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_S3BucketLogDestinationProperty: typing.Optional[dict[str, CfnBotAlias_S3BucketLogDestinationPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_SentimentAnalysisSettingsProperty: typing.Optional[dict[str, CfnBotAlias_SentimentAnalysisSettingsPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_TextLogDestinationProperty: typing.Optional[dict[str, CfnBotAlias_TextLogDestinationPropertyDef]] = pydantic.Field(None)
    CfnBotAlias_TextLogSettingProperty: typing.Optional[dict[str, CfnBotAlias_TextLogSettingPropertyDef]] = pydantic.Field(None)
    CfnBotVersion_BotVersionLocaleDetailsProperty: typing.Optional[dict[str, CfnBotVersion_BotVersionLocaleDetailsPropertyDef]] = pydantic.Field(None)
    CfnBotVersion_BotVersionLocaleSpecificationProperty: typing.Optional[dict[str, CfnBotVersion_BotVersionLocaleSpecificationPropertyDef]] = pydantic.Field(None)
    CfnBot: typing.Optional[dict[str, CfnBotDef]] = pydantic.Field(None)
    CfnBotAlias: typing.Optional[dict[str, CfnBotAliasDef]] = pydantic.Field(None)
    CfnBotVersion: typing.Optional[dict[str, CfnBotVersionDef]] = pydantic.Field(None)
    CfnResourcePolicy: typing.Optional[dict[str, CfnResourcePolicyDef]] = pydantic.Field(None)
    CfnBotAliasProps: typing.Optional[dict[str, CfnBotAliasPropsDef]] = pydantic.Field(None)
    CfnBotProps: typing.Optional[dict[str, CfnBotPropsDef]] = pydantic.Field(None)
    CfnBotVersionProps: typing.Optional[dict[str, CfnBotVersionPropsDef]] = pydantic.Field(None)
    CfnResourcePolicyProps: typing.Optional[dict[str, CfnResourcePolicyPropsDef]] = pydantic.Field(None)
    ...
