from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_s3_notifications.LambdaDestination
class LambdaDestinationDef(BaseClass):
    fn: typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(..., description='-')
    _init_params: typing.ClassVar[list[str]] = ['fn']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_s3_notifications.LambdaDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[LambdaDestinationDefConfig] = pydantic.Field(None)


class LambdaDestinationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[LambdaDestinationDefBindParams]] = pydantic.Field(None, description='Registers this resource to receive notifications for the specified bucket.\nThis method will only be called once for each destination/bucket\npair and the result will be cached, so there is no need to implement\nidempotency in each destination.')

class LambdaDestinationDefBindParams(pydantic.BaseModel):
    _scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_s3_notifications.SnsDestination
class SnsDestinationDef(BaseClass):
    topic: typing.Union[models.aws_sns.TopicBaseDef, models.aws_sns.TopicDef] = pydantic.Field(..., description='-')
    _init_params: typing.ClassVar[list[str]] = ['topic']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_s3_notifications.SnsDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[SnsDestinationDefConfig] = pydantic.Field(None)


class SnsDestinationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[SnsDestinationDefBindParams]] = pydantic.Field(None, description='Registers this resource to receive notifications for the specified bucket.\nThis method will only be called once for each destination/bucket\npair and the result will be cached, so there is no need to implement\nidempotency in each destination.')

class SnsDestinationDefBindParams(pydantic.BaseModel):
    _scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_s3_notifications.SqsDestination
class SqsDestinationDef(BaseClass):
    queue: typing.Union[models.aws_sqs.QueueBaseDef, models.aws_sqs.QueueDef] = pydantic.Field(..., description='-')
    _init_params: typing.ClassVar[list[str]] = ['queue']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_s3_notifications.SqsDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[SqsDestinationDefConfig] = pydantic.Field(None)


class SqsDestinationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[SqsDestinationDefBindParams]] = pydantic.Field(None, description='Allows using SQS queues as destinations for bucket notifications.\nUse ``bucket.onEvent(event, queue)`` to subscribe.')

class SqsDestinationDefBindParams(pydantic.BaseModel):
    _scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='-')
    ...


import models

class ModuleModel(pydantic.BaseModel):
    LambdaDestination: typing.Optional[dict[str, LambdaDestinationDef]] = pydantic.Field(None)
    SnsDestination: typing.Optional[dict[str, SnsDestinationDef]] = pydantic.Field(None)
    SqsDestination: typing.Optional[dict[str, SqsDestinationDef]] = pydantic.Field(None)
    ...
