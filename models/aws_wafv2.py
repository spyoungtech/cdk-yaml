from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration.ActionConditionProperty
class CfnLoggingConfiguration_ActionConditionPropertyDef(BaseStruct):
    action: str = pydantic.Field(..., description='The action setting that a log record must contain in order to meet the condition. This is the action that AWS WAF applied to the web request. For rule groups, this is either the configured rule action setting, or if you\'ve applied a rule action override to the rule, it\'s the override action. The value ``EXCLUDED_AS_COUNT`` matches on excluded rules and also on rules that have a rule action override of Count.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-loggingconfiguration-actioncondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    action_condition_property = wafv2.CfnLoggingConfiguration.ActionConditionProperty(\n        action="action"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration.ActionConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration.ConditionProperty
class CfnLoggingConfiguration_ConditionPropertyDef(BaseStruct):
    action_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_ActionConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A single action condition. This is the action setting that a log record must contain in order to meet the condition.\n')
    label_name_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_LabelNameConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A single label name condition. This is the fully qualified label name that a log record must contain in order to meet the condition. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-loggingconfiguration-condition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    condition_property = wafv2.CfnLoggingConfiguration.ConditionProperty(\n        action_condition=wafv2.CfnLoggingConfiguration.ActionConditionProperty(\n            action="action"\n        ),\n        label_name_condition=wafv2.CfnLoggingConfiguration.LabelNameConditionProperty(\n            label_name="labelName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action_condition', 'label_name_condition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration.ConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration.FieldToMatchProperty
class CfnLoggingConfiguration_FieldToMatchPropertyDef(BaseStruct):
    json_body: typing.Any = pydantic.Field(None, description='Redact the request body JSON.\n')
    method: typing.Any = pydantic.Field(None, description='Redact the indicated HTTP method. The method indicates the type of operation that the request is asking the origin to perform.\n')
    query_string: typing.Any = pydantic.Field(None, description='Redact the query string. This is the part of a URL that appears after a ``?`` character, if any.\n')
    single_header: typing.Any = pydantic.Field(None, description='Redact a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn\'t case sensitive. Example JSON: ``"SingleHeader": { "Name": "haystack" }``\n')
    uri_path: typing.Any = pydantic.Field(None, description='Redact the request URI path. This is the part of the web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-loggingconfiguration-fieldtomatch.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # json_body: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # uri_path: Any\n\n    field_to_match_property = wafv2.CfnLoggingConfiguration.FieldToMatchProperty(\n        json_body=json_body,\n        method=method,\n        query_string=query_string,\n        single_header=single_header,\n        uri_path=uri_path\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['json_body', 'method', 'query_string', 'single_header', 'uri_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration.FieldToMatchProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration.FilterProperty
class CfnLoggingConfiguration_FilterPropertyDef(BaseStruct):
    behavior: str = pydantic.Field(..., description="How to handle logs that satisfy the filter's conditions and requirement.\n")
    conditions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_ConditionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Match conditions for the filter.\n')
    requirement: str = pydantic.Field(..., description='Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-loggingconfiguration-filter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    filter_property = wafv2.CfnLoggingConfiguration.FilterProperty(\n        behavior="behavior",\n        conditions=[wafv2.CfnLoggingConfiguration.ConditionProperty(\n            action_condition=wafv2.CfnLoggingConfiguration.ActionConditionProperty(\n                action="action"\n            ),\n            label_name_condition=wafv2.CfnLoggingConfiguration.LabelNameConditionProperty(\n                label_name="labelName"\n            )\n        )],\n        requirement="requirement"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['behavior', 'conditions', 'requirement']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration.FilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration.JsonBodyProperty
class CfnLoggingConfiguration_JsonBodyPropertyDef(BaseStruct):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_MatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria.\n')
    match_scope: str = pydantic.Field(..., description='The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , AWS WAF matches against keys and values.\n')
    invalid_fallback_behavior: typing.Optional[str] = pydantic.Field(None, description='What AWS WAF should do if it fails to completely parse the JSON body. The options are the following:. - ``EVALUATE_AS_STRING`` - Inspect the body as plain text. AWS WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement. If you don\'t provide this setting, AWS WAF parses and evaluates the content only up to the first parsing failure that it encounters. AWS WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as invalid characters, duplicate keys, truncation, and any content whose root node isn\'t an object or an array. AWS WAF parses the JSON in the following examples as two valid key, value pairs: - Missing comma: ``{"key1":"value1""key2":"value2"}`` - Missing colon: ``{"key1":"value1","key2""value2"}`` - Extra colons: ``{"key1"::"value1","key2""value2"}``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-loggingconfiguration-jsonbody.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    json_body_property = wafv2.CfnLoggingConfiguration.JsonBodyProperty(\n        match_pattern=wafv2.CfnLoggingConfiguration.MatchPatternProperty(\n            all=all,\n            included_paths=["includedPaths"]\n        ),\n        match_scope="matchScope",\n\n        # the properties below are optional\n        invalid_fallback_behavior="invalidFallbackBehavior"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['match_pattern', 'match_scope', 'invalid_fallback_behavior']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration.JsonBodyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration.LabelNameConditionProperty
class CfnLoggingConfiguration_LabelNameConditionPropertyDef(BaseStruct):
    label_name: str = pydantic.Field(..., description='The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-loggingconfiguration-labelnamecondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    label_name_condition_property = wafv2.CfnLoggingConfiguration.LabelNameConditionProperty(\n        label_name="labelName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['label_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration.LabelNameConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration.LoggingFilterProperty
class CfnLoggingConfiguration_LoggingFilterPropertyDef(BaseStruct):
    default_behavior: str = pydantic.Field(..., description="Default handling for logs that don't match any of the specified filtering conditions.\n")
    filters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_FilterPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The filters that you want to apply to the logs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-loggingconfiguration-loggingfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    logging_filter_property = wafv2.CfnLoggingConfiguration.LoggingFilterProperty(\n        default_behavior="defaultBehavior",\n        filters=[wafv2.CfnLoggingConfiguration.FilterProperty(\n            behavior="behavior",\n            conditions=[wafv2.CfnLoggingConfiguration.ConditionProperty(\n                action_condition=wafv2.CfnLoggingConfiguration.ActionConditionProperty(\n                    action="action"\n                ),\n                label_name_condition=wafv2.CfnLoggingConfiguration.LabelNameConditionProperty(\n                    label_name="labelName"\n                )\n            )],\n            requirement="requirement"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_behavior', 'filters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration.LoggingFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration.MatchPatternProperty
class CfnLoggingConfiguration_MatchPatternPropertyDef(BaseStruct):
    all: typing.Any = pydantic.Field(None, description='Match all of the elements. You must specify either this setting or the ``IncludedPaths`` setting, but not both.\n')
    included_paths: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Match only the specified include paths. Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901>`_ . You must specify either this setting or the ``All`` setting, but not both. .. epigraph:: Don\'t use this option to include all paths. Instead, use the ``All`` setting.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-loggingconfiguration-matchpattern.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    match_pattern_property = wafv2.CfnLoggingConfiguration.MatchPatternProperty(\n        all=all,\n        included_paths=["includedPaths"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['all', 'included_paths']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration.MatchPatternProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration.SingleHeaderProperty
class CfnLoggingConfiguration_SingleHeaderPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the query header to inspect.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-loggingconfiguration-singleheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    single_header_property = wafv2.CfnLoggingConfiguration.SingleHeaderProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration.SingleHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.AllowProperty
class CfnRuleGroup_AllowPropertyDef(BaseStruct):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnRuleGroup.AllowProperty.CustomRequestHandling``.')
    _init_params: typing.ClassVar[list[str]] = ['custom_request_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.AllowProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.AndStatementProperty
class CfnRuleGroup_AndStatementPropertyDef(BaseStruct):
    statements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The statements to combine with AND logic. You can use any statements that can be nested.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-andstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnRuleGroup.StatementProperty\n    # uri_path: Any\n\n    and_statement_property = wafv2.CfnRuleGroup.AndStatementProperty(\n        statements=[wafv2.CfnRuleGroup.StatementProperty(\n            and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['statements']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.AndStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.BlockProperty
class CfnRuleGroup_BlockPropertyDef(BaseStruct):
    custom_response: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomResponsePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnRuleGroup.BlockProperty.CustomResponse``.')
    _init_params: typing.ClassVar[list[str]] = ['custom_response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.BlockProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.BodyProperty
class CfnRuleGroup_BodyPropertyDef(BaseStruct):
    oversize_handling: typing.Optional[str] = pydantic.Field(None, description='What AWS WAF should do if the body is larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. If the body is larger than the limit, the underlying host service only forwards the contents that are below the limit to AWS WAF for inspection. The default limit is 8 KB (8,192 kilobytes) for regional resources and 16 KB (16,384 kilobytes) for CloudFront distributions. For CloudFront distributions, you can increase the limit in the web ACL ``AssociationConfig`` , for additional processing fees. The options for oversize handling are the following: - ``CONTINUE`` - Inspect the available body contents normally, according to the rule inspection criteria. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement. You can combine the ``MATCH`` or ``NO_MATCH`` settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit. Default: ``CONTINUE``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-body.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    body_property = wafv2.CfnRuleGroup.BodyProperty(\n        oversize_handling="oversizeHandling"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['oversize_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.BodyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.ByteMatchStatementProperty
class CfnRuleGroup_ByteMatchStatementPropertyDef(BaseStruct):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    positional_constraint: str = pydantic.Field(..., description="The area within the portion of the web request that you want AWS WAF to search for ``SearchString`` . Valid values include the following: *CONTAINS* The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter. *CONTAINS_WORD* The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true: - ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . - ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . *EXACTLY* The value of the specified part of the web request must exactly match the value of ``SearchString`` . *STARTS_WITH* The value of ``SearchString`` must appear at the beginning of the specified part of the web request. *ENDS_WITH* The value of ``SearchString`` must appear at the end of the specified part of the web request.\n")
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n')
    search_string: typing.Optional[str] = pydantic.Field(None, description="A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in ``FieldToMatch`` . The maximum length of the value is 200 bytes. For alphabetic characters A-Z and a-z, the value is case sensitive. Don't encode this string. Provide the value that you want AWS WAF to search for. AWS CloudFormation automatically base64 encodes the value for you. For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you provide the string ``BadBot`` in the value of ``SearchString`` . You must specify either ``SearchString`` or ``SearchStringBase64`` in a ``ByteMatchStatement`` .\n")
    search_string_base64: typing.Optional[str] = pydantic.Field(None, description='String to search for in a web request component, base64-encoded. If you don\'t want to encode the string, specify the unencoded value in ``SearchString`` instead. You must specify either ``SearchString`` or ``SearchStringBase64`` in a ``ByteMatchStatement`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-bytematchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    byte_match_statement_property = wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n        field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnRuleGroup.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnRuleGroup.HeadersProperty(\n                match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        positional_constraint="positionalConstraint",\n        text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )],\n\n        # the properties below are optional\n        search_string="searchString",\n        search_string_base64="searchStringBase64"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['field_to_match', 'positional_constraint', 'text_transformations', 'search_string', 'search_string_base64']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.ByteMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.CaptchaConfigProperty
class CfnRuleGroup_CaptchaConfigPropertyDef(BaseStruct):
    immunity_time_property: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ImmunityTimePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines how long a ``CAPTCHA`` timestamp in the token remains valid after the client successfully solves a ``CAPTCHA`` puzzle.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-captchaconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    captcha_config_property = wafv2.CfnRuleGroup.CaptchaConfigProperty(\n        immunity_time_property=wafv2.CfnRuleGroup.ImmunityTimePropertyProperty(\n            immunity_time=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['immunity_time_property']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.CaptchaConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.CaptchaProperty
class CfnRuleGroup_CaptchaPropertyDef(BaseStruct):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnRuleGroup.CaptchaProperty.CustomRequestHandling``.')
    _init_params: typing.ClassVar[list[str]] = ['custom_request_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.CaptchaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.ChallengeConfigProperty
class CfnRuleGroup_ChallengeConfigPropertyDef(BaseStruct):
    immunity_time_property: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ImmunityTimePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines how long a challenge timestamp in the token remains valid after the client successfully responds to a challenge.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-challengeconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    challenge_config_property = wafv2.CfnRuleGroup.ChallengeConfigProperty(\n        immunity_time_property=wafv2.CfnRuleGroup.ImmunityTimePropertyProperty(\n            immunity_time=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['immunity_time_property']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.ChallengeConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.ChallengeProperty
class CfnRuleGroup_ChallengePropertyDef(BaseStruct):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnRuleGroup.ChallengeProperty.CustomRequestHandling``.')
    _init_params: typing.ClassVar[list[str]] = ['custom_request_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.ChallengeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.CookieMatchPatternProperty
class CfnRuleGroup_CookieMatchPatternPropertyDef(BaseStruct):
    all: typing.Any = pydantic.Field(None, description='Inspect all cookies.\n')
    excluded_cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="Inspect only the cookies whose keys don't match any of the strings specified here.\n")
    included_cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Inspect only the cookies that have a key that matches one of the strings specified here.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-cookiematchpattern.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    cookie_match_pattern_property = wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n        all=all,\n        excluded_cookies=["excludedCookies"],\n        included_cookies=["includedCookies"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['all', 'excluded_cookies', 'included_cookies']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.CookieMatchPatternProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.CookiesProperty
class CfnRuleGroup_CookiesPropertyDef(BaseStruct):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CookieMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either ``All`` , ``IncludedCookies`` , or ``ExcludedCookies`` . Example JSON: ``"MatchPattern": { "IncludedCookies": {"KeyToInclude1", "KeyToInclude2", "KeyToInclude3"} }``\n')
    match_scope: str = pydantic.Field(..., description='The parts of the cookies to inspect with the rule inspection criteria. If you specify ``All`` , AWS WAF inspects both keys and values.\n')
    oversize_handling: str = pydantic.Field(..., description='What AWS WAF should do if the cookies of the request are more numerous or larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF . The options for oversize handling are the following: - ``CONTINUE`` - Inspect the available cookies normally, according to the rule inspection criteria. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-cookies.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    cookies_property = wafv2.CfnRuleGroup.CookiesProperty(\n        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n            all=all,\n            excluded_cookies=["excludedCookies"],\n            included_cookies=["includedCookies"]\n        ),\n        match_scope="matchScope",\n        oversize_handling="oversizeHandling"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['match_pattern', 'match_scope', 'oversize_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.CookiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.CountProperty
class CfnRuleGroup_CountPropertyDef(BaseStruct):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnRuleGroup.CountProperty.CustomRequestHandling``.')
    _init_params: typing.ClassVar[list[str]] = ['custom_request_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.CountProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.CustomHTTPHeaderProperty
class CfnRuleGroup_CustomHTTPHeaderPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , AWS WAF inserts the header ``x-amzn-waf-sample`` .\n')
    value: str = pydantic.Field(..., description='The value of the custom header.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-customhttpheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    custom_hTTPHeader_property = wafv2.CfnRuleGroup.CustomHTTPHeaderProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.CustomHTTPHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.CustomRequestHandlingProperty
class CfnRuleGroup_CustomRequestHandlingPropertyDef(BaseStruct):
    insert_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomHTTPHeaderPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The HTTP headers to insert into the request. Duplicate header names are not allowed. For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-customrequesthandling.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    custom_request_handling_property = wafv2.CfnRuleGroup.CustomRequestHandlingProperty(\n        insert_headers=[wafv2.CfnRuleGroup.CustomHTTPHeaderProperty(\n            name="name",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['insert_headers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.CustomRequestHandlingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.CustomResponseBodyProperty
class CfnRuleGroup_CustomResponseBodyPropertyDef(BaseStruct):
    content: str = pydantic.Field(..., description='The payload of the custom response. You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ``ContentType`` setting. For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n')
    content_type: str = pydantic.Field(..., description='The type of content in the payload that you are defining in the ``Content`` string.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-customresponsebody.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    custom_response_body_property = wafv2.CfnRuleGroup.CustomResponseBodyProperty(\n        content="content",\n        content_type="contentType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content', 'content_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.CustomResponseBodyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.CustomResponseProperty
class CfnRuleGroup_CustomResponsePropertyDef(BaseStruct):
    response_code: typing.Union[int, float] = pydantic.Field(..., description='The HTTP status code to return to the client. For a list of status codes that you can use in your custom responses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`_ in the *AWS WAF Developer Guide* .\n')
    custom_response_body_key: typing.Optional[str] = pydantic.Field(None, description='References the response body that you want AWS WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the ``WebACL`` or ``RuleGroup`` where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key.\n')
    response_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomHTTPHeaderPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The HTTP headers to use in the response. Duplicate header names are not allowed. For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-customresponse.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    custom_response_property = wafv2.CfnRuleGroup.CustomResponseProperty(\n        response_code=123,\n\n        # the properties below are optional\n        custom_response_body_key="customResponseBodyKey",\n        response_headers=[wafv2.CfnRuleGroup.CustomHTTPHeaderProperty(\n            name="name",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['response_code', 'custom_response_body_key', 'response_headers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.CustomResponseProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.FieldToMatchProperty
class CfnRuleGroup_FieldToMatchPropertyDef(BaseStruct):
    all_query_arguments: typing.Any = pydantic.Field(None, description='Inspect all query arguments.\n')
    body: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_BodyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. A limited amount of the request body is forwarded to AWS WAF for inspection by the underlying host service. For regional resources, the limit is 8 KB (8,192 kilobytes) and for CloudFront distributions, the limit is 16 KB (16,384 kilobytes). For CloudFront distributions, you can increase the limit in the web ACL's ``AssociationConfig`` , for additional processing fees. For information about how to handle oversized request bodies, see the ``Body`` object configuration.\n")
    cookies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CookiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Inspect the request cookies. You must configure scope and pattern matching filters in the ``Cookies`` object, to define the set of cookies and the parts of the cookies that AWS WAF inspects. Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize cookie content in the ``Cookies`` object. AWS WAF applies the pattern matching filters to the cookies that it receives from the underlying host service.\n")
    headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_HeadersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Inspect the request headers. You must configure scope and pattern matching filters in the ``Headers`` object, to define the set of headers to and the parts of the headers that AWS WAF inspects. Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize header content in the ``Headers`` object. AWS WAF applies the pattern matching filters to the headers that it receives from the underlying host service.\n")
    json_body: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_JsonBodyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. A limited amount of the request body is forwarded to AWS WAF for inspection by the underlying host service. For regional resources, the limit is 8 KB (8,192 kilobytes) and for CloudFront distributions, the limit is 16 KB (16,384 kilobytes). For CloudFront distributions, you can increase the limit in the web ACL's ``AssociationConfig`` , for additional processing fees. For information about how to handle oversized request bodies, see the ``JsonBody`` object configuration.\n")
    method: typing.Any = pydantic.Field(None, description='Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.\n')
    query_string: typing.Any = pydantic.Field(None, description='Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.\n')
    single_header: typing.Any = pydantic.Field(None, description='Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn\'t case sensitive. Example JSON: ``"SingleHeader": { "Name": "haystack" }`` Alternately, you can filter and inspect all headers with the ``Headers`` ``FieldToMatch`` setting.\n')
    single_query_argument: typing.Any = pydantic.Field(None, description='Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn\'t case sensitive. Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``\n')
    uri_path: typing.Any = pydantic.Field(None, description='Inspect the request URI path. This is the part of the web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-fieldtomatch.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    field_to_match_property = wafv2.CfnRuleGroup.FieldToMatchProperty(\n        all_query_arguments=all_query_arguments,\n        body=wafv2.CfnRuleGroup.BodyProperty(\n            oversize_handling="oversizeHandling"\n        ),\n        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                all=all,\n                excluded_cookies=["excludedCookies"],\n                included_cookies=["includedCookies"]\n            ),\n            match_scope="matchScope",\n            oversize_handling="oversizeHandling"\n        ),\n        headers=wafv2.CfnRuleGroup.HeadersProperty(\n            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                all=all,\n                excluded_headers=["excludedHeaders"],\n                included_headers=["includedHeaders"]\n            ),\n            match_scope="matchScope",\n            oversize_handling="oversizeHandling"\n        ),\n        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                all=all,\n                included_paths=["includedPaths"]\n            ),\n            match_scope="matchScope",\n\n            # the properties below are optional\n            invalid_fallback_behavior="invalidFallbackBehavior",\n            oversize_handling="oversizeHandling"\n        ),\n        method=method,\n        query_string=query_string,\n        single_header=single_header,\n        single_query_argument=single_query_argument,\n        uri_path=uri_path\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['all_query_arguments', 'body', 'cookies', 'headers', 'json_body', 'method', 'query_string', 'single_header', 'single_query_argument', 'uri_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.FieldToMatchProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty
class CfnRuleGroup_ForwardedIPConfigurationPropertyDef(BaseStruct):
    fallback_behavior: str = pydantic.Field(..., description="The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. .. epigraph:: If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. You can specify the following fallback behaviors: - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement.\n")
    header_name: str = pydantic.Field(..., description='The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` . .. epigraph:: If the specified header isn\'t present in the request, AWS WAF doesn\'t apply the rule to the web request at all.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-forwardedipconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    forwarded_iPConfiguration_property = wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n        fallback_behavior="fallbackBehavior",\n        header_name="headerName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['fallback_behavior', 'header_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.GeoMatchStatementProperty
class CfnRuleGroup_GeoMatchStatementPropertyDef(BaseStruct):
    country_codes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of two-character country codes that you want to match against, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. When you use a geo match statement just for the region and country labels that it adds to requests, you still have to supply a country code for the rule to evaluate. In this case, you configure the rule to only count matching requests, but it will still generate logging and count metrics for any matches. You can reduce the logging and metrics that the rule produces by specifying a country that\'s unlikely to be a source of traffic to your site.\n')
    forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that\'s reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. .. epigraph:: If the specified header isn\'t present in the request, AWS WAF doesn\'t apply the rule to the web request at all.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-geomatchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    geo_match_statement_property = wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n        country_codes=["countryCodes"],\n        forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n            fallback_behavior="fallbackBehavior",\n            header_name="headerName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['country_codes', 'forwarded_ip_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.GeoMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.HeaderMatchPatternProperty
class CfnRuleGroup_HeaderMatchPatternPropertyDef(BaseStruct):
    all: typing.Any = pydantic.Field(None, description='Inspect all headers.\n')
    excluded_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="Inspect only the headers whose keys don't match any of the strings specified here.\n")
    included_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Inspect only the headers that have a key that matches one of the strings specified here.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-headermatchpattern.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    header_match_pattern_property = wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n        all=all,\n        excluded_headers=["excludedHeaders"],\n        included_headers=["includedHeaders"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['all', 'excluded_headers', 'included_headers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.HeaderMatchPatternProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.HeadersProperty
class CfnRuleGroup_HeadersPropertyDef(BaseStruct):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_HeaderMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The filter to use to identify the subset of headers to inspect in a web request. You must specify exactly one setting: either ``All`` , ``IncludedHeaders`` , or ``ExcludedHeaders`` . Example JSON: ``"MatchPattern": { "ExcludedHeaders": {"KeyToExclude1", "KeyToExclude2"} }``\n')
    match_scope: str = pydantic.Field(..., description='The parts of the headers to match with the rule inspection criteria. If you specify ``All`` , AWS WAF inspects both keys and values.\n')
    oversize_handling: str = pydantic.Field(..., description='What AWS WAF should do if the headers of the request are more numerous or larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request headers when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers and at most 8 KB of header contents to AWS WAF . The options for oversize handling are the following: - ``CONTINUE`` - Inspect the available headers normally, according to the rule inspection criteria. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-headers.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    headers_property = wafv2.CfnRuleGroup.HeadersProperty(\n        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n            all=all,\n            excluded_headers=["excludedHeaders"],\n            included_headers=["includedHeaders"]\n        ),\n        match_scope="matchScope",\n        oversize_handling="oversizeHandling"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['match_pattern', 'match_scope', 'oversize_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.HeadersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.ImmunityTimePropertyProperty
class CfnRuleGroup_ImmunityTimePropertyPropertyDef(BaseStruct):
    immunity_time: typing.Union[int, float] = pydantic.Field(..., description='The amount of time, in seconds, that a ``CAPTCHA`` or challenge timestamp is considered valid by AWS WAF . The default setting is 300. For the Challenge action, the minimum setting is 300.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-immunitytimeproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    immunity_time_property_property = wafv2.CfnRuleGroup.ImmunityTimePropertyProperty(\n        immunity_time=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['immunity_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.ImmunityTimePropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.IPSetForwardedIPConfigurationProperty
class CfnRuleGroup_IPSetForwardedIPConfigurationPropertyDef(BaseStruct):
    fallback_behavior: str = pydantic.Field(..., description="The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. .. epigraph:: If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. You can specify the following fallback behaviors: - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement.\n")
    header_name: str = pydantic.Field(..., description="The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` . .. epigraph:: If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.\n")
    position: str = pydantic.Field(..., description='The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. The options for this setting are the following: - FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client\'s original IP. - LAST - Inspect the last IP address in the list of IP addresses in the header. - ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, AWS WAF inspects the last 10.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-ipsetforwardedipconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    i_pSet_forwarded_iPConfiguration_property = {\n        "fallback_behavior": "fallbackBehavior",\n        "header_name": "headerName",\n        "position": "position"\n    }\n')
    _init_params: typing.ClassVar[list[str]] = ['fallback_behavior', 'header_name', 'position']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.IPSetForwardedIPConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.IPSetReferenceStatementProperty
class CfnRuleGroup_IPSetReferenceStatementPropertyDef(BaseStruct):
    arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the ``IPSet`` that this statement references.\n')
    ip_set_forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_IPSetForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that\'s reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. .. epigraph:: If the specified header isn\'t present in the request, AWS WAF doesn\'t apply the rule to the web request at all.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-ipsetreferencestatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    i_pSet_reference_statement_property = {\n        "arn": "arn",\n\n        # the properties below are optional\n        "ip_set_forwarded_ip_config": {\n            "fallback_behavior": "fallbackBehavior",\n            "header_name": "headerName",\n            "position": "position"\n        }\n    }\n')
    _init_params: typing.ClassVar[list[str]] = ['arn', 'ip_set_forwarded_ip_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.IPSetReferenceStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.JsonBodyProperty
class CfnRuleGroup_JsonBodyPropertyDef(BaseStruct):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_JsonMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria.\n')
    match_scope: str = pydantic.Field(..., description='The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , AWS WAF matches against keys and values.\n')
    invalid_fallback_behavior: typing.Optional[str] = pydantic.Field(None, description='What AWS WAF should do if it fails to completely parse the JSON body. The options are the following:. - ``EVALUATE_AS_STRING`` - Inspect the body as plain text. AWS WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement. If you don\'t provide this setting, AWS WAF parses and evaluates the content only up to the first parsing failure that it encounters. AWS WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as invalid characters, duplicate keys, truncation, and any content whose root node isn\'t an object or an array. AWS WAF parses the JSON in the following examples as two valid key, value pairs: - Missing comma: ``{"key1":"value1""key2":"value2"}`` - Missing colon: ``{"key1":"value1","key2""value2"}`` - Extra colons: ``{"key1"::"value1","key2""value2"}``\n')
    oversize_handling: typing.Optional[str] = pydantic.Field(None, description='What AWS WAF should do if the body is larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. If the body is larger than the limit, the underlying host service only forwards the contents that are below the limit to AWS WAF for inspection. The default limit is 8 KB (8,192 kilobytes) for regional resources and 16 KB (16,384 kilobytes) for CloudFront distributions. For CloudFront distributions, you can increase the limit in the web ACL ``AssociationConfig`` , for additional processing fees. The options for oversize handling are the following: - ``CONTINUE`` - Inspect the available body contents normally, according to the rule inspection criteria. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement. You can combine the ``MATCH`` or ``NO_MATCH`` settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit. Default: ``CONTINUE``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-jsonbody.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    json_body_property = wafv2.CfnRuleGroup.JsonBodyProperty(\n        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n            all=all,\n            included_paths=["includedPaths"]\n        ),\n        match_scope="matchScope",\n\n        # the properties below are optional\n        invalid_fallback_behavior="invalidFallbackBehavior",\n        oversize_handling="oversizeHandling"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['match_pattern', 'match_scope', 'invalid_fallback_behavior', 'oversize_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.JsonBodyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.JsonMatchPatternProperty
class CfnRuleGroup_JsonMatchPatternPropertyDef(BaseStruct):
    all: typing.Any = pydantic.Field(None, description='Match all of the elements. See also ``MatchScope`` in the ``JsonBody`` ``FieldToMatch`` specification. You must specify either this setting or the ``IncludedPaths`` setting, but not both.\n')
    included_paths: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Match only the specified include paths. See also ``MatchScope`` in the ``JsonBody`` ``FieldToMatch`` specification. Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901>`_ . You must specify either this setting or the ``All`` setting, but not both. .. epigraph:: Don\'t use this option to include all paths. Instead, use the ``All`` setting.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-jsonmatchpattern.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    json_match_pattern_property = wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n        all=all,\n        included_paths=["includedPaths"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['all', 'included_paths']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.JsonMatchPatternProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.LabelMatchStatementProperty
class CfnRuleGroup_LabelMatchStatementPropertyDef(BaseStruct):
    key: str = pydantic.Field(..., description="The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting:. - If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name. - If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .\n")
    _init_params: typing.ClassVar[list[str]] = ['key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.LabelMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.LabelProperty
class CfnRuleGroup_LabelPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The label string.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-label.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    label_property = wafv2.CfnRuleGroup.LabelProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.LabelProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.LabelSummaryProperty
class CfnRuleGroup_LabelSummaryPropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='An individual label specification.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-labelsummary.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    label_summary_property = wafv2.CfnRuleGroup.LabelSummaryProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.LabelSummaryProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.NotStatementProperty
class CfnRuleGroup_NotStatementPropertyDef(BaseStruct):
    statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The statement to negate. You can use any statement that can be nested.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-notstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnRuleGroup.StatementProperty\n    # uri_path: Any\n\n    not_statement_property = wafv2.CfnRuleGroup.NotStatementProperty(\n        statement=wafv2.CfnRuleGroup.StatementProperty(\n            and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['statement']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.NotStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.OrStatementProperty
class CfnRuleGroup_OrStatementPropertyDef(BaseStruct):
    statements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The statements to combine with OR logic. You can use any statements that can be nested.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-orstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnRuleGroup.StatementProperty\n    # uri_path: Any\n\n    or_statement_property = wafv2.CfnRuleGroup.OrStatementProperty(\n        statements=[wafv2.CfnRuleGroup.StatementProperty(\n            and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['statements']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.OrStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.RateBasedStatementProperty
class CfnRuleGroup_RateBasedStatementPropertyDef(BaseStruct):
    aggregate_key_type: str = pydantic.Field(..., description='Setting that indicates how to aggregate the request counts. The options are the following:. - ``IP`` - Aggregate the request counts on the IP address from the web request origin. - ``FORWARDED_IP`` - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use. .. epigraph:: You can only use the ``IP`` and ``FORWARDED_IP`` key types.\n')
    limit: typing.Union[int, float] = pydantic.Field(..., description='The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.\n')
    forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. .. epigraph:: If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. This is required if you specify a forwarded IP in the rule's aggregate key settings.\n")
    scope_down_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-ratebasedstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnRuleGroup.StatementProperty\n    # uri_path: Any\n\n    rate_based_statement_property = wafv2.CfnRuleGroup.RateBasedStatementProperty(\n        aggregate_key_type="aggregateKeyType",\n        limit=123,\n\n        # the properties below are optional\n        forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n            fallback_behavior="fallbackBehavior",\n            header_name="headerName"\n        ),\n        scope_down_statement=wafv2.CfnRuleGroup.StatementProperty(\n            and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aggregate_key_type', 'limit', 'forwarded_ip_config', 'scope_down_statement']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.RateBasedStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.RegexMatchStatementProperty
class CfnRuleGroup_RegexMatchStatementPropertyDef(BaseStruct):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    regex_string: str = pydantic.Field(..., description='The string representing the regular expression.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-regexmatchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    regex_match_statement_property = wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n        field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnRuleGroup.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnRuleGroup.HeadersProperty(\n                match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        regex_string="regexString",\n        text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['field_to_match', 'regex_string', 'text_transformations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.RegexMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty
class CfnRuleGroup_RegexPatternSetReferenceStatementPropertyDef(BaseStruct):
    arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the ``RegexPatternSet`` that this statement references.\n')
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-regexpatternsetreferencestatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    regex_pattern_set_reference_statement_property = wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n        arn="arn",\n        field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnRuleGroup.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnRuleGroup.HeadersProperty(\n                match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['arn', 'field_to_match', 'text_transformations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.RuleActionProperty
class CfnRuleGroup_RuleActionPropertyDef(BaseStruct):
    allow: typing.Any = pydantic.Field(None, description='Instructs AWS WAF to allow the web request.\n')
    block: typing.Any = pydantic.Field(None, description='Instructs AWS WAF to block the web request.\n')
    captcha: typing.Any = pydantic.Field(None, description="Specifies that AWS WAF should run a ``CAPTCHA`` check against the request:. - If the request includes a valid, unexpired ``CAPTCHA`` token, AWS WAF allows the web request inspection to proceed to the next rule, similar to a ``CountAction`` . - If the request doesn't include a valid, unexpired ``CAPTCHA`` token, AWS WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination. AWS WAF generates a response that it sends back to the client, which includes the following: - The header ``x-amzn-waf-action`` with a value of ``captcha`` . - The HTTP status code ``405 Method Not Allowed`` . - If the request contains an ``Accept`` header with a value of ``text/html`` , the response includes a ``CAPTCHA`` challenge. You can configure the expiration time in the ``CaptchaConfig`` ``ImmunityTimeProperty`` setting at the rule and web ACL level. The rule setting overrides the web ACL setting. This action option is available for rules. It isn't available for web ACL default actions.\n")
    challenge: typing.Any = pydantic.Field(None, description='Instructs AWS WAF to run a ``Challenge`` check against the web request.\n')
    count: typing.Any = pydantic.Field(None, description='Instructs AWS WAF to count the web request and then continue evaluating the request using the remaining rules in the web ACL.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-ruleaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # allow: Any\n    # block: Any\n    # captcha: Any\n    # challenge: Any\n    # count: Any\n\n    rule_action_property = wafv2.CfnRuleGroup.RuleActionProperty(\n        allow=allow,\n        block=block,\n        captcha=captcha,\n        challenge=challenge,\n        count=count\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allow', 'block', 'captcha', 'challenge', 'count']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.RuleActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.RuleProperty
class CfnRuleGroup_RulePropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description="The name of the rule. You can't change the name of a ``Rule`` after you create it.\n")
    priority: typing.Union[int, float] = pydantic.Field(..., description="If you define more than one ``Rule`` in a ``WebACL`` , AWS WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . AWS WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.\n")
    statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The AWS WAF processing statement for the rule, for example ``ByteMatchStatement`` or ``SizeConstraintStatement`` .\n')
    visibility_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_VisibilityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines and enables Amazon CloudWatch metrics and web request sample collection.\n')
    action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RuleActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The action that AWS WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting.\n')
    captcha_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CaptchaConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies how AWS WAF should handle ``CAPTCHA`` evaluations. If you don't specify this, AWS WAF uses the ``CAPTCHA`` configuration that's defined for the web ACL.\n")
    challenge_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ChallengeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies how AWS WAF should handle ``Challenge`` evaluations. If you don't specify this, AWS WAF uses the challenge configuration that's defined for the web ACL.\n")
    rule_labels: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_LabelPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Labels to apply to web requests that match the rule match statement. AWS WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule\'s rule group or web ACL defines the label namespace. Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` . For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines: - Separate each component of the label with a colon. - Each namespace or name can have up to 128 characters. - You can specify up to 5 namespaces in a label. - Don\'t use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-rule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # allow: Any\n    # all_query_arguments: Any\n    # block: Any\n    # captcha: Any\n    # challenge: Any\n    # count: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnRuleGroup.StatementProperty\n    # uri_path: Any\n\n    rule_property = wafv2.CfnRuleGroup.RuleProperty(\n        name="name",\n        priority=123,\n        statement=wafv2.CfnRuleGroup.StatementProperty(\n            and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnRuleGroup.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                        match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnRuleGroup.HeadersProperty(\n                        match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                        match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        ),\n        visibility_config=wafv2.CfnRuleGroup.VisibilityConfigProperty(\n            cloud_watch_metrics_enabled=False,\n            metric_name="metricName",\n            sampled_requests_enabled=False\n        ),\n\n        # the properties below are optional\n        action=wafv2.CfnRuleGroup.RuleActionProperty(\n            allow=allow,\n            block=block,\n            captcha=captcha,\n            challenge=challenge,\n            count=count\n        ),\n        captcha_config=wafv2.CfnRuleGroup.CaptchaConfigProperty(\n            immunity_time_property=wafv2.CfnRuleGroup.ImmunityTimePropertyProperty(\n                immunity_time=123\n            )\n        ),\n        challenge_config=wafv2.CfnRuleGroup.ChallengeConfigProperty(\n            immunity_time_property=wafv2.CfnRuleGroup.ImmunityTimePropertyProperty(\n                immunity_time=123\n            )\n        ),\n        rule_labels=[wafv2.CfnRuleGroup.LabelProperty(\n            name="name"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'priority', 'statement', 'visibility_config', 'action', 'captcha_config', 'challenge_config', 'rule_labels']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.RuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.SingleHeaderProperty
class CfnRuleGroup_SingleHeaderPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the query header to inspect.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-singleheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    single_header_property = wafv2.CfnRuleGroup.SingleHeaderProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.SingleHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.SingleQueryArgumentProperty
class CfnRuleGroup_SingleQueryArgumentPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the query argument to inspect.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-singlequeryargument.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    single_query_argument_property = wafv2.CfnRuleGroup.SingleQueryArgumentProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.SingleQueryArgumentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.SizeConstraintStatementProperty
class CfnRuleGroup_SizeConstraintStatementPropertyDef(BaseStruct):
    comparison_operator: str = pydantic.Field(..., description='The operator to use to compare the request part to the size setting.\n')
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    size: typing.Union[int, float] = pydantic.Field(..., description='The size, in byte, to compare to the request part, after any transformations.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-sizeconstraintstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    size_constraint_statement_property = wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n        comparison_operator="comparisonOperator",\n        field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnRuleGroup.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnRuleGroup.HeadersProperty(\n                match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        size=123,\n        text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison_operator', 'field_to_match', 'size', 'text_transformations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.SizeConstraintStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.SqliMatchStatementProperty
class CfnRuleGroup_SqliMatchStatementPropertyDef(BaseStruct):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n')
    sensitivity_level: typing.Optional[str] = pydantic.Field(None, description='The sensitivity that you want AWS WAF to use to inspect for SQL injection attacks. ``HIGH`` detects more attacks, but might generate more false positives, especially if your web requests frequently contain unusual strings. For information about identifying and mitigating false positives, see `Testing and tuning <https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html>`_ in the *AWS WAF Developer Guide* . ``LOW`` is generally a better choice for resources that already have other protections against SQL injection attacks or that have a low tolerance for false positives. Default: ``LOW``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-sqlimatchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    sqli_match_statement_property = wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n        field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnRuleGroup.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnRuleGroup.HeadersProperty(\n                match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )],\n\n        # the properties below are optional\n        sensitivity_level="sensitivityLevel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['field_to_match', 'text_transformations', 'sensitivity_level']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.SqliMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.StatementProperty
class CfnRuleGroup_StatementPropertyDef(BaseStruct):
    and_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_AndStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A logical rule statement used to combine other rule statements with AND logic. You provide more than one ``Statement`` within the ``AndStatement`` .\n')
    byte_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ByteMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that defines a string match search for AWS WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want AWS WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the AWS WAF console and the developer guide, this is called a string match statement.\n')
    geo_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_GeoMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match. - To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the ``CountryCodes`` array. - Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed. AWS WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. AWS WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match ``ForwardedIPConfig`` . If you use the web request origin, the label formats are ``awswaf:clientip:geo:region:<ISO country code>-<ISO region code>`` and ``awswaf:clientip:geo:country:<ISO country code>`` . If you use a forwarded IP address, the label formats are ``awswaf:forwardedip:geo:region:<ISO country code>-<ISO region code>`` and ``awswaf:forwardedip:geo:country:<ISO country code>`` . For additional details, see `Geographic match rule statement <https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html>`_ in the `AWS WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`_ .\n')
    ip_set_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_IPSetReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an ``IPSet`` that specifies the addresses you want to detect, then use the ARN of that set in this statement. Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.\n')
    label_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_LabelMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL. The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, AWS WAF performs the search for labels that were added in the same context as the label match statement.\n')
    not_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_NotStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A logical rule statement used to negate the results of another rule statement. You provide one ``Statement`` within the ``NotStatement`` .\n')
    or_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_OrStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A logical rule statement used to combine other rule statements with OR logic. You provide more than one ``Statement`` within the ``OrStatement`` .\n')
    rate_based_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RateBasedStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests. AWS WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by AWS WAF . If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by AWS WAF . When the rule action triggers, AWS WAF blocks additional requests from the IP address until the request rate falls below the limit. You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements: - An IP match statement with an IP set that specifies the address 192.0.2.44. - A string match statement that searches in the User-Agent header for the string BadBot. In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet the criteria of both of the nested statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet the criteria of both of the nested statements are not counted towards the rate limit and are not affected by this rule. You cannot nest a ``RateBasedStatement`` inside another statement, for example inside a ``NotStatement`` or ``OrStatement`` . You can define a ``RateBasedStatement`` inside a web ACL and inside a rule group.\n')
    regex_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RegexMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement used to search web request components for a match against a single regular expression.\n')
    regex_pattern_set_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RegexPatternSetReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement used to search web request components for matches with regular expressions. To use this, create a ``RegexPatternSet`` that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.\n')
    size_constraint_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_SizeConstraintStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. If you configure AWS WAF to inspect the request body, AWS WAF inspects only the number of bytes of the body up to the limit for the web ACL. By default, for regional web ACLs, this limit is 8 KB (8,192 kilobytes) and for CloudFront web ACLs, this limit is 16 KB (16,384 kilobytes). For CloudFront web ACLs, you can increase the limit in the web ACL ``AssociationConfig`` , for additional fees. If you know that the request body for your web requests should never exceed the inspection limit, you could use a size constraint statement to block requests that have a larger request body size. If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.\n')
    sqli_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_SqliMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it.\n')
    xss_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_XssMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-statement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # and_statement_property_: wafv2.CfnRuleGroup.AndStatementProperty\n    # method: Any\n    # not_statement_property_: wafv2.CfnRuleGroup.NotStatementProperty\n    # or_statement_property_: wafv2.CfnRuleGroup.OrStatementProperty\n    # query_string: Any\n    # rate_based_statement_property_: wafv2.CfnRuleGroup.RateBasedStatementProperty\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnRuleGroup.StatementProperty\n    # uri_path: Any\n\n    statement_property = wafv2.CfnRuleGroup.StatementProperty(\n        and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n            statements=[wafv2.CfnRuleGroup.StatementProperty(\n                and_statement=and_statement_property_,\n                byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n                    statement=statement_property_\n                ),\n                or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n                    statements=[statement_property_]\n                ),\n                rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n                    aggregate_key_type="aggregateKeyType",\n                    limit=123,\n\n                    # the properties below are optional\n                    forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    ),\n                    scope_down_statement=statement_property_\n                ),\n                regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            )]\n        ),\n        byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n            field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnRuleGroup.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                    match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnRuleGroup.HeadersProperty(\n                    match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                    match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            positional_constraint="positionalConstraint",\n            text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )],\n\n            # the properties below are optional\n            search_string="searchString",\n            search_string_base64="searchStringBase64"\n        ),\n        geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n            country_codes=["countryCodes"],\n            forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                fallback_behavior="fallbackBehavior",\n                header_name="headerName"\n            )\n        ),\n        ip_set_reference_statement={\n            "arn": "arn",\n\n            # the properties below are optional\n            "ip_set_forwarded_ip_config": {\n                "fallback_behavior": "fallbackBehavior",\n                "header_name": "headerName",\n                "position": "position"\n            }\n        },\n        label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n            key="key",\n            scope="scope"\n        ),\n        not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n            statement=wafv2.CfnRuleGroup.StatementProperty(\n                and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n                    statements=[statement_property_]\n                ),\n                byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                not_statement=not_statement_property_,\n                or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n                    statements=[statement_property_]\n                ),\n                rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n                    aggregate_key_type="aggregateKeyType",\n                    limit=123,\n\n                    # the properties below are optional\n                    forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    ),\n                    scope_down_statement=statement_property_\n                ),\n                regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            )\n        ),\n        or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n            statements=[wafv2.CfnRuleGroup.StatementProperty(\n                and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n                    statements=[statement_property_]\n                ),\n                byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n                    statement=statement_property_\n                ),\n                or_statement=or_statement_property_,\n                rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n                    aggregate_key_type="aggregateKeyType",\n                    limit=123,\n\n                    # the properties below are optional\n                    forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    ),\n                    scope_down_statement=statement_property_\n                ),\n                regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            )]\n        ),\n        rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n            aggregate_key_type="aggregateKeyType",\n            limit=123,\n\n            # the properties below are optional\n            forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                fallback_behavior="fallbackBehavior",\n                header_name="headerName"\n            ),\n            scope_down_statement=wafv2.CfnRuleGroup.StatementProperty(\n                and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n                    statements=[statement_property_]\n                ),\n                byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n                    statement=statement_property_\n                ),\n                or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n                    statements=[statement_property_]\n                ),\n                rate_based_statement=rate_based_statement_property_,\n                regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            )\n        ),\n        regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n            field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnRuleGroup.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                    match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnRuleGroup.HeadersProperty(\n                    match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                    match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            regex_string="regexString",\n            text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )]\n        ),\n        regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n            arn="arn",\n            field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnRuleGroup.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                    match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnRuleGroup.HeadersProperty(\n                    match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                    match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )]\n        ),\n        size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n            comparison_operator="comparisonOperator",\n            field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnRuleGroup.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                    match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnRuleGroup.HeadersProperty(\n                    match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                    match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            size=123,\n            text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )]\n        ),\n        sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n            field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnRuleGroup.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                    match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnRuleGroup.HeadersProperty(\n                    match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                    match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )],\n\n            # the properties below are optional\n            sensitivity_level="sensitivityLevel"\n        ),\n        xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n            field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnRuleGroup.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                    match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnRuleGroup.HeadersProperty(\n                    match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                    match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['and_statement', 'byte_match_statement', 'geo_match_statement', 'ip_set_reference_statement', 'label_match_statement', 'not_statement', 'or_statement', 'rate_based_statement', 'regex_match_statement', 'regex_pattern_set_reference_statement', 'size_constraint_statement', 'sqli_match_statement', 'xss_match_statement']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.StatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.TextTransformationProperty
class CfnRuleGroup_TextTransformationPropertyDef(BaseStruct):
    priority: typing.Union[int, float] = pydantic.Field(..., description="Sets the relative processing order for multiple transformations. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different.\n")
    type: str = pydantic.Field(..., description='You can specify the following transformation types:. *BASE64_DECODE* - Decode a ``Base64`` -encoded string. *BASE64_DECODE_EXT* - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren\'t valid. *CMD_LINE* - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. - Delete the following characters: ``\\ " \' ^`` - Delete spaces before the following characters: ``/ (`` - Replace the following characters with a space: ``, ;`` - Replace multiple spaces with one space - Convert uppercase letters (A-Z) to lowercase (a-z) *COMPRESS_WHITE_SPACE* - Replace these characters with a space character (decimal 32): - ``\\f`` , formfeed, decimal 12 - ``\\t`` , tab, decimal 9 - ``\\n`` , newline, decimal 10 - ``\\r`` , carriage return, decimal 13 - ``\\v`` , vertical tab, decimal 11 - Non-breaking space, decimal 160 ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space. *CSS_DECODE* - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It\'s also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\\vascript`` for javascript. *ESCAPE_SEQ_DECODE* - Decode the following ANSI C escape sequences: ``\\a`` , ``\\b`` , ``\\f`` , ``\\n`` , ``\\r`` , ``\\t`` , ``\\v`` , ``\\\\`` , ``\\?`` , ``\\\'`` , ``\\"`` , ``\\xHH`` (hexadecimal), ``\\0OOO`` (octal). Encodings that aren\'t valid remain in the output. *HEX_DECODE* - Decode a string of hexadecimal characters into a binary. *HTML_ENTITY_DECODE* - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: - Replaces ``(ampersand)quot;`` with ``"`` - Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 - Replaces ``(ampersand)lt;`` with a "less than" symbol - Replaces ``(ampersand)gt;`` with ``>`` - Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters - Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters *JS_DECODE* - Decode JavaScript escape sequences. If a ``\\`` ``u`` ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. *LOWERCASE* - Convert uppercase letters (A-Z) to lowercase (a-z). *MD5* - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. *NONE* - Specify ``NONE`` if you don\'t want any text transformations. *NORMALIZE_PATH* - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. *NORMALIZE_PATH_WIN* - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. *REMOVE_NULLS* - Remove all ``NULL`` bytes from the input. *REPLACE_COMMENTS* - Replace each occurrence of a C-style comment ( ``/* ... * /`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment ( ``* /`` ) is not acted upon. *REPLACE_NULLS* - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). *SQL_HEX_DECODE* - Decode SQL hex data. Example ( ``0x414243`` ) will be decoded to ( ``ABC`` ). *URL_DECODE* - Decode a URL-encoded value. *URL_DECODE_UNI* - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. *UTF8_TO_UNICODE* - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-texttransformation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    text_transformation_property = wafv2.CfnRuleGroup.TextTransformationProperty(\n        priority=123,\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['priority', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.TextTransformationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.VisibilityConfigProperty
class CfnRuleGroup_VisibilityConfigPropertyDef(BaseStruct):
    cloud_watch_metrics_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Indicates whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `AWS WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`_ in the *AWS WAF Developer Guide* . For web ACLs, the metrics are for web requests that have the web ACL default action applied. AWS WAF applies the default action to web requests that pass the inspection of all rules in the web ACL without being either allowed or blocked. For more information, see `The web ACL default action <https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-default-action.html>`_ in the *AWS WAF Developer Guide* .\n')
    metric_name: str = pydantic.Field(..., description="A name of the Amazon CloudWatch metric dimension. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names that are reserved for AWS WAF , for example ``All`` and ``Default_Action`` .\n")
    sampled_requests_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Indicates whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-visibilityconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    visibility_config_property = wafv2.CfnRuleGroup.VisibilityConfigProperty(\n        cloud_watch_metrics_enabled=False,\n        metric_name="metricName",\n        sampled_requests_enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_metrics_enabled', 'metric_name', 'sampled_requests_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.VisibilityConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup.XssMatchStatementProperty
class CfnRuleGroup_XssMatchStatementPropertyDef(BaseStruct):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-rulegroup-xssmatchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    xss_match_statement_property = wafv2.CfnRuleGroup.XssMatchStatementProperty(\n        field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnRuleGroup.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnRuleGroup.HeadersProperty(\n                match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['field_to_match', 'text_transformations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup.XssMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.AllowActionProperty
class CfnWebACL_AllowActionPropertyDef(BaseStruct):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines custom handling for the web request. For information about customizing web requests and responses, see `Customizing web requests and responses in AWS WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`_ in the *AWS WAF Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-allowaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    allow_action_property = wafv2.CfnWebACL.AllowActionProperty(\n        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                name="name",\n                value="value"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_request_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.AllowActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.AndStatementProperty
class CfnWebACL_AndStatementPropertyDef(BaseStruct):
    statements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The statements to combine with AND logic. You can use any statements that can be nested.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-andstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnWebACL.StatementProperty\n    # uri_path: Any\n\n    and_statement_property = wafv2.CfnWebACL.AndStatementProperty(\n        statements=[wafv2.CfnWebACL.StatementProperty(\n            and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                name="name",\n                vendor_name="vendorName",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                    aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                        login_path="loginPath",\n\n                        # the properties below are optional\n                        request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                            password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            ),\n                            payload_type="payloadType",\n                            username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            )\n                        ),\n                        response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                            body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                failure_strings=["failureStrings"],\n                                success_strings=["successStrings"]\n                            ),\n                            header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                failure_values=["failureValues"],\n                                name="name",\n                                success_values=["successValues"]\n                            ),\n                            json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                failure_values=["failureValues"],\n                                identifier="identifier",\n                                success_values=["successValues"]\n                            ),\n                            status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                failure_codes=[123],\n                                success_codes=[123]\n                            )\n                        )\n                    ),\n                    aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                        inspection_level="inspectionLevel"\n                    ),\n                    login_path="loginPath",\n                    password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    ),\n                    payload_type="payloadType",\n                    username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    )\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )],\n                scope_down_statement=statement_property_,\n                version="version"\n            ),\n            not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                arn="arn",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['statements']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.AndStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty
class CfnWebACL_AWSManagedRulesATPRuleSetPropertyDef(BaseStruct):
    login_path: str = pydantic.Field(..., description='The path of the login endpoint for your application. For example, for the URL ``https://example.com/web/login`` , you would provide the path ``/web/login`` . The rule group inspects only HTTP ``POST`` requests to your specified login endpoint.\n')
    request_inspection: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RequestInspectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage.\n')
    response_inspection: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The criteria for inspecting responses to login requests, used by the ATP rule group to track login failure rates. The ATP rule group evaluates the responses that your protected resources send back to client login attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that submit too many failed login attempts in a short amount of time. .. epigraph:: Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-awsmanagedrulesatpruleset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    a_wSManaged_rules_aTPRule_set_property = wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n        login_path="loginPath",\n\n        # the properties below are optional\n        request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n            password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                identifier="identifier"\n            ),\n            payload_type="payloadType",\n            username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                identifier="identifier"\n            )\n        ),\n        response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n            body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                failure_strings=["failureStrings"],\n                success_strings=["successStrings"]\n            ),\n            header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                failure_values=["failureValues"],\n                name="name",\n                success_values=["successValues"]\n            ),\n            json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                failure_values=["failureValues"],\n                identifier="identifier",\n                success_values=["successValues"]\n            ),\n            status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                failure_codes=[123],\n                success_codes=[123]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['login_path', 'request_inspection', 'response_inspection']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty
class CfnWebACL_AWSManagedRulesBotControlRuleSetPropertyDef(BaseStruct):
    inspection_level: str = pydantic.Field(..., description='The inspection level to use for the Bot Control rule group. The common level is the least expensive. The targeted level includes all common level rules and adds rules with more advanced inspection criteria. For details, see `AWS WAF Bot Control rule group <https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-awsmanagedrulesbotcontrolruleset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    a_wSManaged_rules_bot_control_rule_set_property = wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n        inspection_level="inspectionLevel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['inspection_level']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.BlockActionProperty
class CfnWebACL_BlockActionPropertyDef(BaseStruct):
    custom_response: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomResponsePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines a custom response for the web request. For information about customizing web requests and responses, see `Customizing web requests and responses in AWS WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`_ in the *AWS WAF Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-blockaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    block_action_property = wafv2.CfnWebACL.BlockActionProperty(\n        custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n            response_code=123,\n\n            # the properties below are optional\n            custom_response_body_key="customResponseBodyKey",\n            response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                name="name",\n                value="value"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.BlockActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.BodyProperty
class CfnWebACL_BodyPropertyDef(BaseStruct):
    oversize_handling: typing.Optional[str] = pydantic.Field(None, description='What AWS WAF should do if the body is larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. If the body is larger than the limit, the underlying host service only forwards the contents that are below the limit to AWS WAF for inspection. The default limit is 8 KB (8,192 kilobytes) for regional resources and 16 KB (16,384 kilobytes) for CloudFront distributions. For CloudFront distributions, you can increase the limit in the web ACL ``AssociationConfig`` , for additional processing fees. The options for oversize handling are the following: - ``CONTINUE`` - Inspect the available body contents normally, according to the rule inspection criteria. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement. You can combine the ``MATCH`` or ``NO_MATCH`` settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit. Default: ``CONTINUE``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-body.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    body_property = wafv2.CfnWebACL.BodyProperty(\n        oversize_handling="oversizeHandling"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['oversize_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.BodyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ByteMatchStatementProperty
class CfnWebACL_ByteMatchStatementPropertyDef(BaseStruct):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    positional_constraint: str = pydantic.Field(..., description="The area within the portion of the web request that you want AWS WAF to search for ``SearchString`` . Valid values include the following: *CONTAINS* The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter. *CONTAINS_WORD* The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true: - ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . - ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . *EXACTLY* The value of the specified part of the web request must exactly match the value of ``SearchString`` . *STARTS_WITH* The value of ``SearchString`` must appear at the beginning of the specified part of the web request. *ENDS_WITH* The value of ``SearchString`` must appear at the end of the specified part of the web request.\n")
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n')
    search_string: typing.Optional[str] = pydantic.Field(None, description="A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in ``FieldToMatch`` . The maximum length of the value is 200 bytes. For alphabetic characters A-Z and a-z, the value is case sensitive. Don't encode this string. Provide the value that you want AWS WAF to search for. AWS CloudFormation automatically base64 encodes the value for you. For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you provide the string ``BadBot`` in the value of ``SearchString`` . You must specify either ``SearchString`` or ``SearchStringBase64`` in a ``ByteMatchStatement`` .\n")
    search_string_base64: typing.Optional[str] = pydantic.Field(None, description='String to search for in a web request component, base64-encoded. If you don\'t want to encode the string, specify the unencoded value in ``SearchString`` instead. You must specify either ``SearchString`` or ``SearchStringBase64`` in a ``ByteMatchStatement`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-bytematchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    byte_match_statement_property = wafv2.CfnWebACL.ByteMatchStatementProperty(\n        field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnWebACL.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnWebACL.CookiesProperty(\n                match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnWebACL.HeadersProperty(\n                match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        positional_constraint="positionalConstraint",\n        text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )],\n\n        # the properties below are optional\n        search_string="searchString",\n        search_string_base64="searchStringBase64"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['field_to_match', 'positional_constraint', 'text_transformations', 'search_string', 'search_string_base64']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ByteMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.CaptchaActionProperty
class CfnWebACL_CaptchaActionPropertyDef(BaseStruct):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines custom handling for the web request, used when the ``CAPTCHA`` inspection determines that the request\'s token is valid and unexpired. For information about customizing web requests and responses, see `Customizing web requests and responses in AWS WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`_ in the *AWS WAF Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-captchaaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    captcha_action_property = wafv2.CfnWebACL.CaptchaActionProperty(\n        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                name="name",\n                value="value"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_request_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.CaptchaActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.CaptchaConfigProperty
class CfnWebACL_CaptchaConfigPropertyDef(BaseStruct):
    immunity_time_property: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ImmunityTimePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines how long a ``CAPTCHA`` timestamp in the token remains valid after the client successfully solves a ``CAPTCHA`` puzzle.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-captchaconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    captcha_config_property = wafv2.CfnWebACL.CaptchaConfigProperty(\n        immunity_time_property=wafv2.CfnWebACL.ImmunityTimePropertyProperty(\n            immunity_time=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['immunity_time_property']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.CaptchaConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ChallengeActionProperty
class CfnWebACL_ChallengeActionPropertyDef(BaseStruct):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines custom handling for the web request, used when the challenge inspection determines that the request\'s token is valid and unexpired. For information about customizing web requests and responses, see `Customizing web requests and responses in AWS WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`_ in the `AWS WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-challengeaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    challenge_action_property = wafv2.CfnWebACL.ChallengeActionProperty(\n        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                name="name",\n                value="value"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_request_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ChallengeActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ChallengeConfigProperty
class CfnWebACL_ChallengeConfigPropertyDef(BaseStruct):
    immunity_time_property: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ImmunityTimePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines how long a challenge timestamp in the token remains valid after the client successfully responds to a challenge.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-challengeconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    challenge_config_property = wafv2.CfnWebACL.ChallengeConfigProperty(\n        immunity_time_property=wafv2.CfnWebACL.ImmunityTimePropertyProperty(\n            immunity_time=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['immunity_time_property']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ChallengeConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.CookieMatchPatternProperty
class CfnWebACL_CookieMatchPatternPropertyDef(BaseStruct):
    all: typing.Any = pydantic.Field(None, description='Inspect all cookies.\n')
    excluded_cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="Inspect only the cookies whose keys don't match any of the strings specified here.\n")
    included_cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Inspect only the cookies that have a key that matches one of the strings specified here.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-cookiematchpattern.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    cookie_match_pattern_property = wafv2.CfnWebACL.CookieMatchPatternProperty(\n        all=all,\n        excluded_cookies=["excludedCookies"],\n        included_cookies=["includedCookies"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['all', 'excluded_cookies', 'included_cookies']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.CookieMatchPatternProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.CookiesProperty
class CfnWebACL_CookiesPropertyDef(BaseStruct):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CookieMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either ``All`` , ``IncludedCookies`` , or ``ExcludedCookies`` . Example JSON: ``"MatchPattern": { "IncludedCookies": {"KeyToInclude1", "KeyToInclude2", "KeyToInclude3"} }``\n')
    match_scope: str = pydantic.Field(..., description='The parts of the cookies to inspect with the rule inspection criteria. If you specify ``All`` , AWS WAF inspects both keys and values.\n')
    oversize_handling: str = pydantic.Field(..., description='What AWS WAF should do if the cookies of the request are more numerous or larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF . The options for oversize handling are the following: - ``CONTINUE`` - Inspect the available cookies normally, according to the rule inspection criteria. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-cookies.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    cookies_property = wafv2.CfnWebACL.CookiesProperty(\n        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n            all=all,\n            excluded_cookies=["excludedCookies"],\n            included_cookies=["includedCookies"]\n        ),\n        match_scope="matchScope",\n        oversize_handling="oversizeHandling"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['match_pattern', 'match_scope', 'oversize_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.CookiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.CountActionProperty
class CfnWebACL_CountActionPropertyDef(BaseStruct):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines custom handling for the web request. For information about customizing web requests and responses, see `Customizing web requests and responses in AWS WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`_ in the *AWS WAF Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-countaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    count_action_property = wafv2.CfnWebACL.CountActionProperty(\n        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                name="name",\n                value="value"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_request_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.CountActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.CustomHTTPHeaderProperty
class CfnWebACL_CustomHTTPHeaderPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the custom header. For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , AWS WAF inserts the header ``x-amzn-waf-sample`` .\n')
    value: str = pydantic.Field(..., description='The value of the custom header.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-customhttpheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    custom_hTTPHeader_property = wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.CustomHTTPHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.CustomRequestHandlingProperty
class CfnWebACL_CustomRequestHandlingPropertyDef(BaseStruct):
    insert_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomHTTPHeaderPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The HTTP headers to insert into the request. Duplicate header names are not allowed. For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-customrequesthandling.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    custom_request_handling_property = wafv2.CfnWebACL.CustomRequestHandlingProperty(\n        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n            name="name",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['insert_headers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.CustomRequestHandlingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.CustomResponseBodyProperty
class CfnWebACL_CustomResponseBodyPropertyDef(BaseStruct):
    content: str = pydantic.Field(..., description='The payload of the custom response. You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ``ContentType`` setting. For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n')
    content_type: str = pydantic.Field(..., description='The type of content in the payload that you are defining in the ``Content`` string.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-customresponsebody.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    custom_response_body_property = wafv2.CfnWebACL.CustomResponseBodyProperty(\n        content="content",\n        content_type="contentType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content', 'content_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.CustomResponseBodyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.CustomResponseProperty
class CfnWebACL_CustomResponsePropertyDef(BaseStruct):
    response_code: typing.Union[int, float] = pydantic.Field(..., description='The HTTP status code to return to the client. For a list of status codes that you can use in your custom responses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`_ in the *AWS WAF Developer Guide* .\n')
    custom_response_body_key: typing.Optional[str] = pydantic.Field(None, description='References the response body that you want AWS WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the ``WebACL`` or ``RuleGroup`` where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key.\n')
    response_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomHTTPHeaderPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The HTTP headers to use in the response. Duplicate header names are not allowed. For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-customresponse.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    custom_response_property = wafv2.CfnWebACL.CustomResponseProperty(\n        response_code=123,\n\n        # the properties below are optional\n        custom_response_body_key="customResponseBodyKey",\n        response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n            name="name",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['response_code', 'custom_response_body_key', 'response_headers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.CustomResponseProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.DefaultActionProperty
class CfnWebACL_DefaultActionPropertyDef(BaseStruct):
    allow: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AllowActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies that AWS WAF should allow requests by default.\n')
    block: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_BlockActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies that AWS WAF should block requests by default.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-defaultaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    default_action_property = wafv2.CfnWebACL.DefaultActionProperty(\n        allow=wafv2.CfnWebACL.AllowActionProperty(\n            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                    name="name",\n                    value="value"\n                )]\n            )\n        ),\n        block=wafv2.CfnWebACL.BlockActionProperty(\n            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                response_code=123,\n\n                # the properties below are optional\n                custom_response_body_key="customResponseBodyKey",\n                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                    name="name",\n                    value="value"\n                )]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allow', 'block']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.DefaultActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ExcludedRuleProperty
class CfnWebACL_ExcludedRulePropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the rule whose action you want to override to ``Count`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-excludedrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    excluded_rule_property = wafv2.CfnWebACL.ExcludedRuleProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ExcludedRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.FieldIdentifierProperty
class CfnWebACL_FieldIdentifierPropertyDef(BaseStruct):
    identifier: str = pydantic.Field(..., description='The name of the username or password field, used in the ``ManagedRuleGroupConfig`` settings. When the ``PayloadType`` is ``JSON`` , the identifier must be in JSON pointer syntax. For example ``/form/username`` . For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901>`_ . When the ``PayloadType`` is ``FORM_ENCODED`` , use the HTML form names. For example, ``username`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-fieldidentifier.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    field_identifier_property = wafv2.CfnWebACL.FieldIdentifierProperty(\n        identifier="identifier"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['identifier']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.FieldIdentifierProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.FieldToMatchProperty
class CfnWebACL_FieldToMatchPropertyDef(BaseStruct):
    all_query_arguments: typing.Any = pydantic.Field(None, description='Inspect all query arguments.\n')
    body: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_BodyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. A limited amount of the request body is forwarded to AWS WAF for inspection by the underlying host service. For regional resources, the limit is 8 KB (8,192 kilobytes) and for CloudFront distributions, the limit is 16 KB (16,384 kilobytes). For CloudFront distributions, you can increase the limit in the web ACL's ``AssociationConfig`` , for additional processing fees. For information about how to handle oversized request bodies, see the ``Body`` object configuration.\n")
    cookies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CookiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Inspect the request cookies. You must configure scope and pattern matching filters in the ``Cookies`` object, to define the set of cookies and the parts of the cookies that AWS WAF inspects. Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize cookie content in the ``Cookies`` object. AWS WAF applies the pattern matching filters to the cookies that it receives from the underlying host service.\n")
    headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_HeadersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Inspect the request headers. You must configure scope and pattern matching filters in the ``Headers`` object, to define the set of headers to and the parts of the headers that AWS WAF inspects. Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize header content in the ``Headers`` object. AWS WAF applies the pattern matching filters to the headers that it receives from the underlying host service.\n")
    json_body: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_JsonBodyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. A limited amount of the request body is forwarded to AWS WAF for inspection by the underlying host service. For regional resources, the limit is 8 KB (8,192 kilobytes) and for CloudFront distributions, the limit is 16 KB (16,384 kilobytes). For CloudFront distributions, you can increase the limit in the web ACL's ``AssociationConfig`` , for additional processing fees. For information about how to handle oversized request bodies, see the ``JsonBody`` object configuration.\n")
    method: typing.Any = pydantic.Field(None, description='Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.\n')
    query_string: typing.Any = pydantic.Field(None, description='Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.\n')
    single_header: typing.Any = pydantic.Field(None, description='Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn\'t case sensitive. Example JSON: ``"SingleHeader": { "Name": "haystack" }`` Alternately, you can filter and inspect all headers with the ``Headers`` ``FieldToMatch`` setting.\n')
    single_query_argument: typing.Any = pydantic.Field(None, description='Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn\'t case sensitive. Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``\n')
    uri_path: typing.Any = pydantic.Field(None, description='Inspect the request URI path. This is the part of the web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-fieldtomatch.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    field_to_match_property = wafv2.CfnWebACL.FieldToMatchProperty(\n        all_query_arguments=all_query_arguments,\n        body=wafv2.CfnWebACL.BodyProperty(\n            oversize_handling="oversizeHandling"\n        ),\n        cookies=wafv2.CfnWebACL.CookiesProperty(\n            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                all=all,\n                excluded_cookies=["excludedCookies"],\n                included_cookies=["includedCookies"]\n            ),\n            match_scope="matchScope",\n            oversize_handling="oversizeHandling"\n        ),\n        headers=wafv2.CfnWebACL.HeadersProperty(\n            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                all=all,\n                excluded_headers=["excludedHeaders"],\n                included_headers=["includedHeaders"]\n            ),\n            match_scope="matchScope",\n            oversize_handling="oversizeHandling"\n        ),\n        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                all=all,\n                included_paths=["includedPaths"]\n            ),\n            match_scope="matchScope",\n\n            # the properties below are optional\n            invalid_fallback_behavior="invalidFallbackBehavior",\n            oversize_handling="oversizeHandling"\n        ),\n        method=method,\n        query_string=query_string,\n        single_header=single_header,\n        single_query_argument=single_query_argument,\n        uri_path=uri_path\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['all_query_arguments', 'body', 'cookies', 'headers', 'json_body', 'method', 'query_string', 'single_header', 'single_query_argument', 'uri_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.FieldToMatchProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ForwardedIPConfigurationProperty
class CfnWebACL_ForwardedIPConfigurationPropertyDef(BaseStruct):
    fallback_behavior: str = pydantic.Field(..., description="The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. .. epigraph:: If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. You can specify the following fallback behaviors: - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement.\n")
    header_name: str = pydantic.Field(..., description='The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` . .. epigraph:: If the specified header isn\'t present in the request, AWS WAF doesn\'t apply the rule to the web request at all.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-forwardedipconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    forwarded_iPConfiguration_property = wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n        fallback_behavior="fallbackBehavior",\n        header_name="headerName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['fallback_behavior', 'header_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ForwardedIPConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.GeoMatchStatementProperty
class CfnWebACL_GeoMatchStatementPropertyDef(BaseStruct):
    country_codes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of two-character country codes that you want to match against, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. When you use a geo match statement just for the region and country labels that it adds to requests, you still have to supply a country code for the rule to evaluate. In this case, you configure the rule to only count matching requests, but it will still generate logging and count metrics for any matches. You can reduce the logging and metrics that the rule produces by specifying a country that\'s unlikely to be a source of traffic to your site.\n')
    forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that\'s reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. .. epigraph:: If the specified header isn\'t present in the request, AWS WAF doesn\'t apply the rule to the web request at all.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-geomatchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    geo_match_statement_property = wafv2.CfnWebACL.GeoMatchStatementProperty(\n        country_codes=["countryCodes"],\n        forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n            fallback_behavior="fallbackBehavior",\n            header_name="headerName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['country_codes', 'forwarded_ip_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.GeoMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.HeaderMatchPatternProperty
class CfnWebACL_HeaderMatchPatternPropertyDef(BaseStruct):
    all: typing.Any = pydantic.Field(None, description='Inspect all headers.\n')
    excluded_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="Inspect only the headers whose keys don't match any of the strings specified here.\n")
    included_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Inspect only the headers that have a key that matches one of the strings specified here.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-headermatchpattern.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    header_match_pattern_property = wafv2.CfnWebACL.HeaderMatchPatternProperty(\n        all=all,\n        excluded_headers=["excludedHeaders"],\n        included_headers=["includedHeaders"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['all', 'excluded_headers', 'included_headers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.HeaderMatchPatternProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.HeadersProperty
class CfnWebACL_HeadersPropertyDef(BaseStruct):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_HeaderMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The filter to use to identify the subset of headers to inspect in a web request. You must specify exactly one setting: either ``All`` , ``IncludedHeaders`` , or ``ExcludedHeaders`` . Example JSON: ``"MatchPattern": { "ExcludedHeaders": {"KeyToExclude1", "KeyToExclude2"} }``\n')
    match_scope: str = pydantic.Field(..., description='The parts of the headers to match with the rule inspection criteria. If you specify ``All`` , AWS WAF inspects both keys and values.\n')
    oversize_handling: str = pydantic.Field(..., description='What AWS WAF should do if the headers of the request are more numerous or larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request headers when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers and at most 8 KB of header contents to AWS WAF . The options for oversize handling are the following: - ``CONTINUE`` - Inspect the available headers normally, according to the rule inspection criteria. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-headers.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    headers_property = wafv2.CfnWebACL.HeadersProperty(\n        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n            all=all,\n            excluded_headers=["excludedHeaders"],\n            included_headers=["includedHeaders"]\n        ),\n        match_scope="matchScope",\n        oversize_handling="oversizeHandling"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['match_pattern', 'match_scope', 'oversize_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.HeadersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ImmunityTimePropertyProperty
class CfnWebACL_ImmunityTimePropertyPropertyDef(BaseStruct):
    immunity_time: typing.Union[int, float] = pydantic.Field(..., description='The amount of time, in seconds, that a ``CAPTCHA`` or challenge timestamp is considered valid by AWS WAF . The default setting is 300. For the Challenge action, the minimum setting is 300.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-immunitytimeproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    immunity_time_property_property = wafv2.CfnWebACL.ImmunityTimePropertyProperty(\n        immunity_time=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['immunity_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ImmunityTimePropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.IPSetForwardedIPConfigurationProperty
class CfnWebACL_IPSetForwardedIPConfigurationPropertyDef(BaseStruct):
    fallback_behavior: str = pydantic.Field(..., description="The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. .. epigraph:: If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. You can specify the following fallback behaviors: - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement.\n")
    header_name: str = pydantic.Field(..., description="The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` . .. epigraph:: If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.\n")
    position: str = pydantic.Field(..., description='The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. The options for this setting are the following: - FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client\'s original IP. - LAST - Inspect the last IP address in the list of IP addresses in the header. - ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, AWS WAF inspects the last 10.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-ipsetforwardedipconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    i_pSet_forwarded_iPConfiguration_property = {\n        "fallback_behavior": "fallbackBehavior",\n        "header_name": "headerName",\n        "position": "position"\n    }\n')
    _init_params: typing.ClassVar[list[str]] = ['fallback_behavior', 'header_name', 'position']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.IPSetForwardedIPConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.IPSetReferenceStatementProperty
class CfnWebACL_IPSetReferenceStatementPropertyDef(BaseStruct):
    arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the ``IPSet`` that this statement references.\n')
    ip_set_forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_IPSetForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that\'s reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. .. epigraph:: If the specified header isn\'t present in the request, AWS WAF doesn\'t apply the rule to the web request at all.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-ipsetreferencestatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    i_pSet_reference_statement_property = {\n        "arn": "arn",\n\n        # the properties below are optional\n        "ip_set_forwarded_ip_config": {\n            "fallback_behavior": "fallbackBehavior",\n            "header_name": "headerName",\n            "position": "position"\n        }\n    }\n')
    _init_params: typing.ClassVar[list[str]] = ['arn', 'ip_set_forwarded_ip_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.IPSetReferenceStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.JsonBodyProperty
class CfnWebACL_JsonBodyPropertyDef(BaseStruct):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_JsonMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria.\n')
    match_scope: str = pydantic.Field(..., description='The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , AWS WAF matches against keys and values.\n')
    invalid_fallback_behavior: typing.Optional[str] = pydantic.Field(None, description='What AWS WAF should do if it fails to completely parse the JSON body. The options are the following:. - ``EVALUATE_AS_STRING`` - Inspect the body as plain text. AWS WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement. If you don\'t provide this setting, AWS WAF parses and evaluates the content only up to the first parsing failure that it encounters. AWS WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as invalid characters, duplicate keys, truncation, and any content whose root node isn\'t an object or an array. AWS WAF parses the JSON in the following examples as two valid key, value pairs: - Missing comma: ``{"key1":"value1""key2":"value2"}`` - Missing colon: ``{"key1":"value1","key2""value2"}`` - Extra colons: ``{"key1"::"value1","key2""value2"}``\n')
    oversize_handling: typing.Optional[str] = pydantic.Field(None, description='What AWS WAF should do if the body is larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. If the body is larger than the limit, the underlying host service only forwards the contents that are below the limit to AWS WAF for inspection. The default limit is 8 KB (8,192 kilobytes) for regional resources and 16 KB (16,384 kilobytes) for CloudFront distributions. For CloudFront distributions, you can increase the limit in the web ACL ``AssociationConfig`` , for additional processing fees. The options for oversize handling are the following: - ``CONTINUE`` - Inspect the available body contents normally, according to the rule inspection criteria. - ``MATCH`` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request. - ``NO_MATCH`` - Treat the web request as not matching the rule statement. You can combine the ``MATCH`` or ``NO_MATCH`` settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit. Default: ``CONTINUE``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-jsonbody.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    json_body_property = wafv2.CfnWebACL.JsonBodyProperty(\n        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n            all=all,\n            included_paths=["includedPaths"]\n        ),\n        match_scope="matchScope",\n\n        # the properties below are optional\n        invalid_fallback_behavior="invalidFallbackBehavior",\n        oversize_handling="oversizeHandling"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['match_pattern', 'match_scope', 'invalid_fallback_behavior', 'oversize_handling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.JsonBodyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.JsonMatchPatternProperty
class CfnWebACL_JsonMatchPatternPropertyDef(BaseStruct):
    all: typing.Any = pydantic.Field(None, description='Match all of the elements. See also ``MatchScope`` in the ``JsonBody`` ``FieldToMatch`` specification. You must specify either this setting or the ``IncludedPaths`` setting, but not both.\n')
    included_paths: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Match only the specified include paths. See also ``MatchScope`` in the ``JsonBody`` ``FieldToMatch`` specification. Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901>`_ . You must specify either this setting or the ``All`` setting, but not both. .. epigraph:: Don\'t use this option to include all paths. Instead, use the ``All`` setting.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-jsonmatchpattern.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n\n    json_match_pattern_property = wafv2.CfnWebACL.JsonMatchPatternProperty(\n        all=all,\n        included_paths=["includedPaths"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['all', 'included_paths']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.JsonMatchPatternProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.LabelMatchStatementProperty
class CfnWebACL_LabelMatchStatementPropertyDef(BaseStruct):
    key: str = pydantic.Field(..., description="The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting:. - If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name. - If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .\n")
    _init_params: typing.ClassVar[list[str]] = ['key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.LabelMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.LabelProperty
class CfnWebACL_LabelPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The label string.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-label.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    label_property = wafv2.CfnWebACL.LabelProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.LabelProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ManagedRuleGroupConfigProperty
class CfnWebACL_ManagedRuleGroupConfigPropertyDef(BaseStruct):
    aws_managed_rules_atp_rule_set: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AWSManagedRulesATPRuleSetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Additional configuration for using the account takeover prevention (ATP) managed rule group, ``AWSManagedRulesATPRuleSet`` . Use this to provide login request information to the rule group. For web ACLs that protect CloudFront distributions, use this to also provide the information about how your distribution responds to login requests. This configuration replaces the individual configuration fields in ``ManagedRuleGroupConfig`` and provides additional feature configuration. For information about using the ATP managed rule group, see `AWS WAF Fraud Control account takeover prevention (ATP) rule group <https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-atp.html>`_ and `AWS WAF Fraud Control account takeover prevention (ATP) <https://docs.aws.amazon.com/waf/latest/developerguide/waf-atp.html>`_ in the *AWS WAF Developer Guide* .\n')
    aws_managed_rules_bot_control_rule_set: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AWSManagedRulesBotControlRuleSetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. For information about using the Bot Control managed rule group, see `AWS WAF Bot Control rule group <https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html>`_ and `AWS WAF Bot Control <https://docs.aws.amazon.com/waf/latest/developerguide/waf-bot-control.html>`_ in the *AWS WAF Developer Guide* .\n')
    login_path: typing.Optional[str] = pydantic.Field(None, description='.. epigraph:: Instead of this setting, provide your configuration under ``AWSManagedRulesATPRuleSet`` .\n')
    password_field: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldIdentifierPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='.. epigraph:: Instead of this setting, provide your configuration under ``AWSManagedRulesATPRuleSet`` ``RequestInspection`` .\n')
    payload_type: typing.Optional[str] = pydantic.Field(None, description='.. epigraph:: Instead of this setting, provide your configuration under ``AWSManagedRulesATPRuleSet`` ``RequestInspection`` .\n')
    username_field: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldIdentifierPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='.. epigraph:: Instead of this setting, provide your configuration under ``AWSManagedRulesATPRuleSet`` ``RequestInspection`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-managedrulegroupconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    managed_rule_group_config_property = wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n        aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n            login_path="loginPath",\n\n            # the properties below are optional\n            request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                    identifier="identifier"\n                ),\n                payload_type="payloadType",\n                username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                    identifier="identifier"\n                )\n            ),\n            response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                    failure_strings=["failureStrings"],\n                    success_strings=["successStrings"]\n                ),\n                header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                    failure_values=["failureValues"],\n                    name="name",\n                    success_values=["successValues"]\n                ),\n                json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                    failure_values=["failureValues"],\n                    identifier="identifier",\n                    success_values=["successValues"]\n                ),\n                status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                    failure_codes=[123],\n                    success_codes=[123]\n                )\n            )\n        ),\n        aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n            inspection_level="inspectionLevel"\n        ),\n        login_path="loginPath",\n        password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n            identifier="identifier"\n        ),\n        payload_type="payloadType",\n        username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n            identifier="identifier"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aws_managed_rules_atp_rule_set', 'aws_managed_rules_bot_control_rule_set', 'login_path', 'password_field', 'payload_type', 'username_field']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ManagedRuleGroupConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ManagedRuleGroupStatementProperty
class CfnWebACL_ManagedRuleGroupStatementPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.\n')
    vendor_name: str = pydantic.Field(..., description='The name of the managed rule group vendor. You use this, along with the rule group name, to identify a rule group.\n')
    excluded_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ExcludedRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Rules in the referenced rule group whose actions are set to ``Count`` . .. epigraph:: Instead of this option, use ``RuleActionOverrides`` . It accepts any valid action setting, including ``Count`` .\n')
    managed_rule_group_configs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ManagedRuleGroupConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Additional information that's used by a managed rule group. Many managed rule groups don't require this. Use the ``AWSManagedRulesATPRuleSet`` configuration object for the account takeover prevention managed rule group, to provide information such as the sign-in page of your application and the type of content to accept or reject from the client. Use the ``AWSManagedRulesBotControlRuleSet`` configuration object to configure the protection level that you want the Bot Control rule group to use.\n")
    rule_action_overrides: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleActionOverridePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. You can use overrides for testing, for example you can override all of rule actions to ``Count`` and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.\n')
    scope_down_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable ``Statement`` in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.\n')
    version: typing.Optional[str] = pydantic.Field(None, description='The version of the managed rule group to use. If you specify this, the version setting is fixed until you change it. If you don\'t specify this, AWS WAF uses the vendor\'s default version, and then keeps the version at the vendor\'s default when the vendor updates the managed rule group settings.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-managedrulegroupstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnWebACL.StatementProperty\n    # uri_path: Any\n\n    managed_rule_group_statement_property = wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n        name="name",\n        vendor_name="vendorName",\n\n        # the properties below are optional\n        excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n            name="name"\n        )],\n        managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n            aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                login_path="loginPath",\n\n                # the properties below are optional\n                request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                    password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    ),\n                    payload_type="payloadType",\n                    username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    )\n                ),\n                response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                    body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                        failure_strings=["failureStrings"],\n                        success_strings=["successStrings"]\n                    ),\n                    header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                        failure_values=["failureValues"],\n                        name="name",\n                        success_values=["successValues"]\n                    ),\n                    json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                        failure_values=["failureValues"],\n                        identifier="identifier",\n                        success_values=["successValues"]\n                    ),\n                    status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                        failure_codes=[123],\n                        success_codes=[123]\n                    )\n                )\n            ),\n            aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                inspection_level="inspectionLevel"\n            ),\n            login_path="loginPath",\n            password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                identifier="identifier"\n            ),\n            payload_type="payloadType",\n            username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                identifier="identifier"\n            )\n        )],\n        rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n            action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                allow=wafv2.CfnWebACL.AllowActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                block=wafv2.CfnWebACL.BlockActionProperty(\n                    custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                        response_code=123,\n\n                        # the properties below are optional\n                        custom_response_body_key="customResponseBodyKey",\n                        response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                count=wafv2.CfnWebACL.CountActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                )\n            ),\n            name="name"\n        )],\n        scope_down_statement=wafv2.CfnWebACL.StatementProperty(\n            and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                name="name",\n                vendor_name="vendorName",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                    aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                        login_path="loginPath",\n\n                        # the properties below are optional\n                        request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                            password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            ),\n                            payload_type="payloadType",\n                            username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            )\n                        ),\n                        response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                            body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                failure_strings=["failureStrings"],\n                                success_strings=["successStrings"]\n                            ),\n                            header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                failure_values=["failureValues"],\n                                name="name",\n                                success_values=["successValues"]\n                            ),\n                            json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                failure_values=["failureValues"],\n                                identifier="identifier",\n                                success_values=["successValues"]\n                            ),\n                            status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                failure_codes=[123],\n                                success_codes=[123]\n                            )\n                        )\n                    ),\n                    aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                        inspection_level="inspectionLevel"\n                    ),\n                    login_path="loginPath",\n                    password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    ),\n                    payload_type="payloadType",\n                    username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    )\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )],\n                scope_down_statement=statement_property_,\n                version="version"\n            ),\n            not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                arn="arn",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        ),\n        version="version"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'vendor_name', 'excluded_rules', 'managed_rule_group_configs', 'rule_action_overrides', 'scope_down_statement', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ManagedRuleGroupStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.NotStatementProperty
class CfnWebACL_NotStatementPropertyDef(BaseStruct):
    statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The statement to negate. You can use any statement that can be nested.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-notstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnWebACL.StatementProperty\n    # uri_path: Any\n\n    not_statement_property = wafv2.CfnWebACL.NotStatementProperty(\n        statement=wafv2.CfnWebACL.StatementProperty(\n            and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                name="name",\n                vendor_name="vendorName",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                    aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                        login_path="loginPath",\n\n                        # the properties below are optional\n                        request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                            password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            ),\n                            payload_type="payloadType",\n                            username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            )\n                        ),\n                        response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                            body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                failure_strings=["failureStrings"],\n                                success_strings=["successStrings"]\n                            ),\n                            header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                failure_values=["failureValues"],\n                                name="name",\n                                success_values=["successValues"]\n                            ),\n                            json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                failure_values=["failureValues"],\n                                identifier="identifier",\n                                success_values=["successValues"]\n                            ),\n                            status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                failure_codes=[123],\n                                success_codes=[123]\n                            )\n                        )\n                    ),\n                    aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                        inspection_level="inspectionLevel"\n                    ),\n                    login_path="loginPath",\n                    password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    ),\n                    payload_type="payloadType",\n                    username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    )\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )],\n                scope_down_statement=statement_property_,\n                version="version"\n            ),\n            not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                arn="arn",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['statement']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.NotStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.OrStatementProperty
class CfnWebACL_OrStatementPropertyDef(BaseStruct):
    statements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The statements to combine with OR logic. You can use any statements that can be nested.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-orstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnWebACL.StatementProperty\n    # uri_path: Any\n\n    or_statement_property = wafv2.CfnWebACL.OrStatementProperty(\n        statements=[wafv2.CfnWebACL.StatementProperty(\n            and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                name="name",\n                vendor_name="vendorName",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                    aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                        login_path="loginPath",\n\n                        # the properties below are optional\n                        request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                            password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            ),\n                            payload_type="payloadType",\n                            username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            )\n                        ),\n                        response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                            body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                failure_strings=["failureStrings"],\n                                success_strings=["successStrings"]\n                            ),\n                            header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                failure_values=["failureValues"],\n                                name="name",\n                                success_values=["successValues"]\n                            ),\n                            json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                failure_values=["failureValues"],\n                                identifier="identifier",\n                                success_values=["successValues"]\n                            ),\n                            status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                failure_codes=[123],\n                                success_codes=[123]\n                            )\n                        )\n                    ),\n                    aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                        inspection_level="inspectionLevel"\n                    ),\n                    login_path="loginPath",\n                    password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    ),\n                    payload_type="payloadType",\n                    username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    )\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )],\n                scope_down_statement=statement_property_,\n                version="version"\n            ),\n            not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                arn="arn",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['statements']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.OrStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.OverrideActionProperty
class CfnWebACL_OverrideActionPropertyDef(BaseStruct):
    count: typing.Any = pydantic.Field(None, description='Override the rule group evaluation result to count only. .. epigraph:: This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with ``Count`` action, in your rule group reference statement settings.\n')
    none: typing.Any = pydantic.Field(None, description="Don't override the rule group evaluation result. This is the most common setting.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-overrideaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # count: Any\n    # none: Any\n\n    override_action_property = wafv2.CfnWebACL.OverrideActionProperty(\n        count=count,\n        none=none\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['count', 'none']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.OverrideActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.RateBasedStatementProperty
class CfnWebACL_RateBasedStatementPropertyDef(BaseStruct):
    aggregate_key_type: str = pydantic.Field(..., description='Setting that indicates how to aggregate the request counts. The options are the following:. - ``IP`` - Aggregate the request counts on the IP address from the web request origin. - ``FORWARDED_IP`` - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use. .. epigraph:: You can only use the ``IP`` and ``FORWARDED_IP`` key types.\n')
    limit: typing.Union[int, float] = pydantic.Field(..., description='The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.\n')
    forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. .. epigraph:: If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. This is required if you specify a forwarded IP in the rule's aggregate key settings.\n")
    scope_down_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable ``Statement`` in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-ratebasedstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnWebACL.StatementProperty\n    # uri_path: Any\n\n    rate_based_statement_property = wafv2.CfnWebACL.RateBasedStatementProperty(\n        aggregate_key_type="aggregateKeyType",\n        limit=123,\n\n        # the properties below are optional\n        forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n            fallback_behavior="fallbackBehavior",\n            header_name="headerName"\n        ),\n        scope_down_statement=wafv2.CfnWebACL.StatementProperty(\n            and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                name="name",\n                vendor_name="vendorName",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                    aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                        login_path="loginPath",\n\n                        # the properties below are optional\n                        request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                            password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            ),\n                            payload_type="payloadType",\n                            username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            )\n                        ),\n                        response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                            body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                failure_strings=["failureStrings"],\n                                success_strings=["successStrings"]\n                            ),\n                            header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                failure_values=["failureValues"],\n                                name="name",\n                                success_values=["successValues"]\n                            ),\n                            json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                failure_values=["failureValues"],\n                                identifier="identifier",\n                                success_values=["successValues"]\n                            ),\n                            status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                failure_codes=[123],\n                                success_codes=[123]\n                            )\n                        )\n                    ),\n                    aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                        inspection_level="inspectionLevel"\n                    ),\n                    login_path="loginPath",\n                    password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    ),\n                    payload_type="payloadType",\n                    username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    )\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )],\n                scope_down_statement=statement_property_,\n                version="version"\n            ),\n            not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                arn="arn",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aggregate_key_type', 'limit', 'forwarded_ip_config', 'scope_down_statement']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.RateBasedStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.RegexMatchStatementProperty
class CfnWebACL_RegexMatchStatementPropertyDef(BaseStruct):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    regex_string: str = pydantic.Field(..., description='The string representing the regular expression.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-regexmatchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    regex_match_statement_property = wafv2.CfnWebACL.RegexMatchStatementProperty(\n        field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnWebACL.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnWebACL.CookiesProperty(\n                match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnWebACL.HeadersProperty(\n                match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        regex_string="regexString",\n        text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['field_to_match', 'regex_string', 'text_transformations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.RegexMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty
class CfnWebACL_RegexPatternSetReferenceStatementPropertyDef(BaseStruct):
    arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the ``RegexPatternSet`` that this statement references.\n')
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-regexpatternsetreferencestatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    regex_pattern_set_reference_statement_property = wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n        arn="arn",\n        field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnWebACL.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnWebACL.CookiesProperty(\n                match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnWebACL.HeadersProperty(\n                match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['arn', 'field_to_match', 'text_transformations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.RequestInspectionProperty
class CfnWebACL_RequestInspectionPropertyDef(BaseStruct):
    password_field: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldIdentifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Details about your login page password field. How you specify this depends on the payload type. - For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901>`_ . For example, for the JSON payload ``{ "login": { "username": "THE_USERNAME", "password": "THE_PASSWORD" } }`` , the username field specification is ``/login/username`` and the password field specification is ``/login/password`` . - For form encoded payload types, use the HTML form names. For example, for an HTML form with input elements named ``username1`` and ``password1`` , the username field specification is ``username1`` and the password field specification is ``password1`` .\n')
    payload_type: str = pydantic.Field(..., description='The payload type for your login endpoint, either JSON or form encoded.\n')
    username_field: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldIdentifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Details about your login page username field. How you specify this depends on the payload type. - For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901>`_ . For example, for the JSON payload ``{ "login": { "username": "THE_USERNAME", "password": "THE_PASSWORD" } }`` , the username field specification is ``/login/username`` and the password field specification is ``/login/password`` . - For form encoded payload types, use the HTML form names. For example, for an HTML form with input elements named ``username1`` and ``password1`` , the username field specification is ``username1`` and the password field specification is ``password1`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-requestinspection.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    request_inspection_property = wafv2.CfnWebACL.RequestInspectionProperty(\n        password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n            identifier="identifier"\n        ),\n        payload_type="payloadType",\n        username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n            identifier="identifier"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['password_field', 'payload_type', 'username_field']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.RequestInspectionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty
class CfnWebACL_ResponseInspectionBodyContainsPropertyDef(BaseStruct):
    failure_strings: typing.Sequence[str] = pydantic.Field(..., description='Strings in the body of the response that indicate a failed login attempt. To be counted as a failed login, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings. JSON example: ``"FailureStrings": [ "Login failed" ]``\n')
    success_strings: typing.Sequence[str] = pydantic.Field(..., description='Strings in the body of the response that indicate a successful login attempt. To be counted as a successful login, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings. JSON example: ``"SuccessStrings": [ "Login successful", "Welcome to our site!" ]``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-responseinspectionbodycontains.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    response_inspection_body_contains_property = wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n        failure_strings=["failureStrings"],\n        success_strings=["successStrings"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['failure_strings', 'success_strings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionHeaderProperty
class CfnWebACL_ResponseInspectionHeaderPropertyDef(BaseStruct):
    failure_values: typing.Sequence[str] = pydantic.Field(..., description='Values in the response header with the specified name that indicate a failed login attempt. To be counted as a failed login, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: ``"FailureValues": [ "LoginFailed", "Failed login" ]``\n')
    name: str = pydantic.Field(..., description='The name of the header to match against. The name must be an exact match, including case. JSON example: ``"Name": [ "LoginResult" ]``\n')
    success_values: typing.Sequence[str] = pydantic.Field(..., description='Values in the response header with the specified name that indicate a successful login attempt. To be counted as a successful login, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: ``"SuccessValues": [ "LoginPassed", "Successful login" ]``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-responseinspectionheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    response_inspection_header_property = wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n        failure_values=["failureValues"],\n        name="name",\n        success_values=["successValues"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['failure_values', 'name', 'success_values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionJsonProperty
class CfnWebACL_ResponseInspectionJsonPropertyDef(BaseStruct):
    failure_values: typing.Sequence[str] = pydantic.Field(..., description='Values for the specified identifier in the response JSON that indicate a failed login attempt. To be counted as a failed login, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: ``"FailureValues": [ "False", "Failed" ]``\n')
    identifier: str = pydantic.Field(..., description='The identifier for the value to match against in the JSON. The identifier must be an exact match, including case. JSON example: ``"Identifier": [ "/login/success" ]``\n')
    success_values: typing.Sequence[str] = pydantic.Field(..., description='Values for the specified identifier in the response JSON that indicate a successful login attempt. To be counted as a successful login, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: ``"SuccessValues": [ "True", "Succeeded" ]``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-responseinspectionjson.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    response_inspection_json_property = wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n        failure_values=["failureValues"],\n        identifier="identifier",\n        success_values=["successValues"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['failure_values', 'identifier', 'success_values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionJsonProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionProperty
class CfnWebACL_ResponseInspectionPropertyDef(BaseStruct):
    body_contains: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionBodyContainsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures inspection of the response body. AWS WAF can inspect the first 65,536 bytes (64 KB) of the response body.\n')
    header: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionHeaderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures inspection of the response header.\n')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionJsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures inspection of the response JSON. AWS WAF can inspect the first 65,536 bytes (64 KB) of the response JSON.\n', alias='json')
    status_code: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionStatusCodePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures inspection of the response status code.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-responseinspection.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    response_inspection_property = wafv2.CfnWebACL.ResponseInspectionProperty(\n        body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n            failure_strings=["failureStrings"],\n            success_strings=["successStrings"]\n        ),\n        header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n            failure_values=["failureValues"],\n            name="name",\n            success_values=["successValues"]\n        ),\n        json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n            failure_values=["failureValues"],\n            identifier="identifier",\n            success_values=["successValues"]\n        ),\n        status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n            failure_codes=[123],\n            success_codes=[123]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['body_contains', 'header', 'json', 'status_code']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty
class CfnWebACL_ResponseInspectionStatusCodePropertyDef(BaseStruct):
    failure_codes: typing.Union[typing.Sequence[typing.Union[int, float]], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Status codes in the response that indicate a failed login attempt. To be counted as a failed login, the response status code must match one of these. Each code must be unique among the success and failure status codes. JSON example: ``"FailureCodes": [ 400, 404 ]``\n')
    success_codes: typing.Union[typing.Sequence[typing.Union[int, float]], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Status codes in the response that indicate a successful login attempt. To be counted as a successful login, the response status code must match one of these. Each code must be unique among the success and failure status codes. JSON example: ``"SuccessCodes": [ 200, 201 ]``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-responseinspectionstatuscode.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    response_inspection_status_code_property = wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n        failure_codes=[123],\n        success_codes=[123]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['failure_codes', 'success_codes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.RuleActionOverrideProperty
class CfnWebACL_RuleActionOverridePropertyDef(BaseStruct):
    action_to_use: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The override action to use, in place of the configured action of the rule in the rule group.\n')
    name: str = pydantic.Field(..., description='The name of the rule to override.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-ruleactionoverride.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    rule_action_override_property = wafv2.CfnWebACL.RuleActionOverrideProperty(\n        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n            allow=wafv2.CfnWebACL.AllowActionProperty(\n                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            ),\n            block=wafv2.CfnWebACL.BlockActionProperty(\n                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                    response_code=123,\n\n                    # the properties below are optional\n                    custom_response_body_key="customResponseBodyKey",\n                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            ),\n            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            ),\n            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            ),\n            count=wafv2.CfnWebACL.CountActionProperty(\n                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            )\n        ),\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action_to_use', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.RuleActionOverrideProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.RuleActionProperty
class CfnWebACL_RuleActionPropertyDef(BaseStruct):
    allow: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AllowActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Instructs AWS WAF to allow the web request.\n')
    block: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_BlockActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Instructs AWS WAF to block the web request.\n')
    captcha: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CaptchaActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies that AWS WAF should run a ``CAPTCHA`` check against the request:. - If the request includes a valid, unexpired ``CAPTCHA`` token, AWS WAF allows the web request inspection to proceed to the next rule, similar to a ``CountAction`` . - If the request doesn't include a valid, unexpired ``CAPTCHA`` token, AWS WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination. AWS WAF generates a response that it sends back to the client, which includes the following: - The header ``x-amzn-waf-action`` with a value of ``captcha`` . - The HTTP status code ``405 Method Not Allowed`` . - If the request contains an ``Accept`` header with a value of ``text/html`` , the response includes a ``CAPTCHA`` challenge. You can configure the expiration time in the ``CaptchaConfig`` ``ImmunityTimeProperty`` setting at the rule and web ACL level. The rule setting overrides the web ACL setting. This action option is available for rules. It isn't available for web ACL default actions.\n")
    challenge: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ChallengeActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Instructs AWS WAF to run a ``Challenge`` check against the web request.\n')
    count: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CountActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Instructs AWS WAF to count the web request and then continue evaluating the request using the remaining rules in the web ACL.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-ruleaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    rule_action_property = wafv2.CfnWebACL.RuleActionProperty(\n        allow=wafv2.CfnWebACL.AllowActionProperty(\n            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                    name="name",\n                    value="value"\n                )]\n            )\n        ),\n        block=wafv2.CfnWebACL.BlockActionProperty(\n            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                response_code=123,\n\n                # the properties below are optional\n                custom_response_body_key="customResponseBodyKey",\n                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                    name="name",\n                    value="value"\n                )]\n            )\n        ),\n        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                    name="name",\n                    value="value"\n                )]\n            )\n        ),\n        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                    name="name",\n                    value="value"\n                )]\n            )\n        ),\n        count=wafv2.CfnWebACL.CountActionProperty(\n            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                    name="name",\n                    value="value"\n                )]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allow', 'block', 'captcha', 'challenge', 'count']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.RuleActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.RuleGroupReferenceStatementProperty
class CfnWebACL_RuleGroupReferenceStatementPropertyDef(BaseStruct):
    arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the entity.\n')
    excluded_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ExcludedRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Rules in the referenced rule group whose actions are set to ``Count`` . .. epigraph:: Instead of this option, use ``RuleActionOverrides`` . It accepts any valid action setting, including ``Count`` .\n')
    rule_action_overrides: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleActionOverridePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. You can use overrides for testing, for example you can override all of rule actions to ``Count`` and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-rulegroupreferencestatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    rule_group_reference_statement_property = wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n        arn="arn",\n\n        # the properties below are optional\n        excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n            name="name"\n        )],\n        rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n            action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                allow=wafv2.CfnWebACL.AllowActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                block=wafv2.CfnWebACL.BlockActionProperty(\n                    custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                        response_code=123,\n\n                        # the properties below are optional\n                        custom_response_body_key="customResponseBodyKey",\n                        response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                count=wafv2.CfnWebACL.CountActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                )\n            ),\n            name="name"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['arn', 'excluded_rules', 'rule_action_overrides']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.RuleGroupReferenceStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.RuleProperty
class CfnWebACL_RulePropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description="The name of the rule. You can't change the name of a ``Rule`` after you create it.\n")
    priority: typing.Union[int, float] = pydantic.Field(..., description="If you define more than one ``Rule`` in a ``WebACL`` , AWS WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . AWS WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.\n")
    statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The AWS WAF processing statement for the rule, for example ``ByteMatchStatement`` or ``SizeConstraintStatement`` .\n')
    visibility_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_VisibilityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines and enables Amazon CloudWatch metrics and web request sample collection.\n')
    action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The action that AWS WAF should take on a web request when it matches the rule's statement. Settings at the web ACL level can override the rule action setting. This is used only for rules whose statements don't reference a rule group. Rule statements that reference a rule group are ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . You must set either this ``Action`` setting or the rule's ``OverrideAction`` , but not both: - If the rule statement doesn't reference a rule group, you must set this rule action setting and you must not set the rule's override action setting. - If the rule statement references a rule group, you must not set this action setting, because the actions are already set on the rules inside the rule group. You must set the rule's override action setting to indicate specifically whether to override the actions that are set on the rules in the rule group.\n")
    captcha_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CaptchaConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies how AWS WAF should handle ``CAPTCHA`` evaluations. If you don't specify this, AWS WAF uses the ``CAPTCHA`` configuration that's defined for the web ACL.\n")
    challenge_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ChallengeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies how AWS WAF should handle ``Challenge`` evaluations. If you don't specify this, AWS WAF uses the challenge configuration that's defined for the web ACL.\n")
    override_action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_OverrideActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The override action to apply to the rules in a rule group, instead of the individual rule action settings. This is used only for rules whose statements reference a rule group. Rule statements that reference a rule group are ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . Set the override action to none to leave the rule group rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. You must set either this ``OverrideAction`` setting or the ``Action`` setting, but not both: - If the rule statement references a rule group, you must set this override action setting and you must not set the rule's action setting. - If the rule statement doesn't reference a rule group, you must set the rule action setting and you must not set the rule's override action setting.\n")
    rule_labels: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_LabelPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Labels to apply to web requests that match the rule match statement. AWS WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule\'s rule group or web ACL defines the label namespace. Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` . For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines: - Separate each component of the label with a colon. - Each namespace or name can have up to 128 characters. - You can specify up to 5 namespaces in a label. - Don\'t use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-rule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # count: Any\n    # method: Any\n    # none: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnWebACL.StatementProperty\n    # uri_path: Any\n\n    rule_property = wafv2.CfnWebACL.RuleProperty(\n        name="name",\n        priority=123,\n        statement=wafv2.CfnWebACL.StatementProperty(\n            and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                statements=[statement_property_]\n            ),\n            byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                positional_constraint="positionalConstraint",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                search_string="searchString",\n                search_string_base64="searchStringBase64"\n            ),\n            geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                country_codes=["countryCodes"],\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                )\n            ),\n            ip_set_reference_statement={\n                "arn": "arn",\n\n                # the properties below are optional\n                "ip_set_forwarded_ip_config": {\n                    "fallback_behavior": "fallbackBehavior",\n                    "header_name": "headerName",\n                    "position": "position"\n                }\n            },\n            label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                key="key",\n                scope="scope"\n            ),\n            managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                name="name",\n                vendor_name="vendorName",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                    aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                        login_path="loginPath",\n\n                        # the properties below are optional\n                        request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                            password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            ),\n                            payload_type="payloadType",\n                            username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                identifier="identifier"\n                            )\n                        ),\n                        response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                            body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                failure_strings=["failureStrings"],\n                                success_strings=["successStrings"]\n                            ),\n                            header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                failure_values=["failureValues"],\n                                name="name",\n                                success_values=["successValues"]\n                            ),\n                            json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                failure_values=["failureValues"],\n                                identifier="identifier",\n                                success_values=["successValues"]\n                            ),\n                            status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                failure_codes=[123],\n                                success_codes=[123]\n                            )\n                        )\n                    ),\n                    aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                        inspection_level="inspectionLevel"\n                    ),\n                    login_path="loginPath",\n                    password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    ),\n                    payload_type="payloadType",\n                    username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                        identifier="identifier"\n                    )\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )],\n                scope_down_statement=statement_property_,\n                version="version"\n            ),\n            not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                statement=statement_property_\n            ),\n            or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                statements=[statement_property_]\n            ),\n            rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                aggregate_key_type="aggregateKeyType",\n                limit=123,\n\n                # the properties below are optional\n                forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                    fallback_behavior="fallbackBehavior",\n                    header_name="headerName"\n                ),\n                scope_down_statement=statement_property_\n            ),\n            regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                regex_string="regexString",\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                arn="arn",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                arn="arn",\n\n                # the properties below are optional\n                excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                    name="name"\n                )],\n                rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                    action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                        allow=wafv2.CfnWebACL.AllowActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        block=wafv2.CfnWebACL.BlockActionProperty(\n                            custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                response_code=123,\n\n                                # the properties below are optional\n                                custom_response_body_key="customResponseBodyKey",\n                                response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        ),\n                        count=wafv2.CfnWebACL.CountActionProperty(\n                            custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                    name="name",\n                                    value="value"\n                                )]\n                            )\n                        )\n                    ),\n                    name="name"\n                )]\n            ),\n            size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                comparison_operator="comparisonOperator",\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                size=123,\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            ),\n            sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )],\n\n                # the properties below are optional\n                sensitivity_level="sensitivityLevel"\n            ),\n            xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                    all_query_arguments=all_query_arguments,\n                    body=wafv2.CfnWebACL.BodyProperty(\n                        oversize_handling="oversizeHandling"\n                    ),\n                    cookies=wafv2.CfnWebACL.CookiesProperty(\n                        match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                            all=all,\n                            excluded_cookies=["excludedCookies"],\n                            included_cookies=["includedCookies"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    headers=wafv2.CfnWebACL.HeadersProperty(\n                        match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                            all=all,\n                            excluded_headers=["excludedHeaders"],\n                            included_headers=["includedHeaders"]\n                        ),\n                        match_scope="matchScope",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                        match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                            all=all,\n                            included_paths=["includedPaths"]\n                        ),\n                        match_scope="matchScope",\n\n                        # the properties below are optional\n                        invalid_fallback_behavior="invalidFallbackBehavior",\n                        oversize_handling="oversizeHandling"\n                    ),\n                    method=method,\n                    query_string=query_string,\n                    single_header=single_header,\n                    single_query_argument=single_query_argument,\n                    uri_path=uri_path\n                ),\n                text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                    priority=123,\n                    type="type"\n                )]\n            )\n        ),\n        visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(\n            cloud_watch_metrics_enabled=False,\n            metric_name="metricName",\n            sampled_requests_enabled=False\n        ),\n\n        # the properties below are optional\n        action=wafv2.CfnWebACL.RuleActionProperty(\n            allow=wafv2.CfnWebACL.AllowActionProperty(\n                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            ),\n            block=wafv2.CfnWebACL.BlockActionProperty(\n                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                    response_code=123,\n\n                    # the properties below are optional\n                    custom_response_body_key="customResponseBodyKey",\n                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            ),\n            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            ),\n            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            ),\n            count=wafv2.CfnWebACL.CountActionProperty(\n                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            )\n        ),\n        captcha_config=wafv2.CfnWebACL.CaptchaConfigProperty(\n            immunity_time_property=wafv2.CfnWebACL.ImmunityTimePropertyProperty(\n                immunity_time=123\n            )\n        ),\n        challenge_config=wafv2.CfnWebACL.ChallengeConfigProperty(\n            immunity_time_property=wafv2.CfnWebACL.ImmunityTimePropertyProperty(\n                immunity_time=123\n            )\n        ),\n        override_action=wafv2.CfnWebACL.OverrideActionProperty(\n            count=count,\n            none=none\n        ),\n        rule_labels=[wafv2.CfnWebACL.LabelProperty(\n            name="name"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'priority', 'statement', 'visibility_config', 'action', 'captcha_config', 'challenge_config', 'override_action', 'rule_labels']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.RuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.SingleHeaderProperty
class CfnWebACL_SingleHeaderPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the query header to inspect.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-singleheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    single_header_property = wafv2.CfnWebACL.SingleHeaderProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.SingleHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.SingleQueryArgumentProperty
class CfnWebACL_SingleQueryArgumentPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the query argument to inspect.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-singlequeryargument.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    single_query_argument_property = wafv2.CfnWebACL.SingleQueryArgumentProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.SingleQueryArgumentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.SizeConstraintStatementProperty
class CfnWebACL_SizeConstraintStatementPropertyDef(BaseStruct):
    comparison_operator: str = pydantic.Field(..., description='The operator to use to compare the request part to the size setting.\n')
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    size: typing.Union[int, float] = pydantic.Field(..., description='The size, in byte, to compare to the request part, after any transformations.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-sizeconstraintstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    size_constraint_statement_property = wafv2.CfnWebACL.SizeConstraintStatementProperty(\n        comparison_operator="comparisonOperator",\n        field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnWebACL.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnWebACL.CookiesProperty(\n                match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnWebACL.HeadersProperty(\n                match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        size=123,\n        text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison_operator', 'field_to_match', 'size', 'text_transformations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.SizeConstraintStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.SqliMatchStatementProperty
class CfnWebACL_SqliMatchStatementPropertyDef(BaseStruct):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n')
    sensitivity_level: typing.Optional[str] = pydantic.Field(None, description='The sensitivity that you want AWS WAF to use to inspect for SQL injection attacks. ``HIGH`` detects more attacks, but might generate more false positives, especially if your web requests frequently contain unusual strings. For information about identifying and mitigating false positives, see `Testing and tuning <https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html>`_ in the *AWS WAF Developer Guide* . ``LOW`` is generally a better choice for resources that already have other protections against SQL injection attacks or that have a low tolerance for false positives. Default: ``LOW``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-sqlimatchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    sqli_match_statement_property = wafv2.CfnWebACL.SqliMatchStatementProperty(\n        field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnWebACL.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnWebACL.CookiesProperty(\n                match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnWebACL.HeadersProperty(\n                match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )],\n\n        # the properties below are optional\n        sensitivity_level="sensitivityLevel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['field_to_match', 'text_transformations', 'sensitivity_level']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.SqliMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.StatementProperty
class CfnWebACL_StatementPropertyDef(BaseStruct):
    and_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AndStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A logical rule statement used to combine other rule statements with AND logic. You provide more than one ``Statement`` within the ``AndStatement`` .\n')
    byte_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ByteMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that defines a string match search for AWS WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want AWS WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the AWS WAF console and the developer guide, this is called a string match statement.\n')
    geo_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_GeoMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match. - To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the ``CountryCodes`` array. - Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed. AWS WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. AWS WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match ``ForwardedIPConfig`` . If you use the web request origin, the label formats are ``awswaf:clientip:geo:region:<ISO country code>-<ISO region code>`` and ``awswaf:clientip:geo:country:<ISO country code>`` . If you use a forwarded IP address, the label formats are ``awswaf:forwardedip:geo:region:<ISO country code>-<ISO region code>`` and ``awswaf:forwardedip:geo:country:<ISO country code>`` . For additional details, see `Geographic match rule statement <https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html>`_ in the `AWS WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`_ .\n')
    ip_set_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_IPSetReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an ``IPSet`` that specifies the addresses you want to detect, then use the ARN of that set in this statement. Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.\n')
    label_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_LabelMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL. The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, AWS WAF performs the search for labels that were added in the same context as the label match statement.\n')
    managed_rule_group_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ManagedRuleGroupStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.\n')
    not_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_NotStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A logical rule statement used to negate the results of another rule statement. You provide one ``Statement`` within the ``NotStatement`` .\n')
    or_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_OrStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A logical rule statement used to combine other rule statements with OR logic. You provide more than one ``Statement`` within the ``OrStatement`` .\n')
    rate_based_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RateBasedStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests. AWS WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by AWS WAF . If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by AWS WAF . When the rule action triggers, AWS WAF blocks additional requests from the IP address until the request rate falls below the limit. You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements: - An IP match statement with an IP set that specifies the address 192.0.2.44. - A string match statement that searches in the User-Agent header for the string BadBot. In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet the criteria of both of the nested statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet the criteria of both of the nested statements are not counted towards the rate limit and are not affected by this rule. You cannot nest a ``RateBasedStatement`` inside another statement, for example inside a ``NotStatement`` or ``OrStatement`` . You can define a ``RateBasedStatement`` inside a web ACL and inside a rule group.\n')
    regex_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RegexMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement used to search web request components for a match against a single regular expression.\n')
    regex_pattern_set_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RegexPatternSetReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement used to search web request components for matches with regular expressions. To use this, create a ``RegexPatternSet`` that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.\n')
    rule_group_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleGroupReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement used to run the rules that are defined in a ``RuleGroup`` . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement. You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . You can only use a rule group reference statement at the top level inside a web ACL.\n')
    size_constraint_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_SizeConstraintStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. If you configure AWS WAF to inspect the request body, AWS WAF inspects only the number of bytes of the body up to the limit for the web ACL. By default, for regional web ACLs, this limit is 8 KB (8,192 kilobytes) and for CloudFront web ACLs, this limit is 16 KB (16,384 kilobytes). For CloudFront web ACLs, you can increase the limit in the web ACL ``AssociationConfig`` , for additional fees. If you know that the request body for your web requests should never exceed the inspection limit, you could use a size constraint statement to block requests that have a larger request body size. If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.\n')
    sqli_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_SqliMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it.\n')
    xss_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_XssMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-statement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # and_statement_property_: wafv2.CfnWebACL.AndStatementProperty\n    # managed_rule_group_statement_property_: wafv2.CfnWebACL.ManagedRuleGroupStatementProperty\n    # method: Any\n    # not_statement_property_: wafv2.CfnWebACL.NotStatementProperty\n    # or_statement_property_: wafv2.CfnWebACL.OrStatementProperty\n    # query_string: Any\n    # rate_based_statement_property_: wafv2.CfnWebACL.RateBasedStatementProperty\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnWebACL.StatementProperty\n    # uri_path: Any\n\n    statement_property = wafv2.CfnWebACL.StatementProperty(\n        and_statement=wafv2.CfnWebACL.AndStatementProperty(\n            statements=[wafv2.CfnWebACL.StatementProperty(\n                and_statement=and_statement_property_,\n                byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                    name="name",\n                    vendor_name="vendorName",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                        aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                            login_path="loginPath",\n\n                            # the properties below are optional\n                            request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                                password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                ),\n                                payload_type="payloadType",\n                                username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                )\n                            ),\n                            response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                                body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                    failure_strings=["failureStrings"],\n                                    success_strings=["successStrings"]\n                                ),\n                                header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                    failure_values=["failureValues"],\n                                    name="name",\n                                    success_values=["successValues"]\n                                ),\n                                json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                    failure_values=["failureValues"],\n                                    identifier="identifier",\n                                    success_values=["successValues"]\n                                ),\n                                status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                    failure_codes=[123],\n                                    success_codes=[123]\n                                )\n                            )\n                        ),\n                        aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                            inspection_level="inspectionLevel"\n                        ),\n                        login_path="loginPath",\n                        password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        ),\n                        payload_type="payloadType",\n                        username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        )\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )],\n                    scope_down_statement=statement_property_,\n                    version="version"\n                ),\n                not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                    statement=statement_property_\n                ),\n                or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                    statements=[statement_property_]\n                ),\n                rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                    aggregate_key_type="aggregateKeyType",\n                    limit=123,\n\n                    # the properties below are optional\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    ),\n                    scope_down_statement=statement_property_\n                ),\n                regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                    arn="arn",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            )]\n        ),\n        byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n            field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnWebACL.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnWebACL.CookiesProperty(\n                    match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnWebACL.HeadersProperty(\n                    match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                    match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            positional_constraint="positionalConstraint",\n            text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )],\n\n            # the properties below are optional\n            search_string="searchString",\n            search_string_base64="searchStringBase64"\n        ),\n        geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n            country_codes=["countryCodes"],\n            forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                fallback_behavior="fallbackBehavior",\n                header_name="headerName"\n            )\n        ),\n        ip_set_reference_statement={\n            "arn": "arn",\n\n            # the properties below are optional\n            "ip_set_forwarded_ip_config": {\n                "fallback_behavior": "fallbackBehavior",\n                "header_name": "headerName",\n                "position": "position"\n            }\n        },\n        label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n            key="key",\n            scope="scope"\n        ),\n        managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n            name="name",\n            vendor_name="vendorName",\n\n            # the properties below are optional\n            excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                name="name"\n            )],\n            managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                    login_path="loginPath",\n\n                    # the properties below are optional\n                    request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                        password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        ),\n                        payload_type="payloadType",\n                        username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        )\n                    ),\n                    response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                        body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                            failure_strings=["failureStrings"],\n                            success_strings=["successStrings"]\n                        ),\n                        header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                            failure_values=["failureValues"],\n                            name="name",\n                            success_values=["successValues"]\n                        ),\n                        json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                            failure_values=["failureValues"],\n                            identifier="identifier",\n                            success_values=["successValues"]\n                        ),\n                        status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                            failure_codes=[123],\n                            success_codes=[123]\n                        )\n                    )\n                ),\n                aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                    inspection_level="inspectionLevel"\n                ),\n                login_path="loginPath",\n                password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                    identifier="identifier"\n                ),\n                payload_type="payloadType",\n                username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                    identifier="identifier"\n                )\n            )],\n            rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                    allow=wafv2.CfnWebACL.AllowActionProperty(\n                        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    ),\n                    block=wafv2.CfnWebACL.BlockActionProperty(\n                        custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                            response_code=123,\n\n                            # the properties below are optional\n                            custom_response_body_key="customResponseBodyKey",\n                            response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    ),\n                    captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    ),\n                    challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    ),\n                    count=wafv2.CfnWebACL.CountActionProperty(\n                        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    )\n                ),\n                name="name"\n            )],\n            scope_down_statement=wafv2.CfnWebACL.StatementProperty(\n                and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                    statements=[statement_property_]\n                ),\n                byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                managed_rule_group_statement=managed_rule_group_statement_property_,\n                not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                    statement=statement_property_\n                ),\n                or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                    statements=[statement_property_]\n                ),\n                rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                    aggregate_key_type="aggregateKeyType",\n                    limit=123,\n\n                    # the properties below are optional\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    ),\n                    scope_down_statement=statement_property_\n                ),\n                regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                    arn="arn",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            ),\n            version="version"\n        ),\n        not_statement=wafv2.CfnWebACL.NotStatementProperty(\n            statement=wafv2.CfnWebACL.StatementProperty(\n                and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                    statements=[statement_property_]\n                ),\n                byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                    name="name",\n                    vendor_name="vendorName",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                        aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                            login_path="loginPath",\n\n                            # the properties below are optional\n                            request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                                password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                ),\n                                payload_type="payloadType",\n                                username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                )\n                            ),\n                            response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                                body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                    failure_strings=["failureStrings"],\n                                    success_strings=["successStrings"]\n                                ),\n                                header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                    failure_values=["failureValues"],\n                                    name="name",\n                                    success_values=["successValues"]\n                                ),\n                                json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                    failure_values=["failureValues"],\n                                    identifier="identifier",\n                                    success_values=["successValues"]\n                                ),\n                                status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                    failure_codes=[123],\n                                    success_codes=[123]\n                                )\n                            )\n                        ),\n                        aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                            inspection_level="inspectionLevel"\n                        ),\n                        login_path="loginPath",\n                        password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        ),\n                        payload_type="payloadType",\n                        username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        )\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )],\n                    scope_down_statement=statement_property_,\n                    version="version"\n                ),\n                not_statement=not_statement_property_,\n                or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                    statements=[statement_property_]\n                ),\n                rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                    aggregate_key_type="aggregateKeyType",\n                    limit=123,\n\n                    # the properties below are optional\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    ),\n                    scope_down_statement=statement_property_\n                ),\n                regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                    arn="arn",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            )\n        ),\n        or_statement=wafv2.CfnWebACL.OrStatementProperty(\n            statements=[wafv2.CfnWebACL.StatementProperty(\n                and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                    statements=[statement_property_]\n                ),\n                byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                    name="name",\n                    vendor_name="vendorName",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                        aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                            login_path="loginPath",\n\n                            # the properties below are optional\n                            request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                                password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                ),\n                                payload_type="payloadType",\n                                username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                )\n                            ),\n                            response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                                body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                    failure_strings=["failureStrings"],\n                                    success_strings=["successStrings"]\n                                ),\n                                header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                    failure_values=["failureValues"],\n                                    name="name",\n                                    success_values=["successValues"]\n                                ),\n                                json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                    failure_values=["failureValues"],\n                                    identifier="identifier",\n                                    success_values=["successValues"]\n                                ),\n                                status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                    failure_codes=[123],\n                                    success_codes=[123]\n                                )\n                            )\n                        ),\n                        aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                            inspection_level="inspectionLevel"\n                        ),\n                        login_path="loginPath",\n                        password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        ),\n                        payload_type="payloadType",\n                        username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        )\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )],\n                    scope_down_statement=statement_property_,\n                    version="version"\n                ),\n                not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                    statement=statement_property_\n                ),\n                or_statement=or_statement_property_,\n                rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                    aggregate_key_type="aggregateKeyType",\n                    limit=123,\n\n                    # the properties below are optional\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    ),\n                    scope_down_statement=statement_property_\n                ),\n                regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                    arn="arn",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            )]\n        ),\n        rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n            aggregate_key_type="aggregateKeyType",\n            limit=123,\n\n            # the properties below are optional\n            forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                fallback_behavior="fallbackBehavior",\n                header_name="headerName"\n            ),\n            scope_down_statement=wafv2.CfnWebACL.StatementProperty(\n                and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                    statements=[statement_property_]\n                ),\n                byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                    name="name",\n                    vendor_name="vendorName",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                        aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                            login_path="loginPath",\n\n                            # the properties below are optional\n                            request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                                password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                ),\n                                payload_type="payloadType",\n                                username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                )\n                            ),\n                            response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                                body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                    failure_strings=["failureStrings"],\n                                    success_strings=["successStrings"]\n                                ),\n                                header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                    failure_values=["failureValues"],\n                                    name="name",\n                                    success_values=["successValues"]\n                                ),\n                                json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                    failure_values=["failureValues"],\n                                    identifier="identifier",\n                                    success_values=["successValues"]\n                                ),\n                                status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                    failure_codes=[123],\n                                    success_codes=[123]\n                                )\n                            )\n                        ),\n                        aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                            inspection_level="inspectionLevel"\n                        ),\n                        login_path="loginPath",\n                        password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        ),\n                        payload_type="payloadType",\n                        username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        )\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )],\n                    scope_down_statement=statement_property_,\n                    version="version"\n                ),\n                not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                    statement=statement_property_\n                ),\n                or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                    statements=[statement_property_]\n                ),\n                rate_based_statement=rate_based_statement_property_,\n                regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                    arn="arn",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            )\n        ),\n        regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n            field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnWebACL.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnWebACL.CookiesProperty(\n                    match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnWebACL.HeadersProperty(\n                    match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                    match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            regex_string="regexString",\n            text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )]\n        ),\n        regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n            arn="arn",\n            field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnWebACL.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnWebACL.CookiesProperty(\n                    match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnWebACL.HeadersProperty(\n                    match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                    match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )]\n        ),\n        rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n            arn="arn",\n\n            # the properties below are optional\n            excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                name="name"\n            )],\n            rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                    allow=wafv2.CfnWebACL.AllowActionProperty(\n                        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    ),\n                    block=wafv2.CfnWebACL.BlockActionProperty(\n                        custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                            response_code=123,\n\n                            # the properties below are optional\n                            custom_response_body_key="customResponseBodyKey",\n                            response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    ),\n                    captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    ),\n                    challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    ),\n                    count=wafv2.CfnWebACL.CountActionProperty(\n                        custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                            insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                name="name",\n                                value="value"\n                            )]\n                        )\n                    )\n                ),\n                name="name"\n            )]\n        ),\n        size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n            comparison_operator="comparisonOperator",\n            field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnWebACL.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnWebACL.CookiesProperty(\n                    match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnWebACL.HeadersProperty(\n                    match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                    match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            size=123,\n            text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )]\n        ),\n        sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n            field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnWebACL.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnWebACL.CookiesProperty(\n                    match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnWebACL.HeadersProperty(\n                    match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                    match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )],\n\n            # the properties below are optional\n            sensitivity_level="sensitivityLevel"\n        ),\n        xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n            field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                all_query_arguments=all_query_arguments,\n                body=wafv2.CfnWebACL.BodyProperty(\n                    oversize_handling="oversizeHandling"\n                ),\n                cookies=wafv2.CfnWebACL.CookiesProperty(\n                    match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                        all=all,\n                        excluded_cookies=["excludedCookies"],\n                        included_cookies=["includedCookies"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                headers=wafv2.CfnWebACL.HeadersProperty(\n                    match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                        all=all,\n                        excluded_headers=["excludedHeaders"],\n                        included_headers=["includedHeaders"]\n                    ),\n                    match_scope="matchScope",\n                    oversize_handling="oversizeHandling"\n                ),\n                json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                    match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                        all=all,\n                        included_paths=["includedPaths"]\n                    ),\n                    match_scope="matchScope",\n\n                    # the properties below are optional\n                    invalid_fallback_behavior="invalidFallbackBehavior",\n                    oversize_handling="oversizeHandling"\n                ),\n                method=method,\n                query_string=query_string,\n                single_header=single_header,\n                single_query_argument=single_query_argument,\n                uri_path=uri_path\n            ),\n            text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                priority=123,\n                type="type"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['and_statement', 'byte_match_statement', 'geo_match_statement', 'ip_set_reference_statement', 'label_match_statement', 'managed_rule_group_statement', 'not_statement', 'or_statement', 'rate_based_statement', 'regex_match_statement', 'regex_pattern_set_reference_statement', 'rule_group_reference_statement', 'size_constraint_statement', 'sqli_match_statement', 'xss_match_statement']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.StatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.TextTransformationProperty
class CfnWebACL_TextTransformationPropertyDef(BaseStruct):
    priority: typing.Union[int, float] = pydantic.Field(..., description="Sets the relative processing order for multiple transformations. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different.\n")
    type: str = pydantic.Field(..., description='You can specify the following transformation types:. *BASE64_DECODE* - Decode a ``Base64`` -encoded string. *BASE64_DECODE_EXT* - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren\'t valid. *CMD_LINE* - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. - Delete the following characters: ``\\ " \' ^`` - Delete spaces before the following characters: ``/ (`` - Replace the following characters with a space: ``, ;`` - Replace multiple spaces with one space - Convert uppercase letters (A-Z) to lowercase (a-z) *COMPRESS_WHITE_SPACE* - Replace these characters with a space character (decimal 32): - ``\\f`` , formfeed, decimal 12 - ``\\t`` , tab, decimal 9 - ``\\n`` , newline, decimal 10 - ``\\r`` , carriage return, decimal 13 - ``\\v`` , vertical tab, decimal 11 - Non-breaking space, decimal 160 ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space. *CSS_DECODE* - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It\'s also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\\vascript`` for javascript. *ESCAPE_SEQ_DECODE* - Decode the following ANSI C escape sequences: ``\\a`` , ``\\b`` , ``\\f`` , ``\\n`` , ``\\r`` , ``\\t`` , ``\\v`` , ``\\\\`` , ``\\?`` , ``\\\'`` , ``\\"`` , ``\\xHH`` (hexadecimal), ``\\0OOO`` (octal). Encodings that aren\'t valid remain in the output. *HEX_DECODE* - Decode a string of hexadecimal characters into a binary. *HTML_ENTITY_DECODE* - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: - Replaces ``(ampersand)quot;`` with ``"`` - Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 - Replaces ``(ampersand)lt;`` with a "less than" symbol - Replaces ``(ampersand)gt;`` with ``>`` - Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters - Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters *JS_DECODE* - Decode JavaScript escape sequences. If a ``\\`` ``u`` ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. *LOWERCASE* - Convert uppercase letters (A-Z) to lowercase (a-z). *MD5* - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. *NONE* - Specify ``NONE`` if you don\'t want any text transformations. *NORMALIZE_PATH* - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. *NORMALIZE_PATH_WIN* - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. *REMOVE_NULLS* - Remove all ``NULL`` bytes from the input. *REPLACE_COMMENTS* - Replace each occurrence of a C-style comment ( ``/* ... * /`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment ( ``* /`` ) is not acted upon. *REPLACE_NULLS* - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). *SQL_HEX_DECODE* - Decode SQL hex data. Example ( ``0x414243`` ) will be decoded to ( ``ABC`` ). *URL_DECODE* - Decode a URL-encoded value. *URL_DECODE_UNI* - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. *UTF8_TO_UNICODE* - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-texttransformation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    text_transformation_property = wafv2.CfnWebACL.TextTransformationProperty(\n        priority=123,\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['priority', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.TextTransformationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.VisibilityConfigProperty
class CfnWebACL_VisibilityConfigPropertyDef(BaseStruct):
    cloud_watch_metrics_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Indicates whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `AWS WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`_ in the *AWS WAF Developer Guide* . For web ACLs, the metrics are for web requests that have the web ACL default action applied. AWS WAF applies the default action to web requests that pass the inspection of all rules in the web ACL without being either allowed or blocked. For more information, see `The web ACL default action <https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-default-action.html>`_ in the *AWS WAF Developer Guide* .\n')
    metric_name: str = pydantic.Field(..., description="A name of the Amazon CloudWatch metric dimension. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names that are reserved for AWS WAF , for example ``All`` and ``Default_Action`` .\n")
    sampled_requests_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Indicates whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-visibilityconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    visibility_config_property = wafv2.CfnWebACL.VisibilityConfigProperty(\n        cloud_watch_metrics_enabled=False,\n        metric_name="metricName",\n        sampled_requests_enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_metrics_enabled', 'metric_name', 'sampled_requests_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.VisibilityConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL.XssMatchStatementProperty
class CfnWebACL_XssMatchStatementPropertyDef(BaseStruct):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The part of the web request that you want AWS WAF to inspect.\n')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wafv2-webacl-xssmatchstatement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # uri_path: Any\n\n    xss_match_statement_property = wafv2.CfnWebACL.XssMatchStatementProperty(\n        field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n            all_query_arguments=all_query_arguments,\n            body=wafv2.CfnWebACL.BodyProperty(\n                oversize_handling="oversizeHandling"\n            ),\n            cookies=wafv2.CfnWebACL.CookiesProperty(\n                match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                    all=all,\n                    excluded_cookies=["excludedCookies"],\n                    included_cookies=["includedCookies"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            headers=wafv2.CfnWebACL.HeadersProperty(\n                match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                    all=all,\n                    excluded_headers=["excludedHeaders"],\n                    included_headers=["includedHeaders"]\n                ),\n                match_scope="matchScope",\n                oversize_handling="oversizeHandling"\n            ),\n            json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                    all=all,\n                    included_paths=["includedPaths"]\n                ),\n                match_scope="matchScope",\n\n                # the properties below are optional\n                invalid_fallback_behavior="invalidFallbackBehavior",\n                oversize_handling="oversizeHandling"\n            ),\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            single_query_argument=single_query_argument,\n            uri_path=uri_path\n        ),\n        text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n            priority=123,\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['field_to_match', 'text_transformations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL.XssMatchStatementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnIPSet
class CfnIPSetDef(BaseCfnResource):
    scope_: models.constructs.ConstructDef = pydantic.Field(..., description='- scope in which this resource is defined.\n')
    addresses: typing.Sequence[str] = pydantic.Field(..., description='Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses. All addresses must be specified using Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports all IPv4 and IPv6 CIDR ranges except for ``/0`` . Example address strings: - To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify ``192.0.2.44/32`` . - To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify ``192.0.2.0/24`` . - To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify ``1111:0000:0000:0000:0000:0000:0000:0111/128`` . - To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify ``1111:0000:0000:0000:0000:0000:0000:0000/64`` . For more information about CIDR notation, see the Wikipedia entry `Classless Inter-Domain Routing <https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing>`_ . Example JSON ``Addresses`` specifications: - Empty array: ``"Addresses": []`` - Array with one address: ``"Addresses": ["192.0.2.44/32"]`` - Array with three addresses: ``"Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]`` - INVALID specification: ``"Addresses": [""]`` INVALID\n')
    ip_address_version: str = pydantic.Field(..., description='The version of the IP addresses, either ``IPV4`` or ``IPV6`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the IP set that helps with identification.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the IP set. You cannot change the name of an ``IPSet`` after you create it.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource. .. epigraph:: To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.')
    _init_params: typing.ClassVar[list[str]] = ['scope_', 'addresses', 'ip_address_version', 'description', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnIPSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnIPSetDefConfig] = pydantic.Field(None)


class CfnIPSetDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnIPSetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnIPSetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnIPSetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnIPSetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnIPSetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnIPSetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnIPSetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnIPSetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnIPSetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnIPSetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnIPSetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnIPSetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnIPSetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnIPSetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnIPSetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIPSetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnIPSetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIPSetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnIPSetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnIPSetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnIPSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnIPSetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnIPSetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIPSetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnIPSetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnIPSetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIPSetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfiguration
class CfnLoggingConfigurationDef(BaseCfnResource):
    log_destination_configs: typing.Sequence[str] = pydantic.Field(..., description='The logging destination configuration that you want to associate with the web ACL. .. epigraph:: You can associate one logging destination to a web ACL.\n')
    resource_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the web ACL that you want to associate with ``LogDestinationConfigs`` .\n')
    logging_filter: typing.Any = pydantic.Field(None, description='Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.\n')
    redacted_fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_FieldToMatchPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The parts of the request that you want to keep out of the logs. For example, if you redact the ``SingleHeader`` field, the ``HEADER`` field in the logs will be ``REDACTED`` . .. epigraph:: You can specify only the following fields for redaction: ``UriPath`` , ``QueryString`` , ``SingleHeader`` , ``Method`` , and ``JsonBody`` .')
    _init_params: typing.ClassVar[list[str]] = ['log_destination_configs', 'resource_arn', 'logging_filter', 'redacted_fields']
    _method_names: typing.ClassVar[list[str]] = ['ActionConditionProperty', 'ConditionProperty', 'FieldToMatchProperty', 'FilterProperty', 'JsonBodyProperty', 'LabelNameConditionProperty', 'LoggingFilterProperty', 'MatchPatternProperty', 'SingleHeaderProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnLoggingConfigurationDefConfig] = pydantic.Field(None)


class CfnLoggingConfigurationDefConfig(pydantic.BaseModel):
    ActionConditionProperty: typing.Optional[list[CfnLoggingConfigurationDefActionconditionpropertyParams]] = pydantic.Field(None, description='')
    ConditionProperty: typing.Optional[list[CfnLoggingConfigurationDefConditionpropertyParams]] = pydantic.Field(None, description='')
    FieldToMatchProperty: typing.Optional[list[CfnLoggingConfigurationDefFieldtomatchpropertyParams]] = pydantic.Field(None, description='')
    FilterProperty: typing.Optional[list[CfnLoggingConfigurationDefFilterpropertyParams]] = pydantic.Field(None, description='')
    JsonBodyProperty: typing.Optional[list[CfnLoggingConfigurationDefJsonbodypropertyParams]] = pydantic.Field(None, description='')
    LabelNameConditionProperty: typing.Optional[list[CfnLoggingConfigurationDefLabelnameconditionpropertyParams]] = pydantic.Field(None, description='')
    LoggingFilterProperty: typing.Optional[list[CfnLoggingConfigurationDefLoggingfilterpropertyParams]] = pydantic.Field(None, description='')
    MatchPatternProperty: typing.Optional[list[CfnLoggingConfigurationDefMatchpatternpropertyParams]] = pydantic.Field(None, description='')
    SingleHeaderProperty: typing.Optional[list[CfnLoggingConfigurationDefSingleheaderpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnLoggingConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnLoggingConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnLoggingConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnLoggingConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnLoggingConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnLoggingConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnLoggingConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnLoggingConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnLoggingConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnLoggingConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnLoggingConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnLoggingConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnLoggingConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_managed_by_firewall_manager_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)

class CfnLoggingConfigurationDefActionconditionpropertyParams(pydantic.BaseModel):
    action: str = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefConditionpropertyParams(pydantic.BaseModel):
    action_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_ActionConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    label_name_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_LabelNameConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnLoggingConfigurationDefFieldtomatchpropertyParams(pydantic.BaseModel):
    json_body: typing.Any = pydantic.Field(None, description='')
    method: typing.Any = pydantic.Field(None, description='')
    query_string: typing.Any = pydantic.Field(None, description='')
    single_header: typing.Any = pydantic.Field(None, description='')
    uri_path: typing.Any = pydantic.Field(None, description='')
    ...

class CfnLoggingConfigurationDefFilterpropertyParams(pydantic.BaseModel):
    behavior: str = pydantic.Field(..., description='')
    conditions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_ConditionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    requirement: str = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefJsonbodypropertyParams(pydantic.BaseModel):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_MatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    match_scope: str = pydantic.Field(..., description='')
    invalid_fallback_behavior: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLoggingConfigurationDefLabelnameconditionpropertyParams(pydantic.BaseModel):
    label_name: str = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefLoggingfilterpropertyParams(pydantic.BaseModel):
    default_behavior: str = pydantic.Field(..., description='')
    filters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_FilterPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefMatchpatternpropertyParams(pydantic.BaseModel):
    all: typing.Any = pydantic.Field(None, description='')
    included_paths: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnLoggingConfigurationDefSingleheaderpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLoggingConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLoggingConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLoggingConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLoggingConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLoggingConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLoggingConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLoggingConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLoggingConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLoggingConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLoggingConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnLoggingConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLoggingConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLoggingConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_wafv2.CfnRegexPatternSet
class CfnRegexPatternSetDef(BaseCfnResource):
    scope_: models.constructs.ConstructDef = pydantic.Field(..., description='- scope in which this resource is defined.\n')
    regular_expression_list: typing.Sequence[str] = pydantic.Field(..., description='The regular expression patterns in the set.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the set that helps with identification.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the set. You cannot change the name after you create the set.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource. .. epigraph:: To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.')
    _init_params: typing.ClassVar[list[str]] = ['scope_', 'regular_expression_list', 'description', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRegexPatternSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnRegexPatternSetDefConfig] = pydantic.Field(None)


class CfnRegexPatternSetDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnRegexPatternSetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnRegexPatternSetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnRegexPatternSetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnRegexPatternSetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnRegexPatternSetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnRegexPatternSetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnRegexPatternSetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnRegexPatternSetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnRegexPatternSetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnRegexPatternSetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnRegexPatternSetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnRegexPatternSetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnRegexPatternSetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnRegexPatternSetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRegexPatternSetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRegexPatternSetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRegexPatternSetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRegexPatternSetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRegexPatternSetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRegexPatternSetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRegexPatternSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRegexPatternSetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRegexPatternSetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRegexPatternSetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnRegexPatternSetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRegexPatternSetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRegexPatternSetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroup
class CfnRuleGroupDef(BaseCfnResource):
    scope_: models.constructs.ConstructDef = pydantic.Field(..., description='- scope in which this resource is defined.\n')
    capacity: typing.Union[int, float] = pydantic.Field(..., description='The web ACL capacity units (WCUs) required for this rule group. When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, AWS WAF enforces this limit. AWS WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. AWS WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.\n')
    visibility_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_VisibilityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines and enables Amazon CloudWatch metrics and web request sample collection.\n')
    available_labels: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_LabelSummaryPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the ``RuleLabels`` for a ``Rule`` .\n')
    consumed_labels: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_LabelSummaryPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a ``LabelMatchStatement`` specification, in the ``Statement`` definition of a rule.\n')
    custom_response_bodies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomResponseBodyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. For information about customizing web requests and responses, see `Customizing web requests and responses in AWS WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`_ in the *AWS WAF Developer Guide* . For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the rule group that helps with identification.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the rule group. You cannot change the name of a rule group after you create it.\n')
    rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource. .. epigraph:: To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.')
    _init_params: typing.ClassVar[list[str]] = ['scope_', 'capacity', 'visibility_config', 'available_labels', 'consumed_labels', 'custom_response_bodies', 'description', 'name', 'rules', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AllowProperty', 'AndStatementProperty', 'BlockProperty', 'BodyProperty', 'ByteMatchStatementProperty', 'CaptchaConfigProperty', 'CaptchaProperty', 'ChallengeConfigProperty', 'ChallengeProperty', 'CookieMatchPatternProperty', 'CookiesProperty', 'CountProperty', 'CustomHTTPHeaderProperty', 'CustomRequestHandlingProperty', 'CustomResponseBodyProperty', 'CustomResponseProperty', 'FieldToMatchProperty', 'ForwardedIPConfigurationProperty', 'GeoMatchStatementProperty', 'HeaderMatchPatternProperty', 'HeadersProperty', 'IPSetForwardedIPConfigurationProperty', 'IPSetReferenceStatementProperty', 'ImmunityTimePropertyProperty', 'JsonBodyProperty', 'JsonMatchPatternProperty', 'LabelMatchStatementProperty', 'LabelProperty', 'LabelSummaryProperty', 'NotStatementProperty', 'OrStatementProperty', 'RateBasedStatementProperty', 'RegexMatchStatementProperty', 'RegexPatternSetReferenceStatementProperty', 'RuleActionProperty', 'RuleProperty', 'SingleHeaderProperty', 'SingleQueryArgumentProperty', 'SizeConstraintStatementProperty', 'SqliMatchStatementProperty', 'StatementProperty', 'TextTransformationProperty', 'VisibilityConfigProperty', 'XssMatchStatementProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnRuleGroupDefConfig] = pydantic.Field(None)


class CfnRuleGroupDefConfig(pydantic.BaseModel):
    AllowProperty: typing.Optional[list[CfnRuleGroupDefAllowpropertyParams]] = pydantic.Field(None, description='')
    AndStatementProperty: typing.Optional[list[CfnRuleGroupDefAndstatementpropertyParams]] = pydantic.Field(None, description='')
    BlockProperty: typing.Optional[list[CfnRuleGroupDefBlockpropertyParams]] = pydantic.Field(None, description='')
    BodyProperty: typing.Optional[list[CfnRuleGroupDefBodypropertyParams]] = pydantic.Field(None, description='')
    ByteMatchStatementProperty: typing.Optional[list[CfnRuleGroupDefBytematchstatementpropertyParams]] = pydantic.Field(None, description='')
    CaptchaConfigProperty: typing.Optional[list[CfnRuleGroupDefCaptchaconfigpropertyParams]] = pydantic.Field(None, description='')
    CaptchaProperty: typing.Optional[list[CfnRuleGroupDefCaptchapropertyParams]] = pydantic.Field(None, description='')
    ChallengeConfigProperty: typing.Optional[list[CfnRuleGroupDefChallengeconfigpropertyParams]] = pydantic.Field(None, description='')
    ChallengeProperty: typing.Optional[list[CfnRuleGroupDefChallengepropertyParams]] = pydantic.Field(None, description='')
    CookieMatchPatternProperty: typing.Optional[list[CfnRuleGroupDefCookiematchpatternpropertyParams]] = pydantic.Field(None, description='')
    CookiesProperty: typing.Optional[list[CfnRuleGroupDefCookiespropertyParams]] = pydantic.Field(None, description='')
    CountProperty: typing.Optional[list[CfnRuleGroupDefCountpropertyParams]] = pydantic.Field(None, description='')
    CustomHTTPHeaderProperty: typing.Optional[list[CfnRuleGroupDefCustomhttpheaderpropertyParams]] = pydantic.Field(None, description='')
    CustomRequestHandlingProperty: typing.Optional[list[CfnRuleGroupDefCustomrequesthandlingpropertyParams]] = pydantic.Field(None, description='')
    CustomResponseBodyProperty: typing.Optional[list[CfnRuleGroupDefCustomresponsebodypropertyParams]] = pydantic.Field(None, description='')
    CustomResponseProperty: typing.Optional[list[CfnRuleGroupDefCustomresponsepropertyParams]] = pydantic.Field(None, description='')
    FieldToMatchProperty: typing.Optional[list[CfnRuleGroupDefFieldtomatchpropertyParams]] = pydantic.Field(None, description='')
    ForwardedIPConfigurationProperty: typing.Optional[list[CfnRuleGroupDefForwardedipconfigurationpropertyParams]] = pydantic.Field(None, description='')
    GeoMatchStatementProperty: typing.Optional[list[CfnRuleGroupDefGeomatchstatementpropertyParams]] = pydantic.Field(None, description='')
    HeaderMatchPatternProperty: typing.Optional[list[CfnRuleGroupDefHeadermatchpatternpropertyParams]] = pydantic.Field(None, description='')
    HeadersProperty: typing.Optional[list[CfnRuleGroupDefHeaderspropertyParams]] = pydantic.Field(None, description='')
    IPSetForwardedIPConfigurationProperty: typing.Optional[list[CfnRuleGroupDefIpsetforwardedipconfigurationpropertyParams]] = pydantic.Field(None, description='')
    IPSetReferenceStatementProperty: typing.Optional[list[CfnRuleGroupDefIpsetreferencestatementpropertyParams]] = pydantic.Field(None, description='')
    ImmunityTimePropertyProperty: typing.Optional[list[CfnRuleGroupDefImmunitytimepropertypropertyParams]] = pydantic.Field(None, description='')
    JsonBodyProperty: typing.Optional[list[CfnRuleGroupDefJsonbodypropertyParams]] = pydantic.Field(None, description='')
    JsonMatchPatternProperty: typing.Optional[list[CfnRuleGroupDefJsonmatchpatternpropertyParams]] = pydantic.Field(None, description='')
    LabelMatchStatementProperty: typing.Optional[list[CfnRuleGroupDefLabelmatchstatementpropertyParams]] = pydantic.Field(None, description='')
    LabelProperty: typing.Optional[list[CfnRuleGroupDefLabelpropertyParams]] = pydantic.Field(None, description='')
    LabelSummaryProperty: typing.Optional[list[CfnRuleGroupDefLabelsummarypropertyParams]] = pydantic.Field(None, description='')
    NotStatementProperty: typing.Optional[list[CfnRuleGroupDefNotstatementpropertyParams]] = pydantic.Field(None, description='')
    OrStatementProperty: typing.Optional[list[CfnRuleGroupDefOrstatementpropertyParams]] = pydantic.Field(None, description='')
    RateBasedStatementProperty: typing.Optional[list[CfnRuleGroupDefRatebasedstatementpropertyParams]] = pydantic.Field(None, description='')
    RegexMatchStatementProperty: typing.Optional[list[CfnRuleGroupDefRegexmatchstatementpropertyParams]] = pydantic.Field(None, description='')
    RegexPatternSetReferenceStatementProperty: typing.Optional[list[CfnRuleGroupDefRegexpatternsetreferencestatementpropertyParams]] = pydantic.Field(None, description='')
    RuleActionProperty: typing.Optional[list[CfnRuleGroupDefRuleactionpropertyParams]] = pydantic.Field(None, description='')
    RuleProperty: typing.Optional[list[CfnRuleGroupDefRulepropertyParams]] = pydantic.Field(None, description='')
    SingleHeaderProperty: typing.Optional[list[CfnRuleGroupDefSingleheaderpropertyParams]] = pydantic.Field(None, description='')
    SingleQueryArgumentProperty: typing.Optional[list[CfnRuleGroupDefSinglequeryargumentpropertyParams]] = pydantic.Field(None, description='')
    SizeConstraintStatementProperty: typing.Optional[list[CfnRuleGroupDefSizeconstraintstatementpropertyParams]] = pydantic.Field(None, description='')
    SqliMatchStatementProperty: typing.Optional[list[CfnRuleGroupDefSqlimatchstatementpropertyParams]] = pydantic.Field(None, description='')
    StatementProperty: typing.Optional[list[CfnRuleGroupDefStatementpropertyParams]] = pydantic.Field(None, description='')
    TextTransformationProperty: typing.Optional[list[CfnRuleGroupDefTexttransformationpropertyParams]] = pydantic.Field(None, description='')
    VisibilityConfigProperty: typing.Optional[list[CfnRuleGroupDefVisibilityconfigpropertyParams]] = pydantic.Field(None, description='')
    XssMatchStatementProperty: typing.Optional[list[CfnRuleGroupDefXssmatchstatementpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnRuleGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnRuleGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnRuleGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnRuleGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnRuleGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnRuleGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnRuleGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnRuleGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnRuleGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnRuleGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnRuleGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnRuleGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnRuleGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnRuleGroupDefAllowpropertyParams(pydantic.BaseModel):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefAndstatementpropertyParams(pydantic.BaseModel):
    statements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefBlockpropertyParams(pydantic.BaseModel):
    custom_response: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomResponsePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefBodypropertyParams(pydantic.BaseModel):
    oversize_handling: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefBytematchstatementpropertyParams(pydantic.BaseModel):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    positional_constraint: str = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    search_string: typing.Optional[str] = pydantic.Field(None, description='')
    search_string_base64: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefCaptchaconfigpropertyParams(pydantic.BaseModel):
    immunity_time_property: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ImmunityTimePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefCaptchapropertyParams(pydantic.BaseModel):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefChallengeconfigpropertyParams(pydantic.BaseModel):
    immunity_time_property: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ImmunityTimePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefChallengepropertyParams(pydantic.BaseModel):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefCookiematchpatternpropertyParams(pydantic.BaseModel):
    all: typing.Any = pydantic.Field(None, description='')
    excluded_cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    included_cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefCookiespropertyParams(pydantic.BaseModel):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CookieMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    match_scope: str = pydantic.Field(..., description='')
    oversize_handling: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefCountpropertyParams(pydantic.BaseModel):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefCustomhttpheaderpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefCustomrequesthandlingpropertyParams(pydantic.BaseModel):
    insert_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomHTTPHeaderPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefCustomresponsebodypropertyParams(pydantic.BaseModel):
    content: str = pydantic.Field(..., description='')
    content_type: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefCustomresponsepropertyParams(pydantic.BaseModel):
    response_code: typing.Union[int, float] = pydantic.Field(..., description='')
    custom_response_body_key: typing.Optional[str] = pydantic.Field(None, description='')
    response_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomHTTPHeaderPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefFieldtomatchpropertyParams(pydantic.BaseModel):
    all_query_arguments: typing.Any = pydantic.Field(None, description='')
    body: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_BodyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cookies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CookiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_HeadersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_body: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_JsonBodyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    method: typing.Any = pydantic.Field(None, description='')
    query_string: typing.Any = pydantic.Field(None, description='')
    single_header: typing.Any = pydantic.Field(None, description='')
    single_query_argument: typing.Any = pydantic.Field(None, description='')
    uri_path: typing.Any = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefForwardedipconfigurationpropertyParams(pydantic.BaseModel):
    fallback_behavior: str = pydantic.Field(..., description='')
    header_name: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefGeomatchstatementpropertyParams(pydantic.BaseModel):
    country_codes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefHeadermatchpatternpropertyParams(pydantic.BaseModel):
    all: typing.Any = pydantic.Field(None, description='')
    excluded_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    included_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefHeaderspropertyParams(pydantic.BaseModel):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_HeaderMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    match_scope: str = pydantic.Field(..., description='')
    oversize_handling: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefIpsetforwardedipconfigurationpropertyParams(pydantic.BaseModel):
    fallback_behavior: str = pydantic.Field(..., description='')
    header_name: str = pydantic.Field(..., description='')
    position: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefIpsetreferencestatementpropertyParams(pydantic.BaseModel):
    arn: str = pydantic.Field(..., description='')
    ip_set_forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_IPSetForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefImmunitytimepropertypropertyParams(pydantic.BaseModel):
    immunity_time: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefJsonbodypropertyParams(pydantic.BaseModel):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_JsonMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    match_scope: str = pydantic.Field(..., description='')
    invalid_fallback_behavior: typing.Optional[str] = pydantic.Field(None, description='')
    oversize_handling: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefJsonmatchpatternpropertyParams(pydantic.BaseModel):
    all: typing.Any = pydantic.Field(None, description='')
    included_paths: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefLabelmatchstatementpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    scope: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefLabelpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefLabelsummarypropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefNotstatementpropertyParams(pydantic.BaseModel):
    statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefOrstatementpropertyParams(pydantic.BaseModel):
    statements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefRatebasedstatementpropertyParams(pydantic.BaseModel):
    aggregate_key_type: str = pydantic.Field(..., description='')
    limit: typing.Union[int, float] = pydantic.Field(..., description='')
    forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    scope_down_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefRegexmatchstatementpropertyParams(pydantic.BaseModel):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    regex_string: str = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefRegexpatternsetreferencestatementpropertyParams(pydantic.BaseModel):
    arn: str = pydantic.Field(..., description='')
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefRuleactionpropertyParams(pydantic.BaseModel):
    allow: typing.Any = pydantic.Field(None, description='')
    block: typing.Any = pydantic.Field(None, description='')
    captcha: typing.Any = pydantic.Field(None, description='')
    challenge: typing.Any = pydantic.Field(None, description='')
    count: typing.Any = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefRulepropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    priority: typing.Union[int, float] = pydantic.Field(..., description='')
    statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_StatementPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    visibility_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_VisibilityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RuleActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    captcha_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CaptchaConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    challenge_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ChallengeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rule_labels: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_LabelPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefSingleheaderpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefSinglequeryargumentpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefSizeconstraintstatementpropertyParams(pydantic.BaseModel):
    comparison_operator: str = pydantic.Field(..., description='')
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    size: typing.Union[int, float] = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefSqlimatchstatementpropertyParams(pydantic.BaseModel):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    sensitivity_level: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefStatementpropertyParams(pydantic.BaseModel):
    and_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_AndStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    byte_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_ByteMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    geo_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_GeoMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ip_set_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_IPSetReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    label_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_LabelMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    not_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_NotStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    or_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_OrStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rate_based_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RateBasedStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    regex_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RegexMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    regex_pattern_set_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RegexPatternSetReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    size_constraint_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_SizeConstraintStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sqli_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_SqliMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    xss_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_XssMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnRuleGroupDefTexttransformationpropertyParams(pydantic.BaseModel):
    priority: typing.Union[int, float] = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefVisibilityconfigpropertyParams(pydantic.BaseModel):
    cloud_watch_metrics_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    metric_name: str = pydantic.Field(..., description='')
    sampled_requests_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefXssmatchstatementpropertyParams(pydantic.BaseModel):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnRuleGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRuleGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRuleGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRuleGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRuleGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRuleGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRuleGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRuleGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRuleGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRuleGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRuleGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnRuleGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRuleGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRuleGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_wafv2.CfnWebACL
class CfnWebACLDef(BaseCfnResource):
    scope_: models.constructs.ConstructDef = pydantic.Field(..., description='- scope in which this resource is defined.\n')
    default_action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_DefaultActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The action to perform if none of the ``Rules`` contained in the ``WebACL`` match.\n')
    visibility_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_VisibilityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines and enables Amazon CloudWatch metrics and web request sample collection.\n')
    captcha_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CaptchaConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies how AWS WAF should handle ``CAPTCHA`` evaluations for rules that don't have their own ``CaptchaConfig`` settings. If you don't specify this, AWS WAF uses its default settings for ``CaptchaConfig`` .\n")
    challenge_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ChallengeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies how AWS WAF should handle challenge evaluations for rules that don't have their own ``ChallengeConfig`` settings. If you don't specify this, AWS WAF uses its default settings for ``ChallengeConfig`` .\n")
    custom_response_bodies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomResponseBodyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. For information about customizing web requests and responses, see `Customizing web requests and responses in AWS WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`_ in the *AWS WAF Developer Guide* . For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the web ACL that helps with identification.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the web ACL. You cannot change the name of a web ACL after you create it.\n')
    rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource. .. epigraph:: To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.\n')
    token_domains: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.")
    _init_params: typing.ClassVar[list[str]] = ['scope_', 'default_action', 'visibility_config', 'captcha_config', 'challenge_config', 'custom_response_bodies', 'description', 'name', 'rules', 'tags', 'token_domains']
    _method_names: typing.ClassVar[list[str]] = ['AWSManagedRulesATPRuleSetProperty', 'AWSManagedRulesBotControlRuleSetProperty', 'AllowActionProperty', 'AndStatementProperty', 'BlockActionProperty', 'BodyProperty', 'ByteMatchStatementProperty', 'CaptchaActionProperty', 'CaptchaConfigProperty', 'ChallengeActionProperty', 'ChallengeConfigProperty', 'CookieMatchPatternProperty', 'CookiesProperty', 'CountActionProperty', 'CustomHTTPHeaderProperty', 'CustomRequestHandlingProperty', 'CustomResponseBodyProperty', 'CustomResponseProperty', 'DefaultActionProperty', 'ExcludedRuleProperty', 'FieldIdentifierProperty', 'FieldToMatchProperty', 'ForwardedIPConfigurationProperty', 'GeoMatchStatementProperty', 'HeaderMatchPatternProperty', 'HeadersProperty', 'IPSetForwardedIPConfigurationProperty', 'IPSetReferenceStatementProperty', 'ImmunityTimePropertyProperty', 'JsonBodyProperty', 'JsonMatchPatternProperty', 'LabelMatchStatementProperty', 'LabelProperty', 'ManagedRuleGroupConfigProperty', 'ManagedRuleGroupStatementProperty', 'NotStatementProperty', 'OrStatementProperty', 'OverrideActionProperty', 'RateBasedStatementProperty', 'RegexMatchStatementProperty', 'RegexPatternSetReferenceStatementProperty', 'RequestInspectionProperty', 'ResponseInspectionBodyContainsProperty', 'ResponseInspectionHeaderProperty', 'ResponseInspectionJsonProperty', 'ResponseInspectionProperty', 'ResponseInspectionStatusCodeProperty', 'RuleActionOverrideProperty', 'RuleActionProperty', 'RuleGroupReferenceStatementProperty', 'RuleProperty', 'SingleHeaderProperty', 'SingleQueryArgumentProperty', 'SizeConstraintStatementProperty', 'SqliMatchStatementProperty', 'StatementProperty', 'TextTransformationProperty', 'VisibilityConfigProperty', 'XssMatchStatementProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACL'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnWebACLDefConfig] = pydantic.Field(None)


class CfnWebACLDefConfig(pydantic.BaseModel):
    AWSManagedRulesATPRuleSetProperty: typing.Optional[list[CfnWebACLDefAwsmanagedrulesatprulesetpropertyParams]] = pydantic.Field(None, description='')
    AWSManagedRulesBotControlRuleSetProperty: typing.Optional[list[CfnWebACLDefAwsmanagedrulesbotcontrolrulesetpropertyParams]] = pydantic.Field(None, description='')
    AllowActionProperty: typing.Optional[list[CfnWebACLDefAllowactionpropertyParams]] = pydantic.Field(None, description='')
    AndStatementProperty: typing.Optional[list[CfnWebACLDefAndstatementpropertyParams]] = pydantic.Field(None, description='')
    BlockActionProperty: typing.Optional[list[CfnWebACLDefBlockactionpropertyParams]] = pydantic.Field(None, description='')
    BodyProperty: typing.Optional[list[CfnWebACLDefBodypropertyParams]] = pydantic.Field(None, description='')
    ByteMatchStatementProperty: typing.Optional[list[CfnWebACLDefBytematchstatementpropertyParams]] = pydantic.Field(None, description='')
    CaptchaActionProperty: typing.Optional[list[CfnWebACLDefCaptchaactionpropertyParams]] = pydantic.Field(None, description='')
    CaptchaConfigProperty: typing.Optional[list[CfnWebACLDefCaptchaconfigpropertyParams]] = pydantic.Field(None, description='')
    ChallengeActionProperty: typing.Optional[list[CfnWebACLDefChallengeactionpropertyParams]] = pydantic.Field(None, description='')
    ChallengeConfigProperty: typing.Optional[list[CfnWebACLDefChallengeconfigpropertyParams]] = pydantic.Field(None, description='')
    CookieMatchPatternProperty: typing.Optional[list[CfnWebACLDefCookiematchpatternpropertyParams]] = pydantic.Field(None, description='')
    CookiesProperty: typing.Optional[list[CfnWebACLDefCookiespropertyParams]] = pydantic.Field(None, description='')
    CountActionProperty: typing.Optional[list[CfnWebACLDefCountactionpropertyParams]] = pydantic.Field(None, description='')
    CustomHTTPHeaderProperty: typing.Optional[list[CfnWebACLDefCustomhttpheaderpropertyParams]] = pydantic.Field(None, description='')
    CustomRequestHandlingProperty: typing.Optional[list[CfnWebACLDefCustomrequesthandlingpropertyParams]] = pydantic.Field(None, description='')
    CustomResponseBodyProperty: typing.Optional[list[CfnWebACLDefCustomresponsebodypropertyParams]] = pydantic.Field(None, description='')
    CustomResponseProperty: typing.Optional[list[CfnWebACLDefCustomresponsepropertyParams]] = pydantic.Field(None, description='')
    DefaultActionProperty: typing.Optional[list[CfnWebACLDefDefaultactionpropertyParams]] = pydantic.Field(None, description='')
    ExcludedRuleProperty: typing.Optional[list[CfnWebACLDefExcludedrulepropertyParams]] = pydantic.Field(None, description='')
    FieldIdentifierProperty: typing.Optional[list[CfnWebACLDefFieldidentifierpropertyParams]] = pydantic.Field(None, description='')
    FieldToMatchProperty: typing.Optional[list[CfnWebACLDefFieldtomatchpropertyParams]] = pydantic.Field(None, description='')
    ForwardedIPConfigurationProperty: typing.Optional[list[CfnWebACLDefForwardedipconfigurationpropertyParams]] = pydantic.Field(None, description='')
    GeoMatchStatementProperty: typing.Optional[list[CfnWebACLDefGeomatchstatementpropertyParams]] = pydantic.Field(None, description='')
    HeaderMatchPatternProperty: typing.Optional[list[CfnWebACLDefHeadermatchpatternpropertyParams]] = pydantic.Field(None, description='')
    HeadersProperty: typing.Optional[list[CfnWebACLDefHeaderspropertyParams]] = pydantic.Field(None, description='')
    IPSetForwardedIPConfigurationProperty: typing.Optional[list[CfnWebACLDefIpsetforwardedipconfigurationpropertyParams]] = pydantic.Field(None, description='')
    IPSetReferenceStatementProperty: typing.Optional[list[CfnWebACLDefIpsetreferencestatementpropertyParams]] = pydantic.Field(None, description='')
    ImmunityTimePropertyProperty: typing.Optional[list[CfnWebACLDefImmunitytimepropertypropertyParams]] = pydantic.Field(None, description='')
    JsonBodyProperty: typing.Optional[list[CfnWebACLDefJsonbodypropertyParams]] = pydantic.Field(None, description='')
    JsonMatchPatternProperty: typing.Optional[list[CfnWebACLDefJsonmatchpatternpropertyParams]] = pydantic.Field(None, description='')
    LabelMatchStatementProperty: typing.Optional[list[CfnWebACLDefLabelmatchstatementpropertyParams]] = pydantic.Field(None, description='')
    LabelProperty: typing.Optional[list[CfnWebACLDefLabelpropertyParams]] = pydantic.Field(None, description='')
    ManagedRuleGroupConfigProperty: typing.Optional[list[CfnWebACLDefManagedrulegroupconfigpropertyParams]] = pydantic.Field(None, description='')
    ManagedRuleGroupStatementProperty: typing.Optional[list[CfnWebACLDefManagedrulegroupstatementpropertyParams]] = pydantic.Field(None, description='')
    NotStatementProperty: typing.Optional[list[CfnWebACLDefNotstatementpropertyParams]] = pydantic.Field(None, description='')
    OrStatementProperty: typing.Optional[list[CfnWebACLDefOrstatementpropertyParams]] = pydantic.Field(None, description='')
    OverrideActionProperty: typing.Optional[list[CfnWebACLDefOverrideactionpropertyParams]] = pydantic.Field(None, description='')
    RateBasedStatementProperty: typing.Optional[list[CfnWebACLDefRatebasedstatementpropertyParams]] = pydantic.Field(None, description='')
    RegexMatchStatementProperty: typing.Optional[list[CfnWebACLDefRegexmatchstatementpropertyParams]] = pydantic.Field(None, description='')
    RegexPatternSetReferenceStatementProperty: typing.Optional[list[CfnWebACLDefRegexpatternsetreferencestatementpropertyParams]] = pydantic.Field(None, description='')
    RequestInspectionProperty: typing.Optional[list[CfnWebACLDefRequestinspectionpropertyParams]] = pydantic.Field(None, description='')
    ResponseInspectionBodyContainsProperty: typing.Optional[list[CfnWebACLDefResponseinspectionbodycontainspropertyParams]] = pydantic.Field(None, description='')
    ResponseInspectionHeaderProperty: typing.Optional[list[CfnWebACLDefResponseinspectionheaderpropertyParams]] = pydantic.Field(None, description='')
    ResponseInspectionJsonProperty: typing.Optional[list[CfnWebACLDefResponseinspectionjsonpropertyParams]] = pydantic.Field(None, description='')
    ResponseInspectionProperty: typing.Optional[list[CfnWebACLDefResponseinspectionpropertyParams]] = pydantic.Field(None, description='')
    ResponseInspectionStatusCodeProperty: typing.Optional[list[CfnWebACLDefResponseinspectionstatuscodepropertyParams]] = pydantic.Field(None, description='')
    RuleActionOverrideProperty: typing.Optional[list[CfnWebACLDefRuleactionoverridepropertyParams]] = pydantic.Field(None, description='')
    RuleActionProperty: typing.Optional[list[CfnWebACLDefRuleactionpropertyParams]] = pydantic.Field(None, description='')
    RuleGroupReferenceStatementProperty: typing.Optional[list[CfnWebACLDefRulegroupreferencestatementpropertyParams]] = pydantic.Field(None, description='')
    RuleProperty: typing.Optional[list[CfnWebACLDefRulepropertyParams]] = pydantic.Field(None, description='')
    SingleHeaderProperty: typing.Optional[list[CfnWebACLDefSingleheaderpropertyParams]] = pydantic.Field(None, description='')
    SingleQueryArgumentProperty: typing.Optional[list[CfnWebACLDefSinglequeryargumentpropertyParams]] = pydantic.Field(None, description='')
    SizeConstraintStatementProperty: typing.Optional[list[CfnWebACLDefSizeconstraintstatementpropertyParams]] = pydantic.Field(None, description='')
    SqliMatchStatementProperty: typing.Optional[list[CfnWebACLDefSqlimatchstatementpropertyParams]] = pydantic.Field(None, description='')
    StatementProperty: typing.Optional[list[CfnWebACLDefStatementpropertyParams]] = pydantic.Field(None, description='')
    TextTransformationProperty: typing.Optional[list[CfnWebACLDefTexttransformationpropertyParams]] = pydantic.Field(None, description='')
    VisibilityConfigProperty: typing.Optional[list[CfnWebACLDefVisibilityconfigpropertyParams]] = pydantic.Field(None, description='')
    XssMatchStatementProperty: typing.Optional[list[CfnWebACLDefXssmatchstatementpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnWebACLDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnWebACLDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnWebACLDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnWebACLDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnWebACLDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnWebACLDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnWebACLDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnWebACLDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnWebACLDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnWebACLDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnWebACLDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnWebACLDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnWebACLDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnWebACLDefAwsmanagedrulesatprulesetpropertyParams(pydantic.BaseModel):
    login_path: str = pydantic.Field(..., description='')
    request_inspection: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RequestInspectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    response_inspection: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefAwsmanagedrulesbotcontrolrulesetpropertyParams(pydantic.BaseModel):
    inspection_level: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefAllowactionpropertyParams(pydantic.BaseModel):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefAndstatementpropertyParams(pydantic.BaseModel):
    statements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefBlockactionpropertyParams(pydantic.BaseModel):
    custom_response: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomResponsePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefBodypropertyParams(pydantic.BaseModel):
    oversize_handling: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefBytematchstatementpropertyParams(pydantic.BaseModel):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    positional_constraint: str = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    search_string: typing.Optional[str] = pydantic.Field(None, description='')
    search_string_base64: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefCaptchaactionpropertyParams(pydantic.BaseModel):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefCaptchaconfigpropertyParams(pydantic.BaseModel):
    immunity_time_property: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ImmunityTimePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefChallengeactionpropertyParams(pydantic.BaseModel):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefChallengeconfigpropertyParams(pydantic.BaseModel):
    immunity_time_property: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ImmunityTimePropertyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefCookiematchpatternpropertyParams(pydantic.BaseModel):
    all: typing.Any = pydantic.Field(None, description='')
    excluded_cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    included_cookies: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefCookiespropertyParams(pydantic.BaseModel):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CookieMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    match_scope: str = pydantic.Field(..., description='')
    oversize_handling: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefCountactionpropertyParams(pydantic.BaseModel):
    custom_request_handling: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomRequestHandlingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefCustomhttpheaderpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefCustomrequesthandlingpropertyParams(pydantic.BaseModel):
    insert_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomHTTPHeaderPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefCustomresponsebodypropertyParams(pydantic.BaseModel):
    content: str = pydantic.Field(..., description='')
    content_type: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefCustomresponsepropertyParams(pydantic.BaseModel):
    response_code: typing.Union[int, float] = pydantic.Field(..., description='')
    custom_response_body_key: typing.Optional[str] = pydantic.Field(None, description='')
    response_headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomHTTPHeaderPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefDefaultactionpropertyParams(pydantic.BaseModel):
    allow: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AllowActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    block: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_BlockActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefExcludedrulepropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefFieldidentifierpropertyParams(pydantic.BaseModel):
    identifier: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefFieldtomatchpropertyParams(pydantic.BaseModel):
    all_query_arguments: typing.Any = pydantic.Field(None, description='')
    body: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_BodyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cookies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CookiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    headers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_HeadersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_body: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_JsonBodyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    method: typing.Any = pydantic.Field(None, description='')
    query_string: typing.Any = pydantic.Field(None, description='')
    single_header: typing.Any = pydantic.Field(None, description='')
    single_query_argument: typing.Any = pydantic.Field(None, description='')
    uri_path: typing.Any = pydantic.Field(None, description='')
    ...

class CfnWebACLDefForwardedipconfigurationpropertyParams(pydantic.BaseModel):
    fallback_behavior: str = pydantic.Field(..., description='')
    header_name: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefGeomatchstatementpropertyParams(pydantic.BaseModel):
    country_codes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefHeadermatchpatternpropertyParams(pydantic.BaseModel):
    all: typing.Any = pydantic.Field(None, description='')
    excluded_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    included_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefHeaderspropertyParams(pydantic.BaseModel):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_HeaderMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    match_scope: str = pydantic.Field(..., description='')
    oversize_handling: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefIpsetforwardedipconfigurationpropertyParams(pydantic.BaseModel):
    fallback_behavior: str = pydantic.Field(..., description='')
    header_name: str = pydantic.Field(..., description='')
    position: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefIpsetreferencestatementpropertyParams(pydantic.BaseModel):
    arn: str = pydantic.Field(..., description='')
    ip_set_forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_IPSetForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefImmunitytimepropertypropertyParams(pydantic.BaseModel):
    immunity_time: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefJsonbodypropertyParams(pydantic.BaseModel):
    match_pattern: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_JsonMatchPatternPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    match_scope: str = pydantic.Field(..., description='')
    invalid_fallback_behavior: typing.Optional[str] = pydantic.Field(None, description='')
    oversize_handling: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefJsonmatchpatternpropertyParams(pydantic.BaseModel):
    all: typing.Any = pydantic.Field(None, description='')
    included_paths: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefLabelmatchstatementpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    scope: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefLabelpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefManagedrulegroupconfigpropertyParams(pydantic.BaseModel):
    aws_managed_rules_atp_rule_set: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AWSManagedRulesATPRuleSetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    aws_managed_rules_bot_control_rule_set: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AWSManagedRulesBotControlRuleSetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    login_path: typing.Optional[str] = pydantic.Field(None, description='')
    password_field: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldIdentifierPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    payload_type: typing.Optional[str] = pydantic.Field(None, description='')
    username_field: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldIdentifierPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefManagedrulegroupstatementpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    vendor_name: str = pydantic.Field(..., description='')
    excluded_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ExcludedRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    managed_rule_group_configs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ManagedRuleGroupConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    rule_action_overrides: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleActionOverridePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    scope_down_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefNotstatementpropertyParams(pydantic.BaseModel):
    statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefOrstatementpropertyParams(pydantic.BaseModel):
    statements: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefOverrideactionpropertyParams(pydantic.BaseModel):
    count: typing.Any = pydantic.Field(None, description='')
    none: typing.Any = pydantic.Field(None, description='')
    ...

class CfnWebACLDefRatebasedstatementpropertyParams(pydantic.BaseModel):
    aggregate_key_type: str = pydantic.Field(..., description='')
    limit: typing.Union[int, float] = pydantic.Field(..., description='')
    forwarded_ip_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ForwardedIPConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    scope_down_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefRegexmatchstatementpropertyParams(pydantic.BaseModel):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    regex_string: str = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefRegexpatternsetreferencestatementpropertyParams(pydantic.BaseModel):
    arn: str = pydantic.Field(..., description='')
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefRequestinspectionpropertyParams(pydantic.BaseModel):
    password_field: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldIdentifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    payload_type: str = pydantic.Field(..., description='')
    username_field: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldIdentifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefResponseinspectionbodycontainspropertyParams(pydantic.BaseModel):
    failure_strings: typing.Sequence[str] = pydantic.Field(..., description='')
    success_strings: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefResponseinspectionheaderpropertyParams(pydantic.BaseModel):
    failure_values: typing.Sequence[str] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    success_values: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefResponseinspectionjsonpropertyParams(pydantic.BaseModel):
    failure_values: typing.Sequence[str] = pydantic.Field(..., description='')
    identifier: str = pydantic.Field(..., description='')
    success_values: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefResponseinspectionpropertyParams(pydantic.BaseModel):
    body_contains: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionBodyContainsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    header: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionHeaderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionJsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='', alias='json')
    status_code: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ResponseInspectionStatusCodePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefResponseinspectionstatuscodepropertyParams(pydantic.BaseModel):
    failure_codes: typing.Union[typing.Sequence[typing.Union[int, float]], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    success_codes: typing.Union[typing.Sequence[typing.Union[int, float]], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefRuleactionoverridepropertyParams(pydantic.BaseModel):
    action_to_use: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefRuleactionpropertyParams(pydantic.BaseModel):
    allow: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AllowActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    block: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_BlockActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    captcha: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CaptchaActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    challenge: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ChallengeActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    count: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CountActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefRulegroupreferencestatementpropertyParams(pydantic.BaseModel):
    arn: str = pydantic.Field(..., description='')
    excluded_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ExcludedRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    rule_action_overrides: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleActionOverridePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefRulepropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    priority: typing.Union[int, float] = pydantic.Field(..., description='')
    statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_StatementPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    visibility_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_VisibilityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    captcha_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CaptchaConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    challenge_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ChallengeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    override_action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_OverrideActionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rule_labels: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_LabelPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefSingleheaderpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefSinglequeryargumentpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefSizeconstraintstatementpropertyParams(pydantic.BaseModel):
    comparison_operator: str = pydantic.Field(..., description='')
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    size: typing.Union[int, float] = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefSqlimatchstatementpropertyParams(pydantic.BaseModel):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    sensitivity_level: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefStatementpropertyParams(pydantic.BaseModel):
    and_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_AndStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    byte_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ByteMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    geo_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_GeoMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ip_set_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_IPSetReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    label_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_LabelMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    managed_rule_group_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ManagedRuleGroupStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    not_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_NotStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    or_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_OrStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rate_based_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RateBasedStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    regex_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RegexMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    regex_pattern_set_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RegexPatternSetReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rule_group_reference_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RuleGroupReferenceStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    size_constraint_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_SizeConstraintStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sqli_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_SqliMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    xss_match_statement: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_XssMatchStatementPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWebACLDefTexttransformationpropertyParams(pydantic.BaseModel):
    priority: typing.Union[int, float] = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnWebACLDefVisibilityconfigpropertyParams(pydantic.BaseModel):
    cloud_watch_metrics_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    metric_name: str = pydantic.Field(..., description='')
    sampled_requests_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefXssmatchstatementpropertyParams(pydantic.BaseModel):
    field_to_match: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_FieldToMatchPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    text_transformations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_TextTransformationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnWebACLDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWebACLDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWebACLDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWebACLDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWebACLDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWebACLDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWebACLDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWebACLDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWebACLDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWebACLDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWebACLDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnWebACLDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWebACLDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWebACLDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_wafv2.CfnWebACLAssociation
class CfnWebACLAssociationDef(BaseCfnResource):
    resource_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the resource to associate with the web ACL. The ARN must be in one of the following formats: - For an Application Load Balancer: ``arn:aws:elasticloadbalancing: *region* : *account-id* :loadbalancer/app/ *load-balancer-name* / *load-balancer-id*`` - For an Amazon API Gateway REST API: ``arn:aws:apigateway: *region* ::/restapis/ *api-id* /stages/ *stage-name*`` - For an AWS AppSync GraphQL API: ``arn:aws:appsync: *region* : *account-id* :apis/ *GraphQLApiId*`` - For an Amazon Cognito user pool: ``arn:aws:cognito-idp: *region* : *account-id* :userpool/ *user-pool-id*`` - For an AWS App Runner service: ``arn:aws:apprunner: *region* : *account-id* :service/ *apprunner-service-name* / *apprunner-service-id*``\n')
    web_acl_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the web ACL that you want to associate with the resource.')
    _init_params: typing.ClassVar[list[str]] = ['resource_arn', 'web_acl_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACLAssociation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnWebACLAssociationDefConfig] = pydantic.Field(None)


class CfnWebACLAssociationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnWebACLAssociationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnWebACLAssociationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnWebACLAssociationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnWebACLAssociationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnWebACLAssociationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnWebACLAssociationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnWebACLAssociationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnWebACLAssociationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnWebACLAssociationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnWebACLAssociationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnWebACLAssociationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnWebACLAssociationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnWebACLAssociationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnWebACLAssociationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWebACLAssociationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWebACLAssociationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWebACLAssociationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWebACLAssociationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWebACLAssociationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWebACLAssociationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWebACLAssociationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWebACLAssociationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWebACLAssociationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWebACLAssociationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnWebACLAssociationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWebACLAssociationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWebACLAssociationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_wafv2.CfnIPSetProps
class CfnIPSetPropsDef(BaseCfnProperty):
    addresses: typing.Sequence[str] = pydantic.Field(..., description='Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses. All addresses must be specified using Classless Inter-Domain Routing (CIDR) notation. AWS WAF supports all IPv4 and IPv6 CIDR ranges except for ``/0`` . Example address strings: - To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify ``192.0.2.44/32`` . - To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify ``192.0.2.0/24`` . - To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify ``1111:0000:0000:0000:0000:0000:0000:0111/128`` . - To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify ``1111:0000:0000:0000:0000:0000:0000:0000/64`` . For more information about CIDR notation, see the Wikipedia entry `Classless Inter-Domain Routing <https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing>`_ . Example JSON ``Addresses`` specifications: - Empty array: ``"Addresses": []`` - Array with one address: ``"Addresses": ["192.0.2.44/32"]`` - Array with three addresses: ``"Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]`` - INVALID specification: ``"Addresses": [""]`` INVALID\n')
    ip_address_version: str = pydantic.Field(..., description='The version of the IP addresses, either ``IPV4`` or ``IPV6`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the IP set that helps with identification.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the IP set. You cannot change the name of an ``IPSet`` after you create it.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource. .. epigraph:: To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-ipset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    cfn_iPSet_props = wafv2.CfnIPSetProps(\n        addresses=["addresses"],\n        ip_address_version="ipAddressVersion",\n        scope="scope",\n\n        # the properties below are optional\n        description="description",\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['addresses', 'ip_address_version', 'description', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnIPSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnLoggingConfigurationProps
class CfnLoggingConfigurationPropsDef(BaseCfnProperty):
    log_destination_configs: typing.Sequence[str] = pydantic.Field(..., description='The logging destination configuration that you want to associate with the web ACL. .. epigraph:: You can associate one logging destination to a web ACL.\n')
    resource_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the web ACL that you want to associate with ``LogDestinationConfigs`` .\n')
    logging_filter: typing.Any = pydantic.Field(None, description='Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.\n')
    redacted_fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnLoggingConfiguration_FieldToMatchPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The parts of the request that you want to keep out of the logs. For example, if you redact the ``SingleHeader`` field, the ``HEADER`` field in the logs will be ``REDACTED`` . .. epigraph:: You can specify only the following fields for redaction: ``UriPath`` , ``QueryString`` , ``SingleHeader`` , ``Method`` , and ``JsonBody`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-loggingconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # json_body: Any\n    # logging_filter: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # uri_path: Any\n\n    cfn_logging_configuration_props = wafv2.CfnLoggingConfigurationProps(\n        log_destination_configs=["logDestinationConfigs"],\n        resource_arn="resourceArn",\n\n        # the properties below are optional\n        logging_filter=logging_filter,\n        redacted_fields=[wafv2.CfnLoggingConfiguration.FieldToMatchProperty(\n            json_body=json_body,\n            method=method,\n            query_string=query_string,\n            single_header=single_header,\n            uri_path=uri_path\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_destination_configs', 'resource_arn', 'logging_filter', 'redacted_fields']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnLoggingConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRegexPatternSetProps
class CfnRegexPatternSetPropsDef(BaseCfnProperty):
    regular_expression_list: typing.Sequence[str] = pydantic.Field(..., description='The regular expression patterns in the set.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the set that helps with identification.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the set. You cannot change the name after you create the set.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource. .. epigraph:: To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-regexpatternset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    cfn_regex_pattern_set_props = wafv2.CfnRegexPatternSetProps(\n        regular_expression_list=["regularExpressionList"],\n        scope="scope",\n\n        # the properties below are optional\n        description="description",\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['regular_expression_list', 'description', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRegexPatternSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnRuleGroupProps
class CfnRuleGroupPropsDef(BaseCfnProperty):
    capacity: typing.Union[int, float] = pydantic.Field(..., description='The web ACL capacity units (WCUs) required for this rule group. When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, AWS WAF enforces this limit. AWS WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. AWS WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.\n')
    visibility_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_VisibilityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines and enables Amazon CloudWatch metrics and web request sample collection.\n')
    available_labels: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_LabelSummaryPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the ``RuleLabels`` for a ``Rule`` .\n')
    consumed_labels: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_LabelSummaryPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a ``LabelMatchStatement`` specification, in the ``Statement`` definition of a rule.\n')
    custom_response_bodies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_CustomResponseBodyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. For information about customizing web requests and responses, see `Customizing web requests and responses in AWS WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`_ in the *AWS WAF Developer Guide* . For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the rule group that helps with identification.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the rule group. You cannot change the name of a rule group after you create it.\n')
    rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnRuleGroup_RulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource. .. epigraph:: To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-rulegroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # allow: Any\n    # all_query_arguments: Any\n    # block: Any\n    # captcha: Any\n    # challenge: Any\n    # count: Any\n    # method: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnRuleGroup.StatementProperty\n    # uri_path: Any\n\n    cfn_rule_group_props = wafv2.CfnRuleGroupProps(\n        capacity=123,\n        scope="scope",\n        visibility_config=wafv2.CfnRuleGroup.VisibilityConfigProperty(\n            cloud_watch_metrics_enabled=False,\n            metric_name="metricName",\n            sampled_requests_enabled=False\n        ),\n\n        # the properties below are optional\n        available_labels=[wafv2.CfnRuleGroup.LabelSummaryProperty(\n            name="name"\n        )],\n        consumed_labels=[wafv2.CfnRuleGroup.LabelSummaryProperty(\n            name="name"\n        )],\n        custom_response_bodies={\n            "custom_response_bodies_key": wafv2.CfnRuleGroup.CustomResponseBodyProperty(\n                content="content",\n                content_type="contentType"\n            )\n        },\n        description="description",\n        name="name",\n        rules=[wafv2.CfnRuleGroup.RuleProperty(\n            name="name",\n            priority=123,\n            statement=wafv2.CfnRuleGroup.StatementProperty(\n                and_statement=wafv2.CfnRuleGroup.AndStatementProperty(\n                    statements=[statement_property_]\n                ),\n                byte_match_statement=wafv2.CfnRuleGroup.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnRuleGroup.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnRuleGroup.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                not_statement=wafv2.CfnRuleGroup.NotStatementProperty(\n                    statement=statement_property_\n                ),\n                or_statement=wafv2.CfnRuleGroup.OrStatementProperty(\n                    statements=[statement_property_]\n                ),\n                rate_based_statement=wafv2.CfnRuleGroup.RateBasedStatementProperty(\n                    aggregate_key_type="aggregateKeyType",\n                    limit=123,\n\n                    # the properties below are optional\n                    forwarded_ip_config=wafv2.CfnRuleGroup.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    ),\n                    scope_down_statement=statement_property_\n                ),\n                regex_match_statement=wafv2.CfnRuleGroup.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnRuleGroup.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnRuleGroup.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnRuleGroup.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnRuleGroup.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnRuleGroup.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnRuleGroup.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnRuleGroup.CookiesProperty(\n                            match_pattern=wafv2.CfnRuleGroup.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnRuleGroup.HeadersProperty(\n                            match_pattern=wafv2.CfnRuleGroup.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnRuleGroup.JsonBodyProperty(\n                            match_pattern=wafv2.CfnRuleGroup.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnRuleGroup.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            ),\n            visibility_config=wafv2.CfnRuleGroup.VisibilityConfigProperty(\n                cloud_watch_metrics_enabled=False,\n                metric_name="metricName",\n                sampled_requests_enabled=False\n            ),\n\n            # the properties below are optional\n            action=wafv2.CfnRuleGroup.RuleActionProperty(\n                allow=allow,\n                block=block,\n                captcha=captcha,\n                challenge=challenge,\n                count=count\n            ),\n            captcha_config=wafv2.CfnRuleGroup.CaptchaConfigProperty(\n                immunity_time_property=wafv2.CfnRuleGroup.ImmunityTimePropertyProperty(\n                    immunity_time=123\n                )\n            ),\n            challenge_config=wafv2.CfnRuleGroup.ChallengeConfigProperty(\n                immunity_time_property=wafv2.CfnRuleGroup.ImmunityTimePropertyProperty(\n                    immunity_time=123\n                )\n            ),\n            rule_labels=[wafv2.CfnRuleGroup.LabelProperty(\n                name="name"\n            )]\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['capacity', 'visibility_config', 'available_labels', 'consumed_labels', 'custom_response_bodies', 'description', 'name', 'rules', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnRuleGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACLAssociationProps
class CfnWebACLAssociationPropsDef(BaseCfnProperty):
    resource_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the resource to associate with the web ACL. The ARN must be in one of the following formats: - For an Application Load Balancer: ``arn:aws:elasticloadbalancing: *region* : *account-id* :loadbalancer/app/ *load-balancer-name* / *load-balancer-id*`` - For an Amazon API Gateway REST API: ``arn:aws:apigateway: *region* ::/restapis/ *api-id* /stages/ *stage-name*`` - For an AWS AppSync GraphQL API: ``arn:aws:appsync: *region* : *account-id* :apis/ *GraphQLApiId*`` - For an Amazon Cognito user pool: ``arn:aws:cognito-idp: *region* : *account-id* :userpool/ *user-pool-id*`` - For an AWS App Runner service: ``arn:aws:apprunner: *region* : *account-id* :service/ *apprunner-service-name* / *apprunner-service-id*``\n')
    web_acl_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the web ACL that you want to associate with the resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webaclassociation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    cfn_web_aCLAssociation_props = wafv2.CfnWebACLAssociationProps(\n        resource_arn="resourceArn",\n        web_acl_arn="webAclArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_arn', 'web_acl_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACLAssociationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_wafv2.CfnWebACLProps
class CfnWebACLPropsDef(BaseCfnProperty):
    default_action: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_DefaultActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The action to perform if none of the ``Rules`` contained in the ``WebACL`` match.\n')
    visibility_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_VisibilityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines and enables Amazon CloudWatch metrics and web request sample collection.\n')
    captcha_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CaptchaConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies how AWS WAF should handle ``CAPTCHA`` evaluations for rules that don't have their own ``CaptchaConfig`` settings. If you don't specify this, AWS WAF uses its default settings for ``CaptchaConfig`` .\n")
    challenge_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_ChallengeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Specifies how AWS WAF should handle challenge evaluations for rules that don't have their own ``ChallengeConfig`` settings. If you don't specify this, AWS WAF uses its default settings for ``ChallengeConfig`` .\n")
    custom_response_bodies: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_CustomResponseBodyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. For information about customizing web requests and responses, see `Customizing web requests and responses in AWS WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`_ in the *AWS WAF Developer Guide* . For information about the limits on count and size for custom request and response settings, see `AWS WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`_ in the *AWS WAF Developer Guide* .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the web ACL that helps with identification.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the web ACL. You cannot change the name of a web ACL after you create it.\n')
    rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_wafv2.CfnWebACL_RulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching web requests, and parameters that govern how AWS WAF handles them.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource. .. epigraph:: To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.\n')
    token_domains: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don\'t specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource\'s host domain plus all domains in the token domain list, including their prefixed subdomains.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webacl.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_wafv2 as wafv2\n\n    # all: Any\n    # all_query_arguments: Any\n    # count: Any\n    # method: Any\n    # none: Any\n    # query_string: Any\n    # single_header: Any\n    # single_query_argument: Any\n    # statement_property_: wafv2.CfnWebACL.StatementProperty\n    # uri_path: Any\n\n    cfn_web_aCLProps = wafv2.CfnWebACLProps(\n        default_action=wafv2.CfnWebACL.DefaultActionProperty(\n            allow=wafv2.CfnWebACL.AllowActionProperty(\n                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            ),\n            block=wafv2.CfnWebACL.BlockActionProperty(\n                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                    response_code=123,\n\n                    # the properties below are optional\n                    custom_response_body_key="customResponseBodyKey",\n                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                        name="name",\n                        value="value"\n                    )]\n                )\n            )\n        ),\n        scope="scope",\n        visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(\n            cloud_watch_metrics_enabled=False,\n            metric_name="metricName",\n            sampled_requests_enabled=False\n        ),\n\n        # the properties below are optional\n        captcha_config=wafv2.CfnWebACL.CaptchaConfigProperty(\n            immunity_time_property=wafv2.CfnWebACL.ImmunityTimePropertyProperty(\n                immunity_time=123\n            )\n        ),\n        challenge_config=wafv2.CfnWebACL.ChallengeConfigProperty(\n            immunity_time_property=wafv2.CfnWebACL.ImmunityTimePropertyProperty(\n                immunity_time=123\n            )\n        ),\n        custom_response_bodies={\n            "custom_response_bodies_key": wafv2.CfnWebACL.CustomResponseBodyProperty(\n                content="content",\n                content_type="contentType"\n            )\n        },\n        description="description",\n        name="name",\n        rules=[wafv2.CfnWebACL.RuleProperty(\n            name="name",\n            priority=123,\n            statement=wafv2.CfnWebACL.StatementProperty(\n                and_statement=wafv2.CfnWebACL.AndStatementProperty(\n                    statements=[statement_property_]\n                ),\n                byte_match_statement=wafv2.CfnWebACL.ByteMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    positional_constraint="positionalConstraint",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    search_string="searchString",\n                    search_string_base64="searchStringBase64"\n                ),\n                geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(\n                    country_codes=["countryCodes"],\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    )\n                ),\n                ip_set_reference_statement={\n                    "arn": "arn",\n\n                    # the properties below are optional\n                    "ip_set_forwarded_ip_config": {\n                        "fallback_behavior": "fallbackBehavior",\n                        "header_name": "headerName",\n                        "position": "position"\n                    }\n                },\n                label_match_statement=wafv2.CfnWebACL.LabelMatchStatementProperty(\n                    key="key",\n                    scope="scope"\n                ),\n                managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(\n                    name="name",\n                    vendor_name="vendorName",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    managed_rule_group_configs=[wafv2.CfnWebACL.ManagedRuleGroupConfigProperty(\n                        aws_managed_rules_atp_rule_set=wafv2.CfnWebACL.AWSManagedRulesATPRuleSetProperty(\n                            login_path="loginPath",\n\n                            # the properties below are optional\n                            request_inspection=wafv2.CfnWebACL.RequestInspectionProperty(\n                                password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                ),\n                                payload_type="payloadType",\n                                username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                                    identifier="identifier"\n                                )\n                            ),\n                            response_inspection=wafv2.CfnWebACL.ResponseInspectionProperty(\n                                body_contains=wafv2.CfnWebACL.ResponseInspectionBodyContainsProperty(\n                                    failure_strings=["failureStrings"],\n                                    success_strings=["successStrings"]\n                                ),\n                                header=wafv2.CfnWebACL.ResponseInspectionHeaderProperty(\n                                    failure_values=["failureValues"],\n                                    name="name",\n                                    success_values=["successValues"]\n                                ),\n                                json=wafv2.CfnWebACL.ResponseInspectionJsonProperty(\n                                    failure_values=["failureValues"],\n                                    identifier="identifier",\n                                    success_values=["successValues"]\n                                ),\n                                status_code=wafv2.CfnWebACL.ResponseInspectionStatusCodeProperty(\n                                    failure_codes=[123],\n                                    success_codes=[123]\n                                )\n                            )\n                        ),\n                        aws_managed_rules_bot_control_rule_set=wafv2.CfnWebACL.AWSManagedRulesBotControlRuleSetProperty(\n                            inspection_level="inspectionLevel"\n                        ),\n                        login_path="loginPath",\n                        password_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        ),\n                        payload_type="payloadType",\n                        username_field=wafv2.CfnWebACL.FieldIdentifierProperty(\n                            identifier="identifier"\n                        )\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )],\n                    scope_down_statement=statement_property_,\n                    version="version"\n                ),\n                not_statement=wafv2.CfnWebACL.NotStatementProperty(\n                    statement=statement_property_\n                ),\n                or_statement=wafv2.CfnWebACL.OrStatementProperty(\n                    statements=[statement_property_]\n                ),\n                rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(\n                    aggregate_key_type="aggregateKeyType",\n                    limit=123,\n\n                    # the properties below are optional\n                    forwarded_ip_config=wafv2.CfnWebACL.ForwardedIPConfigurationProperty(\n                        fallback_behavior="fallbackBehavior",\n                        header_name="headerName"\n                    ),\n                    scope_down_statement=statement_property_\n                ),\n                regex_match_statement=wafv2.CfnWebACL.RegexMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    regex_string="regexString",\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(\n                    arn="arn",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                rule_group_reference_statement=wafv2.CfnWebACL.RuleGroupReferenceStatementProperty(\n                    arn="arn",\n\n                    # the properties below are optional\n                    excluded_rules=[wafv2.CfnWebACL.ExcludedRuleProperty(\n                        name="name"\n                    )],\n                    rule_action_overrides=[wafv2.CfnWebACL.RuleActionOverrideProperty(\n                        action_to_use=wafv2.CfnWebACL.RuleActionProperty(\n                            allow=wafv2.CfnWebACL.AllowActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            block=wafv2.CfnWebACL.BlockActionProperty(\n                                custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                                    response_code=123,\n\n                                    # the properties below are optional\n                                    custom_response_body_key="customResponseBodyKey",\n                                    response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            ),\n                            count=wafv2.CfnWebACL.CountActionProperty(\n                                custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                                    insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                                        name="name",\n                                        value="value"\n                                    )]\n                                )\n                            )\n                        ),\n                        name="name"\n                    )]\n                ),\n                size_constraint_statement=wafv2.CfnWebACL.SizeConstraintStatementProperty(\n                    comparison_operator="comparisonOperator",\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    size=123,\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                ),\n                sqli_match_statement=wafv2.CfnWebACL.SqliMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )],\n\n                    # the properties below are optional\n                    sensitivity_level="sensitivityLevel"\n                ),\n                xss_match_statement=wafv2.CfnWebACL.XssMatchStatementProperty(\n                    field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(\n                        all_query_arguments=all_query_arguments,\n                        body=wafv2.CfnWebACL.BodyProperty(\n                            oversize_handling="oversizeHandling"\n                        ),\n                        cookies=wafv2.CfnWebACL.CookiesProperty(\n                            match_pattern=wafv2.CfnWebACL.CookieMatchPatternProperty(\n                                all=all,\n                                excluded_cookies=["excludedCookies"],\n                                included_cookies=["includedCookies"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        headers=wafv2.CfnWebACL.HeadersProperty(\n                            match_pattern=wafv2.CfnWebACL.HeaderMatchPatternProperty(\n                                all=all,\n                                excluded_headers=["excludedHeaders"],\n                                included_headers=["includedHeaders"]\n                            ),\n                            match_scope="matchScope",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        json_body=wafv2.CfnWebACL.JsonBodyProperty(\n                            match_pattern=wafv2.CfnWebACL.JsonMatchPatternProperty(\n                                all=all,\n                                included_paths=["includedPaths"]\n                            ),\n                            match_scope="matchScope",\n\n                            # the properties below are optional\n                            invalid_fallback_behavior="invalidFallbackBehavior",\n                            oversize_handling="oversizeHandling"\n                        ),\n                        method=method,\n                        query_string=query_string,\n                        single_header=single_header,\n                        single_query_argument=single_query_argument,\n                        uri_path=uri_path\n                    ),\n                    text_transformations=[wafv2.CfnWebACL.TextTransformationProperty(\n                        priority=123,\n                        type="type"\n                    )]\n                )\n            ),\n            visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(\n                cloud_watch_metrics_enabled=False,\n                metric_name="metricName",\n                sampled_requests_enabled=False\n            ),\n\n            # the properties below are optional\n            action=wafv2.CfnWebACL.RuleActionProperty(\n                allow=wafv2.CfnWebACL.AllowActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                block=wafv2.CfnWebACL.BlockActionProperty(\n                    custom_response=wafv2.CfnWebACL.CustomResponseProperty(\n                        response_code=123,\n\n                        # the properties below are optional\n                        custom_response_body_key="customResponseBodyKey",\n                        response_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                captcha=wafv2.CfnWebACL.CaptchaActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                challenge=wafv2.CfnWebACL.ChallengeActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                ),\n                count=wafv2.CfnWebACL.CountActionProperty(\n                    custom_request_handling=wafv2.CfnWebACL.CustomRequestHandlingProperty(\n                        insert_headers=[wafv2.CfnWebACL.CustomHTTPHeaderProperty(\n                            name="name",\n                            value="value"\n                        )]\n                    )\n                )\n            ),\n            captcha_config=wafv2.CfnWebACL.CaptchaConfigProperty(\n                immunity_time_property=wafv2.CfnWebACL.ImmunityTimePropertyProperty(\n                    immunity_time=123\n                )\n            ),\n            challenge_config=wafv2.CfnWebACL.ChallengeConfigProperty(\n                immunity_time_property=wafv2.CfnWebACL.ImmunityTimePropertyProperty(\n                    immunity_time=123\n                )\n            ),\n            override_action=wafv2.CfnWebACL.OverrideActionProperty(\n                count=count,\n                none=none\n            ),\n            rule_labels=[wafv2.CfnWebACL.LabelProperty(\n                name="name"\n            )]\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        token_domains=["tokenDomains"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_action', 'visibility_config', 'captcha_config', 'challenge_config', 'custom_response_bodies', 'description', 'name', 'rules', 'tags', 'token_domains']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_wafv2.CfnWebACLProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnLoggingConfiguration_ActionConditionProperty: typing.Optional[dict[str, CfnLoggingConfiguration_ActionConditionPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_ConditionProperty: typing.Optional[dict[str, CfnLoggingConfiguration_ConditionPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_FieldToMatchProperty: typing.Optional[dict[str, CfnLoggingConfiguration_FieldToMatchPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_FilterProperty: typing.Optional[dict[str, CfnLoggingConfiguration_FilterPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_JsonBodyProperty: typing.Optional[dict[str, CfnLoggingConfiguration_JsonBodyPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_LabelNameConditionProperty: typing.Optional[dict[str, CfnLoggingConfiguration_LabelNameConditionPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_LoggingFilterProperty: typing.Optional[dict[str, CfnLoggingConfiguration_LoggingFilterPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_MatchPatternProperty: typing.Optional[dict[str, CfnLoggingConfiguration_MatchPatternPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_SingleHeaderProperty: typing.Optional[dict[str, CfnLoggingConfiguration_SingleHeaderPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_AllowProperty: typing.Optional[dict[str, CfnRuleGroup_AllowPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_AndStatementProperty: typing.Optional[dict[str, CfnRuleGroup_AndStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_BlockProperty: typing.Optional[dict[str, CfnRuleGroup_BlockPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_BodyProperty: typing.Optional[dict[str, CfnRuleGroup_BodyPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_ByteMatchStatementProperty: typing.Optional[dict[str, CfnRuleGroup_ByteMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CaptchaConfigProperty: typing.Optional[dict[str, CfnRuleGroup_CaptchaConfigPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CaptchaProperty: typing.Optional[dict[str, CfnRuleGroup_CaptchaPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_ChallengeConfigProperty: typing.Optional[dict[str, CfnRuleGroup_ChallengeConfigPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_ChallengeProperty: typing.Optional[dict[str, CfnRuleGroup_ChallengePropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CookieMatchPatternProperty: typing.Optional[dict[str, CfnRuleGroup_CookieMatchPatternPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CookiesProperty: typing.Optional[dict[str, CfnRuleGroup_CookiesPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CountProperty: typing.Optional[dict[str, CfnRuleGroup_CountPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CustomHTTPHeaderProperty: typing.Optional[dict[str, CfnRuleGroup_CustomHTTPHeaderPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CustomRequestHandlingProperty: typing.Optional[dict[str, CfnRuleGroup_CustomRequestHandlingPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CustomResponseBodyProperty: typing.Optional[dict[str, CfnRuleGroup_CustomResponseBodyPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_CustomResponseProperty: typing.Optional[dict[str, CfnRuleGroup_CustomResponsePropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_FieldToMatchProperty: typing.Optional[dict[str, CfnRuleGroup_FieldToMatchPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_ForwardedIPConfigurationProperty: typing.Optional[dict[str, CfnRuleGroup_ForwardedIPConfigurationPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_GeoMatchStatementProperty: typing.Optional[dict[str, CfnRuleGroup_GeoMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_HeaderMatchPatternProperty: typing.Optional[dict[str, CfnRuleGroup_HeaderMatchPatternPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_HeadersProperty: typing.Optional[dict[str, CfnRuleGroup_HeadersPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_ImmunityTimePropertyProperty: typing.Optional[dict[str, CfnRuleGroup_ImmunityTimePropertyPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_IPSetForwardedIPConfigurationProperty: typing.Optional[dict[str, CfnRuleGroup_IPSetForwardedIPConfigurationPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_IPSetReferenceStatementProperty: typing.Optional[dict[str, CfnRuleGroup_IPSetReferenceStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_JsonBodyProperty: typing.Optional[dict[str, CfnRuleGroup_JsonBodyPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_JsonMatchPatternProperty: typing.Optional[dict[str, CfnRuleGroup_JsonMatchPatternPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_LabelMatchStatementProperty: typing.Optional[dict[str, CfnRuleGroup_LabelMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_LabelProperty: typing.Optional[dict[str, CfnRuleGroup_LabelPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_LabelSummaryProperty: typing.Optional[dict[str, CfnRuleGroup_LabelSummaryPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_NotStatementProperty: typing.Optional[dict[str, CfnRuleGroup_NotStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_OrStatementProperty: typing.Optional[dict[str, CfnRuleGroup_OrStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RateBasedStatementProperty: typing.Optional[dict[str, CfnRuleGroup_RateBasedStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RegexMatchStatementProperty: typing.Optional[dict[str, CfnRuleGroup_RegexMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RegexPatternSetReferenceStatementProperty: typing.Optional[dict[str, CfnRuleGroup_RegexPatternSetReferenceStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RuleActionProperty: typing.Optional[dict[str, CfnRuleGroup_RuleActionPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_RuleProperty: typing.Optional[dict[str, CfnRuleGroup_RulePropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_SingleHeaderProperty: typing.Optional[dict[str, CfnRuleGroup_SingleHeaderPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_SingleQueryArgumentProperty: typing.Optional[dict[str, CfnRuleGroup_SingleQueryArgumentPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_SizeConstraintStatementProperty: typing.Optional[dict[str, CfnRuleGroup_SizeConstraintStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_SqliMatchStatementProperty: typing.Optional[dict[str, CfnRuleGroup_SqliMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_StatementProperty: typing.Optional[dict[str, CfnRuleGroup_StatementPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_TextTransformationProperty: typing.Optional[dict[str, CfnRuleGroup_TextTransformationPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_VisibilityConfigProperty: typing.Optional[dict[str, CfnRuleGroup_VisibilityConfigPropertyDef]] = pydantic.Field(None)
    CfnRuleGroup_XssMatchStatementProperty: typing.Optional[dict[str, CfnRuleGroup_XssMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_AllowActionProperty: typing.Optional[dict[str, CfnWebACL_AllowActionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_AndStatementProperty: typing.Optional[dict[str, CfnWebACL_AndStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_AWSManagedRulesATPRuleSetProperty: typing.Optional[dict[str, CfnWebACL_AWSManagedRulesATPRuleSetPropertyDef]] = pydantic.Field(None)
    CfnWebACL_AWSManagedRulesBotControlRuleSetProperty: typing.Optional[dict[str, CfnWebACL_AWSManagedRulesBotControlRuleSetPropertyDef]] = pydantic.Field(None)
    CfnWebACL_BlockActionProperty: typing.Optional[dict[str, CfnWebACL_BlockActionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_BodyProperty: typing.Optional[dict[str, CfnWebACL_BodyPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ByteMatchStatementProperty: typing.Optional[dict[str, CfnWebACL_ByteMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_CaptchaActionProperty: typing.Optional[dict[str, CfnWebACL_CaptchaActionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_CaptchaConfigProperty: typing.Optional[dict[str, CfnWebACL_CaptchaConfigPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ChallengeActionProperty: typing.Optional[dict[str, CfnWebACL_ChallengeActionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ChallengeConfigProperty: typing.Optional[dict[str, CfnWebACL_ChallengeConfigPropertyDef]] = pydantic.Field(None)
    CfnWebACL_CookieMatchPatternProperty: typing.Optional[dict[str, CfnWebACL_CookieMatchPatternPropertyDef]] = pydantic.Field(None)
    CfnWebACL_CookiesProperty: typing.Optional[dict[str, CfnWebACL_CookiesPropertyDef]] = pydantic.Field(None)
    CfnWebACL_CountActionProperty: typing.Optional[dict[str, CfnWebACL_CountActionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_CustomHTTPHeaderProperty: typing.Optional[dict[str, CfnWebACL_CustomHTTPHeaderPropertyDef]] = pydantic.Field(None)
    CfnWebACL_CustomRequestHandlingProperty: typing.Optional[dict[str, CfnWebACL_CustomRequestHandlingPropertyDef]] = pydantic.Field(None)
    CfnWebACL_CustomResponseBodyProperty: typing.Optional[dict[str, CfnWebACL_CustomResponseBodyPropertyDef]] = pydantic.Field(None)
    CfnWebACL_CustomResponseProperty: typing.Optional[dict[str, CfnWebACL_CustomResponsePropertyDef]] = pydantic.Field(None)
    CfnWebACL_DefaultActionProperty: typing.Optional[dict[str, CfnWebACL_DefaultActionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ExcludedRuleProperty: typing.Optional[dict[str, CfnWebACL_ExcludedRulePropertyDef]] = pydantic.Field(None)
    CfnWebACL_FieldIdentifierProperty: typing.Optional[dict[str, CfnWebACL_FieldIdentifierPropertyDef]] = pydantic.Field(None)
    CfnWebACL_FieldToMatchProperty: typing.Optional[dict[str, CfnWebACL_FieldToMatchPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ForwardedIPConfigurationProperty: typing.Optional[dict[str, CfnWebACL_ForwardedIPConfigurationPropertyDef]] = pydantic.Field(None)
    CfnWebACL_GeoMatchStatementProperty: typing.Optional[dict[str, CfnWebACL_GeoMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_HeaderMatchPatternProperty: typing.Optional[dict[str, CfnWebACL_HeaderMatchPatternPropertyDef]] = pydantic.Field(None)
    CfnWebACL_HeadersProperty: typing.Optional[dict[str, CfnWebACL_HeadersPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ImmunityTimePropertyProperty: typing.Optional[dict[str, CfnWebACL_ImmunityTimePropertyPropertyDef]] = pydantic.Field(None)
    CfnWebACL_IPSetForwardedIPConfigurationProperty: typing.Optional[dict[str, CfnWebACL_IPSetForwardedIPConfigurationPropertyDef]] = pydantic.Field(None)
    CfnWebACL_IPSetReferenceStatementProperty: typing.Optional[dict[str, CfnWebACL_IPSetReferenceStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_JsonBodyProperty: typing.Optional[dict[str, CfnWebACL_JsonBodyPropertyDef]] = pydantic.Field(None)
    CfnWebACL_JsonMatchPatternProperty: typing.Optional[dict[str, CfnWebACL_JsonMatchPatternPropertyDef]] = pydantic.Field(None)
    CfnWebACL_LabelMatchStatementProperty: typing.Optional[dict[str, CfnWebACL_LabelMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_LabelProperty: typing.Optional[dict[str, CfnWebACL_LabelPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ManagedRuleGroupConfigProperty: typing.Optional[dict[str, CfnWebACL_ManagedRuleGroupConfigPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ManagedRuleGroupStatementProperty: typing.Optional[dict[str, CfnWebACL_ManagedRuleGroupStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_NotStatementProperty: typing.Optional[dict[str, CfnWebACL_NotStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_OrStatementProperty: typing.Optional[dict[str, CfnWebACL_OrStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_OverrideActionProperty: typing.Optional[dict[str, CfnWebACL_OverrideActionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_RateBasedStatementProperty: typing.Optional[dict[str, CfnWebACL_RateBasedStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_RegexMatchStatementProperty: typing.Optional[dict[str, CfnWebACL_RegexMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_RegexPatternSetReferenceStatementProperty: typing.Optional[dict[str, CfnWebACL_RegexPatternSetReferenceStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_RequestInspectionProperty: typing.Optional[dict[str, CfnWebACL_RequestInspectionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ResponseInspectionBodyContainsProperty: typing.Optional[dict[str, CfnWebACL_ResponseInspectionBodyContainsPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ResponseInspectionHeaderProperty: typing.Optional[dict[str, CfnWebACL_ResponseInspectionHeaderPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ResponseInspectionJsonProperty: typing.Optional[dict[str, CfnWebACL_ResponseInspectionJsonPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ResponseInspectionProperty: typing.Optional[dict[str, CfnWebACL_ResponseInspectionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_ResponseInspectionStatusCodeProperty: typing.Optional[dict[str, CfnWebACL_ResponseInspectionStatusCodePropertyDef]] = pydantic.Field(None)
    CfnWebACL_RuleActionOverrideProperty: typing.Optional[dict[str, CfnWebACL_RuleActionOverridePropertyDef]] = pydantic.Field(None)
    CfnWebACL_RuleActionProperty: typing.Optional[dict[str, CfnWebACL_RuleActionPropertyDef]] = pydantic.Field(None)
    CfnWebACL_RuleGroupReferenceStatementProperty: typing.Optional[dict[str, CfnWebACL_RuleGroupReferenceStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_RuleProperty: typing.Optional[dict[str, CfnWebACL_RulePropertyDef]] = pydantic.Field(None)
    CfnWebACL_SingleHeaderProperty: typing.Optional[dict[str, CfnWebACL_SingleHeaderPropertyDef]] = pydantic.Field(None)
    CfnWebACL_SingleQueryArgumentProperty: typing.Optional[dict[str, CfnWebACL_SingleQueryArgumentPropertyDef]] = pydantic.Field(None)
    CfnWebACL_SizeConstraintStatementProperty: typing.Optional[dict[str, CfnWebACL_SizeConstraintStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_SqliMatchStatementProperty: typing.Optional[dict[str, CfnWebACL_SqliMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_StatementProperty: typing.Optional[dict[str, CfnWebACL_StatementPropertyDef]] = pydantic.Field(None)
    CfnWebACL_TextTransformationProperty: typing.Optional[dict[str, CfnWebACL_TextTransformationPropertyDef]] = pydantic.Field(None)
    CfnWebACL_VisibilityConfigProperty: typing.Optional[dict[str, CfnWebACL_VisibilityConfigPropertyDef]] = pydantic.Field(None)
    CfnWebACL_XssMatchStatementProperty: typing.Optional[dict[str, CfnWebACL_XssMatchStatementPropertyDef]] = pydantic.Field(None)
    CfnIPSet: typing.Optional[dict[str, CfnIPSetDef]] = pydantic.Field(None)
    CfnLoggingConfiguration: typing.Optional[dict[str, CfnLoggingConfigurationDef]] = pydantic.Field(None)
    CfnRegexPatternSet: typing.Optional[dict[str, CfnRegexPatternSetDef]] = pydantic.Field(None)
    CfnRuleGroup: typing.Optional[dict[str, CfnRuleGroupDef]] = pydantic.Field(None)
    CfnWebACL: typing.Optional[dict[str, CfnWebACLDef]] = pydantic.Field(None)
    CfnWebACLAssociation: typing.Optional[dict[str, CfnWebACLAssociationDef]] = pydantic.Field(None)
    CfnIPSetProps: typing.Optional[dict[str, CfnIPSetPropsDef]] = pydantic.Field(None)
    CfnLoggingConfigurationProps: typing.Optional[dict[str, CfnLoggingConfigurationPropsDef]] = pydantic.Field(None)
    CfnRegexPatternSetProps: typing.Optional[dict[str, CfnRegexPatternSetPropsDef]] = pydantic.Field(None)
    CfnRuleGroupProps: typing.Optional[dict[str, CfnRuleGroupPropsDef]] = pydantic.Field(None)
    CfnWebACLAssociationProps: typing.Optional[dict[str, CfnWebACLAssociationPropsDef]] = pydantic.Field(None)
    CfnWebACLProps: typing.Optional[dict[str, CfnWebACLPropsDef]] = pydantic.Field(None)
    ...
