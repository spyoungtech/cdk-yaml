from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.DataSourceConfigurationInputProperty
class CfnDataSource_DataSourceConfigurationInputPropertyDef(BaseStruct):
    glue_run_configuration: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_GlueRunConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the AWS Glue data source.\n')
    redshift_run_configuration: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftRunConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the Amazon Redshift data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-datasourceconfigurationinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    data_source_configuration_input_property = datazone.CfnDataSource.DataSourceConfigurationInputProperty(\n        glue_run_configuration=datazone.CfnDataSource.GlueRunConfigurationInputProperty(\n            relational_filter_configurations=[datazone.CfnDataSource.RelationalFilterConfigurationProperty(\n                database_name="databaseName",\n\n                # the properties below are optional\n                filter_expressions=[datazone.CfnDataSource.FilterExpressionProperty(\n                    expression="expression",\n                    type="type"\n                )],\n                schema_name="schemaName"\n            )],\n\n            # the properties below are optional\n            auto_import_data_quality_result=False,\n            data_access_role="dataAccessRole"\n        ),\n        redshift_run_configuration=datazone.CfnDataSource.RedshiftRunConfigurationInputProperty(\n            redshift_credential_configuration=datazone.CfnDataSource.RedshiftCredentialConfigurationProperty(\n                secret_manager_arn="secretManagerArn"\n            ),\n            redshift_storage=datazone.CfnDataSource.RedshiftStorageProperty(\n                redshift_cluster_source=datazone.CfnDataSource.RedshiftClusterStorageProperty(\n                    cluster_name="clusterName"\n                ),\n                redshift_serverless_source=datazone.CfnDataSource.RedshiftServerlessStorageProperty(\n                    workgroup_name="workgroupName"\n                )\n            ),\n            relational_filter_configurations=[datazone.CfnDataSource.RelationalFilterConfigurationProperty(\n                database_name="databaseName",\n\n                # the properties below are optional\n                filter_expressions=[datazone.CfnDataSource.FilterExpressionProperty(\n                    expression="expression",\n                    type="type"\n                )],\n                schema_name="schemaName"\n            )],\n\n            # the properties below are optional\n            data_access_role="dataAccessRole"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['glue_run_configuration', 'redshift_run_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.DataSourceConfigurationInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.FilterExpressionProperty
class CfnDataSource_FilterExpressionPropertyDef(BaseStruct):
    expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The search filter expression.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The search filter explresison type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-filterexpression.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    filter_expression_property = datazone.CfnDataSource.FilterExpressionProperty(\n        expression="expression",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['expression', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.FilterExpressionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.FormInputProperty
class CfnDataSource_FormInputPropertyDef(BaseStruct):
    form_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the metadata form.\n')
    content: typing.Optional[str] = pydantic.Field(None, description='The content of the metadata form.\n')
    type_identifier: typing.Optional[str] = pydantic.Field(None, description='The ID of the metadata form type.\n')
    type_revision: typing.Optional[str] = pydantic.Field(None, description='The revision of the metadata form type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-forminput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    form_input_property = datazone.CfnDataSource.FormInputProperty(\n        form_name="formName",\n\n        # the properties below are optional\n        content="content",\n        type_identifier="typeIdentifier",\n        type_revision="typeRevision"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['form_name', 'content', 'type_identifier', 'type_revision']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.FormInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.GlueRunConfigurationInputProperty
class CfnDataSource_GlueRunConfigurationInputPropertyDef(BaseStruct):
    relational_filter_configurations: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RelationalFilterConfigurationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The relational filter configurations included in the configuration details of the AWS Glue data source.\n')
    auto_import_data_quality_result: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to automatically import data quality metrics as part of the data source run.\n')
    data_access_role: typing.Optional[str] = pydantic.Field(None, description='The data access role included in the configuration details of the AWS Glue data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-gluerunconfigurationinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    glue_run_configuration_input_property = datazone.CfnDataSource.GlueRunConfigurationInputProperty(\n        relational_filter_configurations=[datazone.CfnDataSource.RelationalFilterConfigurationProperty(\n            database_name="databaseName",\n\n            # the properties below are optional\n            filter_expressions=[datazone.CfnDataSource.FilterExpressionProperty(\n                expression="expression",\n                type="type"\n            )],\n            schema_name="schemaName"\n        )],\n\n        # the properties below are optional\n        auto_import_data_quality_result=False,\n        data_access_role="dataAccessRole"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['relational_filter_configurations', 'auto_import_data_quality_result', 'data_access_role']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.GlueRunConfigurationInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.RecommendationConfigurationProperty
class CfnDataSource_RecommendationConfigurationPropertyDef(BaseStruct):
    enable_business_name_generation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether automatic business name generation is to be enabled or not as part of the recommendation configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-recommendationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    recommendation_configuration_property = datazone.CfnDataSource.RecommendationConfigurationProperty(\n        enable_business_name_generation=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_business_name_generation']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.RecommendationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.RedshiftClusterStorageProperty
class CfnDataSource_RedshiftClusterStoragePropertyDef(BaseStruct):
    cluster_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of an Amazon Redshift cluster.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-redshiftclusterstorage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    redshift_cluster_storage_property = datazone.CfnDataSource.RedshiftClusterStorageProperty(\n        cluster_name="clusterName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.RedshiftClusterStorageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.RedshiftCredentialConfigurationProperty
class CfnDataSource_RedshiftCredentialConfigurationPropertyDef(BaseStruct):
    secret_manager_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of a secret manager for an Amazon Redshift cluster.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-redshiftcredentialconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    redshift_credential_configuration_property = datazone.CfnDataSource.RedshiftCredentialConfigurationProperty(\n        secret_manager_arn="secretManagerArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['secret_manager_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.RedshiftCredentialConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.RedshiftRunConfigurationInputProperty
class CfnDataSource_RedshiftRunConfigurationInputPropertyDef(BaseStruct):
    redshift_credential_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftCredentialConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The details of the credentials required to access an Amazon Redshift cluster.\n')
    redshift_storage: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftStoragePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.\n')
    relational_filter_configurations: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RelationalFilterConfigurationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The relational filter configurations included in the configuration details of the AWS Glue data source.\n')
    data_access_role: typing.Optional[str] = pydantic.Field(None, description='The data access role included in the configuration details of the Amazon Redshift data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-redshiftrunconfigurationinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    redshift_run_configuration_input_property = datazone.CfnDataSource.RedshiftRunConfigurationInputProperty(\n        redshift_credential_configuration=datazone.CfnDataSource.RedshiftCredentialConfigurationProperty(\n            secret_manager_arn="secretManagerArn"\n        ),\n        redshift_storage=datazone.CfnDataSource.RedshiftStorageProperty(\n            redshift_cluster_source=datazone.CfnDataSource.RedshiftClusterStorageProperty(\n                cluster_name="clusterName"\n            ),\n            redshift_serverless_source=datazone.CfnDataSource.RedshiftServerlessStorageProperty(\n                workgroup_name="workgroupName"\n            )\n        ),\n        relational_filter_configurations=[datazone.CfnDataSource.RelationalFilterConfigurationProperty(\n            database_name="databaseName",\n\n            # the properties below are optional\n            filter_expressions=[datazone.CfnDataSource.FilterExpressionProperty(\n                expression="expression",\n                type="type"\n            )],\n            schema_name="schemaName"\n        )],\n\n        # the properties below are optional\n        data_access_role="dataAccessRole"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['redshift_credential_configuration', 'redshift_storage', 'relational_filter_configurations', 'data_access_role']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.RedshiftRunConfigurationInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.RedshiftServerlessStorageProperty
class CfnDataSource_RedshiftServerlessStoragePropertyDef(BaseStruct):
    workgroup_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon Redshift Serverless workgroup.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-redshiftserverlessstorage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    redshift_serverless_storage_property = datazone.CfnDataSource.RedshiftServerlessStorageProperty(\n        workgroup_name="workgroupName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['workgroup_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.RedshiftServerlessStorageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.RedshiftStorageProperty
class CfnDataSource_RedshiftStoragePropertyDef(BaseStruct):
    redshift_cluster_source: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftClusterStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The details of the Amazon Redshift cluster source.\n')
    redshift_serverless_source: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftServerlessStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The details of the Amazon Redshift Serverless workgroup source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-redshiftstorage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    redshift_storage_property = datazone.CfnDataSource.RedshiftStorageProperty(\n        redshift_cluster_source=datazone.CfnDataSource.RedshiftClusterStorageProperty(\n            cluster_name="clusterName"\n        ),\n        redshift_serverless_source=datazone.CfnDataSource.RedshiftServerlessStorageProperty(\n            workgroup_name="workgroupName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['redshift_cluster_source', 'redshift_serverless_source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.RedshiftStorageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.RelationalFilterConfigurationProperty
class CfnDataSource_RelationalFilterConfigurationPropertyDef(BaseStruct):
    database_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The database name specified in the relational filter configuration for the data source.\n')
    filter_expressions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_FilterExpressionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The filter expressions specified in the relational filter configuration for the data source.\n')
    schema_name: typing.Optional[str] = pydantic.Field(None, description='The schema name specified in the relational filter configuration for the data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-relationalfilterconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    relational_filter_configuration_property = datazone.CfnDataSource.RelationalFilterConfigurationProperty(\n        database_name="databaseName",\n\n        # the properties below are optional\n        filter_expressions=[datazone.CfnDataSource.FilterExpressionProperty(\n            expression="expression",\n            type="type"\n        )],\n        schema_name="schemaName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['database_name', 'filter_expressions', 'schema_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.RelationalFilterConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource.ScheduleConfigurationProperty
class CfnDataSource_ScheduleConfigurationPropertyDef(BaseStruct):
    schedule: typing.Optional[str] = pydantic.Field(None, description='The schedule of the data source runs.\n')
    timezone: typing.Optional[str] = pydantic.Field(None, description='The timezone of the data source run.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-datasource-scheduleconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    schedule_configuration_property = datazone.CfnDataSource.ScheduleConfigurationProperty(\n        schedule="schedule",\n        timezone="timezone"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['schedule', 'timezone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource.ScheduleConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDomain.SingleSignOnProperty
class CfnDomain_SingleSignOnPropertyDef(BaseStruct):
    type: typing.Optional[str] = pydantic.Field(None, description='The type of single sign-on in Amazon DataZone.\n')
    user_assignment: typing.Optional[str] = pydantic.Field(None, description='The single sign-on user assignment in Amazon DataZone.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-domain-singlesignon.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    single_sign_on_property = datazone.CfnDomain.SingleSignOnProperty(\n        type="type",\n        user_assignment="userAssignment"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'user_assignment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDomain.SingleSignOnProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnEnvironment.EnvironmentParameterProperty
class CfnEnvironment_EnvironmentParameterPropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the environment parameter.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value of the environment parameter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-environment-environmentparameter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    environment_parameter_property = datazone.CfnEnvironment.EnvironmentParameterProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnEnvironment.EnvironmentParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnEnvironmentBlueprintConfiguration.RegionalParameterProperty
class CfnEnvironmentBlueprintConfiguration_RegionalParameterPropertyDef(BaseStruct):
    parameters: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='A string to string map containing parameters for the region.\n')
    region: typing.Optional[str] = pydantic.Field(None, description='The region specified in the environment parameter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-environmentblueprintconfiguration-regionalparameter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    regional_parameter_property = datazone.CfnEnvironmentBlueprintConfiguration.RegionalParameterProperty(\n        parameters={\n            "parameters_key": "parameters"\n        },\n        region="region"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['parameters', 'region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnEnvironmentBlueprintConfiguration.RegionalParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnEnvironmentProfile.EnvironmentParameterProperty
class CfnEnvironmentProfile_EnvironmentParameterPropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='The name specified in the environment parameter.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value of the environment profile.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-environmentprofile-environmentparameter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    environment_parameter_property = datazone.CfnEnvironmentProfile.EnvironmentParameterProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnEnvironmentProfile.EnvironmentParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnProjectMembership.MemberProperty
class CfnProjectMembership_MemberPropertyDef(BaseStruct):
    group_identifier: typing.Optional[str] = pydantic.Field(None, description='The ID of the group of a project member.\n')
    user_identifier: typing.Optional[str] = pydantic.Field(None, description='The user ID of a project member.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-projectmembership-member.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    member_property = datazone.CfnProjectMembership.MemberProperty(\n        group_identifier="groupIdentifier",\n        user_identifier="userIdentifier"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['group_identifier', 'user_identifier']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnProjectMembership.MemberProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnSubscriptionTarget.SubscriptionTargetFormProperty
class CfnSubscriptionTarget_SubscriptionTargetFormPropertyDef(BaseStruct):
    content: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The content of the subscription target configuration.\n')
    form_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The form name included in the subscription target configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-subscriptiontarget-subscriptiontargetform.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    subscription_target_form_property = datazone.CfnSubscriptionTarget.SubscriptionTargetFormProperty(\n        content="content",\n        form_name="formName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content', 'form_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnSubscriptionTarget.SubscriptionTargetFormProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnUserProfile.IamUserProfileDetailsProperty
class CfnUserProfile_IamUserProfileDetailsPropertyDef(BaseStruct):
    arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of an IAM user profile in Amazon DataZone.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-userprofile-iamuserprofiledetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    iam_user_profile_details_property = datazone.CfnUserProfile.IamUserProfileDetailsProperty(\n        arn="arn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnUserProfile.IamUserProfileDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnUserProfile.SsoUserProfileDetailsProperty
class CfnUserProfile_SsoUserProfileDetailsPropertyDef(BaseStruct):
    first_name: typing.Optional[str] = pydantic.Field(None, description='The first name included in the single sign-on details of the user profile.\n')
    last_name: typing.Optional[str] = pydantic.Field(None, description='The last name included in the single sign-on details of the user profile.\n')
    username: typing.Optional[str] = pydantic.Field(None, description='The username included in the single sign-on details of the user profile.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-userprofile-ssouserprofiledetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    sso_user_profile_details_property = datazone.CfnUserProfile.SsoUserProfileDetailsProperty(\n        first_name="firstName",\n        last_name="lastName",\n        username="username"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['first_name', 'last_name', 'username']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnUserProfile.SsoUserProfileDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnUserProfile.UserProfileDetailsProperty
class CfnUserProfile_UserProfileDetailsPropertyDef(BaseStruct):
    iam: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnUserProfile_IamUserProfileDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The IAM details included in the user profile details.\n')
    sso: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnUserProfile_SsoUserProfileDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The single sign-on details included in the user profile details.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-datazone-userprofile-userprofiledetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    user_profile_details_property = datazone.CfnUserProfile.UserProfileDetailsProperty(\n        iam=datazone.CfnUserProfile.IamUserProfileDetailsProperty(\n            arn="arn"\n        ),\n        sso=datazone.CfnUserProfile.SsoUserProfileDetailsProperty(\n            first_name="firstName",\n            last_name="lastName",\n            username="username"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['iam', 'sso']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnUserProfile.UserProfileDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDataSource
class CfnDataSourceDef(BaseCfnResource):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon DataZone domain where the data source is created.\n')
    environment_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the Amazon DataZone environment to which the data source publishes assets.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the data source.\n')
    project_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone project in which you want to add this data source.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the data source.\n')
    asset_forms_input: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_FormInputPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The metadata forms attached to the assets that the data source works with.\n')
    configuration: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_DataSourceConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the data source.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the data source.\n')
    enable_setting: typing.Optional[str] = pydantic.Field(None, description='Specifies whether the data source is enabled.\n')
    publish_on_import: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.\n')
    recommendation: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RecommendationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies whether the business name generation is to be enabled for this data source.\n')
    schedule: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_ScheduleConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The schedule of the data source runs.')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'environment_identifier', 'name', 'project_identifier', 'type', 'asset_forms_input', 'configuration', 'description', 'enable_setting', 'publish_on_import', 'recommendation', 'schedule']
    _method_names: typing.ClassVar[list[str]] = ['DataSourceConfigurationInputProperty', 'FilterExpressionProperty', 'FormInputProperty', 'GlueRunConfigurationInputProperty', 'RecommendationConfigurationProperty', 'RedshiftClusterStorageProperty', 'RedshiftCredentialConfigurationProperty', 'RedshiftRunConfigurationInputProperty', 'RedshiftServerlessStorageProperty', 'RedshiftStorageProperty', 'RelationalFilterConfigurationProperty', 'ScheduleConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSource'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnDataSourceDefConfig] = pydantic.Field(None)


class CfnDataSourceDefConfig(pydantic.BaseModel):
    DataSourceConfigurationInputProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefDatasourceconfigurationinputpropertyParams]] = pydantic.Field(None, description='')
    FilterExpressionProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefFilterexpressionpropertyParams]] = pydantic.Field(None, description='')
    FormInputProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefForminputpropertyParams]] = pydantic.Field(None, description='')
    GlueRunConfigurationInputProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefGluerunconfigurationinputpropertyParams]] = pydantic.Field(None, description='')
    RecommendationConfigurationProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefRecommendationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    RedshiftClusterStorageProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefRedshiftclusterstoragepropertyParams]] = pydantic.Field(None, description='')
    RedshiftCredentialConfigurationProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefRedshiftcredentialconfigurationpropertyParams]] = pydantic.Field(None, description='')
    RedshiftRunConfigurationInputProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefRedshiftrunconfigurationinputpropertyParams]] = pydantic.Field(None, description='')
    RedshiftServerlessStorageProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefRedshiftserverlessstoragepropertyParams]] = pydantic.Field(None, description='')
    RedshiftStorageProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefRedshiftstoragepropertyParams]] = pydantic.Field(None, description='')
    RelationalFilterConfigurationProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefRelationalfilterconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ScheduleConfigurationProperty: typing.Optional[list[models.aws_datazone.CfnDataSourceDefScheduleconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnDataSourceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnDataSourceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnDataSourceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnDataSourceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnDataSourceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnDataSourceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnDataSourceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnDataSourceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnDataSourceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnDataSourceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnDataSourceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnDataSourceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnDataSourceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_last_run_asset_count_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)

class CfnDataSourceDefDatasourceconfigurationinputpropertyParams(pydantic.BaseModel):
    glue_run_configuration: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_GlueRunConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    redshift_run_configuration: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftRunConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefFilterexpressionpropertyParams(pydantic.BaseModel):
    expression: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefForminputpropertyParams(pydantic.BaseModel):
    form_name: str = pydantic.Field(..., description='')
    content: typing.Optional[str] = pydantic.Field(None, description='')
    type_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    type_revision: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefGluerunconfigurationinputpropertyParams(pydantic.BaseModel):
    relational_filter_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RelationalFilterConfigurationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    auto_import_data_quality_result: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    data_access_role: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefRecommendationconfigurationpropertyParams(pydantic.BaseModel):
    enable_business_name_generation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefRedshiftclusterstoragepropertyParams(pydantic.BaseModel):
    cluster_name: str = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefRedshiftcredentialconfigurationpropertyParams(pydantic.BaseModel):
    secret_manager_arn: str = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefRedshiftrunconfigurationinputpropertyParams(pydantic.BaseModel):
    redshift_credential_configuration: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftCredentialConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    redshift_storage: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftStoragePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    relational_filter_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RelationalFilterConfigurationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    data_access_role: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefRedshiftserverlessstoragepropertyParams(pydantic.BaseModel):
    workgroup_name: str = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefRedshiftstoragepropertyParams(pydantic.BaseModel):
    redshift_cluster_source: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftClusterStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    redshift_serverless_source: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RedshiftServerlessStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefRelationalfilterconfigurationpropertyParams(pydantic.BaseModel):
    database_name: str = pydantic.Field(..., description='')
    filter_expressions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_FilterExpressionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    schema_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefScheduleconfigurationpropertyParams(pydantic.BaseModel):
    schedule: typing.Optional[str] = pydantic.Field(None, description='')
    timezone: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDataSourceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataSourceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDataSourceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataSourceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDataSourceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDataSourceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDataSourceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDataSourceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDataSourceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataSourceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDataSourceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDataSourceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataSourceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnDomain
class CfnDomainDef(BaseCfnResource):
    domain_execution_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The domain execution role that is created when an Amazon DataZone domain is created. The domain execution role is created in the AWS account that houses the Amazon DataZone domain.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon DataZone domain.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the Amazon DataZone domain.\n')
    kms_key_identifier: typing.Optional[str] = pydantic.Field(None, description='The identifier of the AWS Key Management Service (KMS) key that is used to encrypt the Amazon DataZone domain, metadata, and reporting data.\n')
    single_sign_on: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDomain_SingleSignOnPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The single sign-on details in Amazon DataZone.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags specified for the Amazon DataZone domain.')
    _init_params: typing.ClassVar[list[str]] = ['domain_execution_role', 'name', 'description', 'kms_key_identifier', 'single_sign_on', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['SingleSignOnProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDomain'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnDomainDefConfig] = pydantic.Field(None)


class CfnDomainDefConfig(pydantic.BaseModel):
    SingleSignOnProperty: typing.Optional[list[models.aws_datazone.CfnDomainDefSinglesignonpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnDomainDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnDomainDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnDomainDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnDomainDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnDomainDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnDomainDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnDomainDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnDomainDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnDomainDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnDomainDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnDomainDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnDomainDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnDomainDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDomainDefSinglesignonpropertyParams(pydantic.BaseModel):
    type: typing.Optional[str] = pydantic.Field(None, description='')
    user_assignment: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDomainDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDomainDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDomainDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDomainDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDomainDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDomainDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDomainDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDomainDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDomainDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDomainDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDomainDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDomainDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDomainDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDomainDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnEnvironment
class CfnEnvironmentDef(BaseCfnResource):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone domain in which the environment is created.\n')
    environment_profile_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the environment profile that is used to create this Amazon DataZone environment.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon DataZone environment.\n')
    project_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone project in which this environment is created.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the environment.\n')
    glossary_terms: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The glossary terms that can be used in this Amazon DataZone environment.\n')
    user_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnEnvironment_EnvironmentParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The user parameters of this Amazon DataZone environment.')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'environment_profile_identifier', 'name', 'project_identifier', 'description', 'glossary_terms', 'user_parameters']
    _method_names: typing.ClassVar[list[str]] = ['EnvironmentParameterProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnEnvironment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnEnvironmentDefConfig] = pydantic.Field(None)


class CfnEnvironmentDefConfig(pydantic.BaseModel):
    EnvironmentParameterProperty: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefEnvironmentparameterpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnEnvironmentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnEnvironmentDefEnvironmentparameterpropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEnvironmentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEnvironmentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEnvironmentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEnvironmentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEnvironmentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEnvironmentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEnvironmentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEnvironmentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEnvironmentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEnvironmentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEnvironmentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnEnvironmentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEnvironmentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEnvironmentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnEnvironmentBlueprintConfiguration
class CfnEnvironmentBlueprintConfigurationDef(BaseCfnResource):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone domain in which an environment blueprint exists.\n')
    enabled_regions: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The enabled AWS Regions specified in a blueprint configuration.\n')
    environment_blueprint_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the environment blueprint. In the current release, only the following values are supported: ``DefaultDataLake`` and ``DefaultDataWarehouse`` .\n')
    manage_access_role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the manage access role.\n')
    provisioning_role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the provisioning role.\n')
    regional_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnEnvironmentBlueprintConfiguration_RegionalParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The regional parameters of the environment blueprint.')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'enabled_regions', 'environment_blueprint_identifier', 'manage_access_role_arn', 'provisioning_role_arn', 'regional_parameters']
    _method_names: typing.ClassVar[list[str]] = ['RegionalParameterProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnEnvironmentBlueprintConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefConfig] = pydantic.Field(None)


class CfnEnvironmentBlueprintConfigurationDefConfig(pydantic.BaseModel):
    RegionalParameterProperty: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefRegionalparameterpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnEnvironmentBlueprintConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnEnvironmentBlueprintConfigurationDefRegionalparameterpropertyParams(pydantic.BaseModel):
    parameters: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    region: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEnvironmentBlueprintConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEnvironmentBlueprintConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEnvironmentBlueprintConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEnvironmentBlueprintConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEnvironmentBlueprintConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEnvironmentBlueprintConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEnvironmentBlueprintConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEnvironmentBlueprintConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEnvironmentBlueprintConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEnvironmentBlueprintConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEnvironmentBlueprintConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnEnvironmentBlueprintConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEnvironmentBlueprintConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEnvironmentBlueprintConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnEnvironmentProfile
class CfnEnvironmentProfileDef(BaseCfnResource):
    aws_account_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of an AWS account in which an environment profile exists.\n')
    aws_account_region: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS Region in which an environment profile exists.\n')
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone domain in which the environment profile exists.\n')
    environment_blueprint_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of a blueprint with which an environment profile is created.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the environment profile.\n')
    project_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of a project in which an environment profile exists.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the environment profile.\n')
    user_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnEnvironmentProfile_EnvironmentParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The user parameters of this Amazon DataZone environment profile.')
    _init_params: typing.ClassVar[list[str]] = ['aws_account_id', 'aws_account_region', 'domain_identifier', 'environment_blueprint_identifier', 'name', 'project_identifier', 'description', 'user_parameters']
    _method_names: typing.ClassVar[list[str]] = ['EnvironmentParameterProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnEnvironmentProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnEnvironmentProfileDefConfig] = pydantic.Field(None)


class CfnEnvironmentProfileDefConfig(pydantic.BaseModel):
    EnvironmentParameterProperty: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefEnvironmentparameterpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnEnvironmentProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnEnvironmentProfileDefEnvironmentparameterpropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEnvironmentProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEnvironmentProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEnvironmentProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEnvironmentProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEnvironmentProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEnvironmentProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEnvironmentProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEnvironmentProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEnvironmentProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEnvironmentProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEnvironmentProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnEnvironmentProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEnvironmentProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEnvironmentProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnGroupProfile
class CfnGroupProfileDef(BaseCfnResource):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone domain in which a group profile exists.\n')
    group_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the group of a project member.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='The status of a group profile.')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'group_identifier', 'status']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnGroupProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnGroupProfileDefConfig] = pydantic.Field(None)


class CfnGroupProfileDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnGroupProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnGroupProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnGroupProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGroupProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnGroupProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGroupProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnGroupProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnGroupProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnGroupProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnGroupProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnGroupProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGroupProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnGroupProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnGroupProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGroupProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnProject
class CfnProjectDef(BaseCfnResource):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of a Amazon DataZone domain where the project exists.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of a project.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of a project.\n')
    glossary_terms: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The glossary terms that can be used in this Amazon DataZone project.')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'name', 'description', 'glossary_terms']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnProject'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnProjectDefConfig] = pydantic.Field(None)


class CfnProjectDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnProjectDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnProjectDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnProjectDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnProjectDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnProjectDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnProjectDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnProjectDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnProjectDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnProjectDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnProjectDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnProjectDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnProjectDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnProjectDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnProjectDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnProjectDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProjectDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnProjectDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProjectDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnProjectDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnProjectDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnProjectDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnProjectDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnProjectDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProjectDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnProjectDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnProjectDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProjectDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnProjectMembership
class CfnProjectMembershipDef(BaseCfnResource):
    designation: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The designated role of a project member.\n')
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon DataZone domain in which project membership is created.\n')
    member: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_datazone.CfnProjectMembership_MemberPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The details about a project member.\n')
    project_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the project for which this project membership was created.')
    _init_params: typing.ClassVar[list[str]] = ['designation', 'domain_identifier', 'member', 'project_identifier']
    _method_names: typing.ClassVar[list[str]] = ['MemberProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnProjectMembership'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnProjectMembershipDefConfig] = pydantic.Field(None)


class CfnProjectMembershipDefConfig(pydantic.BaseModel):
    MemberProperty: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefMemberpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnProjectMembershipDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnProjectMembershipDefMemberpropertyParams(pydantic.BaseModel):
    group_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    user_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnProjectMembershipDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnProjectMembershipDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProjectMembershipDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnProjectMembershipDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProjectMembershipDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnProjectMembershipDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnProjectMembershipDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnProjectMembershipDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnProjectMembershipDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnProjectMembershipDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProjectMembershipDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnProjectMembershipDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnProjectMembershipDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProjectMembershipDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnSubscriptionTarget
class CfnSubscriptionTargetDef(BaseCfnResource):
    applicable_asset_types: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The asset types included in the subscription target.\n')
    authorized_principals: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The authorized principals included in the subscription target.\n')
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon DataZone domain in which subscription target is created.\n')
    environment_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the environment in which subscription target is created.\n')
    manage_access_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The manage access role that is used to create the subscription target.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the subscription target.\n')
    subscription_target_config: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnSubscriptionTarget_SubscriptionTargetFormPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The configuration of the subscription target.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the subscription target.\n')
    provider: typing.Optional[str] = pydantic.Field(None, description='The provider of the subscription target.')
    _init_params: typing.ClassVar[list[str]] = ['applicable_asset_types', 'authorized_principals', 'domain_identifier', 'environment_identifier', 'manage_access_role', 'name', 'subscription_target_config', 'type', 'provider']
    _method_names: typing.ClassVar[list[str]] = ['SubscriptionTargetFormProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnSubscriptionTarget'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnSubscriptionTargetDefConfig] = pydantic.Field(None)


class CfnSubscriptionTargetDefConfig(pydantic.BaseModel):
    SubscriptionTargetFormProperty: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefSubscriptiontargetformpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnSubscriptionTargetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnSubscriptionTargetDefSubscriptiontargetformpropertyParams(pydantic.BaseModel):
    content: str = pydantic.Field(..., description='')
    form_name: str = pydantic.Field(..., description='')
    ...

class CfnSubscriptionTargetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSubscriptionTargetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSubscriptionTargetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSubscriptionTargetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSubscriptionTargetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSubscriptionTargetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSubscriptionTargetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSubscriptionTargetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSubscriptionTargetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSubscriptionTargetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSubscriptionTargetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnSubscriptionTargetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSubscriptionTargetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSubscriptionTargetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnUserProfile
class CfnUserProfileDef(BaseCfnResource):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of a Amazon DataZone domain in which a user profile exists.\n')
    user_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the user for which the user profile is created.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='The status of the user profile.\n')
    user_type: typing.Optional[str] = pydantic.Field(None, description='The user type of the user for which the user profile is created.')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'user_identifier', 'status', 'user_type']
    _method_names: typing.ClassVar[list[str]] = ['IamUserProfileDetailsProperty', 'SsoUserProfileDetailsProperty', 'UserProfileDetailsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnUserProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_datazone.CfnUserProfileDefConfig] = pydantic.Field(None)


class CfnUserProfileDefConfig(pydantic.BaseModel):
    IamUserProfileDetailsProperty: typing.Optional[list[models.aws_datazone.CfnUserProfileDefIamuserprofiledetailspropertyParams]] = pydantic.Field(None, description='')
    SsoUserProfileDetailsProperty: typing.Optional[list[models.aws_datazone.CfnUserProfileDefSsouserprofiledetailspropertyParams]] = pydantic.Field(None, description='')
    UserProfileDetailsProperty: typing.Optional[list[models.aws_datazone.CfnUserProfileDefUserprofiledetailspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_datazone.CfnUserProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_datazone.CfnUserProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_datazone.CfnUserProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_datazone.CfnUserProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_datazone.CfnUserProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_datazone.CfnUserProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_datazone.CfnUserProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_datazone.CfnUserProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_datazone.CfnUserProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_datazone.CfnUserProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_datazone.CfnUserProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_datazone.CfnUserProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_datazone.CfnUserProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_details_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)

class CfnUserProfileDefIamuserprofiledetailspropertyParams(pydantic.BaseModel):
    arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefSsouserprofiledetailspropertyParams(pydantic.BaseModel):
    first_name: typing.Optional[str] = pydantic.Field(None, description='')
    last_name: typing.Optional[str] = pydantic.Field(None, description='')
    username: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefUserprofiledetailspropertyParams(pydantic.BaseModel):
    iam: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnUserProfile_IamUserProfileDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sso: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnUserProfile_SsoUserProfileDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_datazone.CfnDataSourceProps
class CfnDataSourcePropsDef(BaseCfnProperty):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon DataZone domain where the data source is created.\n')
    environment_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the Amazon DataZone environment to which the data source publishes assets.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the data source.\n')
    project_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone project in which you want to add this data source.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the data source.\n')
    asset_forms_input: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_FormInputPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The metadata forms attached to the assets that the data source works with.\n')
    configuration: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_DataSourceConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the data source.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the data source.\n')
    enable_setting: typing.Optional[str] = pydantic.Field(None, description='Specifies whether the data source is enabled.\n')
    publish_on_import: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.\n')
    recommendation: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_RecommendationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies whether the business name generation is to be enabled for this data source.\n')
    schedule: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDataSource_ScheduleConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The schedule of the data source runs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-datasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_data_source_props = datazone.CfnDataSourceProps(\n        domain_identifier="domainIdentifier",\n        environment_identifier="environmentIdentifier",\n        name="name",\n        project_identifier="projectIdentifier",\n        type="type",\n\n        # the properties below are optional\n        asset_forms_input=[datazone.CfnDataSource.FormInputProperty(\n            form_name="formName",\n\n            # the properties below are optional\n            content="content",\n            type_identifier="typeIdentifier",\n            type_revision="typeRevision"\n        )],\n        configuration=datazone.CfnDataSource.DataSourceConfigurationInputProperty(\n            glue_run_configuration=datazone.CfnDataSource.GlueRunConfigurationInputProperty(\n                relational_filter_configurations=[datazone.CfnDataSource.RelationalFilterConfigurationProperty(\n                    database_name="databaseName",\n\n                    # the properties below are optional\n                    filter_expressions=[datazone.CfnDataSource.FilterExpressionProperty(\n                        expression="expression",\n                        type="type"\n                    )],\n                    schema_name="schemaName"\n                )],\n\n                # the properties below are optional\n                auto_import_data_quality_result=False,\n                data_access_role="dataAccessRole"\n            ),\n            redshift_run_configuration=datazone.CfnDataSource.RedshiftRunConfigurationInputProperty(\n                redshift_credential_configuration=datazone.CfnDataSource.RedshiftCredentialConfigurationProperty(\n                    secret_manager_arn="secretManagerArn"\n                ),\n                redshift_storage=datazone.CfnDataSource.RedshiftStorageProperty(\n                    redshift_cluster_source=datazone.CfnDataSource.RedshiftClusterStorageProperty(\n                        cluster_name="clusterName"\n                    ),\n                    redshift_serverless_source=datazone.CfnDataSource.RedshiftServerlessStorageProperty(\n                        workgroup_name="workgroupName"\n                    )\n                ),\n                relational_filter_configurations=[datazone.CfnDataSource.RelationalFilterConfigurationProperty(\n                    database_name="databaseName",\n\n                    # the properties below are optional\n                    filter_expressions=[datazone.CfnDataSource.FilterExpressionProperty(\n                        expression="expression",\n                        type="type"\n                    )],\n                    schema_name="schemaName"\n                )],\n\n                # the properties below are optional\n                data_access_role="dataAccessRole"\n            )\n        ),\n        description="description",\n        enable_setting="enableSetting",\n        publish_on_import=False,\n        recommendation=datazone.CfnDataSource.RecommendationConfigurationProperty(\n            enable_business_name_generation=False\n        ),\n        schedule=datazone.CfnDataSource.ScheduleConfigurationProperty(\n            schedule="schedule",\n            timezone="timezone"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'environment_identifier', 'name', 'project_identifier', 'type', 'asset_forms_input', 'configuration', 'description', 'enable_setting', 'publish_on_import', 'recommendation', 'schedule']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDataSourceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnDomainProps
class CfnDomainPropsDef(BaseCfnProperty):
    domain_execution_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The domain execution role that is created when an Amazon DataZone domain is created. The domain execution role is created in the AWS account that houses the Amazon DataZone domain.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon DataZone domain.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the Amazon DataZone domain.\n')
    kms_key_identifier: typing.Optional[str] = pydantic.Field(None, description='The identifier of the AWS Key Management Service (KMS) key that is used to encrypt the Amazon DataZone domain, metadata, and reporting data.\n')
    single_sign_on: typing.Union[models.UnsupportedResource, models.aws_datazone.CfnDomain_SingleSignOnPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The single sign-on details in Amazon DataZone.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags specified for the Amazon DataZone domain.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-domain.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_domain_props = datazone.CfnDomainProps(\n        domain_execution_role="domainExecutionRole",\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        kms_key_identifier="kmsKeyIdentifier",\n        single_sign_on=datazone.CfnDomain.SingleSignOnProperty(\n            type="type",\n            user_assignment="userAssignment"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_execution_role', 'name', 'description', 'kms_key_identifier', 'single_sign_on', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnDomainProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnEnvironmentBlueprintConfigurationProps
class CfnEnvironmentBlueprintConfigurationPropsDef(BaseCfnProperty):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone domain in which an environment blueprint exists.\n')
    enabled_regions: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The enabled AWS Regions specified in a blueprint configuration.\n')
    environment_blueprint_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the environment blueprint. In the current release, only the following values are supported: ``DefaultDataLake`` and ``DefaultDataWarehouse`` .\n')
    manage_access_role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the manage access role.\n')
    provisioning_role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the provisioning role.\n')
    regional_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnEnvironmentBlueprintConfiguration_RegionalParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The regional parameters of the environment blueprint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-environmentblueprintconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_environment_blueprint_configuration_props = datazone.CfnEnvironmentBlueprintConfigurationProps(\n        domain_identifier="domainIdentifier",\n        enabled_regions=["enabledRegions"],\n        environment_blueprint_identifier="environmentBlueprintIdentifier",\n\n        # the properties below are optional\n        manage_access_role_arn="manageAccessRoleArn",\n        provisioning_role_arn="provisioningRoleArn",\n        regional_parameters=[datazone.CfnEnvironmentBlueprintConfiguration.RegionalParameterProperty(\n            parameters={\n                "parameters_key": "parameters"\n            },\n            region="region"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'enabled_regions', 'environment_blueprint_identifier', 'manage_access_role_arn', 'provisioning_role_arn', 'regional_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnEnvironmentBlueprintConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnEnvironmentProfileProps
class CfnEnvironmentProfilePropsDef(BaseCfnProperty):
    aws_account_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of an AWS account in which an environment profile exists.\n')
    aws_account_region: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS Region in which an environment profile exists.\n')
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone domain in which the environment profile exists.\n')
    environment_blueprint_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of a blueprint with which an environment profile is created.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the environment profile.\n')
    project_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of a project in which an environment profile exists.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the environment profile.\n')
    user_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnEnvironmentProfile_EnvironmentParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The user parameters of this Amazon DataZone environment profile.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-environmentprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_environment_profile_props = datazone.CfnEnvironmentProfileProps(\n        aws_account_id="awsAccountId",\n        aws_account_region="awsAccountRegion",\n        domain_identifier="domainIdentifier",\n        environment_blueprint_identifier="environmentBlueprintIdentifier",\n        name="name",\n        project_identifier="projectIdentifier",\n\n        # the properties below are optional\n        description="description",\n        user_parameters=[datazone.CfnEnvironmentProfile.EnvironmentParameterProperty(\n            name="name",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aws_account_id', 'aws_account_region', 'domain_identifier', 'environment_blueprint_identifier', 'name', 'project_identifier', 'description', 'user_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnEnvironmentProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnEnvironmentProps
class CfnEnvironmentPropsDef(BaseCfnProperty):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone domain in which the environment is created.\n')
    environment_profile_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the environment profile that is used to create this Amazon DataZone environment.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Amazon DataZone environment.\n')
    project_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone project in which this environment is created.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the environment.\n')
    glossary_terms: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The glossary terms that can be used in this Amazon DataZone environment.\n')
    user_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnEnvironment_EnvironmentParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The user parameters of this Amazon DataZone environment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-environment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_environment_props = datazone.CfnEnvironmentProps(\n        domain_identifier="domainIdentifier",\n        environment_profile_identifier="environmentProfileIdentifier",\n        name="name",\n        project_identifier="projectIdentifier",\n\n        # the properties below are optional\n        description="description",\n        glossary_terms=["glossaryTerms"],\n        user_parameters=[datazone.CfnEnvironment.EnvironmentParameterProperty(\n            name="name",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'environment_profile_identifier', 'name', 'project_identifier', 'description', 'glossary_terms', 'user_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnEnvironmentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnGroupProfileProps
class CfnGroupProfilePropsDef(BaseCfnProperty):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon DataZone domain in which a group profile exists.\n')
    group_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the group of a project member.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='The status of a group profile.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-groupprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_group_profile_props = datazone.CfnGroupProfileProps(\n        domain_identifier="domainIdentifier",\n        group_identifier="groupIdentifier",\n\n        # the properties below are optional\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'group_identifier', 'status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnGroupProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnProjectMembershipProps
class CfnProjectMembershipPropsDef(BaseCfnProperty):
    designation: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The designated role of a project member.\n')
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon DataZone domain in which project membership is created.\n')
    member: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_datazone.CfnProjectMembership_MemberPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The details about a project member.\n')
    project_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the project for which this project membership was created.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-projectmembership.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_project_membership_props = datazone.CfnProjectMembershipProps(\n        designation="designation",\n        domain_identifier="domainIdentifier",\n        member=datazone.CfnProjectMembership.MemberProperty(\n            group_identifier="groupIdentifier",\n            user_identifier="userIdentifier"\n        ),\n        project_identifier="projectIdentifier"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['designation', 'domain_identifier', 'member', 'project_identifier']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnProjectMembershipProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnProjectProps
class CfnProjectPropsDef(BaseCfnProperty):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of a Amazon DataZone domain where the project exists.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of a project.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of a project.\n')
    glossary_terms: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The glossary terms that can be used in this Amazon DataZone project.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-project.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_project_props = datazone.CfnProjectProps(\n        domain_identifier="domainIdentifier",\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        glossary_terms=["glossaryTerms"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'name', 'description', 'glossary_terms']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnProjectProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnSubscriptionTargetProps
class CfnSubscriptionTargetPropsDef(BaseCfnProperty):
    applicable_asset_types: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The asset types included in the subscription target.\n')
    authorized_principals: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The authorized principals included in the subscription target.\n')
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon DataZone domain in which subscription target is created.\n')
    environment_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the environment in which subscription target is created.\n')
    manage_access_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The manage access role that is used to create the subscription target.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the subscription target.\n')
    subscription_target_config: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_datazone.CfnSubscriptionTarget_SubscriptionTargetFormPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The configuration of the subscription target.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the subscription target.\n')
    provider: typing.Optional[str] = pydantic.Field(None, description='The provider of the subscription target.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-subscriptiontarget.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_subscription_target_props = datazone.CfnSubscriptionTargetProps(\n        applicable_asset_types=["applicableAssetTypes"],\n        authorized_principals=["authorizedPrincipals"],\n        domain_identifier="domainIdentifier",\n        environment_identifier="environmentIdentifier",\n        manage_access_role="manageAccessRole",\n        name="name",\n        subscription_target_config=[datazone.CfnSubscriptionTarget.SubscriptionTargetFormProperty(\n            content="content",\n            form_name="formName"\n        )],\n        type="type",\n\n        # the properties below are optional\n        provider="provider"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['applicable_asset_types', 'authorized_principals', 'domain_identifier', 'environment_identifier', 'manage_access_role', 'name', 'subscription_target_config', 'type', 'provider']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnSubscriptionTargetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_datazone.CfnUserProfileProps
class CfnUserProfilePropsDef(BaseCfnProperty):
    domain_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of a Amazon DataZone domain in which a user profile exists.\n')
    user_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the user for which the user profile is created.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='The status of the user profile.\n')
    user_type: typing.Optional[str] = pydantic.Field(None, description='The user type of the user for which the user profile is created.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datazone-userprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_datazone as datazone\n\n    cfn_user_profile_props = datazone.CfnUserProfileProps(\n        domain_identifier="domainIdentifier",\n        user_identifier="userIdentifier",\n\n        # the properties below are optional\n        status="status",\n        user_type="userType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_identifier', 'user_identifier', 'status', 'user_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_datazone.CfnUserProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnDataSource_DataSourceConfigurationInputProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_DataSourceConfigurationInputPropertyDef]] = pydantic.Field(None)
    CfnDataSource_FilterExpressionProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_FilterExpressionPropertyDef]] = pydantic.Field(None)
    CfnDataSource_FormInputProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_FormInputPropertyDef]] = pydantic.Field(None)
    CfnDataSource_GlueRunConfigurationInputProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_GlueRunConfigurationInputPropertyDef]] = pydantic.Field(None)
    CfnDataSource_RecommendationConfigurationProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_RecommendationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_RedshiftClusterStorageProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_RedshiftClusterStoragePropertyDef]] = pydantic.Field(None)
    CfnDataSource_RedshiftCredentialConfigurationProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_RedshiftCredentialConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_RedshiftRunConfigurationInputProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_RedshiftRunConfigurationInputPropertyDef]] = pydantic.Field(None)
    CfnDataSource_RedshiftServerlessStorageProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_RedshiftServerlessStoragePropertyDef]] = pydantic.Field(None)
    CfnDataSource_RedshiftStorageProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_RedshiftStoragePropertyDef]] = pydantic.Field(None)
    CfnDataSource_RelationalFilterConfigurationProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_RelationalFilterConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ScheduleConfigurationProperty: typing.Optional[dict[str, models.aws_datazone.CfnDataSource_ScheduleConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDomain_SingleSignOnProperty: typing.Optional[dict[str, models.aws_datazone.CfnDomain_SingleSignOnPropertyDef]] = pydantic.Field(None)
    CfnEnvironment_EnvironmentParameterProperty: typing.Optional[dict[str, models.aws_datazone.CfnEnvironment_EnvironmentParameterPropertyDef]] = pydantic.Field(None)
    CfnEnvironmentBlueprintConfiguration_RegionalParameterProperty: typing.Optional[dict[str, models.aws_datazone.CfnEnvironmentBlueprintConfiguration_RegionalParameterPropertyDef]] = pydantic.Field(None)
    CfnEnvironmentProfile_EnvironmentParameterProperty: typing.Optional[dict[str, models.aws_datazone.CfnEnvironmentProfile_EnvironmentParameterPropertyDef]] = pydantic.Field(None)
    CfnProjectMembership_MemberProperty: typing.Optional[dict[str, models.aws_datazone.CfnProjectMembership_MemberPropertyDef]] = pydantic.Field(None)
    CfnSubscriptionTarget_SubscriptionTargetFormProperty: typing.Optional[dict[str, models.aws_datazone.CfnSubscriptionTarget_SubscriptionTargetFormPropertyDef]] = pydantic.Field(None)
    CfnUserProfile_IamUserProfileDetailsProperty: typing.Optional[dict[str, models.aws_datazone.CfnUserProfile_IamUserProfileDetailsPropertyDef]] = pydantic.Field(None)
    CfnUserProfile_SsoUserProfileDetailsProperty: typing.Optional[dict[str, models.aws_datazone.CfnUserProfile_SsoUserProfileDetailsPropertyDef]] = pydantic.Field(None)
    CfnUserProfile_UserProfileDetailsProperty: typing.Optional[dict[str, models.aws_datazone.CfnUserProfile_UserProfileDetailsPropertyDef]] = pydantic.Field(None)
    CfnDataSource: typing.Optional[dict[str, models.aws_datazone.CfnDataSourceDef]] = pydantic.Field(None)
    CfnDomain: typing.Optional[dict[str, models.aws_datazone.CfnDomainDef]] = pydantic.Field(None)
    CfnEnvironment: typing.Optional[dict[str, models.aws_datazone.CfnEnvironmentDef]] = pydantic.Field(None)
    CfnEnvironmentBlueprintConfiguration: typing.Optional[dict[str, models.aws_datazone.CfnEnvironmentBlueprintConfigurationDef]] = pydantic.Field(None)
    CfnEnvironmentProfile: typing.Optional[dict[str, models.aws_datazone.CfnEnvironmentProfileDef]] = pydantic.Field(None)
    CfnGroupProfile: typing.Optional[dict[str, models.aws_datazone.CfnGroupProfileDef]] = pydantic.Field(None)
    CfnProject: typing.Optional[dict[str, models.aws_datazone.CfnProjectDef]] = pydantic.Field(None)
    CfnProjectMembership: typing.Optional[dict[str, models.aws_datazone.CfnProjectMembershipDef]] = pydantic.Field(None)
    CfnSubscriptionTarget: typing.Optional[dict[str, models.aws_datazone.CfnSubscriptionTargetDef]] = pydantic.Field(None)
    CfnUserProfile: typing.Optional[dict[str, models.aws_datazone.CfnUserProfileDef]] = pydantic.Field(None)
    CfnDataSourceProps: typing.Optional[dict[str, models.aws_datazone.CfnDataSourcePropsDef]] = pydantic.Field(None)
    CfnDomainProps: typing.Optional[dict[str, models.aws_datazone.CfnDomainPropsDef]] = pydantic.Field(None)
    CfnEnvironmentBlueprintConfigurationProps: typing.Optional[dict[str, models.aws_datazone.CfnEnvironmentBlueprintConfigurationPropsDef]] = pydantic.Field(None)
    CfnEnvironmentProfileProps: typing.Optional[dict[str, models.aws_datazone.CfnEnvironmentProfilePropsDef]] = pydantic.Field(None)
    CfnEnvironmentProps: typing.Optional[dict[str, models.aws_datazone.CfnEnvironmentPropsDef]] = pydantic.Field(None)
    CfnGroupProfileProps: typing.Optional[dict[str, models.aws_datazone.CfnGroupProfilePropsDef]] = pydantic.Field(None)
    CfnProjectMembershipProps: typing.Optional[dict[str, models.aws_datazone.CfnProjectMembershipPropsDef]] = pydantic.Field(None)
    CfnProjectProps: typing.Optional[dict[str, models.aws_datazone.CfnProjectPropsDef]] = pydantic.Field(None)
    CfnSubscriptionTargetProps: typing.Optional[dict[str, models.aws_datazone.CfnSubscriptionTargetPropsDef]] = pydantic.Field(None)
    CfnUserProfileProps: typing.Optional[dict[str, models.aws_datazone.CfnUserProfilePropsDef]] = pydantic.Field(None)
    ...

import models
