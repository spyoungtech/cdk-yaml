from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormBaseItemProperty
class CfnEvaluationForm_EvaluationFormBaseItemPropertyDef(BaseStruct):
    section: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSectionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A subsection or inner section of an item.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformbaseitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    # evaluation_form_section_property_: connect.CfnEvaluationForm.EvaluationFormSectionProperty\n\n    evaluation_form_base_item_property = connect.CfnEvaluationForm.EvaluationFormBaseItemProperty(\n        section=connect.CfnEvaluationForm.EvaluationFormSectionProperty(\n            ref_id="refId",\n            title="title",\n\n            # the properties below are optional\n            instructions="instructions",\n            items=[connect.CfnEvaluationForm.EvaluationFormItemProperty(\n                question=connect.CfnEvaluationForm.EvaluationFormQuestionProperty(\n                    question_type="questionType",\n                    ref_id="refId",\n                    title="title",\n\n                    # the properties below are optional\n                    instructions="instructions",\n                    not_applicable_enabled=False,\n                    question_type_properties=connect.CfnEvaluationForm.EvaluationFormQuestionTypePropertiesProperty(\n                        numeric=connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty(\n                            max_value=123,\n                            min_value=123,\n\n                            # the properties below are optional\n                            automation=connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty(\n                                property_value=connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n                                    label="label"\n                                )\n                            ),\n                            options=[connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty(\n                                max_value=123,\n                                min_value=123,\n\n                                # the properties below are optional\n                                automatic_fail=False,\n                                score=123\n                            )]\n                        ),\n                        single_select=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty(\n                            options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty(\n                                ref_id="refId",\n                                text="text",\n\n                                # the properties below are optional\n                                automatic_fail=False,\n                                score=123\n                            )],\n\n                            # the properties below are optional\n                            automation=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty(\n                                options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n                                    rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n                                        category="category",\n                                        condition="condition",\n                                        option_ref_id="optionRefId"\n                                    )\n                                )],\n\n                                # the properties below are optional\n                                default_option_ref_id="defaultOptionRefId"\n                            ),\n                            display_as="displayAs"\n                        )\n                    ),\n                    weight=123\n                ),\n                section=evaluation_form_section_property_\n            )],\n            weight=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['section']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormBaseItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormItemProperty
class CfnEvaluationForm_EvaluationFormItemPropertyDef(BaseStruct):
    question: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormQuestionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The information of the question.\n')
    section: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The information of the section.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    # evaluation_form_section_property_: connect.CfnEvaluationForm.EvaluationFormSectionProperty\n\n    evaluation_form_item_property = connect.CfnEvaluationForm.EvaluationFormItemProperty(\n        question=connect.CfnEvaluationForm.EvaluationFormQuestionProperty(\n            question_type="questionType",\n            ref_id="refId",\n            title="title",\n\n            # the properties below are optional\n            instructions="instructions",\n            not_applicable_enabled=False,\n            question_type_properties=connect.CfnEvaluationForm.EvaluationFormQuestionTypePropertiesProperty(\n                numeric=connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty(\n                    max_value=123,\n                    min_value=123,\n\n                    # the properties below are optional\n                    automation=connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty(\n                        property_value=connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n                            label="label"\n                        )\n                    ),\n                    options=[connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty(\n                        max_value=123,\n                        min_value=123,\n\n                        # the properties below are optional\n                        automatic_fail=False,\n                        score=123\n                    )]\n                ),\n                single_select=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty(\n                    options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty(\n                        ref_id="refId",\n                        text="text",\n\n                        # the properties below are optional\n                        automatic_fail=False,\n                        score=123\n                    )],\n\n                    # the properties below are optional\n                    automation=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty(\n                        options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n                            rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n                                category="category",\n                                condition="condition",\n                                option_ref_id="optionRefId"\n                            )\n                        )],\n\n                        # the properties below are optional\n                        default_option_ref_id="defaultOptionRefId"\n                    ),\n                    display_as="displayAs"\n                )\n            ),\n            weight=123\n        ),\n        section=connect.CfnEvaluationForm.EvaluationFormSectionProperty(\n            ref_id="refId",\n            title="title",\n\n            # the properties below are optional\n            instructions="instructions",\n            items=[connect.CfnEvaluationForm.EvaluationFormItemProperty(\n                question=connect.CfnEvaluationForm.EvaluationFormQuestionProperty(\n                    question_type="questionType",\n                    ref_id="refId",\n                    title="title",\n\n                    # the properties below are optional\n                    instructions="instructions",\n                    not_applicable_enabled=False,\n                    question_type_properties=connect.CfnEvaluationForm.EvaluationFormQuestionTypePropertiesProperty(\n                        numeric=connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty(\n                            max_value=123,\n                            min_value=123,\n\n                            # the properties below are optional\n                            automation=connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty(\n                                property_value=connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n                                    label="label"\n                                )\n                            ),\n                            options=[connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty(\n                                max_value=123,\n                                min_value=123,\n\n                                # the properties below are optional\n                                automatic_fail=False,\n                                score=123\n                            )]\n                        ),\n                        single_select=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty(\n                            options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty(\n                                ref_id="refId",\n                                text="text",\n\n                                # the properties below are optional\n                                automatic_fail=False,\n                                score=123\n                            )],\n\n                            # the properties below are optional\n                            automation=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty(\n                                options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n                                    rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n                                        category="category",\n                                        condition="condition",\n                                        option_ref_id="optionRefId"\n                                    )\n                                )],\n\n                                # the properties below are optional\n                                default_option_ref_id="defaultOptionRefId"\n                            ),\n                            display_as="displayAs"\n                        )\n                    ),\n                    weight=123\n                ),\n                section=evaluation_form_section_property_\n            )],\n            weight=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['question', 'section']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty
class CfnEvaluationForm_EvaluationFormNumericQuestionAutomationPropertyDef(BaseStruct):
    property_value: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_NumericQuestionPropertyValueAutomationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The property value of the automation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformnumericquestionautomation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    evaluation_form_numeric_question_automation_property = connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty(\n        property_value=connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n            label="label"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['property_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty
class CfnEvaluationForm_EvaluationFormNumericQuestionOptionPropertyDef(BaseStruct):
    max_value: typing.Union[int, float] = pydantic.Field(..., description='The maximum answer value of the range option.\n')
    min_value: typing.Union[int, float] = pydantic.Field(..., description='The minimum answer value of the range option.\n')
    automatic_fail: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.\n')
    score: typing.Union[int, float, None] = pydantic.Field(None, description='The score assigned to answer values within the range option. *Minimum* : 0 *Maximum* : 10\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformnumericquestionoption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    evaluation_form_numeric_question_option_property = connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty(\n        max_value=123,\n        min_value=123,\n\n        # the properties below are optional\n        automatic_fail=False,\n        score=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_value', 'min_value', 'automatic_fail', 'score']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty
class CfnEvaluationForm_EvaluationFormNumericQuestionPropertiesPropertyDef(BaseStruct):
    max_value: typing.Union[int, float] = pydantic.Field(..., description='The maximum answer value.\n')
    min_value: typing.Union[int, float] = pydantic.Field(..., description='The minimum answer value.\n')
    automation: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormNumericQuestionAutomationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The automation properties of the numeric question.\n')
    options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormNumericQuestionOptionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The scoring options of the numeric question.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformnumericquestionproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    evaluation_form_numeric_question_properties_property = connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty(\n        max_value=123,\n        min_value=123,\n\n        # the properties below are optional\n        automation=connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty(\n            property_value=connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n                label="label"\n            )\n        ),\n        options=[connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty(\n            max_value=123,\n            min_value=123,\n\n            # the properties below are optional\n            automatic_fail=False,\n            score=123\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_value', 'min_value', 'automation', 'options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormQuestionProperty
class CfnEvaluationForm_EvaluationFormQuestionPropertyDef(BaseStruct):
    question_type: str = pydantic.Field(..., description='The type of the question. *Allowed values* : ``NUMERIC`` | ``SINGLESELECT`` | ``TEXT``\n')
    ref_id: str = pydantic.Field(..., description='The identifier of the question. An identifier must be unique within the evaluation form. *Length Constraints* : Minimum length of 1. Maximum length of 40.\n')
    title: str = pydantic.Field(..., description='The title of the question. *Length Constraints* : Minimum length of 1. Maximum length of 350.\n')
    instructions: typing.Optional[str] = pydantic.Field(None, description='The instructions of the section. *Length Constraints* : Minimum length of 0. Maximum length of 1024.\n')
    not_applicable_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='The flag to enable not applicable answers to the question.\n')
    question_type_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormQuestionTypePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties of the type of question. Text questions do not have to define question type properties.\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='The scoring weight of the section. *Minimum* : 0 *Maximum* : 100\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformquestion.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    evaluation_form_question_property = connect.CfnEvaluationForm.EvaluationFormQuestionProperty(\n        question_type="questionType",\n        ref_id="refId",\n        title="title",\n\n        # the properties below are optional\n        instructions="instructions",\n        not_applicable_enabled=False,\n        question_type_properties=connect.CfnEvaluationForm.EvaluationFormQuestionTypePropertiesProperty(\n            numeric=connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty(\n                max_value=123,\n                min_value=123,\n\n                # the properties below are optional\n                automation=connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty(\n                    property_value=connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n                        label="label"\n                    )\n                ),\n                options=[connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty(\n                    max_value=123,\n                    min_value=123,\n\n                    # the properties below are optional\n                    automatic_fail=False,\n                    score=123\n                )]\n            ),\n            single_select=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty(\n                options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty(\n                    ref_id="refId",\n                    text="text",\n\n                    # the properties below are optional\n                    automatic_fail=False,\n                    score=123\n                )],\n\n                # the properties below are optional\n                automation=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty(\n                    options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n                        rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n                            category="category",\n                            condition="condition",\n                            option_ref_id="optionRefId"\n                        )\n                    )],\n\n                    # the properties below are optional\n                    default_option_ref_id="defaultOptionRefId"\n                ),\n                display_as="displayAs"\n            )\n        ),\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['question_type', 'ref_id', 'title', 'instructions', 'not_applicable_enabled', 'question_type_properties', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormQuestionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormQuestionTypePropertiesProperty
class CfnEvaluationForm_EvaluationFormQuestionTypePropertiesPropertyDef(BaseStruct):
    numeric: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormNumericQuestionPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties of the numeric question.\n')
    single_select: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSingleSelectQuestionPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties of the numeric question.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformquestiontypeproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    evaluation_form_question_type_properties_property = connect.CfnEvaluationForm.EvaluationFormQuestionTypePropertiesProperty(\n        numeric=connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty(\n            max_value=123,\n            min_value=123,\n\n            # the properties below are optional\n            automation=connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty(\n                property_value=connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n                    label="label"\n                )\n            ),\n            options=[connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty(\n                max_value=123,\n                min_value=123,\n\n                # the properties below are optional\n                automatic_fail=False,\n                score=123\n            )]\n        ),\n        single_select=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty(\n            options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty(\n                ref_id="refId",\n                text="text",\n\n                # the properties below are optional\n                automatic_fail=False,\n                score=123\n            )],\n\n            # the properties below are optional\n            automation=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty(\n                options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n                    rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n                        category="category",\n                        condition="condition",\n                        option_ref_id="optionRefId"\n                    )\n                )],\n\n                # the properties below are optional\n                default_option_ref_id="defaultOptionRefId"\n            ),\n            display_as="displayAs"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['numeric', 'single_select']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormQuestionTypePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSectionProperty
class CfnEvaluationForm_EvaluationFormSectionPropertyDef(BaseStruct):
    ref_id: str = pydantic.Field(..., description='The identifier of the section. An identifier must be unique within the evaluation form. *Length Constraints* : Minimum length of 1. Maximum length of 40.\n')
    title: str = pydantic.Field(..., description='The title of the section. *Length Constraints* : Minimum length of 1. Maximum length of 128.\n')
    instructions: typing.Optional[str] = pydantic.Field(None, description='The instructions of the section.\n')
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The items of the section. *Minimum* : 1\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='The scoring weight of the section. *Minimum* : 0 *Maximum* : 100\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformsection.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    # evaluation_form_item_property_: connect.CfnEvaluationForm.EvaluationFormItemProperty\n\n    evaluation_form_section_property = connect.CfnEvaluationForm.EvaluationFormSectionProperty(\n        ref_id="refId",\n        title="title",\n\n        # the properties below are optional\n        instructions="instructions",\n        items=[connect.CfnEvaluationForm.EvaluationFormItemProperty(\n            question=connect.CfnEvaluationForm.EvaluationFormQuestionProperty(\n                question_type="questionType",\n                ref_id="refId",\n                title="title",\n\n                # the properties below are optional\n                instructions="instructions",\n                not_applicable_enabled=False,\n                question_type_properties=connect.CfnEvaluationForm.EvaluationFormQuestionTypePropertiesProperty(\n                    numeric=connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty(\n                        max_value=123,\n                        min_value=123,\n\n                        # the properties below are optional\n                        automation=connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty(\n                            property_value=connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n                                label="label"\n                            )\n                        ),\n                        options=[connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty(\n                            max_value=123,\n                            min_value=123,\n\n                            # the properties below are optional\n                            automatic_fail=False,\n                            score=123\n                        )]\n                    ),\n                    single_select=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty(\n                        options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty(\n                            ref_id="refId",\n                            text="text",\n\n                            # the properties below are optional\n                            automatic_fail=False,\n                            score=123\n                        )],\n\n                        # the properties below are optional\n                        automation=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty(\n                            options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n                                rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n                                    category="category",\n                                    condition="condition",\n                                    option_ref_id="optionRefId"\n                                )\n                            )],\n\n                            # the properties below are optional\n                            default_option_ref_id="defaultOptionRefId"\n                        ),\n                        display_as="displayAs"\n                    )\n                ),\n                weight=123\n            ),\n            section=connect.CfnEvaluationForm.EvaluationFormSectionProperty(\n                ref_id="refId",\n                title="title",\n\n                # the properties below are optional\n                instructions="instructions",\n                items=[evaluation_form_item_property_],\n                weight=123\n            )\n        )],\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ref_id', 'title', 'instructions', 'items', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSectionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty
class CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationOptionPropertyDef(BaseStruct):
    rule_category: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_SingleSelectQuestionRuleCategoryAutomationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The automation option based on a rule category for the single select question.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformsingleselectquestionautomationoption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    evaluation_form_single_select_question_automation_option_property = connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n        rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n            category="category",\n            condition="condition",\n            option_ref_id="optionRefId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rule_category']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty
class CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationPropertyDef(BaseStruct):
    options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationOptionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The automation options of the single select question. *Minimum* : 1 *Maximum* : 20\n')
    default_option_ref_id: typing.Optional[str] = pydantic.Field(None, description='The identifier of the default answer option, when none of the automation options match the criteria. *Length Constraints* : Minimum length of 1. Maximum length of 40.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformsingleselectquestionautomation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    evaluation_form_single_select_question_automation_property = connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty(\n        options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n            rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n                category="category",\n                condition="condition",\n                option_ref_id="optionRefId"\n            )\n        )],\n\n        # the properties below are optional\n        default_option_ref_id="defaultOptionRefId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['options', 'default_option_ref_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty
class CfnEvaluationForm_EvaluationFormSingleSelectQuestionOptionPropertyDef(BaseStruct):
    ref_id: str = pydantic.Field(..., description='The identifier of the answer option. An identifier must be unique within the question. *Length Constraints* : Minimum length of 1. Maximum length of 40.\n')
    text: str = pydantic.Field(..., description='The title of the answer option. *Length Constraints* : Minimum length of 1. Maximum length of 128.\n')
    automatic_fail: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.\n')
    score: typing.Union[int, float, None] = pydantic.Field(None, description='The score assigned to the answer option. *Minimum* : 0 *Maximum* : 10\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformsingleselectquestionoption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    evaluation_form_single_select_question_option_property = connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty(\n        ref_id="refId",\n        text="text",\n\n        # the properties below are optional\n        automatic_fail=False,\n        score=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ref_id', 'text', 'automatic_fail', 'score']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty
class CfnEvaluationForm_EvaluationFormSingleSelectQuestionPropertiesPropertyDef(BaseStruct):
    options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSingleSelectQuestionOptionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The answer options of the single select question. *Minimum* : 2 *Maximum* : 256\n')
    automation: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The display mode of the single select question.\n')
    display_as: typing.Optional[str] = pydantic.Field(None, description='The display mode of the single select question. *Allowed values* : ``DROPDOWN`` | ``RADIO``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-evaluationformsingleselectquestionproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    evaluation_form_single_select_question_properties_property = connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty(\n        options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty(\n            ref_id="refId",\n            text="text",\n\n            # the properties below are optional\n            automatic_fail=False,\n            score=123\n        )],\n\n        # the properties below are optional\n        automation=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty(\n            options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n                rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n                    category="category",\n                    condition="condition",\n                    option_ref_id="optionRefId"\n                )\n            )],\n\n            # the properties below are optional\n            default_option_ref_id="defaultOptionRefId"\n        ),\n        display_as="displayAs"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['options', 'automation', 'display_as']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty
class CfnEvaluationForm_NumericQuestionPropertyValueAutomationPropertyDef(BaseStruct):
    label: str = pydantic.Field(..., description='The property label of the automation. *Allowed values* : ``OVERALL_CUSTOMER_SENTIMENT_SCORE`` , ``OVERALL_AGENT_SENTIMENT_SCORE`` | ``NON_TALK_TIME`` | ``NON_TALK_TIME_PERCENTAGE`` | ``NUMBER_OF_INTERRUPTIONS`` | ``CONTACT_DURATION`` | ``AGENT_INTERACTION_DURATION`` | ``CUSTOMER_HOLD_TIME``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-numericquestionpropertyvalueautomation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    numeric_question_property_value_automation_property = connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n        label="label"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['label']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.ScoringStrategyProperty
class CfnEvaluationForm_ScoringStrategyPropertyDef(BaseStruct):
    mode: str = pydantic.Field(..., description='The scoring mode of the evaluation form. *Allowed values* : ``QUESTION_ONLY`` | ``SECTION_ONLY``\n')
    status: str = pydantic.Field(..., description='The scoring status of the evaluation form. *Allowed values* : ``ENABLED`` | ``DISABLED``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-scoringstrategy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    scoring_strategy_property = connect.CfnEvaluationForm.ScoringStrategyProperty(\n        mode="mode",\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mode', 'status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.ScoringStrategyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty
class CfnEvaluationForm_SingleSelectQuestionRuleCategoryAutomationPropertyDef(BaseStruct):
    category: str = pydantic.Field(..., description='The category name, as defined in Rules. *Minimum* : 1 *Maximum* : 50\n')
    condition: str = pydantic.Field(..., description='The condition to apply for the automation option. If the condition is PRESENT, then the option is applied when the contact data includes the category. Similarly, if the condition is NOT_PRESENT, then the option is applied when the contact data does not include the category. *Allowed values* : ``PRESENT`` | ``NOT_PRESENT`` *Maximum* : 50\n')
    option_ref_id: str = pydantic.Field(..., description='The identifier of the answer option. An identifier must be unique within the question. *Length Constraints* : Minimum length of 1. Maximum length of 40.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-evaluationform-singleselectquestionrulecategoryautomation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    single_select_question_rule_category_automation_property = connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n        category="category",\n        condition="condition",\n        option_ref_id="optionRefId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['category', 'condition', 'option_ref_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnHoursOfOperation.HoursOfOperationConfigProperty
class CfnHoursOfOperation_HoursOfOperationConfigPropertyDef(BaseStruct):
    day: str = pydantic.Field(..., description='The day that the hours of operation applies to.\n')
    end_time: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The end time that your contact center closes.\n')
    start_time: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The start time that your contact center opens.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-hoursofoperation-hoursofoperationconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    hours_of_operation_config_property = connect.CfnHoursOfOperation.HoursOfOperationConfigProperty(\n        day="day",\n        end_time=connect.CfnHoursOfOperation.HoursOfOperationTimeSliceProperty(\n            hours=123,\n            minutes=123\n        ),\n        start_time=connect.CfnHoursOfOperation.HoursOfOperationTimeSliceProperty(\n            hours=123,\n            minutes=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['day', 'end_time', 'start_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnHoursOfOperation.HoursOfOperationConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnHoursOfOperation.HoursOfOperationTimeSliceProperty
class CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyDef(BaseStruct):
    hours: typing.Union[int, float] = pydantic.Field(..., description='The hours.\n')
    minutes: typing.Union[int, float] = pydantic.Field(..., description='The minutes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-hoursofoperation-hoursofoperationtimeslice.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    hours_of_operation_time_slice_property = connect.CfnHoursOfOperation.HoursOfOperationTimeSliceProperty(\n        hours=123,\n        minutes=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hours', 'minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnHoursOfOperation.HoursOfOperationTimeSliceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnInstance.AttributesProperty
class CfnInstance_AttributesPropertyDef(BaseStruct):
    inbound_calls: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='``CfnInstance.AttributesProperty.InboundCalls``.\n')
    outbound_calls: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='``CfnInstance.AttributesProperty.OutboundCalls``.\n')
    auto_resolve_best_voices: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnInstance.AttributesProperty.AutoResolveBestVoices``.\n')
    contactflow_logs: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnInstance.AttributesProperty.ContactflowLogs``.\n')
    contact_lens: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnInstance.AttributesProperty.ContactLens``.\n')
    early_media: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnInstance.AttributesProperty.EarlyMedia``.\n')
    use_custom_tts_voices: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnInstance.AttributesProperty.UseCustomTTSVoices``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-instance-attributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    attributes_property = connect.CfnInstance.AttributesProperty(\n        inbound_calls=False,\n        outbound_calls=False,\n\n        # the properties below are optional\n        auto_resolve_best_voices=False,\n        contactflow_logs=False,\n        contact_lens=False,\n        early_media=False,\n        use_custom_tts_voices=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['inbound_calls', 'outbound_calls', 'auto_resolve_best_voices', 'contactflow_logs', 'contact_lens', 'early_media', 'use_custom_tts_voices']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstance.AttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnInstanceStorageConfig.EncryptionConfigProperty
class CfnInstanceStorageConfig_EncryptionConfigPropertyDef(BaseStruct):
    encryption_type: str = pydantic.Field(..., description='The type of encryption.\n')
    key_id: str = pydantic.Field(..., description='The full ARN of the encryption key. .. epigraph:: Be sure to provide the full ARN of the encryption key, not just the ID. Amazon Connect supports only KMS keys with the default key spec of ```SYMMETRIC_DEFAULT`` <https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-symmetric-default>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-instancestorageconfig-encryptionconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    encryption_config_property = connect.CfnInstanceStorageConfig.EncryptionConfigProperty(\n        encryption_type="encryptionType",\n        key_id="keyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encryption_type', 'key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstanceStorageConfig.EncryptionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnInstanceStorageConfig.KinesisFirehoseConfigProperty
class CfnInstanceStorageConfig_KinesisFirehoseConfigPropertyDef(BaseStruct):
    firehose_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the delivery stream.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-instancestorageconfig-kinesisfirehoseconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    kinesis_firehose_config_property = connect.CfnInstanceStorageConfig.KinesisFirehoseConfigProperty(\n        firehose_arn="firehoseArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['firehose_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstanceStorageConfig.KinesisFirehoseConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnInstanceStorageConfig.KinesisStreamConfigProperty
class CfnInstanceStorageConfig_KinesisStreamConfigPropertyDef(BaseStruct):
    stream_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the data stream.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-instancestorageconfig-kinesisstreamconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    kinesis_stream_config_property = connect.CfnInstanceStorageConfig.KinesisStreamConfigProperty(\n        stream_arn="streamArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['stream_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstanceStorageConfig.KinesisStreamConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnInstanceStorageConfig.KinesisVideoStreamConfigProperty
class CfnInstanceStorageConfig_KinesisVideoStreamConfigPropertyDef(BaseStruct):
    prefix: str = pydantic.Field(..., description='The prefix of the video stream.\n')
    retention_period_hours: typing.Union[int, float] = pydantic.Field(..., description='The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. The default value is 0, indicating that the stream does not persist data.\n')
    encryption_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_EncryptionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The encryption configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-instancestorageconfig-kinesisvideostreamconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    kinesis_video_stream_config_property = connect.CfnInstanceStorageConfig.KinesisVideoStreamConfigProperty(\n        prefix="prefix",\n        retention_period_hours=123,\n\n        # the properties below are optional\n        encryption_config=connect.CfnInstanceStorageConfig.EncryptionConfigProperty(\n            encryption_type="encryptionType",\n            key_id="keyId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['prefix', 'retention_period_hours', 'encryption_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstanceStorageConfig.KinesisVideoStreamConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnInstanceStorageConfig.S3ConfigProperty
class CfnInstanceStorageConfig_S3ConfigPropertyDef(BaseStruct):
    bucket_name: str = pydantic.Field(..., description='The S3 bucket name.\n')
    bucket_prefix: str = pydantic.Field(..., description='The S3 bucket prefix.\n')
    encryption_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_EncryptionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon S3 encryption configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-instancestorageconfig-s3config.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    s3_config_property = connect.CfnInstanceStorageConfig.S3ConfigProperty(\n        bucket_name="bucketName",\n        bucket_prefix="bucketPrefix",\n\n        # the properties below are optional\n        encryption_config=connect.CfnInstanceStorageConfig.EncryptionConfigProperty(\n            encryption_type="encryptionType",\n            key_id="keyId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'bucket_prefix', 'encryption_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstanceStorageConfig.S3ConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnQuickConnect.PhoneNumberQuickConnectConfigProperty
class CfnQuickConnect_PhoneNumberQuickConnectConfigPropertyDef(BaseStruct):
    phone_number: str = pydantic.Field(..., description='The phone number in E.164 format.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-quickconnect-phonenumberquickconnectconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    phone_number_quick_connect_config_property = connect.CfnQuickConnect.PhoneNumberQuickConnectConfigProperty(\n        phone_number="phoneNumber"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['phone_number']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnQuickConnect.PhoneNumberQuickConnectConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnQuickConnect.QueueQuickConnectConfigProperty
class CfnQuickConnect_QueueQuickConnectConfigPropertyDef(BaseStruct):
    contact_flow_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the flow.\n')
    queue_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the queue.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-quickconnect-queuequickconnectconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    queue_quick_connect_config_property = connect.CfnQuickConnect.QueueQuickConnectConfigProperty(\n        contact_flow_arn="contactFlowArn",\n        queue_arn="queueArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['contact_flow_arn', 'queue_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnQuickConnect.QueueQuickConnectConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnQuickConnect.QuickConnectConfigProperty
class CfnQuickConnect_QuickConnectConfigPropertyDef(BaseStruct):
    quick_connect_type: str = pydantic.Field(..., description='The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).\n')
    phone_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnQuickConnect_PhoneNumberQuickConnectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.\n')
    queue_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnQuickConnect_QueueQuickConnectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The queue configuration. This is required only if QuickConnectType is QUEUE.\n')
    user_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnQuickConnect_UserQuickConnectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The user configuration. This is required only if QuickConnectType is USER.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-quickconnect-quickconnectconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    quick_connect_config_property = connect.CfnQuickConnect.QuickConnectConfigProperty(\n        quick_connect_type="quickConnectType",\n\n        # the properties below are optional\n        phone_config=connect.CfnQuickConnect.PhoneNumberQuickConnectConfigProperty(\n            phone_number="phoneNumber"\n        ),\n        queue_config=connect.CfnQuickConnect.QueueQuickConnectConfigProperty(\n            contact_flow_arn="contactFlowArn",\n            queue_arn="queueArn"\n        ),\n        user_config=connect.CfnQuickConnect.UserQuickConnectConfigProperty(\n            contact_flow_arn="contactFlowArn",\n            user_arn="userArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['quick_connect_type', 'phone_config', 'queue_config', 'user_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnQuickConnect.QuickConnectConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnQuickConnect.UserQuickConnectConfigProperty
class CfnQuickConnect_UserQuickConnectConfigPropertyDef(BaseStruct):
    contact_flow_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the flow.\n')
    user_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the user.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-quickconnect-userquickconnectconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    user_quick_connect_config_property = connect.CfnQuickConnect.UserQuickConnectConfigProperty(\n        contact_flow_arn="contactFlowArn",\n        user_arn="userArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['contact_flow_arn', 'user_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnQuickConnect.UserQuickConnectConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnRule.ActionsProperty
class CfnRule_ActionsPropertyDef(BaseStruct):
    assign_contact_category_actions: typing.Union[typing.Sequence[typing.Any], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Information about the contact category action. The syntax can be empty, for example, ``{}`` .\n')
    event_bridge_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_EventBridgeActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about the EventBridge action.\n')
    send_notification_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_SendNotificationActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about the send notification action.\n')
    task_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_TaskActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about the task action. This field is required if ``TriggerEventSource`` is one of the following values: ``OnZendeskTicketCreate`` | ``OnZendeskTicketStatusUpdate`` | ``OnSalesforceCaseCreate``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-rule-actions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    # assign_contact_category_actions: Any\n\n    actions_property = connect.CfnRule.ActionsProperty(\n        assign_contact_category_actions=[assign_contact_category_actions],\n        event_bridge_actions=[connect.CfnRule.EventBridgeActionProperty(\n            name="name"\n        )],\n        send_notification_actions=[connect.CfnRule.SendNotificationActionProperty(\n            content="content",\n            content_type="contentType",\n            delivery_method="deliveryMethod",\n            recipient=connect.CfnRule.NotificationRecipientTypeProperty(\n                user_arns=["userArns"],\n                user_tags={\n                    "user_tags_key": "userTags"\n                }\n            ),\n\n            # the properties below are optional\n            subject="subject"\n        )],\n        task_actions=[connect.CfnRule.TaskActionProperty(\n            contact_flow_arn="contactFlowArn",\n            name="name",\n\n            # the properties below are optional\n            description="description",\n            references={\n                "references_key": connect.CfnRule.ReferenceProperty(\n                    type="type",\n                    value="value"\n                )\n            }\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['assign_contact_category_actions', 'event_bridge_actions', 'send_notification_actions', 'task_actions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnRule.ActionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnRule.EventBridgeActionProperty
class CfnRule_EventBridgeActionPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-rule-eventbridgeaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    event_bridge_action_property = connect.CfnRule.EventBridgeActionProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnRule.EventBridgeActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnRule.NotificationRecipientTypeProperty
class CfnRule_NotificationRecipientTypePropertyDef(BaseStruct):
    user_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the user account.\n')
    user_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }. Amazon Connect users with the specified tags will be notified.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-rule-notificationrecipienttype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    notification_recipient_type_property = connect.CfnRule.NotificationRecipientTypeProperty(\n        user_arns=["userArns"],\n        user_tags={\n            "user_tags_key": "userTags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_arns', 'user_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnRule.NotificationRecipientTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnRule.ReferenceProperty
class CfnRule_ReferencePropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='The type of the reference. ``DATE`` must be of type Epoch timestamp. *Allowed values* : ``URL`` | ``ATTACHMENT`` | ``NUMBER`` | ``STRING`` | ``DATE`` | ``EMAIL``\n')
    value: str = pydantic.Field(..., description='A valid value for the reference. For example, for a URL reference, a formatted URL that is displayed to an agent in the Contact Control Panel (CCP).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-rule-reference.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    reference_property = connect.CfnRule.ReferenceProperty(\n        type="type",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnRule.ReferenceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnRule.RuleTriggerEventSourceProperty
class CfnRule_RuleTriggerEventSourcePropertyDef(BaseStruct):
    event_source_name: str = pydantic.Field(..., description='The name of the event source. *Allowed values* : ``OnPostCallAnalysisAvailable`` | ``OnRealTimeCallAnalysisAvailable`` | ``OnPostChatAnalysisAvailable`` | ``OnZendeskTicketCreate`` | ``OnZendeskTicketStatusUpdate`` | ``OnSalesforceCaseCreate``\n')
    integration_association_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the integration association. ``IntegrationAssociationArn`` is required if ``TriggerEventSource`` is one of the following values: ``OnZendeskTicketCreate`` | ``OnZendeskTicketStatusUpdate`` | ``OnSalesforceCaseCreate``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-rule-ruletriggereventsource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    rule_trigger_event_source_property = connect.CfnRule.RuleTriggerEventSourceProperty(\n        event_source_name="eventSourceName",\n\n        # the properties below are optional\n        integration_association_arn="integrationAssociationArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_source_name', 'integration_association_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnRule.RuleTriggerEventSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnRule.SendNotificationActionProperty
class CfnRule_SendNotificationActionPropertyDef(BaseStruct):
    content: str = pydantic.Field(..., description='Notification content. Supports variable injection. For more information, see `JSONPath reference <https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html>`_ in the *Amazon Connect Administrators Guide* .\n')
    content_type: str = pydantic.Field(..., description='Content type format. *Allowed value* : ``PLAIN_TEXT``\n')
    delivery_method: str = pydantic.Field(..., description='Notification delivery method. *Allowed value* : ``EMAIL``\n')
    recipient: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_NotificationRecipientTypePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Notification recipient.\n')
    subject: typing.Optional[str] = pydantic.Field(None, description='The subject of the email if the delivery method is ``EMAIL`` . Supports variable injection. For more information, see `JSONPath reference <https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html>`_ in the *Amazon Connect Administrators Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-rule-sendnotificationaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    send_notification_action_property = connect.CfnRule.SendNotificationActionProperty(\n        content="content",\n        content_type="contentType",\n        delivery_method="deliveryMethod",\n        recipient=connect.CfnRule.NotificationRecipientTypeProperty(\n            user_arns=["userArns"],\n            user_tags={\n                "user_tags_key": "userTags"\n            }\n        ),\n\n        # the properties below are optional\n        subject="subject"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content', 'content_type', 'delivery_method', 'recipient', 'subject']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnRule.SendNotificationActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnRule.TaskActionProperty
class CfnRule_TaskActionPropertyDef(BaseStruct):
    contact_flow_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the flow.\n')
    name: str = pydantic.Field(..., description='The name. Supports variable injection. For more information, see `JSONPath reference <https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html>`_ in the *Amazon Connect Administrators Guide* .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description. Supports variable injection. For more information, see `JSONPath reference <https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html>`_ in the *Amazon Connect Administrators Guide* .\n')
    references: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_ReferencePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about the reference when the ``referenceType`` is ``URL`` . Otherwise, null. ``URL`` is the only accepted type. (Supports variable injection in the ``Value`` field.)\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-rule-taskaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    task_action_property = connect.CfnRule.TaskActionProperty(\n        contact_flow_arn="contactFlowArn",\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        references={\n            "references_key": connect.CfnRule.ReferenceProperty(\n                type="type",\n                value="value"\n            )\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['contact_flow_arn', 'name', 'description', 'references']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnRule.TaskActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnTaskTemplate.ConstraintsProperty
class CfnTaskTemplate_ConstraintsPropertyDef(BaseStruct):
    invisible_fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_InvisibleFieldInfoPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Lists the fields that are invisible to agents.\n')
    read_only_fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_ReadOnlyFieldInfoPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Lists the fields that are read-only to agents, and cannot be edited.\n')
    required_fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_RequiredFieldInfoPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Lists the fields that are required to be filled by agents.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-tasktemplate-constraints.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    constraints_property = connect.CfnTaskTemplate.ConstraintsProperty(\n        invisible_fields=[connect.CfnTaskTemplate.InvisibleFieldInfoProperty(\n            id=connect.CfnTaskTemplate.FieldIdentifierProperty(\n                name="name"\n            )\n        )],\n        read_only_fields=[connect.CfnTaskTemplate.ReadOnlyFieldInfoProperty(\n            id=connect.CfnTaskTemplate.FieldIdentifierProperty(\n                name="name"\n            )\n        )],\n        required_fields=[connect.CfnTaskTemplate.RequiredFieldInfoProperty(\n            id=connect.CfnTaskTemplate.FieldIdentifierProperty(\n                name="name"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['invisible_fields', 'read_only_fields', 'required_fields']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnTaskTemplate.ConstraintsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnTaskTemplate.DefaultFieldValueProperty
class CfnTaskTemplate_DefaultFieldValuePropertyDef(BaseStruct):
    default_value: str = pydantic.Field(..., description='Default value for the field.\n')
    _init_params: typing.ClassVar[list[str]] = ['default_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnTaskTemplate.DefaultFieldValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnTaskTemplate.FieldIdentifierProperty
class CfnTaskTemplate_FieldIdentifierPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the task template field.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-tasktemplate-fieldidentifier.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    field_identifier_property = connect.CfnTaskTemplate.FieldIdentifierProperty(\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnTaskTemplate.FieldIdentifierProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnTaskTemplate.FieldProperty
class CfnTaskTemplate_FieldPropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='Indicates the type of field. Following are the valid field types: ``NAME`` ``DESCRIPTION`` | ``SCHEDULED_TIME`` | ``QUICK_CONNECT`` | ``URL`` | ``NUMBER`` | ``TEXT`` | ``TEXT_AREA`` | ``DATE_TIME`` | ``BOOLEAN`` | ``SINGLE_SELECT`` | ``EMAIL``\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the field.\n')
    single_select_options: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of options for a single select field.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-tasktemplate-field.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    field_property = connect.CfnTaskTemplate.FieldProperty(\n        id=connect.CfnTaskTemplate.FieldIdentifierProperty(\n            name="name"\n        ),\n        type="type",\n\n        # the properties below are optional\n        description="description",\n        single_select_options=["singleSelectOptions"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'description', 'single_select_options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnTaskTemplate.FieldProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnTaskTemplate.InvisibleFieldInfoProperty
class CfnTaskTemplate_InvisibleFieldInfoPropertyDef(BaseStruct):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnTaskTemplate.InvisibleFieldInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnTaskTemplate.ReadOnlyFieldInfoProperty
class CfnTaskTemplate_ReadOnlyFieldInfoPropertyDef(BaseStruct):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnTaskTemplate.ReadOnlyFieldInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnTaskTemplate.RequiredFieldInfoProperty
class CfnTaskTemplate_RequiredFieldInfoPropertyDef(BaseStruct):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnTaskTemplate.RequiredFieldInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnUser.UserIdentityInfoProperty
class CfnUser_UserIdentityInfoPropertyDef(BaseStruct):
    email: typing.Optional[str] = pydantic.Field(None, description='The email address. If you are using SAML for identity management and include this parameter, an error is returned.\n')
    first_name: typing.Optional[str] = pydantic.Field(None, description='The first name. This is required if you are using Amazon Connect or SAML for identity management.\n')
    last_name: typing.Optional[str] = pydantic.Field(None, description='The last name. This is required if you are using Amazon Connect or SAML for identity management.\n')
    mobile: typing.Optional[str] = pydantic.Field(None, description="The user's mobile number.\n")
    secondary_email: typing.Optional[str] = pydantic.Field(None, description='The user\'s secondary email address. If you provide a secondary email, the user receives email notifications -- other than password reset notifications -- to this email address instead of to their primary email address. *Pattern* : ``(?=^.{0,265}$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63}``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-user-useridentityinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    user_identity_info_property = connect.CfnUser.UserIdentityInfoProperty(\n        email="email",\n        first_name="firstName",\n        last_name="lastName",\n        mobile="mobile",\n        secondary_email="secondaryEmail"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email', 'first_name', 'last_name', 'mobile', 'secondary_email']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnUser.UserIdentityInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnUser.UserPhoneConfigProperty
class CfnUser_UserPhoneConfigPropertyDef(BaseStruct):
    phone_type: str = pydantic.Field(..., description='The phone type.\n')
    after_contact_work_time_limit: typing.Union[int, float, None] = pydantic.Field(None, description='The After Call Work (ACW) timeout setting, in seconds. .. epigraph:: When returned by a ``SearchUsers`` call, ``AfterContactWorkTimeLimit`` is returned in milliseconds.\n')
    auto_accept: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='The Auto accept setting.\n')
    desk_phone_number: typing.Optional[str] = pydantic.Field(None, description='The phone number for the user\'s desk phone.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-connect-user-userphoneconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    user_phone_config_property = connect.CfnUser.UserPhoneConfigProperty(\n        phone_type="phoneType",\n\n        # the properties below are optional\n        after_contact_work_time_limit=123,\n        auto_accept=False,\n        desk_phone_number="deskPhoneNumber"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['phone_type', 'after_contact_work_time_limit', 'auto_accept', 'desk_phone_number']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnUser.UserPhoneConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnApprovedOrigin
class CfnApprovedOriginDef(BaseCfnResource):
    instance_id: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance. *Minimum* : ``1`` *Maximum* : ``100``\n')
    origin: str = pydantic.Field(..., description='Domain name to be added to the allow-list of the instance. *Maximum* : ``267``')
    _init_params: typing.ClassVar[list[str]] = ['instance_id', 'origin']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnApprovedOrigin'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnApprovedOriginDefConfig] = pydantic.Field(None)


class CfnApprovedOriginDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnApprovedOriginDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnApprovedOriginDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnApprovedOriginDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnApprovedOriginDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnApprovedOriginDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnApprovedOriginDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnApprovedOriginDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnApprovedOriginDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnApprovedOriginDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnApprovedOriginDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnApprovedOriginDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnApprovedOriginDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnApprovedOriginDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnApprovedOriginDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApprovedOriginDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApprovedOriginDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApprovedOriginDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApprovedOriginDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApprovedOriginDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApprovedOriginDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApprovedOriginDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApprovedOriginDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApprovedOriginDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApprovedOriginDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnApprovedOriginDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApprovedOriginDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApprovedOriginDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnContactFlow
class CfnContactFlowDef(BaseCfnResource):
    content: str = pydantic.Field(..., description='The content of the flow. For more information, see `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`_ in the *Amazon Connect Administrator Guide* .\n')
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Connect instance.\n')
    name: str = pydantic.Field(..., description='The name of the flow.\n')
    type: str = pydantic.Field(..., description='The type of the flow. For descriptions of the available types, see `Choose a flow type <https://docs.aws.amazon.com/connect/latest/adminguide/create-contact-flow.html#contact-flow-types>`_ in the *Amazon Connect Administrator Guide* .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the flow.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The state of the flow.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['content', 'instance_arn', 'name', 'type', 'description', 'state', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnContactFlow'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnContactFlowDefConfig] = pydantic.Field(None)


class CfnContactFlowDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnContactFlowDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnContactFlowDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnContactFlowDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnContactFlowDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnContactFlowDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnContactFlowDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnContactFlowDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnContactFlowDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnContactFlowDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnContactFlowDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnContactFlowDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnContactFlowDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnContactFlowDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnContactFlowDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnContactFlowDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactFlowDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnContactFlowDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactFlowDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnContactFlowDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnContactFlowDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnContactFlowDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnContactFlowDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnContactFlowDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactFlowDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnContactFlowDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnContactFlowDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactFlowDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnContactFlowModule
class CfnContactFlowModuleDef(BaseCfnResource):
    content: str = pydantic.Field(..., description='The content of the flow module.\n')
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Connect instance.\n')
    name: str = pydantic.Field(..., description='The name of the flow module.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the flow module.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The state of the flow module.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['content', 'instance_arn', 'name', 'description', 'state', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnContactFlowModule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnContactFlowModuleDefConfig] = pydantic.Field(None)


class CfnContactFlowModuleDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnContactFlowModuleDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnContactFlowModuleDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnContactFlowModuleDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnContactFlowModuleDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnContactFlowModuleDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnContactFlowModuleDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnContactFlowModuleDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnContactFlowModuleDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnContactFlowModuleDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnContactFlowModuleDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnContactFlowModuleDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnContactFlowModuleDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnContactFlowModuleDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnContactFlowModuleDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnContactFlowModuleDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactFlowModuleDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnContactFlowModuleDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactFlowModuleDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnContactFlowModuleDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnContactFlowModuleDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnContactFlowModuleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnContactFlowModuleDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnContactFlowModuleDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnContactFlowModuleDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnContactFlowModuleDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnContactFlowModuleDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnContactFlowModuleDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnEvaluationForm
class CfnEvaluationFormDef(BaseCfnResource):
    instance_arn: str = pydantic.Field(..., description='The identifier of the Amazon Connect instance.\n')
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormBaseItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Items that are part of the evaluation form. The total number of sections and questions must not exceed 100 each. Questions must be contained in a section. *Minimum size* : 1 *Maximum size* : 100\n')
    status: str = pydantic.Field(..., description='The status of the evaluation form. *Allowed values* : ``DRAFT`` | ``ACTIVE``\n')
    title: str = pydantic.Field(..., description='A title of the evaluation form.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the evaluation form. *Length Constraints* : Minimum length of 0. Maximum length of 1024.\n')
    scoring_strategy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_ScoringStrategyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A scoring strategy of the evaluation form.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'items', 'status', 'title', 'description', 'scoring_strategy', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['EvaluationFormBaseItemProperty', 'EvaluationFormItemProperty', 'EvaluationFormNumericQuestionAutomationProperty', 'EvaluationFormNumericQuestionOptionProperty', 'EvaluationFormNumericQuestionPropertiesProperty', 'EvaluationFormQuestionProperty', 'EvaluationFormQuestionTypePropertiesProperty', 'EvaluationFormSectionProperty', 'EvaluationFormSingleSelectQuestionAutomationOptionProperty', 'EvaluationFormSingleSelectQuestionAutomationProperty', 'EvaluationFormSingleSelectQuestionOptionProperty', 'EvaluationFormSingleSelectQuestionPropertiesProperty', 'NumericQuestionPropertyValueAutomationProperty', 'ScoringStrategyProperty', 'SingleSelectQuestionRuleCategoryAutomationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationForm'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnEvaluationFormDefConfig] = pydantic.Field(None)


class CfnEvaluationFormDefConfig(pydantic.BaseModel):
    EvaluationFormBaseItemProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformbaseitempropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormItemProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformitempropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormNumericQuestionAutomationProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformnumericquestionautomationpropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormNumericQuestionOptionProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformnumericquestionoptionpropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormNumericQuestionPropertiesProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformnumericquestionpropertiespropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormQuestionProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformquestionpropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormQuestionTypePropertiesProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformquestiontypepropertiespropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormSectionProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformsectionpropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormSingleSelectQuestionAutomationOptionProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformsingleselectquestionautomationoptionpropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormSingleSelectQuestionAutomationProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformsingleselectquestionautomationpropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormSingleSelectQuestionOptionProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformsingleselectquestionoptionpropertyParams]] = pydantic.Field(None, description='')
    EvaluationFormSingleSelectQuestionPropertiesProperty: typing.Optional[list[CfnEvaluationFormDefEvaluationformsingleselectquestionpropertiespropertyParams]] = pydantic.Field(None, description='')
    NumericQuestionPropertyValueAutomationProperty: typing.Optional[list[CfnEvaluationFormDefNumericquestionpropertyvalueautomationpropertyParams]] = pydantic.Field(None, description='')
    ScoringStrategyProperty: typing.Optional[list[CfnEvaluationFormDefScoringstrategypropertyParams]] = pydantic.Field(None, description='')
    SingleSelectQuestionRuleCategoryAutomationProperty: typing.Optional[list[CfnEvaluationFormDefSingleselectquestionrulecategoryautomationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnEvaluationFormDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnEvaluationFormDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnEvaluationFormDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnEvaluationFormDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnEvaluationFormDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnEvaluationFormDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnEvaluationFormDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnEvaluationFormDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnEvaluationFormDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnEvaluationFormDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnEvaluationFormDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnEvaluationFormDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnEvaluationFormDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnEvaluationFormDefEvaluationformbaseitempropertyParams(pydantic.BaseModel):
    section: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSectionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnEvaluationFormDefEvaluationformitempropertyParams(pydantic.BaseModel):
    question: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormQuestionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    section: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnEvaluationFormDefEvaluationformnumericquestionautomationpropertyParams(pydantic.BaseModel):
    property_value: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_NumericQuestionPropertyValueAutomationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnEvaluationFormDefEvaluationformnumericquestionoptionpropertyParams(pydantic.BaseModel):
    max_value: typing.Union[int, float] = pydantic.Field(..., description='')
    min_value: typing.Union[int, float] = pydantic.Field(..., description='')
    automatic_fail: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    score: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEvaluationFormDefEvaluationformnumericquestionpropertiespropertyParams(pydantic.BaseModel):
    max_value: typing.Union[int, float] = pydantic.Field(..., description='')
    min_value: typing.Union[int, float] = pydantic.Field(..., description='')
    automation: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormNumericQuestionAutomationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormNumericQuestionOptionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnEvaluationFormDefEvaluationformquestionpropertyParams(pydantic.BaseModel):
    question_type: str = pydantic.Field(..., description='')
    ref_id: str = pydantic.Field(..., description='')
    title: str = pydantic.Field(..., description='')
    instructions: typing.Optional[str] = pydantic.Field(None, description='')
    not_applicable_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    question_type_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormQuestionTypePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEvaluationFormDefEvaluationformquestiontypepropertiespropertyParams(pydantic.BaseModel):
    numeric: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormNumericQuestionPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    single_select: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSingleSelectQuestionPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnEvaluationFormDefEvaluationformsectionpropertyParams(pydantic.BaseModel):
    ref_id: str = pydantic.Field(..., description='')
    title: str = pydantic.Field(..., description='')
    instructions: typing.Optional[str] = pydantic.Field(None, description='')
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEvaluationFormDefEvaluationformsingleselectquestionautomationoptionpropertyParams(pydantic.BaseModel):
    rule_category: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_SingleSelectQuestionRuleCategoryAutomationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnEvaluationFormDefEvaluationformsingleselectquestionautomationpropertyParams(pydantic.BaseModel):
    options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationOptionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    default_option_ref_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEvaluationFormDefEvaluationformsingleselectquestionoptionpropertyParams(pydantic.BaseModel):
    ref_id: str = pydantic.Field(..., description='')
    text: str = pydantic.Field(..., description='')
    automatic_fail: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    score: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEvaluationFormDefEvaluationformsingleselectquestionpropertiespropertyParams(pydantic.BaseModel):
    options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSingleSelectQuestionOptionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    automation: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    display_as: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEvaluationFormDefNumericquestionpropertyvalueautomationpropertyParams(pydantic.BaseModel):
    label: str = pydantic.Field(..., description='')
    ...

class CfnEvaluationFormDefScoringstrategypropertyParams(pydantic.BaseModel):
    mode: str = pydantic.Field(..., description='')
    status: str = pydantic.Field(..., description='')
    ...

class CfnEvaluationFormDefSingleselectquestionrulecategoryautomationpropertyParams(pydantic.BaseModel):
    category: str = pydantic.Field(..., description='')
    condition: str = pydantic.Field(..., description='')
    option_ref_id: str = pydantic.Field(..., description='')
    ...

class CfnEvaluationFormDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEvaluationFormDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEvaluationFormDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEvaluationFormDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEvaluationFormDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEvaluationFormDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEvaluationFormDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEvaluationFormDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEvaluationFormDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEvaluationFormDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEvaluationFormDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnEvaluationFormDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEvaluationFormDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEvaluationFormDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnHoursOfOperation
class CfnHoursOfOperationDef(BaseCfnResource):
    config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnHoursOfOperation_HoursOfOperationConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Configuration information for the hours of operation.\n')
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) for the instance.\n')
    name: str = pydantic.Field(..., description='The name for the hours of operation.\n')
    time_zone: str = pydantic.Field(..., description='The time zone for the hours of operation.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description for the hours of operation.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.')
    _init_params: typing.ClassVar[list[str]] = ['config', 'instance_arn', 'name', 'time_zone', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['HoursOfOperationConfigProperty', 'HoursOfOperationTimeSliceProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnHoursOfOperation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnHoursOfOperationDefConfig] = pydantic.Field(None)


class CfnHoursOfOperationDefConfig(pydantic.BaseModel):
    HoursOfOperationConfigProperty: typing.Optional[list[CfnHoursOfOperationDefHoursofoperationconfigpropertyParams]] = pydantic.Field(None, description='')
    HoursOfOperationTimeSliceProperty: typing.Optional[list[CfnHoursOfOperationDefHoursofoperationtimeslicepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnHoursOfOperationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnHoursOfOperationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnHoursOfOperationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnHoursOfOperationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnHoursOfOperationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnHoursOfOperationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnHoursOfOperationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnHoursOfOperationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnHoursOfOperationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnHoursOfOperationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnHoursOfOperationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnHoursOfOperationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnHoursOfOperationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnHoursOfOperationDefHoursofoperationconfigpropertyParams(pydantic.BaseModel):
    day: str = pydantic.Field(..., description='')
    end_time: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    start_time: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnHoursOfOperationDefHoursofoperationtimeslicepropertyParams(pydantic.BaseModel):
    hours: typing.Union[int, float] = pydantic.Field(..., description='')
    minutes: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnHoursOfOperationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnHoursOfOperationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHoursOfOperationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnHoursOfOperationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHoursOfOperationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnHoursOfOperationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnHoursOfOperationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnHoursOfOperationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnHoursOfOperationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnHoursOfOperationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHoursOfOperationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnHoursOfOperationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnHoursOfOperationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHoursOfOperationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnInstance
class CfnInstanceDef(BaseCfnResource):
    attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstance_AttributesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A toggle for an individual feature at the instance level.\n')
    identity_management_type: str = pydantic.Field(..., description='The identity management type.\n')
    directory_id: typing.Optional[str] = pydantic.Field(None, description='The identifier for the directory.\n')
    instance_alias: typing.Optional[str] = pydantic.Field(None, description='The alias of instance. ``InstanceAlias`` is only required when ``IdentityManagementType`` is ``CONNECT_MANAGED`` or ``SAML`` . ``InstanceAlias`` is not required when ``IdentityManagementType`` is ``EXISTING_DIRECTORY`` .')
    _init_params: typing.ClassVar[list[str]] = ['attributes', 'identity_management_type', 'directory_id', 'instance_alias']
    _method_names: typing.ClassVar[list[str]] = ['AttributesProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstance'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnInstanceDefConfig] = pydantic.Field(None)


class CfnInstanceDefConfig(pydantic.BaseModel):
    AttributesProperty: typing.Optional[list[CfnInstanceDefAttributespropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnInstanceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnInstanceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnInstanceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnInstanceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnInstanceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnInstanceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnInstanceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnInstanceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnInstanceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnInstanceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnInstanceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnInstanceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnInstanceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnInstanceDefAttributespropertyParams(pydantic.BaseModel):
    inbound_calls: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    outbound_calls: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    auto_resolve_best_voices: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    contactflow_logs: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    contact_lens: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    early_media: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    use_custom_tts_voices: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnInstanceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnInstanceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInstanceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnInstanceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInstanceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnInstanceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnInstanceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnInstanceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnInstanceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnInstanceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInstanceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnInstanceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnInstanceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInstanceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnInstanceStorageConfig
class CfnInstanceStorageConfigDef(BaseCfnResource):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance.\n')
    resource_type: str = pydantic.Field(..., description='A valid resource type. Following are the valid resource types: ``CHAT_TRANSCRIPTS`` | ``CALL_RECORDINGS`` | ``SCHEDULED_REPORTS`` | ``MEDIA_STREAMS`` | ``CONTACT_TRACE_RECORDS`` | ``AGENT_EVENTS``\n')
    storage_type: str = pydantic.Field(..., description='A valid storage type.\n')
    kinesis_firehose_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_KinesisFirehoseConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the Kinesis Firehose delivery stream.\n')
    kinesis_stream_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_KinesisStreamConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the Kinesis data stream.\n')
    kinesis_video_stream_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_KinesisVideoStreamConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the Kinesis video stream.\n')
    s3_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_S3ConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The S3 bucket configuration.')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'resource_type', 'storage_type', 'kinesis_firehose_config', 'kinesis_stream_config', 'kinesis_video_stream_config', 's3_config']
    _method_names: typing.ClassVar[list[str]] = ['EncryptionConfigProperty', 'KinesisFirehoseConfigProperty', 'KinesisStreamConfigProperty', 'KinesisVideoStreamConfigProperty', 'S3ConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstanceStorageConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnInstanceStorageConfigDefConfig] = pydantic.Field(None)


class CfnInstanceStorageConfigDefConfig(pydantic.BaseModel):
    EncryptionConfigProperty: typing.Optional[list[CfnInstanceStorageConfigDefEncryptionconfigpropertyParams]] = pydantic.Field(None, description='')
    KinesisFirehoseConfigProperty: typing.Optional[list[CfnInstanceStorageConfigDefKinesisfirehoseconfigpropertyParams]] = pydantic.Field(None, description='')
    KinesisStreamConfigProperty: typing.Optional[list[CfnInstanceStorageConfigDefKinesisstreamconfigpropertyParams]] = pydantic.Field(None, description='')
    KinesisVideoStreamConfigProperty: typing.Optional[list[CfnInstanceStorageConfigDefKinesisvideostreamconfigpropertyParams]] = pydantic.Field(None, description='')
    S3ConfigProperty: typing.Optional[list[CfnInstanceStorageConfigDefS3ConfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnInstanceStorageConfigDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnInstanceStorageConfigDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnInstanceStorageConfigDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnInstanceStorageConfigDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnInstanceStorageConfigDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnInstanceStorageConfigDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnInstanceStorageConfigDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnInstanceStorageConfigDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnInstanceStorageConfigDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnInstanceStorageConfigDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnInstanceStorageConfigDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnInstanceStorageConfigDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnInstanceStorageConfigDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnInstanceStorageConfigDefEncryptionconfigpropertyParams(pydantic.BaseModel):
    encryption_type: str = pydantic.Field(..., description='')
    key_id: str = pydantic.Field(..., description='')
    ...

class CfnInstanceStorageConfigDefKinesisfirehoseconfigpropertyParams(pydantic.BaseModel):
    firehose_arn: str = pydantic.Field(..., description='')
    ...

class CfnInstanceStorageConfigDefKinesisstreamconfigpropertyParams(pydantic.BaseModel):
    stream_arn: str = pydantic.Field(..., description='')
    ...

class CfnInstanceStorageConfigDefKinesisvideostreamconfigpropertyParams(pydantic.BaseModel):
    prefix: str = pydantic.Field(..., description='')
    retention_period_hours: typing.Union[int, float] = pydantic.Field(..., description='')
    encryption_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_EncryptionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnInstanceStorageConfigDefS3ConfigpropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    bucket_prefix: str = pydantic.Field(..., description='')
    encryption_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_EncryptionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnInstanceStorageConfigDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnInstanceStorageConfigDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInstanceStorageConfigDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnInstanceStorageConfigDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInstanceStorageConfigDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnInstanceStorageConfigDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnInstanceStorageConfigDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnInstanceStorageConfigDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnInstanceStorageConfigDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnInstanceStorageConfigDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInstanceStorageConfigDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnInstanceStorageConfigDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnInstanceStorageConfigDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInstanceStorageConfigDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnIntegrationAssociation
class CfnIntegrationAssociationDef(BaseCfnResource):
    instance_id: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance. *Minimum* : ``1`` *Maximum* : ``100``\n')
    integration_arn: str = pydantic.Field(..., description='ARN of the integration being associated with the instance. *Minimum* : ``1`` *Maximum* : ``140``\n')
    integration_type: str = pydantic.Field(..., description='Specifies the integration type to be associated with the instance. *Allowed Values* : ``LEX_BOT`` | ``LAMBDA_FUNCTION``')
    _init_params: typing.ClassVar[list[str]] = ['instance_id', 'integration_arn', 'integration_type']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnIntegrationAssociation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnIntegrationAssociationDefConfig] = pydantic.Field(None)


class CfnIntegrationAssociationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnIntegrationAssociationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnIntegrationAssociationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnIntegrationAssociationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnIntegrationAssociationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnIntegrationAssociationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnIntegrationAssociationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnIntegrationAssociationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnIntegrationAssociationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnIntegrationAssociationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnIntegrationAssociationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnIntegrationAssociationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnIntegrationAssociationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnIntegrationAssociationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnIntegrationAssociationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnIntegrationAssociationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIntegrationAssociationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnIntegrationAssociationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIntegrationAssociationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnIntegrationAssociationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnIntegrationAssociationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnIntegrationAssociationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnIntegrationAssociationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnIntegrationAssociationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIntegrationAssociationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnIntegrationAssociationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnIntegrationAssociationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIntegrationAssociationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnPhoneNumber
class CfnPhoneNumberDef(BaseCfnResource):
    country_code: str = pydantic.Field(..., description='The ISO country code.\n')
    target_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution group that phone numbers are claimed to.\n')
    type: str = pydantic.Field(..., description='The type of phone number.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the phone number.\n')
    prefix: typing.Optional[str] = pydantic.Field(None, description='The prefix of the phone number. If provided, it must contain ``+`` as part of the country code. *Pattern* : ``^\\\\+[0-9]{1,15}``\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.')
    _init_params: typing.ClassVar[list[str]] = ['country_code', 'target_arn', 'type', 'description', 'prefix', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnPhoneNumber'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPhoneNumberDefConfig] = pydantic.Field(None)


class CfnPhoneNumberDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnPhoneNumberDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPhoneNumberDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPhoneNumberDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPhoneNumberDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPhoneNumberDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPhoneNumberDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPhoneNumberDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPhoneNumberDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPhoneNumberDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPhoneNumberDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPhoneNumberDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPhoneNumberDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPhoneNumberDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPhoneNumberDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPhoneNumberDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPhoneNumberDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPhoneNumberDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPhoneNumberDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPhoneNumberDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPhoneNumberDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPhoneNumberDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPhoneNumberDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPhoneNumberDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPhoneNumberDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnPhoneNumberDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPhoneNumberDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPhoneNumberDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnPrompt
class CfnPromptDef(BaseCfnResource):
    instance_arn: str = pydantic.Field(..., description='The identifier of the Amazon Connect instance.\n')
    name: str = pydantic.Field(..., description='The name of the prompt.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the prompt.\n')
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='The URI for the S3 bucket where the prompt is stored.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'name', 'description', 's3_uri', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnPrompt'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPromptDefConfig] = pydantic.Field(None)


class CfnPromptDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnPromptDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPromptDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPromptDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPromptDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPromptDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPromptDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPromptDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPromptDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPromptDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPromptDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPromptDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPromptDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPromptDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPromptDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPromptDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPromptDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPromptDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPromptDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPromptDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPromptDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPromptDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPromptDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPromptDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPromptDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnPromptDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPromptDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPromptDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnQuickConnect
class CfnQuickConnectDef(BaseCfnResource):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance.\n')
    name: str = pydantic.Field(..., description='The name of the quick connect.\n')
    quick_connect_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnQuickConnect_QuickConnectConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains information about the quick connect.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the quick connect.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'name', 'quick_connect_config', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['PhoneNumberQuickConnectConfigProperty', 'QueueQuickConnectConfigProperty', 'QuickConnectConfigProperty', 'UserQuickConnectConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnQuickConnect'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnQuickConnectDefConfig] = pydantic.Field(None)


class CfnQuickConnectDefConfig(pydantic.BaseModel):
    PhoneNumberQuickConnectConfigProperty: typing.Optional[list[CfnQuickConnectDefPhonenumberquickconnectconfigpropertyParams]] = pydantic.Field(None, description='')
    QueueQuickConnectConfigProperty: typing.Optional[list[CfnQuickConnectDefQueuequickconnectconfigpropertyParams]] = pydantic.Field(None, description='')
    QuickConnectConfigProperty: typing.Optional[list[CfnQuickConnectDefQuickconnectconfigpropertyParams]] = pydantic.Field(None, description='')
    UserQuickConnectConfigProperty: typing.Optional[list[CfnQuickConnectDefUserquickconnectconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnQuickConnectDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnQuickConnectDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnQuickConnectDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnQuickConnectDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnQuickConnectDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnQuickConnectDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnQuickConnectDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnQuickConnectDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnQuickConnectDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnQuickConnectDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnQuickConnectDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnQuickConnectDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnQuickConnectDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnQuickConnectDefPhonenumberquickconnectconfigpropertyParams(pydantic.BaseModel):
    phone_number: str = pydantic.Field(..., description='')
    ...

class CfnQuickConnectDefQueuequickconnectconfigpropertyParams(pydantic.BaseModel):
    contact_flow_arn: str = pydantic.Field(..., description='')
    queue_arn: str = pydantic.Field(..., description='')
    ...

class CfnQuickConnectDefQuickconnectconfigpropertyParams(pydantic.BaseModel):
    quick_connect_type: str = pydantic.Field(..., description='')
    phone_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnQuickConnect_PhoneNumberQuickConnectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    queue_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnQuickConnect_QueueQuickConnectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    user_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnQuickConnect_UserQuickConnectConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnQuickConnectDefUserquickconnectconfigpropertyParams(pydantic.BaseModel):
    contact_flow_arn: str = pydantic.Field(..., description='')
    user_arn: str = pydantic.Field(..., description='')
    ...

class CfnQuickConnectDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnQuickConnectDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnQuickConnectDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnQuickConnectDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnQuickConnectDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnQuickConnectDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnQuickConnectDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnQuickConnectDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnQuickConnectDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnQuickConnectDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnQuickConnectDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnQuickConnectDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnQuickConnectDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnQuickConnectDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnRule
class CfnRuleDef(BaseCfnResource):
    actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_ActionsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A list of actions to be run when the rule is triggered.\n')
    function: str = pydantic.Field(..., description='The conditions of the rule.\n')
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance.\n')
    name: str = pydantic.Field(..., description='The name of the rule.\n')
    publish_status: str = pydantic.Field(..., description='The publish status of the rule. *Allowed values* : ``DRAFT`` | ``PUBLISHED``\n')
    trigger_event_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_RuleTriggerEventSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The event source to trigger the rule.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'function', 'instance_arn', 'name', 'publish_status', 'trigger_event_source', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ActionsProperty', 'EventBridgeActionProperty', 'NotificationRecipientTypeProperty', 'ReferenceProperty', 'RuleTriggerEventSourceProperty', 'SendNotificationActionProperty', 'TaskActionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnRule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnRuleDefConfig] = pydantic.Field(None)


class CfnRuleDefConfig(pydantic.BaseModel):
    ActionsProperty: typing.Optional[list[CfnRuleDefActionspropertyParams]] = pydantic.Field(None, description='')
    EventBridgeActionProperty: typing.Optional[list[CfnRuleDefEventbridgeactionpropertyParams]] = pydantic.Field(None, description='')
    NotificationRecipientTypeProperty: typing.Optional[list[CfnRuleDefNotificationrecipienttypepropertyParams]] = pydantic.Field(None, description='')
    ReferenceProperty: typing.Optional[list[CfnRuleDefReferencepropertyParams]] = pydantic.Field(None, description='')
    RuleTriggerEventSourceProperty: typing.Optional[list[CfnRuleDefRuletriggereventsourcepropertyParams]] = pydantic.Field(None, description='')
    SendNotificationActionProperty: typing.Optional[list[CfnRuleDefSendnotificationactionpropertyParams]] = pydantic.Field(None, description='')
    TaskActionProperty: typing.Optional[list[CfnRuleDefTaskactionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnRuleDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnRuleDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnRuleDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnRuleDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnRuleDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnRuleDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnRuleDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnRuleDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnRuleDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnRuleDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnRuleDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnRuleDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnRuleDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnRuleDefActionspropertyParams(pydantic.BaseModel):
    assign_contact_category_actions: typing.Union[typing.Sequence[typing.Any], typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    event_bridge_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_EventBridgeActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    send_notification_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_SendNotificationActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    task_actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_TaskActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnRuleDefEventbridgeactionpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnRuleDefNotificationrecipienttypepropertyParams(pydantic.BaseModel):
    user_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    user_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ...

class CfnRuleDefReferencepropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnRuleDefRuletriggereventsourcepropertyParams(pydantic.BaseModel):
    event_source_name: str = pydantic.Field(..., description='')
    integration_association_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRuleDefSendnotificationactionpropertyParams(pydantic.BaseModel):
    content: str = pydantic.Field(..., description='')
    content_type: str = pydantic.Field(..., description='')
    delivery_method: str = pydantic.Field(..., description='')
    recipient: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_NotificationRecipientTypePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    subject: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRuleDefTaskactionpropertyParams(pydantic.BaseModel):
    contact_flow_arn: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    references: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_ReferencePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnRuleDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRuleDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRuleDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRuleDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRuleDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRuleDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRuleDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRuleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRuleDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRuleDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRuleDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnRuleDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRuleDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRuleDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnSecurityKey
class CfnSecurityKeyDef(BaseCfnResource):
    instance_id: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance. *Minimum* : ``1`` *Maximum* : ``100``\n')
    key: str = pydantic.Field(..., description='A valid security key in PEM format. *Minimum* : ``1`` *Maximum* : ``1024``')
    _init_params: typing.ClassVar[list[str]] = ['instance_id', 'key']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnSecurityKey'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnSecurityKeyDefConfig] = pydantic.Field(None)


class CfnSecurityKeyDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnSecurityKeyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnSecurityKeyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnSecurityKeyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnSecurityKeyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnSecurityKeyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnSecurityKeyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnSecurityKeyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnSecurityKeyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnSecurityKeyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnSecurityKeyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnSecurityKeyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnSecurityKeyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnSecurityKeyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnSecurityKeyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSecurityKeyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSecurityKeyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSecurityKeyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSecurityKeyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSecurityKeyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSecurityKeyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSecurityKeyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSecurityKeyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSecurityKeyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSecurityKeyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnSecurityKeyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSecurityKeyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSecurityKeyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnTaskTemplate
class CfnTaskTemplateDef(BaseCfnResource):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Connect instance.\n')
    client_token: typing.Optional[str] = pydantic.Field(None, description='A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.\n')
    constraints: typing.Any = pydantic.Field(None, description='Constraints that are applicable to the fields listed. The values can be represented in either JSON or YAML format. For an example of the JSON configuration, see *Examples* at the bottom of this page.\n')
    contact_flow_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the flow that runs by default when a task is created by referencing this template. ``ContactFlowArn`` is not required when there is a field with ``fieldType`` = ``QUICK_CONNECT`` .\n')
    defaults: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_DefaultFieldValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The default values for fields when a task is created by referencing this template.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the task template.\n')
    fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_FieldPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Fields that are part of the template. A template requires at least one field that has type ``Name`` .\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the task template.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='The status of the task template.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource.')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'client_token', 'constraints', 'contact_flow_arn', 'defaults', 'description', 'fields', 'name', 'status', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ConstraintsProperty', 'DefaultFieldValueProperty', 'FieldIdentifierProperty', 'FieldProperty', 'InvisibleFieldInfoProperty', 'ReadOnlyFieldInfoProperty', 'RequiredFieldInfoProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnTaskTemplate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnTaskTemplateDefConfig] = pydantic.Field(None)


class CfnTaskTemplateDefConfig(pydantic.BaseModel):
    ConstraintsProperty: typing.Optional[list[CfnTaskTemplateDefConstraintspropertyParams]] = pydantic.Field(None, description='')
    DefaultFieldValueProperty: typing.Optional[list[CfnTaskTemplateDefDefaultfieldvaluepropertyParams]] = pydantic.Field(None, description='')
    FieldIdentifierProperty: typing.Optional[list[CfnTaskTemplateDefFieldidentifierpropertyParams]] = pydantic.Field(None, description='')
    FieldProperty: typing.Optional[list[CfnTaskTemplateDefFieldpropertyParams]] = pydantic.Field(None, description='')
    InvisibleFieldInfoProperty: typing.Optional[list[CfnTaskTemplateDefInvisiblefieldinfopropertyParams]] = pydantic.Field(None, description='')
    ReadOnlyFieldInfoProperty: typing.Optional[list[CfnTaskTemplateDefReadonlyfieldinfopropertyParams]] = pydantic.Field(None, description='')
    RequiredFieldInfoProperty: typing.Optional[list[CfnTaskTemplateDefRequiredfieldinfopropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnTaskTemplateDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnTaskTemplateDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnTaskTemplateDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnTaskTemplateDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnTaskTemplateDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnTaskTemplateDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnTaskTemplateDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnTaskTemplateDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnTaskTemplateDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnTaskTemplateDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnTaskTemplateDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnTaskTemplateDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnTaskTemplateDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnTaskTemplateDefConstraintspropertyParams(pydantic.BaseModel):
    invisible_fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_InvisibleFieldInfoPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    read_only_fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_ReadOnlyFieldInfoPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    required_fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_RequiredFieldInfoPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnTaskTemplateDefDefaultfieldvaluepropertyParams(pydantic.BaseModel):
    default_value: str = pydantic.Field(..., description='')
    id: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_FieldIdentifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnTaskTemplateDefFieldidentifierpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    ...

class CfnTaskTemplateDefFieldpropertyParams(pydantic.BaseModel):
    id: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_FieldIdentifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    single_select_options: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnTaskTemplateDefInvisiblefieldinfopropertyParams(pydantic.BaseModel):
    id: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_FieldIdentifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnTaskTemplateDefReadonlyfieldinfopropertyParams(pydantic.BaseModel):
    id: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_FieldIdentifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnTaskTemplateDefRequiredfieldinfopropertyParams(pydantic.BaseModel):
    id: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_FieldIdentifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnTaskTemplateDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnTaskTemplateDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTaskTemplateDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnTaskTemplateDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTaskTemplateDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnTaskTemplateDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnTaskTemplateDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnTaskTemplateDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnTaskTemplateDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnTaskTemplateDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTaskTemplateDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnTaskTemplateDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnTaskTemplateDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTaskTemplateDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnUser
class CfnUserDef(BaseCfnResource):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance.\n')
    phone_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnUser_UserPhoneConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Information about the phone configuration for the user.\n')
    routing_profile_arn: str = pydantic.Field(..., description="The Amazon Resource Name (ARN) of the user's routing profile.\n")
    security_profile_arns: typing.Sequence[str] = pydantic.Field(..., description="The Amazon Resource Name (ARN) of the user's security profile.\n")
    username: str = pydantic.Field(..., description='The user name assigned to the user account.\n')
    directory_user_id: typing.Optional[str] = pydantic.Field(None, description='The identifier of the user account in the directory used for identity management.\n')
    hierarchy_group_arn: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) of the user's hierarchy group.\n")
    identity_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnUser_UserIdentityInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the user identity.\n')
    password: typing.Optional[str] = pydantic.Field(None, description="The user's password.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags.')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'phone_config', 'routing_profile_arn', 'security_profile_arns', 'username', 'directory_user_id', 'hierarchy_group_arn', 'identity_info', 'password', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['UserIdentityInfoProperty', 'UserPhoneConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnUser'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnUserDefConfig] = pydantic.Field(None)


class CfnUserDefConfig(pydantic.BaseModel):
    UserIdentityInfoProperty: typing.Optional[list[CfnUserDefUseridentityinfopropertyParams]] = pydantic.Field(None, description='')
    UserPhoneConfigProperty: typing.Optional[list[CfnUserDefUserphoneconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnUserDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnUserDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnUserDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnUserDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnUserDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnUserDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnUserDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnUserDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnUserDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnUserDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnUserDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnUserDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnUserDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnUserDefUseridentityinfopropertyParams(pydantic.BaseModel):
    email: typing.Optional[str] = pydantic.Field(None, description='')
    first_name: typing.Optional[str] = pydantic.Field(None, description='')
    last_name: typing.Optional[str] = pydantic.Field(None, description='')
    mobile: typing.Optional[str] = pydantic.Field(None, description='')
    secondary_email: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserDefUserphoneconfigpropertyParams(pydantic.BaseModel):
    phone_type: str = pydantic.Field(..., description='')
    after_contact_work_time_limit: typing.Union[int, float, None] = pydantic.Field(None, description='')
    auto_accept: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    desk_phone_number: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnUserDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnUserHierarchyGroup
class CfnUserHierarchyGroupDef(BaseCfnResource):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the user hierarchy group.\n')
    name: str = pydantic.Field(..., description='The name of the user hierarchy group.\n')
    parent_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the parent group.')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'name', 'parent_group_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnUserHierarchyGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnUserHierarchyGroupDefConfig] = pydantic.Field(None)


class CfnUserHierarchyGroupDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnUserHierarchyGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnUserHierarchyGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnUserHierarchyGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnUserHierarchyGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnUserHierarchyGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnUserHierarchyGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnUserHierarchyGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnUserHierarchyGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnUserHierarchyGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnUserHierarchyGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnUserHierarchyGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnUserHierarchyGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnUserHierarchyGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserHierarchyGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserHierarchyGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserHierarchyGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserHierarchyGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserHierarchyGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserHierarchyGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserHierarchyGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserHierarchyGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserHierarchyGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserHierarchyGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserHierarchyGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnUserHierarchyGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserHierarchyGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserHierarchyGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_connect.CfnApprovedOriginProps
class CfnApprovedOriginPropsDef(BaseCfnProperty):
    instance_id: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance. *Minimum* : ``1`` *Maximum* : ``100``\n')
    origin: str = pydantic.Field(..., description='Domain name to be added to the allow-list of the instance. *Maximum* : ``267``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-approvedorigin.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_approved_origin_props = connect.CfnApprovedOriginProps(\n        instance_id="instanceId",\n        origin="origin"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_id', 'origin']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnApprovedOriginProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnContactFlowModuleProps
class CfnContactFlowModulePropsDef(BaseCfnProperty):
    content: str = pydantic.Field(..., description='The content of the flow module.\n')
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Connect instance.\n')
    name: str = pydantic.Field(..., description='The name of the flow module.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the flow module.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The state of the flow module.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-contactflowmodule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_contact_flow_module_props = connect.CfnContactFlowModuleProps(\n        content="content",\n        instance_arn="instanceArn",\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        state="state",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content', 'instance_arn', 'name', 'description', 'state', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnContactFlowModuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnContactFlowProps
class CfnContactFlowPropsDef(BaseCfnProperty):
    content: str = pydantic.Field(..., description='The content of the flow. For more information, see `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`_ in the *Amazon Connect Administrator Guide* .\n')
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Connect instance.\n')
    name: str = pydantic.Field(..., description='The name of the flow.\n')
    type: str = pydantic.Field(..., description='The type of the flow. For descriptions of the available types, see `Choose a flow type <https://docs.aws.amazon.com/connect/latest/adminguide/create-contact-flow.html#contact-flow-types>`_ in the *Amazon Connect Administrator Guide* .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the flow.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The state of the flow.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-contactflow.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_contact_flow_props = connect.CfnContactFlowProps(\n        content="content",\n        instance_arn="instanceArn",\n        name="name",\n        type="type",\n\n        # the properties below are optional\n        description="description",\n        state="state",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content', 'instance_arn', 'name', 'type', 'description', 'state', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnContactFlowProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnEvaluationFormProps
class CfnEvaluationFormPropsDef(BaseCfnProperty):
    instance_arn: str = pydantic.Field(..., description='The identifier of the Amazon Connect instance.\n')
    items: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_EvaluationFormBaseItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Items that are part of the evaluation form. The total number of sections and questions must not exceed 100 each. Questions must be contained in a section. *Minimum size* : 1 *Maximum size* : 100\n')
    status: str = pydantic.Field(..., description='The status of the evaluation form. *Allowed values* : ``DRAFT`` | ``ACTIVE``\n')
    title: str = pydantic.Field(..., description='A title of the evaluation form.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the evaluation form. *Length Constraints* : Minimum length of 0. Maximum length of 1024.\n')
    scoring_strategy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnEvaluationForm_ScoringStrategyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A scoring strategy of the evaluation form.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-evaluationform.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    # evaluation_form_section_property_: connect.CfnEvaluationForm.EvaluationFormSectionProperty\n\n    cfn_evaluation_form_props = connect.CfnEvaluationFormProps(\n        instance_arn="instanceArn",\n        items=[connect.CfnEvaluationForm.EvaluationFormBaseItemProperty(\n            section=connect.CfnEvaluationForm.EvaluationFormSectionProperty(\n                ref_id="refId",\n                title="title",\n\n                # the properties below are optional\n                instructions="instructions",\n                items=[connect.CfnEvaluationForm.EvaluationFormItemProperty(\n                    question=connect.CfnEvaluationForm.EvaluationFormQuestionProperty(\n                        question_type="questionType",\n                        ref_id="refId",\n                        title="title",\n\n                        # the properties below are optional\n                        instructions="instructions",\n                        not_applicable_enabled=False,\n                        question_type_properties=connect.CfnEvaluationForm.EvaluationFormQuestionTypePropertiesProperty(\n                            numeric=connect.CfnEvaluationForm.EvaluationFormNumericQuestionPropertiesProperty(\n                                max_value=123,\n                                min_value=123,\n\n                                # the properties below are optional\n                                automation=connect.CfnEvaluationForm.EvaluationFormNumericQuestionAutomationProperty(\n                                    property_value=connect.CfnEvaluationForm.NumericQuestionPropertyValueAutomationProperty(\n                                        label="label"\n                                    )\n                                ),\n                                options=[connect.CfnEvaluationForm.EvaluationFormNumericQuestionOptionProperty(\n                                    max_value=123,\n                                    min_value=123,\n\n                                    # the properties below are optional\n                                    automatic_fail=False,\n                                    score=123\n                                )]\n                            ),\n                            single_select=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionPropertiesProperty(\n                                options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionOptionProperty(\n                                    ref_id="refId",\n                                    text="text",\n\n                                    # the properties below are optional\n                                    automatic_fail=False,\n                                    score=123\n                                )],\n\n                                # the properties below are optional\n                                automation=connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationProperty(\n                                    options=[connect.CfnEvaluationForm.EvaluationFormSingleSelectQuestionAutomationOptionProperty(\n                                        rule_category=connect.CfnEvaluationForm.SingleSelectQuestionRuleCategoryAutomationProperty(\n                                            category="category",\n                                            condition="condition",\n                                            option_ref_id="optionRefId"\n                                        )\n                                    )],\n\n                                    # the properties below are optional\n                                    default_option_ref_id="defaultOptionRefId"\n                                ),\n                                display_as="displayAs"\n                            )\n                        ),\n                        weight=123\n                    ),\n                    section=evaluation_form_section_property_\n                )],\n                weight=123\n            )\n        )],\n        status="status",\n        title="title",\n\n        # the properties below are optional\n        description="description",\n        scoring_strategy=connect.CfnEvaluationForm.ScoringStrategyProperty(\n            mode="mode",\n            status="status"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'items', 'status', 'title', 'description', 'scoring_strategy', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnEvaluationFormProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnHoursOfOperationProps
class CfnHoursOfOperationPropsDef(BaseCfnProperty):
    config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnHoursOfOperation_HoursOfOperationConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Configuration information for the hours of operation.\n')
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) for the instance.\n')
    name: str = pydantic.Field(..., description='The name for the hours of operation.\n')
    time_zone: str = pydantic.Field(..., description='The time zone for the hours of operation.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description for the hours of operation.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-hoursofoperation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_hours_of_operation_props = connect.CfnHoursOfOperationProps(\n        config=[connect.CfnHoursOfOperation.HoursOfOperationConfigProperty(\n            day="day",\n            end_time=connect.CfnHoursOfOperation.HoursOfOperationTimeSliceProperty(\n                hours=123,\n                minutes=123\n            ),\n            start_time=connect.CfnHoursOfOperation.HoursOfOperationTimeSliceProperty(\n                hours=123,\n                minutes=123\n            )\n        )],\n        instance_arn="instanceArn",\n        name="name",\n        time_zone="timeZone",\n\n        # the properties below are optional\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['config', 'instance_arn', 'name', 'time_zone', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnHoursOfOperationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnInstanceProps
class CfnInstancePropsDef(BaseCfnProperty):
    attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstance_AttributesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A toggle for an individual feature at the instance level.\n')
    identity_management_type: str = pydantic.Field(..., description='The identity management type.\n')
    directory_id: typing.Optional[str] = pydantic.Field(None, description='The identifier for the directory.\n')
    instance_alias: typing.Optional[str] = pydantic.Field(None, description='The alias of instance. ``InstanceAlias`` is only required when ``IdentityManagementType`` is ``CONNECT_MANAGED`` or ``SAML`` . ``InstanceAlias`` is not required when ``IdentityManagementType`` is ``EXISTING_DIRECTORY`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-instance.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_instance_props = connect.CfnInstanceProps(\n        attributes=connect.CfnInstance.AttributesProperty(\n            inbound_calls=False,\n            outbound_calls=False,\n\n            # the properties below are optional\n            auto_resolve_best_voices=False,\n            contactflow_logs=False,\n            contact_lens=False,\n            early_media=False,\n            use_custom_tts_voices=False\n        ),\n        identity_management_type="identityManagementType",\n\n        # the properties below are optional\n        directory_id="directoryId",\n        instance_alias="instanceAlias"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attributes', 'identity_management_type', 'directory_id', 'instance_alias']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstanceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnInstanceStorageConfigProps
class CfnInstanceStorageConfigPropsDef(BaseCfnProperty):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance.\n')
    resource_type: str = pydantic.Field(..., description='A valid resource type. Following are the valid resource types: ``CHAT_TRANSCRIPTS`` | ``CALL_RECORDINGS`` | ``SCHEDULED_REPORTS`` | ``MEDIA_STREAMS`` | ``CONTACT_TRACE_RECORDS`` | ``AGENT_EVENTS``\n')
    storage_type: str = pydantic.Field(..., description='A valid storage type.\n')
    kinesis_firehose_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_KinesisFirehoseConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the Kinesis Firehose delivery stream.\n')
    kinesis_stream_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_KinesisStreamConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the Kinesis data stream.\n')
    kinesis_video_stream_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_KinesisVideoStreamConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the Kinesis video stream.\n')
    s3_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnInstanceStorageConfig_S3ConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The S3 bucket configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-instancestorageconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_instance_storage_config_props = connect.CfnInstanceStorageConfigProps(\n        instance_arn="instanceArn",\n        resource_type="resourceType",\n        storage_type="storageType",\n\n        # the properties below are optional\n        kinesis_firehose_config=connect.CfnInstanceStorageConfig.KinesisFirehoseConfigProperty(\n            firehose_arn="firehoseArn"\n        ),\n        kinesis_stream_config=connect.CfnInstanceStorageConfig.KinesisStreamConfigProperty(\n            stream_arn="streamArn"\n        ),\n        kinesis_video_stream_config=connect.CfnInstanceStorageConfig.KinesisVideoStreamConfigProperty(\n            prefix="prefix",\n            retention_period_hours=123,\n\n            # the properties below are optional\n            encryption_config=connect.CfnInstanceStorageConfig.EncryptionConfigProperty(\n                encryption_type="encryptionType",\n                key_id="keyId"\n            )\n        ),\n        s3_config=connect.CfnInstanceStorageConfig.S3ConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n\n            # the properties below are optional\n            encryption_config=connect.CfnInstanceStorageConfig.EncryptionConfigProperty(\n                encryption_type="encryptionType",\n                key_id="keyId"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'resource_type', 'storage_type', 'kinesis_firehose_config', 'kinesis_stream_config', 'kinesis_video_stream_config', 's3_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnInstanceStorageConfigProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnIntegrationAssociationProps
class CfnIntegrationAssociationPropsDef(BaseCfnProperty):
    instance_id: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance. *Minimum* : ``1`` *Maximum* : ``100``\n')
    integration_arn: str = pydantic.Field(..., description='ARN of the integration being associated with the instance. *Minimum* : ``1`` *Maximum* : ``140``\n')
    integration_type: str = pydantic.Field(..., description='Specifies the integration type to be associated with the instance. *Allowed Values* : ``LEX_BOT`` | ``LAMBDA_FUNCTION``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-integrationassociation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_integration_association_props = connect.CfnIntegrationAssociationProps(\n        instance_id="instanceId",\n        integration_arn="integrationArn",\n        integration_type="integrationType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_id', 'integration_arn', 'integration_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnIntegrationAssociationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnPhoneNumberProps
class CfnPhoneNumberPropsDef(BaseCfnProperty):
    country_code: str = pydantic.Field(..., description='The ISO country code.\n')
    target_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) for Amazon Connect instances or traffic distribution group that phone numbers are claimed to.\n')
    type: str = pydantic.Field(..., description='The type of phone number.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the phone number.\n')
    prefix: typing.Optional[str] = pydantic.Field(None, description='The prefix of the phone number. If provided, it must contain ``+`` as part of the country code. *Pattern* : ``^\\\\+[0-9]{1,15}``\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-phonenumber.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_phone_number_props = connect.CfnPhoneNumberProps(\n        country_code="countryCode",\n        target_arn="targetArn",\n        type="type",\n\n        # the properties below are optional\n        description="description",\n        prefix="prefix",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['country_code', 'target_arn', 'type', 'description', 'prefix', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnPhoneNumberProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnPromptProps
class CfnPromptPropsDef(BaseCfnProperty):
    instance_arn: str = pydantic.Field(..., description='The identifier of the Amazon Connect instance.\n')
    name: str = pydantic.Field(..., description='The name of the prompt.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the prompt.\n')
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='The URI for the S3 bucket where the prompt is stored.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-prompt.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_prompt_props = connect.CfnPromptProps(\n        instance_arn="instanceArn",\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        s3_uri="s3Uri",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'name', 'description', 's3_uri', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnPromptProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnQuickConnectProps
class CfnQuickConnectPropsDef(BaseCfnProperty):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance.\n')
    name: str = pydantic.Field(..., description='The name of the quick connect.\n')
    quick_connect_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnQuickConnect_QuickConnectConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains information about the quick connect.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the quick connect.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-quickconnect.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_quick_connect_props = connect.CfnQuickConnectProps(\n        instance_arn="instanceArn",\n        name="name",\n        quick_connect_config=connect.CfnQuickConnect.QuickConnectConfigProperty(\n            quick_connect_type="quickConnectType",\n\n            # the properties below are optional\n            phone_config=connect.CfnQuickConnect.PhoneNumberQuickConnectConfigProperty(\n                phone_number="phoneNumber"\n            ),\n            queue_config=connect.CfnQuickConnect.QueueQuickConnectConfigProperty(\n                contact_flow_arn="contactFlowArn",\n                queue_arn="queueArn"\n            ),\n            user_config=connect.CfnQuickConnect.UserQuickConnectConfigProperty(\n                contact_flow_arn="contactFlowArn",\n                user_arn="userArn"\n            )\n        ),\n\n        # the properties below are optional\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'name', 'quick_connect_config', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnQuickConnectProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnRuleProps
class CfnRulePropsDef(BaseCfnProperty):
    actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_ActionsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A list of actions to be run when the rule is triggered.\n')
    function: str = pydantic.Field(..., description='The conditions of the rule.\n')
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance.\n')
    name: str = pydantic.Field(..., description='The name of the rule.\n')
    publish_status: str = pydantic.Field(..., description='The publish status of the rule. *Allowed values* : ``DRAFT`` | ``PUBLISHED``\n')
    trigger_event_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnRule_RuleTriggerEventSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The event source to trigger the rule.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-rule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    # assign_contact_category_actions: Any\n\n    cfn_rule_props = connect.CfnRuleProps(\n        actions=connect.CfnRule.ActionsProperty(\n            assign_contact_category_actions=[assign_contact_category_actions],\n            event_bridge_actions=[connect.CfnRule.EventBridgeActionProperty(\n                name="name"\n            )],\n            send_notification_actions=[connect.CfnRule.SendNotificationActionProperty(\n                content="content",\n                content_type="contentType",\n                delivery_method="deliveryMethod",\n                recipient=connect.CfnRule.NotificationRecipientTypeProperty(\n                    user_arns=["userArns"],\n                    user_tags={\n                        "user_tags_key": "userTags"\n                    }\n                ),\n\n                # the properties below are optional\n                subject="subject"\n            )],\n            task_actions=[connect.CfnRule.TaskActionProperty(\n                contact_flow_arn="contactFlowArn",\n                name="name",\n\n                # the properties below are optional\n                description="description",\n                references={\n                    "references_key": connect.CfnRule.ReferenceProperty(\n                        type="type",\n                        value="value"\n                    )\n                }\n            )]\n        ),\n        function="function",\n        instance_arn="instanceArn",\n        name="name",\n        publish_status="publishStatus",\n        trigger_event_source=connect.CfnRule.RuleTriggerEventSourceProperty(\n            event_source_name="eventSourceName",\n\n            # the properties below are optional\n            integration_association_arn="integrationAssociationArn"\n        ),\n\n        # the properties below are optional\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'function', 'instance_arn', 'name', 'publish_status', 'trigger_event_source', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnSecurityKeyProps
class CfnSecurityKeyPropsDef(BaseCfnProperty):
    instance_id: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance. *Minimum* : ``1`` *Maximum* : ``100``\n')
    key: str = pydantic.Field(..., description='A valid security key in PEM format. *Minimum* : ``1`` *Maximum* : ``1024``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-securitykey.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_security_key_props = connect.CfnSecurityKeyProps(\n        instance_id="instanceId",\n        key="key"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_id', 'key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnSecurityKeyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnTaskTemplateProps
class CfnTaskTemplatePropsDef(BaseCfnProperty):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the Amazon Connect instance.\n')
    client_token: typing.Optional[str] = pydantic.Field(None, description='A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.\n')
    constraints: typing.Any = pydantic.Field(None, description='Constraints that are applicable to the fields listed. The values can be represented in either JSON or YAML format. For an example of the JSON configuration, see *Examples* at the bottom of this page.\n')
    contact_flow_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the flow that runs by default when a task is created by referencing this template. ``ContactFlowArn`` is not required when there is a field with ``fieldType`` = ``QUICK_CONNECT`` .\n')
    defaults: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_DefaultFieldValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The default values for fields when a task is created by referencing this template.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the task template.\n')
    fields: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnTaskTemplate_FieldPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Fields that are part of the template. A template requires at least one field that has type ``Name`` .\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the task template.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='The status of the task template.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for this resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-tasktemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    # constraints: Any\n\n    cfn_task_template_props = connect.CfnTaskTemplateProps(\n        instance_arn="instanceArn",\n\n        # the properties below are optional\n        client_token="clientToken",\n        constraints=constraints,\n        contact_flow_arn="contactFlowArn",\n        defaults=[connect.CfnTaskTemplate.DefaultFieldValueProperty(\n            default_value="defaultValue",\n            id=connect.CfnTaskTemplate.FieldIdentifierProperty(\n                name="name"\n            )\n        )],\n        description="description",\n        fields=[connect.CfnTaskTemplate.FieldProperty(\n            id=connect.CfnTaskTemplate.FieldIdentifierProperty(\n                name="name"\n            ),\n            type="type",\n\n            # the properties below are optional\n            description="description",\n            single_select_options=["singleSelectOptions"]\n        )],\n        name="name",\n        status="status",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'client_token', 'constraints', 'contact_flow_arn', 'defaults', 'description', 'fields', 'name', 'status', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnTaskTemplateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnUserHierarchyGroupProps
class CfnUserHierarchyGroupPropsDef(BaseCfnProperty):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the user hierarchy group.\n')
    name: str = pydantic.Field(..., description='The name of the user hierarchy group.\n')
    parent_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the parent group.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-userhierarchygroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_user_hierarchy_group_props = connect.CfnUserHierarchyGroupProps(\n        instance_arn="instanceArn",\n        name="name",\n\n        # the properties below are optional\n        parent_group_arn="parentGroupArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'name', 'parent_group_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnUserHierarchyGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_connect.CfnUserProps
class CfnUserPropsDef(BaseCfnProperty):
    instance_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the instance.\n')
    phone_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnUser_UserPhoneConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Information about the phone configuration for the user.\n')
    routing_profile_arn: str = pydantic.Field(..., description="The Amazon Resource Name (ARN) of the user's routing profile.\n")
    security_profile_arns: typing.Sequence[str] = pydantic.Field(..., description="The Amazon Resource Name (ARN) of the user's security profile.\n")
    username: str = pydantic.Field(..., description='The user name assigned to the user account.\n')
    directory_user_id: typing.Optional[str] = pydantic.Field(None, description='The identifier of the user account in the directory used for identity management.\n')
    hierarchy_group_arn: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) of the user's hierarchy group.\n")
    identity_info: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_connect.CfnUser_UserIdentityInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the user identity.\n')
    password: typing.Optional[str] = pydantic.Field(None, description="The user's password.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-connect-user.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_connect as connect\n\n    cfn_user_props = connect.CfnUserProps(\n        instance_arn="instanceArn",\n        phone_config=connect.CfnUser.UserPhoneConfigProperty(\n            phone_type="phoneType",\n\n            # the properties below are optional\n            after_contact_work_time_limit=123,\n            auto_accept=False,\n            desk_phone_number="deskPhoneNumber"\n        ),\n        routing_profile_arn="routingProfileArn",\n        security_profile_arns=["securityProfileArns"],\n        username="username",\n\n        # the properties below are optional\n        directory_user_id="directoryUserId",\n        hierarchy_group_arn="hierarchyGroupArn",\n        identity_info=connect.CfnUser.UserIdentityInfoProperty(\n            email="email",\n            first_name="firstName",\n            last_name="lastName",\n            mobile="mobile",\n            secondary_email="secondaryEmail"\n        ),\n        password="password",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_arn', 'phone_config', 'routing_profile_arn', 'security_profile_arns', 'username', 'directory_user_id', 'hierarchy_group_arn', 'identity_info', 'password', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_connect.CfnUserProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnEvaluationForm_EvaluationFormBaseItemProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormBaseItemPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormItemProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormItemPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormNumericQuestionAutomationProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormNumericQuestionAutomationPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormNumericQuestionOptionProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormNumericQuestionOptionPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormNumericQuestionPropertiesProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormNumericQuestionPropertiesPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormQuestionProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormQuestionPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormQuestionTypePropertiesProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormQuestionTypePropertiesPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormSectionProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormSectionPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationOptionProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationOptionPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormSingleSelectQuestionAutomationPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormSingleSelectQuestionOptionProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormSingleSelectQuestionOptionPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_EvaluationFormSingleSelectQuestionPropertiesProperty: typing.Optional[dict[str, CfnEvaluationForm_EvaluationFormSingleSelectQuestionPropertiesPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_NumericQuestionPropertyValueAutomationProperty: typing.Optional[dict[str, CfnEvaluationForm_NumericQuestionPropertyValueAutomationPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_ScoringStrategyProperty: typing.Optional[dict[str, CfnEvaluationForm_ScoringStrategyPropertyDef]] = pydantic.Field(None)
    CfnEvaluationForm_SingleSelectQuestionRuleCategoryAutomationProperty: typing.Optional[dict[str, CfnEvaluationForm_SingleSelectQuestionRuleCategoryAutomationPropertyDef]] = pydantic.Field(None)
    CfnHoursOfOperation_HoursOfOperationConfigProperty: typing.Optional[dict[str, CfnHoursOfOperation_HoursOfOperationConfigPropertyDef]] = pydantic.Field(None)
    CfnHoursOfOperation_HoursOfOperationTimeSliceProperty: typing.Optional[dict[str, CfnHoursOfOperation_HoursOfOperationTimeSlicePropertyDef]] = pydantic.Field(None)
    CfnInstance_AttributesProperty: typing.Optional[dict[str, CfnInstance_AttributesPropertyDef]] = pydantic.Field(None)
    CfnInstanceStorageConfig_EncryptionConfigProperty: typing.Optional[dict[str, CfnInstanceStorageConfig_EncryptionConfigPropertyDef]] = pydantic.Field(None)
    CfnInstanceStorageConfig_KinesisFirehoseConfigProperty: typing.Optional[dict[str, CfnInstanceStorageConfig_KinesisFirehoseConfigPropertyDef]] = pydantic.Field(None)
    CfnInstanceStorageConfig_KinesisStreamConfigProperty: typing.Optional[dict[str, CfnInstanceStorageConfig_KinesisStreamConfigPropertyDef]] = pydantic.Field(None)
    CfnInstanceStorageConfig_KinesisVideoStreamConfigProperty: typing.Optional[dict[str, CfnInstanceStorageConfig_KinesisVideoStreamConfigPropertyDef]] = pydantic.Field(None)
    CfnInstanceStorageConfig_S3ConfigProperty: typing.Optional[dict[str, CfnInstanceStorageConfig_S3ConfigPropertyDef]] = pydantic.Field(None)
    CfnQuickConnect_PhoneNumberQuickConnectConfigProperty: typing.Optional[dict[str, CfnQuickConnect_PhoneNumberQuickConnectConfigPropertyDef]] = pydantic.Field(None)
    CfnQuickConnect_QueueQuickConnectConfigProperty: typing.Optional[dict[str, CfnQuickConnect_QueueQuickConnectConfigPropertyDef]] = pydantic.Field(None)
    CfnQuickConnect_QuickConnectConfigProperty: typing.Optional[dict[str, CfnQuickConnect_QuickConnectConfigPropertyDef]] = pydantic.Field(None)
    CfnQuickConnect_UserQuickConnectConfigProperty: typing.Optional[dict[str, CfnQuickConnect_UserQuickConnectConfigPropertyDef]] = pydantic.Field(None)
    CfnRule_ActionsProperty: typing.Optional[dict[str, CfnRule_ActionsPropertyDef]] = pydantic.Field(None)
    CfnRule_EventBridgeActionProperty: typing.Optional[dict[str, CfnRule_EventBridgeActionPropertyDef]] = pydantic.Field(None)
    CfnRule_NotificationRecipientTypeProperty: typing.Optional[dict[str, CfnRule_NotificationRecipientTypePropertyDef]] = pydantic.Field(None)
    CfnRule_ReferenceProperty: typing.Optional[dict[str, CfnRule_ReferencePropertyDef]] = pydantic.Field(None)
    CfnRule_RuleTriggerEventSourceProperty: typing.Optional[dict[str, CfnRule_RuleTriggerEventSourcePropertyDef]] = pydantic.Field(None)
    CfnRule_SendNotificationActionProperty: typing.Optional[dict[str, CfnRule_SendNotificationActionPropertyDef]] = pydantic.Field(None)
    CfnRule_TaskActionProperty: typing.Optional[dict[str, CfnRule_TaskActionPropertyDef]] = pydantic.Field(None)
    CfnTaskTemplate_ConstraintsProperty: typing.Optional[dict[str, CfnTaskTemplate_ConstraintsPropertyDef]] = pydantic.Field(None)
    CfnTaskTemplate_DefaultFieldValueProperty: typing.Optional[dict[str, CfnTaskTemplate_DefaultFieldValuePropertyDef]] = pydantic.Field(None)
    CfnTaskTemplate_FieldIdentifierProperty: typing.Optional[dict[str, CfnTaskTemplate_FieldIdentifierPropertyDef]] = pydantic.Field(None)
    CfnTaskTemplate_FieldProperty: typing.Optional[dict[str, CfnTaskTemplate_FieldPropertyDef]] = pydantic.Field(None)
    CfnTaskTemplate_InvisibleFieldInfoProperty: typing.Optional[dict[str, CfnTaskTemplate_InvisibleFieldInfoPropertyDef]] = pydantic.Field(None)
    CfnTaskTemplate_ReadOnlyFieldInfoProperty: typing.Optional[dict[str, CfnTaskTemplate_ReadOnlyFieldInfoPropertyDef]] = pydantic.Field(None)
    CfnTaskTemplate_RequiredFieldInfoProperty: typing.Optional[dict[str, CfnTaskTemplate_RequiredFieldInfoPropertyDef]] = pydantic.Field(None)
    CfnUser_UserIdentityInfoProperty: typing.Optional[dict[str, CfnUser_UserIdentityInfoPropertyDef]] = pydantic.Field(None)
    CfnUser_UserPhoneConfigProperty: typing.Optional[dict[str, CfnUser_UserPhoneConfigPropertyDef]] = pydantic.Field(None)
    CfnApprovedOrigin: typing.Optional[dict[str, CfnApprovedOriginDef]] = pydantic.Field(None)
    CfnContactFlow: typing.Optional[dict[str, CfnContactFlowDef]] = pydantic.Field(None)
    CfnContactFlowModule: typing.Optional[dict[str, CfnContactFlowModuleDef]] = pydantic.Field(None)
    CfnEvaluationForm: typing.Optional[dict[str, CfnEvaluationFormDef]] = pydantic.Field(None)
    CfnHoursOfOperation: typing.Optional[dict[str, CfnHoursOfOperationDef]] = pydantic.Field(None)
    CfnInstance: typing.Optional[dict[str, CfnInstanceDef]] = pydantic.Field(None)
    CfnInstanceStorageConfig: typing.Optional[dict[str, CfnInstanceStorageConfigDef]] = pydantic.Field(None)
    CfnIntegrationAssociation: typing.Optional[dict[str, CfnIntegrationAssociationDef]] = pydantic.Field(None)
    CfnPhoneNumber: typing.Optional[dict[str, CfnPhoneNumberDef]] = pydantic.Field(None)
    CfnPrompt: typing.Optional[dict[str, CfnPromptDef]] = pydantic.Field(None)
    CfnQuickConnect: typing.Optional[dict[str, CfnQuickConnectDef]] = pydantic.Field(None)
    CfnRule: typing.Optional[dict[str, CfnRuleDef]] = pydantic.Field(None)
    CfnSecurityKey: typing.Optional[dict[str, CfnSecurityKeyDef]] = pydantic.Field(None)
    CfnTaskTemplate: typing.Optional[dict[str, CfnTaskTemplateDef]] = pydantic.Field(None)
    CfnUser: typing.Optional[dict[str, CfnUserDef]] = pydantic.Field(None)
    CfnUserHierarchyGroup: typing.Optional[dict[str, CfnUserHierarchyGroupDef]] = pydantic.Field(None)
    CfnApprovedOriginProps: typing.Optional[dict[str, CfnApprovedOriginPropsDef]] = pydantic.Field(None)
    CfnContactFlowModuleProps: typing.Optional[dict[str, CfnContactFlowModulePropsDef]] = pydantic.Field(None)
    CfnContactFlowProps: typing.Optional[dict[str, CfnContactFlowPropsDef]] = pydantic.Field(None)
    CfnEvaluationFormProps: typing.Optional[dict[str, CfnEvaluationFormPropsDef]] = pydantic.Field(None)
    CfnHoursOfOperationProps: typing.Optional[dict[str, CfnHoursOfOperationPropsDef]] = pydantic.Field(None)
    CfnInstanceProps: typing.Optional[dict[str, CfnInstancePropsDef]] = pydantic.Field(None)
    CfnInstanceStorageConfigProps: typing.Optional[dict[str, CfnInstanceStorageConfigPropsDef]] = pydantic.Field(None)
    CfnIntegrationAssociationProps: typing.Optional[dict[str, CfnIntegrationAssociationPropsDef]] = pydantic.Field(None)
    CfnPhoneNumberProps: typing.Optional[dict[str, CfnPhoneNumberPropsDef]] = pydantic.Field(None)
    CfnPromptProps: typing.Optional[dict[str, CfnPromptPropsDef]] = pydantic.Field(None)
    CfnQuickConnectProps: typing.Optional[dict[str, CfnQuickConnectPropsDef]] = pydantic.Field(None)
    CfnRuleProps: typing.Optional[dict[str, CfnRulePropsDef]] = pydantic.Field(None)
    CfnSecurityKeyProps: typing.Optional[dict[str, CfnSecurityKeyPropsDef]] = pydantic.Field(None)
    CfnTaskTemplateProps: typing.Optional[dict[str, CfnTaskTemplatePropsDef]] = pydantic.Field(None)
    CfnUserHierarchyGroupProps: typing.Optional[dict[str, CfnUserHierarchyGroupPropsDef]] = pydantic.Field(None)
    CfnUserProps: typing.Optional[dict[str, CfnUserPropsDef]] = pydantic.Field(None)
    ...
