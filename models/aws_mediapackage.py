from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_mediapackage.CfnAsset.EgressEndpointProperty
class CfnAsset_EgressEndpointPropertyDef(BaseStruct):
    packaging_configuration_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The ID of a packaging configuration that's applied to this asset.\n")
    url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URL that\'s used to request content from this endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-asset-egressendpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    egress_endpoint_property = mediapackage.CfnAsset.EgressEndpointProperty(\n        packaging_configuration_id="packagingConfigurationId",\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['packaging_configuration_id', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnAsset.EgressEndpointProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnChannel.HlsIngestProperty
class CfnChannel_HlsIngestPropertyDef(BaseStruct):
    ingest_endpoints: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnChannel_IngestEndpointPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The input URL where the source stream should be sent.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-channel-hlsingest.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    hls_ingest_property = mediapackage.CfnChannel.HlsIngestProperty(\n        ingest_endpoints=[mediapackage.CfnChannel.IngestEndpointProperty(\n            id="id",\n            password="password",\n            url="url",\n            username="username"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ingest_endpoints']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnChannel.HlsIngestProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnChannel.IngestEndpointProperty
class CfnChannel_IngestEndpointPropertyDef(BaseStruct):
    password: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The system-generated password for WebDAV input authentication.\n')
    url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The input URL where the source stream should be sent.\n')
    username: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The system-generated username for WebDAV input authentication.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-channel-ingestendpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    ingest_endpoint_property = mediapackage.CfnChannel.IngestEndpointProperty(\n        id="id",\n        password="password",\n        url="url",\n        username="username"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['password', 'url', 'username']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnChannel.IngestEndpointProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnChannel.LogConfigurationProperty
class CfnChannel_LogConfigurationPropertyDef(BaseStruct):
    log_group_name: typing.Optional[str] = pydantic.Field(None, description='Sets a custom Amazon CloudWatch log group name.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-channel-logconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    log_configuration_property = mediapackage.CfnChannel.LogConfigurationProperty(\n        log_group_name="logGroupName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_group_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnChannel.LogConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.AuthorizationProperty
class CfnOriginEndpoint_AuthorizationPropertyDef(BaseStruct):
    cdn_identifier_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the secret in AWS Secrets Manager that your Content Delivery Network (CDN) uses for authorization to access your endpoint.\n')
    secrets_role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the IAM role that allows AWS Elemental MediaPackage to communicate with AWS Secrets Manager .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-authorization.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    authorization_property = mediapackage.CfnOriginEndpoint.AuthorizationProperty(\n        cdn_identifier_secret="cdnIdentifierSecret",\n        secrets_role_arn="secretsRoleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cdn_identifier_secret', 'secrets_role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.AuthorizationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.CmafEncryptionProperty
class CfnOriginEndpoint_CmafEncryptionPropertyDef(BaseStruct):
    speke_key_provider: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Parameters for the SPEKE key provider.\n')
    constant_initialization_vector: typing.Optional[str] = pydantic.Field(None, description="An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then AWS Elemental MediaPackage creates the constant initialization vector (IV).\n")
    encryption_method: typing.Optional[str] = pydantic.Field(None, description='The encryption method to use.\n')
    key_rotation_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Number of seconds before AWS Elemental MediaPackage rotates to a new key. By default, rotation is set to 60 seconds. Set to ``0`` to disable key rotation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-cmafencryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    cmaf_encryption_property = mediapackage.CfnOriginEndpoint.CmafEncryptionProperty(\n        speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n            resource_id="resourceId",\n            role_arn="roleArn",\n            system_ids=["systemIds"],\n            url="url",\n\n            # the properties below are optional\n            certificate_arn="certificateArn",\n            encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                preset_speke20_audio="presetSpeke20Audio",\n                preset_speke20_video="presetSpeke20Video"\n            )\n        ),\n\n        # the properties below are optional\n        constant_initialization_vector="constantInitializationVector",\n        encryption_method="encryptionMethod",\n        key_rotation_interval_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['speke_key_provider', 'constant_initialization_vector', 'encryption_method', 'key_rotation_interval_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.CmafEncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.CmafPackageProperty
class CfnOriginEndpoint_CmafPackagePropertyDef(BaseStruct):
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_CmafEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for encrypting content.\n')
    hls_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_HlsManifestPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of HLS manifest configurations that are available from this endpoint.\n')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Duration (in seconds) of each segment. Actual segments are rounded to the nearest multiple of the source segment duration.\n')
    segment_prefix: typing.Optional[str] = pydantic.Field(None, description='An optional custom string that is prepended to the name of each segment. If not specified, the segment prefix defaults to the ChannelId.\n')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Limitations for outputs from the endpoint, based on the video bitrate.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-cmafpackage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    cmaf_package_property = mediapackage.CfnOriginEndpoint.CmafPackageProperty(\n        encryption=mediapackage.CfnOriginEndpoint.CmafEncryptionProperty(\n            speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                resource_id="resourceId",\n                role_arn="roleArn",\n                system_ids=["systemIds"],\n                url="url",\n\n                # the properties below are optional\n                certificate_arn="certificateArn",\n                encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                    preset_speke20_audio="presetSpeke20Audio",\n                    preset_speke20_video="presetSpeke20Video"\n                )\n            ),\n\n            # the properties below are optional\n            constant_initialization_vector="constantInitializationVector",\n            encryption_method="encryptionMethod",\n            key_rotation_interval_seconds=123\n        ),\n        hls_manifests=[mediapackage.CfnOriginEndpoint.HlsManifestProperty(\n            id="id",\n\n            # the properties below are optional\n            ad_markers="adMarkers",\n            ads_on_delivery_restrictions="adsOnDeliveryRestrictions",\n            ad_triggers=["adTriggers"],\n            include_iframe_only_stream=False,\n            manifest_name="manifestName",\n            playlist_type="playlistType",\n            playlist_window_seconds=123,\n            program_date_time_interval_seconds=123,\n            url="url"\n        )],\n        segment_duration_seconds=123,\n        segment_prefix="segmentPrefix",\n        stream_selection=mediapackage.CfnOriginEndpoint.StreamSelectionProperty(\n            max_video_bits_per_second=123,\n            min_video_bits_per_second=123,\n            stream_order="streamOrder"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encryption', 'hls_manifests', 'segment_duration_seconds', 'segment_prefix', 'stream_selection']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.CmafPackageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.DashEncryptionProperty
class CfnOriginEndpoint_DashEncryptionPropertyDef(BaseStruct):
    speke_key_provider: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Parameters for the SPEKE key provider.\n')
    key_rotation_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Number of seconds before AWS Elemental MediaPackage rotates to a new key. By default, rotation is set to 60 seconds. Set to ``0`` to disable key rotation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-dashencryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    dash_encryption_property = mediapackage.CfnOriginEndpoint.DashEncryptionProperty(\n        speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n            resource_id="resourceId",\n            role_arn="roleArn",\n            system_ids=["systemIds"],\n            url="url",\n\n            # the properties below are optional\n            certificate_arn="certificateArn",\n            encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                preset_speke20_audio="presetSpeke20Audio",\n                preset_speke20_video="presetSpeke20Video"\n            )\n        ),\n\n        # the properties below are optional\n        key_rotation_interval_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['speke_key_provider', 'key_rotation_interval_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.DashEncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.DashPackageProperty
class CfnOriginEndpoint_DashPackagePropertyDef(BaseStruct):
    ads_on_delivery_restrictions: typing.Optional[str] = pydantic.Field(None, description='The flags on SCTE-35 segmentation descriptors that have to be present for AWS Elemental MediaPackage to insert ad markers in the output manifest. For information about SCTE-35 in AWS Elemental MediaPackage , see `SCTE-35 Message Options in AWS Elemental MediaPackage <https://docs.aws.amazon.com/mediapackage/latest/ug/scte.html>`_ .\n')
    ad_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the SCTE-35 message types that AWS Elemental MediaPackage treats as ad markers in the output manifest. Valid values: - ``BREAK`` - ``DISTRIBUTOR_ADVERTISEMENT`` - ``DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY`` . - ``DISTRIBUTOR_PLACEMENT_OPPORTUNITY`` . - ``PROVIDER_ADVERTISEMENT`` . - ``PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY`` . - ``PROVIDER_PLACEMENT_OPPORTUNITY`` . - ``SPLICE_INSERT`` .\n')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_DashEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for encrypting content.\n')
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='This applies only to stream sets with a single video track. When true, the stream set includes an additional I-frame trick-play only stream, along with the other tracks. If false, this extra stream is not included.\n')
    manifest_layout: typing.Optional[str] = pydantic.Field(None, description='Determines the position of some tags in the manifest. Valid values: - ``FULL`` - Elements like ``SegmentTemplate`` and ``ContentProtection`` are included in each ``Representation`` . - ``COMPACT`` - Duplicate elements are combined and presented at the ``AdaptationSet`` level.\n')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Time window (in seconds) contained in each manifest.\n')
    min_buffer_time_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum amount of content (measured in seconds) that a player must keep available in the buffer.\n')
    min_update_period_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.\n')
    period_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Controls whether AWS Elemental MediaPackage produces single-period or multi-period DASH manifests. For more information about periods, see `Multi-period DASH in AWS Elemental MediaPackage <https://docs.aws.amazon.com/mediapackage/latest/ug/multi-period.html>`_ . Valid values: - ``ADS`` - AWS Elemental MediaPackage will produce multi-period DASH manifests. Periods are created based on the SCTE-35 ad markers present in the input manifest. - *No value* - AWS Elemental MediaPackage will produce single-period DASH manifests. This is the default setting.\n')
    profile: typing.Optional[str] = pydantic.Field(None, description="The DASH profile for the output. Valid values: - ``NONE`` - The output doesn't use a DASH profile. - ``HBBTV_1_5`` - The output is compliant with HbbTV v1.5. - ``DVB_DASH_2014`` - The output is compliant with DVB-DASH 2014.\n")
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Duration (in seconds) of each fragment. Actual fragments are rounded to the nearest multiple of the source fragment duration.\n')
    segment_template_format: typing.Optional[str] = pydantic.Field(None, description='Determines the type of variable used in the ``media`` URL of the ``SegmentTemplate`` tag in the manifest. Also specifies if segment timeline information is included in ``SegmentTimeline`` or ``SegmentTemplate`` . Valid values: - ``NUMBER_WITH_TIMELINE`` - The ``$Number$`` variable is used in the ``media`` URL. The value of this variable is the sequential number of the segment. A full ``SegmentTimeline`` object is presented in each ``SegmentTemplate`` . - ``NUMBER_WITH_DURATION`` - The ``$Number$`` variable is used in the ``media`` URL and a ``duration`` attribute is added to the segment template. The ``SegmentTimeline`` object is removed from the representation. - ``TIME_WITH_TIMELINE`` - The ``$Time$`` variable is used in the ``media`` URL. The value of this variable is the timestamp of when the segment starts. A full ``SegmentTimeline`` object is presented in each ``SegmentTemplate`` .\n')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Limitations for outputs from the endpoint, based on the video bitrate.\n')
    suggested_presentation_delay_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Amount of time (in seconds) that the player should be from the live point at the end of the manifest.\n')
    utc_timing: typing.Optional[str] = pydantic.Field(None, description='Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).\n')
    utc_timing_uri: typing.Optional[str] = pydantic.Field(None, description='Specifies the value attribute of the UTC timing field when utcTiming is set to HTTP-ISO or HTTP-HEAD.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-dashpackage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    dash_package_property = mediapackage.CfnOriginEndpoint.DashPackageProperty(\n        ads_on_delivery_restrictions="adsOnDeliveryRestrictions",\n        ad_triggers=["adTriggers"],\n        encryption=mediapackage.CfnOriginEndpoint.DashEncryptionProperty(\n            speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                resource_id="resourceId",\n                role_arn="roleArn",\n                system_ids=["systemIds"],\n                url="url",\n\n                # the properties below are optional\n                certificate_arn="certificateArn",\n                encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                    preset_speke20_audio="presetSpeke20Audio",\n                    preset_speke20_video="presetSpeke20Video"\n                )\n            ),\n\n            # the properties below are optional\n            key_rotation_interval_seconds=123\n        ),\n        include_iframe_only_stream=False,\n        manifest_layout="manifestLayout",\n        manifest_window_seconds=123,\n        min_buffer_time_seconds=123,\n        min_update_period_seconds=123,\n        period_triggers=["periodTriggers"],\n        profile="profile",\n        segment_duration_seconds=123,\n        segment_template_format="segmentTemplateFormat",\n        stream_selection=mediapackage.CfnOriginEndpoint.StreamSelectionProperty(\n            max_video_bits_per_second=123,\n            min_video_bits_per_second=123,\n            stream_order="streamOrder"\n        ),\n        suggested_presentation_delay_seconds=123,\n        utc_timing="utcTiming",\n        utc_timing_uri="utcTimingUri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ads_on_delivery_restrictions', 'ad_triggers', 'encryption', 'include_iframe_only_stream', 'manifest_layout', 'manifest_window_seconds', 'min_buffer_time_seconds', 'min_update_period_seconds', 'period_triggers', 'profile', 'segment_duration_seconds', 'segment_template_format', 'stream_selection', 'suggested_presentation_delay_seconds', 'utc_timing', 'utc_timing_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.DashPackageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty
class CfnOriginEndpoint_EncryptionContractConfigurationPropertyDef(BaseStruct):
    preset_speke20_audio: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="A collection of audio encryption presets. Value description: - ``PRESET-AUDIO-1`` - Use one content key to encrypt all of the audio tracks in your stream. - ``PRESET-AUDIO-2`` - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks. - ``PRESET-AUDIO-3`` - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels. - ``SHARED`` - Use the same content key for all of the audio and video tracks in your stream. - ``UNENCRYPTED`` - Don't encrypt any of the audio tracks in your stream.\n")
    preset_speke20_video: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A collection of video encryption presets. Value description: - ``PRESET-VIDEO-1`` - Use one content key to encrypt all of the video tracks in your stream. - ``PRESET-VIDEO-2`` - Use one content key to encrypt all of the SD video tracks and one content key for all HD and higher resolutions video tracks. - ``PRESET-VIDEO-3`` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks and one content key for all UHD video tracks. - ``PRESET-VIDEO-4`` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks. - ``PRESET-VIDEO-5`` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks. - ``PRESET-VIDEO-6`` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks. - ``PRESET-VIDEO-7`` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks. - ``PRESET-VIDEO-8`` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks. - ``SHARED`` - Use the same content key for all of the video and audio tracks in your stream. - ``UNENCRYPTED`` - Don\'t encrypt any of the video tracks in your stream.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-encryptioncontractconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    encryption_contract_configuration_property = mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n        preset_speke20_audio="presetSpeke20Audio",\n        preset_speke20_video="presetSpeke20Video"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['preset_speke20_audio', 'preset_speke20_video']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.HlsEncryptionProperty
class CfnOriginEndpoint_HlsEncryptionPropertyDef(BaseStruct):
    speke_key_provider: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Parameters for the SPEKE key provider.\n')
    constant_initialization_vector: typing.Optional[str] = pydantic.Field(None, description='A 128-bit, 16-byte hex value represented by a 32-character string, used with the key for encrypting blocks.\n')
    encryption_method: typing.Optional[str] = pydantic.Field(None, description='HLS encryption type.\n')
    key_rotation_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Number of seconds before AWS Elemental MediaPackage rotates to a new key. By default, rotation is set to 60 seconds. Set to ``0`` to disable key rotation.\n')
    repeat_ext_x_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Repeat the ``EXT-X-KEY`` directive for every media segment. This might result in an increase in client requests to the DRM server.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-hlsencryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    hls_encryption_property = mediapackage.CfnOriginEndpoint.HlsEncryptionProperty(\n        speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n            resource_id="resourceId",\n            role_arn="roleArn",\n            system_ids=["systemIds"],\n            url="url",\n\n            # the properties below are optional\n            certificate_arn="certificateArn",\n            encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                preset_speke20_audio="presetSpeke20Audio",\n                preset_speke20_video="presetSpeke20Video"\n            )\n        ),\n\n        # the properties below are optional\n        constant_initialization_vector="constantInitializationVector",\n        encryption_method="encryptionMethod",\n        key_rotation_interval_seconds=123,\n        repeat_ext_xKey=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['speke_key_provider', 'constant_initialization_vector', 'encryption_method', 'key_rotation_interval_seconds', 'repeat_ext_x_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.HlsEncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.HlsManifestProperty
class CfnOriginEndpoint_HlsManifestPropertyDef(BaseStruct):
    ad_markers: typing.Optional[str] = pydantic.Field(None, description='Controls how ad markers are included in the packaged endpoint. Valid values: - ``NONE`` - Omits all SCTE-35 ad markers from the output. - ``PASSTHROUGH`` - Creates a copy in the output of the SCTE-35 ad markers (comments) taken directly from the input manifest. - ``SCTE35_ENHANCED`` - Generates ad markers and blackout tags in the output based on the SCTE-35 messages from the input manifest.\n')
    ads_on_delivery_restrictions: typing.Optional[str] = pydantic.Field(None, description='The flags on SCTE-35 segmentation descriptors that have to be present for AWS Elemental MediaPackage to insert ad markers in the output manifest. For information about SCTE-35 in AWS Elemental MediaPackage , see `SCTE-35 Message Options in AWS Elemental MediaPackage <https://docs.aws.amazon.com/mediapackage/latest/ug/scte.html>`_ .\n')
    ad_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the SCTE-35 message types that AWS Elemental MediaPackage treats as ad markers in the output manifest. Valid values: - ``BREAK`` - ``DISTRIBUTOR_ADVERTISEMENT`` - ``DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY`` - ``DISTRIBUTOR_PLACEMENT_OPPORTUNITY`` - ``PROVIDER_ADVERTISEMENT`` - ``PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY`` - ``PROVIDER_PLACEMENT_OPPORTUNITY`` - ``SPLICE_INSERT``\n')
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Applies to stream sets with a single video track only. When true, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included.\n')
    manifest_name: typing.Optional[str] = pydantic.Field(None, description="A short string that's appended to the end of the endpoint URL to create a unique path to this endpoint. The manifestName on the HLSManifest object overrides the manifestName that you provided on the originEndpoint object.\n")
    playlist_type: typing.Optional[str] = pydantic.Field(None, description='When specified as either ``event`` or ``vod`` , a corresponding ``EXT-X-PLAYLIST-TYPE`` entry is included in the media playlist. Indicates if the playlist is live-to-VOD content.\n')
    playlist_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Time window (in seconds) contained in each parent manifest.\n')
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Inserts ``EXT-X-PROGRAM-DATE-TIME`` tags in the output manifest at the interval that you specify. Additionally, ID3Timed metadata messages are generated every 5 seconds starting when the content was ingested. Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output. Omit this attribute or enter ``0`` to indicate that the ``EXT-X-PROGRAM-DATE-TIME`` tags are not included in the manifest.\n')
    url: typing.Optional[str] = pydantic.Field(None, description='The URL that\'s used to request this manifest from this endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-hlsmanifest.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    hls_manifest_property = mediapackage.CfnOriginEndpoint.HlsManifestProperty(\n        id="id",\n\n        # the properties below are optional\n        ad_markers="adMarkers",\n        ads_on_delivery_restrictions="adsOnDeliveryRestrictions",\n        ad_triggers=["adTriggers"],\n        include_iframe_only_stream=False,\n        manifest_name="manifestName",\n        playlist_type="playlistType",\n        playlist_window_seconds=123,\n        program_date_time_interval_seconds=123,\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ad_markers', 'ads_on_delivery_restrictions', 'ad_triggers', 'include_iframe_only_stream', 'manifest_name', 'playlist_type', 'playlist_window_seconds', 'program_date_time_interval_seconds', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.HlsManifestProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.HlsPackageProperty
class CfnOriginEndpoint_HlsPackagePropertyDef(BaseStruct):
    ad_markers: typing.Optional[str] = pydantic.Field(None, description='Controls how ad markers are included in the packaged endpoint. Valid values: - ``NONE`` - Omits all SCTE-35 ad markers from the output. - ``PASSTHROUGH`` - Creates a copy in the output of the SCTE-35 ad markers (comments) taken directly from the input manifest. - ``SCTE35_ENHANCED`` - Generates ad markers and blackout tags in the output based on the SCTE-35 messages from the input manifest.\n')
    ads_on_delivery_restrictions: typing.Optional[str] = pydantic.Field(None, description='The flags on SCTE-35 segmentation descriptors that have to be present for AWS Elemental MediaPackage to insert ad markers in the output manifest. For information about SCTE-35 in AWS Elemental MediaPackage , see `SCTE-35 Message Options in AWS Elemental MediaPackage <https://docs.aws.amazon.com/mediapackage/latest/ug/scte.html>`_ .\n')
    ad_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the SCTE-35 message types that AWS Elemental MediaPackage treats as ad markers in the output manifest. Valid values: - ``BREAK`` - ``DISTRIBUTOR_ADVERTISEMENT`` - ``DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY`` - ``DISTRIBUTOR_PLACEMENT_OPPORTUNITY`` - ``PROVIDER_ADVERTISEMENT`` - ``PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY`` - ``PROVIDER_PLACEMENT_OPPORTUNITY`` - ``SPLICE_INSERT``\n')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_HlsEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for encrypting content.\n')
    include_dvb_subtitles: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.\n')
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Only applies to stream sets with a single video track. When true, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included.\n')
    playlist_type: typing.Optional[str] = pydantic.Field(None, description='When specified as either ``event`` or ``vod`` , a corresponding ``EXT-X-PLAYLIST-TYPE`` entry is included in the media playlist. Indicates if the playlist is live-to-VOD content.\n')
    playlist_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Time window (in seconds) contained in each parent manifest.\n')
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Inserts ``EXT-X-PROGRAM-DATE-TIME`` tags in the output manifest at the interval that you specify. Additionally, ID3Timed metadata messages are generated every 5 seconds starting when the content was ingested. Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output. Omit this attribute or enter ``0`` to indicate that the ``EXT-X-PROGRAM-DATE-TIME`` tags are not included in the manifest.\n')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Duration (in seconds) of each fragment. Actual fragments are rounded to the nearest multiple of the source fragment duration.\n')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Limitations for outputs from the endpoint, based on the video bitrate.\n')
    use_audio_rendition_group: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='When true, AWS Elemental MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-hlspackage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    hls_package_property = mediapackage.CfnOriginEndpoint.HlsPackageProperty(\n        ad_markers="adMarkers",\n        ads_on_delivery_restrictions="adsOnDeliveryRestrictions",\n        ad_triggers=["adTriggers"],\n        encryption=mediapackage.CfnOriginEndpoint.HlsEncryptionProperty(\n            speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                resource_id="resourceId",\n                role_arn="roleArn",\n                system_ids=["systemIds"],\n                url="url",\n\n                # the properties below are optional\n                certificate_arn="certificateArn",\n                encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                    preset_speke20_audio="presetSpeke20Audio",\n                    preset_speke20_video="presetSpeke20Video"\n                )\n            ),\n\n            # the properties below are optional\n            constant_initialization_vector="constantInitializationVector",\n            encryption_method="encryptionMethod",\n            key_rotation_interval_seconds=123,\n            repeat_ext_xKey=False\n        ),\n        include_dvb_subtitles=False,\n        include_iframe_only_stream=False,\n        playlist_type="playlistType",\n        playlist_window_seconds=123,\n        program_date_time_interval_seconds=123,\n        segment_duration_seconds=123,\n        stream_selection=mediapackage.CfnOriginEndpoint.StreamSelectionProperty(\n            max_video_bits_per_second=123,\n            min_video_bits_per_second=123,\n            stream_order="streamOrder"\n        ),\n        use_audio_rendition_group=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ad_markers', 'ads_on_delivery_restrictions', 'ad_triggers', 'encryption', 'include_dvb_subtitles', 'include_iframe_only_stream', 'playlist_type', 'playlist_window_seconds', 'program_date_time_interval_seconds', 'segment_duration_seconds', 'stream_selection', 'use_audio_rendition_group']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.HlsPackageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.MssEncryptionProperty
class CfnOriginEndpoint_MssEncryptionPropertyDef(BaseStruct):
    speke_key_provider: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Parameters for the SPEKE key provider.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-mssencryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    mss_encryption_property = mediapackage.CfnOriginEndpoint.MssEncryptionProperty(\n        speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n            resource_id="resourceId",\n            role_arn="roleArn",\n            system_ids=["systemIds"],\n            url="url",\n\n            # the properties below are optional\n            certificate_arn="certificateArn",\n            encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                preset_speke20_audio="presetSpeke20Audio",\n                preset_speke20_video="presetSpeke20Video"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['speke_key_provider']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.MssEncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.MssPackageProperty
class CfnOriginEndpoint_MssPackagePropertyDef(BaseStruct):
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_MssEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for encrypting content.\n')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Time window (in seconds) contained in each manifest.\n')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Duration (in seconds) of each fragment. Actual fragments are rounded to the nearest multiple of the source fragment duration.\n')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Limitations for outputs from the endpoint, based on the video bitrate.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-msspackage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    mss_package_property = mediapackage.CfnOriginEndpoint.MssPackageProperty(\n        encryption=mediapackage.CfnOriginEndpoint.MssEncryptionProperty(\n            speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                resource_id="resourceId",\n                role_arn="roleArn",\n                system_ids=["systemIds"],\n                url="url",\n\n                # the properties below are optional\n                certificate_arn="certificateArn",\n                encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                    preset_speke20_audio="presetSpeke20Audio",\n                    preset_speke20_video="presetSpeke20Video"\n                )\n            )\n        ),\n        manifest_window_seconds=123,\n        segment_duration_seconds=123,\n        stream_selection=mediapackage.CfnOriginEndpoint.StreamSelectionProperty(\n            max_video_bits_per_second=123,\n            min_video_bits_per_second=123,\n            stream_order="streamOrder"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encryption', 'manifest_window_seconds', 'segment_duration_seconds', 'stream_selection']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.MssPackageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty
class CfnOriginEndpoint_SpekeKeyProviderPropertyDef(BaseStruct):
    resource_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Unique identifier for this endpoint, as it is configured in the key provider service.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The ARN for the IAM role that's granted by the key provider to provide access to the key provider API. This role must have a trust policy that allows AWS Elemental MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Valid format: arn:aws:iam::{accountID}:role/{name}\n")
    system_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='List of unique identifiers for the DRM systems to use, as defined in the CPIX specification.\n')
    url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='URL for the key provider’s key retrieval API endpoint. Must start with https://.\n')
    certificate_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for the certificate that you imported to AWS Certificate Manager to add content key encryption to this endpoint. For this feature to work, your DRM key provider must support content key encryption.\n')
    encryption_contract_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_EncryptionContractConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use ``encryptionContractConfiguration`` to configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-spekekeyprovider.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    speke_key_provider_property = mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n        resource_id="resourceId",\n        role_arn="roleArn",\n        system_ids=["systemIds"],\n        url="url",\n\n        # the properties below are optional\n        certificate_arn="certificateArn",\n        encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n            preset_speke20_audio="presetSpeke20Audio",\n            preset_speke20_video="presetSpeke20Video"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_id', 'role_arn', 'system_ids', 'url', 'certificate_arn', 'encryption_contract_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint.StreamSelectionProperty
class CfnOriginEndpoint_StreamSelectionPropertyDef(BaseStruct):
    max_video_bits_per_second: typing.Union[int, float, None] = pydantic.Field(None, description="The upper limit of the bitrates that this endpoint serves. If the video track exceeds this threshold, then AWS Elemental MediaPackage excludes it from output. If you don't specify a value, it defaults to 2147483647 bits per second.\n")
    min_video_bits_per_second: typing.Union[int, float, None] = pydantic.Field(None, description="The lower limit of the bitrates that this endpoint serves. If the video track is below this threshold, then AWS Elemental MediaPackage excludes it from output. If you don't specify a value, it defaults to 0 bits per second.\n")
    stream_order: typing.Optional[str] = pydantic.Field(None, description='Order in which the different video bitrates are presented to the player. Valid values: ``ORIGINAL`` , ``VIDEO_BITRATE_ASCENDING`` , ``VIDEO_BITRATE_DESCENDING`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-originendpoint-streamselection.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    stream_selection_property = mediapackage.CfnOriginEndpoint.StreamSelectionProperty(\n        max_video_bits_per_second=123,\n        min_video_bits_per_second=123,\n        stream_order="streamOrder"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_video_bits_per_second', 'min_video_bits_per_second', 'stream_order']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint.StreamSelectionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.CmafEncryptionProperty
class CfnPackagingConfiguration_CmafEncryptionPropertyDef(BaseStruct):
    speke_key_provider: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Parameters for the SPEKE key provider.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-cmafencryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    cmaf_encryption_property = mediapackage.CfnPackagingConfiguration.CmafEncryptionProperty(\n        speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n            role_arn="roleArn",\n            system_ids=["systemIds"],\n            url="url",\n\n            # the properties below are optional\n            encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                preset_speke20_audio="presetSpeke20Audio",\n                preset_speke20_video="presetSpeke20Video"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['speke_key_provider']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.CmafEncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.CmafPackageProperty
class CfnPackagingConfiguration_CmafPackagePropertyDef(BaseStruct):
    hls_manifests: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_HlsManifestPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of HLS manifest configurations that are available from this endpoint.\n')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_CmafEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for encrypting content.\n')
    include_encoder_configuration_in_segments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="When includeEncoderConfigurationInSegments is set to true, AWS Elemental MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.\n")
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Duration (in seconds) of each segment. Actual segments are rounded to the nearest multiple of the source fragment duration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-cmafpackage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    cmaf_package_property = mediapackage.CfnPackagingConfiguration.CmafPackageProperty(\n        hls_manifests=[mediapackage.CfnPackagingConfiguration.HlsManifestProperty(\n            ad_markers="adMarkers",\n            include_iframe_only_stream=False,\n            manifest_name="manifestName",\n            program_date_time_interval_seconds=123,\n            repeat_ext_xKey=False,\n            stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n                max_video_bits_per_second=123,\n                min_video_bits_per_second=123,\n                stream_order="streamOrder"\n            )\n        )],\n\n        # the properties below are optional\n        encryption=mediapackage.CfnPackagingConfiguration.CmafEncryptionProperty(\n            speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n                role_arn="roleArn",\n                system_ids=["systemIds"],\n                url="url",\n\n                # the properties below are optional\n                encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                    preset_speke20_audio="presetSpeke20Audio",\n                    preset_speke20_video="presetSpeke20Video"\n                )\n            )\n        ),\n        include_encoder_configuration_in_segments=False,\n        segment_duration_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hls_manifests', 'encryption', 'include_encoder_configuration_in_segments', 'segment_duration_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.CmafPackageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.DashEncryptionProperty
class CfnPackagingConfiguration_DashEncryptionPropertyDef(BaseStruct):
    speke_key_provider: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Parameters for the SPEKE key provider.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-dashencryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    dash_encryption_property = mediapackage.CfnPackagingConfiguration.DashEncryptionProperty(\n        speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n            role_arn="roleArn",\n            system_ids=["systemIds"],\n            url="url",\n\n            # the properties below are optional\n            encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                preset_speke20_audio="presetSpeke20Audio",\n                preset_speke20_video="presetSpeke20Video"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['speke_key_provider']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.DashEncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.DashManifestProperty
class CfnPackagingConfiguration_DashManifestPropertyDef(BaseStruct):
    manifest_layout: typing.Optional[str] = pydantic.Field(None, description='Determines the position of some tags in the Media Presentation Description (MPD). When set to ``FULL`` , elements like ``SegmentTemplate`` and ``ContentProtection`` are included in each ``Representation`` . When set to ``COMPACT`` , duplicate elements are combined and presented at the AdaptationSet level.\n')
    manifest_name: typing.Optional[str] = pydantic.Field(None, description="A short string that's appended to the end of the endpoint URL to create a unique path to this packaging configuration.\n")
    min_buffer_time_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum amount of content (measured in seconds) that a player must keep available in the buffer.\n')
    profile: typing.Optional[str] = pydantic.Field(None, description='The DASH profile type. When set to ``HBBTV_1_5`` , the content is compliant with HbbTV 1.5.\n')
    scte_markers_source: typing.Optional[str] = pydantic.Field(None, description='The source of scte markers used. Value description: - ``SEGMENTS`` - The scte markers are sourced from the segments of the ingested content. - ``MANIFEST`` - the scte markers are sourced from the manifest of the ingested content. The MANIFEST value is compatible with source HLS playlists using the SCTE-35 Enhanced syntax ( ``EXT-OATCLS-SCTE35`` tags). SCTE-35 Elemental and SCTE-35 Daterange syntaxes are not supported with this option.\n')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Limitations for outputs from the endpoint, based on the video bitrate.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-dashmanifest.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    dash_manifest_property = mediapackage.CfnPackagingConfiguration.DashManifestProperty(\n        manifest_layout="manifestLayout",\n        manifest_name="manifestName",\n        min_buffer_time_seconds=123,\n        profile="profile",\n        scte_markers_source="scteMarkersSource",\n        stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n            max_video_bits_per_second=123,\n            min_video_bits_per_second=123,\n            stream_order="streamOrder"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['manifest_layout', 'manifest_name', 'min_buffer_time_seconds', 'profile', 'scte_markers_source', 'stream_selection']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.DashManifestProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.DashPackageProperty
class CfnPackagingConfiguration_DashPackagePropertyDef(BaseStruct):
    dash_manifests: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_DashManifestPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of DASH manifest configurations that are available from this endpoint.\n')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_DashEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for encrypting content.\n')
    include_encoder_configuration_in_segments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="When includeEncoderConfigurationInSegments is set to true, AWS Elemental MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.\n")
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='This applies only to stream sets with a single video track. When true, the stream set includes an additional I-frame trick-play only stream, along with the other tracks. If false, this extra stream is not included.\n')
    period_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Controls whether AWS Elemental MediaPackage produces single-period or multi-period DASH manifests. For more information about periods, see `Multi-period DASH in AWS Elemental MediaPackage <https://docs.aws.amazon.com/mediapackage/latest/ug/multi-period.html>`_ . Valid values: - ``ADS`` - AWS Elemental MediaPackage will produce multi-period DASH manifests. Periods are created based on the SCTE-35 ad markers present in the input manifest. - *No value* - AWS Elemental MediaPackage will produce single-period DASH manifests. This is the default setting.\n')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Duration (in seconds) of each fragment. Actual fragments are rounded to the nearest multiple of the source segment duration.\n')
    segment_template_format: typing.Optional[str] = pydantic.Field(None, description='Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to ``NUMBER_WITH_TIMELINE`` , a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to ``TIME_WITH_TIMELINE`` , a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to ``NUMBER_WITH_DURATION`` , only a duration is included in each SegmentTemplate, with $Number$ media URLs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-dashpackage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    dash_package_property = mediapackage.CfnPackagingConfiguration.DashPackageProperty(\n        dash_manifests=[mediapackage.CfnPackagingConfiguration.DashManifestProperty(\n            manifest_layout="manifestLayout",\n            manifest_name="manifestName",\n            min_buffer_time_seconds=123,\n            profile="profile",\n            scte_markers_source="scteMarkersSource",\n            stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n                max_video_bits_per_second=123,\n                min_video_bits_per_second=123,\n                stream_order="streamOrder"\n            )\n        )],\n\n        # the properties below are optional\n        encryption=mediapackage.CfnPackagingConfiguration.DashEncryptionProperty(\n            speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n                role_arn="roleArn",\n                system_ids=["systemIds"],\n                url="url",\n\n                # the properties below are optional\n                encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                    preset_speke20_audio="presetSpeke20Audio",\n                    preset_speke20_video="presetSpeke20Video"\n                )\n            )\n        ),\n        include_encoder_configuration_in_segments=False,\n        include_iframe_only_stream=False,\n        period_triggers=["periodTriggers"],\n        segment_duration_seconds=123,\n        segment_template_format="segmentTemplateFormat"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dash_manifests', 'encryption', 'include_encoder_configuration_in_segments', 'include_iframe_only_stream', 'period_triggers', 'segment_duration_seconds', 'segment_template_format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.DashPackageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty
class CfnPackagingConfiguration_EncryptionContractConfigurationPropertyDef(BaseStruct):
    preset_speke20_audio: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="A collection of audio encryption presets. Value description: - ``PRESET-AUDIO-1`` - Use one content key to encrypt all of the audio tracks in your stream. - ``PRESET-AUDIO-2`` - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks. - ``PRESET-AUDIO-3`` - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels. - ``SHARED`` - Use the same content key for all of the audio and video tracks in your stream. - ``UNENCRYPTED`` - Don't encrypt any of the audio tracks in your stream.\n")
    preset_speke20_video: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A collection of video encryption presets. Value description: - ``PRESET-VIDEO-1`` - Use one content key to encrypt all of the video tracks in your stream. - ``PRESET-VIDEO-2`` - Use one content key to encrypt all of the SD video tracks and one content key for all HD and higher resolutions video tracks. - ``PRESET-VIDEO-3`` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks and one content key for all UHD video tracks. - ``PRESET-VIDEO-4`` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks. - ``PRESET-VIDEO-5`` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks. - ``PRESET-VIDEO-6`` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks. - ``PRESET-VIDEO-7`` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks. - ``PRESET-VIDEO-8`` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks. - ``SHARED`` - Use the same content key for all of the video and audio tracks in your stream. - ``UNENCRYPTED`` - Don\'t encrypt any of the video tracks in your stream.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-encryptioncontractconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    encryption_contract_configuration_property = mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n        preset_speke20_audio="presetSpeke20Audio",\n        preset_speke20_video="presetSpeke20Video"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['preset_speke20_audio', 'preset_speke20_video']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.HlsEncryptionProperty
class CfnPackagingConfiguration_HlsEncryptionPropertyDef(BaseStruct):
    speke_key_provider: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Parameters for the SPEKE key provider.\n')
    constant_initialization_vector: typing.Optional[str] = pydantic.Field(None, description="A 128-bit, 16-byte hex value represented by a 32-character string, used with the key for encrypting blocks. If you don't specify a constant initialization vector (IV), AWS Elemental MediaPackage periodically rotates the IV.\n")
    encryption_method: typing.Optional[str] = pydantic.Field(None, description='HLS encryption type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-hlsencryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    hls_encryption_property = mediapackage.CfnPackagingConfiguration.HlsEncryptionProperty(\n        speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n            role_arn="roleArn",\n            system_ids=["systemIds"],\n            url="url",\n\n            # the properties below are optional\n            encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                preset_speke20_audio="presetSpeke20Audio",\n                preset_speke20_video="presetSpeke20Video"\n            )\n        ),\n\n        # the properties below are optional\n        constant_initialization_vector="constantInitializationVector",\n        encryption_method="encryptionMethod"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['speke_key_provider', 'constant_initialization_vector', 'encryption_method']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.HlsEncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.HlsManifestProperty
class CfnPackagingConfiguration_HlsManifestPropertyDef(BaseStruct):
    ad_markers: typing.Optional[str] = pydantic.Field(None, description='This setting controls ad markers in the packaged content. Valid values: - ``NONE`` - Omits all SCTE-35 ad markers from the output. - ``PASSTHROUGH`` - Creates a copy in the output of the SCTE-35 ad markers (comments) taken directly from the input manifest. - ``SCTE35_ENHANCED`` - Generates ad markers and blackout tags in the output based on the SCTE-35 messages from the input manifest.\n')
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Applies to stream sets with a single video track only. When enabled, the output includes an additional I-frame only stream, along with the other tracks.\n')
    manifest_name: typing.Optional[str] = pydantic.Field(None, description="A short string that's appended to the end of the endpoint URL to create a unique path to this packaging configuration.\n")
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Inserts ``EXT-X-PROGRAM-DATE-TIME`` tags in the output manifest at the interval that you specify. Additionally, ID3Timed metadata messages are generated every 5 seconds starting when the content was ingested. Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output. Omit this attribute or enter ``0`` to indicate that the ``EXT-X-PROGRAM-DATE-TIME`` tags are not included in the manifest.\n')
    repeat_ext_x_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Repeat the ``EXT-X-KEY`` directive for every media segment. This might result in an increase in client requests to the DRM server.\n')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Video bitrate limitations for outputs from this packaging configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-hlsmanifest.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    hls_manifest_property = mediapackage.CfnPackagingConfiguration.HlsManifestProperty(\n        ad_markers="adMarkers",\n        include_iframe_only_stream=False,\n        manifest_name="manifestName",\n        program_date_time_interval_seconds=123,\n        repeat_ext_xKey=False,\n        stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n            max_video_bits_per_second=123,\n            min_video_bits_per_second=123,\n            stream_order="streamOrder"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ad_markers', 'include_iframe_only_stream', 'manifest_name', 'program_date_time_interval_seconds', 'repeat_ext_x_key', 'stream_selection']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.HlsManifestProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.HlsPackageProperty
class CfnPackagingConfiguration_HlsPackagePropertyDef(BaseStruct):
    hls_manifests: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_HlsManifestPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of HLS manifest configurations that are available from this endpoint.\n')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_HlsEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for encrypting content.\n')
    include_dvb_subtitles: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.\n')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Duration (in seconds) of each fragment. Actual fragments are rounded to the nearest multiple of the source fragment duration.\n')
    use_audio_rendition_group: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='When true, AWS Elemental MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-hlspackage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    hls_package_property = mediapackage.CfnPackagingConfiguration.HlsPackageProperty(\n        hls_manifests=[mediapackage.CfnPackagingConfiguration.HlsManifestProperty(\n            ad_markers="adMarkers",\n            include_iframe_only_stream=False,\n            manifest_name="manifestName",\n            program_date_time_interval_seconds=123,\n            repeat_ext_xKey=False,\n            stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n                max_video_bits_per_second=123,\n                min_video_bits_per_second=123,\n                stream_order="streamOrder"\n            )\n        )],\n\n        # the properties below are optional\n        encryption=mediapackage.CfnPackagingConfiguration.HlsEncryptionProperty(\n            speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n                role_arn="roleArn",\n                system_ids=["systemIds"],\n                url="url",\n\n                # the properties below are optional\n                encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                    preset_speke20_audio="presetSpeke20Audio",\n                    preset_speke20_video="presetSpeke20Video"\n                )\n            ),\n\n            # the properties below are optional\n            constant_initialization_vector="constantInitializationVector",\n            encryption_method="encryptionMethod"\n        ),\n        include_dvb_subtitles=False,\n        segment_duration_seconds=123,\n        use_audio_rendition_group=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hls_manifests', 'encryption', 'include_dvb_subtitles', 'segment_duration_seconds', 'use_audio_rendition_group']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.HlsPackageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.MssEncryptionProperty
class CfnPackagingConfiguration_MssEncryptionPropertyDef(BaseStruct):
    speke_key_provider: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Parameters for the SPEKE key provider.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-mssencryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    mss_encryption_property = mediapackage.CfnPackagingConfiguration.MssEncryptionProperty(\n        speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n            role_arn="roleArn",\n            system_ids=["systemIds"],\n            url="url",\n\n            # the properties below are optional\n            encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                preset_speke20_audio="presetSpeke20Audio",\n                preset_speke20_video="presetSpeke20Video"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['speke_key_provider']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.MssEncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.MssManifestProperty
class CfnPackagingConfiguration_MssManifestPropertyDef(BaseStruct):
    manifest_name: typing.Optional[str] = pydantic.Field(None, description="A short string that's appended to the end of the endpoint URL to create a unique path to this packaging configuration.\n")
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Video bitrate limitations for outputs from this packaging configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-mssmanifest.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    mss_manifest_property = mediapackage.CfnPackagingConfiguration.MssManifestProperty(\n        manifest_name="manifestName",\n        stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n            max_video_bits_per_second=123,\n            min_video_bits_per_second=123,\n            stream_order="streamOrder"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['manifest_name', 'stream_selection']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.MssManifestProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.MssPackageProperty
class CfnPackagingConfiguration_MssPackagePropertyDef(BaseStruct):
    mss_manifests: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_MssManifestPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of Microsoft Smooth manifest configurations that are available from this endpoint.\n')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_MssEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for encrypting content.\n')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Duration (in seconds) of each fragment. Actual fragments are rounded to the nearest multiple of the source fragment duration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-msspackage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    mss_package_property = mediapackage.CfnPackagingConfiguration.MssPackageProperty(\n        mss_manifests=[mediapackage.CfnPackagingConfiguration.MssManifestProperty(\n            manifest_name="manifestName",\n            stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n                max_video_bits_per_second=123,\n                min_video_bits_per_second=123,\n                stream_order="streamOrder"\n            )\n        )],\n\n        # the properties below are optional\n        encryption=mediapackage.CfnPackagingConfiguration.MssEncryptionProperty(\n            speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n                role_arn="roleArn",\n                system_ids=["systemIds"],\n                url="url",\n\n                # the properties below are optional\n                encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                    preset_speke20_audio="presetSpeke20Audio",\n                    preset_speke20_video="presetSpeke20Video"\n                )\n            )\n        ),\n        segment_duration_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mss_manifests', 'encryption', 'segment_duration_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.MssPackageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty
class CfnPackagingConfiguration_SpekeKeyProviderPropertyDef(BaseStruct):
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The ARN for the IAM role that's granted by the key provider to provide access to the key provider API. Valid format: arn:aws:iam::{accountID}:role/{name}\n")
    system_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='List of unique identifiers for the DRM systems to use, as defined in the CPIX specification.\n')
    url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="URL for the key provider's key retrieval API endpoint. Must start with https://.\n")
    encryption_contract_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_EncryptionContractConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use ``encryptionContractConfiguration`` to configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-spekekeyprovider.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    speke_key_provider_property = mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n        role_arn="roleArn",\n        system_ids=["systemIds"],\n        url="url",\n\n        # the properties below are optional\n        encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n            preset_speke20_audio="presetSpeke20Audio",\n            preset_speke20_video="presetSpeke20Video"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role_arn', 'system_ids', 'url', 'encryption_contract_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration.StreamSelectionProperty
class CfnPackagingConfiguration_StreamSelectionPropertyDef(BaseStruct):
    max_video_bits_per_second: typing.Union[int, float, None] = pydantic.Field(None, description="The upper limit of the bitrates that this endpoint serves. If the video track exceeds this threshold, then AWS Elemental MediaPackage excludes it from output. If you don't specify a value, it defaults to 2147483647 bits per second.\n")
    min_video_bits_per_second: typing.Union[int, float, None] = pydantic.Field(None, description="The lower limit of the bitrates that this endpoint serves. If the video track is below this threshold, then AWS Elemental MediaPackage excludes it from output. If you don't specify a value, it defaults to 0 bits per second.\n")
    stream_order: typing.Optional[str] = pydantic.Field(None, description='Order in which the different video bitrates are presented to the player. Valid values: ``ORIGINAL`` , ``VIDEO_BITRATE_ASCENDING`` , ``VIDEO_BITRATE_DESCENDING`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packagingconfiguration-streamselection.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    stream_selection_property = mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n        max_video_bits_per_second=123,\n        min_video_bits_per_second=123,\n        stream_order="streamOrder"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_video_bits_per_second', 'min_video_bits_per_second', 'stream_order']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration.StreamSelectionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingGroup.AuthorizationProperty
class CfnPackagingGroup_AuthorizationPropertyDef(BaseStruct):
    cdn_identifier_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the secret in AWS Secrets Manager that is used for CDN authorization.\n')
    secrets_role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the IAM role that allows AWS Elemental MediaPackage to communicate with AWS Secrets Manager .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packaginggroup-authorization.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    authorization_property = mediapackage.CfnPackagingGroup.AuthorizationProperty(\n        cdn_identifier_secret="cdnIdentifierSecret",\n        secrets_role_arn="secretsRoleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cdn_identifier_secret', 'secrets_role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingGroup.AuthorizationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingGroup.LogConfigurationProperty
class CfnPackagingGroup_LogConfigurationPropertyDef(BaseStruct):
    log_group_name: typing.Optional[str] = pydantic.Field(None, description='Sets a custom Amazon CloudWatch log group name for egress logs. If a log group name isn\'t specified, the default name is used: /aws/MediaPackage/EgressAccessLogs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackage-packaginggroup-logconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    log_configuration_property = mediapackage.CfnPackagingGroup.LogConfigurationProperty(\n        log_group_name="logGroupName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_group_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingGroup.LogConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnAsset
class CfnAssetDef(BaseCfnResource):
    id_: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Construct identifier for this resource (unique in its scope).\n')
    packaging_group_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the packaging group associated with this asset.\n')
    source_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN for the source content in Amazon S3.\n')
    source_role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN for the IAM role that provides AWS Elemental MediaPackage access to the Amazon S3 bucket where the source content is stored. Valid format: arn:aws:iam::{accountID}:role/{name}\n')
    egress_endpoints: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnAsset_EgressEndpointPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='List of playback endpoints that are available for this asset.\n')
    resource_id: typing.Optional[str] = pydantic.Field(None, description="Unique identifier for this asset, as it's configured in the key provider service.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the asset.')
    _init_params: typing.ClassVar[list[str]] = ['id_', 'packaging_group_id', 'source_arn', 'source_role_arn', 'egress_endpoints', 'resource_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['EgressEndpointProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnAsset'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAssetDefConfig] = pydantic.Field(None)


class CfnAssetDefConfig(pydantic.BaseModel):
    EgressEndpointProperty: typing.Optional[list[CfnAssetDefEgressendpointpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnAssetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAssetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAssetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAssetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAssetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAssetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAssetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAssetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAssetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAssetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAssetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAssetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAssetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAssetDefEgressendpointpropertyParams(pydantic.BaseModel):
    packaging_configuration_id: str = pydantic.Field(..., description='')
    url: str = pydantic.Field(..., description='')
    ...

class CfnAssetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAssetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAssetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAssetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAssetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAssetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAssetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAssetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAssetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAssetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAssetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAssetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAssetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAssetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackage.CfnChannel
class CfnChannelDef(BaseCfnResource):
    id_: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Construct identifier for this resource (unique in its scope).\n')
    description: typing.Optional[str] = pydantic.Field(None, description='Any descriptive information that you want to add to the channel for future identification purposes.\n')
    egress_access_logs: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnChannel_LogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures egress access logs.\n')
    hls_ingest: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnChannel_HlsIngestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The input URL where the source stream should be sent.\n')
    ingress_access_logs: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnChannel_LogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures ingress access logs.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the channel.')
    _init_params: typing.ClassVar[list[str]] = ['id_', 'description', 'egress_access_logs', 'hls_ingest', 'ingress_access_logs', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['HlsIngestProperty', 'IngestEndpointProperty', 'LogConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnChannelDefConfig] = pydantic.Field(None)


class CfnChannelDefConfig(pydantic.BaseModel):
    HlsIngestProperty: typing.Optional[list[CfnChannelDefHlsingestpropertyParams]] = pydantic.Field(None, description='')
    IngestEndpointProperty: typing.Optional[list[CfnChannelDefIngestendpointpropertyParams]] = pydantic.Field(None, description='')
    LogConfigurationProperty: typing.Optional[list[CfnChannelDefLogconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnChannelDefHlsingestpropertyParams(pydantic.BaseModel):
    ingest_endpoints: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnChannel_IngestEndpointPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnChannelDefIngestendpointpropertyParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='')
    password: str = pydantic.Field(..., description='')
    url: str = pydantic.Field(..., description='')
    username: str = pydantic.Field(..., description='')
    ...

class CfnChannelDefLogconfigurationpropertyParams(pydantic.BaseModel):
    log_group_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpoint
class CfnOriginEndpointDef(BaseCfnResource):
    id_: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Construct identifier for this resource (unique in its scope).\n')
    channel_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the channel associated with this endpoint.\n')
    authorization: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_AuthorizationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for CDN authorization.\n')
    cmaf_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_CmafPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Common Media Application Format (CMAF) packaging.\n')
    dash_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_DashPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for DASH packaging.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='Any descriptive information that you want to add to the endpoint for future identification purposes.\n')
    hls_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_HlsPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Apple HLS packaging.\n')
    manifest_name: typing.Optional[str] = pydantic.Field(None, description="A short string that's appended to the end of the endpoint URL to create a unique path to this endpoint.\n")
    mss_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_MssPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Microsoft Smooth Streaming packaging.\n')
    origination: typing.Optional[str] = pydantic.Field(None, description='Controls video origination from this endpoint. Valid values: - ``ALLOW`` - enables this endpoint to serve content to requesting devices. - ``DENY`` - prevents this endpoint from serving content. Denying origination is helpful for harvesting live-to-VOD assets. For more information about harvesting and origination, see `Live-to-VOD Requirements <https://docs.aws.amazon.com/mediapackage/latest/ug/ltov-reqmts.html>`_ .\n')
    startover_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum duration (seconds) of content to retain for startover playback. Omit this attribute or enter ``0`` to indicate that startover playback is disabled for this endpoint.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the endpoint.\n')
    time_delay_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum duration (seconds) of delay to enforce on the playback of live content. Omit this attribute or enter ``0`` to indicate that there is no time delay in effect for this endpoint.\n')
    whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The IP addresses that can access this endpoint.')
    _init_params: typing.ClassVar[list[str]] = ['id_', 'channel_id', 'authorization', 'cmaf_package', 'dash_package', 'description', 'hls_package', 'manifest_name', 'mss_package', 'origination', 'startover_window_seconds', 'tags', 'time_delay_seconds', 'whitelist']
    _method_names: typing.ClassVar[list[str]] = ['AuthorizationProperty', 'CmafEncryptionProperty', 'CmafPackageProperty', 'DashEncryptionProperty', 'DashPackageProperty', 'EncryptionContractConfigurationProperty', 'HlsEncryptionProperty', 'HlsManifestProperty', 'HlsPackageProperty', 'MssEncryptionProperty', 'MssPackageProperty', 'SpekeKeyProviderProperty', 'StreamSelectionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpoint'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnOriginEndpointDefConfig] = pydantic.Field(None)


class CfnOriginEndpointDefConfig(pydantic.BaseModel):
    AuthorizationProperty: typing.Optional[list[CfnOriginEndpointDefAuthorizationpropertyParams]] = pydantic.Field(None, description='')
    CmafEncryptionProperty: typing.Optional[list[CfnOriginEndpointDefCmafencryptionpropertyParams]] = pydantic.Field(None, description='')
    CmafPackageProperty: typing.Optional[list[CfnOriginEndpointDefCmafpackagepropertyParams]] = pydantic.Field(None, description='')
    DashEncryptionProperty: typing.Optional[list[CfnOriginEndpointDefDashencryptionpropertyParams]] = pydantic.Field(None, description='')
    DashPackageProperty: typing.Optional[list[CfnOriginEndpointDefDashpackagepropertyParams]] = pydantic.Field(None, description='')
    EncryptionContractConfigurationProperty: typing.Optional[list[CfnOriginEndpointDefEncryptioncontractconfigurationpropertyParams]] = pydantic.Field(None, description='')
    HlsEncryptionProperty: typing.Optional[list[CfnOriginEndpointDefHlsencryptionpropertyParams]] = pydantic.Field(None, description='')
    HlsManifestProperty: typing.Optional[list[CfnOriginEndpointDefHlsmanifestpropertyParams]] = pydantic.Field(None, description='')
    HlsPackageProperty: typing.Optional[list[CfnOriginEndpointDefHlspackagepropertyParams]] = pydantic.Field(None, description='')
    MssEncryptionProperty: typing.Optional[list[CfnOriginEndpointDefMssencryptionpropertyParams]] = pydantic.Field(None, description='')
    MssPackageProperty: typing.Optional[list[CfnOriginEndpointDefMsspackagepropertyParams]] = pydantic.Field(None, description='')
    SpekeKeyProviderProperty: typing.Optional[list[CfnOriginEndpointDefSpekekeyproviderpropertyParams]] = pydantic.Field(None, description='')
    StreamSelectionProperty: typing.Optional[list[CfnOriginEndpointDefStreamselectionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnOriginEndpointDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnOriginEndpointDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnOriginEndpointDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnOriginEndpointDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnOriginEndpointDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnOriginEndpointDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnOriginEndpointDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnOriginEndpointDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnOriginEndpointDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnOriginEndpointDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnOriginEndpointDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnOriginEndpointDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnOriginEndpointDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnOriginEndpointDefAuthorizationpropertyParams(pydantic.BaseModel):
    cdn_identifier_secret: str = pydantic.Field(..., description='')
    secrets_role_arn: str = pydantic.Field(..., description='')
    ...

class CfnOriginEndpointDefCmafencryptionpropertyParams(pydantic.BaseModel):
    speke_key_provider: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    constant_initialization_vector: typing.Optional[str] = pydantic.Field(None, description='')
    encryption_method: typing.Optional[str] = pydantic.Field(None, description='')
    key_rotation_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefCmafpackagepropertyParams(pydantic.BaseModel):
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_CmafEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    hls_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_HlsManifestPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    segment_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefDashencryptionpropertyParams(pydantic.BaseModel):
    speke_key_provider: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    key_rotation_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefDashpackagepropertyParams(pydantic.BaseModel):
    ads_on_delivery_restrictions: typing.Optional[str] = pydantic.Field(None, description='')
    ad_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_DashEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    manifest_layout: typing.Optional[str] = pydantic.Field(None, description='')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_buffer_time_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_update_period_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    period_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    profile: typing.Optional[str] = pydantic.Field(None, description='')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    segment_template_format: typing.Optional[str] = pydantic.Field(None, description='')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    suggested_presentation_delay_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    utc_timing: typing.Optional[str] = pydantic.Field(None, description='')
    utc_timing_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefEncryptioncontractconfigurationpropertyParams(pydantic.BaseModel):
    preset_speke20_audio: str = pydantic.Field(..., description='')
    preset_speke20_video: str = pydantic.Field(..., description='')
    ...

class CfnOriginEndpointDefHlsencryptionpropertyParams(pydantic.BaseModel):
    speke_key_provider: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    constant_initialization_vector: typing.Optional[str] = pydantic.Field(None, description='')
    encryption_method: typing.Optional[str] = pydantic.Field(None, description='')
    key_rotation_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    repeat_ext_x_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefHlsmanifestpropertyParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='')
    ad_markers: typing.Optional[str] = pydantic.Field(None, description='')
    ads_on_delivery_restrictions: typing.Optional[str] = pydantic.Field(None, description='')
    ad_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    manifest_name: typing.Optional[str] = pydantic.Field(None, description='')
    playlist_type: typing.Optional[str] = pydantic.Field(None, description='')
    playlist_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefHlspackagepropertyParams(pydantic.BaseModel):
    ad_markers: typing.Optional[str] = pydantic.Field(None, description='')
    ads_on_delivery_restrictions: typing.Optional[str] = pydantic.Field(None, description='')
    ad_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_HlsEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    include_dvb_subtitles: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    playlist_type: typing.Optional[str] = pydantic.Field(None, description='')
    playlist_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    use_audio_rendition_group: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefMssencryptionpropertyParams(pydantic.BaseModel):
    speke_key_provider: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnOriginEndpointDefMsspackagepropertyParams(pydantic.BaseModel):
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_MssEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefSpekekeyproviderpropertyParams(pydantic.BaseModel):
    resource_id: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    system_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    url: str = pydantic.Field(..., description='')
    certificate_arn: typing.Optional[str] = pydantic.Field(None, description='')
    encryption_contract_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_EncryptionContractConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefStreamselectionpropertyParams(pydantic.BaseModel):
    max_video_bits_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_video_bits_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='')
    stream_order: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnOriginEndpointDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginEndpointDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnOriginEndpointDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginEndpointDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnOriginEndpointDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnOriginEndpointDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnOriginEndpointDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnOriginEndpointDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnOriginEndpointDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginEndpointDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnOriginEndpointDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnOriginEndpointDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginEndpointDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfiguration
class CfnPackagingConfigurationDef(BaseCfnResource):
    id_: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Construct identifier for this resource (unique in its scope).\n')
    packaging_group_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the packaging group associated with this packaging configuration.\n')
    cmaf_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_CmafPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for CMAF packaging.\n')
    dash_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_DashPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for DASH-ISO packaging.\n')
    hls_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_HlsPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Apple HLS packaging.\n')
    mss_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_MssPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Microsoft Smooth Streaming packaging.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the packaging configuration.')
    _init_params: typing.ClassVar[list[str]] = ['id_', 'packaging_group_id', 'cmaf_package', 'dash_package', 'hls_package', 'mss_package', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CmafEncryptionProperty', 'CmafPackageProperty', 'DashEncryptionProperty', 'DashManifestProperty', 'DashPackageProperty', 'EncryptionContractConfigurationProperty', 'HlsEncryptionProperty', 'HlsManifestProperty', 'HlsPackageProperty', 'MssEncryptionProperty', 'MssManifestProperty', 'MssPackageProperty', 'SpekeKeyProviderProperty', 'StreamSelectionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPackagingConfigurationDefConfig] = pydantic.Field(None)


class CfnPackagingConfigurationDefConfig(pydantic.BaseModel):
    CmafEncryptionProperty: typing.Optional[list[CfnPackagingConfigurationDefCmafencryptionpropertyParams]] = pydantic.Field(None, description='')
    CmafPackageProperty: typing.Optional[list[CfnPackagingConfigurationDefCmafpackagepropertyParams]] = pydantic.Field(None, description='')
    DashEncryptionProperty: typing.Optional[list[CfnPackagingConfigurationDefDashencryptionpropertyParams]] = pydantic.Field(None, description='')
    DashManifestProperty: typing.Optional[list[CfnPackagingConfigurationDefDashmanifestpropertyParams]] = pydantic.Field(None, description='')
    DashPackageProperty: typing.Optional[list[CfnPackagingConfigurationDefDashpackagepropertyParams]] = pydantic.Field(None, description='')
    EncryptionContractConfigurationProperty: typing.Optional[list[CfnPackagingConfigurationDefEncryptioncontractconfigurationpropertyParams]] = pydantic.Field(None, description='')
    HlsEncryptionProperty: typing.Optional[list[CfnPackagingConfigurationDefHlsencryptionpropertyParams]] = pydantic.Field(None, description='')
    HlsManifestProperty: typing.Optional[list[CfnPackagingConfigurationDefHlsmanifestpropertyParams]] = pydantic.Field(None, description='')
    HlsPackageProperty: typing.Optional[list[CfnPackagingConfigurationDefHlspackagepropertyParams]] = pydantic.Field(None, description='')
    MssEncryptionProperty: typing.Optional[list[CfnPackagingConfigurationDefMssencryptionpropertyParams]] = pydantic.Field(None, description='')
    MssManifestProperty: typing.Optional[list[CfnPackagingConfigurationDefMssmanifestpropertyParams]] = pydantic.Field(None, description='')
    MssPackageProperty: typing.Optional[list[CfnPackagingConfigurationDefMsspackagepropertyParams]] = pydantic.Field(None, description='')
    SpekeKeyProviderProperty: typing.Optional[list[CfnPackagingConfigurationDefSpekekeyproviderpropertyParams]] = pydantic.Field(None, description='')
    StreamSelectionProperty: typing.Optional[list[CfnPackagingConfigurationDefStreamselectionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnPackagingConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPackagingConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPackagingConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPackagingConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPackagingConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPackagingConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPackagingConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPackagingConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPackagingConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPackagingConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPackagingConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPackagingConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPackagingConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPackagingConfigurationDefCmafencryptionpropertyParams(pydantic.BaseModel):
    speke_key_provider: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnPackagingConfigurationDefCmafpackagepropertyParams(pydantic.BaseModel):
    hls_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_HlsManifestPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_CmafEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    include_encoder_configuration_in_segments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefDashencryptionpropertyParams(pydantic.BaseModel):
    speke_key_provider: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnPackagingConfigurationDefDashmanifestpropertyParams(pydantic.BaseModel):
    manifest_layout: typing.Optional[str] = pydantic.Field(None, description='')
    manifest_name: typing.Optional[str] = pydantic.Field(None, description='')
    min_buffer_time_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    profile: typing.Optional[str] = pydantic.Field(None, description='')
    scte_markers_source: typing.Optional[str] = pydantic.Field(None, description='')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefDashpackagepropertyParams(pydantic.BaseModel):
    dash_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_DashManifestPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_DashEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    include_encoder_configuration_in_segments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    period_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    segment_template_format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefEncryptioncontractconfigurationpropertyParams(pydantic.BaseModel):
    preset_speke20_audio: str = pydantic.Field(..., description='')
    preset_speke20_video: str = pydantic.Field(..., description='')
    ...

class CfnPackagingConfigurationDefHlsencryptionpropertyParams(pydantic.BaseModel):
    speke_key_provider: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    constant_initialization_vector: typing.Optional[str] = pydantic.Field(None, description='')
    encryption_method: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefHlsmanifestpropertyParams(pydantic.BaseModel):
    ad_markers: typing.Optional[str] = pydantic.Field(None, description='')
    include_iframe_only_stream: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    manifest_name: typing.Optional[str] = pydantic.Field(None, description='')
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    repeat_ext_x_key: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefHlspackagepropertyParams(pydantic.BaseModel):
    hls_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_HlsManifestPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_HlsEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    include_dvb_subtitles: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    use_audio_rendition_group: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefMssencryptionpropertyParams(pydantic.BaseModel):
    speke_key_provider: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnPackagingConfigurationDefMssmanifestpropertyParams(pydantic.BaseModel):
    manifest_name: typing.Optional[str] = pydantic.Field(None, description='')
    stream_selection: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_StreamSelectionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefMsspackagepropertyParams(pydantic.BaseModel):
    mss_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_MssManifestPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_MssEncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefSpekekeyproviderpropertyParams(pydantic.BaseModel):
    role_arn: str = pydantic.Field(..., description='')
    system_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    url: str = pydantic.Field(..., description='')
    encryption_contract_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_EncryptionContractConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefStreamselectionpropertyParams(pydantic.BaseModel):
    max_video_bits_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_video_bits_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='')
    stream_order: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPackagingConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPackagingConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPackagingConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPackagingConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPackagingConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPackagingConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPackagingConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPackagingConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPackagingConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPackagingConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPackagingConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPackagingConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPackagingConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPackagingConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingGroup
class CfnPackagingGroupDef(BaseCfnResource):
    id_: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Construct identifier for this resource (unique in its scope).\n')
    authorization: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingGroup_AuthorizationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for CDN authorization.\n')
    egress_access_logs: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingGroup_LogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration parameters for egress access logging.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the packaging group.')
    _init_params: typing.ClassVar[list[str]] = ['id_', 'authorization', 'egress_access_logs', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AuthorizationProperty', 'LogConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPackagingGroupDefConfig] = pydantic.Field(None)


class CfnPackagingGroupDefConfig(pydantic.BaseModel):
    AuthorizationProperty: typing.Optional[list[CfnPackagingGroupDefAuthorizationpropertyParams]] = pydantic.Field(None, description='')
    LogConfigurationProperty: typing.Optional[list[CfnPackagingGroupDefLogconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnPackagingGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPackagingGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPackagingGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPackagingGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPackagingGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPackagingGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPackagingGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPackagingGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPackagingGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPackagingGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPackagingGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPackagingGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPackagingGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPackagingGroupDefAuthorizationpropertyParams(pydantic.BaseModel):
    cdn_identifier_secret: str = pydantic.Field(..., description='')
    secrets_role_arn: str = pydantic.Field(..., description='')
    ...

class CfnPackagingGroupDefLogconfigurationpropertyParams(pydantic.BaseModel):
    log_group_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPackagingGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPackagingGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPackagingGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPackagingGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPackagingGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPackagingGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPackagingGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPackagingGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPackagingGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPackagingGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPackagingGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPackagingGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPackagingGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPackagingGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackage.CfnAssetProps
class CfnAssetPropsDef(BaseCfnProperty):
    packaging_group_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the packaging group associated with this asset.\n')
    source_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN for the source content in Amazon S3.\n')
    source_role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN for the IAM role that provides AWS Elemental MediaPackage access to the Amazon S3 bucket where the source content is stored. Valid format: arn:aws:iam::{accountID}:role/{name}\n')
    egress_endpoints: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnAsset_EgressEndpointPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='List of playback endpoints that are available for this asset.\n')
    resource_id: typing.Optional[str] = pydantic.Field(None, description="Unique identifier for this asset, as it's configured in the key provider service.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the asset.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    cfn_asset_props = mediapackage.CfnAssetProps(\n        id="id",\n        packaging_group_id="packagingGroupId",\n        source_arn="sourceArn",\n        source_role_arn="sourceRoleArn",\n\n        # the properties below are optional\n        egress_endpoints=[mediapackage.CfnAsset.EgressEndpointProperty(\n            packaging_configuration_id="packagingConfigurationId",\n            url="url"\n        )],\n        resource_id="resourceId",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['packaging_group_id', 'source_arn', 'source_role_arn', 'egress_endpoints', 'resource_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnAssetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnChannelProps
class CfnChannelPropsDef(BaseCfnProperty):
    description: typing.Optional[str] = pydantic.Field(None, description='Any descriptive information that you want to add to the channel for future identification purposes.\n')
    egress_access_logs: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnChannel_LogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures egress access logs.\n')
    hls_ingest: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnChannel_HlsIngestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The input URL where the source stream should be sent.\n')
    ingress_access_logs: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnChannel_LogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures ingress access logs.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the channel.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-channel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    cfn_channel_props = mediapackage.CfnChannelProps(\n        id="id",\n\n        # the properties below are optional\n        description="description",\n        egress_access_logs=mediapackage.CfnChannel.LogConfigurationProperty(\n            log_group_name="logGroupName"\n        ),\n        hls_ingest=mediapackage.CfnChannel.HlsIngestProperty(\n            ingest_endpoints=[mediapackage.CfnChannel.IngestEndpointProperty(\n                id="id",\n                password="password",\n                url="url",\n                username="username"\n            )]\n        ),\n        ingress_access_logs=mediapackage.CfnChannel.LogConfigurationProperty(\n            log_group_name="logGroupName"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['description', 'egress_access_logs', 'hls_ingest', 'ingress_access_logs', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnOriginEndpointProps
class CfnOriginEndpointPropsDef(BaseCfnProperty):
    channel_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the channel associated with this endpoint.\n')
    authorization: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_AuthorizationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for CDN authorization.\n')
    cmaf_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_CmafPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Common Media Application Format (CMAF) packaging.\n')
    dash_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_DashPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for DASH packaging.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='Any descriptive information that you want to add to the endpoint for future identification purposes.\n')
    hls_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_HlsPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Apple HLS packaging.\n')
    manifest_name: typing.Optional[str] = pydantic.Field(None, description="A short string that's appended to the end of the endpoint URL to create a unique path to this endpoint.\n")
    mss_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnOriginEndpoint_MssPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Microsoft Smooth Streaming packaging.\n')
    origination: typing.Optional[str] = pydantic.Field(None, description='Controls video origination from this endpoint. Valid values: - ``ALLOW`` - enables this endpoint to serve content to requesting devices. - ``DENY`` - prevents this endpoint from serving content. Denying origination is helpful for harvesting live-to-VOD assets. For more information about harvesting and origination, see `Live-to-VOD Requirements <https://docs.aws.amazon.com/mediapackage/latest/ug/ltov-reqmts.html>`_ .\n')
    startover_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum duration (seconds) of content to retain for startover playback. Omit this attribute or enter ``0`` to indicate that startover playback is disabled for this endpoint.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the endpoint.\n')
    time_delay_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum duration (seconds) of delay to enforce on the playback of live content. Omit this attribute or enter ``0`` to indicate that there is no time delay in effect for this endpoint.\n')
    whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The IP addresses that can access this endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-originendpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    cfn_origin_endpoint_props = mediapackage.CfnOriginEndpointProps(\n        channel_id="channelId",\n        id="id",\n\n        # the properties below are optional\n        authorization=mediapackage.CfnOriginEndpoint.AuthorizationProperty(\n            cdn_identifier_secret="cdnIdentifierSecret",\n            secrets_role_arn="secretsRoleArn"\n        ),\n        cmaf_package=mediapackage.CfnOriginEndpoint.CmafPackageProperty(\n            encryption=mediapackage.CfnOriginEndpoint.CmafEncryptionProperty(\n                speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                    resource_id="resourceId",\n                    role_arn="roleArn",\n                    system_ids=["systemIds"],\n                    url="url",\n\n                    # the properties below are optional\n                    certificate_arn="certificateArn",\n                    encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                        preset_speke20_audio="presetSpeke20Audio",\n                        preset_speke20_video="presetSpeke20Video"\n                    )\n                ),\n\n                # the properties below are optional\n                constant_initialization_vector="constantInitializationVector",\n                encryption_method="encryptionMethod",\n                key_rotation_interval_seconds=123\n            ),\n            hls_manifests=[mediapackage.CfnOriginEndpoint.HlsManifestProperty(\n                id="id",\n\n                # the properties below are optional\n                ad_markers="adMarkers",\n                ads_on_delivery_restrictions="adsOnDeliveryRestrictions",\n                ad_triggers=["adTriggers"],\n                include_iframe_only_stream=False,\n                manifest_name="manifestName",\n                playlist_type="playlistType",\n                playlist_window_seconds=123,\n                program_date_time_interval_seconds=123,\n                url="url"\n            )],\n            segment_duration_seconds=123,\n            segment_prefix="segmentPrefix",\n            stream_selection=mediapackage.CfnOriginEndpoint.StreamSelectionProperty(\n                max_video_bits_per_second=123,\n                min_video_bits_per_second=123,\n                stream_order="streamOrder"\n            )\n        ),\n        dash_package=mediapackage.CfnOriginEndpoint.DashPackageProperty(\n            ads_on_delivery_restrictions="adsOnDeliveryRestrictions",\n            ad_triggers=["adTriggers"],\n            encryption=mediapackage.CfnOriginEndpoint.DashEncryptionProperty(\n                speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                    resource_id="resourceId",\n                    role_arn="roleArn",\n                    system_ids=["systemIds"],\n                    url="url",\n\n                    # the properties below are optional\n                    certificate_arn="certificateArn",\n                    encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                        preset_speke20_audio="presetSpeke20Audio",\n                        preset_speke20_video="presetSpeke20Video"\n                    )\n                ),\n\n                # the properties below are optional\n                key_rotation_interval_seconds=123\n            ),\n            include_iframe_only_stream=False,\n            manifest_layout="manifestLayout",\n            manifest_window_seconds=123,\n            min_buffer_time_seconds=123,\n            min_update_period_seconds=123,\n            period_triggers=["periodTriggers"],\n            profile="profile",\n            segment_duration_seconds=123,\n            segment_template_format="segmentTemplateFormat",\n            stream_selection=mediapackage.CfnOriginEndpoint.StreamSelectionProperty(\n                max_video_bits_per_second=123,\n                min_video_bits_per_second=123,\n                stream_order="streamOrder"\n            ),\n            suggested_presentation_delay_seconds=123,\n            utc_timing="utcTiming",\n            utc_timing_uri="utcTimingUri"\n        ),\n        description="description",\n        hls_package=mediapackage.CfnOriginEndpoint.HlsPackageProperty(\n            ad_markers="adMarkers",\n            ads_on_delivery_restrictions="adsOnDeliveryRestrictions",\n            ad_triggers=["adTriggers"],\n            encryption=mediapackage.CfnOriginEndpoint.HlsEncryptionProperty(\n                speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                    resource_id="resourceId",\n                    role_arn="roleArn",\n                    system_ids=["systemIds"],\n                    url="url",\n\n                    # the properties below are optional\n                    certificate_arn="certificateArn",\n                    encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                        preset_speke20_audio="presetSpeke20Audio",\n                        preset_speke20_video="presetSpeke20Video"\n                    )\n                ),\n\n                # the properties below are optional\n                constant_initialization_vector="constantInitializationVector",\n                encryption_method="encryptionMethod",\n                key_rotation_interval_seconds=123,\n                repeat_ext_xKey=False\n            ),\n            include_dvb_subtitles=False,\n            include_iframe_only_stream=False,\n            playlist_type="playlistType",\n            playlist_window_seconds=123,\n            program_date_time_interval_seconds=123,\n            segment_duration_seconds=123,\n            stream_selection=mediapackage.CfnOriginEndpoint.StreamSelectionProperty(\n                max_video_bits_per_second=123,\n                min_video_bits_per_second=123,\n                stream_order="streamOrder"\n            ),\n            use_audio_rendition_group=False\n        ),\n        manifest_name="manifestName",\n        mss_package=mediapackage.CfnOriginEndpoint.MssPackageProperty(\n            encryption=mediapackage.CfnOriginEndpoint.MssEncryptionProperty(\n                speke_key_provider=mediapackage.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                    resource_id="resourceId",\n                    role_arn="roleArn",\n                    system_ids=["systemIds"],\n                    url="url",\n\n                    # the properties below are optional\n                    certificate_arn="certificateArn",\n                    encryption_contract_configuration=mediapackage.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                        preset_speke20_audio="presetSpeke20Audio",\n                        preset_speke20_video="presetSpeke20Video"\n                    )\n                )\n            ),\n            manifest_window_seconds=123,\n            segment_duration_seconds=123,\n            stream_selection=mediapackage.CfnOriginEndpoint.StreamSelectionProperty(\n                max_video_bits_per_second=123,\n                min_video_bits_per_second=123,\n                stream_order="streamOrder"\n            )\n        ),\n        origination="origination",\n        startover_window_seconds=123,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        time_delay_seconds=123,\n        whitelist=["whitelist"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_id', 'authorization', 'cmaf_package', 'dash_package', 'description', 'hls_package', 'manifest_name', 'mss_package', 'origination', 'startover_window_seconds', 'tags', 'time_delay_seconds', 'whitelist']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnOriginEndpointProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingConfigurationProps
class CfnPackagingConfigurationPropsDef(BaseCfnProperty):
    packaging_group_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the packaging group associated with this packaging configuration.\n')
    cmaf_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_CmafPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for CMAF packaging.\n')
    dash_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_DashPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for DASH-ISO packaging.\n')
    hls_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_HlsPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Apple HLS packaging.\n')
    mss_package: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingConfiguration_MssPackagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for Microsoft Smooth Streaming packaging.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the packaging configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-packagingconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    cfn_packaging_configuration_props = mediapackage.CfnPackagingConfigurationProps(\n        id="id",\n        packaging_group_id="packagingGroupId",\n\n        # the properties below are optional\n        cmaf_package=mediapackage.CfnPackagingConfiguration.CmafPackageProperty(\n            hls_manifests=[mediapackage.CfnPackagingConfiguration.HlsManifestProperty(\n                ad_markers="adMarkers",\n                include_iframe_only_stream=False,\n                manifest_name="manifestName",\n                program_date_time_interval_seconds=123,\n                repeat_ext_xKey=False,\n                stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n                    max_video_bits_per_second=123,\n                    min_video_bits_per_second=123,\n                    stream_order="streamOrder"\n                )\n            )],\n\n            # the properties below are optional\n            encryption=mediapackage.CfnPackagingConfiguration.CmafEncryptionProperty(\n                speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n                    role_arn="roleArn",\n                    system_ids=["systemIds"],\n                    url="url",\n\n                    # the properties below are optional\n                    encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                        preset_speke20_audio="presetSpeke20Audio",\n                        preset_speke20_video="presetSpeke20Video"\n                    )\n                )\n            ),\n            include_encoder_configuration_in_segments=False,\n            segment_duration_seconds=123\n        ),\n        dash_package=mediapackage.CfnPackagingConfiguration.DashPackageProperty(\n            dash_manifests=[mediapackage.CfnPackagingConfiguration.DashManifestProperty(\n                manifest_layout="manifestLayout",\n                manifest_name="manifestName",\n                min_buffer_time_seconds=123,\n                profile="profile",\n                scte_markers_source="scteMarkersSource",\n                stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n                    max_video_bits_per_second=123,\n                    min_video_bits_per_second=123,\n                    stream_order="streamOrder"\n                )\n            )],\n\n            # the properties below are optional\n            encryption=mediapackage.CfnPackagingConfiguration.DashEncryptionProperty(\n                speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n                    role_arn="roleArn",\n                    system_ids=["systemIds"],\n                    url="url",\n\n                    # the properties below are optional\n                    encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                        preset_speke20_audio="presetSpeke20Audio",\n                        preset_speke20_video="presetSpeke20Video"\n                    )\n                )\n            ),\n            include_encoder_configuration_in_segments=False,\n            include_iframe_only_stream=False,\n            period_triggers=["periodTriggers"],\n            segment_duration_seconds=123,\n            segment_template_format="segmentTemplateFormat"\n        ),\n        hls_package=mediapackage.CfnPackagingConfiguration.HlsPackageProperty(\n            hls_manifests=[mediapackage.CfnPackagingConfiguration.HlsManifestProperty(\n                ad_markers="adMarkers",\n                include_iframe_only_stream=False,\n                manifest_name="manifestName",\n                program_date_time_interval_seconds=123,\n                repeat_ext_xKey=False,\n                stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n                    max_video_bits_per_second=123,\n                    min_video_bits_per_second=123,\n                    stream_order="streamOrder"\n                )\n            )],\n\n            # the properties below are optional\n            encryption=mediapackage.CfnPackagingConfiguration.HlsEncryptionProperty(\n                speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n                    role_arn="roleArn",\n                    system_ids=["systemIds"],\n                    url="url",\n\n                    # the properties below are optional\n                    encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                        preset_speke20_audio="presetSpeke20Audio",\n                        preset_speke20_video="presetSpeke20Video"\n                    )\n                ),\n\n                # the properties below are optional\n                constant_initialization_vector="constantInitializationVector",\n                encryption_method="encryptionMethod"\n            ),\n            include_dvb_subtitles=False,\n            segment_duration_seconds=123,\n            use_audio_rendition_group=False\n        ),\n        mss_package=mediapackage.CfnPackagingConfiguration.MssPackageProperty(\n            mss_manifests=[mediapackage.CfnPackagingConfiguration.MssManifestProperty(\n                manifest_name="manifestName",\n                stream_selection=mediapackage.CfnPackagingConfiguration.StreamSelectionProperty(\n                    max_video_bits_per_second=123,\n                    min_video_bits_per_second=123,\n                    stream_order="streamOrder"\n                )\n            )],\n\n            # the properties below are optional\n            encryption=mediapackage.CfnPackagingConfiguration.MssEncryptionProperty(\n                speke_key_provider=mediapackage.CfnPackagingConfiguration.SpekeKeyProviderProperty(\n                    role_arn="roleArn",\n                    system_ids=["systemIds"],\n                    url="url",\n\n                    # the properties below are optional\n                    encryption_contract_configuration=mediapackage.CfnPackagingConfiguration.EncryptionContractConfigurationProperty(\n                        preset_speke20_audio="presetSpeke20Audio",\n                        preset_speke20_video="presetSpeke20Video"\n                    )\n                )\n            ),\n            segment_duration_seconds=123\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['packaging_group_id', 'cmaf_package', 'dash_package', 'hls_package', 'mss_package', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackage.CfnPackagingGroupProps
class CfnPackagingGroupPropsDef(BaseCfnProperty):
    authorization: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingGroup_AuthorizationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Parameters for CDN authorization.\n')
    egress_access_logs: typing.Union[models.UnsupportedResource, models.aws_mediapackage.CfnPackagingGroup_LogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration parameters for egress access logging.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to assign to the packaging group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-packaginggroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackage as mediapackage\n\n    cfn_packaging_group_props = mediapackage.CfnPackagingGroupProps(\n        id="id",\n\n        # the properties below are optional\n        authorization=mediapackage.CfnPackagingGroup.AuthorizationProperty(\n            cdn_identifier_secret="cdnIdentifierSecret",\n            secrets_role_arn="secretsRoleArn"\n        ),\n        egress_access_logs=mediapackage.CfnPackagingGroup.LogConfigurationProperty(\n            log_group_name="logGroupName"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['authorization', 'egress_access_logs', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackage.CfnPackagingGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnAsset_EgressEndpointProperty: typing.Optional[dict[str, CfnAsset_EgressEndpointPropertyDef]] = pydantic.Field(None)
    CfnChannel_HlsIngestProperty: typing.Optional[dict[str, CfnChannel_HlsIngestPropertyDef]] = pydantic.Field(None)
    CfnChannel_IngestEndpointProperty: typing.Optional[dict[str, CfnChannel_IngestEndpointPropertyDef]] = pydantic.Field(None)
    CfnChannel_LogConfigurationProperty: typing.Optional[dict[str, CfnChannel_LogConfigurationPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_AuthorizationProperty: typing.Optional[dict[str, CfnOriginEndpoint_AuthorizationPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_CmafEncryptionProperty: typing.Optional[dict[str, CfnOriginEndpoint_CmafEncryptionPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_CmafPackageProperty: typing.Optional[dict[str, CfnOriginEndpoint_CmafPackagePropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_DashEncryptionProperty: typing.Optional[dict[str, CfnOriginEndpoint_DashEncryptionPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_DashPackageProperty: typing.Optional[dict[str, CfnOriginEndpoint_DashPackagePropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_EncryptionContractConfigurationProperty: typing.Optional[dict[str, CfnOriginEndpoint_EncryptionContractConfigurationPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_HlsEncryptionProperty: typing.Optional[dict[str, CfnOriginEndpoint_HlsEncryptionPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_HlsManifestProperty: typing.Optional[dict[str, CfnOriginEndpoint_HlsManifestPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_HlsPackageProperty: typing.Optional[dict[str, CfnOriginEndpoint_HlsPackagePropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_MssEncryptionProperty: typing.Optional[dict[str, CfnOriginEndpoint_MssEncryptionPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_MssPackageProperty: typing.Optional[dict[str, CfnOriginEndpoint_MssPackagePropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_SpekeKeyProviderProperty: typing.Optional[dict[str, CfnOriginEndpoint_SpekeKeyProviderPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_StreamSelectionProperty: typing.Optional[dict[str, CfnOriginEndpoint_StreamSelectionPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_CmafEncryptionProperty: typing.Optional[dict[str, CfnPackagingConfiguration_CmafEncryptionPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_CmafPackageProperty: typing.Optional[dict[str, CfnPackagingConfiguration_CmafPackagePropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_DashEncryptionProperty: typing.Optional[dict[str, CfnPackagingConfiguration_DashEncryptionPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_DashManifestProperty: typing.Optional[dict[str, CfnPackagingConfiguration_DashManifestPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_DashPackageProperty: typing.Optional[dict[str, CfnPackagingConfiguration_DashPackagePropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_EncryptionContractConfigurationProperty: typing.Optional[dict[str, CfnPackagingConfiguration_EncryptionContractConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_HlsEncryptionProperty: typing.Optional[dict[str, CfnPackagingConfiguration_HlsEncryptionPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_HlsManifestProperty: typing.Optional[dict[str, CfnPackagingConfiguration_HlsManifestPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_HlsPackageProperty: typing.Optional[dict[str, CfnPackagingConfiguration_HlsPackagePropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_MssEncryptionProperty: typing.Optional[dict[str, CfnPackagingConfiguration_MssEncryptionPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_MssManifestProperty: typing.Optional[dict[str, CfnPackagingConfiguration_MssManifestPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_MssPackageProperty: typing.Optional[dict[str, CfnPackagingConfiguration_MssPackagePropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_SpekeKeyProviderProperty: typing.Optional[dict[str, CfnPackagingConfiguration_SpekeKeyProviderPropertyDef]] = pydantic.Field(None)
    CfnPackagingConfiguration_StreamSelectionProperty: typing.Optional[dict[str, CfnPackagingConfiguration_StreamSelectionPropertyDef]] = pydantic.Field(None)
    CfnPackagingGroup_AuthorizationProperty: typing.Optional[dict[str, CfnPackagingGroup_AuthorizationPropertyDef]] = pydantic.Field(None)
    CfnPackagingGroup_LogConfigurationProperty: typing.Optional[dict[str, CfnPackagingGroup_LogConfigurationPropertyDef]] = pydantic.Field(None)
    CfnAsset: typing.Optional[dict[str, CfnAssetDef]] = pydantic.Field(None)
    CfnChannel: typing.Optional[dict[str, CfnChannelDef]] = pydantic.Field(None)
    CfnOriginEndpoint: typing.Optional[dict[str, CfnOriginEndpointDef]] = pydantic.Field(None)
    CfnPackagingConfiguration: typing.Optional[dict[str, CfnPackagingConfigurationDef]] = pydantic.Field(None)
    CfnPackagingGroup: typing.Optional[dict[str, CfnPackagingGroupDef]] = pydantic.Field(None)
    CfnAssetProps: typing.Optional[dict[str, CfnAssetPropsDef]] = pydantic.Field(None)
    CfnChannelProps: typing.Optional[dict[str, CfnChannelPropsDef]] = pydantic.Field(None)
    CfnOriginEndpointProps: typing.Optional[dict[str, CfnOriginEndpointPropsDef]] = pydantic.Field(None)
    CfnPackagingConfigurationProps: typing.Optional[dict[str, CfnPackagingConfigurationPropsDef]] = pydantic.Field(None)
    CfnPackagingGroupProps: typing.Optional[dict[str, CfnPackagingGroupPropsDef]] = pydantic.Field(None)
    ...
