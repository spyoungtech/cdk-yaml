from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_route53_patterns.HttpsRedirect
class HttpsRedirectDef(BaseConstruct):
    target_domain: str = pydantic.Field(..., description='The redirect target fully qualified domain name (FQDN). An alias record will be created that points to your CloudFront distribution. Root domain or sub-domain can be supplied.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='Hosted zone of the domain which will be used to create alias record(s) from domain names in the hosted zone to the target domain. The hosted zone must contain entries for the domain name(s) supplied through ``recordNames`` that will redirect to the target domain. Domain names in the hosted zone can include a specific domain (example.com) and its subdomains (acme.example.com, zenith.example.com).\n')
    certificate: typing.Optional[typing.Union[models.aws_certificatemanager.CertificateDef, models.aws_certificatemanager.DnsValidatedCertificateDef, models.aws_certificatemanager.PrivateCertificateDef]] = pydantic.Field(None, description='The AWS Certificate Manager (ACM) certificate that will be associated with the CloudFront distribution that will be created. If provided, the certificate must be stored in us-east-1 (N. Virginia) Default: - A new certificate is created in us-east-1 (N. Virginia)\n')
    record_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The domain names that will redirect to ``targetDomain``. Default: - the domain name of the hosted zone')
    _init_params: typing.ClassVar[list[str]] = ['target_domain', 'zone', 'certificate', 'record_names']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53_patterns.HttpsRedirect'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_route53_patterns.HttpsRedirectProps
class HttpsRedirectPropsDef(BaseStruct):
    target_domain: str = pydantic.Field(..., description='The redirect target fully qualified domain name (FQDN). An alias record will be created that points to your CloudFront distribution. Root domain or sub-domain can be supplied.\n')
    zone: typing.Union[models.aws_route53.HostedZoneDef, models.aws_route53.PrivateHostedZoneDef, models.aws_route53.PublicHostedZoneDef] = pydantic.Field(..., description='Hosted zone of the domain which will be used to create alias record(s) from domain names in the hosted zone to the target domain. The hosted zone must contain entries for the domain name(s) supplied through ``recordNames`` that will redirect to the target domain. Domain names in the hosted zone can include a specific domain (example.com) and its subdomains (acme.example.com, zenith.example.com).\n')
    certificate: typing.Optional[typing.Union[models.aws_certificatemanager.CertificateDef, models.aws_certificatemanager.DnsValidatedCertificateDef, models.aws_certificatemanager.PrivateCertificateDef]] = pydantic.Field(None, description='The AWS Certificate Manager (ACM) certificate that will be associated with the CloudFront distribution that will be created. If provided, the certificate must be stored in us-east-1 (N. Virginia) Default: - A new certificate is created in us-east-1 (N. Virginia)\n')
    record_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The domain names that will redirect to ``targetDomain``. Default: - the domain name of the hosted zone\n\n:exampleMetadata: infused\n\nExample::\n\n    patterns.HttpsRedirect(self, "Redirect",\n        record_names=["foo.example.com"],\n        target_domain="bar.example.com",\n        zone=route53.HostedZone.from_hosted_zone_attributes(self, "HostedZone",\n            hosted_zone_id="ID",\n            zone_name="example.com"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_domain', 'zone', 'certificate', 'record_names']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_route53_patterns.HttpsRedirectProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[HttpsRedirectPropsDefConfig] = pydantic.Field(None)


class HttpsRedirectPropsDefConfig(pydantic.BaseModel):
    zone_config: typing.Optional[models._interface_methods.AwsRoute53IHostedZoneDefConfig] = pydantic.Field(None)


import models

class ModuleModel(pydantic.BaseModel):
    HttpsRedirect: typing.Optional[dict[str, HttpsRedirectDef]] = pydantic.Field(None)
    HttpsRedirectProps: typing.Optional[dict[str, HttpsRedirectPropsDef]] = pydantic.Field(None)
    ...
