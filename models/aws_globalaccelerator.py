from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_globalaccelerator.RawEndpoint
class RawEndpointDef(BaseClass):
    endpoint_id: str = pydantic.Field(..., description='Identifier of the endpoint. Load balancer ARN, instance ID or EIP allocation ID.')
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Forward the client IP address. GlobalAccelerator will create Network Interfaces in your VPC in order to preserve the client IP address. Only applies to Application Load Balancers and EC2 instances. Client IP address preservation is supported only in specific AWS Regions. See the GlobalAccelerator Developer Guide for a list. Default: true if possible and available\n')
    region: typing.Optional[str] = pydantic.Field(None, description='The region where this endpoint is located. Default: - Unknown what region this endpoint is located\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_id', 'preserve_client_ip', 'region', 'weight']
    _method_names: typing.ClassVar[list[str]] = ['render_endpoint_configuration']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.RawEndpoint'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[RawEndpointDefConfig] = pydantic.Field(None)


class RawEndpointDefConfig(pydantic.BaseModel):
    render_endpoint_configuration: typing.Optional[bool] = pydantic.Field(None, description='Render the endpoint to an endpoint configuration.')


#  autogenerated from aws_cdk.aws_globalaccelerator.Accelerator
class AcceleratorDef(BaseConstruct):
    accelerator_name: typing.Optional[str] = pydantic.Field(None, description='The name of the accelerator. Default: - resource ID\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether the accelerator is enabled. Default: true')
    _init_params: typing.ClassVar[list[str]] = ['accelerator_name', 'enabled']
    _method_names: typing.ClassVar[list[str]] = ['add_listener', 'apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_accelerator_attributes']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.Accelerator'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_accelerator_attributes']
    ...


    from_accelerator_attributes: typing.Optional[AcceleratorDefFromAcceleratorAttributesParams] = pydantic.Field(None, description='import from attributes.')
    resource_config: typing.Optional[AcceleratorDefConfig] = pydantic.Field(None)


class AcceleratorDefConfig(pydantic.BaseModel):
    add_listener: typing.Optional[list[AcceleratorDefAddListenerParams]] = pydantic.Field(None, description='Add a listener to the accelerator.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class AcceleratorDefAddListenerParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    port_ranges: typing.Sequence[typing.Union[models.aws_globalaccelerator.PortRangeDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The list of port ranges for the connections from clients to the accelerator.\n')
    client_affinity: typing.Optional[aws_cdk.aws_globalaccelerator.ClientAffinity] = pydantic.Field(None, description='Client affinity to direct all requests from a user to the same endpoint. If you have stateful applications, client affinity lets you direct all requests from a user to the same endpoint. By default, each connection from each client is routed to seperate endpoints. Set client affinity to SOURCE_IP to route all connections from a single client to the same endpoint. Default: ClientAffinity.NONE\n')
    listener_name: typing.Optional[str] = pydantic.Field(None, description='Name of the listener. Default: - logical ID of the resource\n')
    protocol: typing.Optional[aws_cdk.aws_globalaccelerator.ConnectionProtocol] = pydantic.Field(None, description='The protocol for the connections from clients to the accelerator. Default: ConnectionProtocol.TCP')
    return_config: typing.Optional[list[models.aws_globalaccelerator.ListenerDefConfig]] = pydantic.Field(None)
    ...

class AcceleratorDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class AcceleratorDefFromAcceleratorAttributesParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    accelerator_arn: str = pydantic.Field(..., description='The ARN of the accelerator.\n')
    dns_name: str = pydantic.Field(..., description='The DNS name of the accelerator.')
    ...


#  autogenerated from aws_cdk.aws_globalaccelerator.EndpointGroup
class EndpointGroupDef(BaseConstruct):
    listener: typing.Union[models.aws_globalaccelerator.ListenerDef] = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the listener.\n')
    endpoint_group_name: typing.Optional[str] = pydantic.Field(None, description='Name of the endpoint group. Default: - logical ID of the resource\n')
    endpoints: typing.Optional[typing.Sequence[typing.Union[models.aws_globalaccelerator.RawEndpointDef, models.aws_globalaccelerator_endpoints.ApplicationLoadBalancerEndpointDef, models.aws_globalaccelerator_endpoints.CfnEipEndpointDef, models.aws_globalaccelerator_endpoints.InstanceEndpointDef, models.aws_globalaccelerator_endpoints.NetworkLoadBalancerEndpointDef]]] = pydantic.Field(None, description='Initial list of endpoints for this group. Default: - Group is initially empty\n')
    health_check_interval: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The time between health checks for each endpoint. Must be either 10 or 30 seconds. Default: Duration.seconds(30)\n')
    health_check_path: typing.Optional[str] = pydantic.Field(None, description="The ping path for health checks (if the protocol is HTTP(S)). Default: '/'\n")
    health_check_port: typing.Union[int, float, None] = pydantic.Field(None, description="The port used to perform health checks. Default: - The listener's port\n")
    health_check_protocol: typing.Optional[aws_cdk.aws_globalaccelerator.HealthCheckProtocol] = pydantic.Field(None, description='The protocol used to perform health checks. Default: HealthCheckProtocol.TCP\n')
    health_check_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. Default: 3\n')
    port_overrides: typing.Optional[typing.Sequence[typing.Union[models.aws_globalaccelerator.PortOverrideDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Override the destination ports used to route traffic to an endpoint. Unless overridden, the port used to hit the endpoint will be the same as the port that traffic arrives on at the listener. Default: - No overrides\n')
    region: typing.Optional[str] = pydantic.Field(None, description="The AWS Region where the endpoint group is located. Default: - region of the first endpoint in this group, or the stack region if that region can't be determined\n")
    traffic_dial_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of traffic to send to this AWS Region. The percentage is applied to the traffic that would otherwise have been routed to the Region based on optimal routing. Additional traffic is distributed to other endpoint groups for this listener. Default: 100')
    _init_params: typing.ClassVar[list[str]] = ['listener', 'endpoint_group_name', 'endpoints', 'health_check_interval', 'health_check_path', 'health_check_port', 'health_check_protocol', 'health_check_threshold', 'port_overrides', 'region', 'traffic_dial_percentage']
    _method_names: typing.ClassVar[list[str]] = ['add_endpoint', 'apply_removal_policy', 'connections_peer']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_endpoint_group_arn']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.EndpointGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_endpoint_group_arn']
    ...


    from_endpoint_group_arn: typing.Optional[EndpointGroupDefFromEndpointGroupArnParams] = pydantic.Field(None, description='import from ARN.')
    resource_config: typing.Optional[EndpointGroupDefConfig] = pydantic.Field(None)


class EndpointGroupDefConfig(pydantic.BaseModel):
    add_endpoint: typing.Optional[list[EndpointGroupDefAddEndpointParams]] = pydantic.Field(None, description='Add an endpoint.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    connections_peer: typing.Optional[list[EndpointGroupDefConnectionsPeerParams]] = pydantic.Field(None, description="Return an object that represents the Accelerator's Security Group.\nUses a Custom Resource to look up the Security Group that Accelerator\ncreates at deploy time. Requires your VPC ID to perform the lookup.\n\nThe Security Group will only be created if you enable **Client IP\nPreservation** on any of the endpoints.\n\nYou cannot manipulate the rules inside this security group, but you can\nuse this security group as a Peer in Connections rules on other\nconstructs.")

class EndpointGroupDefAddEndpointParams(pydantic.BaseModel):
    endpoint: typing.Union[models.aws_globalaccelerator.RawEndpointDef, models.aws_globalaccelerator_endpoints.ApplicationLoadBalancerEndpointDef, models.aws_globalaccelerator_endpoints.CfnEipEndpointDef, models.aws_globalaccelerator_endpoints.InstanceEndpointDef, models.aws_globalaccelerator_endpoints.NetworkLoadBalancerEndpointDef] = pydantic.Field(..., description='-')
    ...

class EndpointGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class EndpointGroupDefConnectionsPeerParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    vpc: typing.Union[models.aws_ec2.VpcDef] = pydantic.Field(..., description='-')
    ...

class EndpointGroupDefFromEndpointGroupArnParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    endpoint_group_arn: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_globalaccelerator.Listener
class ListenerDef(BaseConstruct):
    accelerator: typing.Union[models.aws_globalaccelerator.AcceleratorDef] = pydantic.Field(..., description='The accelerator for this listener.\n')
    port_ranges: typing.Sequence[typing.Union[models.aws_globalaccelerator.PortRangeDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The list of port ranges for the connections from clients to the accelerator.\n')
    client_affinity: typing.Optional[aws_cdk.aws_globalaccelerator.ClientAffinity] = pydantic.Field(None, description='Client affinity to direct all requests from a user to the same endpoint. If you have stateful applications, client affinity lets you direct all requests from a user to the same endpoint. By default, each connection from each client is routed to seperate endpoints. Set client affinity to SOURCE_IP to route all connections from a single client to the same endpoint. Default: ClientAffinity.NONE\n')
    listener_name: typing.Optional[str] = pydantic.Field(None, description='Name of the listener. Default: - logical ID of the resource\n')
    protocol: typing.Optional[aws_cdk.aws_globalaccelerator.ConnectionProtocol] = pydantic.Field(None, description='The protocol for the connections from clients to the accelerator. Default: ConnectionProtocol.TCP')
    _init_params: typing.ClassVar[list[str]] = ['accelerator', 'port_ranges', 'client_affinity', 'listener_name', 'protocol']
    _method_names: typing.ClassVar[list[str]] = ['add_endpoint_group', 'apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_listener_arn']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.Listener'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_listener_arn']
    ...


    from_listener_arn: typing.Optional[ListenerDefFromListenerArnParams] = pydantic.Field(None, description='import from ARN.')
    resource_config: typing.Optional[ListenerDefConfig] = pydantic.Field(None)


class ListenerDefConfig(pydantic.BaseModel):
    add_endpoint_group: typing.Optional[list[ListenerDefAddEndpointGroupParams]] = pydantic.Field(None, description='Add a new endpoint group to this listener.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class ListenerDefAddEndpointGroupParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    endpoint_group_name: typing.Optional[str] = pydantic.Field(None, description='Name of the endpoint group. Default: - logical ID of the resource\n')
    endpoints: typing.Optional[typing.Sequence[typing.Union[models.aws_globalaccelerator.RawEndpointDef, models.aws_globalaccelerator_endpoints.ApplicationLoadBalancerEndpointDef, models.aws_globalaccelerator_endpoints.CfnEipEndpointDef, models.aws_globalaccelerator_endpoints.InstanceEndpointDef, models.aws_globalaccelerator_endpoints.NetworkLoadBalancerEndpointDef]]] = pydantic.Field(None, description='Initial list of endpoints for this group. Default: - Group is initially empty\n')
    health_check_interval: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The time between health checks for each endpoint. Must be either 10 or 30 seconds. Default: Duration.seconds(30)\n')
    health_check_path: typing.Optional[str] = pydantic.Field(None, description="The ping path for health checks (if the protocol is HTTP(S)). Default: '/'\n")
    health_check_port: typing.Union[int, float, None] = pydantic.Field(None, description="The port used to perform health checks. Default: - The listener's port\n")
    health_check_protocol: typing.Optional[aws_cdk.aws_globalaccelerator.HealthCheckProtocol] = pydantic.Field(None, description='The protocol used to perform health checks. Default: HealthCheckProtocol.TCP\n')
    health_check_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. Default: 3\n')
    port_overrides: typing.Optional[typing.Sequence[typing.Union[models.aws_globalaccelerator.PortOverrideDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Override the destination ports used to route traffic to an endpoint. Unless overridden, the port used to hit the endpoint will be the same as the port that traffic arrives on at the listener. Default: - No overrides\n')
    region: typing.Optional[str] = pydantic.Field(None, description="The AWS Region where the endpoint group is located. Default: - region of the first endpoint in this group, or the stack region if that region can't be determined\n")
    traffic_dial_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of traffic to send to this AWS Region. The percentage is applied to the traffic that would otherwise have been routed to the Region based on optimal routing. Additional traffic is distributed to other endpoint groups for this listener. Default: 100')
    return_config: typing.Optional[list[models.aws_globalaccelerator.EndpointGroupDefConfig]] = pydantic.Field(None)
    ...

class ListenerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class ListenerDefFromListenerArnParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    listener_arn: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_globalaccelerator.AcceleratorAttributes
class AcceleratorAttributesDef(BaseStruct):
    accelerator_arn: str = pydantic.Field(..., description='The ARN of the accelerator.\n')
    dns_name: str = pydantic.Field(..., description='The DNS name of the accelerator.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    accelerator_attributes = globalaccelerator.AcceleratorAttributes(\n        accelerator_arn="acceleratorArn",\n        dns_name="dnsName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['accelerator_arn', 'dns_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.AcceleratorAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.AcceleratorProps
class AcceleratorPropsDef(BaseStruct):
    accelerator_name: typing.Optional[str] = pydantic.Field(None, description='The name of the accelerator. Default: - resource ID\n')
    enabled: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether the accelerator is enabled. Default: true\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    accelerator_props = globalaccelerator.AcceleratorProps(\n        accelerator_name="acceleratorName",\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['accelerator_name', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.AcceleratorProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty
class CfnEndpointGroup_EndpointConfigurationPropertyDef(BaseStruct):
    endpoint_id: str = pydantic.Field(..., description='An ID for the endpoint. If the endpoint is a Network Load Balancer or Application Load Balancer, this is the Amazon Resource Name (ARN) of the resource. If the endpoint is an Elastic IP address, this is the Elastic IP address allocation ID. For Amazon EC2 instances, this is the EC2 instance ID. A resource must be valid and active when you add it as an endpoint. An Application Load Balancer can be either internal or internet-facing.\n')
    client_ip_preservation_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="Indicates whether client IP address preservation is enabled for an Application Load Balancer endpoint. The value is true or false. The default value is true for new accelerators. If the value is set to true, the client's IP address is preserved in the ``X-Forwarded-For`` request header as traffic travels to applications on the Application Load Balancer endpoint fronted by the accelerator. For more information, see `Preserve Client IP Addresses <https://docs.aws.amazon.com/global-accelerator/latest/dg/preserve-client-ip-address.html>`_ in the *AWS Global Accelerator Developer Guide* .\n")
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='The weight associated with the endpoint. When you add weights to endpoints, you configure Global Accelerator to route traffic based on proportions that you specify. For example, you might specify endpoint weights of 4, 5, 5, and 6 (sum=20). The result is that 4/20 of your traffic, on average, is routed to the first endpoint, 5/20 is routed both to the second and third endpoints, and 6/20 is routed to the last endpoint. For more information, see `Endpoint Weights <https://docs.aws.amazon.com/global-accelerator/latest/dg/about-endpoints-endpoint-weights.html>`_ in the *AWS Global Accelerator Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-globalaccelerator-endpointgroup-endpointconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    endpoint_configuration_property = globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty(\n        endpoint_id="endpointId",\n\n        # the properties below are optional\n        client_ip_preservation_enabled=False,\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_id', 'client_ip_preservation_enabled', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.CfnEndpointGroup.PortOverrideProperty
class CfnEndpointGroup_PortOverridePropertyDef(BaseStruct):
    endpoint_port: typing.Union[int, float] = pydantic.Field(..., description='The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.\n')
    listener_port: typing.Union[int, float] = pydantic.Field(..., description='The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-globalaccelerator-endpointgroup-portoverride.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    port_override_property = globalaccelerator.CfnEndpointGroup.PortOverrideProperty(\n        endpoint_port=123,\n        listener_port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_port', 'listener_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.CfnEndpointGroup.PortOverrideProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.CfnListener.PortRangeProperty
class CfnListener_PortRangePropertyDef(BaseStruct):
    from_port: typing.Union[int, float] = pydantic.Field(..., description='The first port in the range of ports, inclusive.\n')
    to_port: typing.Union[int, float] = pydantic.Field(..., description='The last port in the range of ports, inclusive.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-globalaccelerator-listener-portrange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    port_range_property = globalaccelerator.CfnListener.PortRangeProperty(\n        from_port=123,\n        to_port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['from_port', 'to_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.CfnListener.PortRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.EndpointGroupOptions
class EndpointGroupOptionsDef(BaseStruct):
    endpoint_group_name: typing.Optional[str] = pydantic.Field(None, description='Name of the endpoint group. Default: - logical ID of the resource\n')
    endpoints: typing.Optional[typing.Sequence[typing.Union[models.aws_globalaccelerator.RawEndpointDef, models.aws_globalaccelerator_endpoints.ApplicationLoadBalancerEndpointDef, models.aws_globalaccelerator_endpoints.CfnEipEndpointDef, models.aws_globalaccelerator_endpoints.InstanceEndpointDef, models.aws_globalaccelerator_endpoints.NetworkLoadBalancerEndpointDef]]] = pydantic.Field(None, description='Initial list of endpoints for this group. Default: - Group is initially empty\n')
    health_check_interval: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The time between health checks for each endpoint. Must be either 10 or 30 seconds. Default: Duration.seconds(30)\n')
    health_check_path: typing.Optional[str] = pydantic.Field(None, description="The ping path for health checks (if the protocol is HTTP(S)). Default: '/'\n")
    health_check_port: typing.Union[int, float, None] = pydantic.Field(None, description="The port used to perform health checks. Default: - The listener's port\n")
    health_check_protocol: typing.Optional[aws_cdk.aws_globalaccelerator.HealthCheckProtocol] = pydantic.Field(None, description='The protocol used to perform health checks. Default: HealthCheckProtocol.TCP\n')
    health_check_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. Default: 3\n')
    port_overrides: typing.Optional[typing.Sequence[typing.Union[models.aws_globalaccelerator.PortOverrideDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Override the destination ports used to route traffic to an endpoint. Unless overridden, the port used to hit the endpoint will be the same as the port that traffic arrives on at the listener. Default: - No overrides\n')
    region: typing.Optional[str] = pydantic.Field(None, description="The AWS Region where the endpoint group is located. Default: - region of the first endpoint in this group, or the stack region if that region can't be determined\n")
    traffic_dial_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of traffic to send to this AWS Region. The percentage is applied to the traffic that would otherwise have been routed to the Region based on optimal routing. Additional traffic is distributed to other endpoint groups for this listener. Default: 100\n\n:exampleMetadata: infused\n\nExample::\n\n    # alb: elbv2.ApplicationLoadBalancer\n    # listener: globalaccelerator.Listener\n\n\n    listener.add_endpoint_group("Group",\n        endpoints=[\n            ga_endpoints.ApplicationLoadBalancerEndpoint(alb,\n                weight=128,\n                preserve_client_ip=True\n            )\n        ]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_group_name', 'endpoints', 'health_check_interval', 'health_check_path', 'health_check_port', 'health_check_protocol', 'health_check_threshold', 'port_overrides', 'region', 'traffic_dial_percentage']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.EndpointGroupOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.EndpointGroupProps
class EndpointGroupPropsDef(BaseStruct):
    endpoint_group_name: typing.Optional[str] = pydantic.Field(None, description='Name of the endpoint group. Default: - logical ID of the resource\n')
    endpoints: typing.Optional[typing.Sequence[typing.Union[models.aws_globalaccelerator.RawEndpointDef, models.aws_globalaccelerator_endpoints.ApplicationLoadBalancerEndpointDef, models.aws_globalaccelerator_endpoints.CfnEipEndpointDef, models.aws_globalaccelerator_endpoints.InstanceEndpointDef, models.aws_globalaccelerator_endpoints.NetworkLoadBalancerEndpointDef]]] = pydantic.Field(None, description='Initial list of endpoints for this group. Default: - Group is initially empty\n')
    health_check_interval: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The time between health checks for each endpoint. Must be either 10 or 30 seconds. Default: Duration.seconds(30)\n')
    health_check_path: typing.Optional[str] = pydantic.Field(None, description="The ping path for health checks (if the protocol is HTTP(S)). Default: '/'\n")
    health_check_port: typing.Union[int, float, None] = pydantic.Field(None, description="The port used to perform health checks. Default: - The listener's port\n")
    health_check_protocol: typing.Optional[aws_cdk.aws_globalaccelerator.HealthCheckProtocol] = pydantic.Field(None, description='The protocol used to perform health checks. Default: HealthCheckProtocol.TCP\n')
    health_check_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. Default: 3\n')
    port_overrides: typing.Optional[typing.Sequence[typing.Union[models.aws_globalaccelerator.PortOverrideDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Override the destination ports used to route traffic to an endpoint. Unless overridden, the port used to hit the endpoint will be the same as the port that traffic arrives on at the listener. Default: - No overrides\n')
    region: typing.Optional[str] = pydantic.Field(None, description="The AWS Region where the endpoint group is located. Default: - region of the first endpoint in this group, or the stack region if that region can't be determined\n")
    traffic_dial_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of traffic to send to this AWS Region. The percentage is applied to the traffic that would otherwise have been routed to the Region based on optimal routing. Additional traffic is distributed to other endpoint groups for this listener. Default: 100\n')
    listener: typing.Union[models.aws_globalaccelerator.ListenerDef] = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the listener.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    # endpoint: globalaccelerator.IEndpoint\n    # listener: globalaccelerator.Listener\n\n    endpoint_group_props = globalaccelerator.EndpointGroupProps(\n        listener=listener,\n\n        # the properties below are optional\n        endpoint_group_name="endpointGroupName",\n        endpoints=[endpoint],\n        health_check_interval=cdk.Duration.minutes(30),\n        health_check_path="healthCheckPath",\n        health_check_port=123,\n        health_check_protocol=globalaccelerator.HealthCheckProtocol.TCP,\n        health_check_threshold=123,\n        port_overrides=[globalaccelerator.PortOverride(\n            endpoint_port=123,\n            listener_port=123\n        )],\n        region="region",\n        traffic_dial_percentage=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_group_name', 'endpoints', 'health_check_interval', 'health_check_path', 'health_check_port', 'health_check_protocol', 'health_check_threshold', 'port_overrides', 'region', 'traffic_dial_percentage', 'listener']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.EndpointGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.ListenerOptions
class ListenerOptionsDef(BaseStruct):
    port_ranges: typing.Sequence[typing.Union[models.aws_globalaccelerator.PortRangeDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The list of port ranges for the connections from clients to the accelerator.\n')
    client_affinity: typing.Optional[aws_cdk.aws_globalaccelerator.ClientAffinity] = pydantic.Field(None, description='Client affinity to direct all requests from a user to the same endpoint. If you have stateful applications, client affinity lets you direct all requests from a user to the same endpoint. By default, each connection from each client is routed to seperate endpoints. Set client affinity to SOURCE_IP to route all connections from a single client to the same endpoint. Default: ClientAffinity.NONE\n')
    listener_name: typing.Optional[str] = pydantic.Field(None, description='Name of the listener. Default: - logical ID of the resource\n')
    protocol: typing.Optional[aws_cdk.aws_globalaccelerator.ConnectionProtocol] = pydantic.Field(None, description='The protocol for the connections from clients to the accelerator. Default: ConnectionProtocol.TCP\n\n:exampleMetadata: infused\n\nExample::\n\n    # Create an Accelerator\n    accelerator = globalaccelerator.Accelerator(self, "Accelerator")\n\n    # Create a Listener\n    listener = accelerator.add_listener("Listener",\n        port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n        ]\n    )\n\n    # Import the Load Balancers\n    nlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, "NLB1",\n        load_balancer_arn="arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b"\n    )\n    nlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, "NLB2",\n        load_balancer_arn="arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1"\n    )\n\n    # Add one EndpointGroup for each Region we are targeting\n    listener.add_endpoint_group("Group1",\n        endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n    )\n    listener.add_endpoint_group("Group2",\n        # Imported load balancers automatically calculate their Region from the ARN.\n        # If you are load balancing to other resources, you must also pass a `region`\n        # parameter here.\n        endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['port_ranges', 'client_affinity', 'listener_name', 'protocol']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.ListenerOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.ListenerProps
class ListenerPropsDef(BaseStruct):
    port_ranges: typing.Sequence[typing.Union[models.aws_globalaccelerator.PortRangeDef, dict[str, typing.Any]]] = pydantic.Field(..., description='The list of port ranges for the connections from clients to the accelerator.\n')
    client_affinity: typing.Optional[aws_cdk.aws_globalaccelerator.ClientAffinity] = pydantic.Field(None, description='Client affinity to direct all requests from a user to the same endpoint. If you have stateful applications, client affinity lets you direct all requests from a user to the same endpoint. By default, each connection from each client is routed to seperate endpoints. Set client affinity to SOURCE_IP to route all connections from a single client to the same endpoint. Default: ClientAffinity.NONE\n')
    listener_name: typing.Optional[str] = pydantic.Field(None, description='Name of the listener. Default: - logical ID of the resource\n')
    protocol: typing.Optional[aws_cdk.aws_globalaccelerator.ConnectionProtocol] = pydantic.Field(None, description='The protocol for the connections from clients to the accelerator. Default: ConnectionProtocol.TCP\n')
    accelerator: typing.Union[models.aws_globalaccelerator.AcceleratorDef] = pydantic.Field(..., description='The accelerator for this listener.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    # accelerator: globalaccelerator.Accelerator\n\n    listener_props = globalaccelerator.ListenerProps(\n        accelerator=accelerator,\n        port_ranges=[globalaccelerator.PortRange(\n            from_port=123,\n\n            # the properties below are optional\n            to_port=123\n        )],\n\n        # the properties below are optional\n        client_affinity=globalaccelerator.ClientAffinity.NONE,\n        listener_name="listenerName",\n        protocol=globalaccelerator.ConnectionProtocol.TCP\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['port_ranges', 'client_affinity', 'listener_name', 'protocol', 'accelerator']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.ListenerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[ListenerPropsDefConfig] = pydantic.Field(None)


class ListenerPropsDefConfig(pydantic.BaseModel):
    accelerator_config: typing.Optional[models._interface_methods.AwsGlobalacceleratorIAcceleratorDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_globalaccelerator.PortOverride
class PortOverrideDef(BaseStruct):
    endpoint_port: typing.Union[int, float] = pydantic.Field(..., description='The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.\n')
    listener_port: typing.Union[int, float] = pydantic.Field(..., description='The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    port_override = globalaccelerator.PortOverride(\n        endpoint_port=123,\n        listener_port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_port', 'listener_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.PortOverride'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.PortRange
class PortRangeDef(BaseStruct):
    from_port: typing.Union[int, float] = pydantic.Field(..., description='The first port in the range of ports, inclusive.\n')
    to_port: typing.Union[int, float, None] = pydantic.Field(None, description='The last port in the range of ports, inclusive. Default: - same as ``fromPort``\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    port_range = globalaccelerator.PortRange(\n        from_port=123,\n\n        # the properties below are optional\n        to_port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['from_port', 'to_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.PortRange'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.RawEndpointProps
class RawEndpointPropsDef(BaseStruct):
    endpoint_id: str = pydantic.Field(..., description='Identifier of the endpoint. Load balancer ARN, instance ID or EIP allocation ID.\n')
    preserve_client_ip: typing.Optional[bool] = pydantic.Field(None, description='Forward the client IP address. GlobalAccelerator will create Network Interfaces in your VPC in order to preserve the client IP address. Only applies to Application Load Balancers and EC2 instances. Client IP address preservation is supported only in specific AWS Regions. See the GlobalAccelerator Developer Guide for a list. Default: true if possible and available\n')
    region: typing.Optional[str] = pydantic.Field(None, description='The region where this endpoint is located. Default: - Unknown what region this endpoint is located\n')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='Endpoint weight across all endpoints in the group. Must be a value between 0 and 255. Default: 128\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    raw_endpoint_props = globalaccelerator.RawEndpointProps(\n        endpoint_id="endpointId",\n\n        # the properties below are optional\n        preserve_client_ip=False,\n        region="region",\n        weight=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_id', 'preserve_client_ip', 'region', 'weight']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.RawEndpointProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.ClientAffinity
# skipping emum

#  autogenerated from aws_cdk.aws_globalaccelerator.ConnectionProtocol
# skipping emum

#  autogenerated from aws_cdk.aws_globalaccelerator.HealthCheckProtocol
# skipping emum

#  autogenerated from aws_cdk.aws_globalaccelerator.IAccelerator
#  skipping Interface

#  autogenerated from aws_cdk.aws_globalaccelerator.IEndpoint
#  skipping Interface

#  autogenerated from aws_cdk.aws_globalaccelerator.IEndpointGroup
#  skipping Interface

#  autogenerated from aws_cdk.aws_globalaccelerator.IListener
#  skipping Interface

#  autogenerated from aws_cdk.aws_globalaccelerator.CfnAccelerator
class CfnAcceleratorDef(BaseCfnResource):
    name: str = pydantic.Field(..., description='The name of the accelerator. The name must contain only alphanumeric characters or hyphens (-), and must not begin or end with a hyphen.\n')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether the accelerator is enabled. The value is true or false. The default value is true. If the value is set to true, the accelerator cannot be deleted. If set to false, accelerator can be deleted.\n')
    ip_addresses: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="Optionally, if you've added your own IP address pool to Global Accelerator (BYOIP), you can choose IP addresses from your own pool to use for the accelerator's static IP addresses when you create an accelerator. You can specify one or two addresses, separated by a comma. Do not include the /32 suffix. Only one IP address from each of your IP address ranges can be used for each accelerator. If you specify only one IP address from your IP address range, Global Accelerator assigns a second static IP address for the accelerator from the AWS IP address pool. Note that you can't update IP addresses for an existing accelerator. To change them, you must create a new accelerator with the new addresses. For more information, see `Bring Your Own IP Addresses (BYOIP) <https://docs.aws.amazon.com/global-accelerator/latest/dg/using-byoip.html>`_ in the *AWS Global Accelerator Developer Guide* .\n")
    ip_address_type: typing.Optional[str] = pydantic.Field(None, description='The IP address type that an accelerator supports. For a standard accelerator, the value can be IPV4 or DUAL_STACK.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Create tags for an accelerator. For more information, see `Tagging <https://docs.aws.amazon.com/global-accelerator/latest/dg/tagging-in-global-accelerator.html>`_ in the *AWS Global Accelerator Developer Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['name', 'enabled', 'ip_addresses', 'ip_address_type', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.CfnAccelerator'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAcceleratorDefConfig] = pydantic.Field(None)


class CfnAcceleratorDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnAcceleratorDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAcceleratorDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAcceleratorDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAcceleratorDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAcceleratorDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAcceleratorDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAcceleratorDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAcceleratorDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAcceleratorDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAcceleratorDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAcceleratorDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAcceleratorDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAcceleratorDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAcceleratorDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAcceleratorDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAcceleratorDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAcceleratorDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAcceleratorDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAcceleratorDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAcceleratorDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAcceleratorDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAcceleratorDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAcceleratorDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAcceleratorDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnAcceleratorDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAcceleratorDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAcceleratorDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_globalaccelerator.CfnEndpointGroup
class CfnEndpointGroupDef(BaseCfnResource):
    endpoint_group_region: str = pydantic.Field(..., description='The AWS Regions where the endpoint group is located.\n')
    listener_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the listener.\n')
    endpoint_configurations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_globalaccelerator.CfnEndpointGroup_EndpointConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The list of endpoint objects.\n')
    health_check_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The time—10 seconds or 30 seconds—between health checks for each endpoint. The default value is 30.\n')
    health_check_path: typing.Optional[str] = pydantic.Field(None, description='If the protocol is HTTP/S, then this value provides the ping path that Global Accelerator uses for the destination on the endpoints for health checks. The default is slash (/).\n')
    health_check_port: typing.Union[int, float, None] = pydantic.Field(None, description='The port that Global Accelerator uses to perform health checks on endpoints that are part of this endpoint group. The default port is the port for the listener that this endpoint group is associated with. If the listener port is a list, Global Accelerator uses the first specified port in the list of ports.\n')
    health_check_protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol that Global Accelerator uses to perform health checks on endpoints that are part of this endpoint group. The default value is TCP.\n')
    port_overrides: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_globalaccelerator.CfnEndpointGroup_PortOverridePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Allows you to override the destination ports used to route traffic to an endpoint. Using a port override lets you map a list of external destination ports (that your users send traffic to) to a list of internal destination ports that you want an application endpoint to receive traffic on.\n')
    threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default value is 3.\n')
    traffic_dial_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of traffic to send to an AWS Regions . Additional traffic is distributed to other endpoint groups for this listener. Use this action to increase (dial up) or decrease (dial down) traffic to a specific Region. The percentage is applied to the traffic that would otherwise have been routed to the Region based on optimal routing. The default value is 100.')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_group_region', 'listener_arn', 'endpoint_configurations', 'health_check_interval_seconds', 'health_check_path', 'health_check_port', 'health_check_protocol', 'port_overrides', 'threshold_count', 'traffic_dial_percentage']
    _method_names: typing.ClassVar[list[str]] = ['EndpointConfigurationProperty', 'PortOverrideProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.CfnEndpointGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnEndpointGroupDefConfig] = pydantic.Field(None)


class CfnEndpointGroupDefConfig(pydantic.BaseModel):
    EndpointConfigurationProperty: typing.Optional[list[CfnEndpointGroupDefEndpointconfigurationpropertyParams]] = pydantic.Field(None, description='')
    PortOverrideProperty: typing.Optional[list[CfnEndpointGroupDefPortoverridepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnEndpointGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnEndpointGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnEndpointGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnEndpointGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnEndpointGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnEndpointGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnEndpointGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnEndpointGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnEndpointGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnEndpointGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnEndpointGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnEndpointGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnEndpointGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnEndpointGroupDefEndpointconfigurationpropertyParams(pydantic.BaseModel):
    endpoint_id: str = pydantic.Field(..., description='')
    client_ip_preservation_enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    weight: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEndpointGroupDefPortoverridepropertyParams(pydantic.BaseModel):
    endpoint_port: typing.Union[int, float] = pydantic.Field(..., description='')
    listener_port: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnEndpointGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEndpointGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEndpointGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEndpointGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEndpointGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEndpointGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEndpointGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEndpointGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEndpointGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEndpointGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEndpointGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnEndpointGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEndpointGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEndpointGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_globalaccelerator.CfnListener
class CfnListenerDef(BaseCfnResource):
    accelerator_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of your accelerator.\n')
    port_ranges: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_globalaccelerator.CfnListener_PortRangePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The list of port ranges for the connections from clients to the accelerator.\n')
    protocol: str = pydantic.Field(..., description='The protocol for the connections from clients to the accelerator.\n')
    client_affinity: typing.Optional[str] = pydantic.Field(None, description='Client affinity lets you direct all requests from a user to the same endpoint, if you have stateful applications, regardless of the port and protocol of the client request. Client affinity gives you control over whether to always route each client to the same specific endpoint. AWS Global Accelerator uses a consistent-flow hashing algorithm to choose the optimal endpoint for a connection. If client affinity is ``NONE`` , Global Accelerator uses the "five-tuple" (5-tuple) properties—source IP address, source port, destination IP address, destination port, and protocol—to select the hash value, and then chooses the best endpoint. However, with this setting, if someone uses different ports to connect to Global Accelerator, their connections might not be always routed to the same endpoint because the hash value changes. If you want a given client to always be routed to the same endpoint, set client affinity to ``SOURCE_IP`` instead. When you use the ``SOURCE_IP`` setting, Global Accelerator uses the "two-tuple" (2-tuple) properties— source (client) IP address and destination IP address—to select the hash value. The default value is ``NONE`` .')
    _init_params: typing.ClassVar[list[str]] = ['accelerator_arn', 'port_ranges', 'protocol', 'client_affinity']
    _method_names: typing.ClassVar[list[str]] = ['PortRangeProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.CfnListener'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnListenerDefConfig] = pydantic.Field(None)


class CfnListenerDefConfig(pydantic.BaseModel):
    PortRangeProperty: typing.Optional[list[CfnListenerDefPortrangepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnListenerDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnListenerDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnListenerDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnListenerDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnListenerDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnListenerDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnListenerDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnListenerDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnListenerDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnListenerDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnListenerDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnListenerDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnListenerDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnListenerDefPortrangepropertyParams(pydantic.BaseModel):
    from_port: typing.Union[int, float] = pydantic.Field(..., description='')
    to_port: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnListenerDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnListenerDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnListenerDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnListenerDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnListenerDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnListenerDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnListenerDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnListenerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnListenerDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnListenerDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnListenerDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnListenerDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnListenerDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnListenerDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_globalaccelerator.CfnAcceleratorProps
class CfnAcceleratorPropsDef(BaseCfnProperty):
    name: str = pydantic.Field(..., description='The name of the accelerator. The name must contain only alphanumeric characters or hyphens (-), and must not begin or end with a hyphen.\n')
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether the accelerator is enabled. The value is true or false. The default value is true. If the value is set to true, the accelerator cannot be deleted. If set to false, accelerator can be deleted.\n')
    ip_addresses: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="Optionally, if you've added your own IP address pool to Global Accelerator (BYOIP), you can choose IP addresses from your own pool to use for the accelerator's static IP addresses when you create an accelerator. You can specify one or two addresses, separated by a comma. Do not include the /32 suffix. Only one IP address from each of your IP address ranges can be used for each accelerator. If you specify only one IP address from your IP address range, Global Accelerator assigns a second static IP address for the accelerator from the AWS IP address pool. Note that you can't update IP addresses for an existing accelerator. To change them, you must create a new accelerator with the new addresses. For more information, see `Bring Your Own IP Addresses (BYOIP) <https://docs.aws.amazon.com/global-accelerator/latest/dg/using-byoip.html>`_ in the *AWS Global Accelerator Developer Guide* .\n")
    ip_address_type: typing.Optional[str] = pydantic.Field(None, description='The IP address type that an accelerator supports. For a standard accelerator, the value can be IPV4 or DUAL_STACK.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Create tags for an accelerator. For more information, see `Tagging <https://docs.aws.amazon.com/global-accelerator/latest/dg/tagging-in-global-accelerator.html>`_ in the *AWS Global Accelerator Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-accelerator.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    cfn_accelerator_props = globalaccelerator.CfnAcceleratorProps(\n        name="name",\n\n        # the properties below are optional\n        enabled=False,\n        ip_addresses=["ipAddresses"],\n        ip_address_type="ipAddressType",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'enabled', 'ip_addresses', 'ip_address_type', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.CfnAcceleratorProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.CfnEndpointGroupProps
class CfnEndpointGroupPropsDef(BaseCfnProperty):
    endpoint_group_region: str = pydantic.Field(..., description='The AWS Regions where the endpoint group is located.\n')
    listener_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the listener.\n')
    endpoint_configurations: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_globalaccelerator.CfnEndpointGroup_EndpointConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The list of endpoint objects.\n')
    health_check_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The time—10 seconds or 30 seconds—between health checks for each endpoint. The default value is 30.\n')
    health_check_path: typing.Optional[str] = pydantic.Field(None, description='If the protocol is HTTP/S, then this value provides the ping path that Global Accelerator uses for the destination on the endpoints for health checks. The default is slash (/).\n')
    health_check_port: typing.Union[int, float, None] = pydantic.Field(None, description='The port that Global Accelerator uses to perform health checks on endpoints that are part of this endpoint group. The default port is the port for the listener that this endpoint group is associated with. If the listener port is a list, Global Accelerator uses the first specified port in the list of ports.\n')
    health_check_protocol: typing.Optional[str] = pydantic.Field(None, description='The protocol that Global Accelerator uses to perform health checks on endpoints that are part of this endpoint group. The default value is TCP.\n')
    port_overrides: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_globalaccelerator.CfnEndpointGroup_PortOverridePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Allows you to override the destination ports used to route traffic to an endpoint. Using a port override lets you map a list of external destination ports (that your users send traffic to) to a list of internal destination ports that you want an application endpoint to receive traffic on.\n')
    threshold_count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default value is 3.\n')
    traffic_dial_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of traffic to send to an AWS Regions . Additional traffic is distributed to other endpoint groups for this listener. Use this action to increase (dial up) or decrease (dial down) traffic to a specific Region. The percentage is applied to the traffic that would otherwise have been routed to the Region based on optimal routing. The default value is 100.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-endpointgroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    cfn_endpoint_group_props = globalaccelerator.CfnEndpointGroupProps(\n        endpoint_group_region="endpointGroupRegion",\n        listener_arn="listenerArn",\n\n        # the properties below are optional\n        endpoint_configurations=[globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty(\n            endpoint_id="endpointId",\n\n            # the properties below are optional\n            client_ip_preservation_enabled=False,\n            weight=123\n        )],\n        health_check_interval_seconds=123,\n        health_check_path="healthCheckPath",\n        health_check_port=123,\n        health_check_protocol="healthCheckProtocol",\n        port_overrides=[globalaccelerator.CfnEndpointGroup.PortOverrideProperty(\n            endpoint_port=123,\n            listener_port=123\n        )],\n        threshold_count=123,\n        traffic_dial_percentage=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_group_region', 'listener_arn', 'endpoint_configurations', 'health_check_interval_seconds', 'health_check_path', 'health_check_port', 'health_check_protocol', 'port_overrides', 'threshold_count', 'traffic_dial_percentage']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.CfnEndpointGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_globalaccelerator.CfnListenerProps
class CfnListenerPropsDef(BaseCfnProperty):
    accelerator_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of your accelerator.\n')
    port_ranges: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_globalaccelerator.CfnListener_PortRangePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The list of port ranges for the connections from clients to the accelerator.\n')
    protocol: str = pydantic.Field(..., description='The protocol for the connections from clients to the accelerator.\n')
    client_affinity: typing.Optional[str] = pydantic.Field(None, description='Client affinity lets you direct all requests from a user to the same endpoint, if you have stateful applications, regardless of the port and protocol of the client request. Client affinity gives you control over whether to always route each client to the same specific endpoint. AWS Global Accelerator uses a consistent-flow hashing algorithm to choose the optimal endpoint for a connection. If client affinity is ``NONE`` , Global Accelerator uses the "five-tuple" (5-tuple) properties—source IP address, source port, destination IP address, destination port, and protocol—to select the hash value, and then chooses the best endpoint. However, with this setting, if someone uses different ports to connect to Global Accelerator, their connections might not be always routed to the same endpoint because the hash value changes. If you want a given client to always be routed to the same endpoint, set client affinity to ``SOURCE_IP`` instead. When you use the ``SOURCE_IP`` setting, Global Accelerator uses the "two-tuple" (2-tuple) properties— source (client) IP address and destination IP address—to select the hash value. The default value is ``NONE`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-listener.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_globalaccelerator as globalaccelerator\n\n    cfn_listener_props = globalaccelerator.CfnListenerProps(\n        accelerator_arn="acceleratorArn",\n        port_ranges=[globalaccelerator.CfnListener.PortRangeProperty(\n            from_port=123,\n            to_port=123\n        )],\n        protocol="protocol",\n\n        # the properties below are optional\n        client_affinity="clientAffinity"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['accelerator_arn', 'port_ranges', 'protocol', 'client_affinity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_globalaccelerator.CfnListenerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    RawEndpoint: typing.Optional[dict[str, RawEndpointDef]] = pydantic.Field(None)
    Accelerator: typing.Optional[dict[str, AcceleratorDef]] = pydantic.Field(None)
    EndpointGroup: typing.Optional[dict[str, EndpointGroupDef]] = pydantic.Field(None)
    Listener: typing.Optional[dict[str, ListenerDef]] = pydantic.Field(None)
    AcceleratorAttributes: typing.Optional[dict[str, AcceleratorAttributesDef]] = pydantic.Field(None)
    AcceleratorProps: typing.Optional[dict[str, AcceleratorPropsDef]] = pydantic.Field(None)
    CfnEndpointGroup_EndpointConfigurationProperty: typing.Optional[dict[str, CfnEndpointGroup_EndpointConfigurationPropertyDef]] = pydantic.Field(None)
    CfnEndpointGroup_PortOverrideProperty: typing.Optional[dict[str, CfnEndpointGroup_PortOverridePropertyDef]] = pydantic.Field(None)
    CfnListener_PortRangeProperty: typing.Optional[dict[str, CfnListener_PortRangePropertyDef]] = pydantic.Field(None)
    EndpointGroupOptions: typing.Optional[dict[str, EndpointGroupOptionsDef]] = pydantic.Field(None)
    EndpointGroupProps: typing.Optional[dict[str, EndpointGroupPropsDef]] = pydantic.Field(None)
    ListenerOptions: typing.Optional[dict[str, ListenerOptionsDef]] = pydantic.Field(None)
    ListenerProps: typing.Optional[dict[str, ListenerPropsDef]] = pydantic.Field(None)
    PortOverride: typing.Optional[dict[str, PortOverrideDef]] = pydantic.Field(None)
    PortRange: typing.Optional[dict[str, PortRangeDef]] = pydantic.Field(None)
    RawEndpointProps: typing.Optional[dict[str, RawEndpointPropsDef]] = pydantic.Field(None)
    CfnAccelerator: typing.Optional[dict[str, CfnAcceleratorDef]] = pydantic.Field(None)
    CfnEndpointGroup: typing.Optional[dict[str, CfnEndpointGroupDef]] = pydantic.Field(None)
    CfnListener: typing.Optional[dict[str, CfnListenerDef]] = pydantic.Field(None)
    CfnAcceleratorProps: typing.Optional[dict[str, CfnAcceleratorPropsDef]] = pydantic.Field(None)
    CfnEndpointGroupProps: typing.Optional[dict[str, CfnEndpointGroupPropsDef]] = pydantic.Field(None)
    CfnListenerProps: typing.Optional[dict[str, CfnListenerPropsDef]] = pydantic.Field(None)
    ...
