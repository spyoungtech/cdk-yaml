from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_cleanroomsml.CfnTrainingDataset.ColumnSchemaProperty
class CfnTrainingDataset_ColumnSchemaPropertyDef(BaseStruct):
    column_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of a column.\n')
    column_types: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The data type of column.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cleanroomsml-trainingdataset-columnschema.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cleanroomsml as cleanroomsml\n\n    column_schema_property = cleanroomsml.CfnTrainingDataset.ColumnSchemaProperty(\n        column_name="columnName",\n        column_types=["columnTypes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['column_name', 'column_types']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cleanroomsml.CfnTrainingDataset.ColumnSchemaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cleanroomsml.CfnTrainingDataset.DatasetInputConfigProperty
class CfnTrainingDataset_DatasetInputConfigPropertyDef(BaseStruct):
    data_source: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_DataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A DataSource object that specifies the Glue data source for the training data.\n')
    schema_: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_ColumnSchemaPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The schema information for the training data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cleanroomsml-trainingdataset-datasetinputconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cleanroomsml as cleanroomsml\n\n    dataset_input_config_property = cleanroomsml.CfnTrainingDataset.DatasetInputConfigProperty(\n        data_source=cleanroomsml.CfnTrainingDataset.DataSourceProperty(\n            glue_data_source=cleanroomsml.CfnTrainingDataset.GlueDataSourceProperty(\n                database_name="databaseName",\n                table_name="tableName",\n\n                # the properties below are optional\n                catalog_id="catalogId"\n            )\n        ),\n        schema=[cleanroomsml.CfnTrainingDataset.ColumnSchemaProperty(\n            column_name="columnName",\n            column_types=["columnTypes"]\n        )]\n    )\n', alias='schema')
    _init_params: typing.ClassVar[list[str]] = ['data_source', 'schema']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cleanroomsml.CfnTrainingDataset.DatasetInputConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cleanroomsml.CfnTrainingDataset.DatasetProperty
class CfnTrainingDataset_DatasetPropertyDef(BaseStruct):
    input_config: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_DatasetInputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A DatasetInputConfig object that defines the data source and schema mapping.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='What type of information is found in the dataset.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cleanroomsml-trainingdataset-dataset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cleanroomsml as cleanroomsml\n\n    dataset_property = cleanroomsml.CfnTrainingDataset.DatasetProperty(\n        input_config=cleanroomsml.CfnTrainingDataset.DatasetInputConfigProperty(\n            data_source=cleanroomsml.CfnTrainingDataset.DataSourceProperty(\n                glue_data_source=cleanroomsml.CfnTrainingDataset.GlueDataSourceProperty(\n                    database_name="databaseName",\n                    table_name="tableName",\n\n                    # the properties below are optional\n                    catalog_id="catalogId"\n                )\n            ),\n            schema=[cleanroomsml.CfnTrainingDataset.ColumnSchemaProperty(\n                column_name="columnName",\n                column_types=["columnTypes"]\n            )]\n        ),\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['input_config', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cleanroomsml.CfnTrainingDataset.DatasetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cleanroomsml.CfnTrainingDataset.DataSourceProperty
class CfnTrainingDataset_DataSourcePropertyDef(BaseStruct):
    glue_data_source: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_GlueDataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A GlueDataSource object that defines the catalog ID, database name, and table name for the training data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cleanroomsml-trainingdataset-datasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cleanroomsml as cleanroomsml\n\n    data_source_property = cleanroomsml.CfnTrainingDataset.DataSourceProperty(\n        glue_data_source=cleanroomsml.CfnTrainingDataset.GlueDataSourceProperty(\n            database_name="databaseName",\n            table_name="tableName",\n\n            # the properties below are optional\n            catalog_id="catalogId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['glue_data_source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cleanroomsml.CfnTrainingDataset.DataSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cleanroomsml.CfnTrainingDataset.GlueDataSourceProperty
class CfnTrainingDataset_GlueDataSourcePropertyDef(BaseStruct):
    database_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Glue database that contains the training data.\n')
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Glue table that contains the training data.\n')
    catalog_id: typing.Optional[str] = pydantic.Field(None, description='The Glue catalog that contains the training data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cleanroomsml-trainingdataset-gluedatasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cleanroomsml as cleanroomsml\n\n    glue_data_source_property = cleanroomsml.CfnTrainingDataset.GlueDataSourceProperty(\n        database_name="databaseName",\n        table_name="tableName",\n\n        # the properties below are optional\n        catalog_id="catalogId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['database_name', 'table_name', 'catalog_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cleanroomsml.CfnTrainingDataset.GlueDataSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cleanroomsml.CfnTrainingDataset
class CfnTrainingDatasetDef(BaseCfnResource):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the training dataset.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The ARN of the IAM role that Clean Rooms ML can assume to read the data referred to in the ``dataSource`` field of each dataset. Passing a role across accounts is not allowed. If you pass a role that isn't in your account, you get an ``AccessDeniedException`` error.\n")
    training_data: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_DatasetPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='An array of information that lists the Dataset objects, which specifies the dataset type and details on its location and schema. You must provide a role that has read access to these tables.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the training dataset.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The optional metadata that you apply to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags: - Maximum number of tags per resource - 50. - For each resource, each tag key must be unique, and each tag key can have only one value. - Maximum key length - 128 Unicode characters in UTF-8. - Maximum value length - 256 Unicode characters in UTF-8. - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : /')
    _init_params: typing.ClassVar[list[str]] = ['name', 'role_arn', 'training_data', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ColumnSchemaProperty', 'DataSourceProperty', 'DatasetInputConfigProperty', 'DatasetProperty', 'GlueDataSourceProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cleanroomsml.CfnTrainingDataset'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cleanroomsml.CfnTrainingDatasetDefConfig] = pydantic.Field(None)


class CfnTrainingDatasetDefConfig(pydantic.BaseModel):
    ColumnSchemaProperty: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefColumnschemapropertyParams]] = pydantic.Field(None, description='')
    DataSourceProperty: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefDatasourcepropertyParams]] = pydantic.Field(None, description='')
    DatasetInputConfigProperty: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefDatasetinputconfigpropertyParams]] = pydantic.Field(None, description='')
    DatasetProperty: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefDatasetpropertyParams]] = pydantic.Field(None, description='')
    GlueDataSourceProperty: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefGluedatasourcepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cleanroomsml.CfnTrainingDatasetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnTrainingDatasetDefColumnschemapropertyParams(pydantic.BaseModel):
    column_name: str = pydantic.Field(..., description='')
    column_types: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnTrainingDatasetDefDatasourcepropertyParams(pydantic.BaseModel):
    glue_data_source: typing.Union[models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_GlueDataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnTrainingDatasetDefDatasetinputconfigpropertyParams(pydantic.BaseModel):
    data_source: typing.Union[models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_DataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    schema_: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_ColumnSchemaPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='', alias='schema')
    ...

class CfnTrainingDatasetDefDatasetpropertyParams(pydantic.BaseModel):
    input_config: typing.Union[models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_DatasetInputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnTrainingDatasetDefGluedatasourcepropertyParams(pydantic.BaseModel):
    database_name: str = pydantic.Field(..., description='')
    table_name: str = pydantic.Field(..., description='')
    catalog_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnTrainingDatasetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnTrainingDatasetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTrainingDatasetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnTrainingDatasetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTrainingDatasetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnTrainingDatasetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnTrainingDatasetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnTrainingDatasetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnTrainingDatasetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnTrainingDatasetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTrainingDatasetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnTrainingDatasetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnTrainingDatasetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTrainingDatasetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cleanroomsml.CfnTrainingDatasetProps
class CfnTrainingDatasetPropsDef(BaseCfnProperty):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the training dataset.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The ARN of the IAM role that Clean Rooms ML can assume to read the data referred to in the ``dataSource`` field of each dataset. Passing a role across accounts is not allowed. If you pass a role that isn't in your account, you get an ``AccessDeniedException`` error.\n")
    training_data: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cleanroomsml.CfnTrainingDataset_DatasetPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='An array of information that lists the Dataset objects, which specifies the dataset type and details on its location and schema. You must provide a role that has read access to these tables.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the training dataset.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The optional metadata that you apply to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags: - Maximum number of tags per resource - 50. - For each resource, each tag key must be unique, and each tag key can have only one value. - Maximum key length - 128 Unicode characters in UTF-8. - Maximum value length - 256 Unicode characters in UTF-8. - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : /\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cleanroomsml-trainingdataset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cleanroomsml as cleanroomsml\n\n    cfn_training_dataset_props = cleanroomsml.CfnTrainingDatasetProps(\n        name="name",\n        role_arn="roleArn",\n        training_data=[cleanroomsml.CfnTrainingDataset.DatasetProperty(\n            input_config=cleanroomsml.CfnTrainingDataset.DatasetInputConfigProperty(\n                data_source=cleanroomsml.CfnTrainingDataset.DataSourceProperty(\n                    glue_data_source=cleanroomsml.CfnTrainingDataset.GlueDataSourceProperty(\n                        database_name="databaseName",\n                        table_name="tableName",\n\n                        # the properties below are optional\n                        catalog_id="catalogId"\n                    )\n                ),\n                schema=[cleanroomsml.CfnTrainingDataset.ColumnSchemaProperty(\n                    column_name="columnName",\n                    column_types=["columnTypes"]\n                )]\n            ),\n            type="type"\n        )],\n\n        # the properties below are optional\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'role_arn', 'training_data', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cleanroomsml.CfnTrainingDatasetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnTrainingDataset_ColumnSchemaProperty: typing.Optional[dict[str, models.aws_cleanroomsml.CfnTrainingDataset_ColumnSchemaPropertyDef]] = pydantic.Field(None)
    CfnTrainingDataset_DatasetInputConfigProperty: typing.Optional[dict[str, models.aws_cleanroomsml.CfnTrainingDataset_DatasetInputConfigPropertyDef]] = pydantic.Field(None)
    CfnTrainingDataset_DatasetProperty: typing.Optional[dict[str, models.aws_cleanroomsml.CfnTrainingDataset_DatasetPropertyDef]] = pydantic.Field(None)
    CfnTrainingDataset_DataSourceProperty: typing.Optional[dict[str, models.aws_cleanroomsml.CfnTrainingDataset_DataSourcePropertyDef]] = pydantic.Field(None)
    CfnTrainingDataset_GlueDataSourceProperty: typing.Optional[dict[str, models.aws_cleanroomsml.CfnTrainingDataset_GlueDataSourcePropertyDef]] = pydantic.Field(None)
    CfnTrainingDataset: typing.Optional[dict[str, models.aws_cleanroomsml.CfnTrainingDatasetDef]] = pydantic.Field(None)
    CfnTrainingDatasetProps: typing.Optional[dict[str, models.aws_cleanroomsml.CfnTrainingDatasetPropsDef]] = pydantic.Field(None)
    ...

import models
