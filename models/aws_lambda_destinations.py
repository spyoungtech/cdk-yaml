from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_lambda_destinations.EventBridgeDestination
class EventBridgeDestinationDef(BaseClass):
    event_bus: typing.Optional[typing.Union[models.aws_events.EventBusDef]] = pydantic.Field(None, description='-')
    _init_params: typing.ClassVar[list[str]] = ['event_bus']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lambda_destinations.EventBridgeDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[EventBridgeDestinationDefConfig] = pydantic.Field(None)


class EventBridgeDestinationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[EventBridgeDestinationDefBindParams]] = pydantic.Field(None, description='Returns a destination configuration.')

class EventBridgeDestinationDefBindParams(pydantic.BaseModel):
    _scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    fn: typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(..., description='-\n')
    type: aws_cdk.aws_lambda.DestinationType = pydantic.Field(..., description='The destination type.')
    ...


#  autogenerated from aws_cdk.aws_lambda_destinations.LambdaDestination
class LambdaDestinationDef(BaseClass):
    fn: typing.Union[_REQUIRED_INIT_PARAM, models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    response_only: typing.Optional[bool] = pydantic.Field(None, description='Whether the destination function receives only the ``responsePayload`` of the source function. When set to ``true`` and used as ``onSuccess`` destination, the destination function will be invoked with the payload returned by the source function. When set to ``true`` and used as ``onFailure`` destination, the destination function will be invoked with the error object returned by source function. See the README of this module to see a full explanation of this option. Default: false The destination function receives the full invocation record.')
    _init_params: typing.ClassVar[list[str]] = ['fn', 'response_only']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lambda_destinations.LambdaDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[LambdaDestinationDefConfig] = pydantic.Field(None)


class LambdaDestinationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[LambdaDestinationDefBindParams]] = pydantic.Field(None, description='Returns a destination configuration.')

class LambdaDestinationDefBindParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    fn: typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(..., description='-\n')
    type: aws_cdk.aws_lambda.DestinationType = pydantic.Field(..., description='The destination type.')
    ...


#  autogenerated from aws_cdk.aws_lambda_destinations.SnsDestination
class SnsDestinationDef(BaseClass):
    topic: typing.Union[_REQUIRED_INIT_PARAM, models.aws_sns.TopicBaseDef, models.aws_sns.TopicDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    _init_params: typing.ClassVar[list[str]] = ['topic']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lambda_destinations.SnsDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[SnsDestinationDefConfig] = pydantic.Field(None)


class SnsDestinationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[SnsDestinationDefBindParams]] = pydantic.Field(None, description='Returns a destination configuration.')

class SnsDestinationDefBindParams(pydantic.BaseModel):
    _scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    fn: typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(..., description='-\n')
    type: aws_cdk.aws_lambda.DestinationType = pydantic.Field(..., description='The destination type.')
    ...


#  autogenerated from aws_cdk.aws_lambda_destinations.SqsDestination
class SqsDestinationDef(BaseClass):
    queue: typing.Union[_REQUIRED_INIT_PARAM, models.aws_sqs.QueueBaseDef, models.aws_sqs.QueueDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    _init_params: typing.ClassVar[list[str]] = ['queue']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lambda_destinations.SqsDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[SqsDestinationDefConfig] = pydantic.Field(None)


class SqsDestinationDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[SqsDestinationDefBindParams]] = pydantic.Field(None, description='Returns a destination configuration.')

class SqsDestinationDefBindParams(pydantic.BaseModel):
    _scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    fn: typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(..., description='-\n')
    type: aws_cdk.aws_lambda.DestinationType = pydantic.Field(..., description='The destination type.')
    ...


#  autogenerated from aws_cdk.aws_lambda_destinations.LambdaDestinationOptions
class LambdaDestinationOptionsDef(BaseStruct):
    response_only: typing.Optional[bool] = pydantic.Field(None, description='Whether the destination function receives only the ``responsePayload`` of the source function. When set to ``true`` and used as ``onSuccess`` destination, the destination function will be invoked with the payload returned by the source function. When set to ``true`` and used as ``onFailure`` destination, the destination function will be invoked with the error object returned by source function. See the README of this module to see a full explanation of this option. Default: false The destination function receives the full invocation record.\n\n:exampleMetadata: infused\n\nExample::\n\n    # Auto-extract response payload with a lambda destination\n    # destination_fn: lambda.Function\n\n\n    source_fn = lambda_.Function(self, "Source",\n        runtime=lambda_.Runtime.NODEJS_LATEST,\n        handler="index.handler",\n        code=lambda_.Code.from_asset(path.join(__dirname, "lambda-handler")),\n        # auto-extract on success\n        on_success=destinations.LambdaDestination(destination_fn,\n            response_only=True\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['response_only']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_lambda_destinations.LambdaDestinationOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    EventBridgeDestination: typing.Optional[dict[str, EventBridgeDestinationDef]] = pydantic.Field(None)
    LambdaDestination: typing.Optional[dict[str, LambdaDestinationDef]] = pydantic.Field(None)
    SnsDestination: typing.Optional[dict[str, SnsDestinationDef]] = pydantic.Field(None)
    SqsDestination: typing.Optional[dict[str, SqsDestinationDef]] = pydantic.Field(None)
    LambdaDestinationOptions: typing.Optional[dict[str, LambdaDestinationOptionsDef]] = pydantic.Field(None)
    ...
