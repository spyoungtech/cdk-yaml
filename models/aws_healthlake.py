from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_healthlake.CfnFHIRDatastore.CreatedAtProperty
class CfnFHIRDatastore_CreatedAtPropertyDef(BaseStruct):
    nanos: typing.Union[int, float] = pydantic.Field(..., description='``CfnFHIRDatastore.CreatedAtProperty.Nanos``.')
    seconds: str = pydantic.Field(..., description='``CfnFHIRDatastore.CreatedAtProperty.Seconds``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-healthlake-fhirdatastore-createdat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_healthlake as healthlake\n\n    created_at_property = healthlake.CfnFHIRDatastore.CreatedAtProperty(\n        nanos=123,\n        seconds="seconds"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['nanos', 'seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_healthlake.CfnFHIRDatastore.CreatedAtProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_healthlake.CfnFHIRDatastore.KmsEncryptionConfigProperty
class CfnFHIRDatastore_KmsEncryptionConfigPropertyDef(BaseStruct):
    cmk_type: str = pydantic.Field(..., description='The type of customer-managed-key(CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and Amazon owned CMKs. For more information on CMK types, see `KmsEncryptionConfig <https://docs.aws.amazon.com/healthlake/latest/APIReference/API_KmsEncryptionConfig.html#HealthLake-Type-KmsEncryptionConfig-CmkType>`_ .\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The KMS encryption key id/alias used to encrypt the Data Store contents at rest.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-healthlake-fhirdatastore-kmsencryptionconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_healthlake as healthlake\n\n    kms_encryption_config_property = healthlake.CfnFHIRDatastore.KmsEncryptionConfigProperty(\n        cmk_type="cmkType",\n\n        # the properties below are optional\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cmk_type', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_healthlake.CfnFHIRDatastore.KmsEncryptionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_healthlake.CfnFHIRDatastore.PreloadDataConfigProperty
class CfnFHIRDatastore_PreloadDataConfigPropertyDef(BaseStruct):
    preload_data_type: str = pydantic.Field(..., description='The type of preloaded data. Only Synthea preloaded data is supported.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-healthlake-fhirdatastore-preloaddataconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_healthlake as healthlake\n\n    preload_data_config_property = healthlake.CfnFHIRDatastore.PreloadDataConfigProperty(\n        preload_data_type="preloadDataType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['preload_data_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_healthlake.CfnFHIRDatastore.PreloadDataConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_healthlake.CfnFHIRDatastore.SseConfigurationProperty
class CfnFHIRDatastore_SseConfigurationPropertyDef(BaseStruct):
    kms_encryption_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_healthlake.CfnFHIRDatastore_KmsEncryptionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The server-side encryption key configuration for a customer provided encryption key (CMK).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-healthlake-fhirdatastore-sseconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_healthlake as healthlake\n\n    sse_configuration_property = healthlake.CfnFHIRDatastore.SseConfigurationProperty(\n        kms_encryption_config=healthlake.CfnFHIRDatastore.KmsEncryptionConfigProperty(\n            cmk_type="cmkType",\n\n            # the properties below are optional\n            kms_key_id="kmsKeyId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kms_encryption_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_healthlake.CfnFHIRDatastore.SseConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_healthlake.CfnFHIRDatastore
class CfnFHIRDatastoreDef(BaseCfnResource):
    datastore_type_version: str = pydantic.Field(..., description='The FHIR version of the Data Store. The only supported version is R4.\n')
    datastore_name: typing.Optional[str] = pydantic.Field(None, description='The user generated name for the Data Store.\n')
    preload_data_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_healthlake.CfnFHIRDatastore_PreloadDataConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.\n')
    sse_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_healthlake.CfnFHIRDatastore_SseConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The server-side encryption key configuration for a customer provided encryption key specified for creating a Data Store.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['datastore_type_version', 'datastore_name', 'preload_data_config', 'sse_configuration', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CreatedAtProperty', 'KmsEncryptionConfigProperty', 'PreloadDataConfigProperty', 'SseConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_healthlake.CfnFHIRDatastore'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnFHIRDatastoreDefConfig] = pydantic.Field(None)


class CfnFHIRDatastoreDefConfig(pydantic.BaseModel):
    CreatedAtProperty: typing.Optional[list[CfnFHIRDatastoreDefCreatedatpropertyParams]] = pydantic.Field(None, description='')
    KmsEncryptionConfigProperty: typing.Optional[list[CfnFHIRDatastoreDefKmsencryptionconfigpropertyParams]] = pydantic.Field(None, description='')
    PreloadDataConfigProperty: typing.Optional[list[CfnFHIRDatastoreDefPreloaddataconfigpropertyParams]] = pydantic.Field(None, description='')
    SseConfigurationProperty: typing.Optional[list[CfnFHIRDatastoreDefSseconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnFHIRDatastoreDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnFHIRDatastoreDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnFHIRDatastoreDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnFHIRDatastoreDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnFHIRDatastoreDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnFHIRDatastoreDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnFHIRDatastoreDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnFHIRDatastoreDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnFHIRDatastoreDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnFHIRDatastoreDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnFHIRDatastoreDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnFHIRDatastoreDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnFHIRDatastoreDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFHIRDatastoreDefCreatedatpropertyParams(pydantic.BaseModel):
    nanos: typing.Union[int, float] = pydantic.Field(..., description='')
    seconds: str = pydantic.Field(..., description='')
    ...

class CfnFHIRDatastoreDefKmsencryptionconfigpropertyParams(pydantic.BaseModel):
    cmk_type: str = pydantic.Field(..., description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFHIRDatastoreDefPreloaddataconfigpropertyParams(pydantic.BaseModel):
    preload_data_type: str = pydantic.Field(..., description='')
    ...

class CfnFHIRDatastoreDefSseconfigurationpropertyParams(pydantic.BaseModel):
    kms_encryption_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_healthlake.CfnFHIRDatastore_KmsEncryptionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnFHIRDatastoreDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFHIRDatastoreDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFHIRDatastoreDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFHIRDatastoreDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFHIRDatastoreDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFHIRDatastoreDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFHIRDatastoreDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFHIRDatastoreDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFHIRDatastoreDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFHIRDatastoreDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFHIRDatastoreDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnFHIRDatastoreDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFHIRDatastoreDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFHIRDatastoreDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_healthlake.CfnFHIRDatastoreProps
class CfnFHIRDatastorePropsDef(BaseCfnProperty):
    datastore_type_version: str = pydantic.Field(..., description='The FHIR version of the Data Store. The only supported version is R4.\n')
    datastore_name: typing.Optional[str] = pydantic.Field(None, description='The user generated name for the Data Store.\n')
    preload_data_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_healthlake.CfnFHIRDatastore_PreloadDataConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.\n')
    sse_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_healthlake.CfnFHIRDatastore_SseConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The server-side encryption key configuration for a customer provided encryption key specified for creating a Data Store.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-healthlake-fhirdatastore.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_healthlake as healthlake\n\n    cfn_fHIRDatastore_props = healthlake.CfnFHIRDatastoreProps(\n        datastore_type_version="datastoreTypeVersion",\n\n        # the properties below are optional\n        datastore_name="datastoreName",\n        preload_data_config=healthlake.CfnFHIRDatastore.PreloadDataConfigProperty(\n            preload_data_type="preloadDataType"\n        ),\n        sse_configuration=healthlake.CfnFHIRDatastore.SseConfigurationProperty(\n            kms_encryption_config=healthlake.CfnFHIRDatastore.KmsEncryptionConfigProperty(\n                cmk_type="cmkType",\n\n                # the properties below are optional\n                kms_key_id="kmsKeyId"\n            )\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['datastore_type_version', 'datastore_name', 'preload_data_config', 'sse_configuration', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_healthlake.CfnFHIRDatastoreProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnFHIRDatastore_CreatedAtProperty: typing.Optional[dict[str, CfnFHIRDatastore_CreatedAtPropertyDef]] = pydantic.Field(None)
    CfnFHIRDatastore_KmsEncryptionConfigProperty: typing.Optional[dict[str, CfnFHIRDatastore_KmsEncryptionConfigPropertyDef]] = pydantic.Field(None)
    CfnFHIRDatastore_PreloadDataConfigProperty: typing.Optional[dict[str, CfnFHIRDatastore_PreloadDataConfigPropertyDef]] = pydantic.Field(None)
    CfnFHIRDatastore_SseConfigurationProperty: typing.Optional[dict[str, CfnFHIRDatastore_SseConfigurationPropertyDef]] = pydantic.Field(None)
    CfnFHIRDatastore: typing.Optional[dict[str, CfnFHIRDatastoreDef]] = pydantic.Field(None)
    CfnFHIRDatastoreProps: typing.Optional[dict[str, CfnFHIRDatastorePropsDef]] = pydantic.Field(None)
    ...
