from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_accessanalyzer.CfnAnalyzer.ArchiveRuleProperty
class CfnAnalyzer_ArchiveRulePropertyDef(BaseStruct):
    filter: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_accessanalyzer.CfnAnalyzer_FilterPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The criteria for the rule.\n')
    rule_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the archive rule.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-accessanalyzer-analyzer-archiverule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_accessanalyzer as accessanalyzer\n\n    archive_rule_property = accessanalyzer.CfnAnalyzer.ArchiveRuleProperty(\n        filter=[accessanalyzer.CfnAnalyzer.FilterProperty(\n            property="property",\n\n            # the properties below are optional\n            contains=["contains"],\n            eq=["eq"],\n            exists=False,\n            neq=["neq"]\n        )],\n        rule_name="ruleName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['filter', 'rule_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_accessanalyzer.CfnAnalyzer.ArchiveRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_accessanalyzer.CfnAnalyzer.FilterProperty
class CfnAnalyzer_FilterPropertyDef(BaseStruct):
    property: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The property used to define the criteria in the filter for the rule.\n')
    contains: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A "contains" condition to match for the rule.\n')
    eq: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An "equals" condition to match for the rule.\n')
    exists: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='An "exists" condition to match for the rule.\n')
    neq: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A "not equal" condition to match for the rule.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-accessanalyzer-analyzer-filter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_accessanalyzer as accessanalyzer\n\n    filter_property = accessanalyzer.CfnAnalyzer.FilterProperty(\n        property="property",\n\n        # the properties below are optional\n        contains=["contains"],\n        eq=["eq"],\n        exists=False,\n        neq=["neq"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['property', 'contains', 'eq', 'exists', 'neq']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_accessanalyzer.CfnAnalyzer.FilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_accessanalyzer.CfnAnalyzer
class CfnAnalyzerDef(BaseCfnResource):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type represents the zone of trust for the analyzer. *Allowed Values* : ACCOUNT | ORGANIZATION\n')
    analyzer_name: typing.Optional[str] = pydantic.Field(None, description='The name of the analyzer.\n')
    archive_rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_accessanalyzer.CfnAnalyzer_ArchiveRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the archive rules to add for the analyzer.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to apply to the analyzer.')
    _init_params: typing.ClassVar[list[str]] = ['type', 'analyzer_name', 'archive_rules', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ArchiveRuleProperty', 'FilterProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_accessanalyzer.CfnAnalyzer'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_accessanalyzer.CfnAnalyzerDefConfig] = pydantic.Field(None)


class CfnAnalyzerDefConfig(pydantic.BaseModel):
    ArchiveRuleProperty: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefArchiverulepropertyParams]] = pydantic.Field(None, description='')
    FilterProperty: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefFilterpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_accessanalyzer.CfnAnalyzerDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAnalyzerDefArchiverulepropertyParams(pydantic.BaseModel):
    filter: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_accessanalyzer.CfnAnalyzer_FilterPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    rule_name: str = pydantic.Field(..., description='')
    ...

class CfnAnalyzerDefFilterpropertyParams(pydantic.BaseModel):
    property: str = pydantic.Field(..., description='')
    contains: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    eq: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    exists: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    neq: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnAnalyzerDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAnalyzerDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAnalyzerDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAnalyzerDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAnalyzerDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAnalyzerDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAnalyzerDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAnalyzerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAnalyzerDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAnalyzerDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAnalyzerDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAnalyzerDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAnalyzerDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAnalyzerDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_accessanalyzer.CfnAnalyzerProps
class CfnAnalyzerPropsDef(BaseCfnProperty):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type represents the zone of trust for the analyzer. *Allowed Values* : ACCOUNT | ORGANIZATION\n')
    analyzer_name: typing.Optional[str] = pydantic.Field(None, description='The name of the analyzer.\n')
    archive_rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_accessanalyzer.CfnAnalyzer_ArchiveRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the archive rules to add for the analyzer.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to apply to the analyzer.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-accessanalyzer-analyzer.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_accessanalyzer as accessanalyzer\n\n    cfn_analyzer_props = accessanalyzer.CfnAnalyzerProps(\n        type="type",\n\n        # the properties below are optional\n        analyzer_name="analyzerName",\n        archive_rules=[accessanalyzer.CfnAnalyzer.ArchiveRuleProperty(\n            filter=[accessanalyzer.CfnAnalyzer.FilterProperty(\n                property="property",\n\n                # the properties below are optional\n                contains=["contains"],\n                eq=["eq"],\n                exists=False,\n                neq=["neq"]\n            )],\n            rule_name="ruleName"\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'analyzer_name', 'archive_rules', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_accessanalyzer.CfnAnalyzerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnAnalyzer_ArchiveRuleProperty: typing.Optional[dict[str, models.aws_accessanalyzer.CfnAnalyzer_ArchiveRulePropertyDef]] = pydantic.Field(None)
    CfnAnalyzer_FilterProperty: typing.Optional[dict[str, models.aws_accessanalyzer.CfnAnalyzer_FilterPropertyDef]] = pydantic.Field(None)
    CfnAnalyzer: typing.Optional[dict[str, models.aws_accessanalyzer.CfnAnalyzerDef]] = pydantic.Field(None)
    CfnAnalyzerProps: typing.Optional[dict[str, models.aws_accessanalyzer.CfnAnalyzerPropsDef]] = pydantic.Field(None)
    ...

import models
