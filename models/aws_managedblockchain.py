from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_managedblockchain.CfnMember.ApprovalThresholdPolicyProperty
class CfnMember_ApprovalThresholdPolicyPropertyDef(BaseStruct):
    proposal_duration_in_hours: typing.Union[int, float, None] = pydantic.Field(None, description="The duration from the time that a proposal is created until it expires. If members cast neither the required number of ``YES`` votes to approve the proposal nor the number of ``NO`` votes required to reject it before the duration expires, the proposal is ``EXPIRED`` and ``ProposalActions`` aren't carried out.\n")
    threshold_comparator: typing.Optional[str] = pydantic.Field(None, description='Determines whether the vote percentage must be greater than the ``ThresholdPercentage`` or must be greater than or equal to the ``ThresholdPercentage`` to be approved.\n')
    threshold_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of votes among all members that must be ``YES`` for a proposal to be approved. For example, a ``ThresholdPercentage`` value of ``50`` indicates 50%. The ``ThresholdComparator`` determines the precise comparison. If a ``ThresholdPercentage`` value of ``50`` is specified on a network with 10 members, along with a ``ThresholdComparator`` value of ``GREATER_THAN`` , this indicates that 6 ``YES`` votes are required for the proposal to be approved.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-managedblockchain-member-approvalthresholdpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    approval_threshold_policy_property = managedblockchain.CfnMember.ApprovalThresholdPolicyProperty(\n        proposal_duration_in_hours=123,\n        threshold_comparator="thresholdComparator",\n        threshold_percentage=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['proposal_duration_in_hours', 'threshold_comparator', 'threshold_percentage']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMember.ApprovalThresholdPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnMember.MemberConfigurationProperty
class CfnMember_MemberConfigurationPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the member.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='An optional description of the member.\n')
    member_framework_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_MemberFrameworkConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration properties of the blockchain framework relevant to the member.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-managedblockchain-member-memberconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    member_configuration_property = managedblockchain.CfnMember.MemberConfigurationProperty(\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        member_framework_configuration=managedblockchain.CfnMember.MemberFrameworkConfigurationProperty(\n            member_fabric_configuration=managedblockchain.CfnMember.MemberFabricConfigurationProperty(\n                admin_password="adminPassword",\n                admin_username="adminUsername"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'description', 'member_framework_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMember.MemberConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnMember.MemberFabricConfigurationProperty
class CfnMember_MemberFabricConfigurationPropertyDef(BaseStruct):
    admin_password: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The password for the member's initial administrative user. The ``AdminPassword`` must be at least 8 characters long and no more than 32 characters. It must contain at least one uppercase letter, one lowercase letter, and one digit. It cannot have a single quotation mark (‘), a double quotation marks (“), a forward slash(/), a backward slash(),\n")
    admin_username: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user name for the member\'s initial administrative user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-managedblockchain-member-memberfabricconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    member_fabric_configuration_property = managedblockchain.CfnMember.MemberFabricConfigurationProperty(\n        admin_password="adminPassword",\n        admin_username="adminUsername"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['admin_password', 'admin_username']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMember.MemberFabricConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnMember.MemberFrameworkConfigurationProperty
class CfnMember_MemberFrameworkConfigurationPropertyDef(BaseStruct):
    member_fabric_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_MemberFabricConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration properties for Hyperledger Fabric.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-managedblockchain-member-memberframeworkconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    member_framework_configuration_property = managedblockchain.CfnMember.MemberFrameworkConfigurationProperty(\n        member_fabric_configuration=managedblockchain.CfnMember.MemberFabricConfigurationProperty(\n            admin_password="adminPassword",\n            admin_username="adminUsername"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['member_fabric_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMember.MemberFrameworkConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnMember.NetworkConfigurationProperty
class CfnMember_NetworkConfigurationPropertyDef(BaseStruct):
    framework: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The blockchain framework that the network uses.\n')
    framework_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The version of the blockchain framework that the network uses.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the network.\n')
    voting_policy: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_managedblockchain.CfnMember_VotingPolicyPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The voting rules that the network uses to decide if a proposal is accepted.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='Attributes of the blockchain framework for the network.\n')
    network_framework_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_NetworkFrameworkConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration properties relevant to the network for the blockchain framework that the network uses.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-managedblockchain-member-networkconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    network_configuration_property = managedblockchain.CfnMember.NetworkConfigurationProperty(\n        framework="framework",\n        framework_version="frameworkVersion",\n        name="name",\n        voting_policy=managedblockchain.CfnMember.VotingPolicyProperty(\n            approval_threshold_policy=managedblockchain.CfnMember.ApprovalThresholdPolicyProperty(\n                proposal_duration_in_hours=123,\n                threshold_comparator="thresholdComparator",\n                threshold_percentage=123\n            )\n        ),\n\n        # the properties below are optional\n        description="description",\n        network_framework_configuration=managedblockchain.CfnMember.NetworkFrameworkConfigurationProperty(\n            network_fabric_configuration=managedblockchain.CfnMember.NetworkFabricConfigurationProperty(\n                edition="edition"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['framework', 'framework_version', 'name', 'voting_policy', 'description', 'network_framework_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMember.NetworkConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnMember.NetworkFabricConfigurationProperty
class CfnMember_NetworkFabricConfigurationPropertyDef(BaseStruct):
    edition: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The edition of Amazon Managed Blockchain that the network uses. Valid values are ``standard`` and ``starter`` . For more information, see `Amazon Managed Blockchain Pricing <https://docs.aws.amazon.com/managed-blockchain/pricing/>`_\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-managedblockchain-member-networkfabricconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    network_fabric_configuration_property = managedblockchain.CfnMember.NetworkFabricConfigurationProperty(\n        edition="edition"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['edition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMember.NetworkFabricConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnMember.NetworkFrameworkConfigurationProperty
class CfnMember_NetworkFrameworkConfigurationPropertyDef(BaseStruct):
    network_fabric_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_NetworkFabricConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration properties for Hyperledger Fabric for a member in a Managed Blockchain network that is using the Hyperledger Fabric framework.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-managedblockchain-member-networkframeworkconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    network_framework_configuration_property = managedblockchain.CfnMember.NetworkFrameworkConfigurationProperty(\n        network_fabric_configuration=managedblockchain.CfnMember.NetworkFabricConfigurationProperty(\n            edition="edition"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['network_fabric_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMember.NetworkFrameworkConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnMember.VotingPolicyProperty
class CfnMember_VotingPolicyPropertyDef(BaseStruct):
    approval_threshold_policy: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_ApprovalThresholdPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines the rules for the network for voting on proposals, such as the percentage of ``YES`` votes required for the proposal to be approved and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-managedblockchain-member-votingpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    voting_policy_property = managedblockchain.CfnMember.VotingPolicyProperty(\n        approval_threshold_policy=managedblockchain.CfnMember.ApprovalThresholdPolicyProperty(\n            proposal_duration_in_hours=123,\n            threshold_comparator="thresholdComparator",\n            threshold_percentage=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['approval_threshold_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMember.VotingPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnNode.NodeConfigurationProperty
class CfnNode_NodeConfigurationPropertyDef(BaseStruct):
    availability_zone: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Availability Zone in which the node exists. Required for Ethereum nodes.\n')
    instance_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Managed Blockchain instance type for the node.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-managedblockchain-node-nodeconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    node_configuration_property = managedblockchain.CfnNode.NodeConfigurationProperty(\n        availability_zone="availabilityZone",\n        instance_type="instanceType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['availability_zone', 'instance_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnNode.NodeConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnAccessor
class CfnAccessorDef(BaseCfnResource):
    accessor_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the accessor. .. epigraph:: Currently, accessor type is restricted to ``BILLING_TOKEN`` .\n')
    network_type: typing.Optional[str] = pydantic.Field(None, description='The blockchain network that the ``Accessor`` token is created for. .. epigraph:: We recommend using the appropriate ``networkType`` value for the blockchain network that you are creating the ``Accessor`` token for. You cannot use the value ``ETHEREUM_MAINNET_AND_GOERLI`` to specify a ``networkType`` for your Accessor token. The default value of ``ETHEREUM_MAINNET_AND_GOERLI`` is only applied: - when the ``CreateAccessor`` action does not set a ``networkType`` . - to all existing ``Accessor`` tokens that were created before the ``networkType`` property was introduced.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags assigned to the Accessor. For more information about tags, see `Tagging Resources <https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html>`_ in the *Amazon Managed Blockchain Ethereum Developer Guide* , or `Tagging Resources <https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html>`_ in the *Amazon Managed Blockchain Hyperledger Fabric Developer Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['accessor_type', 'network_type', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnAccessor'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_managedblockchain.CfnAccessorDefConfig] = pydantic.Field(None)


class CfnAccessorDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_managedblockchain.CfnAccessorDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAccessorDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAccessorDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAccessorDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAccessorDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAccessorDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAccessorDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAccessorDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAccessorDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAccessorDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAccessorDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAccessorDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAccessorDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAccessorDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAccessorDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_managedblockchain.CfnMember
class CfnMemberDef(BaseCfnResource):
    member_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_managedblockchain.CfnMember_MemberConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Configuration properties of the member.\n')
    invitation_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the invitation to join the network sent to the account that creates the member.\n')
    network_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_NetworkConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration properties of the network to which the member belongs.\n')
    network_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the network to which the member belongs.')
    _init_params: typing.ClassVar[list[str]] = ['member_configuration', 'invitation_id', 'network_configuration', 'network_id']
    _method_names: typing.ClassVar[list[str]] = ['ApprovalThresholdPolicyProperty', 'MemberConfigurationProperty', 'MemberFabricConfigurationProperty', 'MemberFrameworkConfigurationProperty', 'NetworkConfigurationProperty', 'NetworkFabricConfigurationProperty', 'NetworkFrameworkConfigurationProperty', 'VotingPolicyProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMember'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_managedblockchain.CfnMemberDefConfig] = pydantic.Field(None)


class CfnMemberDefConfig(pydantic.BaseModel):
    ApprovalThresholdPolicyProperty: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefApprovalthresholdpolicypropertyParams]] = pydantic.Field(None, description='')
    MemberConfigurationProperty: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefMemberconfigurationpropertyParams]] = pydantic.Field(None, description='')
    MemberFabricConfigurationProperty: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefMemberfabricconfigurationpropertyParams]] = pydantic.Field(None, description='')
    MemberFrameworkConfigurationProperty: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefMemberframeworkconfigurationpropertyParams]] = pydantic.Field(None, description='')
    NetworkConfigurationProperty: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefNetworkconfigurationpropertyParams]] = pydantic.Field(None, description='')
    NetworkFabricConfigurationProperty: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefNetworkfabricconfigurationpropertyParams]] = pydantic.Field(None, description='')
    NetworkFrameworkConfigurationProperty: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefNetworkframeworkconfigurationpropertyParams]] = pydantic.Field(None, description='')
    VotingPolicyProperty: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefVotingpolicypropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_managedblockchain.CfnMemberDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnMemberDefApprovalthresholdpolicypropertyParams(pydantic.BaseModel):
    proposal_duration_in_hours: typing.Union[int, float, None] = pydantic.Field(None, description='')
    threshold_comparator: typing.Optional[str] = pydantic.Field(None, description='')
    threshold_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnMemberDefMemberconfigurationpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    member_framework_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_MemberFrameworkConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMemberDefMemberfabricconfigurationpropertyParams(pydantic.BaseModel):
    admin_password: str = pydantic.Field(..., description='')
    admin_username: str = pydantic.Field(..., description='')
    ...

class CfnMemberDefMemberframeworkconfigurationpropertyParams(pydantic.BaseModel):
    member_fabric_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_MemberFabricConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMemberDefNetworkconfigurationpropertyParams(pydantic.BaseModel):
    framework: str = pydantic.Field(..., description='')
    framework_version: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    voting_policy: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_VotingPolicyPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    network_framework_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_NetworkFrameworkConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMemberDefNetworkfabricconfigurationpropertyParams(pydantic.BaseModel):
    edition: str = pydantic.Field(..., description='')
    ...

class CfnMemberDefNetworkframeworkconfigurationpropertyParams(pydantic.BaseModel):
    network_fabric_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_NetworkFabricConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMemberDefVotingpolicypropertyParams(pydantic.BaseModel):
    approval_threshold_policy: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_ApprovalThresholdPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMemberDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMemberDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMemberDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMemberDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMemberDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMemberDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMemberDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMemberDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMemberDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMemberDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMemberDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnMemberDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMemberDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMemberDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_managedblockchain.CfnNode
class CfnNodeDef(BaseCfnResource):
    network_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the network for the node. Ethereum public networks have the following ``NetworkId`` s: - ``n-ethereum-mainnet``\n')
    node_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_managedblockchain.CfnNode_NodeConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Configuration properties of a peer node.\n')
    member_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the member to which the node belongs. Applies only to Hyperledger Fabric.')
    _init_params: typing.ClassVar[list[str]] = ['network_id', 'node_configuration', 'member_id']
    _method_names: typing.ClassVar[list[str]] = ['NodeConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnNode'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_managedblockchain.CfnNodeDefConfig] = pydantic.Field(None)


class CfnNodeDefConfig(pydantic.BaseModel):
    NodeConfigurationProperty: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefNodeconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_managedblockchain.CfnNodeDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnNodeDefNodeconfigurationpropertyParams(pydantic.BaseModel):
    availability_zone: str = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    ...

class CfnNodeDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnNodeDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnNodeDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnNodeDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnNodeDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnNodeDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnNodeDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnNodeDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnNodeDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnNodeDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnNodeDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnNodeDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnNodeDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnNodeDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_managedblockchain.CfnAccessorProps
class CfnAccessorPropsDef(BaseCfnProperty):
    accessor_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the accessor. .. epigraph:: Currently, accessor type is restricted to ``BILLING_TOKEN`` .\n')
    network_type: typing.Optional[str] = pydantic.Field(None, description='The blockchain network that the ``Accessor`` token is created for. .. epigraph:: We recommend using the appropriate ``networkType`` value for the blockchain network that you are creating the ``Accessor`` token for. You cannot use the value ``ETHEREUM_MAINNET_AND_GOERLI`` to specify a ``networkType`` for your Accessor token. The default value of ``ETHEREUM_MAINNET_AND_GOERLI`` is only applied: - when the ``CreateAccessor`` action does not set a ``networkType`` . - to all existing ``Accessor`` tokens that were created before the ``networkType`` property was introduced.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags assigned to the Accessor. For more information about tags, see `Tagging Resources <https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html>`_ in the *Amazon Managed Blockchain Ethereum Developer Guide* , or `Tagging Resources <https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html>`_ in the *Amazon Managed Blockchain Hyperledger Fabric Developer Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-accessor.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    cfn_accessor_props = managedblockchain.CfnAccessorProps(\n        accessor_type="accessorType",\n\n        # the properties below are optional\n        network_type="networkType",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['accessor_type', 'network_type', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnAccessorProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnMemberProps
class CfnMemberPropsDef(BaseCfnProperty):
    member_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_managedblockchain.CfnMember_MemberConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Configuration properties of the member.\n')
    invitation_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the invitation to join the network sent to the account that creates the member.\n')
    network_configuration: typing.Union[models.UnsupportedResource, models.aws_managedblockchain.CfnMember_NetworkConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration properties of the network to which the member belongs.\n')
    network_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the network to which the member belongs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-member.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    cfn_member_props = managedblockchain.CfnMemberProps(\n        member_configuration=managedblockchain.CfnMember.MemberConfigurationProperty(\n            name="name",\n\n            # the properties below are optional\n            description="description",\n            member_framework_configuration=managedblockchain.CfnMember.MemberFrameworkConfigurationProperty(\n                member_fabric_configuration=managedblockchain.CfnMember.MemberFabricConfigurationProperty(\n                    admin_password="adminPassword",\n                    admin_username="adminUsername"\n                )\n            )\n        ),\n\n        # the properties below are optional\n        invitation_id="invitationId",\n        network_configuration=managedblockchain.CfnMember.NetworkConfigurationProperty(\n            framework="framework",\n            framework_version="frameworkVersion",\n            name="name",\n            voting_policy=managedblockchain.CfnMember.VotingPolicyProperty(\n                approval_threshold_policy=managedblockchain.CfnMember.ApprovalThresholdPolicyProperty(\n                    proposal_duration_in_hours=123,\n                    threshold_comparator="thresholdComparator",\n                    threshold_percentage=123\n                )\n            ),\n\n            # the properties below are optional\n            description="description",\n            network_framework_configuration=managedblockchain.CfnMember.NetworkFrameworkConfigurationProperty(\n                network_fabric_configuration=managedblockchain.CfnMember.NetworkFabricConfigurationProperty(\n                    edition="edition"\n                )\n            )\n        ),\n        network_id="networkId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['member_configuration', 'invitation_id', 'network_configuration', 'network_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnMemberProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_managedblockchain.CfnNodeProps
class CfnNodePropsDef(BaseCfnProperty):
    network_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the network for the node. Ethereum public networks have the following ``NetworkId`` s: - ``n-ethereum-mainnet``\n')
    node_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_managedblockchain.CfnNode_NodeConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Configuration properties of a peer node.\n')
    member_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the member to which the node belongs. Applies only to Hyperledger Fabric.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-node.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_managedblockchain as managedblockchain\n\n    cfn_node_props = managedblockchain.CfnNodeProps(\n        network_id="networkId",\n        node_configuration=managedblockchain.CfnNode.NodeConfigurationProperty(\n            availability_zone="availabilityZone",\n            instance_type="instanceType"\n        ),\n\n        # the properties below are optional\n        member_id="memberId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['network_id', 'node_configuration', 'member_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_managedblockchain.CfnNodeProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnMember_ApprovalThresholdPolicyProperty: typing.Optional[dict[str, models.aws_managedblockchain.CfnMember_ApprovalThresholdPolicyPropertyDef]] = pydantic.Field(None)
    CfnMember_MemberConfigurationProperty: typing.Optional[dict[str, models.aws_managedblockchain.CfnMember_MemberConfigurationPropertyDef]] = pydantic.Field(None)
    CfnMember_MemberFabricConfigurationProperty: typing.Optional[dict[str, models.aws_managedblockchain.CfnMember_MemberFabricConfigurationPropertyDef]] = pydantic.Field(None)
    CfnMember_MemberFrameworkConfigurationProperty: typing.Optional[dict[str, models.aws_managedblockchain.CfnMember_MemberFrameworkConfigurationPropertyDef]] = pydantic.Field(None)
    CfnMember_NetworkConfigurationProperty: typing.Optional[dict[str, models.aws_managedblockchain.CfnMember_NetworkConfigurationPropertyDef]] = pydantic.Field(None)
    CfnMember_NetworkFabricConfigurationProperty: typing.Optional[dict[str, models.aws_managedblockchain.CfnMember_NetworkFabricConfigurationPropertyDef]] = pydantic.Field(None)
    CfnMember_NetworkFrameworkConfigurationProperty: typing.Optional[dict[str, models.aws_managedblockchain.CfnMember_NetworkFrameworkConfigurationPropertyDef]] = pydantic.Field(None)
    CfnMember_VotingPolicyProperty: typing.Optional[dict[str, models.aws_managedblockchain.CfnMember_VotingPolicyPropertyDef]] = pydantic.Field(None)
    CfnNode_NodeConfigurationProperty: typing.Optional[dict[str, models.aws_managedblockchain.CfnNode_NodeConfigurationPropertyDef]] = pydantic.Field(None)
    CfnAccessor: typing.Optional[dict[str, models.aws_managedblockchain.CfnAccessorDef]] = pydantic.Field(None)
    CfnMember: typing.Optional[dict[str, models.aws_managedblockchain.CfnMemberDef]] = pydantic.Field(None)
    CfnNode: typing.Optional[dict[str, models.aws_managedblockchain.CfnNodeDef]] = pydantic.Field(None)
    CfnAccessorProps: typing.Optional[dict[str, models.aws_managedblockchain.CfnAccessorPropsDef]] = pydantic.Field(None)
    CfnMemberProps: typing.Optional[dict[str, models.aws_managedblockchain.CfnMemberPropsDef]] = pydantic.Field(None)
    CfnNodeProps: typing.Optional[dict[str, models.aws_managedblockchain.CfnNodePropsDef]] = pydantic.Field(None)
    ...

import models
