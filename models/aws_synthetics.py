from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_synthetics.AssetCode
class AssetCodeDef(BaseClass):
    asset_path: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The path to the asset file or directory.')
    deploy_time: typing.Optional[bool] = pydantic.Field(None, description='Whether or not the asset needs to exist beyond deployment time; i.e. are copied over to a different location and not needed afterwards. Setting this property to true has an impact on the lifecycle of the asset, because we will assume that it is safe to delete after the CloudFormation deployment succeeds. For example, Lambda Function assets are copied over to Lambda during deployment. Therefore, it is not necessary to store the asset in S3, so we consider those deployTime assets. Default: false\n')
    readers: typing.Optional[typing.Sequence[models.AnyResource]] = pydantic.Field(None, description='A list of principals that should be able to read this asset from S3. You can use ``asset.grantRead(principal)`` to grant read permissions later. Default: - No principals that can read file asset.\n')
    asset_hash: typing.Optional[str] = pydantic.Field(None, description='Specify a custom hash for this asset. If ``assetHashType`` is set it must be set to ``AssetHashType.CUSTOM``. For consistency, this custom hash will be SHA256 hashed and encoded as hex. The resulting hash will be the asset hash. NOTE: the hash is used in order to identify a specific revision of the asset, and used for optimizing and caching deployment activities related to this asset such as packaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will need to make sure it is updated every time the asset changes, or otherwise it is possible that some deployments will not be invalidated. Default: - based on ``assetHashType``\n')
    asset_hash_type: typing.Optional[aws_cdk.AssetHashType] = pydantic.Field(None, description='Specifies the type of hash to calculate for this asset. If ``assetHash`` is configured, this option must be ``undefined`` or ``AssetHashType.CUSTOM``. Default: - the default is ``AssetHashType.SOURCE``, but if ``assetHash`` is explicitly specified this value defaults to ``AssetHashType.CUSTOM``.\n')
    bundling: typing.Union[models.BundlingOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Bundle the asset by executing a command in a Docker container or a custom bundling provider. The asset path will be mounted at ``/asset-input``. The Docker container is responsible for putting content at ``/asset-output``. The content at ``/asset-output`` will be zipped and used as the final asset. Default: - uploaded as-is to S3 if the asset is a regular file or a .zip file, archived into a .zip file and uploaded to S3 otherwise\n')
    exclude: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='File paths matching the patterns will be excluded. See ``ignoreMode`` to set the matching behavior. Has no effect on Assets bundled using the ``bundling`` property. Default: - nothing is excluded\n')
    follow_symlinks: typing.Optional[aws_cdk.SymlinkFollowMode] = pydantic.Field(None, description='A strategy for how to handle symlinks. Default: SymlinkFollowMode.NEVER\n')
    ignore_mode: typing.Optional[aws_cdk.IgnoreMode] = pydantic.Field(None, description='The ignore behavior to use for ``exclude`` patterns. Default: IgnoreMode.GLOB')
    _init_params: typing.ClassVar[list[str]] = ['asset_path', 'deploy_time', 'readers', 'asset_hash', 'asset_hash_type', 'bundling', 'exclude', 'follow_symlinks', 'ignore_mode']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_asset', 'from_bucket', 'from_inline']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.AssetCode'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_asset', 'from_bucket', 'from_inline']
    ...


    from_asset: typing.Optional[models.aws_synthetics.AssetCodeDefFromAssetParams] = pydantic.Field(None, description='Specify code from a local path.\nPath must include the folder structure ``nodejs/node_modules/myCanaryFilename.js``.')
    from_bucket: typing.Optional[models.aws_synthetics.AssetCodeDefFromBucketParams] = pydantic.Field(None, description='Specify code from an s3 bucket.\nThe object in the s3 bucket must be a .zip file that contains\nthe structure ``nodejs/node_modules/myCanaryFilename.js``.')
    from_inline: typing.Optional[models.aws_synthetics.AssetCodeDefFromInlineParams] = pydantic.Field(None, description='Specify code inline.')
    resource_config: typing.Optional[models.aws_synthetics.AssetCodeDefConfig] = pydantic.Field(None)


class AssetCodeDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_synthetics.AssetCodeDefBindParams]] = pydantic.Field(None, description='Called when the canary is initialized to allow this object to bind to the stack, add resources and have fun.')

class AssetCodeDefBindParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    handler: str = pydantic.Field(..., description='-\n')
    family: aws_cdk.aws_synthetics.RuntimeFamily = pydantic.Field(..., description='-')
    ...

class AssetCodeDefFromAssetParams(pydantic.BaseModel):
    asset_path: str = pydantic.Field(..., description='Either a directory or a .zip file.\n')
    deploy_time: typing.Optional[bool] = pydantic.Field(None, description='Whether or not the asset needs to exist beyond deployment time; i.e. are copied over to a different location and not needed afterwards. Setting this property to true has an impact on the lifecycle of the asset, because we will assume that it is safe to delete after the CloudFormation deployment succeeds. For example, Lambda Function assets are copied over to Lambda during deployment. Therefore, it is not necessary to store the asset in S3, so we consider those deployTime assets. Default: false\n')
    readers: typing.Optional[typing.Sequence[models.AnyResource]] = pydantic.Field(None, description='A list of principals that should be able to read this asset from S3. You can use ``asset.grantRead(principal)`` to grant read permissions later. Default: - No principals that can read file asset.\n')
    asset_hash: typing.Optional[str] = pydantic.Field(None, description='Specify a custom hash for this asset. If ``assetHashType`` is set it must be set to ``AssetHashType.CUSTOM``. For consistency, this custom hash will be SHA256 hashed and encoded as hex. The resulting hash will be the asset hash. NOTE: the hash is used in order to identify a specific revision of the asset, and used for optimizing and caching deployment activities related to this asset such as packaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will need to make sure it is updated every time the asset changes, or otherwise it is possible that some deployments will not be invalidated. Default: - based on ``assetHashType``\n')
    asset_hash_type: typing.Optional[aws_cdk.AssetHashType] = pydantic.Field(None, description='Specifies the type of hash to calculate for this asset. If ``assetHash`` is configured, this option must be ``undefined`` or ``AssetHashType.CUSTOM``. Default: - the default is ``AssetHashType.SOURCE``, but if ``assetHash`` is explicitly specified this value defaults to ``AssetHashType.CUSTOM``.\n')
    bundling: typing.Union[models.BundlingOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Bundle the asset by executing a command in a Docker container or a custom bundling provider. The asset path will be mounted at ``/asset-input``. The Docker container is responsible for putting content at ``/asset-output``. The content at ``/asset-output`` will be zipped and used as the final asset. Default: - uploaded as-is to S3 if the asset is a regular file or a .zip file, archived into a .zip file and uploaded to S3 otherwise\n')
    exclude: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='File paths matching the patterns will be excluded. See ``ignoreMode`` to set the matching behavior. Has no effect on Assets bundled using the ``bundling`` property. Default: - nothing is excluded\n')
    follow_symlinks: typing.Optional[aws_cdk.SymlinkFollowMode] = pydantic.Field(None, description='A strategy for how to handle symlinks. Default: SymlinkFollowMode.NEVER\n')
    ignore_mode: typing.Optional[aws_cdk.IgnoreMode] = pydantic.Field(None, description='The ignore behavior to use for ``exclude`` patterns. Default: IgnoreMode.GLOB\n')
    ...

class AssetCodeDefFromBucketParams(pydantic.BaseModel):
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='The S3 bucket.\n')
    key: str = pydantic.Field(..., description='The object key.\n')
    object_version: typing.Optional[str] = pydantic.Field(None, description='Optional S3 object version.\n')
    ...

class AssetCodeDefFromInlineParams(pydantic.BaseModel):
    code: str = pydantic.Field(..., description='The actual handler code (limited to 5MB).\n')
    ...


#  autogenerated from aws_cdk.aws_synthetics.Code
class CodeDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_asset', 'from_bucket', 'from_inline']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.Code'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_asset', 'from_bucket', 'from_inline']
    ...


    from_asset: typing.Optional[models.aws_synthetics.CodeDefFromAssetParams] = pydantic.Field(None, description='Specify code from a local path.\nPath must include the folder structure ``nodejs/node_modules/myCanaryFilename.js``.')
    from_bucket: typing.Optional[models.aws_synthetics.CodeDefFromBucketParams] = pydantic.Field(None, description='Specify code from an s3 bucket.\nThe object in the s3 bucket must be a .zip file that contains\nthe structure ``nodejs/node_modules/myCanaryFilename.js``.')
    from_inline: typing.Optional[models.aws_synthetics.CodeDefFromInlineParams] = pydantic.Field(None, description='Specify code inline.')
    resource_config: typing.Optional[models.aws_synthetics.CodeDefConfig] = pydantic.Field(None)


class CodeDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_synthetics.CodeDefBindParams]] = pydantic.Field(None, description='Called when the canary is initialized to allow this object to bind to the stack, add resources and have fun.')

class CodeDefBindParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description="The binding scope. Don't be smart about trying to down-cast or assume it's initialized. You may just use it as a construct scope.\n")
    handler: str = pydantic.Field(..., description='-\n')
    family: aws_cdk.aws_synthetics.RuntimeFamily = pydantic.Field(..., description='-\n')
    ...

class CodeDefFromAssetParams(pydantic.BaseModel):
    asset_path: str = pydantic.Field(..., description='Either a directory or a .zip file.\n')
    deploy_time: typing.Optional[bool] = pydantic.Field(None, description='Whether or not the asset needs to exist beyond deployment time; i.e. are copied over to a different location and not needed afterwards. Setting this property to true has an impact on the lifecycle of the asset, because we will assume that it is safe to delete after the CloudFormation deployment succeeds. For example, Lambda Function assets are copied over to Lambda during deployment. Therefore, it is not necessary to store the asset in S3, so we consider those deployTime assets. Default: false\n')
    readers: typing.Optional[typing.Sequence[models.AnyResource]] = pydantic.Field(None, description='A list of principals that should be able to read this asset from S3. You can use ``asset.grantRead(principal)`` to grant read permissions later. Default: - No principals that can read file asset.\n')
    asset_hash: typing.Optional[str] = pydantic.Field(None, description='Specify a custom hash for this asset. If ``assetHashType`` is set it must be set to ``AssetHashType.CUSTOM``. For consistency, this custom hash will be SHA256 hashed and encoded as hex. The resulting hash will be the asset hash. NOTE: the hash is used in order to identify a specific revision of the asset, and used for optimizing and caching deployment activities related to this asset such as packaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will need to make sure it is updated every time the asset changes, or otherwise it is possible that some deployments will not be invalidated. Default: - based on ``assetHashType``\n')
    asset_hash_type: typing.Optional[aws_cdk.AssetHashType] = pydantic.Field(None, description='Specifies the type of hash to calculate for this asset. If ``assetHash`` is configured, this option must be ``undefined`` or ``AssetHashType.CUSTOM``. Default: - the default is ``AssetHashType.SOURCE``, but if ``assetHash`` is explicitly specified this value defaults to ``AssetHashType.CUSTOM``.\n')
    bundling: typing.Union[models.BundlingOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Bundle the asset by executing a command in a Docker container or a custom bundling provider. The asset path will be mounted at ``/asset-input``. The Docker container is responsible for putting content at ``/asset-output``. The content at ``/asset-output`` will be zipped and used as the final asset. Default: - uploaded as-is to S3 if the asset is a regular file or a .zip file, archived into a .zip file and uploaded to S3 otherwise\n')
    exclude: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='File paths matching the patterns will be excluded. See ``ignoreMode`` to set the matching behavior. Has no effect on Assets bundled using the ``bundling`` property. Default: - nothing is excluded\n')
    follow_symlinks: typing.Optional[aws_cdk.SymlinkFollowMode] = pydantic.Field(None, description='A strategy for how to handle symlinks. Default: SymlinkFollowMode.NEVER\n')
    ignore_mode: typing.Optional[aws_cdk.IgnoreMode] = pydantic.Field(None, description='The ignore behavior to use for ``exclude`` patterns. Default: IgnoreMode.GLOB\n')
    ...

class CodeDefFromBucketParams(pydantic.BaseModel):
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='The S3 bucket.\n')
    key: str = pydantic.Field(..., description='The object key.\n')
    object_version: typing.Optional[str] = pydantic.Field(None, description='Optional S3 object version.\n')
    ...

class CodeDefFromInlineParams(pydantic.BaseModel):
    code: str = pydantic.Field(..., description='The actual handler code (limited to 5MB).\n')
    ...


#  autogenerated from aws_cdk.aws_synthetics.InlineCode
class InlineCodeDef(BaseClass):
    code: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    _init_params: typing.ClassVar[list[str]] = ['code']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_asset', 'from_bucket', 'from_inline']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.InlineCode'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_asset', 'from_bucket', 'from_inline']
    ...


    from_asset: typing.Optional[models.aws_synthetics.InlineCodeDefFromAssetParams] = pydantic.Field(None, description='Specify code from a local path.\nPath must include the folder structure ``nodejs/node_modules/myCanaryFilename.js``.')
    from_bucket: typing.Optional[models.aws_synthetics.InlineCodeDefFromBucketParams] = pydantic.Field(None, description='Specify code from an s3 bucket.\nThe object in the s3 bucket must be a .zip file that contains\nthe structure ``nodejs/node_modules/myCanaryFilename.js``.')
    from_inline: typing.Optional[models.aws_synthetics.InlineCodeDefFromInlineParams] = pydantic.Field(None, description='Specify code inline.')
    resource_config: typing.Optional[models.aws_synthetics.InlineCodeDefConfig] = pydantic.Field(None)


class InlineCodeDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_synthetics.InlineCodeDefBindParams]] = pydantic.Field(None, description='Called when the canary is initialized to allow this object to bind to the stack, add resources and have fun.')

class InlineCodeDefBindParams(pydantic.BaseModel):
    handler: str = pydantic.Field(..., description='-\n')
    ...

class InlineCodeDefFromAssetParams(pydantic.BaseModel):
    asset_path: str = pydantic.Field(..., description='Either a directory or a .zip file.\n')
    deploy_time: typing.Optional[bool] = pydantic.Field(None, description='Whether or not the asset needs to exist beyond deployment time; i.e. are copied over to a different location and not needed afterwards. Setting this property to true has an impact on the lifecycle of the asset, because we will assume that it is safe to delete after the CloudFormation deployment succeeds. For example, Lambda Function assets are copied over to Lambda during deployment. Therefore, it is not necessary to store the asset in S3, so we consider those deployTime assets. Default: false\n')
    readers: typing.Optional[typing.Sequence[models.AnyResource]] = pydantic.Field(None, description='A list of principals that should be able to read this asset from S3. You can use ``asset.grantRead(principal)`` to grant read permissions later. Default: - No principals that can read file asset.\n')
    asset_hash: typing.Optional[str] = pydantic.Field(None, description='Specify a custom hash for this asset. If ``assetHashType`` is set it must be set to ``AssetHashType.CUSTOM``. For consistency, this custom hash will be SHA256 hashed and encoded as hex. The resulting hash will be the asset hash. NOTE: the hash is used in order to identify a specific revision of the asset, and used for optimizing and caching deployment activities related to this asset such as packaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will need to make sure it is updated every time the asset changes, or otherwise it is possible that some deployments will not be invalidated. Default: - based on ``assetHashType``\n')
    asset_hash_type: typing.Optional[aws_cdk.AssetHashType] = pydantic.Field(None, description='Specifies the type of hash to calculate for this asset. If ``assetHash`` is configured, this option must be ``undefined`` or ``AssetHashType.CUSTOM``. Default: - the default is ``AssetHashType.SOURCE``, but if ``assetHash`` is explicitly specified this value defaults to ``AssetHashType.CUSTOM``.\n')
    bundling: typing.Union[models.BundlingOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Bundle the asset by executing a command in a Docker container or a custom bundling provider. The asset path will be mounted at ``/asset-input``. The Docker container is responsible for putting content at ``/asset-output``. The content at ``/asset-output`` will be zipped and used as the final asset. Default: - uploaded as-is to S3 if the asset is a regular file or a .zip file, archived into a .zip file and uploaded to S3 otherwise\n')
    exclude: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='File paths matching the patterns will be excluded. See ``ignoreMode`` to set the matching behavior. Has no effect on Assets bundled using the ``bundling`` property. Default: - nothing is excluded\n')
    follow_symlinks: typing.Optional[aws_cdk.SymlinkFollowMode] = pydantic.Field(None, description='A strategy for how to handle symlinks. Default: SymlinkFollowMode.NEVER\n')
    ignore_mode: typing.Optional[aws_cdk.IgnoreMode] = pydantic.Field(None, description='The ignore behavior to use for ``exclude`` patterns. Default: IgnoreMode.GLOB\n')
    ...

class InlineCodeDefFromBucketParams(pydantic.BaseModel):
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='The S3 bucket.\n')
    key: str = pydantic.Field(..., description='The object key.\n')
    object_version: typing.Optional[str] = pydantic.Field(None, description='Optional S3 object version.\n')
    ...

class InlineCodeDefFromInlineParams(pydantic.BaseModel):
    code: str = pydantic.Field(..., description='The actual handler code (limited to 5MB).\n')
    ...


#  autogenerated from aws_cdk.aws_synthetics.Runtime
class RuntimeDef(BaseClass):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the runtime version.')
    family: typing.Union[aws_cdk.aws_synthetics.RuntimeFamily, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Lambda runtime family.')
    _init_params: typing.ClassVar[list[str]] = ['name', 'family']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.Runtime'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.S3Code
class S3CodeDef(BaseClass):
    bucket: typing.Union[_REQUIRED_INIT_PARAM, models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='-\n')
    object_version: typing.Optional[str] = pydantic.Field(None, description='-')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key', 'object_version']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_asset', 'from_bucket', 'from_inline']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.S3Code'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_asset', 'from_bucket', 'from_inline']
    ...


    from_asset: typing.Optional[models.aws_synthetics.S3CodeDefFromAssetParams] = pydantic.Field(None, description='Specify code from a local path.\nPath must include the folder structure ``nodejs/node_modules/myCanaryFilename.js``.')
    from_bucket: typing.Optional[models.aws_synthetics.S3CodeDefFromBucketParams] = pydantic.Field(None, description='Specify code from an s3 bucket.\nThe object in the s3 bucket must be a .zip file that contains\nthe structure ``nodejs/node_modules/myCanaryFilename.js``.')
    from_inline: typing.Optional[models.aws_synthetics.S3CodeDefFromInlineParams] = pydantic.Field(None, description='Specify code inline.')
    resource_config: typing.Optional[models.aws_synthetics.S3CodeDefConfig] = pydantic.Field(None)


class S3CodeDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_synthetics.S3CodeDefBindParams]] = pydantic.Field(None, description='Called when the canary is initialized to allow this object to bind to the stack, add resources and have fun.')

class S3CodeDefBindParams(pydantic.BaseModel):
    ...

class S3CodeDefFromAssetParams(pydantic.BaseModel):
    asset_path: str = pydantic.Field(..., description='Either a directory or a .zip file.\n')
    deploy_time: typing.Optional[bool] = pydantic.Field(None, description='Whether or not the asset needs to exist beyond deployment time; i.e. are copied over to a different location and not needed afterwards. Setting this property to true has an impact on the lifecycle of the asset, because we will assume that it is safe to delete after the CloudFormation deployment succeeds. For example, Lambda Function assets are copied over to Lambda during deployment. Therefore, it is not necessary to store the asset in S3, so we consider those deployTime assets. Default: false\n')
    readers: typing.Optional[typing.Sequence[models.AnyResource]] = pydantic.Field(None, description='A list of principals that should be able to read this asset from S3. You can use ``asset.grantRead(principal)`` to grant read permissions later. Default: - No principals that can read file asset.\n')
    asset_hash: typing.Optional[str] = pydantic.Field(None, description='Specify a custom hash for this asset. If ``assetHashType`` is set it must be set to ``AssetHashType.CUSTOM``. For consistency, this custom hash will be SHA256 hashed and encoded as hex. The resulting hash will be the asset hash. NOTE: the hash is used in order to identify a specific revision of the asset, and used for optimizing and caching deployment activities related to this asset such as packaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will need to make sure it is updated every time the asset changes, or otherwise it is possible that some deployments will not be invalidated. Default: - based on ``assetHashType``\n')
    asset_hash_type: typing.Optional[aws_cdk.AssetHashType] = pydantic.Field(None, description='Specifies the type of hash to calculate for this asset. If ``assetHash`` is configured, this option must be ``undefined`` or ``AssetHashType.CUSTOM``. Default: - the default is ``AssetHashType.SOURCE``, but if ``assetHash`` is explicitly specified this value defaults to ``AssetHashType.CUSTOM``.\n')
    bundling: typing.Union[models.BundlingOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Bundle the asset by executing a command in a Docker container or a custom bundling provider. The asset path will be mounted at ``/asset-input``. The Docker container is responsible for putting content at ``/asset-output``. The content at ``/asset-output`` will be zipped and used as the final asset. Default: - uploaded as-is to S3 if the asset is a regular file or a .zip file, archived into a .zip file and uploaded to S3 otherwise\n')
    exclude: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='File paths matching the patterns will be excluded. See ``ignoreMode`` to set the matching behavior. Has no effect on Assets bundled using the ``bundling`` property. Default: - nothing is excluded\n')
    follow_symlinks: typing.Optional[aws_cdk.SymlinkFollowMode] = pydantic.Field(None, description='A strategy for how to handle symlinks. Default: SymlinkFollowMode.NEVER\n')
    ignore_mode: typing.Optional[aws_cdk.IgnoreMode] = pydantic.Field(None, description='The ignore behavior to use for ``exclude`` patterns. Default: IgnoreMode.GLOB\n')
    ...

class S3CodeDefFromBucketParams(pydantic.BaseModel):
    bucket: typing.Union[models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(..., description='The S3 bucket.\n')
    key: str = pydantic.Field(..., description='The object key.\n')
    object_version: typing.Optional[str] = pydantic.Field(None, description='Optional S3 object version.\n')
    ...

class S3CodeDefFromInlineParams(pydantic.BaseModel):
    code: str = pydantic.Field(..., description='The actual handler code (limited to 5MB).\n')
    ...


#  autogenerated from aws_cdk.aws_synthetics.Schedule
class ScheduleDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['cron', 'expression', 'once', 'rate']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.Schedule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_synthetics.ScheduleDefConfig] = pydantic.Field(None)


class ScheduleDefConfig(pydantic.BaseModel):
    cron: typing.Optional[list[models.aws_synthetics.ScheduleDefCronParams]] = pydantic.Field(None, description='Create a schedule from a set of cron fields.')
    expression: typing.Optional[list[models.aws_synthetics.ScheduleDefExpressionParams]] = pydantic.Field(None, description="Construct a schedule from a literal schedule expression.\nThe expression must be in a ``rate(number units)`` format.\nFor example, ``Schedule.expression('rate(10 minutes)')``")
    once: typing.Optional[list[models.aws_synthetics.ScheduleDefOnceParams]] = pydantic.Field(None, description='The canary will be executed once.')
    rate: typing.Optional[list[models.aws_synthetics.ScheduleDefRateParams]] = pydantic.Field(None, description='Construct a schedule from an interval.\nAllowed values: 0 (for a single run) or between 1 and 60 minutes.\nTo specify a single run, you can use ``Schedule.once()``.')

class ScheduleDefCronParams(pydantic.BaseModel):
    day: typing.Optional[str] = pydantic.Field(None, description='The day of the month to run this rule at. Default: - Every day of the month\n')
    hour: typing.Optional[str] = pydantic.Field(None, description='The hour to run this rule at. Default: - Every hour\n')
    minute: typing.Optional[str] = pydantic.Field(None, description='The minute to run this rule at. Default: - Every minute\n')
    month: typing.Optional[str] = pydantic.Field(None, description='The month to run this rule at. Default: - Every month\n')
    week_day: typing.Optional[str] = pydantic.Field(None, description='The day of the week to run this rule at. Default: - Any day of the week')
    return_config: typing.Optional[list[models.aws_synthetics.ScheduleDefConfig]] = pydantic.Field(None)
    ...

class ScheduleDefExpressionParams(pydantic.BaseModel):
    expression: str = pydantic.Field(..., description='The expression to use.')
    return_config: typing.Optional[list[models.aws_synthetics.ScheduleDefConfig]] = pydantic.Field(None)
    ...

class ScheduleDefOnceParams(pydantic.BaseModel):
    return_config: typing.Optional[list[models.aws_synthetics.ScheduleDefConfig]] = pydantic.Field(None)
    ...

class ScheduleDefRateParams(pydantic.BaseModel):
    interval: models.DurationDef = pydantic.Field(..., description='The interval at which to run the canary.')
    return_config: typing.Optional[list[models.aws_synthetics.ScheduleDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_synthetics.Test
class TestDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['custom']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.Test'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_synthetics.TestDefConfig] = pydantic.Field(None)


class TestDefConfig(pydantic.BaseModel):
    custom: typing.Optional[list[models.aws_synthetics.TestDefCustomParams]] = pydantic.Field(None, description='Specify a custom test with your own code.')
    code_config: typing.Optional[models.aws_synthetics.CodeDefConfig] = pydantic.Field(None)

class TestDefCustomParams(pydantic.BaseModel):
    code: models.aws_synthetics.CodeDef = pydantic.Field(..., description='The code of the canary script.\n')
    handler: str = pydantic.Field(..., description='The handler for the code. Must end with ``.handler``.\n')
    return_config: typing.Optional[list[models.aws_synthetics.TestDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_synthetics.Canary
class CanaryDef(BaseConstruct, ConnectableMixin):
    runtime: typing.Union[models.aws_synthetics.RuntimeDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specify the runtime version to use for the canary.\n')
    test: typing.Union[models.aws_synthetics.TestDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of test that you want your canary to run. Use ``Test.custom()`` to specify the test to run.\n')
    artifacts_bucket_lifecycle_rules: typing.Optional[typing.Sequence[typing.Union[models.aws_s3.LifecycleRuleDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Lifecycle rules for the generated canary artifact bucket. Has no effect if a bucket is passed to ``artifactsBucketLocation``. If you pass a bucket to ``artifactsBucketLocation``, you can add lifecycle rules to the bucket itself. Default: - no rules applied to the generated bucket.\n')
    artifacts_bucket_location: typing.Union[models.aws_synthetics.ArtifactsBucketLocationDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The s3 location that stores the data of the canary runs. Default: - A new s3 bucket will be created without a prefix.\n')
    canary_name: typing.Optional[str] = pydantic.Field(None, description='The name of the canary. Be sure to give it a descriptive name that distinguishes it from other canaries in your account. Do not include secrets or proprietary information in your canary name. The canary name makes up part of the canary ARN, which is included in outbound calls over the internet. Default: - A unique name will be generated from the construct ID\n')
    cleanup: typing.Optional[aws_cdk.aws_synthetics.Cleanup] = pydantic.Field(None, description='Specify the underlying resources to be cleaned up when the canary is deleted. Using ``Cleanup.LAMBDA`` will create a Custom Resource to achieve this. Default: Cleanup.NOTHING\n')
    environment_variables: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Key-value pairs that the Synthetics caches and makes available for your canary scripts. Use environment variables to apply configuration changes, such as test and production environment configurations, without changing your Canary script source code. Default: - No environment variables.\n')
    failure_retention_period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='How many days should failed runs be retained. Default: Duration.days(31)\n')
    role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description="Canary execution role. This is the role that will be assumed by the canary upon execution. It controls the permissions that the canary will have. The role must be assumable by the AWS Lambda service principal. If not supplied, a role will be created with all the required permissions. If you provide a Role, you must add the required permissions. Default: - A unique role will be generated for this canary. You can add permissions to roles by calling 'addToRolePolicy'.\n")
    schedule: typing.Optional[models.aws_synthetics.ScheduleDef] = pydantic.Field(None, description="Specify the schedule for how often the canary runs. For example, if you set ``schedule`` to ``rate(10 minutes)``, then the canary will run every 10 minutes. You can set the schedule with ``Schedule.rate(Duration)`` (recommended) or you can specify an expression using ``Schedule.expression()``. Default: 'rate(5 minutes)'\n")
    security_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_ec2.SecurityGroupDef]]] = pydantic.Field(None, description="The list of security groups to associate with the canary's network interfaces. You must provide ``vpc`` when using this prop. Default: - If the canary is placed within a VPC and a security group is not specified a dedicated security group will be created for this canary.\n")
    start_after_creation: typing.Optional[bool] = pydantic.Field(None, description='Whether or not the canary should start after creation. Default: true\n')
    success_retention_period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='How many days should successful runs be retained. Default: Duration.days(31)\n')
    time_to_live: typing.Optional[models.DurationDef] = pydantic.Field(None, description="How long the canary will be in a 'RUNNING' state. For example, if you set ``timeToLive`` to be 1 hour and ``schedule`` to be ``rate(10 minutes)``, your canary will run at 10 minute intervals for an hour, for a total of 6 times. Default: - no limit\n")
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The VPC where this canary is run. Specify this if the canary needs to access resources in a VPC. Default: - Not in VPC\n')
    vpc_subnets: typing.Union[models.aws_ec2.SubnetSelectionDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Where to place the network interfaces within the VPC. You must provide ``vpc`` when using this prop. Default: - the Vpc default strategy if not specified')
    _init_params: typing.ClassVar[list[str]] = ['runtime', 'test', 'artifacts_bucket_lifecycle_rules', 'artifacts_bucket_location', 'canary_name', 'cleanup', 'environment_variables', 'failure_retention_period', 'role', 'schedule', 'security_groups', 'start_after_creation', 'success_retention_period', 'time_to_live', 'vpc', 'vpc_subnets']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy', 'metric_duration', 'metric_failed', 'metric_success_percent']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.Canary'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_synthetics.CanaryDefConfig] = pydantic.Field(None)


class CanaryDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    metric_duration: typing.Optional[list[models.aws_synthetics.CanaryDefMetricDurationParams]] = pydantic.Field(None, description='Measure the Duration of a single canary run, in seconds.')
    metric_failed: typing.Optional[list[models.aws_synthetics.CanaryDefMetricFailedParams]] = pydantic.Field(None, description='Measure the number of failed canary runs over a given time period.\nDefault: sum over 5 minutes')
    metric_success_percent: typing.Optional[list[models.aws_synthetics.CanaryDefMetricSuccessPercentParams]] = pydantic.Field(None, description='Measure the percentage of successful canary runs.')
    artifacts_bucket_config: typing.Optional[models._interface_methods.AwsS3IBucketDefConfig] = pydantic.Field(None)
    connections_config: typing.Optional[models.aws_ec2.ConnectionsDefConfig] = pydantic.Field(None)
    role_config: typing.Optional[models._interface_methods.AwsIamIRoleDefConfig] = pydantic.Field(None)

class CanaryDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class CanaryDefMetricDurationParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: avg over 5 minutes\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class CanaryDefMetricFailedParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...

class CanaryDefMetricSuccessPercentParams(pydantic.BaseModel):
    account: typing.Optional[str] = pydantic.Field(None, description='Account which this metric comes from. Default: - Deployment account.\n')
    color: typing.Optional[str] = pydantic.Field(None, description="The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The ``Color`` class has a set of standard colors that can be used here. Default: - Automatic color\n")
    dimensions_map: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Dimensions of the metric. Default: - No dimensions.\n')
    label: typing.Optional[str] = pydantic.Field(None, description="Label for this metric when added to a Graph in a Dashboard. You can use `dynamic labels <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html>`_ to show summary information about the entire displayed time series in the legend. For example, if you use:: [max: ${MAX}] MyMetric As the metric label, the maximum value in the visible range will be shown next to the time series name in the graph's legend. Default: - No label\n")
    period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The period over which the specified statistic is applied. Default: Duration.minutes(5)\n')
    region: typing.Optional[str] = pydantic.Field(None, description='Region which this metric comes from. Default: - Deployment region.\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='What function to use for aggregating. Use the ``aws_cloudwatch.Stats`` helper class to construct valid input strings. Can be one of the following: - "Minimum" | "min" - "Maximum" | "max" - "Average" | "avg" - "Sum" | "sum" - "SampleCount | "n" - "pNN.NN" - "tmNN.NN" | "tm(NN.NN%:NN.NN%)" - "iqm" - "wmNN.NN" | "wm(NN.NN%:NN.NN%)" - "tcNN.NN" | "tc(NN.NN%:NN.NN%)" - "tsNN.NN" | "ts(NN.NN%:NN.NN%)" Default: Average\n')
    unit: typing.Optional[aws_cdk.aws_cloudwatch.Unit] = pydantic.Field(None, description='Unit used to filter the metric stream. Only refer to datums emitted to the metric stream with the given unit and ignore all others. Only useful when datums are being emitted to the same metric stream under different units. The default is to use all matric datums in the stream, regardless of unit, which is recommended in nearly all cases. CloudWatch does not honor this property for graphs. Default: - All metric datums in the given metric stream\n\n:default: avg over 5 minutes\n')
    return_config: typing.Optional[list[models.aws_cloudwatch.MetricDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_synthetics.ArtifactsBucketLocation
class ArtifactsBucketLocationDef(BaseStruct):
    bucket: typing.Union[_REQUIRED_INIT_PARAM, models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The s3 location that stores the data of each run.\n')
    prefix: typing.Optional[str] = pydantic.Field(None, description='The S3 bucket prefix. Specify this if you want a more specific path within the artifacts bucket. Default: - no prefix\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_s3 as s3\n    from aws_cdk import aws_synthetics as synthetics\n\n    # bucket: s3.Bucket\n\n    artifacts_bucket_location = synthetics.ArtifactsBucketLocation(\n        bucket=bucket,\n\n        # the properties below are optional\n        prefix="prefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.ArtifactsBucketLocation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_synthetics.ArtifactsBucketLocationDefConfig] = pydantic.Field(None)


class ArtifactsBucketLocationDefConfig(pydantic.BaseModel):
    bucket_config: typing.Optional[models._interface_methods.AwsS3IBucketDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_synthetics.CanaryProps
class CanaryPropsDef(BaseStruct):
    runtime: typing.Union[models.aws_synthetics.RuntimeDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specify the runtime version to use for the canary.\n')
    test: typing.Union[models.aws_synthetics.TestDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of test that you want your canary to run. Use ``Test.custom()`` to specify the test to run.\n')
    artifacts_bucket_lifecycle_rules: typing.Optional[typing.Sequence[typing.Union[models.aws_s3.LifecycleRuleDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Lifecycle rules for the generated canary artifact bucket. Has no effect if a bucket is passed to ``artifactsBucketLocation``. If you pass a bucket to ``artifactsBucketLocation``, you can add lifecycle rules to the bucket itself. Default: - no rules applied to the generated bucket.\n')
    artifacts_bucket_location: typing.Union[models.aws_synthetics.ArtifactsBucketLocationDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The s3 location that stores the data of the canary runs. Default: - A new s3 bucket will be created without a prefix.\n')
    canary_name: typing.Optional[str] = pydantic.Field(None, description='The name of the canary. Be sure to give it a descriptive name that distinguishes it from other canaries in your account. Do not include secrets or proprietary information in your canary name. The canary name makes up part of the canary ARN, which is included in outbound calls over the internet. Default: - A unique name will be generated from the construct ID\n')
    cleanup: typing.Optional[aws_cdk.aws_synthetics.Cleanup] = pydantic.Field(None, description='Specify the underlying resources to be cleaned up when the canary is deleted. Using ``Cleanup.LAMBDA`` will create a Custom Resource to achieve this. Default: Cleanup.NOTHING\n')
    environment_variables: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Key-value pairs that the Synthetics caches and makes available for your canary scripts. Use environment variables to apply configuration changes, such as test and production environment configurations, without changing your Canary script source code. Default: - No environment variables.\n')
    failure_retention_period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='How many days should failed runs be retained. Default: Duration.days(31)\n')
    role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description="Canary execution role. This is the role that will be assumed by the canary upon execution. It controls the permissions that the canary will have. The role must be assumable by the AWS Lambda service principal. If not supplied, a role will be created with all the required permissions. If you provide a Role, you must add the required permissions. Default: - A unique role will be generated for this canary. You can add permissions to roles by calling 'addToRolePolicy'.\n")
    schedule: typing.Optional[models.aws_synthetics.ScheduleDef] = pydantic.Field(None, description="Specify the schedule for how often the canary runs. For example, if you set ``schedule`` to ``rate(10 minutes)``, then the canary will run every 10 minutes. You can set the schedule with ``Schedule.rate(Duration)`` (recommended) or you can specify an expression using ``Schedule.expression()``. Default: 'rate(5 minutes)'\n")
    security_groups: typing.Optional[typing.Sequence[typing.Union[models.aws_ec2.SecurityGroupDef]]] = pydantic.Field(None, description="The list of security groups to associate with the canary's network interfaces. You must provide ``vpc`` when using this prop. Default: - If the canary is placed within a VPC and a security group is not specified a dedicated security group will be created for this canary.\n")
    start_after_creation: typing.Optional[bool] = pydantic.Field(None, description='Whether or not the canary should start after creation. Default: true\n')
    success_retention_period: typing.Optional[models.DurationDef] = pydantic.Field(None, description='How many days should successful runs be retained. Default: Duration.days(31)\n')
    time_to_live: typing.Optional[models.DurationDef] = pydantic.Field(None, description="How long the canary will be in a 'RUNNING' state. For example, if you set ``timeToLive`` to be 1 hour and ``schedule`` to be ``rate(10 minutes)``, your canary will run at 10 minute intervals for an hour, for a total of 6 times. Default: - no limit\n")
    vpc: typing.Optional[typing.Union[models.aws_ec2.VpcDef]] = pydantic.Field(None, description='The VPC where this canary is run. Specify this if the canary needs to access resources in a VPC. Default: - Not in VPC\n')
    vpc_subnets: typing.Union[models.aws_ec2.SubnetSelectionDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Where to place the network interfaces within the VPC. You must provide ``vpc`` when using this prop. Default: - the Vpc default strategy if not specified\n\n:exampleMetadata: infused\n\nExample::\n\n    canary = synthetics.Canary(self, "MyCanary",\n        schedule=synthetics.Schedule.rate(Duration.minutes(5)),\n        test=synthetics.Test.custom(\n            code=synthetics.Code.from_asset(path.join(__dirname, "canary")),\n            handler="index.handler"\n        ),\n        runtime=synthetics.Runtime.SYNTHETICS_NODEJS_PUPPETEER_6_2,\n        environment_variables={\n            "stage": "prod"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['runtime', 'test', 'artifacts_bucket_lifecycle_rules', 'artifacts_bucket_location', 'canary_name', 'cleanup', 'environment_variables', 'failure_retention_period', 'role', 'schedule', 'security_groups', 'start_after_creation', 'success_retention_period', 'time_to_live', 'vpc', 'vpc_subnets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CanaryProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CfnCanary.ArtifactConfigProperty
class CfnCanary_ArtifactConfigPropertyDef(BaseStruct):
    s3_encryption: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_S3EncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A structure that contains the configuration of the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3 . Artifact encryption functionality is available only for canaries that use Synthetics runtime version syn-nodejs-puppeteer-3.3 or later. For more information, see `Encrypting canary artifacts <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_artifact_encryption.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-synthetics-canary-artifactconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    artifact_config_property = synthetics.CfnCanary.ArtifactConfigProperty(\n        s3_encryption=synthetics.CfnCanary.S3EncryptionProperty(\n            encryption_mode="encryptionMode",\n            kms_key_arn="kmsKeyArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_encryption']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanary.ArtifactConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CfnCanary.BaseScreenshotProperty
class CfnCanary_BaseScreenshotPropertyDef(BaseStruct):
    screenshot_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the screenshot. This is generated the first time the canary is run after the ``UpdateCanary`` operation that specified for this canary to perform visual monitoring.\n')
    ignore_coordinates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Coordinates that define the part of a screen to ignore during screenshot comparisons. To obtain the coordinates to use here, use the CloudWatch console to draw the boundaries on the screen. For more information, see `Edit or delete a canary <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/synthetics_canaries_deletion.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-synthetics-canary-basescreenshot.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    base_screenshot_property = synthetics.CfnCanary.BaseScreenshotProperty(\n        screenshot_name="screenshotName",\n\n        # the properties below are optional\n        ignore_coordinates=["ignoreCoordinates"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['screenshot_name', 'ignore_coordinates']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanary.BaseScreenshotProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CfnCanary.CodeProperty
class CfnCanary_CodePropertyDef(BaseStruct):
    handler: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The entry point to use for the source code when running the canary. For canaries that use the ``syn-python-selenium-1.0`` runtime or a ``syn-nodejs.puppeteer`` runtime earlier than ``syn-nodejs.puppeteer-3.4`` , the handler must be specified as ``*fileName* .handler`` . For ``syn-python-selenium-1.1`` , ``syn-nodejs.puppeteer-3.4`` , and later runtimes, the handler can be specified as ``*fileName* . *functionName*`` , or you can specify a folder where canary scripts reside as ``*folder* / *fileName* . *functionName*`` .\n')
    s3_bucket: typing.Optional[str] = pydantic.Field(None, description='If your canary script is located in S3, specify the bucket name here. The bucket must already exist.\n')
    s3_key: typing.Optional[str] = pydantic.Field(None, description='The S3 key of your script. For more information, see `Working with Amazon S3 Objects <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html>`_ .\n')
    s3_object_version: typing.Optional[str] = pydantic.Field(None, description='The S3 version ID of your script.\n')
    script: typing.Optional[str] = pydantic.Field(None, description='If you input your canary script directly into the canary instead of referring to an S3 location, the value of this parameter is the script in plain text. It can be up to 5 MB.\n')
    source_location_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the Lambda layer where Synthetics stores the canary script code.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-synthetics-canary-code.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    code_property = synthetics.CfnCanary.CodeProperty(\n        handler="handler",\n\n        # the properties below are optional\n        s3_bucket="s3Bucket",\n        s3_key="s3Key",\n        s3_object_version="s3ObjectVersion",\n        script="script",\n        source_location_arn="sourceLocationArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['handler', 's3_bucket', 's3_key', 's3_object_version', 'script', 'source_location_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanary.CodeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CfnCanary.RunConfigProperty
class CfnCanary_RunConfigPropertyDef(BaseStruct):
    active_tracing: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether this canary is to use active AWS X-Ray tracing when it runs. Active tracing enables this canary run to be displayed in the ServiceLens and X-Ray service maps even if the canary does not hit an endpoint that has X-Ray tracing enabled. Using X-Ray tracing incurs charges. For more information, see `Canaries and X-Ray tracing <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_tracing.html>`_ . You can enable active tracing only for canaries that use version ``syn-nodejs-2.0`` or later for their canary runtime.\n')
    environment_variables: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='Specifies the keys and values to use for any environment variables used in the canary script. Use the following format: { "key1" : "value1", "key2" : "value2", ...} Keys must start with a letter and be at least two characters. The total size of your environment variables cannot exceed 4 KB. You can\'t specify any Lambda reserved environment variables as the keys for your environment variables. For more information about reserved keys, see `Runtime environment variables <https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime>`_ .\n')
    memory_in_mb: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum amount of memory that the canary can use while running. This value must be a multiple of 64. The range is 960 to 3008.\n')
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='How long the canary is allowed to run before it must stop. You can\'t set this time to be longer than the frequency of the runs of this canary. If you omit this field, the frequency of the canary is used as this value, up to a maximum of 900 seconds.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-synthetics-canary-runconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    run_config_property = synthetics.CfnCanary.RunConfigProperty(\n        active_tracing=False,\n        environment_variables={\n            "environment_variables_key": "environmentVariables"\n        },\n        memory_in_mb=123,\n        timeout_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['active_tracing', 'environment_variables', 'memory_in_mb', 'timeout_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanary.RunConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CfnCanary.S3EncryptionProperty
class CfnCanary_S3EncryptionPropertyDef(BaseStruct):
    encryption_mode: typing.Optional[str] = pydantic.Field(None, description='The encryption method to use for artifacts created by this canary. Specify ``SSE_S3`` to use server-side encryption (SSE) with an Amazon S3-managed key. Specify ``SSE-KMS`` to use server-side encryption with a customer-managed AWS KMS key. If you omit this parameter, an AWS -managed AWS KMS key is used.\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the customer-managed AWS KMS key to use, if you specify ``SSE-KMS`` for ``EncryptionMode``.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-synthetics-canary-s3encryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    s3_encryption_property = synthetics.CfnCanary.S3EncryptionProperty(\n        encryption_mode="encryptionMode",\n        kms_key_arn="kmsKeyArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encryption_mode', 'kms_key_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanary.S3EncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CfnCanary.ScheduleProperty
class CfnCanary_SchedulePropertyDef(BaseStruct):
    expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="A ``rate`` expression or a ``cron`` expression that defines how often the canary is to run. For a rate expression, The syntax is ``rate( *number unit* )`` . *unit* can be ``minute`` , ``minutes`` , or ``hour`` . For example, ``rate(1 minute)`` runs the canary once a minute, ``rate(10 minutes)`` runs it once every 10 minutes, and ``rate(1 hour)`` runs it once every hour. You can specify a frequency between ``rate(1 minute)`` and ``rate(1 hour)`` . Specifying ``rate(0 minute)`` or ``rate(0 hour)`` is a special value that causes the canary to run only once when it is started. Use ``cron( *expression* )`` to specify a cron expression. You can't schedule a canary to wait for more than a year before running. For information about the syntax for cron expressions, see `Scheduling canary runs using cron <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html>`_ .\n")
    duration_in_seconds: typing.Optional[str] = pydantic.Field(None, description='How long, in seconds, for the canary to continue making regular runs according to the schedule in the ``Expression`` value. If you specify 0, the canary continues making runs until you stop it. If you omit this field, the default of 0 is used.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-synthetics-canary-schedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    schedule_property = synthetics.CfnCanary.ScheduleProperty(\n        expression="expression",\n\n        # the properties below are optional\n        duration_in_seconds="durationInSeconds"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['expression', 'duration_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanary.ScheduleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CfnCanary.VisualReferenceProperty
class CfnCanary_VisualReferencePropertyDef(BaseStruct):
    base_canary_run_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies which canary run to use the screenshots from as the baseline for future visual monitoring with this canary. Valid values are ``nextrun`` to use the screenshots from the next run after this update is made, ``lastrun`` to use the screenshots from the most recent run before this update was made, or the value of ``Id`` in the `CanaryRun <https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRun.html>`_ from any past run of this canary.\n')
    base_screenshots: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_BaseScreenshotPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of screenshots that are used as the baseline for comparisons during visual monitoring.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-synthetics-canary-visualreference.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    visual_reference_property = synthetics.CfnCanary.VisualReferenceProperty(\n        base_canary_run_id="baseCanaryRunId",\n\n        # the properties below are optional\n        base_screenshots=[synthetics.CfnCanary.BaseScreenshotProperty(\n            screenshot_name="screenshotName",\n\n            # the properties below are optional\n            ignore_coordinates=["ignoreCoordinates"]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['base_canary_run_id', 'base_screenshots']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanary.VisualReferenceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CfnCanary.VPCConfigProperty
class CfnCanary_VPCConfigPropertyDef(BaseStruct):
    security_group_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IDs of the security groups for this canary.\n')
    subnet_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IDs of the subnets where this canary is to run.\n')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the VPC where this canary is to run.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-synthetics-canary-vpcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    v_pCConfig_property = synthetics.CfnCanary.VPCConfigProperty(\n        security_group_ids=["securityGroupIds"],\n        subnet_ids=["subnetIds"],\n\n        # the properties below are optional\n        vpc_id="vpcId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids', 'vpc_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanary.VPCConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CodeConfig
class CodeConfigDef(BaseStruct):
    inline_code: typing.Optional[str] = pydantic.Field(None, description='Inline code (mutually exclusive with ``s3Location``). Default: - none\n')
    s3_location: typing.Union[models.aws_s3.LocationDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The location of the code in S3 (mutually exclusive with ``inlineCode``). Default: - none\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    code_config = synthetics.CodeConfig(\n        inline_code="inlineCode",\n        s3_location=Location(\n            bucket_name="bucketName",\n            object_key="objectKey",\n\n            # the properties below are optional\n            object_version="objectVersion"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['inline_code', 's3_location']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CodeConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CronOptions
class CronOptionsDef(BaseStruct):
    day: typing.Optional[str] = pydantic.Field(None, description='The day of the month to run this rule at. Default: - Every day of the month\n')
    hour: typing.Optional[str] = pydantic.Field(None, description='The hour to run this rule at. Default: - Every hour\n')
    minute: typing.Optional[str] = pydantic.Field(None, description='The minute to run this rule at. Default: - Every minute\n')
    month: typing.Optional[str] = pydantic.Field(None, description='The month to run this rule at. Default: - Every month\n')
    week_day: typing.Optional[str] = pydantic.Field(None, description='The day of the week to run this rule at. Default: - Any day of the week\n\n:see: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html\n:exampleMetadata: infused\n\nExample::\n\n    schedule = synthetics.Schedule.cron(\n        hour="0,8,16"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['day', 'hour', 'minute', 'month', 'week_day']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CronOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CustomTestOptions
class CustomTestOptionsDef(BaseStruct):
    code: typing.Union[models.aws_synthetics.CodeDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The code of the canary script.\n')
    handler: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The handler for the code. Must end with ``.handler``.\n\n:exampleMetadata: infused\n\nExample::\n\n    canary = synthetics.Canary(self, "MyCanary",\n        schedule=synthetics.Schedule.rate(Duration.minutes(5)),\n        test=synthetics.Test.custom(\n            code=synthetics.Code.from_asset(path.join(__dirname, "canary")),\n            handler="index.handler"\n        ),\n        runtime=synthetics.Runtime.SYNTHETICS_NODEJS_PUPPETEER_6_2,\n        environment_variables={\n            "stage": "prod"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['code', 'handler']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CustomTestOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_synthetics.CustomTestOptionsDefConfig] = pydantic.Field(None)


class CustomTestOptionsDefConfig(pydantic.BaseModel):
    code_config: typing.Optional[models.aws_synthetics.CodeDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_synthetics.Cleanup
# skipping emum

#  autogenerated from aws_cdk.aws_synthetics.RuntimeFamily
# skipping emum

#  autogenerated from aws_cdk.aws_synthetics.CfnCanary
class CfnCanaryDef(BaseCfnResource):
    artifact_s3_location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The location in Amazon S3 where Synthetics stores artifacts from the runs of this canary. Artifacts include the log file, screenshots, and HAR files. Specify the full location path, including ``s3://`` at the beginning of the path.\n')
    code: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_synthetics.CfnCanary_CodePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Use this structure to input your script code for the canary. This structure contains the Lambda handler with the location where the canary should start running the script. If the script is stored in an S3 bucket, the bucket name, key, and version are also included. If the script is passed into the canary directly, the script code is contained in the value of ``Script`` .\n')
    execution_role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the IAM role to be used to run the canary. This role must already exist, and must include ``lambda.amazonaws.com`` as a principal in the trust policy. The role must also have the following permissions: - ``s3:PutObject`` - ``s3:GetBucketLocation`` - ``s3:ListAllMyBuckets`` - ``cloudwatch:PutMetricData`` - ``logs:CreateLogGroup`` - ``logs:CreateLogStream`` - ``logs:PutLogEvents``\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name for this canary. Be sure to give it a descriptive name that distinguishes it from other canaries in your account. Do not include secrets or proprietary information in your canary names. The canary name makes up part of the canary ARN, and the ARN is included in outbound calls over the internet. For more information, see `Security Considerations for Synthetics Canaries <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html>`_ .\n')
    runtime_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the runtime version to use for the canary. For more information about runtime versions, see `Canary Runtime Versions <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html>`_ .\n')
    schedule: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_synthetics.CfnCanary_SchedulePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A structure that contains information about how often the canary is to run, and when these runs are to stop.\n')
    artifact_config: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_ArtifactConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.\n')
    delete_lambda_resources_on_canary_deletion: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='(deprecated) Deletes associated lambda resources created by Synthetics if set to True. Default is False\n')
    failure_retention_period: typing.Union[int, float, None] = pydantic.Field(None, description='The number of days to retain data about failed runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.\n')
    run_config: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_RunConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A structure that contains input information for a canary run. If you omit this structure, the frequency of the canary is used as canary's timeout value, up to a maximum of 900 seconds.\n")
    start_canary_after_creation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specify TRUE to have the canary start making runs immediately after it is created. A canary that you create using CloudFormation can't be used to monitor the CloudFormation stack that creates the canary or to roll back that stack if there is a failure.\n")
    success_retention_period: typing.Union[int, float, None] = pydantic.Field(None, description='The number of days to retain data about successful runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The list of key-value pairs that are associated with the canary.\n')
    visual_reference: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_VisualReferencePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run to use as the baseline for screenshots, and the coordinates of any parts of the screen to ignore during the visual monitoring comparison.\n')
    vpc_config: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_VPCConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If this canary is to test an endpoint in a VPC, this structure contains information about the subnet and security groups of the VPC endpoint. For more information, see `Running a Canary in a VPC <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['artifact_s3_location', 'code', 'execution_role_arn', 'name', 'runtime_version', 'schedule', 'artifact_config', 'delete_lambda_resources_on_canary_deletion', 'failure_retention_period', 'run_config', 'start_canary_after_creation', 'success_retention_period', 'tags', 'visual_reference', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = ['ArtifactConfigProperty', 'BaseScreenshotProperty', 'CodeProperty', 'RunConfigProperty', 'S3EncryptionProperty', 'ScheduleProperty', 'VPCConfigProperty', 'VisualReferenceProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanary'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_synthetics.CfnCanaryDefConfig] = pydantic.Field(None)


class CfnCanaryDefConfig(pydantic.BaseModel):
    ArtifactConfigProperty: typing.Optional[list[models.aws_synthetics.CfnCanaryDefArtifactconfigpropertyParams]] = pydantic.Field(None, description='')
    BaseScreenshotProperty: typing.Optional[list[models.aws_synthetics.CfnCanaryDefBasescreenshotpropertyParams]] = pydantic.Field(None, description='')
    CodeProperty: typing.Optional[list[models.aws_synthetics.CfnCanaryDefCodepropertyParams]] = pydantic.Field(None, description='')
    RunConfigProperty: typing.Optional[list[models.aws_synthetics.CfnCanaryDefRunconfigpropertyParams]] = pydantic.Field(None, description='')
    S3EncryptionProperty: typing.Optional[list[models.aws_synthetics.CfnCanaryDefS3EncryptionpropertyParams]] = pydantic.Field(None, description='')
    ScheduleProperty: typing.Optional[list[models.aws_synthetics.CfnCanaryDefSchedulepropertyParams]] = pydantic.Field(None, description='')
    VPCConfigProperty: typing.Optional[list[models.aws_synthetics.CfnCanaryDefVpcconfigpropertyParams]] = pydantic.Field(None, description='')
    VisualReferenceProperty: typing.Optional[list[models.aws_synthetics.CfnCanaryDefVisualreferencepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_synthetics.CfnCanaryDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_synthetics.CfnCanaryDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_synthetics.CfnCanaryDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_synthetics.CfnCanaryDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_synthetics.CfnCanaryDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_synthetics.CfnCanaryDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_synthetics.CfnCanaryDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_synthetics.CfnCanaryDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_synthetics.CfnCanaryDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_synthetics.CfnCanaryDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_synthetics.CfnCanaryDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_synthetics.CfnCanaryDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_synthetics.CfnCanaryDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnCanaryDefArtifactconfigpropertyParams(pydantic.BaseModel):
    s3_encryption: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_S3EncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCanaryDefBasescreenshotpropertyParams(pydantic.BaseModel):
    screenshot_name: str = pydantic.Field(..., description='')
    ignore_coordinates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnCanaryDefCodepropertyParams(pydantic.BaseModel):
    handler: str = pydantic.Field(..., description='')
    s3_bucket: typing.Optional[str] = pydantic.Field(None, description='')
    s3_key: typing.Optional[str] = pydantic.Field(None, description='')
    s3_object_version: typing.Optional[str] = pydantic.Field(None, description='')
    script: typing.Optional[str] = pydantic.Field(None, description='')
    source_location_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCanaryDefRunconfigpropertyParams(pydantic.BaseModel):
    active_tracing: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    environment_variables: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    memory_in_mb: typing.Union[int, float, None] = pydantic.Field(None, description='')
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnCanaryDefS3EncryptionpropertyParams(pydantic.BaseModel):
    encryption_mode: typing.Optional[str] = pydantic.Field(None, description='')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCanaryDefSchedulepropertyParams(pydantic.BaseModel):
    expression: str = pydantic.Field(..., description='')
    duration_in_seconds: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCanaryDefVpcconfigpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    vpc_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCanaryDefVisualreferencepropertyParams(pydantic.BaseModel):
    base_canary_run_id: str = pydantic.Field(..., description='')
    base_screenshots: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_BaseScreenshotPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnCanaryDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCanaryDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCanaryDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCanaryDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCanaryDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCanaryDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCanaryDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCanaryDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCanaryDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCanaryDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCanaryDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnCanaryDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCanaryDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCanaryDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_synthetics.CfnGroup
class CfnGroupDef(BaseCfnResource):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A name for the group. It can include any Unicode characters. The names for all groups in your account, across all Regions, must be unique.\n')
    resource_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The ARNs of the canaries that you want to associate with this group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The list of key-value pairs that are associated with the group.')
    _init_params: typing.ClassVar[list[str]] = ['name', 'resource_arns', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_synthetics.CfnGroupDefConfig] = pydantic.Field(None)


class CfnGroupDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_synthetics.CfnGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_synthetics.CfnGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_synthetics.CfnGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_synthetics.CfnGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_synthetics.CfnGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_synthetics.CfnGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_synthetics.CfnGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_synthetics.CfnGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_synthetics.CfnGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_synthetics.CfnGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_synthetics.CfnGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_synthetics.CfnGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_synthetics.CfnGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_synthetics.CfnCanaryProps
class CfnCanaryPropsDef(BaseCfnProperty):
    artifact_s3_location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The location in Amazon S3 where Synthetics stores artifacts from the runs of this canary. Artifacts include the log file, screenshots, and HAR files. Specify the full location path, including ``s3://`` at the beginning of the path.\n')
    code: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_synthetics.CfnCanary_CodePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Use this structure to input your script code for the canary. This structure contains the Lambda handler with the location where the canary should start running the script. If the script is stored in an S3 bucket, the bucket name, key, and version are also included. If the script is passed into the canary directly, the script code is contained in the value of ``Script`` .\n')
    execution_role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the IAM role to be used to run the canary. This role must already exist, and must include ``lambda.amazonaws.com`` as a principal in the trust policy. The role must also have the following permissions: - ``s3:PutObject`` - ``s3:GetBucketLocation`` - ``s3:ListAllMyBuckets`` - ``cloudwatch:PutMetricData`` - ``logs:CreateLogGroup`` - ``logs:CreateLogStream`` - ``logs:PutLogEvents``\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name for this canary. Be sure to give it a descriptive name that distinguishes it from other canaries in your account. Do not include secrets or proprietary information in your canary names. The canary name makes up part of the canary ARN, and the ARN is included in outbound calls over the internet. For more information, see `Security Considerations for Synthetics Canaries <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html>`_ .\n')
    runtime_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the runtime version to use for the canary. For more information about runtime versions, see `Canary Runtime Versions <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html>`_ .\n')
    schedule: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_synthetics.CfnCanary_SchedulePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A structure that contains information about how often the canary is to run, and when these runs are to stop.\n')
    artifact_config: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_ArtifactConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.\n')
    delete_lambda_resources_on_canary_deletion: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='(deprecated) Deletes associated lambda resources created by Synthetics if set to True. Default is False\n')
    failure_retention_period: typing.Union[int, float, None] = pydantic.Field(None, description='The number of days to retain data about failed runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.\n')
    run_config: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_RunConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A structure that contains input information for a canary run. If you omit this structure, the frequency of the canary is used as canary's timeout value, up to a maximum of 900 seconds.\n")
    start_canary_after_creation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specify TRUE to have the canary start making runs immediately after it is created. A canary that you create using CloudFormation can't be used to monitor the CloudFormation stack that creates the canary or to roll back that stack if there is a failure.\n")
    success_retention_period: typing.Union[int, float, None] = pydantic.Field(None, description='The number of days to retain data about successful runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The list of key-value pairs that are associated with the canary.\n')
    visual_reference: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_VisualReferencePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run to use as the baseline for screenshots, and the coordinates of any parts of the screen to ignore during the visual monitoring comparison.\n')
    vpc_config: typing.Union[models.UnsupportedResource, models.aws_synthetics.CfnCanary_VPCConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If this canary is to test an endpoint in a VPC, this structure contains information about the subnet and security groups of the VPC endpoint. For more information, see `Running a Canary in a VPC <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-synthetics-canary.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    cfn_canary_props = synthetics.CfnCanaryProps(\n        artifact_s3_location="artifactS3Location",\n        code=synthetics.CfnCanary.CodeProperty(\n            handler="handler",\n\n            # the properties below are optional\n            s3_bucket="s3Bucket",\n            s3_key="s3Key",\n            s3_object_version="s3ObjectVersion",\n            script="script",\n            source_location_arn="sourceLocationArn"\n        ),\n        execution_role_arn="executionRoleArn",\n        name="name",\n        runtime_version="runtimeVersion",\n        schedule=synthetics.CfnCanary.ScheduleProperty(\n            expression="expression",\n\n            # the properties below are optional\n            duration_in_seconds="durationInSeconds"\n        ),\n\n        # the properties below are optional\n        artifact_config=synthetics.CfnCanary.ArtifactConfigProperty(\n            s3_encryption=synthetics.CfnCanary.S3EncryptionProperty(\n                encryption_mode="encryptionMode",\n                kms_key_arn="kmsKeyArn"\n            )\n        ),\n        delete_lambda_resources_on_canary_deletion=False,\n        failure_retention_period=123,\n        run_config=synthetics.CfnCanary.RunConfigProperty(\n            active_tracing=False,\n            environment_variables={\n                "environment_variables_key": "environmentVariables"\n            },\n            memory_in_mb=123,\n            timeout_in_seconds=123\n        ),\n        start_canary_after_creation=False,\n        success_retention_period=123,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        visual_reference=synthetics.CfnCanary.VisualReferenceProperty(\n            base_canary_run_id="baseCanaryRunId",\n\n            # the properties below are optional\n            base_screenshots=[synthetics.CfnCanary.BaseScreenshotProperty(\n                screenshot_name="screenshotName",\n\n                # the properties below are optional\n                ignore_coordinates=["ignoreCoordinates"]\n            )]\n        ),\n        vpc_config=synthetics.CfnCanary.VPCConfigProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"],\n\n            # the properties below are optional\n            vpc_id="vpcId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['artifact_s3_location', 'code', 'execution_role_arn', 'name', 'runtime_version', 'schedule', 'artifact_config', 'delete_lambda_resources_on_canary_deletion', 'failure_retention_period', 'run_config', 'start_canary_after_creation', 'success_retention_period', 'tags', 'visual_reference', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnCanaryProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_synthetics.CfnGroupProps
class CfnGroupPropsDef(BaseCfnProperty):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A name for the group. It can include any Unicode characters. The names for all groups in your account, across all Regions, must be unique.\n')
    resource_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The ARNs of the canaries that you want to associate with this group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The list of key-value pairs that are associated with the group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-synthetics-group.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_synthetics as synthetics\n\n    cfn_group_props = synthetics.CfnGroupProps(\n        name="name",\n\n        # the properties below are optional\n        resource_arns=["resourceArns"],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'resource_arns', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_synthetics.CfnGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    AssetCode: typing.Optional[dict[str, models.aws_synthetics.AssetCodeDef]] = pydantic.Field(None)
    Code: typing.Optional[dict[str, models.aws_synthetics.CodeDef]] = pydantic.Field(None)
    InlineCode: typing.Optional[dict[str, models.aws_synthetics.InlineCodeDef]] = pydantic.Field(None)
    Runtime: typing.Optional[dict[str, models.aws_synthetics.RuntimeDef]] = pydantic.Field(None)
    S3Code: typing.Optional[dict[str, models.aws_synthetics.S3CodeDef]] = pydantic.Field(None)
    Schedule: typing.Optional[dict[str, models.aws_synthetics.ScheduleDef]] = pydantic.Field(None)
    Test: typing.Optional[dict[str, models.aws_synthetics.TestDef]] = pydantic.Field(None)
    Canary: typing.Optional[dict[str, models.aws_synthetics.CanaryDef]] = pydantic.Field(None)
    ArtifactsBucketLocation: typing.Optional[dict[str, models.aws_synthetics.ArtifactsBucketLocationDef]] = pydantic.Field(None)
    CanaryProps: typing.Optional[dict[str, models.aws_synthetics.CanaryPropsDef]] = pydantic.Field(None)
    CfnCanary_ArtifactConfigProperty: typing.Optional[dict[str, models.aws_synthetics.CfnCanary_ArtifactConfigPropertyDef]] = pydantic.Field(None)
    CfnCanary_BaseScreenshotProperty: typing.Optional[dict[str, models.aws_synthetics.CfnCanary_BaseScreenshotPropertyDef]] = pydantic.Field(None)
    CfnCanary_CodeProperty: typing.Optional[dict[str, models.aws_synthetics.CfnCanary_CodePropertyDef]] = pydantic.Field(None)
    CfnCanary_RunConfigProperty: typing.Optional[dict[str, models.aws_synthetics.CfnCanary_RunConfigPropertyDef]] = pydantic.Field(None)
    CfnCanary_S3EncryptionProperty: typing.Optional[dict[str, models.aws_synthetics.CfnCanary_S3EncryptionPropertyDef]] = pydantic.Field(None)
    CfnCanary_ScheduleProperty: typing.Optional[dict[str, models.aws_synthetics.CfnCanary_SchedulePropertyDef]] = pydantic.Field(None)
    CfnCanary_VisualReferenceProperty: typing.Optional[dict[str, models.aws_synthetics.CfnCanary_VisualReferencePropertyDef]] = pydantic.Field(None)
    CfnCanary_VPCConfigProperty: typing.Optional[dict[str, models.aws_synthetics.CfnCanary_VPCConfigPropertyDef]] = pydantic.Field(None)
    CodeConfig: typing.Optional[dict[str, models.aws_synthetics.CodeConfigDef]] = pydantic.Field(None)
    CronOptions: typing.Optional[dict[str, models.aws_synthetics.CronOptionsDef]] = pydantic.Field(None)
    CustomTestOptions: typing.Optional[dict[str, models.aws_synthetics.CustomTestOptionsDef]] = pydantic.Field(None)
    CfnCanary: typing.Optional[dict[str, models.aws_synthetics.CfnCanaryDef]] = pydantic.Field(None)
    CfnGroup: typing.Optional[dict[str, models.aws_synthetics.CfnGroupDef]] = pydantic.Field(None)
    CfnCanaryProps: typing.Optional[dict[str, models.aws_synthetics.CfnCanaryPropsDef]] = pydantic.Field(None)
    CfnGroupProps: typing.Optional[dict[str, models.aws_synthetics.CfnGroupPropsDef]] = pydantic.Field(None)
    ...

import models
