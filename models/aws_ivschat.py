from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_ivschat.CfnLoggingConfiguration.CloudWatchLogsDestinationConfigurationProperty
class CfnLoggingConfiguration_CloudWatchLogsDestinationConfigurationPropertyDef(BaseStruct):
    log_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the Amazon Cloudwatch Logs destination where chat activity will be logged.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivschat-loggingconfiguration-cloudwatchlogsdestinationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ivschat as ivschat\n\n    cloud_watch_logs_destination_configuration_property = ivschat.CfnLoggingConfiguration.CloudWatchLogsDestinationConfigurationProperty(\n        log_group_name="logGroupName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_group_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ivschat.CfnLoggingConfiguration.CloudWatchLogsDestinationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ivschat.CfnLoggingConfiguration.DestinationConfigurationProperty
class CfnLoggingConfiguration_DestinationConfigurationPropertyDef(BaseStruct):
    cloud_watch_logs: typing.Union[models.UnsupportedResource, models.aws_ivschat.CfnLoggingConfiguration_CloudWatchLogsDestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An Amazon CloudWatch Logs destination configuration where chat activity will be logged.\n')
    firehose: typing.Union[models.UnsupportedResource, models.aws_ivschat.CfnLoggingConfiguration_FirehoseDestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.\n')
    s3: typing.Union[models.UnsupportedResource, models.aws_ivschat.CfnLoggingConfiguration_S3DestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An Amazon S3 destination configuration where chat activity will be logged.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivschat-loggingconfiguration-destinationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ivschat as ivschat\n\n    destination_configuration_property = ivschat.CfnLoggingConfiguration.DestinationConfigurationProperty(\n        cloud_watch_logs=ivschat.CfnLoggingConfiguration.CloudWatchLogsDestinationConfigurationProperty(\n            log_group_name="logGroupName"\n        ),\n        firehose=ivschat.CfnLoggingConfiguration.FirehoseDestinationConfigurationProperty(\n            delivery_stream_name="deliveryStreamName"\n        ),\n        s3=ivschat.CfnLoggingConfiguration.S3DestinationConfigurationProperty(\n            bucket_name="bucketName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_logs', 'firehose', 's3']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ivschat.CfnLoggingConfiguration.DestinationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ivschat.CfnLoggingConfiguration.FirehoseDestinationConfigurationProperty
class CfnLoggingConfiguration_FirehoseDestinationConfigurationPropertyDef(BaseStruct):
    delivery_stream_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the Amazon Kinesis Firehose delivery stream where chat activity will be logged.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivschat-loggingconfiguration-firehosedestinationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ivschat as ivschat\n\n    firehose_destination_configuration_property = ivschat.CfnLoggingConfiguration.FirehoseDestinationConfigurationProperty(\n        delivery_stream_name="deliveryStreamName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delivery_stream_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ivschat.CfnLoggingConfiguration.FirehoseDestinationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ivschat.CfnLoggingConfiguration.S3DestinationConfigurationProperty
class CfnLoggingConfiguration_S3DestinationConfigurationPropertyDef(BaseStruct):
    bucket_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the Amazon S3 bucket where chat activity will be logged.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivschat-loggingconfiguration-s3destinationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ivschat as ivschat\n\n    s3_destination_configuration_property = ivschat.CfnLoggingConfiguration.S3DestinationConfigurationProperty(\n        bucket_name="bucketName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ivschat.CfnLoggingConfiguration.S3DestinationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ivschat.CfnRoom.MessageReviewHandlerProperty
class CfnRoom_MessageReviewHandlerPropertyDef(BaseStruct):
    fallback_result: typing.Optional[str] = pydantic.Field(None, description='Specifies the fallback behavior (whether the message is allowed or denied) if the handler does not return a valid response, encounters an error, or times out. (For the timeout period, see `Service Quotas <https://docs.aws.amazon.com/ivs/latest/userguide/service-quotas.html>`_ .) If allowed, the message is delivered with returned content to all users connected to the room. If denied, the message is not delivered to any user. *Default* : ``ALLOW`` Default: - "ALLOW"\n')
    uri: typing.Optional[str] = pydantic.Field(None, description='Identifier of the message review handler. Currently this must be an ARN of a lambda function.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivschat-room-messagereviewhandler.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ivschat as ivschat\n\n    message_review_handler_property = ivschat.CfnRoom.MessageReviewHandlerProperty(\n        fallback_result="fallbackResult",\n        uri="uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['fallback_result', 'uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ivschat.CfnRoom.MessageReviewHandlerProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ivschat.CfnLoggingConfiguration
class CfnLoggingConfigurationDef(BaseCfnResource):
    destination_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ivschat.CfnLoggingConfiguration_DestinationConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The DestinationConfiguration is a complex type that contains information about where chat content will be logged.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='Logging-configuration name. The value does not need to be unique.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivschat-loggingconfiguration-tag.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['destination_configuration', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CloudWatchLogsDestinationConfigurationProperty', 'DestinationConfigurationProperty', 'FirehoseDestinationConfigurationProperty', 'S3DestinationConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ivschat.CfnLoggingConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnLoggingConfigurationDefConfig] = pydantic.Field(None)


class CfnLoggingConfigurationDefConfig(pydantic.BaseModel):
    CloudWatchLogsDestinationConfigurationProperty: typing.Optional[list[CfnLoggingConfigurationDefCloudwatchlogsdestinationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DestinationConfigurationProperty: typing.Optional[list[CfnLoggingConfigurationDefDestinationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    FirehoseDestinationConfigurationProperty: typing.Optional[list[CfnLoggingConfigurationDefFirehosedestinationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    S3DestinationConfigurationProperty: typing.Optional[list[CfnLoggingConfigurationDefS3DestinationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnLoggingConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnLoggingConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnLoggingConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnLoggingConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnLoggingConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnLoggingConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnLoggingConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnLoggingConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnLoggingConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnLoggingConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnLoggingConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnLoggingConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnLoggingConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnLoggingConfigurationDefCloudwatchlogsdestinationconfigurationpropertyParams(pydantic.BaseModel):
    log_group_name: str = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefDestinationconfigurationpropertyParams(pydantic.BaseModel):
    cloud_watch_logs: typing.Union[models.UnsupportedResource, models.aws_ivschat.CfnLoggingConfiguration_CloudWatchLogsDestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    firehose: typing.Union[models.UnsupportedResource, models.aws_ivschat.CfnLoggingConfiguration_FirehoseDestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3: typing.Union[models.UnsupportedResource, models.aws_ivschat.CfnLoggingConfiguration_S3DestinationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnLoggingConfigurationDefFirehosedestinationconfigurationpropertyParams(pydantic.BaseModel):
    delivery_stream_name: str = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefS3DestinationconfigurationpropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    ...

class CfnLoggingConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLoggingConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLoggingConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLoggingConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLoggingConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLoggingConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLoggingConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLoggingConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLoggingConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLoggingConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLoggingConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnLoggingConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLoggingConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLoggingConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ivschat.CfnRoom
class CfnRoomDef(BaseCfnResource):
    logging_configuration_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='List of logging-configuration identifiers attached to the room.\n')
    maximum_message_length: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: - 500\n')
    maximum_message_rate_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum number of messages per second that can be sent to the room (by all clients). Default: - 10\n')
    message_review_handler: typing.Union[models.UnsupportedResource, models.aws_ivschat.CfnRoom_MessageReviewHandlerPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for optional review of messages.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='Room name. The value does not need to be unique.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivschat-room-tag.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['logging_configuration_identifiers', 'maximum_message_length', 'maximum_message_rate_per_second', 'message_review_handler', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['MessageReviewHandlerProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ivschat.CfnRoom'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnRoomDefConfig] = pydantic.Field(None)


class CfnRoomDefConfig(pydantic.BaseModel):
    MessageReviewHandlerProperty: typing.Optional[list[CfnRoomDefMessagereviewhandlerpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnRoomDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnRoomDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnRoomDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnRoomDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnRoomDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnRoomDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnRoomDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnRoomDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnRoomDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnRoomDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnRoomDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnRoomDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnRoomDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnRoomDefMessagereviewhandlerpropertyParams(pydantic.BaseModel):
    fallback_result: typing.Optional[str] = pydantic.Field(None, description='')
    uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnRoomDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnRoomDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRoomDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnRoomDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRoomDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnRoomDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnRoomDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnRoomDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnRoomDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnRoomDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnRoomDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnRoomDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnRoomDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnRoomDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_ivschat.CfnLoggingConfigurationProps
class CfnLoggingConfigurationPropsDef(BaseCfnProperty):
    destination_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_ivschat.CfnLoggingConfiguration_DestinationConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The DestinationConfiguration is a complex type that contains information about where chat content will be logged.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='Logging-configuration name. The value does not need to be unique.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivschat-loggingconfiguration-tag.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivschat-loggingconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ivschat as ivschat\n\n    cfn_logging_configuration_props = ivschat.CfnLoggingConfigurationProps(\n        destination_configuration=ivschat.CfnLoggingConfiguration.DestinationConfigurationProperty(\n            cloud_watch_logs=ivschat.CfnLoggingConfiguration.CloudWatchLogsDestinationConfigurationProperty(\n                log_group_name="logGroupName"\n            ),\n            firehose=ivschat.CfnLoggingConfiguration.FirehoseDestinationConfigurationProperty(\n                delivery_stream_name="deliveryStreamName"\n            ),\n            s3=ivschat.CfnLoggingConfiguration.S3DestinationConfigurationProperty(\n                bucket_name="bucketName"\n            )\n        ),\n\n        # the properties below are optional\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination_configuration', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ivschat.CfnLoggingConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_ivschat.CfnRoomProps
class CfnRoomPropsDef(BaseCfnProperty):
    logging_configuration_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='List of logging-configuration identifiers attached to the room.\n')
    maximum_message_length: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: - 500\n')
    maximum_message_rate_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum number of messages per second that can be sent to the room (by all clients). Default: - 10\n')
    message_review_handler: typing.Union[models.UnsupportedResource, models.aws_ivschat.CfnRoom_MessageReviewHandlerPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for optional review of messages.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='Room name. The value does not need to be unique.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivschat-room-tag.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivschat-room.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_ivschat as ivschat\n\n    cfn_room_props = ivschat.CfnRoomProps(\n        logging_configuration_identifiers=["loggingConfigurationIdentifiers"],\n        maximum_message_length=123,\n        maximum_message_rate_per_second=123,\n        message_review_handler=ivschat.CfnRoom.MessageReviewHandlerProperty(\n            fallback_result="fallbackResult",\n            uri="uri"\n        ),\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['logging_configuration_identifiers', 'maximum_message_length', 'maximum_message_rate_per_second', 'message_review_handler', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_ivschat.CfnRoomProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnLoggingConfiguration_CloudWatchLogsDestinationConfigurationProperty: typing.Optional[dict[str, CfnLoggingConfiguration_CloudWatchLogsDestinationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_DestinationConfigurationProperty: typing.Optional[dict[str, CfnLoggingConfiguration_DestinationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_FirehoseDestinationConfigurationProperty: typing.Optional[dict[str, CfnLoggingConfiguration_FirehoseDestinationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration_S3DestinationConfigurationProperty: typing.Optional[dict[str, CfnLoggingConfiguration_S3DestinationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnRoom_MessageReviewHandlerProperty: typing.Optional[dict[str, CfnRoom_MessageReviewHandlerPropertyDef]] = pydantic.Field(None)
    CfnLoggingConfiguration: typing.Optional[dict[str, CfnLoggingConfigurationDef]] = pydantic.Field(None)
    CfnRoom: typing.Optional[dict[str, CfnRoomDef]] = pydantic.Field(None)
    CfnLoggingConfigurationProps: typing.Optional[dict[str, CfnLoggingConfigurationPropsDef]] = pydantic.Field(None)
    CfnRoomProps: typing.Optional[dict[str, CfnRoomPropsDef]] = pydantic.Field(None)
    ...
