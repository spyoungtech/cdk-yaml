from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.CisTargetsProperty
class CfnCisScanConfiguration_CisTargetsPropertyDef(BaseStruct):
    account_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The CIS target account ids.\n')
    target_resource_tags: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Sequence[str]], None] = pydantic.Field(None, description='The CIS target resource tags.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-cisscanconfiguration-cistargets.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    cis_targets_property = inspectorv2.CfnCisScanConfiguration.CisTargetsProperty(\n        account_ids=["accountIds"],\n\n        # the properties below are optional\n        target_resource_tags={\n            "target_resource_tags_key": ["targetResourceTags"]\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['account_ids', 'target_resource_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.CisTargetsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.DailyScheduleProperty
class CfnCisScanConfiguration_DailySchedulePropertyDef(BaseStruct):
    start_time: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_TimePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The schedule start time.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-cisscanconfiguration-dailyschedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    daily_schedule_property = inspectorv2.CfnCisScanConfiguration.DailyScheduleProperty(\n        start_time=inspectorv2.CfnCisScanConfiguration.TimeProperty(\n            time_of_day="timeOfDay",\n            time_zone="timeZone"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['start_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.DailyScheduleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.MonthlyScheduleProperty
class CfnCisScanConfiguration_MonthlySchedulePropertyDef(BaseStruct):
    day: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The monthly schedule's day.\n")
    start_time: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_TimePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The monthly schedule\'s start time.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-cisscanconfiguration-monthlyschedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    monthly_schedule_property = inspectorv2.CfnCisScanConfiguration.MonthlyScheduleProperty(\n        day="day",\n        start_time=inspectorv2.CfnCisScanConfiguration.TimeProperty(\n            time_of_day="timeOfDay",\n            time_zone="timeZone"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['day', 'start_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.MonthlyScheduleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.ScheduleProperty
class CfnCisScanConfiguration_SchedulePropertyDef(BaseStruct):
    daily: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_DailySchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A daily schedule.\n')
    monthly: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_MonthlySchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A monthly schedule.\n')
    one_time: typing.Any = pydantic.Field(None, description='A one time schedule.\n')
    weekly: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_WeeklySchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A weekly schedule.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-cisscanconfiguration-schedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    # one_time: Any\n\n    schedule_property = inspectorv2.CfnCisScanConfiguration.ScheduleProperty(\n        daily=inspectorv2.CfnCisScanConfiguration.DailyScheduleProperty(\n            start_time=inspectorv2.CfnCisScanConfiguration.TimeProperty(\n                time_of_day="timeOfDay",\n                time_zone="timeZone"\n            )\n        ),\n        monthly=inspectorv2.CfnCisScanConfiguration.MonthlyScheduleProperty(\n            day="day",\n            start_time=inspectorv2.CfnCisScanConfiguration.TimeProperty(\n                time_of_day="timeOfDay",\n                time_zone="timeZone"\n            )\n        ),\n        one_time=one_time,\n        weekly=inspectorv2.CfnCisScanConfiguration.WeeklyScheduleProperty(\n            days=["days"],\n            start_time=inspectorv2.CfnCisScanConfiguration.TimeProperty(\n                time_of_day="timeOfDay",\n                time_zone="timeZone"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['daily', 'monthly', 'one_time', 'weekly']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.ScheduleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.TimeProperty
class CfnCisScanConfiguration_TimePropertyDef(BaseStruct):
    time_of_day: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The time of day in 24-hour format (00:00).\n')
    time_zone: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The timezone.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-cisscanconfiguration-time.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    time_property = inspectorv2.CfnCisScanConfiguration.TimeProperty(\n        time_of_day="timeOfDay",\n        time_zone="timeZone"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['time_of_day', 'time_zone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.TimeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.WeeklyScheduleProperty
class CfnCisScanConfiguration_WeeklySchedulePropertyDef(BaseStruct):
    days: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The weekly schedule's days.\n")
    start_time: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_TimePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The weekly schedule\'s start time.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-cisscanconfiguration-weeklyschedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    weekly_schedule_property = inspectorv2.CfnCisScanConfiguration.WeeklyScheduleProperty(\n        days=["days"],\n        start_time=inspectorv2.CfnCisScanConfiguration.TimeProperty(\n            time_of_day="timeOfDay",\n            time_zone="timeZone"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['days', 'start_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnCisScanConfiguration.WeeklyScheduleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnFilter.DateFilterProperty
class CfnFilter_DateFilterPropertyDef(BaseStruct):
    end_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='A timestamp representing the end of the time period filtered on.\n')
    start_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='A timestamp representing the start of the time period filtered on.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-filter-datefilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    date_filter_property = inspectorv2.CfnFilter.DateFilterProperty(\n        end_inclusive=123,\n        start_inclusive=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end_inclusive', 'start_inclusive']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnFilter.DateFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnFilter.FilterCriteriaProperty
class CfnFilter_FilterCriteriaPropertyDef(BaseStruct):
    aws_account_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details of the AWS account IDs used to filter findings.\n')
    component_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details of the component IDs used to filter findings.\n')
    component_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details of the component types used to filter findings.\n')
    ec2_instance_image_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details of the Amazon EC2 instance image IDs used to filter findings.\n')
    ec2_instance_subnet_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details of the Amazon EC2 instance subnet IDs used to filter findings.\n')
    ec2_instance_vpc_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details of the Amazon EC2 instance VPC IDs used to filter findings.\n')
    ecr_image_architecture: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details of the Amazon ECR image architecture types used to filter findings.\n')
    ecr_image_hash: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details of the Amazon ECR image hashes used to filter findings.\n')
    ecr_image_pushed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the Amazon ECR image push date and time used to filter findings.\n')
    ecr_image_registry: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the Amazon ECR registry used to filter findings.\n')
    ecr_image_repository_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the name of the Amazon ECR repository used to filter findings.\n')
    ecr_image_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The tags attached to the Amazon ECR container image.\n')
    finding_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the finding ARNs used to filter findings.\n')
    finding_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the finding status types used to filter findings.\n')
    finding_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the finding types used to filter findings.\n')
    first_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the date and time a finding was first seen used to filter findings.\n')
    inspector_score: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon Inspector score to filter on.\n')
    last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the date and time a finding was last seen used to filter findings.\n')
    network_protocol: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on network protocol used to filter findings.\n')
    port_range: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_PortRangeFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the port ranges used to filter findings.\n')
    related_vulnerabilities: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the related vulnerabilities used to filter findings.\n')
    resource_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the resource IDs used to filter findings.\n')
    resource_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the resource tags used to filter findings.\n')
    resource_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the resource types used to filter findings.\n')
    severity: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the severity used to filter findings.\n')
    title: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the finding title used to filter findings.\n')
    updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the date and time a finding was last updated at used to filter findings.\n')
    vendor_severity: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the vendor severity used to filter findings.\n')
    vulnerability_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the vulnerability ID used to filter findings.\n')
    vulnerability_source: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the vulnerability score to filter findings by.\n')
    vulnerable_packages: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_PackageFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Details on the vulnerable packages used to filter findings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-filter-filtercriteria.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    filter_criteria_property = inspectorv2.CfnFilter.FilterCriteriaProperty(\n        aws_account_id=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        component_id=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        component_type=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        ec2_instance_image_id=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        ec2_instance_subnet_id=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        ec2_instance_vpc_id=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        ecr_image_architecture=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        ecr_image_hash=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        ecr_image_pushed_at=[inspectorv2.CfnFilter.DateFilterProperty(\n            end_inclusive=123,\n            start_inclusive=123\n        )],\n        ecr_image_registry=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        ecr_image_repository_name=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        ecr_image_tags=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        finding_arn=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        finding_status=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        finding_type=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        first_observed_at=[inspectorv2.CfnFilter.DateFilterProperty(\n            end_inclusive=123,\n            start_inclusive=123\n        )],\n        inspector_score=[inspectorv2.CfnFilter.NumberFilterProperty(\n            lower_inclusive=123,\n            upper_inclusive=123\n        )],\n        last_observed_at=[inspectorv2.CfnFilter.DateFilterProperty(\n            end_inclusive=123,\n            start_inclusive=123\n        )],\n        network_protocol=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        port_range=[inspectorv2.CfnFilter.PortRangeFilterProperty(\n            begin_inclusive=123,\n            end_inclusive=123\n        )],\n        related_vulnerabilities=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_id=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_tags=[inspectorv2.CfnFilter.MapFilterProperty(\n            comparison="comparison",\n\n            # the properties below are optional\n            key="key",\n            value="value"\n        )],\n        resource_type=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        severity=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        title=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        updated_at=[inspectorv2.CfnFilter.DateFilterProperty(\n            end_inclusive=123,\n            start_inclusive=123\n        )],\n        vendor_severity=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        vulnerability_id=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        vulnerability_source=[inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        vulnerable_packages=[inspectorv2.CfnFilter.PackageFilterProperty(\n            architecture=inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            ),\n            epoch=inspectorv2.CfnFilter.NumberFilterProperty(\n                lower_inclusive=123,\n                upper_inclusive=123\n            ),\n            name=inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            ),\n            release=inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            ),\n            source_layer_hash=inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            ),\n            version=inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aws_account_id', 'component_id', 'component_type', 'ec2_instance_image_id', 'ec2_instance_subnet_id', 'ec2_instance_vpc_id', 'ecr_image_architecture', 'ecr_image_hash', 'ecr_image_pushed_at', 'ecr_image_registry', 'ecr_image_repository_name', 'ecr_image_tags', 'finding_arn', 'finding_status', 'finding_type', 'first_observed_at', 'inspector_score', 'last_observed_at', 'network_protocol', 'port_range', 'related_vulnerabilities', 'resource_id', 'resource_tags', 'resource_type', 'severity', 'title', 'updated_at', 'vendor_severity', 'vulnerability_id', 'vulnerability_source', 'vulnerable_packages']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnFilter.FilterCriteriaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnFilter.MapFilterProperty
class CfnFilter_MapFilterPropertyDef(BaseStruct):
    comparison: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The operator to use when comparing values in the filter.\n')
    key: typing.Optional[str] = pydantic.Field(None, description='The tag key used in the filter.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The tag value used in the filter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-filter-mapfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    map_filter_property = inspectorv2.CfnFilter.MapFilterProperty(\n        comparison="comparison",\n\n        # the properties below are optional\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison', 'key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnFilter.MapFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnFilter.NumberFilterProperty
class CfnFilter_NumberFilterPropertyDef(BaseStruct):
    lower_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='The lowest number to be included in the filter.\n')
    upper_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='The highest number to be included in the filter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-filter-numberfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    number_filter_property = inspectorv2.CfnFilter.NumberFilterProperty(\n        lower_inclusive=123,\n        upper_inclusive=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lower_inclusive', 'upper_inclusive']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnFilter.NumberFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnFilter.PackageFilterProperty
class CfnFilter_PackageFilterPropertyDef(BaseStruct):
    architecture: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains details on the package architecture type to filter on.\n')
    epoch: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_NumberFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains details on the package epoch to filter on.\n')
    name: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains details on the name of the package to filter on.\n')
    release: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains details on the package release to filter on.\n')
    source_layer_hash: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains details on the source layer hash to filter on.\n')
    version: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The package version to filter on.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-filter-packagefilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    package_filter_property = inspectorv2.CfnFilter.PackageFilterProperty(\n        architecture=inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        ),\n        epoch=inspectorv2.CfnFilter.NumberFilterProperty(\n            lower_inclusive=123,\n            upper_inclusive=123\n        ),\n        name=inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        ),\n        release=inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        ),\n        source_layer_hash=inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        ),\n        version=inspectorv2.CfnFilter.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['architecture', 'epoch', 'name', 'release', 'source_layer_hash', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnFilter.PackageFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnFilter.PortRangeFilterProperty
class CfnFilter_PortRangeFilterPropertyDef(BaseStruct):
    begin_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='The port number the port range begins at.\n')
    end_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='The port number the port range ends at.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-filter-portrangefilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    port_range_filter_property = inspectorv2.CfnFilter.PortRangeFilterProperty(\n        begin_inclusive=123,\n        end_inclusive=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['begin_inclusive', 'end_inclusive']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnFilter.PortRangeFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnFilter.StringFilterProperty
class CfnFilter_StringFilterPropertyDef(BaseStruct):
    comparison: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The operator to use when comparing values in the filter.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value to filter on.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-inspectorv2-filter-stringfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    string_filter_property = inspectorv2.CfnFilter.StringFilterProperty(\n        comparison="comparison",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnFilter.StringFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnCisScanConfiguration
class CfnCisScanConfigurationDef(BaseCfnResource):
    scan_name: typing.Optional[str] = pydantic.Field(None, description='The name of the CIS scan configuration.\n')
    schedule: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_SchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The CIS scan configuration's schedule.\n")
    security_level: typing.Optional[str] = pydantic.Field(None, description="The CIS scan configuration's CIS Benchmark level.\n")
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description="The CIS scan configuration's tags.\n")
    targets: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_CisTargetsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The CIS scan configuration's targets.")
    _init_params: typing.ClassVar[list[str]] = ['scan_name', 'schedule', 'security_level', 'tags', 'targets']
    _method_names: typing.ClassVar[list[str]] = ['CisTargetsProperty', 'DailyScheduleProperty', 'MonthlyScheduleProperty', 'ScheduleProperty', 'TimeProperty', 'WeeklyScheduleProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnCisScanConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_inspectorv2.CfnCisScanConfigurationDefConfig] = pydantic.Field(None)


class CfnCisScanConfigurationDefConfig(pydantic.BaseModel):
    CisTargetsProperty: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefCistargetspropertyParams]] = pydantic.Field(None, description='')
    DailyScheduleProperty: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefDailyschedulepropertyParams]] = pydantic.Field(None, description='')
    MonthlyScheduleProperty: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefMonthlyschedulepropertyParams]] = pydantic.Field(None, description='')
    ScheduleProperty: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefSchedulepropertyParams]] = pydantic.Field(None, description='')
    TimeProperty: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefTimepropertyParams]] = pydantic.Field(None, description='')
    WeeklyScheduleProperty: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefWeeklyschedulepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_inspectorv2.CfnCisScanConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnCisScanConfigurationDefCistargetspropertyParams(pydantic.BaseModel):
    account_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    target_resource_tags: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Sequence[str]], None] = pydantic.Field(None, description='')
    ...

class CfnCisScanConfigurationDefDailyschedulepropertyParams(pydantic.BaseModel):
    start_time: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_TimePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnCisScanConfigurationDefMonthlyschedulepropertyParams(pydantic.BaseModel):
    day: str = pydantic.Field(..., description='')
    start_time: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_TimePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnCisScanConfigurationDefSchedulepropertyParams(pydantic.BaseModel):
    daily: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_DailySchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    monthly: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_MonthlySchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    one_time: typing.Any = pydantic.Field(None, description='')
    weekly: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_WeeklySchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCisScanConfigurationDefTimepropertyParams(pydantic.BaseModel):
    time_of_day: str = pydantic.Field(..., description='')
    time_zone: str = pydantic.Field(..., description='')
    ...

class CfnCisScanConfigurationDefWeeklyschedulepropertyParams(pydantic.BaseModel):
    days: typing.Sequence[str] = pydantic.Field(..., description='')
    start_time: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_TimePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnCisScanConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCisScanConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCisScanConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCisScanConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCisScanConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCisScanConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCisScanConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCisScanConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCisScanConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCisScanConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCisScanConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnCisScanConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCisScanConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCisScanConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_inspectorv2.CfnFilter
class CfnFilterDef(BaseCfnResource):
    filter_action: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The action that is to be applied to the findings that match the filter.\n')
    filter_criteria: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_FilterCriteriaPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Details on the filter criteria associated with this filter.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the filter.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the filter.')
    _init_params: typing.ClassVar[list[str]] = ['filter_action', 'filter_criteria', 'name', 'description']
    _method_names: typing.ClassVar[list[str]] = ['DateFilterProperty', 'FilterCriteriaProperty', 'MapFilterProperty', 'NumberFilterProperty', 'PackageFilterProperty', 'PortRangeFilterProperty', 'StringFilterProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnFilter'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_inspectorv2.CfnFilterDefConfig] = pydantic.Field(None)


class CfnFilterDefConfig(pydantic.BaseModel):
    DateFilterProperty: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefDatefilterpropertyParams]] = pydantic.Field(None, description='')
    FilterCriteriaProperty: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefFiltercriteriapropertyParams]] = pydantic.Field(None, description='')
    MapFilterProperty: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefMapfilterpropertyParams]] = pydantic.Field(None, description='')
    NumberFilterProperty: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefNumberfilterpropertyParams]] = pydantic.Field(None, description='')
    PackageFilterProperty: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefPackagefilterpropertyParams]] = pydantic.Field(None, description='')
    PortRangeFilterProperty: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefPortrangefilterpropertyParams]] = pydantic.Field(None, description='')
    StringFilterProperty: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefStringfilterpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_inspectorv2.CfnFilterDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnFilterDefDatefilterpropertyParams(pydantic.BaseModel):
    end_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='')
    start_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFilterDefFiltercriteriapropertyParams(pydantic.BaseModel):
    aws_account_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    component_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    component_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ec2_instance_image_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ec2_instance_subnet_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ec2_instance_vpc_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ecr_image_architecture: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ecr_image_hash: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ecr_image_pushed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ecr_image_registry: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ecr_image_repository_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ecr_image_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    first_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    inspector_score: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_protocol: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    port_range: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_PortRangeFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    related_vulnerabilities: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    severity: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    title: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    vendor_severity: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    vulnerability_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    vulnerability_source: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    vulnerable_packages: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_PackageFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnFilterDefMapfilterpropertyParams(pydantic.BaseModel):
    comparison: str = pydantic.Field(..., description='')
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFilterDefNumberfilterpropertyParams(pydantic.BaseModel):
    lower_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='')
    upper_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFilterDefPackagefilterpropertyParams(pydantic.BaseModel):
    architecture: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    epoch: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_NumberFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    name: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    release: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    source_layer_hash: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    version: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFilterDefPortrangefilterpropertyParams(pydantic.BaseModel):
    begin_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='')
    end_inclusive: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFilterDefStringfilterpropertyParams(pydantic.BaseModel):
    comparison: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnFilterDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFilterDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFilterDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFilterDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFilterDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFilterDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFilterDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFilterDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFilterDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFilterDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFilterDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnFilterDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFilterDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFilterDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_inspectorv2.CfnCisScanConfigurationProps
class CfnCisScanConfigurationPropsDef(BaseCfnProperty):
    scan_name: typing.Optional[str] = pydantic.Field(None, description='The name of the CIS scan configuration.\n')
    schedule: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_SchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The CIS scan configuration's schedule.\n")
    security_level: typing.Optional[str] = pydantic.Field(None, description="The CIS scan configuration's CIS Benchmark level.\n")
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description="The CIS scan configuration's tags.\n")
    targets: typing.Union[models.UnsupportedResource, models.aws_inspectorv2.CfnCisScanConfiguration_CisTargetsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The CIS scan configuration\'s targets.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-inspectorv2-cisscanconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    # one_time: Any\n\n    cfn_cis_scan_configuration_props = inspectorv2.CfnCisScanConfigurationProps(\n        scan_name="scanName",\n        schedule=inspectorv2.CfnCisScanConfiguration.ScheduleProperty(\n            daily=inspectorv2.CfnCisScanConfiguration.DailyScheduleProperty(\n                start_time=inspectorv2.CfnCisScanConfiguration.TimeProperty(\n                    time_of_day="timeOfDay",\n                    time_zone="timeZone"\n                )\n            ),\n            monthly=inspectorv2.CfnCisScanConfiguration.MonthlyScheduleProperty(\n                day="day",\n                start_time=inspectorv2.CfnCisScanConfiguration.TimeProperty(\n                    time_of_day="timeOfDay",\n                    time_zone="timeZone"\n                )\n            ),\n            one_time=one_time,\n            weekly=inspectorv2.CfnCisScanConfiguration.WeeklyScheduleProperty(\n                days=["days"],\n                start_time=inspectorv2.CfnCisScanConfiguration.TimeProperty(\n                    time_of_day="timeOfDay",\n                    time_zone="timeZone"\n                )\n            )\n        ),\n        security_level="securityLevel",\n        tags={\n            "tags_key": "tags"\n        },\n        targets=inspectorv2.CfnCisScanConfiguration.CisTargetsProperty(\n            account_ids=["accountIds"],\n\n            # the properties below are optional\n            target_resource_tags={\n                "target_resource_tags_key": ["targetResourceTags"]\n            }\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['scan_name', 'schedule', 'security_level', 'tags', 'targets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnCisScanConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_inspectorv2.CfnFilterProps
class CfnFilterPropsDef(BaseCfnProperty):
    filter_action: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The action that is to be applied to the findings that match the filter.\n')
    filter_criteria: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_inspectorv2.CfnFilter_FilterCriteriaPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Details on the filter criteria associated with this filter.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the filter.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the filter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-inspectorv2-filter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_inspectorv2 as inspectorv2\n\n    cfn_filter_props = inspectorv2.CfnFilterProps(\n        filter_action="filterAction",\n        filter_criteria=inspectorv2.CfnFilter.FilterCriteriaProperty(\n            aws_account_id=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            component_id=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            component_type=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            ec2_instance_image_id=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            ec2_instance_subnet_id=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            ec2_instance_vpc_id=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            ecr_image_architecture=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            ecr_image_hash=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            ecr_image_pushed_at=[inspectorv2.CfnFilter.DateFilterProperty(\n                end_inclusive=123,\n                start_inclusive=123\n            )],\n            ecr_image_registry=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            ecr_image_repository_name=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            ecr_image_tags=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            finding_arn=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            finding_status=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            finding_type=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            first_observed_at=[inspectorv2.CfnFilter.DateFilterProperty(\n                end_inclusive=123,\n                start_inclusive=123\n            )],\n            inspector_score=[inspectorv2.CfnFilter.NumberFilterProperty(\n                lower_inclusive=123,\n                upper_inclusive=123\n            )],\n            last_observed_at=[inspectorv2.CfnFilter.DateFilterProperty(\n                end_inclusive=123,\n                start_inclusive=123\n            )],\n            network_protocol=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            port_range=[inspectorv2.CfnFilter.PortRangeFilterProperty(\n                begin_inclusive=123,\n                end_inclusive=123\n            )],\n            related_vulnerabilities=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_id=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_tags=[inspectorv2.CfnFilter.MapFilterProperty(\n                comparison="comparison",\n\n                # the properties below are optional\n                key="key",\n                value="value"\n            )],\n            resource_type=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            severity=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            title=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            updated_at=[inspectorv2.CfnFilter.DateFilterProperty(\n                end_inclusive=123,\n                start_inclusive=123\n            )],\n            vendor_severity=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            vulnerability_id=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            vulnerability_source=[inspectorv2.CfnFilter.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            vulnerable_packages=[inspectorv2.CfnFilter.PackageFilterProperty(\n                architecture=inspectorv2.CfnFilter.StringFilterProperty(\n                    comparison="comparison",\n                    value="value"\n                ),\n                epoch=inspectorv2.CfnFilter.NumberFilterProperty(\n                    lower_inclusive=123,\n                    upper_inclusive=123\n                ),\n                name=inspectorv2.CfnFilter.StringFilterProperty(\n                    comparison="comparison",\n                    value="value"\n                ),\n                release=inspectorv2.CfnFilter.StringFilterProperty(\n                    comparison="comparison",\n                    value="value"\n                ),\n                source_layer_hash=inspectorv2.CfnFilter.StringFilterProperty(\n                    comparison="comparison",\n                    value="value"\n                ),\n                version=inspectorv2.CfnFilter.StringFilterProperty(\n                    comparison="comparison",\n                    value="value"\n                )\n            )]\n        ),\n        name="name",\n\n        # the properties below are optional\n        description="description"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['filter_action', 'filter_criteria', 'name', 'description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_inspectorv2.CfnFilterProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnCisScanConfiguration_CisTargetsProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnCisScanConfiguration_CisTargetsPropertyDef]] = pydantic.Field(None)
    CfnCisScanConfiguration_DailyScheduleProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnCisScanConfiguration_DailySchedulePropertyDef]] = pydantic.Field(None)
    CfnCisScanConfiguration_MonthlyScheduleProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnCisScanConfiguration_MonthlySchedulePropertyDef]] = pydantic.Field(None)
    CfnCisScanConfiguration_ScheduleProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnCisScanConfiguration_SchedulePropertyDef]] = pydantic.Field(None)
    CfnCisScanConfiguration_TimeProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnCisScanConfiguration_TimePropertyDef]] = pydantic.Field(None)
    CfnCisScanConfiguration_WeeklyScheduleProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnCisScanConfiguration_WeeklySchedulePropertyDef]] = pydantic.Field(None)
    CfnFilter_DateFilterProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnFilter_DateFilterPropertyDef]] = pydantic.Field(None)
    CfnFilter_FilterCriteriaProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnFilter_FilterCriteriaPropertyDef]] = pydantic.Field(None)
    CfnFilter_MapFilterProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnFilter_MapFilterPropertyDef]] = pydantic.Field(None)
    CfnFilter_NumberFilterProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnFilter_NumberFilterPropertyDef]] = pydantic.Field(None)
    CfnFilter_PackageFilterProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnFilter_PackageFilterPropertyDef]] = pydantic.Field(None)
    CfnFilter_PortRangeFilterProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnFilter_PortRangeFilterPropertyDef]] = pydantic.Field(None)
    CfnFilter_StringFilterProperty: typing.Optional[dict[str, models.aws_inspectorv2.CfnFilter_StringFilterPropertyDef]] = pydantic.Field(None)
    CfnCisScanConfiguration: typing.Optional[dict[str, models.aws_inspectorv2.CfnCisScanConfigurationDef]] = pydantic.Field(None)
    CfnFilter: typing.Optional[dict[str, models.aws_inspectorv2.CfnFilterDef]] = pydantic.Field(None)
    CfnCisScanConfigurationProps: typing.Optional[dict[str, models.aws_inspectorv2.CfnCisScanConfigurationPropsDef]] = pydantic.Field(None)
    CfnFilterProps: typing.Optional[dict[str, models.aws_inspectorv2.CfnFilterPropsDef]] = pydantic.Field(None)
    ...

import models
