from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.AlarmMetricProperty
class CfnApplication_AlarmMetricPropertyDef(BaseStruct):
    alarm_metric_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the metric to be monitored for the component. For metrics supported by Application Insights, see `Logs and metrics supported by Amazon CloudWatch Application Insights <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/appinsights-logs-and-metrics.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-alarmmetric.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    alarm_metric_property = applicationinsights.CfnApplication.AlarmMetricProperty(\n        alarm_metric_name="alarmMetricName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarm_metric_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.AlarmMetricProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.AlarmProperty
class CfnApplication_AlarmPropertyDef(BaseStruct):
    alarm_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the CloudWatch alarm to be monitored for the component.\n')
    severity: typing.Optional[str] = pydantic.Field(None, description='Indicates the degree of outage when the alarm goes off.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-alarm.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    alarm_property = applicationinsights.CfnApplication.AlarmProperty(\n        alarm_name="alarmName",\n\n        # the properties below are optional\n        severity="severity"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarm_name', 'severity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.AlarmProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.ComponentConfigurationProperty
class CfnApplication_ComponentConfigurationPropertyDef(BaseStruct):
    configuration_details: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_ConfigurationDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration settings.\n')
    sub_component_type_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_SubComponentTypeConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Sub-component configurations of the component.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-componentconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    component_configuration_property = applicationinsights.CfnApplication.ComponentConfigurationProperty(\n        configuration_details=applicationinsights.CfnApplication.ConfigurationDetailsProperty(\n            alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                alarm_metric_name="alarmMetricName"\n            )],\n            alarms=[applicationinsights.CfnApplication.AlarmProperty(\n                alarm_name="alarmName",\n\n                # the properties below are optional\n                severity="severity"\n            )],\n            ha_cluster_prometheus_exporter=applicationinsights.CfnApplication.HAClusterPrometheusExporterProperty(\n                prometheus_port="prometheusPort"\n            ),\n            hana_prometheus_exporter=applicationinsights.CfnApplication.HANAPrometheusExporterProperty(\n                agree_to_install_hanadb_client=False,\n                hana_port="hanaPort",\n                hana_secret_name="hanaSecretName",\n                hanasid="hanasid",\n\n                # the properties below are optional\n                prometheus_port="prometheusPort"\n            ),\n            jmx_prometheus_exporter=applicationinsights.CfnApplication.JMXPrometheusExporterProperty(\n                host_port="hostPort",\n                jmxurl="jmxurl",\n                prometheus_port="prometheusPort"\n            ),\n            logs=[applicationinsights.CfnApplication.LogProperty(\n                log_type="logType",\n\n                # the properties below are optional\n                encoding="encoding",\n                log_group_name="logGroupName",\n                log_path="logPath",\n                pattern_set="patternSet"\n            )],\n            windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                event_levels=["eventLevels"],\n                event_name="eventName",\n                log_group_name="logGroupName",\n\n                # the properties below are optional\n                pattern_set="patternSet"\n            )]\n        ),\n        sub_component_type_configurations=[applicationinsights.CfnApplication.SubComponentTypeConfigurationProperty(\n            sub_component_configuration_details=applicationinsights.CfnApplication.SubComponentConfigurationDetailsProperty(\n                alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                    alarm_metric_name="alarmMetricName"\n                )],\n                logs=[applicationinsights.CfnApplication.LogProperty(\n                    log_type="logType",\n\n                    # the properties below are optional\n                    encoding="encoding",\n                    log_group_name="logGroupName",\n                    log_path="logPath",\n                    pattern_set="patternSet"\n                )],\n                windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                    event_levels=["eventLevels"],\n                    event_name="eventName",\n                    log_group_name="logGroupName",\n\n                    # the properties below are optional\n                    pattern_set="patternSet"\n                )]\n            ),\n            sub_component_type="subComponentType"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_details', 'sub_component_type_configurations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.ComponentConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.ComponentMonitoringSettingProperty
class CfnApplication_ComponentMonitoringSettingPropertyDef(BaseStruct):
    component_configuration_mode: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Component monitoring can be configured in one of the following three modes:. - ``DEFAULT`` : The component will be configured with the recommended default monitoring settings of the selected ``Tier`` . - ``CUSTOM`` : The component will be configured with the customized monitoring settings that are specified in ``CustomComponentConfiguration`` . If used, ``CustomComponentConfiguration`` must be provided. - ``DEFAULT_WITH_OVERWRITE`` : The component will be configured with the recommended default monitoring settings of the selected ``Tier`` , and merged with customized overwrite settings that are specified in ``DefaultOverwriteComponentConfiguration`` . If used, ``DefaultOverwriteComponentConfiguration`` must be provided.\n')
    tier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The tier of the application component. Supported tiers include ``DOT_NET_CORE`` , ``DOT_NET_WORKER`` , ``DOT_NET_WEB`` , ``SQL_SERVER`` , ``SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP`` , ``SQL_SERVER_FAILOVER_CLUSTER_INSTANCE`` , ``MYSQL`` , ``POSTGRESQL`` , ``JAVA_JMX`` , ``ORACLE`` , ``SAP_HANA_MULTI_NODE`` , ``SAP_HANA_SINGLE_NODE`` , ``SAP_HANA_HIGH_AVAILABILITY`` , ``SHAREPOINT`` . ``ACTIVE_DIRECTORY`` , and ``DEFAULT`` .\n')
    component_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the component.\n')
    component_name: typing.Optional[str] = pydantic.Field(None, description='The name of the component.\n')
    custom_component_configuration: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_ComponentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Customized monitoring settings. Required if CUSTOM mode is configured in ``ComponentConfigurationMode`` .\n')
    default_overwrite_component_configuration: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_ComponentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Customized overwrite monitoring settings. Required if CUSTOM mode is configured in ``ComponentConfigurationMode`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-componentmonitoringsetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    component_monitoring_setting_property = applicationinsights.CfnApplication.ComponentMonitoringSettingProperty(\n        component_configuration_mode="componentConfigurationMode",\n        tier="tier",\n\n        # the properties below are optional\n        component_arn="componentArn",\n        component_name="componentName",\n        custom_component_configuration=applicationinsights.CfnApplication.ComponentConfigurationProperty(\n            configuration_details=applicationinsights.CfnApplication.ConfigurationDetailsProperty(\n                alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                    alarm_metric_name="alarmMetricName"\n                )],\n                alarms=[applicationinsights.CfnApplication.AlarmProperty(\n                    alarm_name="alarmName",\n\n                    # the properties below are optional\n                    severity="severity"\n                )],\n                ha_cluster_prometheus_exporter=applicationinsights.CfnApplication.HAClusterPrometheusExporterProperty(\n                    prometheus_port="prometheusPort"\n                ),\n                hana_prometheus_exporter=applicationinsights.CfnApplication.HANAPrometheusExporterProperty(\n                    agree_to_install_hanadb_client=False,\n                    hana_port="hanaPort",\n                    hana_secret_name="hanaSecretName",\n                    hanasid="hanasid",\n\n                    # the properties below are optional\n                    prometheus_port="prometheusPort"\n                ),\n                jmx_prometheus_exporter=applicationinsights.CfnApplication.JMXPrometheusExporterProperty(\n                    host_port="hostPort",\n                    jmxurl="jmxurl",\n                    prometheus_port="prometheusPort"\n                ),\n                logs=[applicationinsights.CfnApplication.LogProperty(\n                    log_type="logType",\n\n                    # the properties below are optional\n                    encoding="encoding",\n                    log_group_name="logGroupName",\n                    log_path="logPath",\n                    pattern_set="patternSet"\n                )],\n                windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                    event_levels=["eventLevels"],\n                    event_name="eventName",\n                    log_group_name="logGroupName",\n\n                    # the properties below are optional\n                    pattern_set="patternSet"\n                )]\n            ),\n            sub_component_type_configurations=[applicationinsights.CfnApplication.SubComponentTypeConfigurationProperty(\n                sub_component_configuration_details=applicationinsights.CfnApplication.SubComponentConfigurationDetailsProperty(\n                    alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                        alarm_metric_name="alarmMetricName"\n                    )],\n                    logs=[applicationinsights.CfnApplication.LogProperty(\n                        log_type="logType",\n\n                        # the properties below are optional\n                        encoding="encoding",\n                        log_group_name="logGroupName",\n                        log_path="logPath",\n                        pattern_set="patternSet"\n                    )],\n                    windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                        event_levels=["eventLevels"],\n                        event_name="eventName",\n                        log_group_name="logGroupName",\n\n                        # the properties below are optional\n                        pattern_set="patternSet"\n                    )]\n                ),\n                sub_component_type="subComponentType"\n            )]\n        ),\n        default_overwrite_component_configuration=applicationinsights.CfnApplication.ComponentConfigurationProperty(\n            configuration_details=applicationinsights.CfnApplication.ConfigurationDetailsProperty(\n                alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                    alarm_metric_name="alarmMetricName"\n                )],\n                alarms=[applicationinsights.CfnApplication.AlarmProperty(\n                    alarm_name="alarmName",\n\n                    # the properties below are optional\n                    severity="severity"\n                )],\n                ha_cluster_prometheus_exporter=applicationinsights.CfnApplication.HAClusterPrometheusExporterProperty(\n                    prometheus_port="prometheusPort"\n                ),\n                hana_prometheus_exporter=applicationinsights.CfnApplication.HANAPrometheusExporterProperty(\n                    agree_to_install_hanadb_client=False,\n                    hana_port="hanaPort",\n                    hana_secret_name="hanaSecretName",\n                    hanasid="hanasid",\n\n                    # the properties below are optional\n                    prometheus_port="prometheusPort"\n                ),\n                jmx_prometheus_exporter=applicationinsights.CfnApplication.JMXPrometheusExporterProperty(\n                    host_port="hostPort",\n                    jmxurl="jmxurl",\n                    prometheus_port="prometheusPort"\n                ),\n                logs=[applicationinsights.CfnApplication.LogProperty(\n                    log_type="logType",\n\n                    # the properties below are optional\n                    encoding="encoding",\n                    log_group_name="logGroupName",\n                    log_path="logPath",\n                    pattern_set="patternSet"\n                )],\n                windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                    event_levels=["eventLevels"],\n                    event_name="eventName",\n                    log_group_name="logGroupName",\n\n                    # the properties below are optional\n                    pattern_set="patternSet"\n                )]\n            ),\n            sub_component_type_configurations=[applicationinsights.CfnApplication.SubComponentTypeConfigurationProperty(\n                sub_component_configuration_details=applicationinsights.CfnApplication.SubComponentConfigurationDetailsProperty(\n                    alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                        alarm_metric_name="alarmMetricName"\n                    )],\n                    logs=[applicationinsights.CfnApplication.LogProperty(\n                        log_type="logType",\n\n                        # the properties below are optional\n                        encoding="encoding",\n                        log_group_name="logGroupName",\n                        log_path="logPath",\n                        pattern_set="patternSet"\n                    )],\n                    windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                        event_levels=["eventLevels"],\n                        event_name="eventName",\n                        log_group_name="logGroupName",\n\n                        # the properties below are optional\n                        pattern_set="patternSet"\n                    )]\n                ),\n                sub_component_type="subComponentType"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['component_configuration_mode', 'tier', 'component_arn', 'component_name', 'custom_component_configuration', 'default_overwrite_component_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.ComponentMonitoringSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.ConfigurationDetailsProperty
class CfnApplication_ConfigurationDetailsPropertyDef(BaseStruct):
    alarm_metrics: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_AlarmMetricPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of metrics to monitor for the component. All component types can use ``AlarmMetrics`` .\n')
    alarms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_AlarmPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of alarms to monitor for the component. All component types can use ``Alarm`` .\n')
    ha_cluster_prometheus_exporter: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_HAClusterPrometheusExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The HA cluster Prometheus Exporter settings.\n')
    hana_prometheus_exporter: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_HANAPrometheusExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The HANA DB Prometheus Exporter settings.\n')
    jmx_prometheus_exporter: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_JMXPrometheusExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of Java metrics to monitor for the component.\n')
    logs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_LogPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of logs to monitor for the component. Only Amazon EC2 instances can use ``Logs`` .\n')
    windows_events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_WindowsEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of Windows Events to monitor for the component. Only Amazon EC2 instances running on Windows can use ``WindowsEvents`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-configurationdetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    configuration_details_property = applicationinsights.CfnApplication.ConfigurationDetailsProperty(\n        alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n            alarm_metric_name="alarmMetricName"\n        )],\n        alarms=[applicationinsights.CfnApplication.AlarmProperty(\n            alarm_name="alarmName",\n\n            # the properties below are optional\n            severity="severity"\n        )],\n        ha_cluster_prometheus_exporter=applicationinsights.CfnApplication.HAClusterPrometheusExporterProperty(\n            prometheus_port="prometheusPort"\n        ),\n        hana_prometheus_exporter=applicationinsights.CfnApplication.HANAPrometheusExporterProperty(\n            agree_to_install_hanadb_client=False,\n            hana_port="hanaPort",\n            hana_secret_name="hanaSecretName",\n            hanasid="hanasid",\n\n            # the properties below are optional\n            prometheus_port="prometheusPort"\n        ),\n        jmx_prometheus_exporter=applicationinsights.CfnApplication.JMXPrometheusExporterProperty(\n            host_port="hostPort",\n            jmxurl="jmxurl",\n            prometheus_port="prometheusPort"\n        ),\n        logs=[applicationinsights.CfnApplication.LogProperty(\n            log_type="logType",\n\n            # the properties below are optional\n            encoding="encoding",\n            log_group_name="logGroupName",\n            log_path="logPath",\n            pattern_set="patternSet"\n        )],\n        windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n            event_levels=["eventLevels"],\n            event_name="eventName",\n            log_group_name="logGroupName",\n\n            # the properties below are optional\n            pattern_set="patternSet"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarm_metrics', 'alarms', 'ha_cluster_prometheus_exporter', 'hana_prometheus_exporter', 'jmx_prometheus_exporter', 'logs', 'windows_events']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.ConfigurationDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.CustomComponentProperty
class CfnApplication_CustomComponentPropertyDef(BaseStruct):
    component_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the component.\n')
    resource_list: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The list of resource ARNs that belong to the component.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-customcomponent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    custom_component_property = applicationinsights.CfnApplication.CustomComponentProperty(\n        component_name="componentName",\n        resource_list=["resourceList"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['component_name', 'resource_list']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.CustomComponentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.HAClusterPrometheusExporterProperty
class CfnApplication_HAClusterPrometheusExporterPropertyDef(BaseStruct):
    prometheus_port: typing.Optional[str] = pydantic.Field(None, description='The target port to which Prometheus sends metrics. If not specified, the default port 9668 is used.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-haclusterprometheusexporter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    h_aCluster_prometheus_exporter_property = applicationinsights.CfnApplication.HAClusterPrometheusExporterProperty(\n        prometheus_port="prometheusPort"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['prometheus_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.HAClusterPrometheusExporterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.HANAPrometheusExporterProperty
class CfnApplication_HANAPrometheusExporterPropertyDef(BaseStruct):
    agree_to_install_hanadb_client: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Designates whether you agree to install the HANA DB client.\n')
    hana_port: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The HANA database port by which the exporter will query HANA metrics.\n')
    hana_secret_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS Secrets Manager secret that stores HANA monitoring user credentials. The HANA Prometheus exporter uses these credentials to connect to the database and query HANA metrics.\n')
    hanasid: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The three-character SAP system ID (SID) of the SAP HANA system.\n')
    prometheus_port: typing.Optional[str] = pydantic.Field(None, description='The target port to which Prometheus sends metrics. If not specified, the default port 9668 is used.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-hanaprometheusexporter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    h_aNAPrometheus_exporter_property = applicationinsights.CfnApplication.HANAPrometheusExporterProperty(\n        agree_to_install_hanadb_client=False,\n        hana_port="hanaPort",\n        hana_secret_name="hanaSecretName",\n        hanasid="hanasid",\n\n        # the properties below are optional\n        prometheus_port="prometheusPort"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['agree_to_install_hanadb_client', 'hana_port', 'hana_secret_name', 'hanasid', 'prometheus_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.HANAPrometheusExporterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.JMXPrometheusExporterProperty
class CfnApplication_JMXPrometheusExporterPropertyDef(BaseStruct):
    host_port: typing.Optional[str] = pydantic.Field(None, description='The host and port to connect to through remote JMX. Only one of ``jmxURL`` and ``hostPort`` can be specified.\n')
    jmxurl: typing.Optional[str] = pydantic.Field(None, description='The complete JMX URL to connect to.\n')
    prometheus_port: typing.Optional[str] = pydantic.Field(None, description='The target port to send Prometheus metrics to. If not specified, the default port ``9404`` is used.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-jmxprometheusexporter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    j_mXPrometheus_exporter_property = applicationinsights.CfnApplication.JMXPrometheusExporterProperty(\n        host_port="hostPort",\n        jmxurl="jmxurl",\n        prometheus_port="prometheusPort"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['host_port', 'jmxurl', 'prometheus_port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.JMXPrometheusExporterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.LogPatternProperty
class CfnApplication_LogPatternPropertyDef(BaseStruct):
    pattern: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A regular expression that defines the log pattern. A log pattern can contain up to 50 characters, and it cannot be empty.\n')
    pattern_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the log pattern. A log pattern name can contain up to 50 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.\n')
    rank: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The rank of the log pattern.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-logpattern.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    log_pattern_property = applicationinsights.CfnApplication.LogPatternProperty(\n        pattern="pattern",\n        pattern_name="patternName",\n        rank=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['pattern', 'pattern_name', 'rank']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.LogPatternProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.LogPatternSetProperty
class CfnApplication_LogPatternSetPropertyDef(BaseStruct):
    log_patterns: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_LogPatternPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of objects that define the log patterns that belong to ``LogPatternSet`` .\n')
    pattern_set_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the log pattern. A log pattern name can contain up to 30 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-logpatternset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    log_pattern_set_property = applicationinsights.CfnApplication.LogPatternSetProperty(\n        log_patterns=[applicationinsights.CfnApplication.LogPatternProperty(\n            pattern="pattern",\n            pattern_name="patternName",\n            rank=123\n        )],\n        pattern_set_name="patternSetName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_patterns', 'pattern_set_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.LogPatternSetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.LogProperty
class CfnApplication_LogPropertyDef(BaseStruct):
    log_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The log type decides the log patterns against which Application Insights analyzes the log. The log type is selected from the following: ``SQL_SERVER`` , ``MYSQL`` , ``MYSQL_SLOW_QUERY`` , ``POSTGRESQL`` , ``ORACLE_ALERT`` , ``ORACLE_LISTENER`` , ``IIS`` , ``APPLICATION`` , ``WINDOWS_EVENTS`` , ``WINDOWS_EVENTS_ACTIVE_DIRECTORY`` , ``WINDOWS_EVENTS_DNS`` , ``WINDOWS_EVENTS_IIS`` , ``WINDOWS_EVENTS_SHAREPOINT`` , ``SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP`` , ``SQL_SERVER_FAILOVER_CLUSTER_INSTANCE`` , ``STEP_FUNCTION`` , ``API_GATEWAY_ACCESS`` , ``API_GATEWAY_EXECUTION`` , ``SAP_HANA_LOGS`` , ``SAP_HANA_TRACE`` , ``SAP_HANA_HIGH_AVAILABILITY`` , and ``DEFAULT`` .\n')
    encoding: typing.Optional[str] = pydantic.Field(None, description='The type of encoding of the logs to be monitored. The specified encoding should be included in the list of CloudWatch agent supported encodings. If not provided, CloudWatch Application Insights uses the default encoding type for the log type: - ``APPLICATION/DEFAULT`` : utf-8 encoding - ``SQL_SERVER`` : utf-16 encoding - ``IIS`` : ascii encoding\n')
    log_group_name: typing.Optional[str] = pydantic.Field(None, description='The CloudWatch log group name to be associated with the monitored log.\n')
    log_path: typing.Optional[str] = pydantic.Field(None, description='The path of the logs to be monitored. The log path must be an absolute Windows or Linux system file path. For more information, see `CloudWatch Agent Configuration File: Logs Section <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html#CloudWatch-Agent-Configuration-File-Logssection>`_ .\n')
    pattern_set: typing.Optional[str] = pydantic.Field(None, description='The log pattern set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-log.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    log_property = applicationinsights.CfnApplication.LogProperty(\n        log_type="logType",\n\n        # the properties below are optional\n        encoding="encoding",\n        log_group_name="logGroupName",\n        log_path="logPath",\n        pattern_set="patternSet"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_type', 'encoding', 'log_group_name', 'log_path', 'pattern_set']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.LogProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.SubComponentConfigurationDetailsProperty
class CfnApplication_SubComponentConfigurationDetailsPropertyDef(BaseStruct):
    alarm_metrics: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_AlarmMetricPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of metrics to monitor for the component. All component types can use ``AlarmMetrics`` .\n')
    logs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_LogPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of logs to monitor for the component. Only Amazon EC2 instances can use ``Logs`` .\n')
    windows_events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_WindowsEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of Windows Events to monitor for the component. Only Amazon EC2 instances running on Windows can use ``WindowsEvents`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-subcomponentconfigurationdetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    sub_component_configuration_details_property = applicationinsights.CfnApplication.SubComponentConfigurationDetailsProperty(\n        alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n            alarm_metric_name="alarmMetricName"\n        )],\n        logs=[applicationinsights.CfnApplication.LogProperty(\n            log_type="logType",\n\n            # the properties below are optional\n            encoding="encoding",\n            log_group_name="logGroupName",\n            log_path="logPath",\n            pattern_set="patternSet"\n        )],\n        windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n            event_levels=["eventLevels"],\n            event_name="eventName",\n            log_group_name="logGroupName",\n\n            # the properties below are optional\n            pattern_set="patternSet"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarm_metrics', 'logs', 'windows_events']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.SubComponentConfigurationDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.SubComponentTypeConfigurationProperty
class CfnApplication_SubComponentTypeConfigurationPropertyDef(BaseStruct):
    sub_component_configuration_details: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_SubComponentConfigurationDetailsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The configuration settings of the sub-components.\n')
    sub_component_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The sub-component type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-subcomponenttypeconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    sub_component_type_configuration_property = applicationinsights.CfnApplication.SubComponentTypeConfigurationProperty(\n        sub_component_configuration_details=applicationinsights.CfnApplication.SubComponentConfigurationDetailsProperty(\n            alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                alarm_metric_name="alarmMetricName"\n            )],\n            logs=[applicationinsights.CfnApplication.LogProperty(\n                log_type="logType",\n\n                # the properties below are optional\n                encoding="encoding",\n                log_group_name="logGroupName",\n                log_path="logPath",\n                pattern_set="patternSet"\n            )],\n            windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                event_levels=["eventLevels"],\n                event_name="eventName",\n                log_group_name="logGroupName",\n\n                # the properties below are optional\n                pattern_set="patternSet"\n            )]\n        ),\n        sub_component_type="subComponentType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sub_component_configuration_details', 'sub_component_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.SubComponentTypeConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication.WindowsEventProperty
class CfnApplication_WindowsEventPropertyDef(BaseStruct):
    event_levels: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The levels of event to log. You must specify each level to log. Possible values include ``INFORMATION`` , ``WARNING`` , ``ERROR`` , ``CRITICAL`` , and ``VERBOSE`` . This field is required for each type of Windows Event to log.\n')
    event_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of Windows Events to log, equivalent to the Windows Event log channel name. For example, System, Security, CustomEventName, and so on. This field is required for each type of Windows event to log.\n')
    log_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The CloudWatch log group name to be associated with the monitored log.\n')
    pattern_set: typing.Optional[str] = pydantic.Field(None, description='The log pattern set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationinsights-application-windowsevent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    windows_event_property = applicationinsights.CfnApplication.WindowsEventProperty(\n        event_levels=["eventLevels"],\n        event_name="eventName",\n        log_group_name="logGroupName",\n\n        # the properties below are optional\n        pattern_set="patternSet"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_levels', 'event_name', 'log_group_name', 'pattern_set']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication.WindowsEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplication
class CfnApplicationDef(BaseCfnResource):
    resource_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the resource group used for the application.\n')
    auto_configuration_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If set to ``true`` , the application components will be configured with the monitoring configuration recommended by Application Insights.\n')
    component_monitoring_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_ComponentMonitoringSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The monitoring settings of the components.\n')
    custom_components: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_CustomComponentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes a custom component by grouping similar standalone instances to monitor.\n')
    cwe_monitor_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as ``instance terminated`` , ``failed deployment`` , and others.\n')
    grouping_type: typing.Optional[str] = pydantic.Field(None, description='Application Insights can create applications based on a resource group or on an account. To create an account-based application using all of the resources in the account, set this parameter to ``ACCOUNT_BASED`` .\n')
    log_pattern_sets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_LogPatternSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The log pattern sets.\n')
    ops_center_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether Application Insights will create OpsItems for any problem that is detected by Application Insights for an application.\n')
    ops_item_sns_topic_arn: typing.Optional[str] = pydantic.Field(None, description='The SNS topic provided to Application Insights that is associated with the created OpsItems to receive SNS notifications for opsItem updates.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of ``Tags`` .')
    _init_params: typing.ClassVar[list[str]] = ['resource_group_name', 'auto_configuration_enabled', 'component_monitoring_settings', 'custom_components', 'cwe_monitor_enabled', 'grouping_type', 'log_pattern_sets', 'ops_center_enabled', 'ops_item_sns_topic_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AlarmMetricProperty', 'AlarmProperty', 'ComponentConfigurationProperty', 'ComponentMonitoringSettingProperty', 'ConfigurationDetailsProperty', 'CustomComponentProperty', 'HAClusterPrometheusExporterProperty', 'HANAPrometheusExporterProperty', 'JMXPrometheusExporterProperty', 'LogPatternProperty', 'LogPatternSetProperty', 'LogProperty', 'SubComponentConfigurationDetailsProperty', 'SubComponentTypeConfigurationProperty', 'WindowsEventProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplication'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_applicationinsights.CfnApplicationDefConfig] = pydantic.Field(None)


class CfnApplicationDefConfig(pydantic.BaseModel):
    AlarmMetricProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefAlarmmetricpropertyParams]] = pydantic.Field(None, description='')
    AlarmProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefAlarmpropertyParams]] = pydantic.Field(None, description='')
    ComponentConfigurationProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefComponentconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ComponentMonitoringSettingProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefComponentmonitoringsettingpropertyParams]] = pydantic.Field(None, description='')
    ConfigurationDetailsProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefConfigurationdetailspropertyParams]] = pydantic.Field(None, description='')
    CustomComponentProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefCustomcomponentpropertyParams]] = pydantic.Field(None, description='')
    HAClusterPrometheusExporterProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefHaclusterprometheusexporterpropertyParams]] = pydantic.Field(None, description='')
    HANAPrometheusExporterProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefHanaprometheusexporterpropertyParams]] = pydantic.Field(None, description='')
    JMXPrometheusExporterProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefJmxprometheusexporterpropertyParams]] = pydantic.Field(None, description='')
    LogPatternProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefLogpatternpropertyParams]] = pydantic.Field(None, description='')
    LogPatternSetProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefLogpatternsetpropertyParams]] = pydantic.Field(None, description='')
    LogProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefLogpropertyParams]] = pydantic.Field(None, description='')
    SubComponentConfigurationDetailsProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefSubcomponentconfigurationdetailspropertyParams]] = pydantic.Field(None, description='')
    SubComponentTypeConfigurationProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefSubcomponenttypeconfigurationpropertyParams]] = pydantic.Field(None, description='')
    WindowsEventProperty: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefWindowseventpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_applicationinsights.CfnApplicationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnApplicationDefAlarmmetricpropertyParams(pydantic.BaseModel):
    alarm_metric_name: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefAlarmpropertyParams(pydantic.BaseModel):
    alarm_name: str = pydantic.Field(..., description='')
    severity: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefComponentconfigurationpropertyParams(pydantic.BaseModel):
    configuration_details: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_ConfigurationDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sub_component_type_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_SubComponentTypeConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefComponentmonitoringsettingpropertyParams(pydantic.BaseModel):
    component_configuration_mode: str = pydantic.Field(..., description='')
    tier: str = pydantic.Field(..., description='')
    component_arn: typing.Optional[str] = pydantic.Field(None, description='')
    component_name: typing.Optional[str] = pydantic.Field(None, description='')
    custom_component_configuration: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_ComponentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_overwrite_component_configuration: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_ComponentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefConfigurationdetailspropertyParams(pydantic.BaseModel):
    alarm_metrics: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_AlarmMetricPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    alarms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_AlarmPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ha_cluster_prometheus_exporter: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_HAClusterPrometheusExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    hana_prometheus_exporter: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_HANAPrometheusExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    jmx_prometheus_exporter: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_JMXPrometheusExporterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    logs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_LogPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    windows_events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_WindowsEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefCustomcomponentpropertyParams(pydantic.BaseModel):
    component_name: str = pydantic.Field(..., description='')
    resource_list: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnApplicationDefHaclusterprometheusexporterpropertyParams(pydantic.BaseModel):
    prometheus_port: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefHanaprometheusexporterpropertyParams(pydantic.BaseModel):
    agree_to_install_hanadb_client: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    hana_port: str = pydantic.Field(..., description='')
    hana_secret_name: str = pydantic.Field(..., description='')
    hanasid: str = pydantic.Field(..., description='')
    prometheus_port: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefJmxprometheusexporterpropertyParams(pydantic.BaseModel):
    host_port: typing.Optional[str] = pydantic.Field(None, description='')
    jmxurl: typing.Optional[str] = pydantic.Field(None, description='')
    prometheus_port: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefLogpatternpropertyParams(pydantic.BaseModel):
    pattern: str = pydantic.Field(..., description='')
    pattern_name: str = pydantic.Field(..., description='')
    rank: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnApplicationDefLogpatternsetpropertyParams(pydantic.BaseModel):
    log_patterns: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_LogPatternPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    pattern_set_name: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefLogpropertyParams(pydantic.BaseModel):
    log_type: str = pydantic.Field(..., description='')
    encoding: typing.Optional[str] = pydantic.Field(None, description='')
    log_group_name: typing.Optional[str] = pydantic.Field(None, description='')
    log_path: typing.Optional[str] = pydantic.Field(None, description='')
    pattern_set: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefSubcomponentconfigurationdetailspropertyParams(pydantic.BaseModel):
    alarm_metrics: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_AlarmMetricPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    logs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_LogPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    windows_events: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_WindowsEventPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefSubcomponenttypeconfigurationpropertyParams(pydantic.BaseModel):
    sub_component_configuration_details: typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_SubComponentConfigurationDetailsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    sub_component_type: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefWindowseventpropertyParams(pydantic.BaseModel):
    event_levels: typing.Sequence[str] = pydantic.Field(..., description='')
    event_name: str = pydantic.Field(..., description='')
    log_group_name: str = pydantic.Field(..., description='')
    pattern_set: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApplicationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApplicationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApplicationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApplicationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApplicationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApplicationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApplicationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnApplicationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApplicationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_applicationinsights.CfnApplicationProps
class CfnApplicationPropsDef(BaseCfnProperty):
    resource_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the resource group used for the application.\n')
    auto_configuration_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If set to ``true`` , the application components will be configured with the monitoring configuration recommended by Application Insights.\n')
    component_monitoring_settings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_ComponentMonitoringSettingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The monitoring settings of the components.\n')
    custom_components: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_CustomComponentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes a custom component by grouping similar standalone instances to monitor.\n')
    cwe_monitor_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as ``instance terminated`` , ``failed deployment`` , and others.\n')
    grouping_type: typing.Optional[str] = pydantic.Field(None, description='Application Insights can create applications based on a resource group or on an account. To create an account-based application using all of the resources in the account, set this parameter to ``ACCOUNT_BASED`` .\n')
    log_pattern_sets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationinsights.CfnApplication_LogPatternSetPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The log pattern sets.\n')
    ops_center_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether Application Insights will create OpsItems for any problem that is detected by Application Insights for an application.\n')
    ops_item_sns_topic_arn: typing.Optional[str] = pydantic.Field(None, description='The SNS topic provided to Application Insights that is associated with the created OpsItems to receive SNS notifications for opsItem updates.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of ``Tags`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationinsights-application.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationinsights as applicationinsights\n\n    cfn_application_props = applicationinsights.CfnApplicationProps(\n        resource_group_name="resourceGroupName",\n\n        # the properties below are optional\n        auto_configuration_enabled=False,\n        component_monitoring_settings=[applicationinsights.CfnApplication.ComponentMonitoringSettingProperty(\n            component_configuration_mode="componentConfigurationMode",\n            tier="tier",\n\n            # the properties below are optional\n            component_arn="componentArn",\n            component_name="componentName",\n            custom_component_configuration=applicationinsights.CfnApplication.ComponentConfigurationProperty(\n                configuration_details=applicationinsights.CfnApplication.ConfigurationDetailsProperty(\n                    alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                        alarm_metric_name="alarmMetricName"\n                    )],\n                    alarms=[applicationinsights.CfnApplication.AlarmProperty(\n                        alarm_name="alarmName",\n\n                        # the properties below are optional\n                        severity="severity"\n                    )],\n                    ha_cluster_prometheus_exporter=applicationinsights.CfnApplication.HAClusterPrometheusExporterProperty(\n                        prometheus_port="prometheusPort"\n                    ),\n                    hana_prometheus_exporter=applicationinsights.CfnApplication.HANAPrometheusExporterProperty(\n                        agree_to_install_hanadb_client=False,\n                        hana_port="hanaPort",\n                        hana_secret_name="hanaSecretName",\n                        hanasid="hanasid",\n\n                        # the properties below are optional\n                        prometheus_port="prometheusPort"\n                    ),\n                    jmx_prometheus_exporter=applicationinsights.CfnApplication.JMXPrometheusExporterProperty(\n                        host_port="hostPort",\n                        jmxurl="jmxurl",\n                        prometheus_port="prometheusPort"\n                    ),\n                    logs=[applicationinsights.CfnApplication.LogProperty(\n                        log_type="logType",\n\n                        # the properties below are optional\n                        encoding="encoding",\n                        log_group_name="logGroupName",\n                        log_path="logPath",\n                        pattern_set="patternSet"\n                    )],\n                    windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                        event_levels=["eventLevels"],\n                        event_name="eventName",\n                        log_group_name="logGroupName",\n\n                        # the properties below are optional\n                        pattern_set="patternSet"\n                    )]\n                ),\n                sub_component_type_configurations=[applicationinsights.CfnApplication.SubComponentTypeConfigurationProperty(\n                    sub_component_configuration_details=applicationinsights.CfnApplication.SubComponentConfigurationDetailsProperty(\n                        alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                            alarm_metric_name="alarmMetricName"\n                        )],\n                        logs=[applicationinsights.CfnApplication.LogProperty(\n                            log_type="logType",\n\n                            # the properties below are optional\n                            encoding="encoding",\n                            log_group_name="logGroupName",\n                            log_path="logPath",\n                            pattern_set="patternSet"\n                        )],\n                        windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                            event_levels=["eventLevels"],\n                            event_name="eventName",\n                            log_group_name="logGroupName",\n\n                            # the properties below are optional\n                            pattern_set="patternSet"\n                        )]\n                    ),\n                    sub_component_type="subComponentType"\n                )]\n            ),\n            default_overwrite_component_configuration=applicationinsights.CfnApplication.ComponentConfigurationProperty(\n                configuration_details=applicationinsights.CfnApplication.ConfigurationDetailsProperty(\n                    alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                        alarm_metric_name="alarmMetricName"\n                    )],\n                    alarms=[applicationinsights.CfnApplication.AlarmProperty(\n                        alarm_name="alarmName",\n\n                        # the properties below are optional\n                        severity="severity"\n                    )],\n                    ha_cluster_prometheus_exporter=applicationinsights.CfnApplication.HAClusterPrometheusExporterProperty(\n                        prometheus_port="prometheusPort"\n                    ),\n                    hana_prometheus_exporter=applicationinsights.CfnApplication.HANAPrometheusExporterProperty(\n                        agree_to_install_hanadb_client=False,\n                        hana_port="hanaPort",\n                        hana_secret_name="hanaSecretName",\n                        hanasid="hanasid",\n\n                        # the properties below are optional\n                        prometheus_port="prometheusPort"\n                    ),\n                    jmx_prometheus_exporter=applicationinsights.CfnApplication.JMXPrometheusExporterProperty(\n                        host_port="hostPort",\n                        jmxurl="jmxurl",\n                        prometheus_port="prometheusPort"\n                    ),\n                    logs=[applicationinsights.CfnApplication.LogProperty(\n                        log_type="logType",\n\n                        # the properties below are optional\n                        encoding="encoding",\n                        log_group_name="logGroupName",\n                        log_path="logPath",\n                        pattern_set="patternSet"\n                    )],\n                    windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                        event_levels=["eventLevels"],\n                        event_name="eventName",\n                        log_group_name="logGroupName",\n\n                        # the properties below are optional\n                        pattern_set="patternSet"\n                    )]\n                ),\n                sub_component_type_configurations=[applicationinsights.CfnApplication.SubComponentTypeConfigurationProperty(\n                    sub_component_configuration_details=applicationinsights.CfnApplication.SubComponentConfigurationDetailsProperty(\n                        alarm_metrics=[applicationinsights.CfnApplication.AlarmMetricProperty(\n                            alarm_metric_name="alarmMetricName"\n                        )],\n                        logs=[applicationinsights.CfnApplication.LogProperty(\n                            log_type="logType",\n\n                            # the properties below are optional\n                            encoding="encoding",\n                            log_group_name="logGroupName",\n                            log_path="logPath",\n                            pattern_set="patternSet"\n                        )],\n                        windows_events=[applicationinsights.CfnApplication.WindowsEventProperty(\n                            event_levels=["eventLevels"],\n                            event_name="eventName",\n                            log_group_name="logGroupName",\n\n                            # the properties below are optional\n                            pattern_set="patternSet"\n                        )]\n                    ),\n                    sub_component_type="subComponentType"\n                )]\n            )\n        )],\n        custom_components=[applicationinsights.CfnApplication.CustomComponentProperty(\n            component_name="componentName",\n            resource_list=["resourceList"]\n        )],\n        cwe_monitor_enabled=False,\n        grouping_type="groupingType",\n        log_pattern_sets=[applicationinsights.CfnApplication.LogPatternSetProperty(\n            log_patterns=[applicationinsights.CfnApplication.LogPatternProperty(\n                pattern="pattern",\n                pattern_name="patternName",\n                rank=123\n            )],\n            pattern_set_name="patternSetName"\n        )],\n        ops_center_enabled=False,\n        ops_item_sns_topic_arn="opsItemSnsTopicArn",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_group_name', 'auto_configuration_enabled', 'component_monitoring_settings', 'custom_components', 'cwe_monitor_enabled', 'grouping_type', 'log_pattern_sets', 'ops_center_enabled', 'ops_item_sns_topic_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationinsights.CfnApplicationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnApplication_AlarmMetricProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_AlarmMetricPropertyDef]] = pydantic.Field(None)
    CfnApplication_AlarmProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_AlarmPropertyDef]] = pydantic.Field(None)
    CfnApplication_ComponentConfigurationProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_ComponentConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ComponentMonitoringSettingProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_ComponentMonitoringSettingPropertyDef]] = pydantic.Field(None)
    CfnApplication_ConfigurationDetailsProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_ConfigurationDetailsPropertyDef]] = pydantic.Field(None)
    CfnApplication_CustomComponentProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_CustomComponentPropertyDef]] = pydantic.Field(None)
    CfnApplication_HAClusterPrometheusExporterProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_HAClusterPrometheusExporterPropertyDef]] = pydantic.Field(None)
    CfnApplication_HANAPrometheusExporterProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_HANAPrometheusExporterPropertyDef]] = pydantic.Field(None)
    CfnApplication_JMXPrometheusExporterProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_JMXPrometheusExporterPropertyDef]] = pydantic.Field(None)
    CfnApplication_LogPatternProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_LogPatternPropertyDef]] = pydantic.Field(None)
    CfnApplication_LogPatternSetProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_LogPatternSetPropertyDef]] = pydantic.Field(None)
    CfnApplication_LogProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_LogPropertyDef]] = pydantic.Field(None)
    CfnApplication_SubComponentConfigurationDetailsProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_SubComponentConfigurationDetailsPropertyDef]] = pydantic.Field(None)
    CfnApplication_SubComponentTypeConfigurationProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_SubComponentTypeConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_WindowsEventProperty: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplication_WindowsEventPropertyDef]] = pydantic.Field(None)
    CfnApplication: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplicationDef]] = pydantic.Field(None)
    CfnApplicationProps: typing.Optional[dict[str, models.aws_applicationinsights.CfnApplicationPropsDef]] = pydantic.Field(None)
    ...

import models
