from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_emr.CfnCluster.ApplicationProperty
class CfnCluster_ApplicationPropertyDef(BaseStruct):
    additional_info: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='This option is for advanced users only. This is meta information about clusters and applications that are used for testing and troubleshooting.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the application.\n')
    version: typing.Optional[str] = pydantic.Field(None, description='The version of the application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-application.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    application_property = emr.CfnCluster.ApplicationProperty(\n        additional_info={\n            "additional_info_key": "additionalInfo"\n        },\n        args=["args"],\n        name="name",\n        version="version"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['additional_info', 'name', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.ApplicationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.AutoScalingPolicyProperty
class CfnCluster_AutoScalingPolicyPropertyDef(BaseStruct):
    constraints: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_ScalingConstraintsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.\n')
    rules: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ScalingRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The scale-in and scale-out rules that comprise the automatic scaling policy.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-autoscalingpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    auto_scaling_policy_property = emr.CfnCluster.AutoScalingPolicyProperty(\n        constraints=emr.CfnCluster.ScalingConstraintsProperty(\n            max_capacity=123,\n            min_capacity=123\n        ),\n        rules=[emr.CfnCluster.ScalingRuleProperty(\n            action=emr.CfnCluster.ScalingActionProperty(\n                simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n                    scaling_adjustment=123,\n\n                    # the properties below are optional\n                    adjustment_type="adjustmentType",\n                    cool_down=123\n                ),\n\n                # the properties below are optional\n                market="market"\n            ),\n            name="name",\n            trigger=emr.CfnCluster.ScalingTriggerProperty(\n                cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n                    comparison_operator="comparisonOperator",\n                    metric_name="metricName",\n                    period=123,\n                    threshold=123,\n\n                    # the properties below are optional\n                    dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                        key="key",\n                        value="value"\n                    )],\n                    evaluation_periods=123,\n                    namespace="namespace",\n                    statistic="statistic",\n                    unit="unit"\n                )\n            ),\n\n            # the properties below are optional\n            description="description"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['constraints', 'rules']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.AutoScalingPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.AutoTerminationPolicyProperty
class CfnCluster_AutoTerminationPolicyPropertyDef(BaseStruct):
    idle_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of 60 seconds and a maximum of 604800 seconds (seven days).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-autoterminationpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    auto_termination_policy_property = emr.CfnCluster.AutoTerminationPolicyProperty(\n        idle_timeout=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['idle_timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.AutoTerminationPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.BootstrapActionConfigProperty
class CfnCluster_BootstrapActionConfigPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the bootstrap action.\n')
    script_bootstrap_action: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_ScriptBootstrapActionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The script run by the bootstrap action.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-bootstrapactionconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    bootstrap_action_config_property = emr.CfnCluster.BootstrapActionConfigProperty(\n        name="name",\n        script_bootstrap_action=emr.CfnCluster.ScriptBootstrapActionConfigProperty(\n            path="path",\n\n            # the properties below are optional\n            args=["args"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'script_bootstrap_action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.BootstrapActionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.CloudWatchAlarmDefinitionProperty
class CfnCluster_CloudWatchAlarmDefinitionPropertyDef(BaseStruct):
    comparison_operator: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines how the metric specified by ``MetricName`` is compared to the value specified by ``Threshold`` .\n')
    metric_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the CloudWatch metric that is watched to determine an alarm condition.\n')
    period: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The period, in seconds, over which the statistic is applied. CloudWatch metrics for Amazon EMR are emitted every five minutes (300 seconds), so if you specify a CloudWatch metric, specify ``300`` .\n')
    threshold: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value against which the specified statistic is compared.\n')
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_MetricDimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A CloudWatch metric dimension.\n')
    evaluation_periods: typing.Union[int, float, None] = pydantic.Field(None, description='The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is ``1`` .\n')
    namespace: typing.Optional[str] = pydantic.Field(None, description='The namespace for the CloudWatch metric. The default is ``AWS/ElasticMapReduce`` .\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='The statistic to apply to the metric associated with the alarm. The default is ``AVERAGE`` .\n')
    unit: typing.Optional[str] = pydantic.Field(None, description='The unit of measure associated with the CloudWatch metric being watched. The value specified for ``Unit`` must correspond to the units specified in the CloudWatch metric.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-cloudwatchalarmdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    cloud_watch_alarm_definition_property = emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n        comparison_operator="comparisonOperator",\n        metric_name="metricName",\n        period=123,\n        threshold=123,\n\n        # the properties below are optional\n        dimensions=[emr.CfnCluster.MetricDimensionProperty(\n            key="key",\n            value="value"\n        )],\n        evaluation_periods=123,\n        namespace="namespace",\n        statistic="statistic",\n        unit="unit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison_operator', 'metric_name', 'period', 'threshold', 'dimensions', 'evaluation_periods', 'namespace', 'statistic', 'unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.CloudWatchAlarmDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.ComputeLimitsProperty
class CfnCluster_ComputeLimitsPropertyDef(BaseStruct):
    maximum_capacity_units: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The upper boundary of Amazon EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.\n')
    minimum_capacity_units: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The lower boundary of Amazon EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.\n')
    unit_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unit type used for specifying a managed scaling policy.\n')
    maximum_core_capacity_units: typing.Union[int, float, None] = pydantic.Field(None, description='The upper boundary of Amazon EC2 units for core node type in a cluster. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.\n')
    maximum_on_demand_capacity_units: typing.Union[int, float, None] = pydantic.Field(None, description='The upper boundary of On-Demand Amazon EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot Instances.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-computelimits.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    compute_limits_property = emr.CfnCluster.ComputeLimitsProperty(\n        maximum_capacity_units=123,\n        minimum_capacity_units=123,\n        unit_type="unitType",\n\n        # the properties below are optional\n        maximum_core_capacity_units=123,\n        maximum_on_demand_capacity_units=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['maximum_capacity_units', 'minimum_capacity_units', 'unit_type', 'maximum_core_capacity_units', 'maximum_on_demand_capacity_units']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.ComputeLimitsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.ConfigurationProperty
class CfnCluster_ConfigurationPropertyDef(BaseStruct):
    classification: typing.Optional[str] = pydantic.Field(None, description='The classification within a configuration.\n')
    configuration_properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='A list of additional configurations to apply within a configuration object.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of additional configurations to apply within a configuration object.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-configuration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnCluster.ConfigurationProperty\n\n    configuration_property = emr.CfnCluster.ConfigurationProperty(\n        classification="classification",\n        configuration_properties={\n            "configuration_properties_key": "configurationProperties"\n        },\n        configurations=[configuration_property_]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['classification', 'configuration_properties', 'configurations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.ConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.EbsBlockDeviceConfigProperty
class CfnCluster_EbsBlockDeviceConfigPropertyDef(BaseStruct):
    volume_specification: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_VolumeSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an Amazon EC2 instance in the cluster.\n')
    volumes_per_instance: typing.Union[int, float, None] = pydantic.Field(None, description='Number of EBS volumes with a specific volume configuration that are associated with every instance in the instance group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-ebsblockdeviceconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    ebs_block_device_config_property = emr.CfnCluster.EbsBlockDeviceConfigProperty(\n        volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n            size_in_gb=123,\n            volume_type="volumeType",\n\n            # the properties below are optional\n            iops=123,\n            throughput=123\n        ),\n\n        # the properties below are optional\n        volumes_per_instance=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['volume_specification', 'volumes_per_instance']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.EbsBlockDeviceConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.EbsConfigurationProperty
class CfnCluster_EbsConfigurationPropertyDef(BaseStruct):
    ebs_block_device_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_EbsBlockDeviceConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of Amazon EBS volume specifications attached to a cluster instance.\n')
    ebs_optimized: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether an Amazon EBS volume is EBS-optimized.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-ebsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    ebs_configuration_property = emr.CfnCluster.EbsConfigurationProperty(\n        ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n            volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                size_in_gb=123,\n                volume_type="volumeType",\n\n                # the properties below are optional\n                iops=123,\n                throughput=123\n            ),\n\n            # the properties below are optional\n            volumes_per_instance=123\n        )],\n        ebs_optimized=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ebs_block_device_configs', 'ebs_optimized']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.EbsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.HadoopJarStepConfigProperty
class CfnCluster_HadoopJarStepConfigPropertyDef(BaseStruct):
    jar: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A path to a JAR file run during the step.\n')
    main_class: typing.Optional[str] = pydantic.Field(None, description='The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.\n')
    step_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_KeyValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of Java properties that are set when the step runs. You can use these properties to pass key-value pairs to your main function.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-hadoopjarstepconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    hadoop_jar_step_config_property = emr.CfnCluster.HadoopJarStepConfigProperty(\n        jar="jar",\n\n        # the properties below are optional\n        args=["args"],\n        main_class="mainClass",\n        step_properties=[emr.CfnCluster.KeyValueProperty(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['jar', 'main_class', 'step_properties']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.HadoopJarStepConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.InstanceFleetConfigProperty
class CfnCluster_InstanceFleetConfigPropertyDef(BaseStruct):
    instance_type_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceTypeConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The instance type configurations that define the Amazon EC2 instances in the instance fleet.\n')
    launch_specifications: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceFleetProvisioningSpecificationsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The launch specification for the instance fleet.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The friendly name of the instance fleet.\n')
    target_on_demand_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by ``InstanceTypeConfig`` . Each instance configuration has a specified ``WeightedCapacity`` . When an On-Demand instance is provisioned, the ``WeightedCapacity`` units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a ``WeightedCapacity`` of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. .. epigraph:: If not specified or set to 0, only Spot instances are provisioned for the instance fleet using ``TargetSpotCapacity`` . At least one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` should be greater than 0. For a master instance fleet, only one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` can be specified, and its value must be 1.\n')
    target_spot_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by ``InstanceTypeConfig`` . Each instance configuration has a specified ``WeightedCapacity`` . When a Spot instance is provisioned, the ``WeightedCapacity`` units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a ``WeightedCapacity`` of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. .. epigraph:: If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` should be greater than 0. For a master instance fleet, only one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` can be specified, and its value must be 1.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-instancefleetconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnCluster.ConfigurationProperty\n\n    instance_fleet_config_property = emr.CfnCluster.InstanceFleetConfigProperty(\n        instance_type_configs=[emr.CfnCluster.InstanceTypeConfigProperty(\n            instance_type="instanceType",\n\n            # the properties below are optional\n            bid_price="bidPrice",\n            bid_price_as_percentage_of_on_demand_price=123,\n            configurations=[emr.CfnCluster.ConfigurationProperty(\n                classification="classification",\n                configuration_properties={\n                    "configuration_properties_key": "configurationProperties"\n                },\n                configurations=[configuration_property_]\n            )],\n            custom_ami_id="customAmiId",\n            ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                    volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                        size_in_gb=123,\n                        volume_type="volumeType",\n\n                        # the properties below are optional\n                        iops=123,\n                        throughput=123\n                    ),\n\n                    # the properties below are optional\n                    volumes_per_instance=123\n                )],\n                ebs_optimized=False\n            ),\n            weighted_capacity=123\n        )],\n        launch_specifications=emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty(\n            on_demand_specification=emr.CfnCluster.OnDemandProvisioningSpecificationProperty(\n                allocation_strategy="allocationStrategy"\n            ),\n            spot_specification=emr.CfnCluster.SpotProvisioningSpecificationProperty(\n                timeout_action="timeoutAction",\n                timeout_duration_minutes=123,\n\n                # the properties below are optional\n                allocation_strategy="allocationStrategy",\n                block_duration_minutes=123\n            )\n        ),\n        name="name",\n        target_on_demand_capacity=123,\n        target_spot_capacity=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_type_configs', 'launch_specifications', 'name', 'target_on_demand_capacity', 'target_spot_capacity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.InstanceFleetConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty
class CfnCluster_InstanceFleetProvisioningSpecificationsPropertyDef(BaseStruct):
    on_demand_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_OnDemandProvisioningSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The launch specification for On-Demand Instances in the instance fleet, which determines the allocation strategy. .. epigraph:: The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in Amazon EMR releases 5.12.1 and later.\n')
    spot_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_SpotProvisioningSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The launch specification for Spot instances in the fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-instancefleetprovisioningspecifications.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    instance_fleet_provisioning_specifications_property = emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty(\n        on_demand_specification=emr.CfnCluster.OnDemandProvisioningSpecificationProperty(\n            allocation_strategy="allocationStrategy"\n        ),\n        spot_specification=emr.CfnCluster.SpotProvisioningSpecificationProperty(\n            timeout_action="timeoutAction",\n            timeout_duration_minutes=123,\n\n            # the properties below are optional\n            allocation_strategy="allocationStrategy",\n            block_duration_minutes=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['on_demand_specification', 'spot_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.InstanceGroupConfigProperty
class CfnCluster_InstanceGroupConfigPropertyDef(BaseStruct):
    instance_count: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Target number of instances for the instance group.\n')
    instance_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon EC2 instance type for all instances in the instance group.\n')
    auto_scaling_policy: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_AutoScalingPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AutoScalingPolicy`` is a subproperty of the `InstanceGroupConfig <https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-jobflowinstancesconfig-instancegroupconfig.html>`_ property type that specifies the constraints and rules of an automatic scaling policy in Amazon EMR . The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. Only core and task instance groups can use automatic scaling policies. For more information, see `Using Automatic Scaling in Amazon EMR <https://docs.aws.amazon.com//emr/latest/ManagementGuide/emr-automatic-scaling.html>`_ .\n')
    bid_price: typing.Optional[str] = pydantic.Field(None, description='If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify ``OnDemandPrice`` to set the amount equal to the On-Demand price, or specify an amount in USD.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='.. epigraph:: Amazon EMR releases 4.x or later. The list of configurations supplied for an Amazon EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).\n')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='The custom AMI ID to use for the provisioned instance group.\n')
    ebs_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_EbsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='EBS configurations that will be attached to each Amazon EC2 instance in the instance group.\n')
    market: typing.Optional[str] = pydantic.Field(None, description='Market type of the Amazon EC2 instances used to create a cluster node.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='Friendly name given to the instance group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-instancegroupconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnCluster.ConfigurationProperty\n\n    instance_group_config_property = emr.CfnCluster.InstanceGroupConfigProperty(\n        instance_count=123,\n        instance_type="instanceType",\n\n        # the properties below are optional\n        auto_scaling_policy=emr.CfnCluster.AutoScalingPolicyProperty(\n            constraints=emr.CfnCluster.ScalingConstraintsProperty(\n                max_capacity=123,\n                min_capacity=123\n            ),\n            rules=[emr.CfnCluster.ScalingRuleProperty(\n                action=emr.CfnCluster.ScalingActionProperty(\n                    simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n                        scaling_adjustment=123,\n\n                        # the properties below are optional\n                        adjustment_type="adjustmentType",\n                        cool_down=123\n                    ),\n\n                    # the properties below are optional\n                    market="market"\n                ),\n                name="name",\n                trigger=emr.CfnCluster.ScalingTriggerProperty(\n                    cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n                        comparison_operator="comparisonOperator",\n                        metric_name="metricName",\n                        period=123,\n                        threshold=123,\n\n                        # the properties below are optional\n                        dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                            key="key",\n                            value="value"\n                        )],\n                        evaluation_periods=123,\n                        namespace="namespace",\n                        statistic="statistic",\n                        unit="unit"\n                    )\n                ),\n\n                # the properties below are optional\n                description="description"\n            )]\n        ),\n        bid_price="bidPrice",\n        configurations=[emr.CfnCluster.ConfigurationProperty(\n            classification="classification",\n            configuration_properties={\n                "configuration_properties_key": "configurationProperties"\n            },\n            configurations=[configuration_property_]\n        )],\n        custom_ami_id="customAmiId",\n        ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n            ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                    size_in_gb=123,\n                    volume_type="volumeType",\n\n                    # the properties below are optional\n                    iops=123,\n                    throughput=123\n                ),\n\n                # the properties below are optional\n                volumes_per_instance=123\n            )],\n            ebs_optimized=False\n        ),\n        market="market",\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_type', 'auto_scaling_policy', 'bid_price', 'configurations', 'custom_ami_id', 'ebs_configuration', 'market', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.InstanceGroupConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.InstanceTypeConfigProperty
class CfnCluster_InstanceTypeConfigPropertyDef(BaseStruct):
    instance_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An Amazon EC2 instance type, such as ``m3.xlarge`` .\n')
    bid_price: typing.Optional[str] = pydantic.Field(None, description='The bid price for each Amazon EC2 Spot Instance type as defined by ``InstanceType`` . Expressed in USD. If neither ``BidPrice`` nor ``BidPriceAsPercentageOfOnDemandPrice`` is provided, ``BidPriceAsPercentageOfOnDemandPrice`` defaults to 100%.\n')
    bid_price_as_percentage_of_on_demand_price: typing.Union[int, float, None] = pydantic.Field(None, description='The bid price, as a percentage of On-Demand price, for each Amazon EC2 Spot Instance as defined by ``InstanceType`` . Expressed as a number (for example, 20 specifies 20%). If neither ``BidPrice`` nor ``BidPriceAsPercentageOfOnDemandPrice`` is provided, ``BidPriceAsPercentageOfOnDemandPrice`` defaults to 100%.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster.\n')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='The custom AMI ID to use for the instance type.\n')
    ebs_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_EbsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of Amazon Elastic Block Store (Amazon EBS) attached to each instance as defined by ``InstanceType`` .\n')
    weighted_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in ``InstanceFleetConfig`` . This value is 1 for a master instance fleet, and must be 1 or greater for core and task instance fleets. Defaults to 1 if not specified.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-instancetypeconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnCluster.ConfigurationProperty\n\n    instance_type_config_property = emr.CfnCluster.InstanceTypeConfigProperty(\n        instance_type="instanceType",\n\n        # the properties below are optional\n        bid_price="bidPrice",\n        bid_price_as_percentage_of_on_demand_price=123,\n        configurations=[emr.CfnCluster.ConfigurationProperty(\n            classification="classification",\n            configuration_properties={\n                "configuration_properties_key": "configurationProperties"\n            },\n            configurations=[configuration_property_]\n        )],\n        custom_ami_id="customAmiId",\n        ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n            ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                    size_in_gb=123,\n                    volume_type="volumeType",\n\n                    # the properties below are optional\n                    iops=123,\n                    throughput=123\n                ),\n\n                # the properties below are optional\n                volumes_per_instance=123\n            )],\n            ebs_optimized=False\n        ),\n        weighted_capacity=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_type', 'bid_price', 'bid_price_as_percentage_of_on_demand_price', 'configurations', 'custom_ami_id', 'ebs_configuration', 'weighted_capacity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.InstanceTypeConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.JobFlowInstancesConfigProperty
class CfnCluster_JobFlowInstancesConfigPropertyDef(BaseStruct):
    additional_master_security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of additional Amazon EC2 security group IDs for the master node.\n')
    additional_slave_security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of additional Amazon EC2 security group IDs for the core and task nodes.\n')
    core_instance_fleet: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceFleetConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the EC2 instances and instance configurations for the core instance fleet when using clusters with the instance fleet configuration.\n')
    core_instance_group: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceGroupConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the EC2 instances and instance configurations for core instance groups when using clusters with the uniform instance group configuration.\n')
    ec2_key_name: typing.Optional[str] = pydantic.Field(None, description='The name of the Amazon EC2 key pair that can be used to connect to the master node using SSH as the user called "hadoop.".\n')
    ec2_subnet_id: typing.Optional[str] = pydantic.Field(None, description='Applies to clusters that use the uniform instance group configuration. To launch the cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value and your account supports EC2-Classic, the cluster launches in EC2-Classic.\n')
    ec2_subnet_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Applies to clusters that use the instance fleet configuration. When multiple Amazon EC2 subnet IDs are specified, Amazon EMR evaluates them and launches instances in the optimal subnet. .. epigraph:: The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.\n')
    emr_managed_master_security_group: typing.Optional[str] = pydantic.Field(None, description='The identifier of the Amazon EC2 security group for the master node. If you specify ``EmrManagedMasterSecurityGroup`` , you must also specify ``EmrManagedSlaveSecurityGroup`` .\n')
    emr_managed_slave_security_group: typing.Optional[str] = pydantic.Field(None, description='The identifier of the Amazon EC2 security group for the core and task nodes. If you specify ``EmrManagedSlaveSecurityGroup`` , you must also specify ``EmrManagedMasterSecurityGroup`` .\n')
    hadoop_version: typing.Optional[str] = pydantic.Field(None, description='Applies only to Amazon EMR release versions earlier than 4.0. The Hadoop version for the cluster. Valid inputs are "0.18" (no longer maintained), "0.20" (no longer maintained), "0.20.205" (no longer maintained), "1.0.3", "2.2.0", or "2.4.0". If you do not set this value, the default of 0.18 is used, unless the ``AmiVersion`` parameter is set in the RunJobFlow call, in which case the default version of Hadoop for that AMI version is used.\n')
    keep_job_flow_alive_when_no_steps: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether the cluster should remain available after completing all steps. Defaults to ``true`` . For more information about configuring cluster termination, see `Control Cluster Termination <https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html>`_ in the *EMR Management Guide* .\n')
    master_instance_fleet: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceFleetConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the EC2 instances and instance configurations for the master instance fleet when using clusters with the instance fleet configuration.\n')
    master_instance_group: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceGroupConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the EC2 instances and instance configurations for the master instance group when using clusters with the uniform instance group configuration.\n')
    placement: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_PlacementTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Availability Zone in which the cluster runs.\n')
    service_access_security_group: typing.Optional[str] = pydantic.Field(None, description='The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.\n')
    task_instance_fleets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceFleetConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes the EC2 instances and instance configurations for the task instance fleets when using clusters with the instance fleet configuration. These task instance fleets are added to the cluster as part of the cluster launch. Each task instance fleet must have a unique name specified so that CloudFormation can differentiate between the task instance fleets. .. epigraph:: You can currently specify only one task instance fleet for a cluster. After creating the cluster, you can only modify the mutable properties of ``InstanceFleetConfig`` , which are ``TargetOnDemandCapacity`` and ``TargetSpotCapacity`` . Modifying any other property results in cluster replacement. > To allow a maximum of 30 Amazon EC2 instance types per fleet, include ``TaskInstanceFleets`` when you create your cluster. If you create your cluster without ``TaskInstanceFleets`` , Amazon EMR uses its default allocation strategy, which allows for a maximum of five Amazon EC2 instance types.\n')
    task_instance_groups: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceGroupConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Describes the EC2 instances and instance configurations for task instance groups when using clusters with the uniform instance group configuration. These task instance groups are added to the cluster as part of the cluster launch. Each task instance group must have a unique name specified so that CloudFormation can differentiate between the task instance groups. .. epigraph:: After creating the cluster, you can only modify the mutable properties of ``InstanceGroupConfig`` , which are ``AutoScalingPolicy`` and ``InstanceCount`` . Modifying any other property results in cluster replacement.\n')
    termination_protected: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being terminated by API call, user intervention, or in the event of a job-flow error.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-jobflowinstancesconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnCluster.ConfigurationProperty\n\n    job_flow_instances_config_property = emr.CfnCluster.JobFlowInstancesConfigProperty(\n        additional_master_security_groups=["additionalMasterSecurityGroups"],\n        additional_slave_security_groups=["additionalSlaveSecurityGroups"],\n        core_instance_fleet=emr.CfnCluster.InstanceFleetConfigProperty(\n            instance_type_configs=[emr.CfnCluster.InstanceTypeConfigProperty(\n                instance_type="instanceType",\n\n                # the properties below are optional\n                bid_price="bidPrice",\n                bid_price_as_percentage_of_on_demand_price=123,\n                configurations=[emr.CfnCluster.ConfigurationProperty(\n                    classification="classification",\n                    configuration_properties={\n                        "configuration_properties_key": "configurationProperties"\n                    },\n                    configurations=[configuration_property_]\n                )],\n                custom_ami_id="customAmiId",\n                ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                    ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                        volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                            size_in_gb=123,\n                            volume_type="volumeType",\n\n                            # the properties below are optional\n                            iops=123,\n                            throughput=123\n                        ),\n\n                        # the properties below are optional\n                        volumes_per_instance=123\n                    )],\n                    ebs_optimized=False\n                ),\n                weighted_capacity=123\n            )],\n            launch_specifications=emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty(\n                on_demand_specification=emr.CfnCluster.OnDemandProvisioningSpecificationProperty(\n                    allocation_strategy="allocationStrategy"\n                ),\n                spot_specification=emr.CfnCluster.SpotProvisioningSpecificationProperty(\n                    timeout_action="timeoutAction",\n                    timeout_duration_minutes=123,\n\n                    # the properties below are optional\n                    allocation_strategy="allocationStrategy",\n                    block_duration_minutes=123\n                )\n            ),\n            name="name",\n            target_on_demand_capacity=123,\n            target_spot_capacity=123\n        ),\n        core_instance_group=emr.CfnCluster.InstanceGroupConfigProperty(\n            instance_count=123,\n            instance_type="instanceType",\n\n            # the properties below are optional\n            auto_scaling_policy=emr.CfnCluster.AutoScalingPolicyProperty(\n                constraints=emr.CfnCluster.ScalingConstraintsProperty(\n                    max_capacity=123,\n                    min_capacity=123\n                ),\n                rules=[emr.CfnCluster.ScalingRuleProperty(\n                    action=emr.CfnCluster.ScalingActionProperty(\n                        simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n                            scaling_adjustment=123,\n\n                            # the properties below are optional\n                            adjustment_type="adjustmentType",\n                            cool_down=123\n                        ),\n\n                        # the properties below are optional\n                        market="market"\n                    ),\n                    name="name",\n                    trigger=emr.CfnCluster.ScalingTriggerProperty(\n                        cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n                            comparison_operator="comparisonOperator",\n                            metric_name="metricName",\n                            period=123,\n                            threshold=123,\n\n                            # the properties below are optional\n                            dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                                key="key",\n                                value="value"\n                            )],\n                            evaluation_periods=123,\n                            namespace="namespace",\n                            statistic="statistic",\n                            unit="unit"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    description="description"\n                )]\n            ),\n            bid_price="bidPrice",\n            configurations=[emr.CfnCluster.ConfigurationProperty(\n                classification="classification",\n                configuration_properties={\n                    "configuration_properties_key": "configurationProperties"\n                },\n                configurations=[configuration_property_]\n            )],\n            custom_ami_id="customAmiId",\n            ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                    volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                        size_in_gb=123,\n                        volume_type="volumeType",\n\n                        # the properties below are optional\n                        iops=123,\n                        throughput=123\n                    ),\n\n                    # the properties below are optional\n                    volumes_per_instance=123\n                )],\n                ebs_optimized=False\n            ),\n            market="market",\n            name="name"\n        ),\n        ec2_key_name="ec2KeyName",\n        ec2_subnet_id="ec2SubnetId",\n        ec2_subnet_ids=["ec2SubnetIds"],\n        emr_managed_master_security_group="emrManagedMasterSecurityGroup",\n        emr_managed_slave_security_group="emrManagedSlaveSecurityGroup",\n        hadoop_version="hadoopVersion",\n        keep_job_flow_alive_when_no_steps=False,\n        master_instance_fleet=emr.CfnCluster.InstanceFleetConfigProperty(\n            instance_type_configs=[emr.CfnCluster.InstanceTypeConfigProperty(\n                instance_type="instanceType",\n\n                # the properties below are optional\n                bid_price="bidPrice",\n                bid_price_as_percentage_of_on_demand_price=123,\n                configurations=[emr.CfnCluster.ConfigurationProperty(\n                    classification="classification",\n                    configuration_properties={\n                        "configuration_properties_key": "configurationProperties"\n                    },\n                    configurations=[configuration_property_]\n                )],\n                custom_ami_id="customAmiId",\n                ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                    ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                        volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                            size_in_gb=123,\n                            volume_type="volumeType",\n\n                            # the properties below are optional\n                            iops=123,\n                            throughput=123\n                        ),\n\n                        # the properties below are optional\n                        volumes_per_instance=123\n                    )],\n                    ebs_optimized=False\n                ),\n                weighted_capacity=123\n            )],\n            launch_specifications=emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty(\n                on_demand_specification=emr.CfnCluster.OnDemandProvisioningSpecificationProperty(\n                    allocation_strategy="allocationStrategy"\n                ),\n                spot_specification=emr.CfnCluster.SpotProvisioningSpecificationProperty(\n                    timeout_action="timeoutAction",\n                    timeout_duration_minutes=123,\n\n                    # the properties below are optional\n                    allocation_strategy="allocationStrategy",\n                    block_duration_minutes=123\n                )\n            ),\n            name="name",\n            target_on_demand_capacity=123,\n            target_spot_capacity=123\n        ),\n        master_instance_group=emr.CfnCluster.InstanceGroupConfigProperty(\n            instance_count=123,\n            instance_type="instanceType",\n\n            # the properties below are optional\n            auto_scaling_policy=emr.CfnCluster.AutoScalingPolicyProperty(\n                constraints=emr.CfnCluster.ScalingConstraintsProperty(\n                    max_capacity=123,\n                    min_capacity=123\n                ),\n                rules=[emr.CfnCluster.ScalingRuleProperty(\n                    action=emr.CfnCluster.ScalingActionProperty(\n                        simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n                            scaling_adjustment=123,\n\n                            # the properties below are optional\n                            adjustment_type="adjustmentType",\n                            cool_down=123\n                        ),\n\n                        # the properties below are optional\n                        market="market"\n                    ),\n                    name="name",\n                    trigger=emr.CfnCluster.ScalingTriggerProperty(\n                        cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n                            comparison_operator="comparisonOperator",\n                            metric_name="metricName",\n                            period=123,\n                            threshold=123,\n\n                            # the properties below are optional\n                            dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                                key="key",\n                                value="value"\n                            )],\n                            evaluation_periods=123,\n                            namespace="namespace",\n                            statistic="statistic",\n                            unit="unit"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    description="description"\n                )]\n            ),\n            bid_price="bidPrice",\n            configurations=[emr.CfnCluster.ConfigurationProperty(\n                classification="classification",\n                configuration_properties={\n                    "configuration_properties_key": "configurationProperties"\n                },\n                configurations=[configuration_property_]\n            )],\n            custom_ami_id="customAmiId",\n            ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                    volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                        size_in_gb=123,\n                        volume_type="volumeType",\n\n                        # the properties below are optional\n                        iops=123,\n                        throughput=123\n                    ),\n\n                    # the properties below are optional\n                    volumes_per_instance=123\n                )],\n                ebs_optimized=False\n            ),\n            market="market",\n            name="name"\n        ),\n        placement=emr.CfnCluster.PlacementTypeProperty(\n            availability_zone="availabilityZone"\n        ),\n        service_access_security_group="serviceAccessSecurityGroup",\n        task_instance_fleets=[emr.CfnCluster.InstanceFleetConfigProperty(\n            instance_type_configs=[emr.CfnCluster.InstanceTypeConfigProperty(\n                instance_type="instanceType",\n\n                # the properties below are optional\n                bid_price="bidPrice",\n                bid_price_as_percentage_of_on_demand_price=123,\n                configurations=[emr.CfnCluster.ConfigurationProperty(\n                    classification="classification",\n                    configuration_properties={\n                        "configuration_properties_key": "configurationProperties"\n                    },\n                    configurations=[configuration_property_]\n                )],\n                custom_ami_id="customAmiId",\n                ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                    ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                        volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                            size_in_gb=123,\n                            volume_type="volumeType",\n\n                            # the properties below are optional\n                            iops=123,\n                            throughput=123\n                        ),\n\n                        # the properties below are optional\n                        volumes_per_instance=123\n                    )],\n                    ebs_optimized=False\n                ),\n                weighted_capacity=123\n            )],\n            launch_specifications=emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty(\n                on_demand_specification=emr.CfnCluster.OnDemandProvisioningSpecificationProperty(\n                    allocation_strategy="allocationStrategy"\n                ),\n                spot_specification=emr.CfnCluster.SpotProvisioningSpecificationProperty(\n                    timeout_action="timeoutAction",\n                    timeout_duration_minutes=123,\n\n                    # the properties below are optional\n                    allocation_strategy="allocationStrategy",\n                    block_duration_minutes=123\n                )\n            ),\n            name="name",\n            target_on_demand_capacity=123,\n            target_spot_capacity=123\n        )],\n        task_instance_groups=[emr.CfnCluster.InstanceGroupConfigProperty(\n            instance_count=123,\n            instance_type="instanceType",\n\n            # the properties below are optional\n            auto_scaling_policy=emr.CfnCluster.AutoScalingPolicyProperty(\n                constraints=emr.CfnCluster.ScalingConstraintsProperty(\n                    max_capacity=123,\n                    min_capacity=123\n                ),\n                rules=[emr.CfnCluster.ScalingRuleProperty(\n                    action=emr.CfnCluster.ScalingActionProperty(\n                        simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n                            scaling_adjustment=123,\n\n                            # the properties below are optional\n                            adjustment_type="adjustmentType",\n                            cool_down=123\n                        ),\n\n                        # the properties below are optional\n                        market="market"\n                    ),\n                    name="name",\n                    trigger=emr.CfnCluster.ScalingTriggerProperty(\n                        cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n                            comparison_operator="comparisonOperator",\n                            metric_name="metricName",\n                            period=123,\n                            threshold=123,\n\n                            # the properties below are optional\n                            dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                                key="key",\n                                value="value"\n                            )],\n                            evaluation_periods=123,\n                            namespace="namespace",\n                            statistic="statistic",\n                            unit="unit"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    description="description"\n                )]\n            ),\n            bid_price="bidPrice",\n            configurations=[emr.CfnCluster.ConfigurationProperty(\n                classification="classification",\n                configuration_properties={\n                    "configuration_properties_key": "configurationProperties"\n                },\n                configurations=[configuration_property_]\n            )],\n            custom_ami_id="customAmiId",\n            ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                    volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                        size_in_gb=123,\n                        volume_type="volumeType",\n\n                        # the properties below are optional\n                        iops=123,\n                        throughput=123\n                    ),\n\n                    # the properties below are optional\n                    volumes_per_instance=123\n                )],\n                ebs_optimized=False\n            ),\n            market="market",\n            name="name"\n        )],\n        termination_protected=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['additional_master_security_groups', 'additional_slave_security_groups', 'core_instance_fleet', 'core_instance_group', 'ec2_key_name', 'ec2_subnet_id', 'ec2_subnet_ids', 'emr_managed_master_security_group', 'emr_managed_slave_security_group', 'hadoop_version', 'keep_job_flow_alive_when_no_steps', 'master_instance_fleet', 'master_instance_group', 'placement', 'service_access_security_group', 'task_instance_fleets', 'task_instance_groups', 'termination_protected']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.JobFlowInstancesConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.KerberosAttributesProperty
class CfnCluster_KerberosAttributesPropertyDef(BaseStruct):
    kdc_admin_password: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster.\n')
    realm: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the Kerberos realm to which all nodes in a cluster belong. For example, ``EC2.INTERNAL`` .\n')
    ad_domain_join_password: typing.Optional[str] = pydantic.Field(None, description='The Active Directory password for ``ADDomainJoinUser`` .\n')
    ad_domain_join_user: typing.Optional[str] = pydantic.Field(None, description='Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.\n')
    cross_realm_trust_principal_password: typing.Optional[str] = pydantic.Field(None, description='Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-kerberosattributes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    kerberos_attributes_property = emr.CfnCluster.KerberosAttributesProperty(\n        kdc_admin_password="kdcAdminPassword",\n        realm="realm",\n\n        # the properties below are optional\n        ad_domain_join_password="adDomainJoinPassword",\n        ad_domain_join_user="adDomainJoinUser",\n        cross_realm_trust_principal_password="crossRealmTrustPrincipalPassword"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kdc_admin_password', 'realm', 'ad_domain_join_password', 'ad_domain_join_user', 'cross_realm_trust_principal_password']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.KerberosAttributesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.KeyValueProperty
class CfnCluster_KeyValuePropertyDef(BaseStruct):
    key: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of a key-value pair.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value part of the identified key.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-keyvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    key_value_property = emr.CfnCluster.KeyValueProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.KeyValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.ManagedScalingPolicyProperty
class CfnCluster_ManagedScalingPolicyPropertyDef(BaseStruct):
    compute_limits: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ComputeLimitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster is not allowed to go above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-managedscalingpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    managed_scaling_policy_property = emr.CfnCluster.ManagedScalingPolicyProperty(\n        compute_limits=emr.CfnCluster.ComputeLimitsProperty(\n            maximum_capacity_units=123,\n            minimum_capacity_units=123,\n            unit_type="unitType",\n\n            # the properties below are optional\n            maximum_core_capacity_units=123,\n            maximum_on_demand_capacity_units=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['compute_limits']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.ManagedScalingPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.MetricDimensionProperty
class CfnCluster_MetricDimensionPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The dimension name.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The dimension value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-metricdimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    metric_dimension_property = emr.CfnCluster.MetricDimensionProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.MetricDimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.OnDemandProvisioningSpecificationProperty
class CfnCluster_OnDemandProvisioningSpecificationPropertyDef(BaseStruct):
    allocation_strategy: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is ``lowest-price`` (the default), which launches the lowest price first.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-ondemandprovisioningspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    on_demand_provisioning_specification_property = emr.CfnCluster.OnDemandProvisioningSpecificationProperty(\n        allocation_strategy="allocationStrategy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allocation_strategy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.OnDemandProvisioningSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.PlacementTypeProperty
class CfnCluster_PlacementTypePropertyDef(BaseStruct):
    availability_zone: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon EC2 Availability Zone for the cluster. ``AvailabilityZone`` is used for uniform instance groups, while ``AvailabilityZones`` (plural) is used for instance fleets.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-placementtype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    placement_type_property = emr.CfnCluster.PlacementTypeProperty(\n        availability_zone="availabilityZone"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['availability_zone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.PlacementTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.ScalingActionProperty
class CfnCluster_ScalingActionPropertyDef(BaseStruct):
    simple_scaling_policy_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_SimpleScalingPolicyConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.\n')
    market: typing.Optional[str] = pydantic.Field(None, description='Not available for instance groups. Instance groups use the market type specified for the group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-scalingaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    scaling_action_property = emr.CfnCluster.ScalingActionProperty(\n        simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n            scaling_adjustment=123,\n\n            # the properties below are optional\n            adjustment_type="adjustmentType",\n            cool_down=123\n        ),\n\n        # the properties below are optional\n        market="market"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['simple_scaling_policy_configuration', 'market']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.ScalingActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.ScalingConstraintsProperty
class CfnCluster_ScalingConstraintsPropertyDef(BaseStruct):
    max_capacity: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.\n')
    min_capacity: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-scalingconstraints.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    scaling_constraints_property = emr.CfnCluster.ScalingConstraintsProperty(\n        max_capacity=123,\n        min_capacity=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_capacity', 'min_capacity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.ScalingConstraintsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.ScalingRuleProperty
class CfnCluster_ScalingRulePropertyDef(BaseStruct):
    action: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_ScalingActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The conditions that trigger an automatic scaling activity.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy.\n')
    trigger: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_ScalingTriggerPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The CloudWatch alarm definition that determines when automatic scaling activity is triggered.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A friendly, more verbose description of the automatic scaling rule.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-scalingrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    scaling_rule_property = emr.CfnCluster.ScalingRuleProperty(\n        action=emr.CfnCluster.ScalingActionProperty(\n            simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n                scaling_adjustment=123,\n\n                # the properties below are optional\n                adjustment_type="adjustmentType",\n                cool_down=123\n            ),\n\n            # the properties below are optional\n            market="market"\n        ),\n        name="name",\n        trigger=emr.CfnCluster.ScalingTriggerProperty(\n            cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n                comparison_operator="comparisonOperator",\n                metric_name="metricName",\n                period=123,\n                threshold=123,\n\n                # the properties below are optional\n                dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                    key="key",\n                    value="value"\n                )],\n                evaluation_periods=123,\n                namespace="namespace",\n                statistic="statistic",\n                unit="unit"\n            )\n        ),\n\n        # the properties below are optional\n        description="description"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'name', 'trigger', 'description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.ScalingRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.ScalingTriggerProperty
class CfnCluster_ScalingTriggerPropertyDef(BaseStruct):
    cloud_watch_alarm_definition: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_CloudWatchAlarmDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-scalingtrigger.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    scaling_trigger_property = emr.CfnCluster.ScalingTriggerProperty(\n        cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n            comparison_operator="comparisonOperator",\n            metric_name="metricName",\n            period=123,\n            threshold=123,\n\n            # the properties below are optional\n            dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                key="key",\n                value="value"\n            )],\n            evaluation_periods=123,\n            namespace="namespace",\n            statistic="statistic",\n            unit="unit"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_alarm_definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.ScalingTriggerProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.ScriptBootstrapActionConfigProperty
class CfnCluster_ScriptBootstrapActionConfigPropertyDef(BaseStruct):
    path: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Location in Amazon S3 of the script to run during a bootstrap action.\n')
    _init_params: typing.ClassVar[list[str]] = ['path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.ScriptBootstrapActionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.SimpleScalingPolicyConfigurationProperty
class CfnCluster_SimpleScalingPolicyConfigurationPropertyDef(BaseStruct):
    scaling_adjustment: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="The amount by which to scale in or scale out, based on the specified ``AdjustmentType`` . A positive value adds to the instance group's Amazon EC2 instance count while a negative number removes instances. If ``AdjustmentType`` is set to ``EXACT_CAPACITY`` , the number should only be a positive integer. If ``AdjustmentType`` is set to ``PERCENT_CHANGE_IN_CAPACITY`` , the value should express the percentage as an integer. For example, -20 indicates a decrease in 20% increments of cluster capacity.\n")
    adjustment_type: typing.Optional[str] = pydantic.Field(None, description='The way in which Amazon EC2 instances are added (if ``ScalingAdjustment`` is a positive number) or terminated (if ``ScalingAdjustment`` is a negative number) each time the scaling activity is triggered. ``CHANGE_IN_CAPACITY`` is the default. ``CHANGE_IN_CAPACITY`` indicates that the Amazon EC2 instance count increments or decrements by ``ScalingAdjustment`` , which should be expressed as an integer. ``PERCENT_CHANGE_IN_CAPACITY`` indicates the instance count increments or decrements by the percentage specified by ``ScalingAdjustment`` , which should be expressed as an integer. For example, 20 indicates an increase in 20% increments of cluster capacity. ``EXACT_CAPACITY`` indicates the scaling activity results in an instance group with the number of Amazon EC2 instances specified by ``ScalingAdjustment`` , which should be expressed as a positive integer.\n')
    cool_down: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-simplescalingpolicyconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    simple_scaling_policy_configuration_property = emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n        scaling_adjustment=123,\n\n        # the properties below are optional\n        adjustment_type="adjustmentType",\n        cool_down=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['scaling_adjustment', 'adjustment_type', 'cool_down']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.SimpleScalingPolicyConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.SpotProvisioningSpecificationProperty
class CfnCluster_SpotProvisioningSpecificationPropertyDef(BaseStruct):
    timeout_action: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The action to take when ``TargetSpotCapacity`` has not been fulfilled when the ``TimeoutDurationMinutes`` has expired; that is, when all Spot Instances could not be provisioned within the Spot provisioning timeout. Valid values are ``TERMINATE_CLUSTER`` and ``SWITCH_TO_ON_DEMAND`` . SWITCH_TO_ON_DEMAND specifies that if no Spot Instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.\n')
    timeout_duration_minutes: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Spot provisioning timeout period in minutes. If Spot Instances are not provisioned within this time period, the ``TimeOutAction`` is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.\n')
    allocation_strategy: typing.Optional[str] = pydantic.Field(None, description="Specifies one of the following strategies to launch Spot Instance fleets: ``price-capacity-optimized`` , ``capacity-optimized`` , ``lowest-price`` , or ``diversified`` . For more information on the provisioning strategies, see `Allocation strategies for Spot Instances <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html>`_ in the *Amazon EC2 User Guide for Linux Instances* . .. epigraph:: When you launch a Spot Instance fleet with the old console, it automatically launches with the ``capacity-optimized`` strategy. You can't change the allocation strategy from the old console.\n")
    block_duration_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='The defined duration for Spot Instances (also known as Spot blocks) in minutes. When specified, the Spot Instance does not terminate before the defined duration expires, and defined duration pricing for Spot Instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot Instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. .. epigraph:: Spot Instances with a defined duration (also known as Spot blocks) are no longer available to new customers from July 1, 2021. For customers who have previously used the feature, we will continue to support Spot Instances with a defined duration until December 31, 2022.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-spotprovisioningspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    spot_provisioning_specification_property = emr.CfnCluster.SpotProvisioningSpecificationProperty(\n        timeout_action="timeoutAction",\n        timeout_duration_minutes=123,\n\n        # the properties below are optional\n        allocation_strategy="allocationStrategy",\n        block_duration_minutes=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['timeout_action', 'timeout_duration_minutes', 'allocation_strategy', 'block_duration_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.SpotProvisioningSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.StepConfigProperty
class CfnCluster_StepConfigPropertyDef(BaseStruct):
    hadoop_jar_step: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_HadoopJarStepConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The JAR file used for the step.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the step.\n')
    action_on_failure: typing.Optional[str] = pydantic.Field(None, description='The action to take when the cluster step fails. Possible values are ``CANCEL_AND_WAIT`` and ``CONTINUE`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-stepconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    step_config_property = emr.CfnCluster.StepConfigProperty(\n        hadoop_jar_step=emr.CfnCluster.HadoopJarStepConfigProperty(\n            jar="jar",\n\n            # the properties below are optional\n            args=["args"],\n            main_class="mainClass",\n            step_properties=[emr.CfnCluster.KeyValueProperty(\n                key="key",\n                value="value"\n            )]\n        ),\n        name="name",\n\n        # the properties below are optional\n        action_on_failure="actionOnFailure"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hadoop_jar_step', 'name', 'action_on_failure']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.StepConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster.VolumeSpecificationProperty
class CfnCluster_VolumeSpecificationPropertyDef(BaseStruct):
    size_in_gb: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.\n')
    volume_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The volume type. Volume types supported are gp3, gp2, io1, st1, sc1, and standard.\n')
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='The number of I/O operations per second (IOPS) that the volume supports.\n')
    throughput: typing.Union[int, float, None] = pydantic.Field(None, description='The throughput, in mebibyte per second (MiB/s). This optional parameter can be a number from 125 - 1000 and is valid only for gp3 volumes.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-cluster-volumespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    volume_specification_property = emr.CfnCluster.VolumeSpecificationProperty(\n        size_in_gb=123,\n        volume_type="volumeType",\n\n        # the properties below are optional\n        iops=123,\n        throughput=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['size_in_gb', 'volume_type', 'iops', 'throughput']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster.VolumeSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfig.ConfigurationProperty
class CfnInstanceFleetConfig_ConfigurationPropertyDef(BaseStruct):
    classification: typing.Optional[str] = pydantic.Field(None, description='The classification within a configuration.\n')
    configuration_properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='Within a configuration classification, a set of properties that represent the settings that you want to change in the configuration file. Duplicates not allowed.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of additional configurations to apply within a configuration object.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancefleetconfig-configuration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnInstanceFleetConfig.ConfigurationProperty\n\n    configuration_property = emr.CfnInstanceFleetConfig.ConfigurationProperty(\n        classification="classification",\n        configuration_properties={\n            "configuration_properties_key": "configurationProperties"\n        },\n        configurations=[configuration_property_]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['classification', 'configuration_properties', 'configurations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfig.ConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfig.EbsBlockDeviceConfigProperty
class CfnInstanceFleetConfig_EbsBlockDeviceConfigPropertyDef(BaseStruct):
    volume_specification: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_VolumeSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an Amazon EC2 instance in the cluster.\n')
    volumes_per_instance: typing.Union[int, float, None] = pydantic.Field(None, description='Number of EBS volumes with a specific volume configuration that are associated with every instance in the instance group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancefleetconfig-ebsblockdeviceconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    ebs_block_device_config_property = emr.CfnInstanceFleetConfig.EbsBlockDeviceConfigProperty(\n        volume_specification=emr.CfnInstanceFleetConfig.VolumeSpecificationProperty(\n            size_in_gb=123,\n            volume_type="volumeType",\n\n            # the properties below are optional\n            iops=123,\n            throughput=123\n        ),\n\n        # the properties below are optional\n        volumes_per_instance=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['volume_specification', 'volumes_per_instance']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfig.EbsBlockDeviceConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfig.EbsConfigurationProperty
class CfnInstanceFleetConfig_EbsConfigurationPropertyDef(BaseStruct):
    ebs_block_device_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_EbsBlockDeviceConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of Amazon EBS volume specifications attached to a cluster instance.\n')
    ebs_optimized: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether an Amazon EBS volume is EBS-optimized.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancefleetconfig-ebsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    ebs_configuration_property = emr.CfnInstanceFleetConfig.EbsConfigurationProperty(\n        ebs_block_device_configs=[emr.CfnInstanceFleetConfig.EbsBlockDeviceConfigProperty(\n            volume_specification=emr.CfnInstanceFleetConfig.VolumeSpecificationProperty(\n                size_in_gb=123,\n                volume_type="volumeType",\n\n                # the properties below are optional\n                iops=123,\n                throughput=123\n            ),\n\n            # the properties below are optional\n            volumes_per_instance=123\n        )],\n        ebs_optimized=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ebs_block_device_configs', 'ebs_optimized']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfig.EbsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfig.InstanceFleetProvisioningSpecificationsProperty
class CfnInstanceFleetConfig_InstanceFleetProvisioningSpecificationsPropertyDef(BaseStruct):
    on_demand_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_OnDemandProvisioningSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The launch specification for On-Demand Instances in the instance fleet, which determines the allocation strategy. .. epigraph:: The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in Amazon EMR releases 5.12.1 and later.\n')
    spot_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_SpotProvisioningSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The launch specification for Spot instances in the fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancefleetconfig-instancefleetprovisioningspecifications.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    instance_fleet_provisioning_specifications_property = emr.CfnInstanceFleetConfig.InstanceFleetProvisioningSpecificationsProperty(\n        on_demand_specification=emr.CfnInstanceFleetConfig.OnDemandProvisioningSpecificationProperty(\n            allocation_strategy="allocationStrategy"\n        ),\n        spot_specification=emr.CfnInstanceFleetConfig.SpotProvisioningSpecificationProperty(\n            timeout_action="timeoutAction",\n            timeout_duration_minutes=123,\n\n            # the properties below are optional\n            allocation_strategy="allocationStrategy",\n            block_duration_minutes=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['on_demand_specification', 'spot_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfig.InstanceFleetProvisioningSpecificationsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfig.InstanceTypeConfigProperty
class CfnInstanceFleetConfig_InstanceTypeConfigPropertyDef(BaseStruct):
    instance_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An Amazon EC2 instance type, such as ``m3.xlarge`` .\n')
    bid_price: typing.Optional[str] = pydantic.Field(None, description='The bid price for each Amazon EC2 Spot Instance type as defined by ``InstanceType`` . Expressed in USD. If neither ``BidPrice`` nor ``BidPriceAsPercentageOfOnDemandPrice`` is provided, ``BidPriceAsPercentageOfOnDemandPrice`` defaults to 100%.\n')
    bid_price_as_percentage_of_on_demand_price: typing.Union[int, float, None] = pydantic.Field(None, description='The bid price, as a percentage of On-Demand price, for each Amazon EC2 Spot Instance as defined by ``InstanceType`` . Expressed as a number (for example, 20 specifies 20%). If neither ``BidPrice`` nor ``BidPriceAsPercentageOfOnDemandPrice`` is provided, ``BidPriceAsPercentageOfOnDemandPrice`` defaults to 100%.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='.. epigraph:: Amazon EMR releases 4.x or later. An optional configuration specification to be used when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file. For more information, see `Configuring Applications <https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html>`_ .\n')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='The custom AMI ID to use for the instance type.\n')
    ebs_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_EbsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of Amazon Elastic Block Store (Amazon EBS) attached to each instance as defined by ``InstanceType`` .\n')
    weighted_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in ``InstanceFleetConfig`` . This value is 1 for a master instance fleet, and must be 1 or greater for core and task instance fleets. Defaults to 1 if not specified.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancefleetconfig-instancetypeconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnInstanceFleetConfig.ConfigurationProperty\n\n    instance_type_config_property = emr.CfnInstanceFleetConfig.InstanceTypeConfigProperty(\n        instance_type="instanceType",\n\n        # the properties below are optional\n        bid_price="bidPrice",\n        bid_price_as_percentage_of_on_demand_price=123,\n        configurations=[emr.CfnInstanceFleetConfig.ConfigurationProperty(\n            classification="classification",\n            configuration_properties={\n                "configuration_properties_key": "configurationProperties"\n            },\n            configurations=[configuration_property_]\n        )],\n        custom_ami_id="customAmiId",\n        ebs_configuration=emr.CfnInstanceFleetConfig.EbsConfigurationProperty(\n            ebs_block_device_configs=[emr.CfnInstanceFleetConfig.EbsBlockDeviceConfigProperty(\n                volume_specification=emr.CfnInstanceFleetConfig.VolumeSpecificationProperty(\n                    size_in_gb=123,\n                    volume_type="volumeType",\n\n                    # the properties below are optional\n                    iops=123,\n                    throughput=123\n                ),\n\n                # the properties below are optional\n                volumes_per_instance=123\n            )],\n            ebs_optimized=False\n        ),\n        weighted_capacity=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_type', 'bid_price', 'bid_price_as_percentage_of_on_demand_price', 'configurations', 'custom_ami_id', 'ebs_configuration', 'weighted_capacity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfig.InstanceTypeConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfig.OnDemandProvisioningSpecificationProperty
class CfnInstanceFleetConfig_OnDemandProvisioningSpecificationPropertyDef(BaseStruct):
    allocation_strategy: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is ``lowest-price`` (the default), which launches the lowest price first.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancefleetconfig-ondemandprovisioningspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    on_demand_provisioning_specification_property = emr.CfnInstanceFleetConfig.OnDemandProvisioningSpecificationProperty(\n        allocation_strategy="allocationStrategy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allocation_strategy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfig.OnDemandProvisioningSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfig.SpotProvisioningSpecificationProperty
class CfnInstanceFleetConfig_SpotProvisioningSpecificationPropertyDef(BaseStruct):
    timeout_action: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The action to take when ``TargetSpotCapacity`` has not been fulfilled when the ``TimeoutDurationMinutes`` has expired; that is, when all Spot Instances could not be provisioned within the Spot provisioning timeout. Valid values are ``TERMINATE_CLUSTER`` and ``SWITCH_TO_ON_DEMAND`` . SWITCH_TO_ON_DEMAND specifies that if no Spot Instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.\n')
    timeout_duration_minutes: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Spot provisioning timeout period in minutes. If Spot Instances are not provisioned within this time period, the ``TimeOutAction`` is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.\n')
    allocation_strategy: typing.Optional[str] = pydantic.Field(None, description="Specifies one of the following strategies to launch Spot Instance fleets: ``price-capacity-optimized`` , ``capacity-optimized`` , ``lowest-price`` , or ``diversified`` . For more information on the provisioning strategies, see `Allocation strategies for Spot Instances <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html>`_ in the *Amazon EC2 User Guide for Linux Instances* . .. epigraph:: When you launch a Spot Instance fleet with the old console, it automatically launches with the ``capacity-optimized`` strategy. You can't change the allocation strategy from the old console.\n")
    block_duration_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='The defined duration for Spot Instances (also known as Spot blocks) in minutes. When specified, the Spot Instance does not terminate before the defined duration expires, and defined duration pricing for Spot Instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot Instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. .. epigraph:: Spot Instances with a defined duration (also known as Spot blocks) are no longer available to new customers from July 1, 2021. For customers who have previously used the feature, we will continue to support Spot Instances with a defined duration until December 31, 2022.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancefleetconfig-spotprovisioningspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    spot_provisioning_specification_property = emr.CfnInstanceFleetConfig.SpotProvisioningSpecificationProperty(\n        timeout_action="timeoutAction",\n        timeout_duration_minutes=123,\n\n        # the properties below are optional\n        allocation_strategy="allocationStrategy",\n        block_duration_minutes=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['timeout_action', 'timeout_duration_minutes', 'allocation_strategy', 'block_duration_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfig.SpotProvisioningSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfig.VolumeSpecificationProperty
class CfnInstanceFleetConfig_VolumeSpecificationPropertyDef(BaseStruct):
    size_in_gb: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.\n')
    volume_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The volume type. Volume types supported are gp3, gp2, io1, st1, sc1, and standard.\n')
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='The number of I/O operations per second (IOPS) that the volume supports.\n')
    throughput: typing.Union[int, float, None] = pydantic.Field(None, description='The throughput, in mebibyte per second (MiB/s). This optional parameter can be a number from 125 - 1000 and is valid only for gp3 volumes.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancefleetconfig-volumespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    volume_specification_property = emr.CfnInstanceFleetConfig.VolumeSpecificationProperty(\n        size_in_gb=123,\n        volume_type="volumeType",\n\n        # the properties below are optional\n        iops=123,\n        throughput=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['size_in_gb', 'volume_type', 'iops', 'throughput']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfig.VolumeSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.AutoScalingPolicyProperty
class CfnInstanceGroupConfig_AutoScalingPolicyPropertyDef(BaseStruct):
    constraints: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ScalingConstraintsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.\n')
    rules: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ScalingRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The scale-in and scale-out rules that comprise the automatic scaling policy.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-autoscalingpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    auto_scaling_policy_property = emr.CfnInstanceGroupConfig.AutoScalingPolicyProperty(\n        constraints=emr.CfnInstanceGroupConfig.ScalingConstraintsProperty(\n            max_capacity=123,\n            min_capacity=123\n        ),\n        rules=[emr.CfnInstanceGroupConfig.ScalingRuleProperty(\n            action=emr.CfnInstanceGroupConfig.ScalingActionProperty(\n                simple_scaling_policy_configuration=emr.CfnInstanceGroupConfig.SimpleScalingPolicyConfigurationProperty(\n                    scaling_adjustment=123,\n\n                    # the properties below are optional\n                    adjustment_type="adjustmentType",\n                    cool_down=123\n                ),\n\n                # the properties below are optional\n                market="market"\n            ),\n            name="name",\n            trigger=emr.CfnInstanceGroupConfig.ScalingTriggerProperty(\n                cloud_watch_alarm_definition=emr.CfnInstanceGroupConfig.CloudWatchAlarmDefinitionProperty(\n                    comparison_operator="comparisonOperator",\n                    metric_name="metricName",\n                    period=123,\n                    threshold=123,\n\n                    # the properties below are optional\n                    dimensions=[emr.CfnInstanceGroupConfig.MetricDimensionProperty(\n                        key="key",\n                        value="value"\n                    )],\n                    evaluation_periods=123,\n                    namespace="namespace",\n                    statistic="statistic",\n                    unit="unit"\n                )\n            ),\n\n            # the properties below are optional\n            description="description"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['constraints', 'rules']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.AutoScalingPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.CloudWatchAlarmDefinitionProperty
class CfnInstanceGroupConfig_CloudWatchAlarmDefinitionPropertyDef(BaseStruct):
    comparison_operator: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Determines how the metric specified by ``MetricName`` is compared to the value specified by ``Threshold`` .\n')
    metric_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the CloudWatch metric that is watched to determine an alarm condition.\n')
    period: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The period, in seconds, over which the statistic is applied. CloudWatch metrics for Amazon EMR are emitted every five minutes (300 seconds), so if you specify a CloudWatch metric, specify ``300`` .\n')
    threshold: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value against which the specified statistic is compared.\n')
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_MetricDimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A CloudWatch metric dimension.\n')
    evaluation_periods: typing.Union[int, float, None] = pydantic.Field(None, description='The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is ``1`` .\n')
    namespace: typing.Optional[str] = pydantic.Field(None, description='The namespace for the CloudWatch metric. The default is ``AWS/ElasticMapReduce`` .\n')
    statistic: typing.Optional[str] = pydantic.Field(None, description='The statistic to apply to the metric associated with the alarm. The default is ``AVERAGE`` .\n')
    unit: typing.Optional[str] = pydantic.Field(None, description='The unit of measure associated with the CloudWatch metric being watched. The value specified for ``Unit`` must correspond to the units specified in the CloudWatch metric.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-cloudwatchalarmdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    cloud_watch_alarm_definition_property = emr.CfnInstanceGroupConfig.CloudWatchAlarmDefinitionProperty(\n        comparison_operator="comparisonOperator",\n        metric_name="metricName",\n        period=123,\n        threshold=123,\n\n        # the properties below are optional\n        dimensions=[emr.CfnInstanceGroupConfig.MetricDimensionProperty(\n            key="key",\n            value="value"\n        )],\n        evaluation_periods=123,\n        namespace="namespace",\n        statistic="statistic",\n        unit="unit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison_operator', 'metric_name', 'period', 'threshold', 'dimensions', 'evaluation_periods', 'namespace', 'statistic', 'unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.CloudWatchAlarmDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.ConfigurationProperty
class CfnInstanceGroupConfig_ConfigurationPropertyDef(BaseStruct):
    classification: typing.Optional[str] = pydantic.Field(None, description='The classification within a configuration.\n')
    configuration_properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='Within a configuration classification, a set of properties that represent the settings that you want to change in the configuration file. Duplicates not allowed.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of additional configurations to apply within a configuration object.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-configuration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnInstanceGroupConfig.ConfigurationProperty\n\n    configuration_property = emr.CfnInstanceGroupConfig.ConfigurationProperty(\n        classification="classification",\n        configuration_properties={\n            "configuration_properties_key": "configurationProperties"\n        },\n        configurations=[configuration_property_]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['classification', 'configuration_properties', 'configurations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.ConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.EbsBlockDeviceConfigProperty
class CfnInstanceGroupConfig_EbsBlockDeviceConfigPropertyDef(BaseStruct):
    volume_specification: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_VolumeSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an Amazon EC2 instance in the cluster.\n')
    volumes_per_instance: typing.Union[int, float, None] = pydantic.Field(None, description='Number of EBS volumes with a specific volume configuration that are associated with every instance in the instance group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-ebsblockdeviceconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    ebs_block_device_config_property = emr.CfnInstanceGroupConfig.EbsBlockDeviceConfigProperty(\n        volume_specification=emr.CfnInstanceGroupConfig.VolumeSpecificationProperty(\n            size_in_gb=123,\n            volume_type="volumeType",\n\n            # the properties below are optional\n            iops=123,\n            throughput=123\n        ),\n\n        # the properties below are optional\n        volumes_per_instance=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['volume_specification', 'volumes_per_instance']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.EbsBlockDeviceConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.EbsConfigurationProperty
class CfnInstanceGroupConfig_EbsConfigurationPropertyDef(BaseStruct):
    ebs_block_device_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_EbsBlockDeviceConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of Amazon EBS volume specifications attached to a cluster instance.\n')
    ebs_optimized: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether an Amazon EBS volume is EBS-optimized.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-ebsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    ebs_configuration_property = emr.CfnInstanceGroupConfig.EbsConfigurationProperty(\n        ebs_block_device_configs=[emr.CfnInstanceGroupConfig.EbsBlockDeviceConfigProperty(\n            volume_specification=emr.CfnInstanceGroupConfig.VolumeSpecificationProperty(\n                size_in_gb=123,\n                volume_type="volumeType",\n\n                # the properties below are optional\n                iops=123,\n                throughput=123\n            ),\n\n            # the properties below are optional\n            volumes_per_instance=123\n        )],\n        ebs_optimized=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ebs_block_device_configs', 'ebs_optimized']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.EbsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.MetricDimensionProperty
class CfnInstanceGroupConfig_MetricDimensionPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The dimension name.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The dimension value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-metricdimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    metric_dimension_property = emr.CfnInstanceGroupConfig.MetricDimensionProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.MetricDimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.ScalingActionProperty
class CfnInstanceGroupConfig_ScalingActionPropertyDef(BaseStruct):
    simple_scaling_policy_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_SimpleScalingPolicyConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.\n')
    market: typing.Optional[str] = pydantic.Field(None, description='Not available for instance groups. Instance groups use the market type specified for the group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-scalingaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    scaling_action_property = emr.CfnInstanceGroupConfig.ScalingActionProperty(\n        simple_scaling_policy_configuration=emr.CfnInstanceGroupConfig.SimpleScalingPolicyConfigurationProperty(\n            scaling_adjustment=123,\n\n            # the properties below are optional\n            adjustment_type="adjustmentType",\n            cool_down=123\n        ),\n\n        # the properties below are optional\n        market="market"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['simple_scaling_policy_configuration', 'market']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.ScalingActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.ScalingConstraintsProperty
class CfnInstanceGroupConfig_ScalingConstraintsPropertyDef(BaseStruct):
    max_capacity: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.\n')
    min_capacity: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-scalingconstraints.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    scaling_constraints_property = emr.CfnInstanceGroupConfig.ScalingConstraintsProperty(\n        max_capacity=123,\n        min_capacity=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_capacity', 'min_capacity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.ScalingConstraintsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.ScalingRuleProperty
class CfnInstanceGroupConfig_ScalingRulePropertyDef(BaseStruct):
    action: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ScalingActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The conditions that trigger an automatic scaling activity.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy.\n')
    trigger: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ScalingTriggerPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The CloudWatch alarm definition that determines when automatic scaling activity is triggered.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A friendly, more verbose description of the automatic scaling rule.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-scalingrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    scaling_rule_property = emr.CfnInstanceGroupConfig.ScalingRuleProperty(\n        action=emr.CfnInstanceGroupConfig.ScalingActionProperty(\n            simple_scaling_policy_configuration=emr.CfnInstanceGroupConfig.SimpleScalingPolicyConfigurationProperty(\n                scaling_adjustment=123,\n\n                # the properties below are optional\n                adjustment_type="adjustmentType",\n                cool_down=123\n            ),\n\n            # the properties below are optional\n            market="market"\n        ),\n        name="name",\n        trigger=emr.CfnInstanceGroupConfig.ScalingTriggerProperty(\n            cloud_watch_alarm_definition=emr.CfnInstanceGroupConfig.CloudWatchAlarmDefinitionProperty(\n                comparison_operator="comparisonOperator",\n                metric_name="metricName",\n                period=123,\n                threshold=123,\n\n                # the properties below are optional\n                dimensions=[emr.CfnInstanceGroupConfig.MetricDimensionProperty(\n                    key="key",\n                    value="value"\n                )],\n                evaluation_periods=123,\n                namespace="namespace",\n                statistic="statistic",\n                unit="unit"\n            )\n        ),\n\n        # the properties below are optional\n        description="description"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'name', 'trigger', 'description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.ScalingRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.ScalingTriggerProperty
class CfnInstanceGroupConfig_ScalingTriggerPropertyDef(BaseStruct):
    cloud_watch_alarm_definition: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_CloudWatchAlarmDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-scalingtrigger.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    scaling_trigger_property = emr.CfnInstanceGroupConfig.ScalingTriggerProperty(\n        cloud_watch_alarm_definition=emr.CfnInstanceGroupConfig.CloudWatchAlarmDefinitionProperty(\n            comparison_operator="comparisonOperator",\n            metric_name="metricName",\n            period=123,\n            threshold=123,\n\n            # the properties below are optional\n            dimensions=[emr.CfnInstanceGroupConfig.MetricDimensionProperty(\n                key="key",\n                value="value"\n            )],\n            evaluation_periods=123,\n            namespace="namespace",\n            statistic="statistic",\n            unit="unit"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_alarm_definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.ScalingTriggerProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.SimpleScalingPolicyConfigurationProperty
class CfnInstanceGroupConfig_SimpleScalingPolicyConfigurationPropertyDef(BaseStruct):
    scaling_adjustment: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="The amount by which to scale in or scale out, based on the specified ``AdjustmentType`` . A positive value adds to the instance group's Amazon EC2 instance count while a negative number removes instances. If ``AdjustmentType`` is set to ``EXACT_CAPACITY`` , the number should only be a positive integer. If ``AdjustmentType`` is set to ``PERCENT_CHANGE_IN_CAPACITY`` , the value should express the percentage as an integer. For example, -20 indicates a decrease in 20% increments of cluster capacity.\n")
    adjustment_type: typing.Optional[str] = pydantic.Field(None, description='The way in which Amazon EC2 instances are added (if ``ScalingAdjustment`` is a positive number) or terminated (if ``ScalingAdjustment`` is a negative number) each time the scaling activity is triggered. ``CHANGE_IN_CAPACITY`` is the default. ``CHANGE_IN_CAPACITY`` indicates that the Amazon EC2 instance count increments or decrements by ``ScalingAdjustment`` , which should be expressed as an integer. ``PERCENT_CHANGE_IN_CAPACITY`` indicates the instance count increments or decrements by the percentage specified by ``ScalingAdjustment`` , which should be expressed as an integer. For example, 20 indicates an increase in 20% increments of cluster capacity. ``EXACT_CAPACITY`` indicates the scaling activity results in an instance group with the number of Amazon EC2 instances specified by ``ScalingAdjustment`` , which should be expressed as a positive integer.\n')
    cool_down: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-simplescalingpolicyconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    simple_scaling_policy_configuration_property = emr.CfnInstanceGroupConfig.SimpleScalingPolicyConfigurationProperty(\n        scaling_adjustment=123,\n\n        # the properties below are optional\n        adjustment_type="adjustmentType",\n        cool_down=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['scaling_adjustment', 'adjustment_type', 'cool_down']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.SimpleScalingPolicyConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig.VolumeSpecificationProperty
class CfnInstanceGroupConfig_VolumeSpecificationPropertyDef(BaseStruct):
    size_in_gb: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.\n')
    volume_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The volume type. Volume types supported are gp3, gp2, io1, st1, sc1, and standard.\n')
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='The number of I/O operations per second (IOPS) that the volume supports.\n')
    throughput: typing.Union[int, float, None] = pydantic.Field(None, description='The throughput, in mebibyte per second (MiB/s). This optional parameter can be a number from 125 - 1000 and is valid only for gp3 volumes.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-instancegroupconfig-volumespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    volume_specification_property = emr.CfnInstanceGroupConfig.VolumeSpecificationProperty(\n        size_in_gb=123,\n        volume_type="volumeType",\n\n        # the properties below are optional\n        iops=123,\n        throughput=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['size_in_gb', 'volume_type', 'iops', 'throughput']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig.VolumeSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnStep.HadoopJarStepConfigProperty
class CfnStep_HadoopJarStepConfigPropertyDef(BaseStruct):
    jar: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A path to a JAR file run during the step.\n')
    main_class: typing.Optional[str] = pydantic.Field(None, description='The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.\n')
    step_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnStep_KeyValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-step-hadoopjarstepconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    hadoop_jar_step_config_property = emr.CfnStep.HadoopJarStepConfigProperty(\n        jar="jar",\n\n        # the properties below are optional\n        args=["args"],\n        main_class="mainClass",\n        step_properties=[emr.CfnStep.KeyValueProperty(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['jar', 'main_class', 'step_properties']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnStep.HadoopJarStepConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnStep.KeyValueProperty
class CfnStep_KeyValuePropertyDef(BaseStruct):
    key: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of a key-value pair.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value part of the identified key.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emr-step-keyvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    key_value_property = emr.CfnStep.KeyValueProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnStep.KeyValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnCluster
class CfnClusterDef(BaseCfnResource):
    instances: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_JobFlowInstancesConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A specification of the number and type of Amazon EC2 instances.\n')
    job_flow_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Also called instance profile and Amazon EC2 role. An IAM role for an Amazon EMR cluster. The Amazon EC2 instances of the cluster assume this role. The default role is ``EMR_EC2_DefaultRole`` . In order to use the default role, you must have already created it using the AWS CLI or console.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the cluster.\n')
    service_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IAM role that Amazon EMR assumes in order to access AWS resources on your behalf.\n')
    additional_info: typing.Any = pydantic.Field(None, description='A JSON string for selecting additional features.\n')
    applications: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ApplicationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The applications to install on this cluster, for example, Spark, Flink, Oozie, Zeppelin, and so on.\n')
    auto_scaling_role: typing.Optional[str] = pydantic.Field(None, description='An IAM role for automatic scaling policies. The default role is ``EMR_AutoScaling_DefaultRole`` . The IAM role provides permissions that the automatic scaling feature requires to launch and terminate Amazon EC2 instances in an instance group.\n')
    auto_termination_policy: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_AutoTerminationPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see `Control cluster termination <https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html>`_\n')
    bootstrap_actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_BootstrapActionConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of bootstrap actions to run before Hadoop starts on the cluster nodes.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Applies only to Amazon EMR releases 4.x and later. The list of configurations that are supplied to the Amazon EMR cluster.\n')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='Available only in Amazon EMR releases 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.\n')
    ebs_root_volume_size: typing.Union[int, float, None] = pydantic.Field(None, description='The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 4.x and later.\n')
    kerberos_attributes: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_KerberosAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see `Use Kerberos Authentication <https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html>`_ in the *Amazon EMR Management Guide* .\n')
    log_encryption_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS KMS key used for encrypting log files. This attribute is only available with Amazon EMR 5.30.0 and later, excluding Amazon EMR 6.0.0.\n')
    log_uri: typing.Optional[str] = pydantic.Field(None, description='The path to the Amazon S3 location where logs for this cluster are stored.\n')
    managed_scaling_policy: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ManagedScalingPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Creates or updates a managed scaling policy for an Amazon EMR cluster. The managed scaling policy defines the limits for resources, such as Amazon EC2 instances that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration.\n')
    os_release_label: typing.Optional[str] = pydantic.Field(None, description='The Amazon Linux release specified in a cluster launch RunJobFlow request. If no Amazon Linux release was specified, the default Amazon Linux release is shown in the response.\n')
    release_label: typing.Optional[str] = pydantic.Field(None, description='The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form ``emr-x.x.x`` , where x.x.x is an Amazon EMR release version such as ``emr-5.14.0`` . For more information about Amazon EMR release versions and included application versions and features, see ` <https://docs.aws.amazon.com/emr/latest/ReleaseGuide/>`_ . The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use ``AmiVersion`` .\n')
    scale_down_behavior: typing.Optional[str] = pydantic.Field(None, description='The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. ``TERMINATE_AT_INSTANCE_HOUR`` indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. ``TERMINATE_AT_TASK_COMPLETION`` indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. ``TERMINATE_AT_TASK_COMPLETION`` is available only in Amazon EMR releases 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.\n')
    security_configuration: typing.Optional[str] = pydantic.Field(None, description='The name of the security configuration applied to the cluster.\n')
    step_concurrency_level: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the number of steps that can be executed concurrently. The default value is ``1`` . The maximum value is ``256`` .\n')
    steps: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_StepConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of steps to run.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of tags associated with a cluster.\n')
    visible_to_all_users: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to ``true`` , all IAM users of that AWS account can view and manage the cluster if they have the proper policy permissions set. If this value is ``false`` , only the IAM user that created the cluster can view and manage it. This value can be changed using the SetVisibleToAllUsers action. .. epigraph:: When you create clusters directly through the EMR console or API, this value is set to ``true`` by default. However, for ``AWS::EMR::Cluster`` resources in CloudFormation, the default is ``false`` .')
    _init_params: typing.ClassVar[list[str]] = ['instances', 'job_flow_role', 'name', 'service_role', 'additional_info', 'applications', 'auto_scaling_role', 'auto_termination_policy', 'bootstrap_actions', 'configurations', 'custom_ami_id', 'ebs_root_volume_size', 'kerberos_attributes', 'log_encryption_kms_key_id', 'log_uri', 'managed_scaling_policy', 'os_release_label', 'release_label', 'scale_down_behavior', 'security_configuration', 'step_concurrency_level', 'steps', 'tags', 'visible_to_all_users']
    _method_names: typing.ClassVar[list[str]] = ['ApplicationProperty', 'AutoScalingPolicyProperty', 'AutoTerminationPolicyProperty', 'BootstrapActionConfigProperty', 'CloudWatchAlarmDefinitionProperty', 'ComputeLimitsProperty', 'ConfigurationProperty', 'EbsBlockDeviceConfigProperty', 'EbsConfigurationProperty', 'HadoopJarStepConfigProperty', 'InstanceFleetConfigProperty', 'InstanceFleetProvisioningSpecificationsProperty', 'InstanceGroupConfigProperty', 'InstanceTypeConfigProperty', 'JobFlowInstancesConfigProperty', 'KerberosAttributesProperty', 'KeyValueProperty', 'ManagedScalingPolicyProperty', 'MetricDimensionProperty', 'OnDemandProvisioningSpecificationProperty', 'PlacementTypeProperty', 'ScalingActionProperty', 'ScalingConstraintsProperty', 'ScalingRuleProperty', 'ScalingTriggerProperty', 'ScriptBootstrapActionConfigProperty', 'SimpleScalingPolicyConfigurationProperty', 'SpotProvisioningSpecificationProperty', 'StepConfigProperty', 'VolumeSpecificationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnCluster'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_emr.CfnClusterDefConfig] = pydantic.Field(None)


class CfnClusterDefConfig(pydantic.BaseModel):
    ApplicationProperty: typing.Optional[list[models.aws_emr.CfnClusterDefApplicationpropertyParams]] = pydantic.Field(None, description='')
    AutoScalingPolicyProperty: typing.Optional[list[models.aws_emr.CfnClusterDefAutoscalingpolicypropertyParams]] = pydantic.Field(None, description='')
    AutoTerminationPolicyProperty: typing.Optional[list[models.aws_emr.CfnClusterDefAutoterminationpolicypropertyParams]] = pydantic.Field(None, description='')
    BootstrapActionConfigProperty: typing.Optional[list[models.aws_emr.CfnClusterDefBootstrapactionconfigpropertyParams]] = pydantic.Field(None, description='')
    CloudWatchAlarmDefinitionProperty: typing.Optional[list[models.aws_emr.CfnClusterDefCloudwatchalarmdefinitionpropertyParams]] = pydantic.Field(None, description='')
    ComputeLimitsProperty: typing.Optional[list[models.aws_emr.CfnClusterDefComputelimitspropertyParams]] = pydantic.Field(None, description='')
    ConfigurationProperty: typing.Optional[list[models.aws_emr.CfnClusterDefConfigurationpropertyParams]] = pydantic.Field(None, description='')
    EbsBlockDeviceConfigProperty: typing.Optional[list[models.aws_emr.CfnClusterDefEbsblockdeviceconfigpropertyParams]] = pydantic.Field(None, description='')
    EbsConfigurationProperty: typing.Optional[list[models.aws_emr.CfnClusterDefEbsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    HadoopJarStepConfigProperty: typing.Optional[list[models.aws_emr.CfnClusterDefHadoopjarstepconfigpropertyParams]] = pydantic.Field(None, description='')
    InstanceFleetConfigProperty: typing.Optional[list[models.aws_emr.CfnClusterDefInstancefleetconfigpropertyParams]] = pydantic.Field(None, description='')
    InstanceFleetProvisioningSpecificationsProperty: typing.Optional[list[models.aws_emr.CfnClusterDefInstancefleetprovisioningspecificationspropertyParams]] = pydantic.Field(None, description='')
    InstanceGroupConfigProperty: typing.Optional[list[models.aws_emr.CfnClusterDefInstancegroupconfigpropertyParams]] = pydantic.Field(None, description='')
    InstanceTypeConfigProperty: typing.Optional[list[models.aws_emr.CfnClusterDefInstancetypeconfigpropertyParams]] = pydantic.Field(None, description='')
    JobFlowInstancesConfigProperty: typing.Optional[list[models.aws_emr.CfnClusterDefJobflowinstancesconfigpropertyParams]] = pydantic.Field(None, description='')
    KerberosAttributesProperty: typing.Optional[list[models.aws_emr.CfnClusterDefKerberosattributespropertyParams]] = pydantic.Field(None, description='')
    KeyValueProperty: typing.Optional[list[models.aws_emr.CfnClusterDefKeyvaluepropertyParams]] = pydantic.Field(None, description='')
    ManagedScalingPolicyProperty: typing.Optional[list[models.aws_emr.CfnClusterDefManagedscalingpolicypropertyParams]] = pydantic.Field(None, description='')
    MetricDimensionProperty: typing.Optional[list[models.aws_emr.CfnClusterDefMetricdimensionpropertyParams]] = pydantic.Field(None, description='')
    OnDemandProvisioningSpecificationProperty: typing.Optional[list[models.aws_emr.CfnClusterDefOndemandprovisioningspecificationpropertyParams]] = pydantic.Field(None, description='')
    PlacementTypeProperty: typing.Optional[list[models.aws_emr.CfnClusterDefPlacementtypepropertyParams]] = pydantic.Field(None, description='')
    ScalingActionProperty: typing.Optional[list[models.aws_emr.CfnClusterDefScalingactionpropertyParams]] = pydantic.Field(None, description='')
    ScalingConstraintsProperty: typing.Optional[list[models.aws_emr.CfnClusterDefScalingconstraintspropertyParams]] = pydantic.Field(None, description='')
    ScalingRuleProperty: typing.Optional[list[models.aws_emr.CfnClusterDefScalingrulepropertyParams]] = pydantic.Field(None, description='')
    ScalingTriggerProperty: typing.Optional[list[models.aws_emr.CfnClusterDefScalingtriggerpropertyParams]] = pydantic.Field(None, description='')
    ScriptBootstrapActionConfigProperty: typing.Optional[list[models.aws_emr.CfnClusterDefScriptbootstrapactionconfigpropertyParams]] = pydantic.Field(None, description='')
    SimpleScalingPolicyConfigurationProperty: typing.Optional[list[models.aws_emr.CfnClusterDefSimplescalingpolicyconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SpotProvisioningSpecificationProperty: typing.Optional[list[models.aws_emr.CfnClusterDefSpotprovisioningspecificationpropertyParams]] = pydantic.Field(None, description='')
    StepConfigProperty: typing.Optional[list[models.aws_emr.CfnClusterDefStepconfigpropertyParams]] = pydantic.Field(None, description='')
    VolumeSpecificationProperty: typing.Optional[list[models.aws_emr.CfnClusterDefVolumespecificationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_emr.CfnClusterDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_emr.CfnClusterDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_emr.CfnClusterDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_emr.CfnClusterDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_emr.CfnClusterDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_emr.CfnClusterDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_emr.CfnClusterDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_emr.CfnClusterDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_emr.CfnClusterDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_emr.CfnClusterDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_emr.CfnClusterDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_emr.CfnClusterDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_emr.CfnClusterDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnClusterDefApplicationpropertyParams(pydantic.BaseModel):
    additional_info: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    args: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefAutoscalingpolicypropertyParams(pydantic.BaseModel):
    constraints: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ScalingConstraintsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ScalingRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefAutoterminationpolicypropertyParams(pydantic.BaseModel):
    idle_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefBootstrapactionconfigpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    script_bootstrap_action: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ScriptBootstrapActionConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefCloudwatchalarmdefinitionpropertyParams(pydantic.BaseModel):
    comparison_operator: str = pydantic.Field(..., description='')
    metric_name: str = pydantic.Field(..., description='')
    period: typing.Union[int, float] = pydantic.Field(..., description='')
    threshold: typing.Union[int, float] = pydantic.Field(..., description='')
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_MetricDimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    evaluation_periods: typing.Union[int, float, None] = pydantic.Field(None, description='')
    namespace: typing.Optional[str] = pydantic.Field(None, description='')
    statistic: typing.Optional[str] = pydantic.Field(None, description='')
    unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefComputelimitspropertyParams(pydantic.BaseModel):
    maximum_capacity_units: typing.Union[int, float] = pydantic.Field(..., description='')
    minimum_capacity_units: typing.Union[int, float] = pydantic.Field(..., description='')
    unit_type: str = pydantic.Field(..., description='')
    maximum_core_capacity_units: typing.Union[int, float, None] = pydantic.Field(None, description='')
    maximum_on_demand_capacity_units: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefConfigurationpropertyParams(pydantic.BaseModel):
    classification: typing.Optional[str] = pydantic.Field(None, description='')
    configuration_properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefEbsblockdeviceconfigpropertyParams(pydantic.BaseModel):
    volume_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_VolumeSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    volumes_per_instance: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefEbsconfigurationpropertyParams(pydantic.BaseModel):
    ebs_block_device_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_EbsBlockDeviceConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ebs_optimized: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefHadoopjarstepconfigpropertyParams(pydantic.BaseModel):
    jar: str = pydantic.Field(..., description='')
    args: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    main_class: typing.Optional[str] = pydantic.Field(None, description='')
    step_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_KeyValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefInstancefleetconfigpropertyParams(pydantic.BaseModel):
    instance_type_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceTypeConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    launch_specifications: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceFleetProvisioningSpecificationsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    target_on_demand_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='')
    target_spot_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefInstancefleetprovisioningspecificationspropertyParams(pydantic.BaseModel):
    on_demand_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_OnDemandProvisioningSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    spot_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_SpotProvisioningSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefInstancegroupconfigpropertyParams(pydantic.BaseModel):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    auto_scaling_policy: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_AutoScalingPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    bid_price: typing.Optional[str] = pydantic.Field(None, description='')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='')
    ebs_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_EbsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    market: typing.Optional[str] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefInstancetypeconfigpropertyParams(pydantic.BaseModel):
    instance_type: str = pydantic.Field(..., description='')
    bid_price: typing.Optional[str] = pydantic.Field(None, description='')
    bid_price_as_percentage_of_on_demand_price: typing.Union[int, float, None] = pydantic.Field(None, description='')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='')
    ebs_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_EbsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    weighted_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefJobflowinstancesconfigpropertyParams(pydantic.BaseModel):
    additional_master_security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    additional_slave_security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    core_instance_fleet: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceFleetConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    core_instance_group: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceGroupConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ec2_key_name: typing.Optional[str] = pydantic.Field(None, description='')
    ec2_subnet_id: typing.Optional[str] = pydantic.Field(None, description='')
    ec2_subnet_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    emr_managed_master_security_group: typing.Optional[str] = pydantic.Field(None, description='')
    emr_managed_slave_security_group: typing.Optional[str] = pydantic.Field(None, description='')
    hadoop_version: typing.Optional[str] = pydantic.Field(None, description='')
    keep_job_flow_alive_when_no_steps: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    master_instance_fleet: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceFleetConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    master_instance_group: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceGroupConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    placement: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_PlacementTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_access_security_group: typing.Optional[str] = pydantic.Field(None, description='')
    task_instance_fleets: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceFleetConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    task_instance_groups: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_InstanceGroupConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    termination_protected: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefKerberosattributespropertyParams(pydantic.BaseModel):
    kdc_admin_password: str = pydantic.Field(..., description='')
    realm: str = pydantic.Field(..., description='')
    ad_domain_join_password: typing.Optional[str] = pydantic.Field(None, description='')
    ad_domain_join_user: typing.Optional[str] = pydantic.Field(None, description='')
    cross_realm_trust_principal_password: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefKeyvaluepropertyParams(pydantic.BaseModel):
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefManagedscalingpolicypropertyParams(pydantic.BaseModel):
    compute_limits: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ComputeLimitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefMetricdimensionpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnClusterDefOndemandprovisioningspecificationpropertyParams(pydantic.BaseModel):
    allocation_strategy: str = pydantic.Field(..., description='')
    ...

class CfnClusterDefPlacementtypepropertyParams(pydantic.BaseModel):
    availability_zone: str = pydantic.Field(..., description='')
    ...

class CfnClusterDefScalingactionpropertyParams(pydantic.BaseModel):
    simple_scaling_policy_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_SimpleScalingPolicyConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    market: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefScalingconstraintspropertyParams(pydantic.BaseModel):
    max_capacity: typing.Union[int, float] = pydantic.Field(..., description='')
    min_capacity: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnClusterDefScalingrulepropertyParams(pydantic.BaseModel):
    action: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ScalingActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    trigger: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ScalingTriggerPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefScalingtriggerpropertyParams(pydantic.BaseModel):
    cloud_watch_alarm_definition: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_CloudWatchAlarmDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnClusterDefScriptbootstrapactionconfigpropertyParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='')
    args: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnClusterDefSimplescalingpolicyconfigurationpropertyParams(pydantic.BaseModel):
    scaling_adjustment: typing.Union[int, float] = pydantic.Field(..., description='')
    adjustment_type: typing.Optional[str] = pydantic.Field(None, description='')
    cool_down: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefSpotprovisioningspecificationpropertyParams(pydantic.BaseModel):
    timeout_action: str = pydantic.Field(..., description='')
    timeout_duration_minutes: typing.Union[int, float] = pydantic.Field(..., description='')
    allocation_strategy: typing.Optional[str] = pydantic.Field(None, description='')
    block_duration_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefStepconfigpropertyParams(pydantic.BaseModel):
    hadoop_jar_step: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_HadoopJarStepConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    action_on_failure: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnClusterDefVolumespecificationpropertyParams(pydantic.BaseModel):
    size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='')
    volume_type: str = pydantic.Field(..., description='')
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='')
    throughput: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnClusterDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnClusterDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnClusterDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnClusterDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnClusterDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnClusterDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnClusterDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnClusterDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnClusterDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnClusterDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnClusterDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnClusterDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnClusterDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnClusterDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfig
class CfnInstanceFleetConfigDef(BaseCfnResource):
    cluster_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the EMR cluster.\n')
    instance_fleet_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The node type that the instance fleet hosts. *Allowed Values* : TASK\n')
    instance_type_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_InstanceTypeConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='``InstanceTypeConfigs`` determine the EC2 instances that Amazon EMR attempts to provision to fulfill On-Demand and Spot target capacities. .. epigraph:: The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.\n')
    launch_specifications: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_InstanceFleetProvisioningSpecificationsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The launch specification for the instance fleet.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The friendly name of the instance fleet.\n')
    target_on_demand_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by ``InstanceTypeConfig`` . Each instance configuration has a specified ``WeightedCapacity`` . When an On-Demand instance is provisioned, the ``WeightedCapacity`` units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a ``WeightedCapacity`` of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. .. epigraph:: If not specified or set to 0, only Spot instances are provisioned for the instance fleet using ``TargetSpotCapacity`` . At least one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` should be greater than 0. For a master instance fleet, only one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` can be specified, and its value must be 1.\n')
    target_spot_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by ``InstanceTypeConfig`` . Each instance configuration has a specified ``WeightedCapacity`` . When a Spot instance is provisioned, the ``WeightedCapacity`` units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a ``WeightedCapacity`` of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. .. epigraph:: If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` should be greater than 0. For a master instance fleet, only one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` can be specified, and its value must be 1.')
    _init_params: typing.ClassVar[list[str]] = ['cluster_id', 'instance_fleet_type', 'instance_type_configs', 'launch_specifications', 'name', 'target_on_demand_capacity', 'target_spot_capacity']
    _method_names: typing.ClassVar[list[str]] = ['ConfigurationProperty', 'EbsBlockDeviceConfigProperty', 'EbsConfigurationProperty', 'InstanceFleetProvisioningSpecificationsProperty', 'InstanceTypeConfigProperty', 'OnDemandProvisioningSpecificationProperty', 'SpotProvisioningSpecificationProperty', 'VolumeSpecificationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_emr.CfnInstanceFleetConfigDefConfig] = pydantic.Field(None)


class CfnInstanceFleetConfigDefConfig(pydantic.BaseModel):
    ConfigurationProperty: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefConfigurationpropertyParams]] = pydantic.Field(None, description='')
    EbsBlockDeviceConfigProperty: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefEbsblockdeviceconfigpropertyParams]] = pydantic.Field(None, description='')
    EbsConfigurationProperty: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefEbsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    InstanceFleetProvisioningSpecificationsProperty: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefInstancefleetprovisioningspecificationspropertyParams]] = pydantic.Field(None, description='')
    InstanceTypeConfigProperty: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefInstancetypeconfigpropertyParams]] = pydantic.Field(None, description='')
    OnDemandProvisioningSpecificationProperty: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefOndemandprovisioningspecificationpropertyParams]] = pydantic.Field(None, description='')
    SpotProvisioningSpecificationProperty: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefSpotprovisioningspecificationpropertyParams]] = pydantic.Field(None, description='')
    VolumeSpecificationProperty: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefVolumespecificationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_emr.CfnInstanceFleetConfigDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnInstanceFleetConfigDefConfigurationpropertyParams(pydantic.BaseModel):
    classification: typing.Optional[str] = pydantic.Field(None, description='')
    configuration_properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnInstanceFleetConfigDefEbsblockdeviceconfigpropertyParams(pydantic.BaseModel):
    volume_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_VolumeSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    volumes_per_instance: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnInstanceFleetConfigDefEbsconfigurationpropertyParams(pydantic.BaseModel):
    ebs_block_device_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_EbsBlockDeviceConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ebs_optimized: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnInstanceFleetConfigDefInstancefleetprovisioningspecificationspropertyParams(pydantic.BaseModel):
    on_demand_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_OnDemandProvisioningSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    spot_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_SpotProvisioningSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnInstanceFleetConfigDefInstancetypeconfigpropertyParams(pydantic.BaseModel):
    instance_type: str = pydantic.Field(..., description='')
    bid_price: typing.Optional[str] = pydantic.Field(None, description='')
    bid_price_as_percentage_of_on_demand_price: typing.Union[int, float, None] = pydantic.Field(None, description='')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='')
    ebs_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_EbsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    weighted_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnInstanceFleetConfigDefOndemandprovisioningspecificationpropertyParams(pydantic.BaseModel):
    allocation_strategy: str = pydantic.Field(..., description='')
    ...

class CfnInstanceFleetConfigDefSpotprovisioningspecificationpropertyParams(pydantic.BaseModel):
    timeout_action: str = pydantic.Field(..., description='')
    timeout_duration_minutes: typing.Union[int, float] = pydantic.Field(..., description='')
    allocation_strategy: typing.Optional[str] = pydantic.Field(None, description='')
    block_duration_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnInstanceFleetConfigDefVolumespecificationpropertyParams(pydantic.BaseModel):
    size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='')
    volume_type: str = pydantic.Field(..., description='')
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='')
    throughput: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnInstanceFleetConfigDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnInstanceFleetConfigDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInstanceFleetConfigDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnInstanceFleetConfigDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInstanceFleetConfigDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnInstanceFleetConfigDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnInstanceFleetConfigDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnInstanceFleetConfigDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnInstanceFleetConfigDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnInstanceFleetConfigDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInstanceFleetConfigDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnInstanceFleetConfigDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnInstanceFleetConfigDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInstanceFleetConfigDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfig
class CfnInstanceGroupConfigDef(BaseCfnResource):
    instance_count: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Target number of instances for the instance group.\n')
    instance_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The role of the instance group in the cluster. *Allowed Values* : TASK\n')
    instance_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon EC2 instance type for all instances in the instance group.\n')
    job_flow_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of an Amazon EMR cluster that you want to associate this instance group with.\n')
    auto_scaling_policy: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_AutoScalingPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AutoScalingPolicy`` is a subproperty of ``InstanceGroupConfig`` . ``AutoScalingPolicy`` defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. For more information, see `Using Automatic Scaling in Amazon EMR <https://docs.aws.amazon.com//emr/latest/ManagementGuide/emr-automatic-scaling.html>`_ in the *Amazon EMR Management Guide* .\n')
    bid_price: typing.Optional[str] = pydantic.Field(None, description='If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify ``OnDemandPrice`` to set the amount equal to the On-Demand price, or specify an amount in USD.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='.. epigraph:: Amazon EMR releases 4.x or later. The list of configurations supplied for an Amazon EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).\n')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='The custom AMI ID to use for the provisioned instance group.\n')
    ebs_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_EbsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``EbsConfiguration`` determines the EBS volumes to attach to EMR cluster instances.\n')
    market: typing.Optional[str] = pydantic.Field(None, description='Market type of the Amazon EC2 instances used to create a cluster node.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='Friendly name given to the instance group.')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_role', 'instance_type', 'job_flow_id', 'auto_scaling_policy', 'bid_price', 'configurations', 'custom_ami_id', 'ebs_configuration', 'market', 'name']
    _method_names: typing.ClassVar[list[str]] = ['AutoScalingPolicyProperty', 'CloudWatchAlarmDefinitionProperty', 'ConfigurationProperty', 'EbsBlockDeviceConfigProperty', 'EbsConfigurationProperty', 'MetricDimensionProperty', 'ScalingActionProperty', 'ScalingConstraintsProperty', 'ScalingRuleProperty', 'ScalingTriggerProperty', 'SimpleScalingPolicyConfigurationProperty', 'VolumeSpecificationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_emr.CfnInstanceGroupConfigDefConfig] = pydantic.Field(None)


class CfnInstanceGroupConfigDefConfig(pydantic.BaseModel):
    AutoScalingPolicyProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefAutoscalingpolicypropertyParams]] = pydantic.Field(None, description='')
    CloudWatchAlarmDefinitionProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefCloudwatchalarmdefinitionpropertyParams]] = pydantic.Field(None, description='')
    ConfigurationProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefConfigurationpropertyParams]] = pydantic.Field(None, description='')
    EbsBlockDeviceConfigProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefEbsblockdeviceconfigpropertyParams]] = pydantic.Field(None, description='')
    EbsConfigurationProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefEbsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    MetricDimensionProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefMetricdimensionpropertyParams]] = pydantic.Field(None, description='')
    ScalingActionProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefScalingactionpropertyParams]] = pydantic.Field(None, description='')
    ScalingConstraintsProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefScalingconstraintspropertyParams]] = pydantic.Field(None, description='')
    ScalingRuleProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefScalingrulepropertyParams]] = pydantic.Field(None, description='')
    ScalingTriggerProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefScalingtriggerpropertyParams]] = pydantic.Field(None, description='')
    SimpleScalingPolicyConfigurationProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefSimplescalingpolicyconfigurationpropertyParams]] = pydantic.Field(None, description='')
    VolumeSpecificationProperty: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefVolumespecificationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_emr.CfnInstanceGroupConfigDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnInstanceGroupConfigDefAutoscalingpolicypropertyParams(pydantic.BaseModel):
    constraints: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ScalingConstraintsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ScalingRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnInstanceGroupConfigDefCloudwatchalarmdefinitionpropertyParams(pydantic.BaseModel):
    comparison_operator: str = pydantic.Field(..., description='')
    metric_name: str = pydantic.Field(..., description='')
    period: typing.Union[int, float] = pydantic.Field(..., description='')
    threshold: typing.Union[int, float] = pydantic.Field(..., description='')
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_MetricDimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    evaluation_periods: typing.Union[int, float, None] = pydantic.Field(None, description='')
    namespace: typing.Optional[str] = pydantic.Field(None, description='')
    statistic: typing.Optional[str] = pydantic.Field(None, description='')
    unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInstanceGroupConfigDefConfigurationpropertyParams(pydantic.BaseModel):
    classification: typing.Optional[str] = pydantic.Field(None, description='')
    configuration_properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnInstanceGroupConfigDefEbsblockdeviceconfigpropertyParams(pydantic.BaseModel):
    volume_specification: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_VolumeSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    volumes_per_instance: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnInstanceGroupConfigDefEbsconfigurationpropertyParams(pydantic.BaseModel):
    ebs_block_device_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_EbsBlockDeviceConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ebs_optimized: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnInstanceGroupConfigDefMetricdimensionpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnInstanceGroupConfigDefScalingactionpropertyParams(pydantic.BaseModel):
    simple_scaling_policy_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_SimpleScalingPolicyConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    market: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInstanceGroupConfigDefScalingconstraintspropertyParams(pydantic.BaseModel):
    max_capacity: typing.Union[int, float] = pydantic.Field(..., description='')
    min_capacity: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnInstanceGroupConfigDefScalingrulepropertyParams(pydantic.BaseModel):
    action: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ScalingActionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    trigger: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ScalingTriggerPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInstanceGroupConfigDefScalingtriggerpropertyParams(pydantic.BaseModel):
    cloud_watch_alarm_definition: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_CloudWatchAlarmDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnInstanceGroupConfigDefSimplescalingpolicyconfigurationpropertyParams(pydantic.BaseModel):
    scaling_adjustment: typing.Union[int, float] = pydantic.Field(..., description='')
    adjustment_type: typing.Optional[str] = pydantic.Field(None, description='')
    cool_down: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnInstanceGroupConfigDefVolumespecificationpropertyParams(pydantic.BaseModel):
    size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='')
    volume_type: str = pydantic.Field(..., description='')
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='')
    throughput: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnInstanceGroupConfigDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnInstanceGroupConfigDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInstanceGroupConfigDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnInstanceGroupConfigDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInstanceGroupConfigDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnInstanceGroupConfigDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnInstanceGroupConfigDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnInstanceGroupConfigDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnInstanceGroupConfigDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnInstanceGroupConfigDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInstanceGroupConfigDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnInstanceGroupConfigDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnInstanceGroupConfigDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInstanceGroupConfigDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_emr.CfnSecurityConfiguration
class CfnSecurityConfigurationDef(BaseCfnResource):
    security_configuration: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The security configuration details in JSON format.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the security configuration.')
    _init_params: typing.ClassVar[list[str]] = ['security_configuration', 'name']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnSecurityConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_emr.CfnSecurityConfigurationDefConfig] = pydantic.Field(None)


class CfnSecurityConfigurationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_emr.CfnSecurityConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnSecurityConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSecurityConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSecurityConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSecurityConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSecurityConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSecurityConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSecurityConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSecurityConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSecurityConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSecurityConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSecurityConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnSecurityConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSecurityConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSecurityConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_emr.CfnStep
class CfnStepDef(BaseCfnResource):
    action_on_failure: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='This specifies what action to take when the cluster step fails. Possible values are ``CANCEL_AND_WAIT`` and ``CONTINUE`` .\n')
    hadoop_jar_step: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnStep_HadoopJarStepConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ``HadoopJarStepConfig`` property type specifies a job flow step consisting of a JAR file whose main function will be executed. The main function submits a job for the cluster to execute as a step on the master node, and then waits for the job to finish or fail before executing subsequent steps.\n')
    job_flow_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A string that uniquely identifies the cluster (job flow).\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the cluster step.')
    _init_params: typing.ClassVar[list[str]] = ['action_on_failure', 'hadoop_jar_step', 'job_flow_id', 'name']
    _method_names: typing.ClassVar[list[str]] = ['HadoopJarStepConfigProperty', 'KeyValueProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnStep'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_emr.CfnStepDefConfig] = pydantic.Field(None)


class CfnStepDefConfig(pydantic.BaseModel):
    HadoopJarStepConfigProperty: typing.Optional[list[models.aws_emr.CfnStepDefHadoopjarstepconfigpropertyParams]] = pydantic.Field(None, description='')
    KeyValueProperty: typing.Optional[list[models.aws_emr.CfnStepDefKeyvaluepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_emr.CfnStepDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_emr.CfnStepDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_emr.CfnStepDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_emr.CfnStepDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_emr.CfnStepDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_emr.CfnStepDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_emr.CfnStepDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_emr.CfnStepDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_emr.CfnStepDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_emr.CfnStepDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_emr.CfnStepDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_emr.CfnStepDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_emr.CfnStepDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnStepDefHadoopjarstepconfigpropertyParams(pydantic.BaseModel):
    jar: str = pydantic.Field(..., description='')
    args: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    main_class: typing.Optional[str] = pydantic.Field(None, description='')
    step_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnStep_KeyValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnStepDefKeyvaluepropertyParams(pydantic.BaseModel):
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStepDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStepDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStepDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStepDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStepDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStepDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStepDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStepDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStepDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStepDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStepDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnStepDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStepDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStepDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_emr.CfnStudio
class CfnStudioDef(BaseCfnResource):
    auth_mode: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the Studio authenticates users using IAM Identity Center or IAM.\n')
    default_s3_location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon S3 location to back up EMR Studio Workspaces and notebook files.\n')
    engine_security_group_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by ``VpcId`` .\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A descriptive name for the Amazon EMR Studio.\n')
    service_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to interoperate with other AWS services.\n')
    subnet_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by ``VpcId`` . Studio users can create a Workspace in any of the specified subnets.\n')
    vpc_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.\n')
    workspace_security_group_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Workspace security group associated with the Amazon EMR Studio. The Workspace security group allows outbound network traffic to resources in the Engine security group and to the internet.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A detailed description of the Amazon EMR Studio.\n')
    idp_auth_url: typing.Optional[str] = pydantic.Field(None, description="Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.\n")
    idp_relay_state_parameter_name: typing.Optional[str] = pydantic.Field(None, description="The name of your identity provider's ``RelayState`` parameter.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    user_role: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM role can be scoped down for each user or group using session policies. You only need to specify ``UserRole`` when you set ``AuthMode`` to ``SSO`` .')
    _init_params: typing.ClassVar[list[str]] = ['auth_mode', 'default_s3_location', 'engine_security_group_id', 'name', 'service_role', 'subnet_ids', 'vpc_id', 'workspace_security_group_id', 'description', 'idp_auth_url', 'idp_relay_state_parameter_name', 'tags', 'user_role']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnStudio'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_emr.CfnStudioDefConfig] = pydantic.Field(None)


class CfnStudioDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_emr.CfnStudioDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_emr.CfnStudioDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_emr.CfnStudioDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_emr.CfnStudioDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_emr.CfnStudioDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_emr.CfnStudioDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_emr.CfnStudioDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_emr.CfnStudioDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_emr.CfnStudioDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_emr.CfnStudioDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_emr.CfnStudioDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_emr.CfnStudioDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_emr.CfnStudioDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnStudioDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStudioDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStudioDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStudioDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStudioDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStudioDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStudioDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStudioDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStudioDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStudioDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStudioDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnStudioDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStudioDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStudioDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_emr.CfnStudioSessionMapping
class CfnStudioSessionMappingDef(BaseCfnResource):
    identity_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the user or group. For more information, see `UserName <https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName>`_ and `DisplayName <https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName>`_ in the *IAM Identity Center Identity Store API Reference* .\n')
    identity_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the identity to map to the Amazon EMR Studio is a user or a group.\n')
    session_policy_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the session policy that will be applied to the user or group. Session policies refine Studio user permissions without the need to use multiple IAM user roles. For more information, see `Create an EMR Studio user role with session policies <https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-user-role.html>`_ in the *Amazon EMR Management Guide* .\n')
    studio_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon EMR Studio to which the user or group will be mapped.')
    _init_params: typing.ClassVar[list[str]] = ['identity_name', 'identity_type', 'session_policy_arn', 'studio_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnStudioSessionMapping'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_emr.CfnStudioSessionMappingDefConfig] = pydantic.Field(None)


class CfnStudioSessionMappingDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_emr.CfnStudioSessionMappingDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnStudioSessionMappingDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStudioSessionMappingDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStudioSessionMappingDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStudioSessionMappingDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStudioSessionMappingDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStudioSessionMappingDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStudioSessionMappingDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStudioSessionMappingDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStudioSessionMappingDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStudioSessionMappingDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStudioSessionMappingDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnStudioSessionMappingDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStudioSessionMappingDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStudioSessionMappingDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_emr.CfnWALWorkspace
class CfnWALWorkspaceDef(BaseCfnResource):
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description="You can add tags when you create a new workspace. You can add, remove, or list tags from an active workspace, but you can't update tags. Instead, remove the tag and add a new one. For more information, see see `Tag your Amazon EMR WAL workspaces <https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-hbase-wal.html#emr-hbase-wal-tagging>`_ .\n")
    wal_workspace_name: typing.Optional[str] = pydantic.Field(None, description='The name of the WAL workspace.')
    _init_params: typing.ClassVar[list[str]] = ['tags', 'wal_workspace_name']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnWALWorkspace'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_emr.CfnWALWorkspaceDefConfig] = pydantic.Field(None)


class CfnWALWorkspaceDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_emr.CfnWALWorkspaceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnWALWorkspaceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWALWorkspaceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWALWorkspaceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWALWorkspaceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWALWorkspaceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWALWorkspaceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWALWorkspaceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWALWorkspaceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWALWorkspaceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWALWorkspaceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWALWorkspaceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnWALWorkspaceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWALWorkspaceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWALWorkspaceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_emr.CfnClusterProps
class CfnClusterPropsDef(BaseCfnProperty):
    instances: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnCluster_JobFlowInstancesConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A specification of the number and type of Amazon EC2 instances.\n')
    job_flow_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Also called instance profile and Amazon EC2 role. An IAM role for an Amazon EMR cluster. The Amazon EC2 instances of the cluster assume this role. The default role is ``EMR_EC2_DefaultRole`` . In order to use the default role, you must have already created it using the AWS CLI or console.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the cluster.\n')
    service_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IAM role that Amazon EMR assumes in order to access AWS resources on your behalf.\n')
    additional_info: typing.Any = pydantic.Field(None, description='A JSON string for selecting additional features.\n')
    applications: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ApplicationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The applications to install on this cluster, for example, Spark, Flink, Oozie, Zeppelin, and so on.\n')
    auto_scaling_role: typing.Optional[str] = pydantic.Field(None, description='An IAM role for automatic scaling policies. The default role is ``EMR_AutoScaling_DefaultRole`` . The IAM role provides permissions that the automatic scaling feature requires to launch and terminate Amazon EC2 instances in an instance group.\n')
    auto_termination_policy: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_AutoTerminationPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see `Control cluster termination <https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html>`_\n')
    bootstrap_actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_BootstrapActionConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of bootstrap actions to run before Hadoop starts on the cluster nodes.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Applies only to Amazon EMR releases 4.x and later. The list of configurations that are supplied to the Amazon EMR cluster.\n')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='Available only in Amazon EMR releases 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.\n')
    ebs_root_volume_size: typing.Union[int, float, None] = pydantic.Field(None, description='The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 4.x and later.\n')
    kerberos_attributes: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_KerberosAttributesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see `Use Kerberos Authentication <https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html>`_ in the *Amazon EMR Management Guide* .\n')
    log_encryption_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS KMS key used for encrypting log files. This attribute is only available with Amazon EMR 5.30.0 and later, excluding Amazon EMR 6.0.0.\n')
    log_uri: typing.Optional[str] = pydantic.Field(None, description='The path to the Amazon S3 location where logs for this cluster are stored.\n')
    managed_scaling_policy: typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_ManagedScalingPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Creates or updates a managed scaling policy for an Amazon EMR cluster. The managed scaling policy defines the limits for resources, such as Amazon EC2 instances that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration.\n')
    os_release_label: typing.Optional[str] = pydantic.Field(None, description='The Amazon Linux release specified in a cluster launch RunJobFlow request. If no Amazon Linux release was specified, the default Amazon Linux release is shown in the response.\n')
    release_label: typing.Optional[str] = pydantic.Field(None, description='The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form ``emr-x.x.x`` , where x.x.x is an Amazon EMR release version such as ``emr-5.14.0`` . For more information about Amazon EMR release versions and included application versions and features, see ` <https://docs.aws.amazon.com/emr/latest/ReleaseGuide/>`_ . The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use ``AmiVersion`` .\n')
    scale_down_behavior: typing.Optional[str] = pydantic.Field(None, description='The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. ``TERMINATE_AT_INSTANCE_HOUR`` indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. ``TERMINATE_AT_TASK_COMPLETION`` indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. ``TERMINATE_AT_TASK_COMPLETION`` is available only in Amazon EMR releases 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.\n')
    security_configuration: typing.Optional[str] = pydantic.Field(None, description='The name of the security configuration applied to the cluster.\n')
    step_concurrency_level: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the number of steps that can be executed concurrently. The default value is ``1`` . The maximum value is ``256`` .\n')
    steps: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnCluster_StepConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of steps to run.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of tags associated with a cluster.\n')
    visible_to_all_users: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether the cluster is visible to all IAM users of the AWS account associated with the cluster. If this value is set to ``true`` , all IAM users of that AWS account can view and manage the cluster if they have the proper policy permissions set. If this value is ``false`` , only the IAM user that created the cluster can view and manage it. This value can be changed using the SetVisibleToAllUsers action. .. epigraph:: When you create clusters directly through the EMR console or API, this value is set to ``true`` by default. However, for ``AWS::EMR::Cluster`` resources in CloudFormation, the default is ``false`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-cluster.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # additional_info: Any\n    # configuration_property_: emr.CfnCluster.ConfigurationProperty\n\n    cfn_cluster_props = emr.CfnClusterProps(\n        instances=emr.CfnCluster.JobFlowInstancesConfigProperty(\n            additional_master_security_groups=["additionalMasterSecurityGroups"],\n            additional_slave_security_groups=["additionalSlaveSecurityGroups"],\n            core_instance_fleet=emr.CfnCluster.InstanceFleetConfigProperty(\n                instance_type_configs=[emr.CfnCluster.InstanceTypeConfigProperty(\n                    instance_type="instanceType",\n\n                    # the properties below are optional\n                    bid_price="bidPrice",\n                    bid_price_as_percentage_of_on_demand_price=123,\n                    configurations=[emr.CfnCluster.ConfigurationProperty(\n                        classification="classification",\n                        configuration_properties={\n                            "configuration_properties_key": "configurationProperties"\n                        },\n                        configurations=[configuration_property_]\n                    )],\n                    custom_ami_id="customAmiId",\n                    ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                        ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                            volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                                size_in_gb=123,\n                                volume_type="volumeType",\n\n                                # the properties below are optional\n                                iops=123,\n                                throughput=123\n                            ),\n\n                            # the properties below are optional\n                            volumes_per_instance=123\n                        )],\n                        ebs_optimized=False\n                    ),\n                    weighted_capacity=123\n                )],\n                launch_specifications=emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty(\n                    on_demand_specification=emr.CfnCluster.OnDemandProvisioningSpecificationProperty(\n                        allocation_strategy="allocationStrategy"\n                    ),\n                    spot_specification=emr.CfnCluster.SpotProvisioningSpecificationProperty(\n                        timeout_action="timeoutAction",\n                        timeout_duration_minutes=123,\n\n                        # the properties below are optional\n                        allocation_strategy="allocationStrategy",\n                        block_duration_minutes=123\n                    )\n                ),\n                name="name",\n                target_on_demand_capacity=123,\n                target_spot_capacity=123\n            ),\n            core_instance_group=emr.CfnCluster.InstanceGroupConfigProperty(\n                instance_count=123,\n                instance_type="instanceType",\n\n                # the properties below are optional\n                auto_scaling_policy=emr.CfnCluster.AutoScalingPolicyProperty(\n                    constraints=emr.CfnCluster.ScalingConstraintsProperty(\n                        max_capacity=123,\n                        min_capacity=123\n                    ),\n                    rules=[emr.CfnCluster.ScalingRuleProperty(\n                        action=emr.CfnCluster.ScalingActionProperty(\n                            simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n                                scaling_adjustment=123,\n\n                                # the properties below are optional\n                                adjustment_type="adjustmentType",\n                                cool_down=123\n                            ),\n\n                            # the properties below are optional\n                            market="market"\n                        ),\n                        name="name",\n                        trigger=emr.CfnCluster.ScalingTriggerProperty(\n                            cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n                                comparison_operator="comparisonOperator",\n                                metric_name="metricName",\n                                period=123,\n                                threshold=123,\n\n                                # the properties below are optional\n                                dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                                    key="key",\n                                    value="value"\n                                )],\n                                evaluation_periods=123,\n                                namespace="namespace",\n                                statistic="statistic",\n                                unit="unit"\n                            )\n                        ),\n\n                        # the properties below are optional\n                        description="description"\n                    )]\n                ),\n                bid_price="bidPrice",\n                configurations=[emr.CfnCluster.ConfigurationProperty(\n                    classification="classification",\n                    configuration_properties={\n                        "configuration_properties_key": "configurationProperties"\n                    },\n                    configurations=[configuration_property_]\n                )],\n                custom_ami_id="customAmiId",\n                ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                    ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                        volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                            size_in_gb=123,\n                            volume_type="volumeType",\n\n                            # the properties below are optional\n                            iops=123,\n                            throughput=123\n                        ),\n\n                        # the properties below are optional\n                        volumes_per_instance=123\n                    )],\n                    ebs_optimized=False\n                ),\n                market="market",\n                name="name"\n            ),\n            ec2_key_name="ec2KeyName",\n            ec2_subnet_id="ec2SubnetId",\n            ec2_subnet_ids=["ec2SubnetIds"],\n            emr_managed_master_security_group="emrManagedMasterSecurityGroup",\n            emr_managed_slave_security_group="emrManagedSlaveSecurityGroup",\n            hadoop_version="hadoopVersion",\n            keep_job_flow_alive_when_no_steps=False,\n            master_instance_fleet=emr.CfnCluster.InstanceFleetConfigProperty(\n                instance_type_configs=[emr.CfnCluster.InstanceTypeConfigProperty(\n                    instance_type="instanceType",\n\n                    # the properties below are optional\n                    bid_price="bidPrice",\n                    bid_price_as_percentage_of_on_demand_price=123,\n                    configurations=[emr.CfnCluster.ConfigurationProperty(\n                        classification="classification",\n                        configuration_properties={\n                            "configuration_properties_key": "configurationProperties"\n                        },\n                        configurations=[configuration_property_]\n                    )],\n                    custom_ami_id="customAmiId",\n                    ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                        ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                            volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                                size_in_gb=123,\n                                volume_type="volumeType",\n\n                                # the properties below are optional\n                                iops=123,\n                                throughput=123\n                            ),\n\n                            # the properties below are optional\n                            volumes_per_instance=123\n                        )],\n                        ebs_optimized=False\n                    ),\n                    weighted_capacity=123\n                )],\n                launch_specifications=emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty(\n                    on_demand_specification=emr.CfnCluster.OnDemandProvisioningSpecificationProperty(\n                        allocation_strategy="allocationStrategy"\n                    ),\n                    spot_specification=emr.CfnCluster.SpotProvisioningSpecificationProperty(\n                        timeout_action="timeoutAction",\n                        timeout_duration_minutes=123,\n\n                        # the properties below are optional\n                        allocation_strategy="allocationStrategy",\n                        block_duration_minutes=123\n                    )\n                ),\n                name="name",\n                target_on_demand_capacity=123,\n                target_spot_capacity=123\n            ),\n            master_instance_group=emr.CfnCluster.InstanceGroupConfigProperty(\n                instance_count=123,\n                instance_type="instanceType",\n\n                # the properties below are optional\n                auto_scaling_policy=emr.CfnCluster.AutoScalingPolicyProperty(\n                    constraints=emr.CfnCluster.ScalingConstraintsProperty(\n                        max_capacity=123,\n                        min_capacity=123\n                    ),\n                    rules=[emr.CfnCluster.ScalingRuleProperty(\n                        action=emr.CfnCluster.ScalingActionProperty(\n                            simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n                                scaling_adjustment=123,\n\n                                # the properties below are optional\n                                adjustment_type="adjustmentType",\n                                cool_down=123\n                            ),\n\n                            # the properties below are optional\n                            market="market"\n                        ),\n                        name="name",\n                        trigger=emr.CfnCluster.ScalingTriggerProperty(\n                            cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n                                comparison_operator="comparisonOperator",\n                                metric_name="metricName",\n                                period=123,\n                                threshold=123,\n\n                                # the properties below are optional\n                                dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                                    key="key",\n                                    value="value"\n                                )],\n                                evaluation_periods=123,\n                                namespace="namespace",\n                                statistic="statistic",\n                                unit="unit"\n                            )\n                        ),\n\n                        # the properties below are optional\n                        description="description"\n                    )]\n                ),\n                bid_price="bidPrice",\n                configurations=[emr.CfnCluster.ConfigurationProperty(\n                    classification="classification",\n                    configuration_properties={\n                        "configuration_properties_key": "configurationProperties"\n                    },\n                    configurations=[configuration_property_]\n                )],\n                custom_ami_id="customAmiId",\n                ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                    ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                        volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                            size_in_gb=123,\n                            volume_type="volumeType",\n\n                            # the properties below are optional\n                            iops=123,\n                            throughput=123\n                        ),\n\n                        # the properties below are optional\n                        volumes_per_instance=123\n                    )],\n                    ebs_optimized=False\n                ),\n                market="market",\n                name="name"\n            ),\n            placement=emr.CfnCluster.PlacementTypeProperty(\n                availability_zone="availabilityZone"\n            ),\n            service_access_security_group="serviceAccessSecurityGroup",\n            task_instance_fleets=[emr.CfnCluster.InstanceFleetConfigProperty(\n                instance_type_configs=[emr.CfnCluster.InstanceTypeConfigProperty(\n                    instance_type="instanceType",\n\n                    # the properties below are optional\n                    bid_price="bidPrice",\n                    bid_price_as_percentage_of_on_demand_price=123,\n                    configurations=[emr.CfnCluster.ConfigurationProperty(\n                        classification="classification",\n                        configuration_properties={\n                            "configuration_properties_key": "configurationProperties"\n                        },\n                        configurations=[configuration_property_]\n                    )],\n                    custom_ami_id="customAmiId",\n                    ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                        ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                            volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                                size_in_gb=123,\n                                volume_type="volumeType",\n\n                                # the properties below are optional\n                                iops=123,\n                                throughput=123\n                            ),\n\n                            # the properties below are optional\n                            volumes_per_instance=123\n                        )],\n                        ebs_optimized=False\n                    ),\n                    weighted_capacity=123\n                )],\n                launch_specifications=emr.CfnCluster.InstanceFleetProvisioningSpecificationsProperty(\n                    on_demand_specification=emr.CfnCluster.OnDemandProvisioningSpecificationProperty(\n                        allocation_strategy="allocationStrategy"\n                    ),\n                    spot_specification=emr.CfnCluster.SpotProvisioningSpecificationProperty(\n                        timeout_action="timeoutAction",\n                        timeout_duration_minutes=123,\n\n                        # the properties below are optional\n                        allocation_strategy="allocationStrategy",\n                        block_duration_minutes=123\n                    )\n                ),\n                name="name",\n                target_on_demand_capacity=123,\n                target_spot_capacity=123\n            )],\n            task_instance_groups=[emr.CfnCluster.InstanceGroupConfigProperty(\n                instance_count=123,\n                instance_type="instanceType",\n\n                # the properties below are optional\n                auto_scaling_policy=emr.CfnCluster.AutoScalingPolicyProperty(\n                    constraints=emr.CfnCluster.ScalingConstraintsProperty(\n                        max_capacity=123,\n                        min_capacity=123\n                    ),\n                    rules=[emr.CfnCluster.ScalingRuleProperty(\n                        action=emr.CfnCluster.ScalingActionProperty(\n                            simple_scaling_policy_configuration=emr.CfnCluster.SimpleScalingPolicyConfigurationProperty(\n                                scaling_adjustment=123,\n\n                                # the properties below are optional\n                                adjustment_type="adjustmentType",\n                                cool_down=123\n                            ),\n\n                            # the properties below are optional\n                            market="market"\n                        ),\n                        name="name",\n                        trigger=emr.CfnCluster.ScalingTriggerProperty(\n                            cloud_watch_alarm_definition=emr.CfnCluster.CloudWatchAlarmDefinitionProperty(\n                                comparison_operator="comparisonOperator",\n                                metric_name="metricName",\n                                period=123,\n                                threshold=123,\n\n                                # the properties below are optional\n                                dimensions=[emr.CfnCluster.MetricDimensionProperty(\n                                    key="key",\n                                    value="value"\n                                )],\n                                evaluation_periods=123,\n                                namespace="namespace",\n                                statistic="statistic",\n                                unit="unit"\n                            )\n                        ),\n\n                        # the properties below are optional\n                        description="description"\n                    )]\n                ),\n                bid_price="bidPrice",\n                configurations=[emr.CfnCluster.ConfigurationProperty(\n                    classification="classification",\n                    configuration_properties={\n                        "configuration_properties_key": "configurationProperties"\n                    },\n                    configurations=[configuration_property_]\n                )],\n                custom_ami_id="customAmiId",\n                ebs_configuration=emr.CfnCluster.EbsConfigurationProperty(\n                    ebs_block_device_configs=[emr.CfnCluster.EbsBlockDeviceConfigProperty(\n                        volume_specification=emr.CfnCluster.VolumeSpecificationProperty(\n                            size_in_gb=123,\n                            volume_type="volumeType",\n\n                            # the properties below are optional\n                            iops=123,\n                            throughput=123\n                        ),\n\n                        # the properties below are optional\n                        volumes_per_instance=123\n                    )],\n                    ebs_optimized=False\n                ),\n                market="market",\n                name="name"\n            )],\n            termination_protected=False\n        ),\n        job_flow_role="jobFlowRole",\n        name="name",\n        service_role="serviceRole",\n\n        # the properties below are optional\n        additional_info=additional_info,\n        applications=[emr.CfnCluster.ApplicationProperty(\n            additional_info={\n                "additional_info_key": "additionalInfo"\n            },\n            args=["args"],\n            name="name",\n            version="version"\n        )],\n        auto_scaling_role="autoScalingRole",\n        auto_termination_policy=emr.CfnCluster.AutoTerminationPolicyProperty(\n            idle_timeout=123\n        ),\n        bootstrap_actions=[emr.CfnCluster.BootstrapActionConfigProperty(\n            name="name",\n            script_bootstrap_action=emr.CfnCluster.ScriptBootstrapActionConfigProperty(\n                path="path",\n\n                # the properties below are optional\n                args=["args"]\n            )\n        )],\n        configurations=[emr.CfnCluster.ConfigurationProperty(\n            classification="classification",\n            configuration_properties={\n                "configuration_properties_key": "configurationProperties"\n            },\n            configurations=[configuration_property_]\n        )],\n        custom_ami_id="customAmiId",\n        ebs_root_volume_size=123,\n        kerberos_attributes=emr.CfnCluster.KerberosAttributesProperty(\n            kdc_admin_password="kdcAdminPassword",\n            realm="realm",\n\n            # the properties below are optional\n            ad_domain_join_password="adDomainJoinPassword",\n            ad_domain_join_user="adDomainJoinUser",\n            cross_realm_trust_principal_password="crossRealmTrustPrincipalPassword"\n        ),\n        log_encryption_kms_key_id="logEncryptionKmsKeyId",\n        log_uri="logUri",\n        managed_scaling_policy=emr.CfnCluster.ManagedScalingPolicyProperty(\n            compute_limits=emr.CfnCluster.ComputeLimitsProperty(\n                maximum_capacity_units=123,\n                minimum_capacity_units=123,\n                unit_type="unitType",\n\n                # the properties below are optional\n                maximum_core_capacity_units=123,\n                maximum_on_demand_capacity_units=123\n            )\n        ),\n        os_release_label="osReleaseLabel",\n        release_label="releaseLabel",\n        scale_down_behavior="scaleDownBehavior",\n        security_configuration="securityConfiguration",\n        step_concurrency_level=123,\n        steps=[emr.CfnCluster.StepConfigProperty(\n            hadoop_jar_step=emr.CfnCluster.HadoopJarStepConfigProperty(\n                jar="jar",\n\n                # the properties below are optional\n                args=["args"],\n                main_class="mainClass",\n                step_properties=[emr.CfnCluster.KeyValueProperty(\n                    key="key",\n                    value="value"\n                )]\n            ),\n            name="name",\n\n            # the properties below are optional\n            action_on_failure="actionOnFailure"\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        visible_to_all_users=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instances', 'job_flow_role', 'name', 'service_role', 'additional_info', 'applications', 'auto_scaling_role', 'auto_termination_policy', 'bootstrap_actions', 'configurations', 'custom_ami_id', 'ebs_root_volume_size', 'kerberos_attributes', 'log_encryption_kms_key_id', 'log_uri', 'managed_scaling_policy', 'os_release_label', 'release_label', 'scale_down_behavior', 'security_configuration', 'step_concurrency_level', 'steps', 'tags', 'visible_to_all_users']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnClusterProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceFleetConfigProps
class CfnInstanceFleetConfigPropsDef(BaseCfnProperty):
    cluster_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the EMR cluster.\n')
    instance_fleet_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The node type that the instance fleet hosts. *Allowed Values* : TASK\n')
    instance_type_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_InstanceTypeConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='``InstanceTypeConfigs`` determine the EC2 instances that Amazon EMR attempts to provision to fulfill On-Demand and Spot target capacities. .. epigraph:: The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.\n')
    launch_specifications: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceFleetConfig_InstanceFleetProvisioningSpecificationsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The launch specification for the instance fleet.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The friendly name of the instance fleet.\n')
    target_on_demand_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by ``InstanceTypeConfig`` . Each instance configuration has a specified ``WeightedCapacity`` . When an On-Demand instance is provisioned, the ``WeightedCapacity`` units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a ``WeightedCapacity`` of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. .. epigraph:: If not specified or set to 0, only Spot instances are provisioned for the instance fleet using ``TargetSpotCapacity`` . At least one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` should be greater than 0. For a master instance fleet, only one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` can be specified, and its value must be 1.\n')
    target_spot_capacity: typing.Union[int, float, None] = pydantic.Field(None, description='The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by ``InstanceTypeConfig`` . Each instance configuration has a specified ``WeightedCapacity`` . When a Spot instance is provisioned, the ``WeightedCapacity`` units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a ``WeightedCapacity`` of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. .. epigraph:: If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` should be greater than 0. For a master instance fleet, only one of ``TargetSpotCapacity`` and ``TargetOnDemandCapacity`` can be specified, and its value must be 1.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-instancefleetconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnInstanceFleetConfig.ConfigurationProperty\n\n    cfn_instance_fleet_config_props = emr.CfnInstanceFleetConfigProps(\n        cluster_id="clusterId",\n        instance_fleet_type="instanceFleetType",\n\n        # the properties below are optional\n        instance_type_configs=[emr.CfnInstanceFleetConfig.InstanceTypeConfigProperty(\n            instance_type="instanceType",\n\n            # the properties below are optional\n            bid_price="bidPrice",\n            bid_price_as_percentage_of_on_demand_price=123,\n            configurations=[emr.CfnInstanceFleetConfig.ConfigurationProperty(\n                classification="classification",\n                configuration_properties={\n                    "configuration_properties_key": "configurationProperties"\n                },\n                configurations=[configuration_property_]\n            )],\n            custom_ami_id="customAmiId",\n            ebs_configuration=emr.CfnInstanceFleetConfig.EbsConfigurationProperty(\n                ebs_block_device_configs=[emr.CfnInstanceFleetConfig.EbsBlockDeviceConfigProperty(\n                    volume_specification=emr.CfnInstanceFleetConfig.VolumeSpecificationProperty(\n                        size_in_gb=123,\n                        volume_type="volumeType",\n\n                        # the properties below are optional\n                        iops=123,\n                        throughput=123\n                    ),\n\n                    # the properties below are optional\n                    volumes_per_instance=123\n                )],\n                ebs_optimized=False\n            ),\n            weighted_capacity=123\n        )],\n        launch_specifications=emr.CfnInstanceFleetConfig.InstanceFleetProvisioningSpecificationsProperty(\n            on_demand_specification=emr.CfnInstanceFleetConfig.OnDemandProvisioningSpecificationProperty(\n                allocation_strategy="allocationStrategy"\n            ),\n            spot_specification=emr.CfnInstanceFleetConfig.SpotProvisioningSpecificationProperty(\n                timeout_action="timeoutAction",\n                timeout_duration_minutes=123,\n\n                # the properties below are optional\n                allocation_strategy="allocationStrategy",\n                block_duration_minutes=123\n            )\n        ),\n        name="name",\n        target_on_demand_capacity=123,\n        target_spot_capacity=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_id', 'instance_fleet_type', 'instance_type_configs', 'launch_specifications', 'name', 'target_on_demand_capacity', 'target_spot_capacity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceFleetConfigProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnInstanceGroupConfigProps
class CfnInstanceGroupConfigPropsDef(BaseCfnProperty):
    instance_count: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Target number of instances for the instance group.\n')
    instance_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The role of the instance group in the cluster. *Allowed Values* : TASK\n')
    instance_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon EC2 instance type for all instances in the instance group.\n')
    job_flow_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of an Amazon EMR cluster that you want to associate this instance group with.\n')
    auto_scaling_policy: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_AutoScalingPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AutoScalingPolicy`` is a subproperty of ``InstanceGroupConfig`` . ``AutoScalingPolicy`` defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. For more information, see `Using Automatic Scaling in Amazon EMR <https://docs.aws.amazon.com//emr/latest/ManagementGuide/emr-automatic-scaling.html>`_ in the *Amazon EMR Management Guide* .\n')
    bid_price: typing.Optional[str] = pydantic.Field(None, description='If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify ``OnDemandPrice`` to set the amount equal to the On-Demand price, or specify an amount in USD.\n')
    configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_ConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='.. epigraph:: Amazon EMR releases 4.x or later. The list of configurations supplied for an Amazon EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).\n')
    custom_ami_id: typing.Optional[str] = pydantic.Field(None, description='The custom AMI ID to use for the provisioned instance group.\n')
    ebs_configuration: typing.Union[models.UnsupportedResource, models.aws_emr.CfnInstanceGroupConfig_EbsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``EbsConfiguration`` determines the EBS volumes to attach to EMR cluster instances.\n')
    market: typing.Optional[str] = pydantic.Field(None, description='Market type of the Amazon EC2 instances used to create a cluster node.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='Friendly name given to the instance group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-instancegroupconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # configuration_property_: emr.CfnInstanceGroupConfig.ConfigurationProperty\n\n    cfn_instance_group_config_props = emr.CfnInstanceGroupConfigProps(\n        instance_count=123,\n        instance_role="instanceRole",\n        instance_type="instanceType",\n        job_flow_id="jobFlowId",\n\n        # the properties below are optional\n        auto_scaling_policy=emr.CfnInstanceGroupConfig.AutoScalingPolicyProperty(\n            constraints=emr.CfnInstanceGroupConfig.ScalingConstraintsProperty(\n                max_capacity=123,\n                min_capacity=123\n            ),\n            rules=[emr.CfnInstanceGroupConfig.ScalingRuleProperty(\n                action=emr.CfnInstanceGroupConfig.ScalingActionProperty(\n                    simple_scaling_policy_configuration=emr.CfnInstanceGroupConfig.SimpleScalingPolicyConfigurationProperty(\n                        scaling_adjustment=123,\n\n                        # the properties below are optional\n                        adjustment_type="adjustmentType",\n                        cool_down=123\n                    ),\n\n                    # the properties below are optional\n                    market="market"\n                ),\n                name="name",\n                trigger=emr.CfnInstanceGroupConfig.ScalingTriggerProperty(\n                    cloud_watch_alarm_definition=emr.CfnInstanceGroupConfig.CloudWatchAlarmDefinitionProperty(\n                        comparison_operator="comparisonOperator",\n                        metric_name="metricName",\n                        period=123,\n                        threshold=123,\n\n                        # the properties below are optional\n                        dimensions=[emr.CfnInstanceGroupConfig.MetricDimensionProperty(\n                            key="key",\n                            value="value"\n                        )],\n                        evaluation_periods=123,\n                        namespace="namespace",\n                        statistic="statistic",\n                        unit="unit"\n                    )\n                ),\n\n                # the properties below are optional\n                description="description"\n            )]\n        ),\n        bid_price="bidPrice",\n        configurations=[emr.CfnInstanceGroupConfig.ConfigurationProperty(\n            classification="classification",\n            configuration_properties={\n                "configuration_properties_key": "configurationProperties"\n            },\n            configurations=[configuration_property_]\n        )],\n        custom_ami_id="customAmiId",\n        ebs_configuration=emr.CfnInstanceGroupConfig.EbsConfigurationProperty(\n            ebs_block_device_configs=[emr.CfnInstanceGroupConfig.EbsBlockDeviceConfigProperty(\n                volume_specification=emr.CfnInstanceGroupConfig.VolumeSpecificationProperty(\n                    size_in_gb=123,\n                    volume_type="volumeType",\n\n                    # the properties below are optional\n                    iops=123,\n                    throughput=123\n                ),\n\n                # the properties below are optional\n                volumes_per_instance=123\n            )],\n            ebs_optimized=False\n        ),\n        market="market",\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_role', 'instance_type', 'job_flow_id', 'auto_scaling_policy', 'bid_price', 'configurations', 'custom_ami_id', 'ebs_configuration', 'market', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnInstanceGroupConfigProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnSecurityConfigurationProps
class CfnSecurityConfigurationPropsDef(BaseCfnProperty):
    security_configuration: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The security configuration details in JSON format.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the security configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-securityconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    # security_configuration: Any\n\n    cfn_security_configuration_props = emr.CfnSecurityConfigurationProps(\n        security_configuration=security_configuration,\n\n        # the properties below are optional\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_configuration', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnSecurityConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnStepProps
class CfnStepPropsDef(BaseCfnProperty):
    action_on_failure: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='This specifies what action to take when the cluster step fails. Possible values are ``CANCEL_AND_WAIT`` and ``CONTINUE`` .\n')
    hadoop_jar_step: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_emr.CfnStep_HadoopJarStepConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ``HadoopJarStepConfig`` property type specifies a job flow step consisting of a JAR file whose main function will be executed. The main function submits a job for the cluster to execute as a step on the master node, and then waits for the job to finish or fail before executing subsequent steps.\n')
    job_flow_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A string that uniquely identifies the cluster (job flow).\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the cluster step.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-step.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    cfn_step_props = emr.CfnStepProps(\n        action_on_failure="actionOnFailure",\n        hadoop_jar_step=emr.CfnStep.HadoopJarStepConfigProperty(\n            jar="jar",\n\n            # the properties below are optional\n            args=["args"],\n            main_class="mainClass",\n            step_properties=[emr.CfnStep.KeyValueProperty(\n                key="key",\n                value="value"\n            )]\n        ),\n        job_flow_id="jobFlowId",\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action_on_failure', 'hadoop_jar_step', 'job_flow_id', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnStepProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnStudioProps
class CfnStudioPropsDef(BaseCfnProperty):
    auth_mode: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the Studio authenticates users using IAM Identity Center or IAM.\n')
    default_s3_location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon S3 location to back up EMR Studio Workspaces and notebook files.\n')
    engine_security_group_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by ``VpcId`` .\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A descriptive name for the Amazon EMR Studio.\n')
    service_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to interoperate with other AWS services.\n')
    subnet_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by ``VpcId`` . Studio users can create a Workspace in any of the specified subnets.\n')
    vpc_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.\n')
    workspace_security_group_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Workspace security group associated with the Amazon EMR Studio. The Workspace security group allows outbound network traffic to resources in the Engine security group and to the internet.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A detailed description of the Amazon EMR Studio.\n')
    idp_auth_url: typing.Optional[str] = pydantic.Field(None, description="Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.\n")
    idp_relay_state_parameter_name: typing.Optional[str] = pydantic.Field(None, description="The name of your identity provider's ``RelayState`` parameter.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    user_role: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM role can be scoped down for each user or group using session policies. You only need to specify ``UserRole`` when you set ``AuthMode`` to ``SSO`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-studio.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    cfn_studio_props = emr.CfnStudioProps(\n        auth_mode="authMode",\n        default_s3_location="defaultS3Location",\n        engine_security_group_id="engineSecurityGroupId",\n        name="name",\n        service_role="serviceRole",\n        subnet_ids=["subnetIds"],\n        vpc_id="vpcId",\n        workspace_security_group_id="workspaceSecurityGroupId",\n\n        # the properties below are optional\n        description="description",\n        idp_auth_url="idpAuthUrl",\n        idp_relay_state_parameter_name="idpRelayStateParameterName",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        user_role="userRole"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auth_mode', 'default_s3_location', 'engine_security_group_id', 'name', 'service_role', 'subnet_ids', 'vpc_id', 'workspace_security_group_id', 'description', 'idp_auth_url', 'idp_relay_state_parameter_name', 'tags', 'user_role']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnStudioProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnStudioSessionMappingProps
class CfnStudioSessionMappingPropsDef(BaseCfnProperty):
    identity_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the user or group. For more information, see `UserName <https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName>`_ and `DisplayName <https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName>`_ in the *IAM Identity Center Identity Store API Reference* .\n')
    identity_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the identity to map to the Amazon EMR Studio is a user or a group.\n')
    session_policy_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the session policy that will be applied to the user or group. Session policies refine Studio user permissions without the need to use multiple IAM user roles. For more information, see `Create an EMR Studio user role with session policies <https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-user-role.html>`_ in the *Amazon EMR Management Guide* .\n')
    studio_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the Amazon EMR Studio to which the user or group will be mapped.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-studiosessionmapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    cfn_studio_session_mapping_props = emr.CfnStudioSessionMappingProps(\n        identity_name="identityName",\n        identity_type="identityType",\n        session_policy_arn="sessionPolicyArn",\n        studio_id="studioId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['identity_name', 'identity_type', 'session_policy_arn', 'studio_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnStudioSessionMappingProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emr.CfnWALWorkspaceProps
class CfnWALWorkspacePropsDef(BaseCfnProperty):
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description="You can add tags when you create a new workspace. You can add, remove, or list tags from an active workspace, but you can't update tags. Instead, remove the tag and add a new one. For more information, see see `Tag your Amazon EMR WAL workspaces <https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-hbase-wal.html#emr-hbase-wal-tagging>`_ .\n")
    wal_workspace_name: typing.Optional[str] = pydantic.Field(None, description='The name of the WAL workspace.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-walworkspace.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emr as emr\n\n    cfn_wALWorkspace_props = emr.CfnWALWorkspaceProps(\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        wal_workspace_name="walWorkspaceName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['tags', 'wal_workspace_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emr.CfnWALWorkspaceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnCluster_ApplicationProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_ApplicationPropertyDef]] = pydantic.Field(None)
    CfnCluster_AutoScalingPolicyProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_AutoScalingPolicyPropertyDef]] = pydantic.Field(None)
    CfnCluster_AutoTerminationPolicyProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_AutoTerminationPolicyPropertyDef]] = pydantic.Field(None)
    CfnCluster_BootstrapActionConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_BootstrapActionConfigPropertyDef]] = pydantic.Field(None)
    CfnCluster_CloudWatchAlarmDefinitionProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_CloudWatchAlarmDefinitionPropertyDef]] = pydantic.Field(None)
    CfnCluster_ComputeLimitsProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_ComputeLimitsPropertyDef]] = pydantic.Field(None)
    CfnCluster_ConfigurationProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_ConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCluster_EbsBlockDeviceConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_EbsBlockDeviceConfigPropertyDef]] = pydantic.Field(None)
    CfnCluster_EbsConfigurationProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_EbsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCluster_HadoopJarStepConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_HadoopJarStepConfigPropertyDef]] = pydantic.Field(None)
    CfnCluster_InstanceFleetConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_InstanceFleetConfigPropertyDef]] = pydantic.Field(None)
    CfnCluster_InstanceFleetProvisioningSpecificationsProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_InstanceFleetProvisioningSpecificationsPropertyDef]] = pydantic.Field(None)
    CfnCluster_InstanceGroupConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_InstanceGroupConfigPropertyDef]] = pydantic.Field(None)
    CfnCluster_InstanceTypeConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_InstanceTypeConfigPropertyDef]] = pydantic.Field(None)
    CfnCluster_JobFlowInstancesConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_JobFlowInstancesConfigPropertyDef]] = pydantic.Field(None)
    CfnCluster_KerberosAttributesProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_KerberosAttributesPropertyDef]] = pydantic.Field(None)
    CfnCluster_KeyValueProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_KeyValuePropertyDef]] = pydantic.Field(None)
    CfnCluster_ManagedScalingPolicyProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_ManagedScalingPolicyPropertyDef]] = pydantic.Field(None)
    CfnCluster_MetricDimensionProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_MetricDimensionPropertyDef]] = pydantic.Field(None)
    CfnCluster_OnDemandProvisioningSpecificationProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_OnDemandProvisioningSpecificationPropertyDef]] = pydantic.Field(None)
    CfnCluster_PlacementTypeProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_PlacementTypePropertyDef]] = pydantic.Field(None)
    CfnCluster_ScalingActionProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_ScalingActionPropertyDef]] = pydantic.Field(None)
    CfnCluster_ScalingConstraintsProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_ScalingConstraintsPropertyDef]] = pydantic.Field(None)
    CfnCluster_ScalingRuleProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_ScalingRulePropertyDef]] = pydantic.Field(None)
    CfnCluster_ScalingTriggerProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_ScalingTriggerPropertyDef]] = pydantic.Field(None)
    CfnCluster_ScriptBootstrapActionConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_ScriptBootstrapActionConfigPropertyDef]] = pydantic.Field(None)
    CfnCluster_SimpleScalingPolicyConfigurationProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_SimpleScalingPolicyConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCluster_SpotProvisioningSpecificationProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_SpotProvisioningSpecificationPropertyDef]] = pydantic.Field(None)
    CfnCluster_StepConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_StepConfigPropertyDef]] = pydantic.Field(None)
    CfnCluster_VolumeSpecificationProperty: typing.Optional[dict[str, models.aws_emr.CfnCluster_VolumeSpecificationPropertyDef]] = pydantic.Field(None)
    CfnInstanceFleetConfig_ConfigurationProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfig_ConfigurationPropertyDef]] = pydantic.Field(None)
    CfnInstanceFleetConfig_EbsBlockDeviceConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfig_EbsBlockDeviceConfigPropertyDef]] = pydantic.Field(None)
    CfnInstanceFleetConfig_EbsConfigurationProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfig_EbsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnInstanceFleetConfig_InstanceFleetProvisioningSpecificationsProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfig_InstanceFleetProvisioningSpecificationsPropertyDef]] = pydantic.Field(None)
    CfnInstanceFleetConfig_InstanceTypeConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfig_InstanceTypeConfigPropertyDef]] = pydantic.Field(None)
    CfnInstanceFleetConfig_OnDemandProvisioningSpecificationProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfig_OnDemandProvisioningSpecificationPropertyDef]] = pydantic.Field(None)
    CfnInstanceFleetConfig_SpotProvisioningSpecificationProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfig_SpotProvisioningSpecificationPropertyDef]] = pydantic.Field(None)
    CfnInstanceFleetConfig_VolumeSpecificationProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfig_VolumeSpecificationPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_AutoScalingPolicyProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_AutoScalingPolicyPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_CloudWatchAlarmDefinitionProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_CloudWatchAlarmDefinitionPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_ConfigurationProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_ConfigurationPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_EbsBlockDeviceConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_EbsBlockDeviceConfigPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_EbsConfigurationProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_EbsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_MetricDimensionProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_MetricDimensionPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_ScalingActionProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_ScalingActionPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_ScalingConstraintsProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_ScalingConstraintsPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_ScalingRuleProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_ScalingRulePropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_ScalingTriggerProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_ScalingTriggerPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_SimpleScalingPolicyConfigurationProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_SimpleScalingPolicyConfigurationPropertyDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig_VolumeSpecificationProperty: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfig_VolumeSpecificationPropertyDef]] = pydantic.Field(None)
    CfnStep_HadoopJarStepConfigProperty: typing.Optional[dict[str, models.aws_emr.CfnStep_HadoopJarStepConfigPropertyDef]] = pydantic.Field(None)
    CfnStep_KeyValueProperty: typing.Optional[dict[str, models.aws_emr.CfnStep_KeyValuePropertyDef]] = pydantic.Field(None)
    CfnCluster: typing.Optional[dict[str, models.aws_emr.CfnClusterDef]] = pydantic.Field(None)
    CfnInstanceFleetConfig: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfigDef]] = pydantic.Field(None)
    CfnInstanceGroupConfig: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfigDef]] = pydantic.Field(None)
    CfnSecurityConfiguration: typing.Optional[dict[str, models.aws_emr.CfnSecurityConfigurationDef]] = pydantic.Field(None)
    CfnStep: typing.Optional[dict[str, models.aws_emr.CfnStepDef]] = pydantic.Field(None)
    CfnStudio: typing.Optional[dict[str, models.aws_emr.CfnStudioDef]] = pydantic.Field(None)
    CfnStudioSessionMapping: typing.Optional[dict[str, models.aws_emr.CfnStudioSessionMappingDef]] = pydantic.Field(None)
    CfnWALWorkspace: typing.Optional[dict[str, models.aws_emr.CfnWALWorkspaceDef]] = pydantic.Field(None)
    CfnClusterProps: typing.Optional[dict[str, models.aws_emr.CfnClusterPropsDef]] = pydantic.Field(None)
    CfnInstanceFleetConfigProps: typing.Optional[dict[str, models.aws_emr.CfnInstanceFleetConfigPropsDef]] = pydantic.Field(None)
    CfnInstanceGroupConfigProps: typing.Optional[dict[str, models.aws_emr.CfnInstanceGroupConfigPropsDef]] = pydantic.Field(None)
    CfnSecurityConfigurationProps: typing.Optional[dict[str, models.aws_emr.CfnSecurityConfigurationPropsDef]] = pydantic.Field(None)
    CfnStepProps: typing.Optional[dict[str, models.aws_emr.CfnStepPropsDef]] = pydantic.Field(None)
    CfnStudioProps: typing.Optional[dict[str, models.aws_emr.CfnStudioPropsDef]] = pydantic.Field(None)
    CfnStudioSessionMappingProps: typing.Optional[dict[str, models.aws_emr.CfnStudioSessionMappingPropsDef]] = pydantic.Field(None)
    CfnWALWorkspaceProps: typing.Optional[dict[str, models.aws_emr.CfnWALWorkspacePropsDef]] = pydantic.Field(None)
    ...

import models
