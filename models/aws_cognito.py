from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_cognito.BooleanAttribute
class BooleanAttributeDef(BaseClass):
    mutable: typing.Optional[bool] = pydantic.Field(None, description="Specifies whether the value of the attribute can be changed. For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. Default: false")
    _init_params: typing.ClassVar[list[str]] = ['mutable']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.BooleanAttribute'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.BooleanAttributeDefConfig] = pydantic.Field(None)


class BooleanAttributeDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cognito.BooleanAttributeDefBindParams]] = pydantic.Field(None, description='Bind this custom attribute type to the values as expected by CloudFormation.')

class BooleanAttributeDefBindParams(pydantic.BaseModel):
    ...


#  autogenerated from aws_cdk.aws_cognito.ClientAttributes
class ClientAttributesDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = ['attributes', 'with_custom_attributes', 'with_standard_attributes']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.ClientAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.ClientAttributesDefConfig] = pydantic.Field(None)


class ClientAttributesDefConfig(pydantic.BaseModel):
    attributes: typing.Optional[bool] = pydantic.Field(None, description='The list of attributes represented by this ClientAttributes.')
    with_custom_attributes: typing.Optional[list[models.aws_cognito.ClientAttributesDefWithCustomAttributesParams]] = pydantic.Field(None, description='Creates a custom ClientAttributes with the specified attributes.')
    with_standard_attributes: typing.Optional[list[models.aws_cognito.ClientAttributesDefWithStandardAttributesParams]] = pydantic.Field(None, description='Creates a custom ClientAttributes with the specified attributes.')

class ClientAttributesDefWithCustomAttributesParams(pydantic.BaseModel):
    attributes: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_cognito.ClientAttributesDefConfig]] = pydantic.Field(None)
    ...

class ClientAttributesDefWithStandardAttributesParams(pydantic.BaseModel):
    address: typing.Optional[bool] = pydantic.Field(None, description="The user's postal address. Default: false\n")
    birthdate: typing.Optional[bool] = pydantic.Field(None, description="The user's birthday, represented as an ISO 8601:2004 format. Default: false\n")
    email: typing.Optional[bool] = pydantic.Field(None, description="The user's e-mail address, represented as an RFC 5322 [RFC5322] addr-spec. Default: false\n")
    email_verified: typing.Optional[bool] = pydantic.Field(None, description='Whether the email address has been verified. Default: false\n')
    family_name: typing.Optional[bool] = pydantic.Field(None, description='The surname or last name of the user. Default: false\n')
    fullname: typing.Optional[bool] = pydantic.Field(None, description="The user's full name in displayable form, including all name parts, titles and suffixes. Default: false\n")
    gender: typing.Optional[bool] = pydantic.Field(None, description="The user's gender. Default: false\n")
    given_name: typing.Optional[bool] = pydantic.Field(None, description="The user's first name or give name. Default: false\n")
    last_update_time: typing.Optional[bool] = pydantic.Field(None, description="The time, the user's information was last updated. Default: false\n")
    locale: typing.Optional[bool] = pydantic.Field(None, description="The user's locale, represented as a BCP47 [RFC5646] language tag. Default: false\n")
    middle_name: typing.Optional[bool] = pydantic.Field(None, description="The user's middle name. Default: false\n")
    nickname: typing.Optional[bool] = pydantic.Field(None, description="The user's nickname or casual name. Default: false\n")
    phone_number: typing.Optional[bool] = pydantic.Field(None, description="The user's telephone number. Default: false\n")
    phone_number_verified: typing.Optional[bool] = pydantic.Field(None, description='Whether the phone number has been verified. Default: false\n')
    preferred_username: typing.Optional[bool] = pydantic.Field(None, description="The user's preffered username, different from the immutable user name. Default: false\n")
    profile_page: typing.Optional[bool] = pydantic.Field(None, description="The URL to the user's profile page. Default: false\n")
    profile_picture: typing.Optional[bool] = pydantic.Field(None, description="The URL to the user's profile picture. Default: false\n")
    timezone: typing.Optional[bool] = pydantic.Field(None, description="The user's time zone. Default: false\n")
    website: typing.Optional[bool] = pydantic.Field(None, description="The URL to the user's web page or blog. Default: false")
    return_config: typing.Optional[list[models.aws_cognito.ClientAttributesDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cognito.DateTimeAttribute
class DateTimeAttributeDef(BaseClass):
    mutable: typing.Optional[bool] = pydantic.Field(None, description="Specifies whether the value of the attribute can be changed. For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. Default: false")
    _init_params: typing.ClassVar[list[str]] = ['mutable']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.DateTimeAttribute'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.DateTimeAttributeDefConfig] = pydantic.Field(None)


class DateTimeAttributeDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cognito.DateTimeAttributeDefBindParams]] = pydantic.Field(None, description='Bind this custom attribute type to the values as expected by CloudFormation.')

class DateTimeAttributeDefBindParams(pydantic.BaseModel):
    ...


#  autogenerated from aws_cdk.aws_cognito.NumberAttribute
class NumberAttributeDef(BaseClass):
    max: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum value of this attribute. Default: - no maximum value')
    min: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum value of this attribute. Default: - no minimum value\n')
    mutable: typing.Optional[bool] = pydantic.Field(None, description="Specifies whether the value of the attribute can be changed. For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. Default: false")
    _init_params: typing.ClassVar[list[str]] = ['max', 'min', 'mutable']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.NumberAttribute'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.NumberAttributeDefConfig] = pydantic.Field(None)


class NumberAttributeDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cognito.NumberAttributeDefBindParams]] = pydantic.Field(None, description='Bind this custom attribute type to the values as expected by CloudFormation.')

class NumberAttributeDefBindParams(pydantic.BaseModel):
    ...


#  autogenerated from aws_cdk.aws_cognito.OAuthScope
class OAuthScopeDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['custom', 'resource_server']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.OAuthScope'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.OAuthScopeDefConfig] = pydantic.Field(None)


class OAuthScopeDefConfig(pydantic.BaseModel):
    custom: typing.Optional[list[models.aws_cognito.OAuthScopeDefCustomParams]] = pydantic.Field(None, description="Custom scope is one that you define for your own resource server in the Resource Servers.\nThe format is 'resource-server-identifier/scope'.")
    resource_server: typing.Optional[list[models.aws_cognito.OAuthScopeDefResourceServerParams]] = pydantic.Field(None, description="Adds a custom scope that's tied to a resource server in your stack.")

class OAuthScopeDefCustomParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='-\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-define-resource-servers.html\n')
    return_config: typing.Optional[list[models.aws_cognito.OAuthScopeDefConfig]] = pydantic.Field(None)
    ...

class OAuthScopeDefResourceServerParams(pydantic.BaseModel):
    server: typing.Union[models.aws_cognito.UserPoolResourceServerDef] = pydantic.Field(..., description='-\n')
    scope: models.aws_cognito.ResourceServerScopeDef = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_cognito.OAuthScopeDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cognito.ProviderAttribute
class ProviderAttributeDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['other']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.ProviderAttribute'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.ProviderAttributeDefConfig] = pydantic.Field(None)


class ProviderAttributeDefConfig(pydantic.BaseModel):
    other: typing.Optional[list[models.aws_cognito.ProviderAttributeDefOtherParams]] = pydantic.Field(None, description='Use this to specify an attribute from the identity provider that is not pre-defined in the CDK.')

class ProviderAttributeDefOtherParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='the attribute value string as recognized by the provider.')
    return_config: typing.Optional[list[models.aws_cognito.ProviderAttributeDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cognito.ResourceServerScope
class ResourceServerScopeDef(BaseClass):
    scope_description: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A description of the scope.')
    scope_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the scope.')
    _init_params: typing.ClassVar[list[str]] = ['scope_description', 'scope_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.ResourceServerScope'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.StringAttribute
class StringAttributeDef(BaseClass):
    max_len: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum length of this attribute. Default: 2048')
    min_len: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum length of this attribute. Default: 0\n')
    mutable: typing.Optional[bool] = pydantic.Field(None, description="Specifies whether the value of the attribute can be changed. For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. Default: false")
    _init_params: typing.ClassVar[list[str]] = ['max_len', 'min_len', 'mutable']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.StringAttribute'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.StringAttributeDefConfig] = pydantic.Field(None)


class StringAttributeDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cognito.StringAttributeDefBindParams]] = pydantic.Field(None, description='Bind this custom attribute type to the values as expected by CloudFormation.')

class StringAttributeDefBindParams(pydantic.BaseModel):
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolClientIdentityProvider
class UserPoolClientIdentityProviderDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['custom']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolClientIdentityProvider'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolClientIdentityProviderDefConfig] = pydantic.Field(None)


class UserPoolClientIdentityProviderDefConfig(pydantic.BaseModel):
    custom: typing.Optional[list[models.aws_cognito.UserPoolClientIdentityProviderDefCustomParams]] = pydantic.Field(None, description='Specify a provider not yet supported by the CDK.')

class UserPoolClientIdentityProviderDefCustomParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='name of the identity provider as recognized by CloudFormation property ``SupportedIdentityProviders``.')
    return_config: typing.Optional[list[models.aws_cognito.UserPoolClientIdentityProviderDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolEmail
class UserPoolEmailDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['with_cognito', 'with_ses']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolEmail'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolEmailDefConfig] = pydantic.Field(None)


class UserPoolEmailDefConfig(pydantic.BaseModel):
    with_cognito: typing.Optional[list[models.aws_cognito.UserPoolEmailDefWithCognitoParams]] = pydantic.Field(None, description='Send email using Cognito.')
    with_ses: typing.Optional[list[models.aws_cognito.UserPoolEmailDefWithSesParams]] = pydantic.Field(None, description='Send email using SES.')

class UserPoolEmailDefWithCognitoParams(pydantic.BaseModel):
    reply_to: typing.Optional[str] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.aws_cognito.UserPoolEmailDefConfig]] = pydantic.Field(None)
    ...

class UserPoolEmailDefWithSesParams(pydantic.BaseModel):
    from_email: str = pydantic.Field(..., description='The verified Amazon SES email address that Cognito should use to send emails. The email address used must be a verified email address in Amazon SES and must be configured to allow Cognito to send emails.\n')
    configuration_set_name: typing.Optional[str] = pydantic.Field(None, description='The name of a configuration set in Amazon SES that should be applied to emails sent via Cognito. Default: - no configuration set\n')
    from_name: typing.Optional[str] = pydantic.Field(None, description="An optional name that should be used as the sender's name along with the email. Default: - no name\n")
    reply_to: typing.Optional[str] = pydantic.Field(None, description='The destination to which the receiver of the email should reply to. Default: - same as the fromEmail\n')
    ses_region: typing.Optional[str] = pydantic.Field(None, description='Required if the UserPool region is different than the SES region. If sending emails with a Amazon SES verified email address, and the region that SES is configured is different than the region in which the UserPool is deployed, you must specify that region here. Default: - The same region as the Cognito UserPool\n')
    ses_verified_domain: typing.Optional[str] = pydantic.Field(None, description='SES Verified custom domain to be used to verify the identity. Default: - no domain')
    return_config: typing.Optional[list[models.aws_cognito.UserPoolEmailDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProvider
class UserPoolIdentityProviderDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['from_provider_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProvider'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_provider_name']
    ...


    from_provider_name: typing.Optional[models.aws_cognito.UserPoolIdentityProviderDefFromProviderNameParams] = pydantic.Field(None, description='Import an existing UserPoolIdentityProvider.')

class UserPoolIdentityProviderDefFromProviderNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    provider_name: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderSamlMetadata
class UserPoolIdentityProviderSamlMetadataDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['file', 'url']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderSamlMetadata'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderSamlMetadataDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderSamlMetadataDefConfig(pydantic.BaseModel):
    file: typing.Optional[list[models.aws_cognito.UserPoolIdentityProviderSamlMetadataDefFileParams]] = pydantic.Field(None, description='Specify SAML metadata via the contents of a file.')
    url: typing.Optional[list[models.aws_cognito.UserPoolIdentityProviderSamlMetadataDefUrlParams]] = pydantic.Field(None, description='Specify SAML metadata via a URL.')

class UserPoolIdentityProviderSamlMetadataDefFileParams(pydantic.BaseModel):
    file_content: str = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_cognito.UserPoolIdentityProviderSamlMetadataDefConfig]] = pydantic.Field(None)
    ...

class UserPoolIdentityProviderSamlMetadataDefUrlParams(pydantic.BaseModel):
    url: str = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_cognito.UserPoolIdentityProviderSamlMetadataDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolOperation
class UserPoolOperationDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['of']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolOperation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolOperationDefConfig] = pydantic.Field(None)


class UserPoolOperationDefConfig(pydantic.BaseModel):
    of: typing.Optional[list[models.aws_cognito.UserPoolOperationDefOfParams]] = pydantic.Field(None, description='A custom user pool operation.')

class UserPoolOperationDefOfParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='-')
    return_config: typing.Optional[list[models.aws_cognito.UserPoolOperationDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPool
class UserPoolDef(BaseConstruct):
    account_recovery: typing.Optional[aws_cdk.aws_cognito.AccountRecovery] = pydantic.Field(None, description='How will a user be able to recover their account? Default: AccountRecovery.PHONE_WITHOUT_MFA_AND_EMAIL\n')
    advanced_security_mode: typing.Optional[aws_cdk.aws_cognito.AdvancedSecurityMode] = pydantic.Field(None, description="The user pool's Advanced Security Mode. Default: - no value\n")
    auto_verify: typing.Union[models.aws_cognito.AutoVerifiedAttrsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Attributes which Cognito will look to verify automatically upon user sign up. EMAIL and PHONE are the only available options. Default: - If ``signInAlias`` includes email and/or phone, they will be included in ``autoVerifiedAttributes`` by default. If absent, no attributes will be auto-verified.\n')
    custom_attributes: typing.Optional[typing.Mapping[str, typing.Union[models.aws_cognito.BooleanAttributeDef, models.aws_cognito.DateTimeAttributeDef, models.aws_cognito.NumberAttributeDef, models.aws_cognito.StringAttributeDef]]] = pydantic.Field(None, description='Define a set of custom attributes that can be configured for each user in the user pool. Default: - No custom attributes.\n')
    custom_sender_kms_key: typing.Optional[typing.Union[models.aws_kms.KeyDef]] = pydantic.Field(None, description='This key will be used to encrypt temporary passwords and authorization codes that Amazon Cognito generates. Default: - no key ID configured\n')
    deletion_protection: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether the user pool should have deletion protection enabled. Default: false\n')
    device_tracking: typing.Union[models.aws_cognito.DeviceTrackingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Device tracking settings. Default: - see defaults on each property of DeviceTracking.\n')
    email: typing.Optional[models.aws_cognito.UserPoolEmailDef] = pydantic.Field(None, description='Email settings for a user pool. Default: - cognito will use the default email configuration\n')
    enable_sms_role: typing.Optional[bool] = pydantic.Field(None, description='Setting this would explicitly enable or disable SMS role creation. When left unspecified, CDK will determine based on other properties if a role is needed or not. Default: - CDK will determine based on other properties of the user pool if an SMS role should be created or not.\n')
    keep_original: typing.Union[models.aws_cognito.KeepOriginalAttrsDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Attributes which Cognito will look to handle changes to the value of your users' email address and phone number attributes. EMAIL and PHONE are the only available options. Default: - Nothing is kept.\n")
    lambda_triggers: typing.Union[models.aws_cognito.UserPoolTriggersDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Lambda functions to use for supported Cognito triggers. Default: - No Lambda triggers.\n')
    mfa: typing.Optional[aws_cdk.aws_cognito.Mfa] = pydantic.Field(None, description='Configure whether users of this user pool can or are required use MFA to sign in. Default: Mfa.OFF\n')
    mfa_message: typing.Optional[str] = pydantic.Field(None, description="The SMS message template sent during MFA verification. Use '{####}' in the template where Cognito should insert the verification code. Default: 'Your authentication code is {####}.'\n")
    mfa_second_factor: typing.Union[models.aws_cognito.MfaSecondFactorDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configure the MFA types that users can use in this user pool. Ignored if ``mfa`` is set to ``OFF``. Default: - { sms: true, otp: false }, if ``mfa`` is set to ``OPTIONAL`` or ``REQUIRED``. { sms: false, otp: false }, otherwise\n')
    password_policy: typing.Union[models.aws_cognito.PasswordPolicyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Password policy for this user pool. Default: - see defaults on each property of PasswordPolicy.\n')
    removal_policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='Policy to apply when the user pool is removed from the stack. Default: RemovalPolicy.RETAIN\n')
    self_sign_up_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether self sign-up should be enabled. To configure self sign-up configuration use the ``userVerification`` property. Default: - false\n')
    sign_in_aliases: typing.Union[models.aws_cognito.SignInAliasesDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Methods in which a user registers or signs in to a user pool. Allows either username with aliases OR sign in with email, phone, or both. Read the sections on usernames and aliases to learn more - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html To match with 'Option 1' in the above link, with a verified email, this property should be set to ``{ username: true, email: true }``. To match with 'Option 2' in the above link with both a verified email and phone number, this property should be set to ``{ email: true, phone: true }``. Default: { username: true }\n")
    sign_in_case_sensitive: typing.Optional[bool] = pydantic.Field(None, description='Whether sign-in aliases should be evaluated with case sensitivity. For example, when this option is set to false, users will be able to sign in using either ``MyUsername`` or ``myusername``. Default: true\n')
    sms_role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description='The IAM role that Cognito will assume while sending SMS messages. Default: - a new IAM role is created.\n')
    sms_role_external_id: typing.Optional[str] = pydantic.Field(None, description="The 'ExternalId' that Cognito service must be using when assuming the ``smsRole``, if the role is restricted with an 'sts:ExternalId' conditional. Learn more about ExternalId here - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html This property will be ignored if ``smsRole`` is not specified. Default: - No external id will be configured.\n")
    sns_region: typing.Optional[str] = pydantic.Field(None, description='The region to integrate with SNS to send SMS messages. This property will do nothing if SMS configuration is not configured. Default: - The same region as the user pool, with a few exceptions - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html#user-pool-sms-settings-first-time\n')
    standard_attributes: typing.Union[models.aws_cognito.StandardAttributesDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The set of attributes that are required for every user in the user pool. Read more on attributes here - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html Default: - All standard attributes are optional and mutable.\n')
    user_invitation: typing.Union[models.aws_cognito.UserInvitationConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration around admins signing up users into a user pool. Default: - see defaults in UserInvitationConfig.\n')
    user_pool_name: typing.Optional[str] = pydantic.Field(None, description='Name of the user pool. Default: - automatically generated name by CloudFormation at deploy time.\n')
    user_verification: typing.Union[models.aws_cognito.UserVerificationConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration around users signing themselves up to the user pool. Enable or disable self sign-up via the ``selfSignUpEnabled`` property. Default: - see defaults in UserVerificationConfig.')
    _init_params: typing.ClassVar[list[str]] = ['account_recovery', 'advanced_security_mode', 'auto_verify', 'custom_attributes', 'custom_sender_kms_key', 'deletion_protection', 'device_tracking', 'email', 'enable_sms_role', 'keep_original', 'lambda_triggers', 'mfa', 'mfa_message', 'mfa_second_factor', 'password_policy', 'removal_policy', 'self_sign_up_enabled', 'sign_in_aliases', 'sign_in_case_sensitive', 'sms_role', 'sms_role_external_id', 'sns_region', 'standard_attributes', 'user_invitation', 'user_pool_name', 'user_verification']
    _method_names: typing.ClassVar[list[str]] = ['add_client', 'add_domain', 'add_resource_server', 'add_trigger', 'apply_removal_policy', 'grant', 'register_identity_provider']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_user_pool_arn', 'from_user_pool_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPool'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_user_pool_arn', 'from_user_pool_id']
    ...


    from_user_pool_arn: typing.Optional[models.aws_cognito.UserPoolDefFromUserPoolArnParams] = pydantic.Field(None, description='Import an existing user pool based on its ARN.')
    from_user_pool_id: typing.Optional[models.aws_cognito.UserPoolDefFromUserPoolIdParams] = pydantic.Field(None, description='Import an existing user pool based on its id.')
    resource_config: typing.Optional[models.aws_cognito.UserPoolDefConfig] = pydantic.Field(None)


class UserPoolDefConfig(pydantic.BaseModel):
    add_client: typing.Optional[list[models.aws_cognito.UserPoolDefAddClientParams]] = pydantic.Field(None, description='Add a new app client to this user pool.')
    add_domain: typing.Optional[list[models.aws_cognito.UserPoolDefAddDomainParams]] = pydantic.Field(None, description='Associate a domain to this user pool.')
    add_resource_server: typing.Optional[list[models.aws_cognito.UserPoolDefAddResourceServerParams]] = pydantic.Field(None, description='Add a new resource server to this user pool.')
    add_trigger: typing.Optional[list[models.aws_cognito.UserPoolDefAddTriggerParams]] = pydantic.Field(None, description='Add a lambda trigger to a user pool operation.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    grant: typing.Optional[list[models.aws_cognito.UserPoolDefGrantParams]] = pydantic.Field(None, description="Adds an IAM policy statement associated with this user pool to an IAM principal's policy.")
    register_identity_provider: typing.Optional[list[models.aws_cognito.UserPoolDefRegisterIdentityProviderParams]] = pydantic.Field(None, description='Register an identity provider with this user pool.')

class UserPoolDefAddClientParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    access_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the access token. Values between 5 minutes and 1 day are valid. The duration can not be longer than the refresh token validity. Default: Duration.minutes(60)\n')
    auth_flows: typing.Union[models.aws_cognito.AuthFlowDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The set of OAuth authentication flows to enable on the client. Default: - If you don't specify a value, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH.\n")
    auth_session_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. see defaults in ``AuthSessionValidity``. Valid duration is from 3 to 15 minutes. Default: - Duration.minutes(3)\n')
    disable_o_auth: typing.Optional[bool] = pydantic.Field(None, description='Turns off all OAuth interactions for this client. Default: false\n')
    enable_propagate_additional_user_context_data: typing.Optional[bool] = pydantic.Field(None, description='Enable the propagation of additional user context data. You can only activate enablePropagateAdditionalUserContextData in an app client that has a client secret. Default: false for new user pool clients\n')
    enable_token_revocation: typing.Optional[bool] = pydantic.Field(None, description='Enable token revocation for this client. Default: true for new user pool clients\n')
    generate_secret: typing.Optional[bool] = pydantic.Field(None, description='Whether to generate a client secret. Default: false\n')
    id_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the ID token. Values between 5 minutes and 1 day are valid. The duration can not be longer than the refresh token validity. Default: Duration.minutes(60)\n')
    o_auth: typing.Union[models.aws_cognito.OAuthSettingsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='OAuth settings for this client to interact with the app. An error is thrown when this is specified and ``disableOAuth`` is set. Default: - see defaults in ``OAuthSettings``. meaningless if ``disableOAuth`` is set.\n')
    prevent_user_existence_errors: typing.Optional[bool] = pydantic.Field(None, description="Whether Cognito returns a UserNotFoundException exception when the user does not exist in the user pool (false), or whether it returns another type of error that doesn't reveal the user's absence. Default: false\n")
    read_attributes: typing.Optional[models.aws_cognito.ClientAttributesDef] = pydantic.Field(None, description='The set of attributes this client will be able to read. Default: - all standard and custom attributes\n')
    refresh_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the refresh token. Values between 60 minutes and 10 years are valid. Default: Duration.days(30)\n')
    supported_identity_providers: typing.Optional[typing.Sequence[models.aws_cognito.UserPoolClientIdentityProviderDef]] = pydantic.Field(None, description='The list of identity providers that users should be able to use to sign in using this client. Default: - supports all identity providers that are registered with the user pool. If the user pool and/or identity providers are imported, either specify this option explicitly or ensure that the identity providers are registered with the user pool using the ``UserPool.registerIdentityProvider()`` API.\n')
    user_pool_client_name: typing.Optional[str] = pydantic.Field(None, description='Name of the application client. Default: - cloudformation generated name\n')
    write_attributes: typing.Optional[models.aws_cognito.ClientAttributesDef] = pydantic.Field(None, description='The set of attributes this client will be able to write. Default: - all standard and custom attributes')
    return_config: typing.Optional[list[models.aws_cognito.UserPoolClientDefConfig]] = pydantic.Field(None)
    ...

class UserPoolDefAddDomainParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    cognito_domain: typing.Union[models.aws_cognito.CognitoDomainOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Associate a cognito prefix domain with your user pool Either ``customDomain`` or ``cognitoDomain`` must be specified. Default: - not set if ``customDomain`` is specified, otherwise, throws an error.\n')
    custom_domain: typing.Union[models.aws_cognito.CustomDomainOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Associate a custom domain with your user pool Either ``customDomain`` or ``cognitoDomain`` must be specified. Default: - not set if ``cognitoDomain`` is specified, otherwise, throws an error.')
    return_config: typing.Optional[list[models.aws_cognito.UserPoolDomainDefConfig]] = pydantic.Field(None)
    ...

class UserPoolDefAddResourceServerParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='-\n')
    identifier: str = pydantic.Field(..., description='A unique resource server identifier for the resource server.\n')
    scopes: typing.Optional[typing.Sequence[models.aws_cognito.ResourceServerScopeDef]] = pydantic.Field(None, description='Oauth scopes. Default: - No scopes will be added\n')
    user_pool_resource_server_name: typing.Optional[str] = pydantic.Field(None, description='A friendly name for the resource server. Default: - same as ``identifier``')
    return_config: typing.Optional[list[models.aws_cognito.UserPoolResourceServerDefConfig]] = pydantic.Field(None)
    ...

class UserPoolDefAddTriggerParams(pydantic.BaseModel):
    operation: models.aws_cognito.UserPoolOperationDef = pydantic.Field(..., description='-\n')
    fn: typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(..., description='-\n')
    lambda_version: typing.Optional[aws_cdk.aws_cognito.LambdaVersion] = pydantic.Field(None, description='-\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html\n')
    ...

class UserPoolDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class UserPoolDefFromUserPoolArnParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    user_pool_arn: str = pydantic.Field(..., description='-')
    ...

class UserPoolDefFromUserPoolIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    user_pool_id: str = pydantic.Field(..., description='-')
    ...

class UserPoolDefGrantParams(pydantic.BaseModel):
    grantee: models.AnyResource = pydantic.Field(..., description='-\n')
    actions: list[str] = pydantic.Field(...)
    return_config: typing.Optional[list[models.aws_iam.GrantDefConfig]] = pydantic.Field(None)
    ...

class UserPoolDefRegisterIdentityProviderParams(pydantic.BaseModel):
    provider: typing.Union[models.aws_cognito.UserPoolIdentityProviderAmazonDef, models.aws_cognito.UserPoolIdentityProviderAppleDef, models.aws_cognito.UserPoolIdentityProviderFacebookDef, models.aws_cognito.UserPoolIdentityProviderGoogleDef, models.aws_cognito.UserPoolIdentityProviderOidcDef, models.aws_cognito.UserPoolIdentityProviderSamlDef] = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolClient
class UserPoolClientDef(BaseConstruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The UserPool resource this client will have access to.\n')
    access_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the access token. Values between 5 minutes and 1 day are valid. The duration can not be longer than the refresh token validity. Default: Duration.minutes(60)\n')
    auth_flows: typing.Union[models.aws_cognito.AuthFlowDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The set of OAuth authentication flows to enable on the client. Default: - If you don't specify a value, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH.\n")
    auth_session_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. see defaults in ``AuthSessionValidity``. Valid duration is from 3 to 15 minutes. Default: - Duration.minutes(3)\n')
    disable_o_auth: typing.Optional[bool] = pydantic.Field(None, description='Turns off all OAuth interactions for this client. Default: false\n')
    enable_propagate_additional_user_context_data: typing.Optional[bool] = pydantic.Field(None, description='Enable the propagation of additional user context data. You can only activate enablePropagateAdditionalUserContextData in an app client that has a client secret. Default: false for new user pool clients\n')
    enable_token_revocation: typing.Optional[bool] = pydantic.Field(None, description='Enable token revocation for this client. Default: true for new user pool clients\n')
    generate_secret: typing.Optional[bool] = pydantic.Field(None, description='Whether to generate a client secret. Default: false\n')
    id_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the ID token. Values between 5 minutes and 1 day are valid. The duration can not be longer than the refresh token validity. Default: Duration.minutes(60)\n')
    o_auth: typing.Union[models.aws_cognito.OAuthSettingsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='OAuth settings for this client to interact with the app. An error is thrown when this is specified and ``disableOAuth`` is set. Default: - see defaults in ``OAuthSettings``. meaningless if ``disableOAuth`` is set.\n')
    prevent_user_existence_errors: typing.Optional[bool] = pydantic.Field(None, description="Whether Cognito returns a UserNotFoundException exception when the user does not exist in the user pool (false), or whether it returns another type of error that doesn't reveal the user's absence. Default: false\n")
    read_attributes: typing.Optional[models.aws_cognito.ClientAttributesDef] = pydantic.Field(None, description='The set of attributes this client will be able to read. Default: - all standard and custom attributes\n')
    refresh_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the refresh token. Values between 60 minutes and 10 years are valid. Default: Duration.days(30)\n')
    supported_identity_providers: typing.Optional[typing.Sequence[models.aws_cognito.UserPoolClientIdentityProviderDef]] = pydantic.Field(None, description='The list of identity providers that users should be able to use to sign in using this client. Default: - supports all identity providers that are registered with the user pool. If the user pool and/or identity providers are imported, either specify this option explicitly or ensure that the identity providers are registered with the user pool using the ``UserPool.registerIdentityProvider()`` API.\n')
    user_pool_client_name: typing.Optional[str] = pydantic.Field(None, description='Name of the application client. Default: - cloudformation generated name\n')
    write_attributes: typing.Optional[models.aws_cognito.ClientAttributesDef] = pydantic.Field(None, description='The set of attributes this client will be able to write. Default: - all standard and custom attributes')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'access_token_validity', 'auth_flows', 'auth_session_validity', 'disable_o_auth', 'enable_propagate_additional_user_context_data', 'enable_token_revocation', 'generate_secret', 'id_token_validity', 'o_auth', 'prevent_user_existence_errors', 'read_attributes', 'refresh_token_validity', 'supported_identity_providers', 'user_pool_client_name', 'write_attributes']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_user_pool_client_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolClient'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_user_pool_client_id']
    ...


    from_user_pool_client_id: typing.Optional[models.aws_cognito.UserPoolClientDefFromUserPoolClientIdParams] = pydantic.Field(None, description='Import a user pool client given its id.')
    resource_config: typing.Optional[models.aws_cognito.UserPoolClientDefConfig] = pydantic.Field(None)


class UserPoolClientDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    user_pool_client_secret_config: typing.Optional[models.core.SecretValueDefConfig] = pydantic.Field(None)

class UserPoolClientDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class UserPoolClientDefFromUserPoolClientIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    user_pool_client_id: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolDomain
class UserPoolDomainDef(BaseConstruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this domain should be associated.\n')
    cognito_domain: typing.Union[models.aws_cognito.CognitoDomainOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Associate a cognito prefix domain with your user pool Either ``customDomain`` or ``cognitoDomain`` must be specified. Default: - not set if ``customDomain`` is specified, otherwise, throws an error.\n')
    custom_domain: typing.Union[models.aws_cognito.CustomDomainOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Associate a custom domain with your user pool Either ``customDomain`` or ``cognitoDomain`` must be specified. Default: - not set if ``cognitoDomain`` is specified, otherwise, throws an error.')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'cognito_domain', 'custom_domain']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy', 'base_url', 'sign_in_url']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_domain_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolDomain'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_domain_name']
    ...


    from_domain_name: typing.Optional[models.aws_cognito.UserPoolDomainDefFromDomainNameParams] = pydantic.Field(None, description='Import a UserPoolDomain given its domain name.')
    resource_config: typing.Optional[models.aws_cognito.UserPoolDomainDefConfig] = pydantic.Field(None)


class UserPoolDomainDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    base_url: typing.Optional[list[models.aws_cognito.UserPoolDomainDefBaseUrlParams]] = pydantic.Field(None, description='The URL to the hosted UI associated with this domain.')
    sign_in_url: typing.Optional[list[models.aws_cognito.UserPoolDomainDefSignInUrlParams]] = pydantic.Field(None, description='The URL to the sign in page in this domain using a specific UserPoolClient.')

class UserPoolDomainDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class UserPoolDomainDefBaseUrlParams(pydantic.BaseModel):
    fips: typing.Optional[bool] = pydantic.Field(None, description='Whether to return the FIPS-compliant endpoint. Default: return the standard URL')
    ...

class UserPoolDomainDefFromDomainNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    user_pool_domain_name: str = pydantic.Field(..., description='-')
    ...

class UserPoolDomainDefSignInUrlParams(pydantic.BaseModel):
    client: models.aws_cognito.UserPoolClientDef = pydantic.Field(..., description='[disable-awslint:ref-via-interface] the user pool client that the UI will use to interact with the UserPool.\n')
    redirect_uri: str = pydantic.Field(..., description='Where to redirect to after sign in.\n')
    sign_in_path: typing.Optional[str] = pydantic.Field(None, description="The path in the URI where the sign-in page is located. Default: '/login'\n")
    fips: typing.Optional[bool] = pydantic.Field(None, description='Whether to return the FIPS-compliant endpoint. Default: return the standard URL')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderAmazon
class UserPoolIdentityProviderAmazonDef(BaseConstruct):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id recognized by Login with Amazon APIs.\n')
    client_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client secret to be accompanied with clientId for Login with Amazon APIs to authenticate the client.\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The types of user profile data to obtain for the Amazon profile. Default: [ profile ]\n')
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'client_secret', 'scopes', 'user_pool', 'attribute_mapping']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderAmazon'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderAmazonDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderAmazonDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class UserPoolIdentityProviderAmazonDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderApple
class UserPoolIdentityProviderAppleDef(BaseConstruct):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id recognized by Apple APIs.\n')
    key_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The keyId (of the same key, which content has to be later supplied as ``privateKey``) for Apple APIs to authenticate the client.\n')
    private_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The privateKey content for Apple APIs to authenticate the client.\n')
    team_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The teamId for Apple APIs to authenticate the client.\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of apple permissions to obtain for getting access to the apple profile. Default: [ name ]\n')
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'key_id', 'private_key', 'team_id', 'scopes', 'user_pool', 'attribute_mapping']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderApple'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderAppleDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderAppleDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class UserPoolIdentityProviderAppleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderFacebook
class UserPoolIdentityProviderFacebookDef(BaseConstruct):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id recognized by Facebook APIs.\n')
    client_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client secret to be accompanied with clientId for Facebook to authenticate the client.\n')
    api_version: typing.Optional[str] = pydantic.Field(None, description='The Facebook API version to use. Default: - to the oldest version supported by Facebook\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of Facebook permissions to obtain for getting access to the Facebook profile. Default: [ public_profile ]\n')
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'client_secret', 'api_version', 'scopes', 'user_pool', 'attribute_mapping']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderFacebook'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderFacebookDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderFacebookDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class UserPoolIdentityProviderFacebookDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderGoogle
class UserPoolIdentityProviderGoogleDef(BaseConstruct):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id recognized by Google APIs.\n')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='(deprecated) The client secret to be accompanied with clientId for Google APIs to authenticate the client. Default: none\n')
    client_secret_value: typing.Optional[models.SecretValueDef] = pydantic.Field(None, description='The client secret to be accompanied with clientId for Google APIs to authenticate the client as SecretValue. Default: none\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of Google permissions to obtain for getting access to the Google profile. Default: [ profile ]\n')
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'client_secret', 'client_secret_value', 'scopes', 'user_pool', 'attribute_mapping']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderGoogle'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderGoogleDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderGoogleDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class UserPoolIdentityProviderGoogleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderOidc
class UserPoolIdentityProviderOidcDef(BaseConstruct):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id.\n')
    client_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client secret.\n')
    issuer_url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Issuer URL.\n')
    attribute_request_method: typing.Optional[aws_cdk.aws_cognito.OidcAttributeRequestMethod] = pydantic.Field(None, description='The method to use to request attributes. Default: OidcAttributeRequestMethod.GET\n')
    endpoints: typing.Union[models.aws_cognito.OidcEndpointsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='OpenID connect endpoints. Default: - auto discovered with issuer URL\n')
    identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Identifiers. Identifiers can be used to redirect users to the correct IdP in multitenant apps. Default: - no identifiers used\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the provider. Default: - the unique ID of the construct\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="The OAuth 2.0 scopes that you will request from OpenID Connect. Scopes are groups of OpenID Connect user attributes to exchange with your app. Default: ['openid']\n")
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'client_secret', 'issuer_url', 'attribute_request_method', 'endpoints', 'identifiers', 'name', 'scopes', 'user_pool', 'attribute_mapping']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderOidc'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderOidcDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderOidcDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class UserPoolIdentityProviderOidcDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderSaml
class UserPoolIdentityProviderSamlDef(BaseConstruct):
    metadata: typing.Union[models.aws_cognito.UserPoolIdentityProviderSamlMetadataDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SAML metadata.\n')
    encrypted_responses: typing.Optional[bool] = pydantic.Field(None, description='Whether to require encrypted SAML assertions from IdP. Default: false\n')
    identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Identifiers. Identifiers can be used to redirect users to the correct IdP in multitenant apps. Default: - no identifiers used\n')
    idp_initiated: typing.Optional[bool] = pydantic.Field(None, description='Whether to enable IdP-initiated SAML auth flows. Default: false\n')
    idp_signout: typing.Optional[bool] = pydantic.Field(None, description='Whether to enable the "Sign-out flow" feature. Default: - false\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the provider. Must be between 3 and 32 characters. Default: - the unique ID of the construct\n')
    request_signing_algorithm: typing.Optional[aws_cdk.aws_cognito.SigningAlgorithm] = pydantic.Field(None, description="The signing algorithm for SAML requests. Default: - don't sign requests\n")
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping')
    _init_params: typing.ClassVar[list[str]] = ['metadata', 'encrypted_responses', 'identifiers', 'idp_initiated', 'idp_signout', 'name', 'request_signing_algorithm', 'user_pool', 'attribute_mapping']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderSaml'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderSamlDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderSamlDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class UserPoolIdentityProviderSamlDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.UserPoolResourceServer
class UserPoolResourceServerDef(BaseConstruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to add this resource server to.\n')
    identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique resource server identifier for the resource server.\n')
    scopes: typing.Optional[typing.Sequence[models.aws_cognito.ResourceServerScopeDef]] = pydantic.Field(None, description='Oauth scopes. Default: - No scopes will be added\n')
    user_pool_resource_server_name: typing.Optional[str] = pydantic.Field(None, description='A friendly name for the resource server. Default: - same as ``identifier``')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'identifier', 'scopes', 'user_pool_resource_server_name']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_user_pool_resource_server_id']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolResourceServer'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_user_pool_resource_server_id']
    ...


    from_user_pool_resource_server_id: typing.Optional[models.aws_cognito.UserPoolResourceServerDefFromUserPoolResourceServerIdParams] = pydantic.Field(None, description='Import a user pool resource client given its id.')
    resource_config: typing.Optional[models.aws_cognito.UserPoolResourceServerDefConfig] = pydantic.Field(None)


class UserPoolResourceServerDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)

class UserPoolResourceServerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class UserPoolResourceServerDefFromUserPoolResourceServerIdParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    user_pool_resource_server_id: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_cognito.AttributeMapping
class AttributeMappingDef(BaseStruct):
    address: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's postal address is a required attribute. Default: - not mapped\n")
    birthdate: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's birthday. Default: - not mapped\n")
    custom: typing.Optional[typing.Mapping[str, models.aws_cognito.ProviderAttributeDef]] = pydantic.Field(None, description='Specify custom attribute mapping here and mapping for any standard attributes not supported yet. Default: - no custom attribute mapping\n')
    email: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's e-mail address. Default: - not mapped\n")
    family_name: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description='The surname or last name of user. Default: - not mapped\n')
    fullname: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's full name in displayable form. Default: - not mapped\n")
    gender: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's gender. Default: - not mapped\n")
    given_name: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's first name or give name. Default: - not mapped\n")
    last_update_time: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="Time, the user's information was last updated. Default: - not mapped\n")
    locale: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's locale. Default: - not mapped\n")
    middle_name: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's middle name. Default: - not mapped\n")
    nickname: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's nickname or casual name. Default: - not mapped\n")
    phone_number: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's telephone number. Default: - not mapped\n")
    preferred_username: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's preferred username. Default: - not mapped\n")
    profile_page: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The URL to the user's profile page. Default: - not mapped\n")
    profile_picture: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The URL to the user's profile picture. Default: - not mapped\n")
    timezone: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description="The user's time zone. Default: - not mapped\n")
    website: typing.Optional[models.aws_cognito.ProviderAttributeDef] = pydantic.Field(None, description='The URL to the user\'s web page or blog. Default: - not mapped\n\n:exampleMetadata: infused\n\nExample::\n\n    userpool = cognito.UserPool(self, "Pool")\n\n    cognito.UserPoolIdentityProviderAmazon(self, "Amazon",\n        client_id="amzn-client-id",\n        client_secret="amzn-client-secret",\n        user_pool=userpool,\n        attribute_mapping=cognito.AttributeMapping(\n            email=cognito.ProviderAttribute.AMAZON_EMAIL,\n            website=cognito.ProviderAttribute.other("url"),  # use other() when an attribute is not pre-defined in the CDK\n            custom={\n                # custom user pool attributes go here\n                "unique_id": cognito.ProviderAttribute.AMAZON_USER_ID\n            }\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['address', 'birthdate', 'custom', 'email', 'family_name', 'fullname', 'gender', 'given_name', 'last_update_time', 'locale', 'middle_name', 'nickname', 'phone_number', 'preferred_username', 'profile_page', 'profile_picture', 'timezone', 'website']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.AttributeMapping'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.AuthFlow
class AuthFlowDef(BaseStruct):
    admin_user_password: typing.Optional[bool] = pydantic.Field(None, description='Enable admin based user password authentication flow. Default: false\n')
    custom: typing.Optional[bool] = pydantic.Field(None, description='Enable custom authentication flow. Default: false\n')
    user_password: typing.Optional[bool] = pydantic.Field(None, description='Enable auth using username & password. Default: false\n')
    user_srp: typing.Optional[bool] = pydantic.Field(None, description='Enable SRP based authentication. Default: false\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-authentication-flow.html\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "pool")\n    pool.add_client("app-client",\n        auth_flows=cognito.AuthFlow(\n            user_password=True,\n            user_srp=True\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['admin_user_password', 'custom', 'user_password', 'user_srp']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.AuthFlow'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.AutoVerifiedAttrs
class AutoVerifiedAttrsDef(BaseStruct):
    email: typing.Optional[bool] = pydantic.Field(None, description='Whether the email address of the user should be auto verified at sign up. Note: If both ``email`` and ``phone`` is set, Cognito only verifies the phone number. To also verify email, see here - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html Default: - true, if email is turned on for ``signIn``. false, otherwise.\n')
    phone: typing.Optional[bool] = pydantic.Field(None, description='Whether the phone number of the user should be auto verified at sign up. Default: - true, if phone is turned on for ``signIn``. false, otherwise.\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        # ...\n        sign_in_aliases=cognito.SignInAliases(username=True, email=True),\n        auto_verify=cognito.AutoVerifiedAttrs(email=True, phone=True)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email', 'phone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.AutoVerifiedAttrs'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.BaseUrlOptions
class BaseUrlOptionsDef(BaseStruct):
    fips: typing.Optional[bool] = pydantic.Field(None, description='Whether to return the FIPS-compliant endpoint. Default: return the standard URL\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    base_url_options = cognito.BaseUrlOptions(\n        fips=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['fips']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.BaseUrlOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPool.CognitoIdentityProviderProperty
class CfnIdentityPool_CognitoIdentityProviderPropertyDef(BaseStruct):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client ID for the Amazon Cognito user pool.\n')
    provider_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The provider name for an Amazon Cognito user pool. For example: ``cognito-idp.us-east-2.amazonaws.com/us-east-2_123456789`` .\n')
    server_side_token_check: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='TRUE if server-side token validation is enabled for the identity provider’s token. After you set the ``ServerSideTokenCheck`` to TRUE for an identity pool, that identity pool checks with the integrated user pools to make sure the user has not been globally signed out or deleted before the identity pool provides an OIDC token or AWS credentials for the user. If the user is signed out or deleted, the identity pool returns a 400 Not Authorized error.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypool-cognitoidentityprovider.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cognito_identity_provider_property = cognito.CfnIdentityPool.CognitoIdentityProviderProperty(\n        client_id="clientId",\n        provider_name="providerName",\n\n        # the properties below are optional\n        server_side_token_check=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'provider_name', 'server_side_token_check']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPool.CognitoIdentityProviderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPool.CognitoStreamsProperty
class CfnIdentityPool_CognitoStreamsPropertyDef(BaseStruct):
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the role Amazon Cognito can assume to publish to the stream. This role must grant access to Amazon Cognito (cognito-sync) to invoke ``PutRecord`` on your Amazon Cognito stream.\n')
    streaming_status: typing.Optional[str] = pydantic.Field(None, description='Status of the Amazon Cognito streams. Valid values are: ``ENABLED`` or ``DISABLED`` .\n')
    stream_name: typing.Optional[str] = pydantic.Field(None, description='The name of the Amazon Cognito stream to receive updates. This stream must be in the developer\'s account and in the same Region as the identity pool.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypool-cognitostreams.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cognito_streams_property = cognito.CfnIdentityPool.CognitoStreamsProperty(\n        role_arn="roleArn",\n        streaming_status="streamingStatus",\n        stream_name="streamName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role_arn', 'streaming_status', 'stream_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPool.CognitoStreamsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPool.PushSyncProperty
class CfnIdentityPool_PushSyncPropertyDef(BaseStruct):
    application_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The ARNs of the Amazon SNS platform applications that could be used by clients.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='An IAM role configured to allow Amazon Cognito to call Amazon SNS on behalf of the developer.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypool-pushsync.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    push_sync_property = cognito.CfnIdentityPool.PushSyncProperty(\n        application_arns=["applicationArns"],\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_arns', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPool.PushSyncProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachment.MappingRuleProperty
class CfnIdentityPoolRoleAttachment_MappingRulePropertyDef(BaseStruct):
    claim: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The claim name that must be present in the token. For example: "isAdmin" or "paid".\n')
    match_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The match condition that specifies how closely the claim value in the IdP token must match ``Value`` . Valid values are: ``Equals`` , ``Contains`` , ``StartsWith`` , and ``NotEqual`` .\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the role.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A brief string that the claim must match. For example, "paid" or "yes".\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypoolroleattachment-mappingrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    mapping_rule_property = cognito.CfnIdentityPoolRoleAttachment.MappingRuleProperty(\n        claim="claim",\n        match_type="matchType",\n        role_arn="roleArn",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['claim', 'match_type', 'role_arn', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachment.MappingRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachment.RoleMappingProperty
class CfnIdentityPoolRoleAttachment_RoleMappingPropertyDef(BaseStruct):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The role mapping type. Token will use ``cognito:roles`` and ``cognito:preferred_role`` claims from the Cognito identity provider token to map groups to roles. Rules will attempt to match claims from the token to map to a role.\n')
    ambiguous_role_resolution: typing.Optional[str] = pydantic.Field(None, description='If you specify Token or Rules as the ``Type`` , ``AmbiguousRoleResolution`` is required. Specifies the action to be taken if either no rules match the claim value for the ``Rules`` type, or there is no ``cognito:preferred_role`` claim and there are multiple ``cognito:roles`` matches for the ``Token`` type.\n')
    identity_provider: typing.Optional[str] = pydantic.Field(None, description="Identifier for the identity provider for which the role is mapped. For example: ``graph.facebook.com`` or ``cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id (http://cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id)`` . This is the identity provider that is used by the user for authentication. If the identity provider property isn't provided, the key of the entry in the ``RoleMappings`` map is used as the identity provider.\n")
    rules_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPoolRoleAttachment_RulesConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The rules to be used for mapping users to roles. If you specify "Rules" as the role-mapping type, RulesConfiguration is required.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypoolroleattachment-rolemapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    role_mapping_property = cognito.CfnIdentityPoolRoleAttachment.RoleMappingProperty(\n        type="type",\n\n        # the properties below are optional\n        ambiguous_role_resolution="ambiguousRoleResolution",\n        identity_provider="identityProvider",\n        rules_configuration=cognito.CfnIdentityPoolRoleAttachment.RulesConfigurationTypeProperty(\n            rules=[cognito.CfnIdentityPoolRoleAttachment.MappingRuleProperty(\n                claim="claim",\n                match_type="matchType",\n                role_arn="roleArn",\n                value="value"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'ambiguous_role_resolution', 'identity_provider', 'rules_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachment.RoleMappingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachment.RulesConfigurationTypeProperty
class CfnIdentityPoolRoleAttachment_RulesConfigurationTypePropertyDef(BaseStruct):
    rules: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPoolRoleAttachment_MappingRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The rules. You can specify up to 25 rules per identity provider.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypoolroleattachment-rulesconfigurationtype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    rules_configuration_type_property = cognito.CfnIdentityPoolRoleAttachment.RulesConfigurationTypeProperty(\n        rules=[cognito.CfnIdentityPoolRoleAttachment.MappingRuleProperty(\n            claim="claim",\n            match_type="matchType",\n            role_arn="roleArn",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rules']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachment.RulesConfigurationTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnLogDeliveryConfiguration.CloudWatchLogsConfigurationProperty
class CfnLogDeliveryConfiguration_CloudWatchLogsConfigurationPropertyDef(BaseStruct):
    log_group_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (arn) of a CloudWatch Logs log group where your user pool sends logs. The log group must not be encrypted with AWS Key Management Service and must be in the same AWS account as your user pool. To send logs to log groups with a resource policy of a size greater than 5120 characters, configure a log group with a path that starts with ``/aws/vendedlogs`` . For more information, see `Enabling logging from certain AWS services <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-logdeliveryconfiguration-cloudwatchlogsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cloud_watch_logs_configuration_property = cognito.CfnLogDeliveryConfiguration.CloudWatchLogsConfigurationProperty(\n        log_group_arn="logGroupArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_group_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnLogDeliveryConfiguration.CloudWatchLogsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnLogDeliveryConfiguration.LogConfigurationProperty
class CfnLogDeliveryConfiguration_LogConfigurationPropertyDef(BaseStruct):
    cloud_watch_logs_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnLogDeliveryConfiguration_CloudWatchLogsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The CloudWatch logging destination of a user pool detailed activity logging configuration.\n')
    event_source: typing.Optional[str] = pydantic.Field(None, description='The source of events that your user pool sends for detailed activity logging.\n')
    log_level: typing.Optional[str] = pydantic.Field(None, description='The ``errorlevel`` selection of logs that a user pool sends for detailed activity logging.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-logdeliveryconfiguration-logconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    log_configuration_property = cognito.CfnLogDeliveryConfiguration.LogConfigurationProperty(\n        cloud_watch_logs_configuration=cognito.CfnLogDeliveryConfiguration.CloudWatchLogsConfigurationProperty(\n            log_group_arn="logGroupArn"\n        ),\n        event_source="eventSource",\n        log_level="logLevel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_logs_configuration', 'event_source', 'log_level']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnLogDeliveryConfiguration.LogConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.AccountRecoverySettingProperty
class CfnUserPool_AccountRecoverySettingPropertyDef(BaseStruct):
    recovery_mechanisms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_RecoveryOptionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The list of ``RecoveryOptionTypes`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-accountrecoverysetting.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    account_recovery_setting_property = cognito.CfnUserPool.AccountRecoverySettingProperty(\n        recovery_mechanisms=[cognito.CfnUserPool.RecoveryOptionProperty(\n            name="name",\n            priority=123\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['recovery_mechanisms']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.AccountRecoverySettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.AdminCreateUserConfigProperty
class CfnUserPool_AdminCreateUserConfigPropertyDef(BaseStruct):
    allow_admin_create_user_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Set to ``True`` if only the administrator is allowed to create user profiles. Set to ``False`` if users can sign themselves up via an app.\n')
    invite_message_template: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_InviteMessageTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to be used for the welcome message to new users. See also `Customizing User Invitation Messages <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization>`_ .\n')
    unused_account_validity_days: typing.Union[int, float, None] = pydantic.Field(None, description='The user account expiration limit, in days, after which a new account that hasn\'t signed in is no longer usable. To reset the account after that time limit, you must call ``AdminCreateUser`` again, specifying ``"RESEND"`` for the ``MessageAction`` parameter. The default value for this parameter is 7. .. epigraph:: If you set a value for ``TemporaryPasswordValidityDays`` in ``PasswordPolicy`` , that value will be used, and ``UnusedAccountValidityDays`` will be no longer be an available parameter for that user pool.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-admincreateuserconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    admin_create_user_config_property = cognito.CfnUserPool.AdminCreateUserConfigProperty(\n        allow_admin_create_user_only=False,\n        invite_message_template=cognito.CfnUserPool.InviteMessageTemplateProperty(\n            email_message="emailMessage",\n            email_subject="emailSubject",\n            sms_message="smsMessage"\n        ),\n        unused_account_validity_days=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allow_admin_create_user_only', 'invite_message_template', 'unused_account_validity_days']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.AdminCreateUserConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.CustomEmailSenderProperty
class CfnUserPool_CustomEmailSenderPropertyDef(BaseStruct):
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon Cognito triggers to send email notifications to users.\n')
    lambda_version: typing.Optional[str] = pydantic.Field(None, description='The Lambda version represents the signature of the "request" attribute in the "event" information that Amazon Cognito passes to your custom email sender AWS Lambda function. The only supported value is ``V1_0`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-customemailsender.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    custom_email_sender_property = cognito.CfnUserPool.CustomEmailSenderProperty(\n        lambda_arn="lambdaArn",\n        lambda_version="lambdaVersion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_arn', 'lambda_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.CustomEmailSenderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.CustomSMSSenderProperty
class CfnUserPool_CustomSMSSenderPropertyDef(BaseStruct):
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon Cognito triggers to send SMS notifications to users.\n')
    lambda_version: typing.Optional[str] = pydantic.Field(None, description='The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS sender Lambda function. The only supported value is ``V1_0`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-customsmssender.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    custom_sMSSender_property = cognito.CfnUserPool.CustomSMSSenderProperty(\n        lambda_arn="lambdaArn",\n        lambda_version="lambdaVersion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_arn', 'lambda_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.CustomSMSSenderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.DeviceConfigurationProperty
class CfnUserPool_DeviceConfigurationPropertyDef(BaseStruct):
    challenge_required_on_new_device: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='When true, a remembered device can sign in with device authentication instead of SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA). .. epigraph:: Whether or not ``ChallengeRequiredOnNewDevice`` is true, users who sign in with devices that have not been confirmed or remembered must still provide a second factor in a user pool that requires MFA.\n')
    device_only_remembered_on_user_prompt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="When true, Amazon Cognito doesn't automatically remember a user's device when your app sends a `ConfirmDevice <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmDevice.html>`_ API request. In your app, create a prompt for your user to choose whether they want to remember their device. Return the user's choice in an `UpdateDeviceStatus <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateDeviceStatus.html>`_ API request. When ``DeviceOnlyRememberedOnUserPrompt`` is ``false`` , Amazon Cognito immediately remembers devices that you register in a ``ConfirmDevice`` API request.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-deviceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    device_configuration_property = cognito.CfnUserPool.DeviceConfigurationProperty(\n        challenge_required_on_new_device=False,\n        device_only_remembered_on_user_prompt=False\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['challenge_required_on_new_device', 'device_only_remembered_on_user_prompt']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.DeviceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.EmailConfigurationProperty
class CfnUserPool_EmailConfigurationPropertyDef(BaseStruct):
    configuration_set: typing.Optional[str] = pydantic.Field(None, description='The set of configuration rules that can be applied to emails sent using Amazon SES. A configuration set is applied to an email by including a reference to the configuration set in the headers of the email. Once applied, all of the rules in that configuration set are applied to the email. Configuration sets can be used to apply the following types of rules to emails: - Event publishing – Amazon SES can track the number of send, delivery, open, click, bounce, and complaint events for each email sent. Use event publishing to send information about these events to other AWS services such as SNS and CloudWatch. - IP pool management – When leasing dedicated IP addresses with Amazon SES, you can create groups of IP addresses, called dedicated IP pools. You can then associate the dedicated IP pools with configuration sets.\n')
    email_sending_account: typing.Optional[str] = pydantic.Field(None, description='Specifies whether Amazon Cognito uses its built-in functionality to send your users email messages, or uses your Amazon Simple Email Service email configuration. Specify one of the following values: - **COGNITO_DEFAULT** - When Amazon Cognito emails your users, it uses its built-in email functionality. When you use the default option, Amazon Cognito allows only a limited number of emails each day for your user pool. For typical production environments, the default email limit is less than the required delivery volume. To achieve a higher delivery volume, specify DEVELOPER to use your Amazon SES email configuration. To look up the email delivery limit for the default option, see `Limits <https://docs.aws.amazon.com/cognito/latest/developerguide/limits.html>`_ in the *Amazon Cognito Developer Guide* . The default FROM address is ``no-reply@verificationemail.com`` . To customize the FROM address, provide the Amazon Resource Name (ARN) of an Amazon SES verified email address for the ``SourceArn`` parameter. - **DEVELOPER** - When Amazon Cognito emails your users, it uses your Amazon SES configuration. Amazon Cognito calls Amazon SES on your behalf to send email from your verified email address. When you use this option, the email delivery limits are the same limits that apply to your Amazon SES verified email address in your AWS account . If you use this option, provide the ARN of an Amazon SES verified email address for the ``SourceArn`` parameter. Before Amazon Cognito can email your users, it requires additional permissions to call Amazon SES on your behalf. When you update your user pool with this option, Amazon Cognito creates a *service-linked role* , which is a type of role in your AWS account . This role contains the permissions that allow you to access Amazon SES and send email messages from your email address. For more information about the service-linked role that Amazon Cognito creates, see `Using Service-Linked Roles for Amazon Cognito <https://docs.aws.amazon.com/cognito/latest/developerguide/using-service-linked-roles.html>`_ in the *Amazon Cognito Developer Guide* .\n')
    from_: typing.Optional[str] = pydantic.Field(None, description="Identifies either the sender's email address or the sender's name with their email address. For example, ``testuser@example.com`` or ``Test User <testuser@example.com>`` . This address appears before the body of the email.\n")
    reply_to_email_address: typing.Optional[str] = pydantic.Field(None, description='The destination to which the receiver of the email should reply.\n')
    source_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of a verified email address or an address from a verified domain in Amazon SES. You can set a ``SourceArn`` email from a verified domain only with an API request. You can set a verified email address, but not an address in a verified domain, in the Amazon Cognito console. Amazon Cognito uses the email address that you provide in one of the following ways, depending on the value that you specify for the ``EmailSendingAccount`` parameter: - If you specify ``COGNITO_DEFAULT`` , Amazon Cognito uses this address as the custom FROM address when it emails your users using its built-in email account. - If you specify ``DEVELOPER`` , Amazon Cognito emails your users with this address by calling Amazon SES on your behalf. The Region value of the ``SourceArn`` parameter must indicate a supported AWS Region of your user pool. Typically, the Region in the ``SourceArn`` and the user pool Region are the same. For more information, see `Amazon SES email configuration regions <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html#user-pool-email-developer-region-mapping>`_ in the `Amazon Cognito Developer Guide <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-emailconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    email_configuration_property = cognito.CfnUserPool.EmailConfigurationProperty(\n        configuration_set="configurationSet",\n        email_sending_account="emailSendingAccount",\n        from="from",\n        reply_to_email_address="replyToEmailAddress",\n        source_arn="sourceArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_set', 'email_sending_account', 'from_', 'reply_to_email_address', 'source_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.EmailConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.InviteMessageTemplateProperty
class CfnUserPool_InviteMessageTemplatePropertyDef(BaseStruct):
    email_message: typing.Optional[str] = pydantic.Field(None, description='The message template for email messages. EmailMessage is allowed only if `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is DEVELOPER.\n')
    email_subject: typing.Optional[str] = pydantic.Field(None, description='The subject line for email messages. EmailSubject is allowed only if `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is DEVELOPER.\n')
    sms_message: typing.Optional[str] = pydantic.Field(None, description='The message template for SMS messages.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-invitemessagetemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    invite_message_template_property = cognito.CfnUserPool.InviteMessageTemplateProperty(\n        email_message="emailMessage",\n        email_subject="emailSubject",\n        sms_message="smsMessage"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email_message', 'email_subject', 'sms_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.InviteMessageTemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.LambdaConfigProperty
class CfnUserPool_LambdaConfigPropertyDef(BaseStruct):
    create_auth_challenge: typing.Optional[str] = pydantic.Field(None, description='Creates an authentication challenge.\n')
    custom_email_sender: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_CustomEmailSenderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A custom email sender AWS Lambda trigger.\n')
    custom_message: typing.Optional[str] = pydantic.Field(None, description='A custom Message AWS Lambda trigger.\n')
    custom_sms_sender: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_CustomSMSSenderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A custom SMS sender AWS Lambda trigger.\n')
    define_auth_challenge: typing.Optional[str] = pydantic.Field(None, description='Defines the authentication challenge.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name of a AWS Key Management Service ( AWS KMS ) key. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to ``CustomEmailSender`` and ``CustomSMSSender`` .\n')
    post_authentication: typing.Optional[str] = pydantic.Field(None, description='A post-authentication AWS Lambda trigger.\n')
    post_confirmation: typing.Optional[str] = pydantic.Field(None, description='A post-confirmation AWS Lambda trigger.\n')
    pre_authentication: typing.Optional[str] = pydantic.Field(None, description='A pre-authentication AWS Lambda trigger.\n')
    pre_sign_up: typing.Optional[str] = pydantic.Field(None, description='A pre-registration AWS Lambda trigger.\n')
    pre_token_generation: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger. Set this parameter for legacy purposes. If you also set an ARN in ``PreTokenGenerationConfig`` , its value must be identical to ``PreTokenGeneration`` . For new instances of pre token generation triggers, set the ``LambdaArn`` of ``PreTokenGenerationConfig`` . You can set ``\n')
    pre_token_generation_config: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_PreTokenGenerationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The detailed configuration of a pre token generation trigger. If you also set an ARN in ``PreTokenGeneration`` , its value must be identical to ``PreTokenGenerationConfig`` .\n')
    user_migration: typing.Optional[str] = pydantic.Field(None, description='The user migration Lambda config type.\n')
    verify_auth_challenge_response: typing.Optional[str] = pydantic.Field(None, description='Verifies the authentication challenge response.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-lambdaconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    lambda_config_property = cognito.CfnUserPool.LambdaConfigProperty(\n        create_auth_challenge="createAuthChallenge",\n        custom_email_sender=cognito.CfnUserPool.CustomEmailSenderProperty(\n            lambda_arn="lambdaArn",\n            lambda_version="lambdaVersion"\n        ),\n        custom_message="customMessage",\n        custom_sms_sender=cognito.CfnUserPool.CustomSMSSenderProperty(\n            lambda_arn="lambdaArn",\n            lambda_version="lambdaVersion"\n        ),\n        define_auth_challenge="defineAuthChallenge",\n        kms_key_id="kmsKeyId",\n        post_authentication="postAuthentication",\n        post_confirmation="postConfirmation",\n        pre_authentication="preAuthentication",\n        pre_sign_up="preSignUp",\n        pre_token_generation="preTokenGeneration",\n        pre_token_generation_config=cognito.CfnUserPool.PreTokenGenerationConfigProperty(\n            lambda_arn="lambdaArn",\n            lambda_version="lambdaVersion"\n        ),\n        user_migration="userMigration",\n        verify_auth_challenge_response="verifyAuthChallengeResponse"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['create_auth_challenge', 'custom_email_sender', 'custom_message', 'custom_sms_sender', 'define_auth_challenge', 'kms_key_id', 'post_authentication', 'post_confirmation', 'pre_authentication', 'pre_sign_up', 'pre_token_generation', 'pre_token_generation_config', 'user_migration', 'verify_auth_challenge_response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.LambdaConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.NumberAttributeConstraintsProperty
class CfnUserPool_NumberAttributeConstraintsPropertyDef(BaseStruct):
    max_value: typing.Optional[str] = pydantic.Field(None, description='The maximum length of a number attribute value. Must be a number less than or equal to ``2^1023`` , represented as a string with a length of 131072 characters or fewer.\n')
    min_value: typing.Optional[str] = pydantic.Field(None, description='The minimum value of an attribute that is of the number data type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-numberattributeconstraints.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    number_attribute_constraints_property = cognito.CfnUserPool.NumberAttributeConstraintsProperty(\n        max_value="maxValue",\n        min_value="minValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_value', 'min_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.NumberAttributeConstraintsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.PasswordPolicyProperty
class CfnUserPool_PasswordPolicyPropertyDef(BaseStruct):
    minimum_length: typing.Union[int, float, None] = pydantic.Field(None, description="The minimum length of the password in the policy that you have set. This value can't be less than 6.\n")
    require_lowercase: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.\n')
    require_numbers: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='In the password policy that you have set, refers to whether you have required users to use at least one number in their password.\n')
    require_symbols: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.\n')
    require_uppercase: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.\n')
    temporary_password_validity_days: typing.Union[int, float, None] = pydantic.Field(None, description="The number of days a temporary password is valid in the password policy. If the user doesn't sign in during this time, an administrator must reset their password. Defaults to ``7`` . If you submit a value of ``0`` , Amazon Cognito treats it as a null value and sets ``TemporaryPasswordValidityDays`` to its default value. .. epigraph:: When you set ``TemporaryPasswordValidityDays`` for a user pool, you can no longer set a value for the legacy ``UnusedAccountValidityDays`` parameter in that user pool.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-passwordpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    password_policy_property = cognito.CfnUserPool.PasswordPolicyProperty(\n        minimum_length=123,\n        require_lowercase=False,\n        require_numbers=False,\n        require_symbols=False,\n        require_uppercase=False,\n        temporary_password_validity_days=123\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['minimum_length', 'require_lowercase', 'require_numbers', 'require_symbols', 'require_uppercase', 'temporary_password_validity_days']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.PasswordPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.PoliciesProperty
class CfnUserPool_PoliciesPropertyDef(BaseStruct):
    password_policy: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_PasswordPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The password policy.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-policies.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    policies_property = cognito.CfnUserPool.PoliciesProperty(\n        password_policy=cognito.CfnUserPool.PasswordPolicyProperty(\n            minimum_length=123,\n            require_lowercase=False,\n            require_numbers=False,\n            require_symbols=False,\n            require_uppercase=False,\n            temporary_password_validity_days=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['password_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.PoliciesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.PreTokenGenerationConfigProperty
class CfnUserPool_PreTokenGenerationConfigPropertyDef(BaseStruct):
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger. This parameter and the ``PreTokenGeneration`` property of ``LambdaConfig`` have the same value. For new instances of pre token generation triggers, set ``LambdaArn`` .\n')
    lambda_version: typing.Optional[str] = pydantic.Field(None, description='The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-pretokengenerationconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    pre_token_generation_config_property = cognito.CfnUserPool.PreTokenGenerationConfigProperty(\n        lambda_arn="lambdaArn",\n        lambda_version="lambdaVersion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_arn', 'lambda_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.PreTokenGenerationConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.RecoveryOptionProperty
class CfnUserPool_RecoveryOptionPropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='Specifies the recovery method for a user.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='A positive integer specifying priority of a method with 1 being the highest priority.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-recoveryoption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    recovery_option_property = cognito.CfnUserPool.RecoveryOptionProperty(\n        name="name",\n        priority=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'priority']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.RecoveryOptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.SchemaAttributeProperty
class CfnUserPool_SchemaAttributePropertyDef(BaseStruct):
    attribute_data_type: typing.Optional[str] = pydantic.Field(None, description='The data format of the values for your attribute. When you choose an ``AttributeDataType`` , Amazon Cognito validates the input against the data type. A custom attribute value in your user\'s ID token is always a string, for example ``"custom:isMember" : "true"`` or ``"custom:YearsAsMember" : "12"`` .\n')
    developer_only_attribute: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='.. epigraph:: We recommend that you use `WriteAttributes <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes>`_ in the user pool client to control how attributes can be mutated for new use cases instead of using ``DeveloperOnlyAttribute`` . Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users will not be able to modify this attribute using their access token.\n')
    mutable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether the value of the attribute can be changed. Any user pool attribute whose value you map from an IdP attribute must be mutable, with a parameter value of ``true`` . Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see `Specifying Identity Provider Attribute Mappings for Your User Pool <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html>`_ .\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of your user pool attribute. When you create or update a user pool, adding a schema attribute creates a custom or developer-only attribute. When you add an attribute with a ``Name`` value of ``MyAttribute`` , Amazon Cognito creates the custom attribute ``custom:MyAttribute`` . When ``DeveloperOnlyAttribute`` is ``true`` , Amazon Cognito creates your attribute as ``dev:MyAttribute`` . In an operation that describes a user pool, Amazon Cognito returns this value as ``value`` for standard attributes, ``custom:value`` for custom attributes, and ``dev:value`` for developer-only attributes..\n')
    number_attribute_constraints: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_NumberAttributeConstraintsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the constraints for an attribute of the number type.\n')
    required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.\n")
    string_attribute_constraints: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_StringAttributeConstraintsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the constraints for an attribute of the string type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-schemaattribute.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    schema_attribute_property = cognito.CfnUserPool.SchemaAttributeProperty(\n        attribute_data_type="attributeDataType",\n        developer_only_attribute=False,\n        mutable=False,\n        name="name",\n        number_attribute_constraints=cognito.CfnUserPool.NumberAttributeConstraintsProperty(\n            max_value="maxValue",\n            min_value="minValue"\n        ),\n        required=False,\n        string_attribute_constraints=cognito.CfnUserPool.StringAttributeConstraintsProperty(\n            max_length="maxLength",\n            min_length="minLength"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attribute_data_type', 'developer_only_attribute', 'mutable', 'name', 'number_attribute_constraints', 'required', 'string_attribute_constraints']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.SchemaAttributeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.SmsConfigurationProperty
class CfnUserPool_SmsConfigurationPropertyDef(BaseStruct):
    external_id: typing.Optional[str] = pydantic.Field(None, description='The external ID is a value. We recommend you use ``ExternalId`` to add security to your IAM role, which is used to call Amazon SNS to send SMS messages for your user pool. If you provide an ``ExternalId`` , the Cognito User Pool uses it when attempting to assume your IAM role. You can also set your roles trust policy to require the ``ExternalID`` . If you use the Cognito Management Console to create a role for SMS MFA, Cognito creates a role with the required permissions and a trust policy that uses ``ExternalId`` .\n')
    sns_caller_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Amazon SNS caller. This is the ARN of the IAM role in your AWS account that Amazon Cognito will use to send SMS messages. SMS messages are subject to a `spending limit <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html>`_ .\n')
    sns_region: typing.Optional[str] = pydantic.Field(None, description='The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported *Legacy Amazon SNS alternate Region* . Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see `SMS message settings for Amazon Cognito user pools <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-smsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    sms_configuration_property = cognito.CfnUserPool.SmsConfigurationProperty(\n        external_id="externalId",\n        sns_caller_arn="snsCallerArn",\n        sns_region="snsRegion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['external_id', 'sns_caller_arn', 'sns_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.SmsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.StringAttributeConstraintsProperty
class CfnUserPool_StringAttributeConstraintsPropertyDef(BaseStruct):
    max_length: typing.Optional[str] = pydantic.Field(None, description='The maximum length of a string attribute value. Must be a number less than or equal to ``2^1023`` , represented as a string with a length of 131072 characters or fewer.\n')
    min_length: typing.Optional[str] = pydantic.Field(None, description='The minimum length.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-stringattributeconstraints.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    string_attribute_constraints_property = cognito.CfnUserPool.StringAttributeConstraintsProperty(\n        max_length="maxLength",\n        min_length="minLength"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_length', 'min_length']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.StringAttributeConstraintsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.UserAttributeUpdateSettingsProperty
class CfnUserPool_UserAttributeUpdateSettingsPropertyDef(BaseStruct):
    attributes_require_verification_before_update: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Requires that your user verifies their email address, phone number, or both before Amazon Cognito updates the value of that attribute. When you update a user attribute that has this option activated, Amazon Cognito sends a verification message to the new phone number or email address. Amazon Cognito doesn’t change the value of the attribute until your user responds to the verification message and confirms the new value. You can verify an updated email address or phone number with a `VerifyUserAttribute <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifyUserAttribute.html>`_ API request. You can also call the `AdminUpdateUserAttributes <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html>`_ API and set ``email_verified`` or ``phone_number_verified`` to true. When ``AttributesRequireVerificationBeforeUpdate`` is false, your user pool doesn\'t require that your users verify attribute changes before Amazon Cognito updates them. In a user pool where ``AttributesRequireVerificationBeforeUpdate`` is false, API operations that change attribute values can immediately update a user’s ``email`` or ``phone_number`` attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-userattributeupdatesettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    user_attribute_update_settings_property = cognito.CfnUserPool.UserAttributeUpdateSettingsProperty(\n        attributes_require_verification_before_update=["attributesRequireVerificationBeforeUpdate"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attributes_require_verification_before_update']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.UserAttributeUpdateSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.UsernameConfigurationProperty
class CfnUserPool_UsernameConfigurationPropertyDef(BaseStruct):
    case_sensitive: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether user name case sensitivity will be applied for all users in the user pool through Amazon Cognito APIs. For most use cases, set case sensitivity to ``False`` (case insensitive) as a best practice. When usernames and email addresses are case insensitive, users can sign in as the same user when they enter a different capitalization of their user name. Valid values include: - **True** - Enables case sensitivity for all username input. When this option is set to ``True`` , users must sign in using the exact capitalization of their given username, such as “UserName”. This is the default value. - **False** - Enables case insensitivity for all username input. For example, when this option is set to ``False`` , users can sign in using ``username`` , ``USERNAME`` , or ``UserName`` . This option also enables both ``preferred_username`` and ``email`` alias to be case insensitive, in addition to the ``username`` attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-usernameconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    username_configuration_property = cognito.CfnUserPool.UsernameConfigurationProperty(\n        case_sensitive=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['case_sensitive']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.UsernameConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.UserPoolAddOnsProperty
class CfnUserPool_UserPoolAddOnsPropertyDef(BaseStruct):
    advanced_security_mode: typing.Optional[str] = pydantic.Field(None, description='The operating mode of advanced security features in your user pool.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-userpooladdons.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    user_pool_add_ons_property = cognito.CfnUserPool.UserPoolAddOnsProperty(\n        advanced_security_mode="advancedSecurityMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['advanced_security_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.UserPoolAddOnsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPool.VerificationMessageTemplateProperty
class CfnUserPool_VerificationMessageTemplatePropertyDef(BaseStruct):
    default_email_option: typing.Optional[str] = pydantic.Field(None, description='The default email option.\n')
    email_message: typing.Optional[str] = pydantic.Field(None, description='The template for email messages that Amazon Cognito sends to your users. You can set an ``EmailMessage`` template only if the value of `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is ``DEVELOPER`` . When your `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is ``DEVELOPER`` , your user pool sends email messages with your own Amazon SES configuration.\n')
    email_message_by_link: typing.Optional[str] = pydantic.Field(None, description='The email message template for sending a confirmation link to the user. You can set an ``EmailMessageByLink`` template only if the value of `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is ``DEVELOPER`` . When your `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is ``DEVELOPER`` , your user pool sends email messages with your own Amazon SES configuration.\n')
    email_subject: typing.Optional[str] = pydantic.Field(None, description='The subject line for the email message template. You can set an ``EmailSubject`` template only if the value of `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is ``DEVELOPER`` . When your `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is ``DEVELOPER`` , your user pool sends email messages with your own Amazon SES configuration.\n')
    email_subject_by_link: typing.Optional[str] = pydantic.Field(None, description='The subject line for the email message template for sending a confirmation link to the user. You can set an ``EmailSubjectByLink`` template only if the value of `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is ``DEVELOPER`` . When your `EmailSendingAccount <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount>`_ is ``DEVELOPER`` , your user pool sends email messages with your own Amazon SES configuration.\n')
    sms_message: typing.Optional[str] = pydantic.Field(None, description='The template for SMS messages that Amazon Cognito sends to your users.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-verificationmessagetemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    verification_message_template_property = cognito.CfnUserPool.VerificationMessageTemplateProperty(\n        default_email_option="defaultEmailOption",\n        email_message="emailMessage",\n        email_message_by_link="emailMessageByLink",\n        email_subject="emailSubject",\n        email_subject_by_link="emailSubjectByLink",\n        sms_message="smsMessage"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_email_option', 'email_message', 'email_message_by_link', 'email_subject', 'email_subject_by_link', 'sms_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool.VerificationMessageTemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolClient.AnalyticsConfigurationProperty
class CfnUserPoolClient_AnalyticsConfigurationPropertyDef(BaseStruct):
    application_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project for integration with the chosen user pool client. Amazon Cognito publishes events to the Amazon Pinpoint project that the app ARN declares.\n')
    application_id: typing.Optional[str] = pydantic.Field(None, description='The application ID for an Amazon Pinpoint application.\n')
    external_id: typing.Optional[str] = pydantic.Field(None, description='The external ID.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of an AWS Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.\n')
    user_data_shared: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='If ``UserDataShared`` is ``true`` , Amazon Cognito includes user data in the events that it publishes to Amazon Pinpoint analytics.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolclient-analyticsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    analytics_configuration_property = cognito.CfnUserPoolClient.AnalyticsConfigurationProperty(\n        application_arn="applicationArn",\n        application_id="applicationId",\n        external_id="externalId",\n        role_arn="roleArn",\n        user_data_shared=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_arn', 'application_id', 'external_id', 'role_arn', 'user_data_shared']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolClient.AnalyticsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolClient.TokenValidityUnitsProperty
class CfnUserPoolClient_TokenValidityUnitsPropertyDef(BaseStruct):
    access_token: typing.Optional[str] = pydantic.Field(None, description='A time unit of ``seconds`` , ``minutes`` , ``hours`` , or ``days`` for the value that you set in the ``AccessTokenValidity`` parameter. The default ``AccessTokenValidity`` time unit is hours. ``AccessTokenValidity`` duration can range from five minutes to one day.\n')
    id_token: typing.Optional[str] = pydantic.Field(None, description='A time unit of ``seconds`` , ``minutes`` , ``hours`` , or ``days`` for the value that you set in the ``IdTokenValidity`` parameter. The default ``IdTokenValidity`` time unit is hours. ``IdTokenValidity`` duration can range from five minutes to one day.\n')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='A time unit of ``seconds`` , ``minutes`` , ``hours`` , or ``days`` for the value that you set in the ``RefreshTokenValidity`` parameter. The default ``RefreshTokenValidity`` time unit is days. ``RefreshTokenValidity`` duration can range from 60 minutes to 10 years.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolclient-tokenvalidityunits.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    token_validity_units_property = cognito.CfnUserPoolClient.TokenValidityUnitsProperty(\n        access_token="accessToken",\n        id_token="idToken",\n        refresh_token="refreshToken"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_token', 'id_token', 'refresh_token']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolClient.TokenValidityUnitsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolDomain.CustomDomainConfigTypeProperty
class CfnUserPoolDomain_CustomDomainConfigTypePropertyDef(BaseStruct):
    certificate_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpooldomain-customdomainconfigtype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    custom_domain_config_type_property = cognito.CfnUserPoolDomain.CustomDomainConfigTypeProperty(\n        certificate_arn="certificateArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolDomain.CustomDomainConfigTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolResourceServer.ResourceServerScopeTypeProperty
class CfnUserPoolResourceServer_ResourceServerScopeTypePropertyDef(BaseStruct):
    scope_description: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A description of the scope.\n')
    scope_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the scope.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolresourceserver-resourceserverscopetype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    resource_server_scope_type_property = cognito.CfnUserPoolResourceServer.ResourceServerScopeTypeProperty(\n        scope_description="scopeDescription",\n        scope_name="scopeName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['scope_description', 'scope_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolResourceServer.ResourceServerScopeTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionsTypeProperty
class CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionsTypePropertyDef(BaseStruct):
    high_action: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Action to take for a high risk.\n')
    low_action: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Action to take for a low risk.\n')
    medium_action: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Action to take for a medium risk.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolriskconfigurationattachment-accounttakeoveractionstype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    account_takeover_actions_type_property = cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionsTypeProperty(\n        high_action=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n            event_action="eventAction",\n            notify=False\n        ),\n        low_action=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n            event_action="eventAction",\n            notify=False\n        ),\n        medium_action=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n            event_action="eventAction",\n            notify=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['high_action', 'low_action', 'medium_action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionsTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty
class CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyDef(BaseStruct):
    event_action: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The action to take in response to the account takeover action. Valid values are as follows:. - ``BLOCK`` Choosing this action will block the request. - ``MFA_IF_CONFIGURED`` Present an MFA challenge if user has configured it, else allow the request. - ``MFA_REQUIRED`` Present an MFA challenge if user has configured it, else block the request. - ``NO_ACTION`` Allow the user to sign in.\n')
    notify: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Flag specifying whether to send a notification.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolriskconfigurationattachment-accounttakeoveractiontype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    account_takeover_action_type_property = cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n        event_action="eventAction",\n        notify=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_action', 'notify']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationTypeProperty
class CfnUserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationTypePropertyDef(BaseStruct):
    actions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionsTypePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Account takeover risk configuration actions.\n')
    notify_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The notify configuration used to construct email notifications.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolriskconfigurationattachment-accounttakeoverriskconfigurationtype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    account_takeover_risk_configuration_type_property = cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationTypeProperty(\n        actions=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionsTypeProperty(\n            high_action=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n                event_action="eventAction",\n                notify=False\n            ),\n            low_action=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n                event_action="eventAction",\n                notify=False\n            ),\n            medium_action=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n                event_action="eventAction",\n                notify=False\n            )\n        ),\n\n        # the properties below are optional\n        notify_configuration=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyConfigurationTypeProperty(\n            source_arn="sourceArn",\n\n            # the properties below are optional\n            block_email=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n                subject="subject",\n\n                # the properties below are optional\n                html_body="htmlBody",\n                text_body="textBody"\n            ),\n            from="from",\n            mfa_email=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n                subject="subject",\n\n                # the properties below are optional\n                html_body="htmlBody",\n                text_body="textBody"\n            ),\n            no_action_email=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n                subject="subject",\n\n                # the properties below are optional\n                html_body="htmlBody",\n                text_body="textBody"\n            ),\n            reply_to="replyTo"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'notify_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsTypeProperty
class CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsTypePropertyDef(BaseStruct):
    event_action: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The event action.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolriskconfigurationattachment-compromisedcredentialsactionstype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    compromised_credentials_actions_type_property = cognito.CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsTypeProperty(\n        event_action="eventAction"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_action']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationTypeProperty
class CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationTypePropertyDef(BaseStruct):
    actions: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsTypePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The compromised credentials risk configuration actions.\n')
    event_filter: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Perform the action for these events. The default is to perform all events if no event filter is specified.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolriskconfigurationattachment-compromisedcredentialsriskconfigurationtype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    compromised_credentials_risk_configuration_type_property = cognito.CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationTypeProperty(\n        actions=cognito.CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsTypeProperty(\n            event_action="eventAction"\n        ),\n\n        # the properties below are optional\n        event_filter=["eventFilter"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'event_filter']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.NotifyConfigurationTypeProperty
class CfnUserPoolRiskConfigurationAttachment_NotifyConfigurationTypePropertyDef(BaseStruct):
    source_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the ``From`` parameter.\n')
    block_email: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Email template used when a detected risk event is blocked.\n')
    from_: typing.Optional[str] = pydantic.Field(None, description='The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.\n')
    mfa_email: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk.\n')
    no_action_email: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The email template used when a detected risk event is allowed.\n')
    reply_to: typing.Optional[str] = pydantic.Field(None, description='The destination to which the receiver of an email should reply to.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolriskconfigurationattachment-notifyconfigurationtype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    notify_configuration_type_property = cognito.CfnUserPoolRiskConfigurationAttachment.NotifyConfigurationTypeProperty(\n        source_arn="sourceArn",\n\n        # the properties below are optional\n        block_email=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n            subject="subject",\n\n            # the properties below are optional\n            html_body="htmlBody",\n            text_body="textBody"\n        ),\n        from="from",\n        mfa_email=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n            subject="subject",\n\n            # the properties below are optional\n            html_body="htmlBody",\n            text_body="textBody"\n        ),\n        no_action_email=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n            subject="subject",\n\n            # the properties below are optional\n            html_body="htmlBody",\n            text_body="textBody"\n        ),\n        reply_to="replyTo"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['source_arn', 'block_email', 'from_', 'mfa_email', 'no_action_email', 'reply_to']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.NotifyConfigurationTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty
class CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyDef(BaseStruct):
    subject: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The email subject.\n')
    html_body: typing.Optional[str] = pydantic.Field(None, description='The email HTML body.\n')
    text_body: typing.Optional[str] = pydantic.Field(None, description='The email text body.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolriskconfigurationattachment-notifyemailtype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    notify_email_type_property = cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n        subject="subject",\n\n        # the properties below are optional\n        html_body="htmlBody",\n        text_body="textBody"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['subject', 'html_body', 'text_body']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.RiskExceptionConfigurationTypeProperty
class CfnUserPoolRiskConfigurationAttachment_RiskExceptionConfigurationTypePropertyDef(BaseStruct):
    blocked_ip_range_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.\n')
    skipped_ip_range_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Risk detection isn\'t performed on the IP addresses in this range list. The IP range is in CIDR notation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpoolriskconfigurationattachment-riskexceptionconfigurationtype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    risk_exception_configuration_type_property = cognito.CfnUserPoolRiskConfigurationAttachment.RiskExceptionConfigurationTypeProperty(\n        blocked_ip_range_list=["blockedIpRangeList"],\n        skipped_ip_range_list=["skippedIpRangeList"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['blocked_ip_range_list', 'skipped_ip_range_list']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment.RiskExceptionConfigurationTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolUser.AttributeTypeProperty
class CfnUserPoolUser_AttributeTypePropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the attribute.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value of the attribute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpooluser-attributetype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    attribute_type_property = cognito.CfnUserPoolUser.AttributeTypeProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolUser.AttributeTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CognitoDomainOptions
class CognitoDomainOptionsDef(BaseStruct):
    domain_prefix: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The prefix to the Cognito hosted domain name that will be associated with the user pool.\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain-prefix.html\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "Pool")\n\n    pool.add_domain("CognitoDomain",\n        cognito_domain=cognito.CognitoDomainOptions(\n            domain_prefix="my-awesome-app"\n        )\n    )\n\n    certificate_arn = "arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d"\n\n    domain_cert = certificatemanager.Certificate.from_certificate_arn(self, "domainCert", certificate_arn)\n    pool.add_domain("CustomDomain",\n        custom_domain=cognito.CustomDomainOptions(\n            domain_name="user.myapp.com",\n            certificate=domain_cert\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CognitoDomainOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CustomAttributeConfig
class CustomAttributeConfigDef(BaseStruct):
    data_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The data type of the custom attribute.\n')
    mutable: typing.Optional[bool] = pydantic.Field(None, description="Specifies whether the value of the attribute can be changed. For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. Default: false\n")
    number_constraints: typing.Union[models.aws_cognito.NumberAttributeConstraintsDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The constraints for a custom attribute of the 'Number' data type. Default: - None.\n")
    string_constraints: typing.Union[models.aws_cognito.StringAttributeConstraintsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The constraints for a custom attribute of \'String\' data type. Default: - None.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    custom_attribute_config = cognito.CustomAttributeConfig(\n        data_type="dataType",\n\n        # the properties below are optional\n        mutable=False,\n        number_constraints=cognito.NumberAttributeConstraints(\n            max=123,\n            min=123\n        ),\n        string_constraints=cognito.StringAttributeConstraints(\n            max_len=123,\n            min_len=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_type', 'mutable', 'number_constraints', 'string_constraints']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CustomAttributeConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CustomAttributeProps
class CustomAttributePropsDef(BaseStruct):
    mutable: typing.Optional[bool] = pydantic.Field(None, description='Specifies whether the value of the attribute can be changed. For any user pool attribute that\'s mapped to an identity provider attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. Default: false\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        standard_attributes=cognito.StandardAttributes(\n            fullname=cognito.StandardAttribute(\n                required=True,\n                mutable=False\n            ),\n            address=cognito.StandardAttribute(\n                required=False,\n                mutable=True\n            )\n        ),\n        custom_attributes={\n            "myappid": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n            "callingcode": cognito.NumberAttribute(min=1, max=3, mutable=True),\n            "isEmployee": cognito.BooleanAttribute(mutable=True),\n            "joinedOn": cognito.DateTimeAttribute()\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mutable']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CustomAttributeProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CustomDomainOptions
class CustomDomainOptionsDef(BaseStruct):
    certificate: typing.Union[_REQUIRED_INIT_PARAM, models.aws_certificatemanager.CertificateDef, models.aws_certificatemanager.DnsValidatedCertificateDef, models.aws_certificatemanager.PrivateCertificateDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The certificate to associate with this domain.\n')
    domain_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The custom domain name that you would like to associate with this User Pool.\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "Pool")\n\n    pool.add_domain("CognitoDomain",\n        cognito_domain=cognito.CognitoDomainOptions(\n            domain_prefix="my-awesome-app"\n        )\n    )\n\n    certificate_arn = "arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d"\n\n    domain_cert = certificatemanager.Certificate.from_certificate_arn(self, "domainCert", certificate_arn)\n    pool.add_domain("CustomDomain",\n        custom_domain=cognito.CustomDomainOptions(\n            domain_name="user.myapp.com",\n            certificate=domain_cert\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate', 'domain_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CustomDomainOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CustomDomainOptionsDefConfig] = pydantic.Field(None)


class CustomDomainOptionsDefConfig(pydantic.BaseModel):
    certificate_config: typing.Optional[models._interface_methods.AwsCertificatemanagerICertificateDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.DeviceTracking
class DeviceTrackingDef(BaseStruct):
    challenge_required_on_new_device: typing.Union[bool, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether a challenge is required on a new device. Only applicable to a new device. Default: false\n')
    device_only_remembered_on_user_prompt: typing.Union[bool, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='If true, a device is only remembered on user prompt. Default: false\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        device_tracking=cognito.DeviceTracking(\n            challenge_required_on_new_device=True,\n            device_only_remembered_on_user_prompt=True\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['challenge_required_on_new_device', 'device_only_remembered_on_user_prompt']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.DeviceTracking'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.EmailSettings
class EmailSettingsDef(BaseStruct):
    from_: typing.Optional[str] = pydantic.Field(None, description="The 'from' address on the emails received by the user. Default: noreply@verificationemail.com\n")
    reply_to: typing.Optional[str] = pydantic.Field(None, description='The \'replyTo\' address on the emails received by the user as defined by IETF RFC-5322. When set, most email clients recognize to change \'to\' line to this address when a reply is drafted. Default: - Not set.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    email_settings = cognito.EmailSettings(\n        from="from",\n        reply_to="replyTo"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['from_', 'reply_to']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.EmailSettings'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.KeepOriginalAttrs
class KeepOriginalAttrsDef(BaseStruct):
    email: typing.Optional[bool] = pydantic.Field(None, description='Whether the email address of the user should remain the original value until the new email address is verified. Default: - false\n')
    phone: typing.Optional[bool] = pydantic.Field(None, description='Whether the phone number of the user should remain the original value until the new phone number is verified. Default: - false\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        sign_in_aliases=cognito.SignInAliases(username=True),\n        auto_verify=cognito.AutoVerifiedAttrs(email=True, phone=True),\n        keep_original=cognito.KeepOriginalAttrs(\n            email=True,\n            phone=True\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email', 'phone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.KeepOriginalAttrs'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.MfaSecondFactor
class MfaSecondFactorDef(BaseStruct):
    otp: typing.Union[bool, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The MFA token is a time-based one time password that is generated by a hardware or software token. Default: false\n')
    sms: typing.Union[bool, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The MFA token is sent to the user via SMS to their verified phone numbers. Default: true\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        mfa=cognito.Mfa.REQUIRED,\n        mfa_second_factor=cognito.MfaSecondFactor(\n            sms=True,\n            otp=True\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['otp', 'sms']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.MfaSecondFactor'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.NumberAttributeConstraints
class NumberAttributeConstraintsDef(BaseStruct):
    max: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum value of this attribute. Default: - no maximum value\n')
    min: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum value of this attribute. Default: - no minimum value\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    number_attribute_constraints = cognito.NumberAttributeConstraints(\n        max=123,\n        min=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max', 'min']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.NumberAttributeConstraints'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.NumberAttributeProps
class NumberAttributePropsDef(BaseStruct):
    max: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum value of this attribute. Default: - no maximum value\n')
    min: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum value of this attribute. Default: - no minimum value\n')
    mutable: typing.Optional[bool] = pydantic.Field(None, description='Specifies whether the value of the attribute can be changed. For any user pool attribute that\'s mapped to an identity provider attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. Default: false\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        standard_attributes=cognito.StandardAttributes(\n            fullname=cognito.StandardAttribute(\n                required=True,\n                mutable=False\n            ),\n            address=cognito.StandardAttribute(\n                required=False,\n                mutable=True\n            )\n        ),\n        custom_attributes={\n            "myappid": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n            "callingcode": cognito.NumberAttribute(min=1, max=3, mutable=True),\n            "isEmployee": cognito.BooleanAttribute(mutable=True),\n            "joinedOn": cognito.DateTimeAttribute()\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max', 'min', 'mutable']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.NumberAttributeProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.OAuthFlows
class OAuthFlowsDef(BaseStruct):
    authorization_code_grant: typing.Optional[bool] = pydantic.Field(None, description='Initiate an authorization code grant flow, which provides an authorization code as the response. Default: false\n')
    client_credentials: typing.Optional[bool] = pydantic.Field(None, description='Client should get the access token and ID token from the token endpoint using a combination of client and client_secret. Default: false\n')
    implicit_code_grant: typing.Optional[bool] = pydantic.Field(None, description='The client should get the access token and ID token directly. Default: false\n\n:see: - the \'Allowed OAuth Flows\' section at https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-app-idp-settings.html\n:exampleMetadata: infused\n\nExample::\n\n    userpool = cognito.UserPool(self, "UserPool")\n    client = userpool.add_client("Client",\n        # ...\n        o_auth=cognito.OAuthSettings(\n            flows=cognito.OAuthFlows(\n                implicit_code_grant=True\n            ),\n            callback_urls=["https://myapp.com/home", "https://myapp.com/users"\n            ]\n        )\n    )\n    domain = userpool.add_domain("Domain")\n    sign_in_url = domain.sign_in_url(client,\n        redirect_uri="https://myapp.com/home"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['authorization_code_grant', 'client_credentials', 'implicit_code_grant']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.OAuthFlows'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.OAuthSettings
class OAuthSettingsDef(BaseStruct):
    callback_urls: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="List of allowed redirect URLs for the identity providers. Default: - ['https://example.com'] if either authorizationCodeGrant or implicitCodeGrant flows are enabled, no callback URLs otherwise.\n")
    default_redirect_uri: typing.Optional[str] = pydantic.Field(None, description='The default redirect URI. Must be in the ``callbackUrls`` list. A redirect URI must: - Be an absolute URI - Be registered with the authorization server. - Not include a fragment component. Default: - no default redirect URI\n')
    flows: typing.Union[models.aws_cognito.OAuthFlowsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='OAuth flows that are allowed with this client. Default: {authorizationCodeGrant:true,implicitCodeGrant:true}\n')
    logout_urls: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='List of allowed logout URLs for the identity providers. Default: - no logout URLs\n')
    scopes: typing.Optional[typing.Sequence[models.aws_cognito.OAuthScopeDef]] = pydantic.Field(None, description='OAuth scopes that are allowed with this client. Default: [OAuthScope.PHONE,OAuthScope.EMAIL,OAuthScope.OPENID,OAuthScope.PROFILE,OAuthScope.COGNITO_ADMIN]\n\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "Pool")\n\n    read_only_scope = cognito.ResourceServerScope(scope_name="read", scope_description="Read-only access")\n    full_access_scope = cognito.ResourceServerScope(scope_name="*", scope_description="Full access")\n\n    user_server = pool.add_resource_server("ResourceServer",\n        identifier="users",\n        scopes=[read_only_scope, full_access_scope]\n    )\n\n    read_only_client = pool.add_client("read-only-client",\n        # ...\n        o_auth=cognito.OAuthSettings(\n            # ...\n            scopes=[cognito.OAuthScope.resource_server(user_server, read_only_scope)]\n        )\n    )\n\n    full_access_client = pool.add_client("full-access-client",\n        # ...\n        o_auth=cognito.OAuthSettings(\n            # ...\n            scopes=[cognito.OAuthScope.resource_server(user_server, full_access_scope)]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['callback_urls', 'default_redirect_uri', 'flows', 'logout_urls', 'scopes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.OAuthSettings'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.OidcEndpoints
class OidcEndpointsDef(BaseStruct):
    authorization: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Authorization endpoint.\n')
    jwks_uri: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Jwks_uri endpoint.\n')
    token: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Token endpoint.\n')
    user_info: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='UserInfo endpoint.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    oidc_endpoints = cognito.OidcEndpoints(\n        authorization="authorization",\n        jwks_uri="jwksUri",\n        token="token",\n        user_info="userInfo"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['authorization', 'jwks_uri', 'token', 'user_info']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.OidcEndpoints'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.PasswordPolicy
class PasswordPolicyDef(BaseStruct):
    min_length: typing.Union[int, float, None] = pydantic.Field(None, description="Minimum length required for a user's password. Default: 8\n")
    require_digits: typing.Optional[bool] = pydantic.Field(None, description='Whether the user is required to have digits in their password. Default: true\n')
    require_lowercase: typing.Optional[bool] = pydantic.Field(None, description='Whether the user is required to have lowercase characters in their password. Default: true\n')
    require_symbols: typing.Optional[bool] = pydantic.Field(None, description='Whether the user is required to have symbols in their password. Default: true\n')
    require_uppercase: typing.Optional[bool] = pydantic.Field(None, description='Whether the user is required to have uppercase characters in their password. Default: true\n')
    temp_password_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The length of time the temporary password generated by an admin is valid. This must be provided as whole days, like Duration.days(3) or Duration.hours(48). Fractional days, such as Duration.hours(20), will generate an error. Default: Duration.days(7)\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        password_policy=cognito.PasswordPolicy(\n            min_length=12,\n            require_lowercase=True,\n            require_uppercase=True,\n            require_digits=True,\n            require_symbols=True,\n            temp_password_validity=Duration.days(3)\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['min_length', 'require_digits', 'require_lowercase', 'require_symbols', 'require_uppercase', 'temp_password_validity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.PasswordPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.ResourceServerScopeProps
class ResourceServerScopePropsDef(BaseStruct):
    scope_description: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A description of the scope.\n')
    scope_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the scope.\n\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "Pool")\n\n    read_only_scope = cognito.ResourceServerScope(scope_name="read", scope_description="Read-only access")\n    full_access_scope = cognito.ResourceServerScope(scope_name="*", scope_description="Full access")\n\n    user_server = pool.add_resource_server("ResourceServer",\n        identifier="users",\n        scopes=[read_only_scope, full_access_scope]\n    )\n\n    read_only_client = pool.add_client("read-only-client",\n        # ...\n        o_auth=cognito.OAuthSettings(\n            # ...\n            scopes=[cognito.OAuthScope.resource_server(user_server, read_only_scope)]\n        )\n    )\n\n    full_access_client = pool.add_client("full-access-client",\n        # ...\n        o_auth=cognito.OAuthSettings(\n            # ...\n            scopes=[cognito.OAuthScope.resource_server(user_server, full_access_scope)]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['scope_description', 'scope_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.ResourceServerScopeProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.SignInAliases
class SignInAliasesDef(BaseStruct):
    email: typing.Optional[bool] = pydantic.Field(None, description='Whether a user is allowed to sign up or sign in with an email address. Default: false\n')
    phone: typing.Optional[bool] = pydantic.Field(None, description='Whether a user is allowed to sign up or sign in with a phone number. Default: false\n')
    preferred_username: typing.Optional[bool] = pydantic.Field(None, description='Whether a user is allowed to sign in with a secondary username, that can be set and modified after sign up. Can only be used in conjunction with ``USERNAME``. Default: false\n')
    username: typing.Optional[bool] = pydantic.Field(None, description='Whether user is allowed to sign up or sign in with a username. Default: true\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        # ...\n        sign_in_aliases=cognito.SignInAliases(username=True, email=True),\n        auto_verify=cognito.AutoVerifiedAttrs(email=True, phone=True)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email', 'phone', 'preferred_username', 'username']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.SignInAliases'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.SignInUrlOptions
class SignInUrlOptionsDef(BaseStruct):
    fips: typing.Optional[bool] = pydantic.Field(None, description='Whether to return the FIPS-compliant endpoint. Default: return the standard URL\n')
    redirect_uri: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Where to redirect to after sign in.\n')
    sign_in_path: typing.Optional[str] = pydantic.Field(None, description='The path in the URI where the sign-in page is located. Default: \'/login\'\n\n:exampleMetadata: infused\n\nExample::\n\n    userpool = cognito.UserPool(self, "UserPool")\n    client = userpool.add_client("Client",\n        # ...\n        o_auth=cognito.OAuthSettings(\n            flows=cognito.OAuthFlows(\n                implicit_code_grant=True\n            ),\n            callback_urls=["https://myapp.com/home", "https://myapp.com/users"\n            ]\n        )\n    )\n    domain = userpool.add_domain("Domain")\n    sign_in_url = domain.sign_in_url(client,\n        redirect_uri="https://myapp.com/home"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['fips', 'redirect_uri', 'sign_in_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.SignInUrlOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.StandardAttribute
class StandardAttributeDef(BaseStruct):
    mutable: typing.Optional[bool] = pydantic.Field(None, description="Specifies whether the value of the attribute can be changed. For any user pool attribute that's mapped to an identity provider attribute, this must be set to ``true``. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. Default: true\n")
    required: typing.Optional[bool] = pydantic.Field(None, description='Specifies whether the attribute is required upon user registration. If the attribute is required and the user does not provide a value, registration or sign-in will fail. Default: false\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        standard_attributes=cognito.StandardAttributes(\n            fullname=cognito.StandardAttribute(\n                required=True,\n                mutable=False\n            ),\n            address=cognito.StandardAttribute(\n                required=False,\n                mutable=True\n            )\n        ),\n        custom_attributes={\n            "myappid": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n            "callingcode": cognito.NumberAttribute(min=1, max=3, mutable=True),\n            "isEmployee": cognito.BooleanAttribute(mutable=True),\n            "joinedOn": cognito.DateTimeAttribute()\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mutable', 'required']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.StandardAttribute'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.StandardAttributes
class StandardAttributesDef(BaseStruct):
    address: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's postal address. Default: - see the defaults under ``StandardAttribute``\n")
    birthdate: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's birthday, represented as an ISO 8601:2004 format. Default: - see the defaults under ``StandardAttribute``\n")
    email: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's e-mail address, represented as an RFC 5322 [RFC5322] addr-spec. Default: - see the defaults under ``StandardAttribute``\n")
    family_name: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The surname or last name of the user. Default: - see the defaults under ``StandardAttribute``\n')
    fullname: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's full name in displayable form, including all name parts, titles and suffixes. Default: - see the defaults under ``StandardAttribute``\n")
    gender: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's gender. Default: - see the defaults under ``StandardAttribute``\n")
    given_name: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's first name or give name. Default: - see the defaults under ``StandardAttribute``\n")
    last_update_time: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The time, the user's information was last updated. Default: - see the defaults under ``StandardAttribute``\n")
    locale: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's locale, represented as a BCP47 [RFC5646] language tag. Default: - see the defaults under ``StandardAttribute``\n")
    middle_name: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's middle name. Default: - see the defaults under ``StandardAttribute``\n")
    nickname: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's nickname or casual name. Default: - see the defaults under ``StandardAttribute``\n")
    phone_number: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's telephone number. Default: - see the defaults under ``StandardAttribute``\n")
    preferred_username: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's preffered username, different from the immutable user name. Default: - see the defaults under ``StandardAttribute``\n")
    profile_page: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The URL to the user's profile page. Default: - see the defaults under ``StandardAttribute``\n")
    profile_picture: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The URL to the user's profile picture. Default: - see the defaults under ``StandardAttribute``\n")
    timezone: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user's time zone. Default: - see the defaults under ``StandardAttribute``\n")
    website: typing.Union[models.aws_cognito.StandardAttributeDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The URL to the user\'s web page or blog. Default: - see the defaults under ``StandardAttribute``\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        standard_attributes=cognito.StandardAttributes(\n            fullname=cognito.StandardAttribute(\n                required=True,\n                mutable=False\n            ),\n            address=cognito.StandardAttribute(\n                required=False,\n                mutable=True\n            )\n        ),\n        custom_attributes={\n            "myappid": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n            "callingcode": cognito.NumberAttribute(min=1, max=3, mutable=True),\n            "isEmployee": cognito.BooleanAttribute(mutable=True),\n            "joinedOn": cognito.DateTimeAttribute()\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['address', 'birthdate', 'email', 'family_name', 'fullname', 'gender', 'given_name', 'last_update_time', 'locale', 'middle_name', 'nickname', 'phone_number', 'preferred_username', 'profile_page', 'profile_picture', 'timezone', 'website']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.StandardAttributes'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.StandardAttributesMask
class StandardAttributesMaskDef(BaseStruct):
    address: typing.Optional[bool] = pydantic.Field(None, description="The user's postal address. Default: false\n")
    birthdate: typing.Optional[bool] = pydantic.Field(None, description="The user's birthday, represented as an ISO 8601:2004 format. Default: false\n")
    email: typing.Optional[bool] = pydantic.Field(None, description="The user's e-mail address, represented as an RFC 5322 [RFC5322] addr-spec. Default: false\n")
    email_verified: typing.Optional[bool] = pydantic.Field(None, description='Whether the email address has been verified. Default: false\n')
    family_name: typing.Optional[bool] = pydantic.Field(None, description='The surname or last name of the user. Default: false\n')
    fullname: typing.Optional[bool] = pydantic.Field(None, description="The user's full name in displayable form, including all name parts, titles and suffixes. Default: false\n")
    gender: typing.Optional[bool] = pydantic.Field(None, description="The user's gender. Default: false\n")
    given_name: typing.Optional[bool] = pydantic.Field(None, description="The user's first name or give name. Default: false\n")
    last_update_time: typing.Optional[bool] = pydantic.Field(None, description="The time, the user's information was last updated. Default: false\n")
    locale: typing.Optional[bool] = pydantic.Field(None, description="The user's locale, represented as a BCP47 [RFC5646] language tag. Default: false\n")
    middle_name: typing.Optional[bool] = pydantic.Field(None, description="The user's middle name. Default: false\n")
    nickname: typing.Optional[bool] = pydantic.Field(None, description="The user's nickname or casual name. Default: false\n")
    phone_number: typing.Optional[bool] = pydantic.Field(None, description="The user's telephone number. Default: false\n")
    phone_number_verified: typing.Optional[bool] = pydantic.Field(None, description='Whether the phone number has been verified. Default: false\n')
    preferred_username: typing.Optional[bool] = pydantic.Field(None, description="The user's preffered username, different from the immutable user name. Default: false\n")
    profile_page: typing.Optional[bool] = pydantic.Field(None, description="The URL to the user's profile page. Default: false\n")
    profile_picture: typing.Optional[bool] = pydantic.Field(None, description="The URL to the user's profile picture. Default: false\n")
    timezone: typing.Optional[bool] = pydantic.Field(None, description="The user's time zone. Default: false\n")
    website: typing.Optional[bool] = pydantic.Field(None, description='The URL to the user\'s web page or blog. Default: false\n\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "Pool")\n\n    client_write_attributes = (cognito.ClientAttributes()).with_standard_attributes(fullname=True, email=True).with_custom_attributes("favouritePizza", "favouriteBeverage")\n\n    client_read_attributes = client_write_attributes.with_standard_attributes(email_verified=True).with_custom_attributes("pointsEarned")\n\n    pool.add_client("app-client",\n        # ...\n        read_attributes=client_read_attributes,\n        write_attributes=client_write_attributes\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['address', 'birthdate', 'email', 'email_verified', 'family_name', 'fullname', 'gender', 'given_name', 'last_update_time', 'locale', 'middle_name', 'nickname', 'phone_number', 'phone_number_verified', 'preferred_username', 'profile_page', 'profile_picture', 'timezone', 'website']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.StandardAttributesMask'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.StringAttributeConstraints
class StringAttributeConstraintsDef(BaseStruct):
    max_len: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum length of this attribute. Default: 2048\n')
    min_len: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum length of this attribute. Default: 0\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    string_attribute_constraints = cognito.StringAttributeConstraints(\n        max_len=123,\n        min_len=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_len', 'min_len']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.StringAttributeConstraints'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.StringAttributeProps
class StringAttributePropsDef(BaseStruct):
    max_len: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum length of this attribute. Default: 2048\n')
    min_len: typing.Union[int, float, None] = pydantic.Field(None, description='Minimum length of this attribute. Default: 0\n')
    mutable: typing.Optional[bool] = pydantic.Field(None, description='Specifies whether the value of the attribute can be changed. For any user pool attribute that\'s mapped to an identity provider attribute, you must set this parameter to true. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. Default: false\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        standard_attributes=cognito.StandardAttributes(\n            fullname=cognito.StandardAttribute(\n                required=True,\n                mutable=False\n            ),\n            address=cognito.StandardAttribute(\n                required=False,\n                mutable=True\n            )\n        ),\n        custom_attributes={\n            "myappid": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n            "callingcode": cognito.NumberAttribute(min=1, max=3, mutable=True),\n            "isEmployee": cognito.BooleanAttribute(mutable=True),\n            "joinedOn": cognito.DateTimeAttribute()\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_len', 'min_len', 'mutable']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.StringAttributeProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.UserInvitationConfig
class UserInvitationConfigDef(BaseStruct):
    email_body: typing.Optional[str] = pydantic.Field(None, description="The template to the email body that is sent to the user when an administrator signs them up to the user pool. Default: 'Your username is {username} and temporary password is {####}.'\n")
    email_subject: typing.Optional[str] = pydantic.Field(None, description="The template to the email subject that is sent to the user when an administrator signs them up to the user pool. Default: 'Your temporary password'\n")
    sms_message: typing.Optional[str] = pydantic.Field(None, description='The template to the SMS message that is sent to the user when an administrator signs them up to the user pool. Default: \'Your username is {username} and temporary password is {####}\'\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        user_invitation=cognito.UserInvitationConfig(\n            email_subject="Invite to join our awesome app!",\n            email_body="Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}",\n            sms_message="Hello {username}, your temporary password for our awesome app is {####}"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email_body', 'email_subject', 'sms_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserInvitationConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.UserPoolClientOptions
class UserPoolClientOptionsDef(BaseStruct):
    access_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the access token. Values between 5 minutes and 1 day are valid. The duration can not be longer than the refresh token validity. Default: Duration.minutes(60)\n')
    auth_flows: typing.Union[models.aws_cognito.AuthFlowDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The set of OAuth authentication flows to enable on the client. Default: - If you don't specify a value, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH.\n")
    auth_session_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. see defaults in ``AuthSessionValidity``. Valid duration is from 3 to 15 minutes. Default: - Duration.minutes(3)\n')
    disable_o_auth: typing.Optional[bool] = pydantic.Field(None, description='Turns off all OAuth interactions for this client. Default: false\n')
    enable_propagate_additional_user_context_data: typing.Optional[bool] = pydantic.Field(None, description='Enable the propagation of additional user context data. You can only activate enablePropagateAdditionalUserContextData in an app client that has a client secret. Default: false for new user pool clients\n')
    enable_token_revocation: typing.Optional[bool] = pydantic.Field(None, description='Enable token revocation for this client. Default: true for new user pool clients\n')
    generate_secret: typing.Optional[bool] = pydantic.Field(None, description='Whether to generate a client secret. Default: false\n')
    id_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the ID token. Values between 5 minutes and 1 day are valid. The duration can not be longer than the refresh token validity. Default: Duration.minutes(60)\n')
    o_auth: typing.Union[models.aws_cognito.OAuthSettingsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='OAuth settings for this client to interact with the app. An error is thrown when this is specified and ``disableOAuth`` is set. Default: - see defaults in ``OAuthSettings``. meaningless if ``disableOAuth`` is set.\n')
    prevent_user_existence_errors: typing.Optional[bool] = pydantic.Field(None, description="Whether Cognito returns a UserNotFoundException exception when the user does not exist in the user pool (false), or whether it returns another type of error that doesn't reveal the user's absence. Default: false\n")
    read_attributes: typing.Optional[models.aws_cognito.ClientAttributesDef] = pydantic.Field(None, description='The set of attributes this client will be able to read. Default: - all standard and custom attributes\n')
    refresh_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the refresh token. Values between 60 minutes and 10 years are valid. Default: Duration.days(30)\n')
    supported_identity_providers: typing.Optional[typing.Sequence[models.aws_cognito.UserPoolClientIdentityProviderDef]] = pydantic.Field(None, description='The list of identity providers that users should be able to use to sign in using this client. Default: - supports all identity providers that are registered with the user pool. If the user pool and/or identity providers are imported, either specify this option explicitly or ensure that the identity providers are registered with the user pool using the ``UserPool.registerIdentityProvider()`` API.\n')
    user_pool_client_name: typing.Optional[str] = pydantic.Field(None, description='Name of the application client. Default: - cloudformation generated name\n')
    write_attributes: typing.Optional[models.aws_cognito.ClientAttributesDef] = pydantic.Field(None, description='The set of attributes this client will be able to write. Default: - all standard and custom attributes\n\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "Pool")\n    pool.add_client("app-client",\n        o_auth=cognito.OAuthSettings(\n            flows=cognito.OAuthFlows(\n                authorization_code_grant=True\n            ),\n            scopes=[cognito.OAuthScope.OPENID],\n            callback_urls=["https://my-app-domain.com/welcome"],\n            logout_urls=["https://my-app-domain.com/signin"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_token_validity', 'auth_flows', 'auth_session_validity', 'disable_o_auth', 'enable_propagate_additional_user_context_data', 'enable_token_revocation', 'generate_secret', 'id_token_validity', 'o_auth', 'prevent_user_existence_errors', 'read_attributes', 'refresh_token_validity', 'supported_identity_providers', 'user_pool_client_name', 'write_attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolClientOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.UserPoolClientProps
class UserPoolClientPropsDef(BaseStruct):
    access_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the access token. Values between 5 minutes and 1 day are valid. The duration can not be longer than the refresh token validity. Default: Duration.minutes(60)\n')
    auth_flows: typing.Union[models.aws_cognito.AuthFlowDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The set of OAuth authentication flows to enable on the client. Default: - If you don't specify a value, your user client supports ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_SRP_AUTH, and ALLOW_CUSTOM_AUTH.\n")
    auth_session_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration, in minutes, of that session token. see defaults in ``AuthSessionValidity``. Valid duration is from 3 to 15 minutes. Default: - Duration.minutes(3)\n')
    disable_o_auth: typing.Optional[bool] = pydantic.Field(None, description='Turns off all OAuth interactions for this client. Default: false\n')
    enable_propagate_additional_user_context_data: typing.Optional[bool] = pydantic.Field(None, description='Enable the propagation of additional user context data. You can only activate enablePropagateAdditionalUserContextData in an app client that has a client secret. Default: false for new user pool clients\n')
    enable_token_revocation: typing.Optional[bool] = pydantic.Field(None, description='Enable token revocation for this client. Default: true for new user pool clients\n')
    generate_secret: typing.Optional[bool] = pydantic.Field(None, description='Whether to generate a client secret. Default: false\n')
    id_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the ID token. Values between 5 minutes and 1 day are valid. The duration can not be longer than the refresh token validity. Default: Duration.minutes(60)\n')
    o_auth: typing.Union[models.aws_cognito.OAuthSettingsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='OAuth settings for this client to interact with the app. An error is thrown when this is specified and ``disableOAuth`` is set. Default: - see defaults in ``OAuthSettings``. meaningless if ``disableOAuth`` is set.\n')
    prevent_user_existence_errors: typing.Optional[bool] = pydantic.Field(None, description="Whether Cognito returns a UserNotFoundException exception when the user does not exist in the user pool (false), or whether it returns another type of error that doesn't reveal the user's absence. Default: false\n")
    read_attributes: typing.Optional[models.aws_cognito.ClientAttributesDef] = pydantic.Field(None, description='The set of attributes this client will be able to read. Default: - all standard and custom attributes\n')
    refresh_token_validity: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Validity of the refresh token. Values between 60 minutes and 10 years are valid. Default: Duration.days(30)\n')
    supported_identity_providers: typing.Optional[typing.Sequence[models.aws_cognito.UserPoolClientIdentityProviderDef]] = pydantic.Field(None, description='The list of identity providers that users should be able to use to sign in using this client. Default: - supports all identity providers that are registered with the user pool. If the user pool and/or identity providers are imported, either specify this option explicitly or ensure that the identity providers are registered with the user pool using the ``UserPool.registerIdentityProvider()`` API.\n')
    user_pool_client_name: typing.Optional[str] = pydantic.Field(None, description='Name of the application client. Default: - cloudformation generated name\n')
    write_attributes: typing.Optional[models.aws_cognito.ClientAttributesDef] = pydantic.Field(None, description='The set of attributes this client will be able to write. Default: - all standard and custom attributes\n')
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The UserPool resource this client will have access to.\n\n:exampleMetadata: infused\n\nExample::\n\n    # imported_pool: cognito.UserPool\n\n\n    user_pool_client = cognito.UserPoolClient(self, "UserPoolClient",\n        user_pool=imported_pool,\n        generate_secret=True\n    )\n\n    # Allows you to pass the generated secret to other pieces of infrastructure\n    secret = user_pool_client.user_pool_client_secret\n')
    _init_params: typing.ClassVar[list[str]] = ['access_token_validity', 'auth_flows', 'auth_session_validity', 'disable_o_auth', 'enable_propagate_additional_user_context_data', 'enable_token_revocation', 'generate_secret', 'id_token_validity', 'o_auth', 'prevent_user_existence_errors', 'read_attributes', 'refresh_token_validity', 'supported_identity_providers', 'user_pool_client_name', 'write_attributes', 'user_pool']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolClientProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolClientPropsDefConfig] = pydantic.Field(None)


class UserPoolClientPropsDefConfig(pydantic.BaseModel):
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolDomainOptions
class UserPoolDomainOptionsDef(BaseStruct):
    cognito_domain: typing.Union[models.aws_cognito.CognitoDomainOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Associate a cognito prefix domain with your user pool Either ``customDomain`` or ``cognitoDomain`` must be specified. Default: - not set if ``customDomain`` is specified, otherwise, throws an error.\n')
    custom_domain: typing.Union[models.aws_cognito.CustomDomainOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Associate a custom domain with your user pool Either ``customDomain`` or ``cognitoDomain`` must be specified. Default: - not set if ``cognitoDomain`` is specified, otherwise, throws an error.\n\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "Pool")\n\n    pool.add_domain("CognitoDomain",\n        cognito_domain=cognito.CognitoDomainOptions(\n            domain_prefix="my-awesome-app"\n        )\n    )\n\n    certificate_arn = "arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d"\n\n    domain_cert = certificatemanager.Certificate.from_certificate_arn(self, "domainCert", certificate_arn)\n    pool.add_domain("CustomDomain",\n        custom_domain=cognito.CustomDomainOptions(\n            domain_name="user.myapp.com",\n            certificate=domain_cert\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cognito_domain', 'custom_domain']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolDomainOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.UserPoolDomainProps
class UserPoolDomainPropsDef(BaseStruct):
    cognito_domain: typing.Union[models.aws_cognito.CognitoDomainOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Associate a cognito prefix domain with your user pool Either ``customDomain`` or ``cognitoDomain`` must be specified. Default: - not set if ``customDomain`` is specified, otherwise, throws an error.\n')
    custom_domain: typing.Union[models.aws_cognito.CustomDomainOptionsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Associate a custom domain with your user pool Either ``customDomain`` or ``cognitoDomain`` must be specified. Default: - not set if ``cognitoDomain`` is specified, otherwise, throws an error.\n')
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this domain should be associated.\n\n:exampleMetadata: infused\n\nExample::\n\n    from aws_cdk import aws_certificatemanager as acm\n\n    # vpc: ec2.Vpc\n    # certificate: acm.Certificate\n\n\n    lb = elbv2.ApplicationLoadBalancer(self, "LB",\n        vpc=vpc,\n        internet_facing=True\n    )\n\n    user_pool = cognito.UserPool(self, "UserPool")\n    user_pool_client = cognito.UserPoolClient(self, "Client",\n        user_pool=user_pool,\n\n        # Required minimal configuration for use with an ELB\n        generate_secret=True,\n        auth_flows=cognito.AuthFlow(\n            user_password=True\n        ),\n        o_auth=cognito.OAuthSettings(\n            flows=cognito.OAuthFlows(\n                authorization_code_grant=True\n            ),\n            scopes=[cognito.OAuthScope.EMAIL],\n            callback_urls=[f"https://{lb.loadBalancerDnsName}/oauth2/idpresponse"\n            ]\n        )\n    )\n    cfn_client = user_pool_client.node.default_child\n    cfn_client.add_property_override("RefreshTokenValidity", 1)\n    cfn_client.add_property_override("SupportedIdentityProviders", ["COGNITO"])\n\n    user_pool_domain = cognito.UserPoolDomain(self, "Domain",\n        user_pool=user_pool,\n        cognito_domain=cognito.CognitoDomainOptions(\n            domain_prefix="test-cdk-prefix"\n        )\n    )\n\n    lb.add_listener("Listener",\n        port=443,\n        certificates=[certificate],\n        default_action=actions.AuthenticateCognitoAction(\n            user_pool=user_pool,\n            user_pool_client=user_pool_client,\n            user_pool_domain=user_pool_domain,\n            next=elbv2.ListenerAction.fixed_response(200,\n                content_type="text/plain",\n                message_body="Authenticated"\n            )\n        )\n    )\n\n    CfnOutput(self, "DNS",\n        value=lb.load_balancer_dns_name\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cognito_domain', 'custom_domain', 'user_pool']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolDomainProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolDomainPropsDefConfig] = pydantic.Field(None)


class UserPoolDomainPropsDefConfig(pydantic.BaseModel):
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderAmazonProps
class UserPoolIdentityProviderAmazonPropsDef(BaseStruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping\n')
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id recognized by Login with Amazon APIs.\n')
    client_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client secret to be accompanied with clientId for Login with Amazon APIs to authenticate the client.\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The types of user profile data to obtain for the Amazon profile. Default: [ profile ]\n\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "Pool")\n    provider = cognito.UserPoolIdentityProviderAmazon(self, "Amazon",\n        user_pool=pool,\n        client_id="amzn-client-id",\n        client_secret="amzn-client-secret"\n    )\n\n    client = pool.add_client("app-client",\n        # ...\n        supported_identity_providers=[cognito.UserPoolClientIdentityProvider.AMAZON\n        ]\n    )\n\n    client.node.add_dependency(provider)\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'attribute_mapping', 'client_id', 'client_secret', 'scopes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderAmazonProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderAmazonPropsDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderAmazonPropsDefConfig(pydantic.BaseModel):
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderAppleProps
class UserPoolIdentityProviderApplePropsDef(BaseStruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping\n')
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id recognized by Apple APIs.\n')
    key_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The keyId (of the same key, which content has to be later supplied as ``privateKey``) for Apple APIs to authenticate the client.\n')
    private_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The privateKey content for Apple APIs to authenticate the client.\n')
    team_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The teamId for Apple APIs to authenticate the client.\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of apple permissions to obtain for getting access to the apple profile. Default: [ name ]\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    # provider_attribute: cognito.ProviderAttribute\n    # user_pool: cognito.UserPool\n\n    user_pool_identity_provider_apple_props = cognito.UserPoolIdentityProviderAppleProps(\n        client_id="clientId",\n        key_id="keyId",\n        private_key="privateKey",\n        team_id="teamId",\n        user_pool=user_pool,\n\n        # the properties below are optional\n        attribute_mapping=cognito.AttributeMapping(\n            address=provider_attribute,\n            birthdate=provider_attribute,\n            custom={\n                "custom_key": provider_attribute\n            },\n            email=provider_attribute,\n            family_name=provider_attribute,\n            fullname=provider_attribute,\n            gender=provider_attribute,\n            given_name=provider_attribute,\n            last_update_time=provider_attribute,\n            locale=provider_attribute,\n            middle_name=provider_attribute,\n            nickname=provider_attribute,\n            phone_number=provider_attribute,\n            preferred_username=provider_attribute,\n            profile_page=provider_attribute,\n            profile_picture=provider_attribute,\n            timezone=provider_attribute,\n            website=provider_attribute\n        ),\n        scopes=["scopes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'attribute_mapping', 'client_id', 'key_id', 'private_key', 'team_id', 'scopes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderAppleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderApplePropsDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderApplePropsDefConfig(pydantic.BaseModel):
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderFacebookProps
class UserPoolIdentityProviderFacebookPropsDef(BaseStruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping\n')
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id recognized by Facebook APIs.\n')
    client_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client secret to be accompanied with clientId for Facebook to authenticate the client.\n')
    api_version: typing.Optional[str] = pydantic.Field(None, description='The Facebook API version to use. Default: - to the oldest version supported by Facebook\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of Facebook permissions to obtain for getting access to the Facebook profile. Default: [ public_profile ]\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    # provider_attribute: cognito.ProviderAttribute\n    # user_pool: cognito.UserPool\n\n    user_pool_identity_provider_facebook_props = cognito.UserPoolIdentityProviderFacebookProps(\n        client_id="clientId",\n        client_secret="clientSecret",\n        user_pool=user_pool,\n\n        # the properties below are optional\n        api_version="apiVersion",\n        attribute_mapping=cognito.AttributeMapping(\n            address=provider_attribute,\n            birthdate=provider_attribute,\n            custom={\n                "custom_key": provider_attribute\n            },\n            email=provider_attribute,\n            family_name=provider_attribute,\n            fullname=provider_attribute,\n            gender=provider_attribute,\n            given_name=provider_attribute,\n            last_update_time=provider_attribute,\n            locale=provider_attribute,\n            middle_name=provider_attribute,\n            nickname=provider_attribute,\n            phone_number=provider_attribute,\n            preferred_username=provider_attribute,\n            profile_page=provider_attribute,\n            profile_picture=provider_attribute,\n            timezone=provider_attribute,\n            website=provider_attribute\n        ),\n        scopes=["scopes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'attribute_mapping', 'client_id', 'client_secret', 'api_version', 'scopes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderFacebookProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderFacebookPropsDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderFacebookPropsDefConfig(pydantic.BaseModel):
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderGoogleProps
class UserPoolIdentityProviderGooglePropsDef(BaseStruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping\n')
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id recognized by Google APIs.\n')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='(deprecated) The client secret to be accompanied with clientId for Google APIs to authenticate the client. Default: none\n')
    client_secret_value: typing.Optional[models.SecretValueDef] = pydantic.Field(None, description='The client secret to be accompanied with clientId for Google APIs to authenticate the client as SecretValue. Default: none\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of Google permissions to obtain for getting access to the Google profile. Default: [ profile ]\n\n:exampleMetadata: infused\n\nExample::\n\n    userpool = cognito.UserPool(self, "Pool")\n    secret = secretsmanager.Secret.from_secret_attributes(self, "CognitoClientSecret",\n        secret_complete_arn="arn:aws:secretsmanager:xxx:xxx:secret:xxx-xxx"\n    ).secret_value\n\n    provider = cognito.UserPoolIdentityProviderGoogle(self, "Google",\n        client_id="amzn-client-id",\n        client_secret_value=secret,\n        user_pool=userpool\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'attribute_mapping', 'client_id', 'client_secret', 'client_secret_value', 'scopes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderGoogleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderGooglePropsDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderGooglePropsDefConfig(pydantic.BaseModel):
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderOidcProps
class UserPoolIdentityProviderOidcPropsDef(BaseStruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping\n')
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client id.\n')
    client_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client secret.\n')
    issuer_url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Issuer URL.\n')
    attribute_request_method: typing.Optional[aws_cdk.aws_cognito.OidcAttributeRequestMethod] = pydantic.Field(None, description='The method to use to request attributes. Default: OidcAttributeRequestMethod.GET\n')
    endpoints: typing.Union[models.aws_cognito.OidcEndpointsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='OpenID connect endpoints. Default: - auto discovered with issuer URL\n')
    identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Identifiers. Identifiers can be used to redirect users to the correct IdP in multitenant apps. Default: - no identifiers used\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the provider. Default: - the unique ID of the construct\n')
    scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The OAuth 2.0 scopes that you will request from OpenID Connect. Scopes are groups of OpenID Connect user attributes to exchange with your app. Default: [\'openid\']\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    # provider_attribute: cognito.ProviderAttribute\n    # user_pool: cognito.UserPool\n\n    user_pool_identity_provider_oidc_props = cognito.UserPoolIdentityProviderOidcProps(\n        client_id="clientId",\n        client_secret="clientSecret",\n        issuer_url="issuerUrl",\n        user_pool=user_pool,\n\n        # the properties below are optional\n        attribute_mapping=cognito.AttributeMapping(\n            address=provider_attribute,\n            birthdate=provider_attribute,\n            custom={\n                "custom_key": provider_attribute\n            },\n            email=provider_attribute,\n            family_name=provider_attribute,\n            fullname=provider_attribute,\n            gender=provider_attribute,\n            given_name=provider_attribute,\n            last_update_time=provider_attribute,\n            locale=provider_attribute,\n            middle_name=provider_attribute,\n            nickname=provider_attribute,\n            phone_number=provider_attribute,\n            preferred_username=provider_attribute,\n            profile_page=provider_attribute,\n            profile_picture=provider_attribute,\n            timezone=provider_attribute,\n            website=provider_attribute\n        ),\n        attribute_request_method=cognito.OidcAttributeRequestMethod.GET,\n        endpoints=cognito.OidcEndpoints(\n            authorization="authorization",\n            jwks_uri="jwksUri",\n            token="token",\n            user_info="userInfo"\n        ),\n        identifiers=["identifiers"],\n        name="name",\n        scopes=["scopes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'attribute_mapping', 'client_id', 'client_secret', 'issuer_url', 'attribute_request_method', 'endpoints', 'identifiers', 'name', 'scopes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderOidcProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderOidcPropsDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderOidcPropsDefConfig(pydantic.BaseModel):
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderProps
class UserPoolIdentityProviderPropsDef(BaseStruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    # provider_attribute: cognito.ProviderAttribute\n    # user_pool: cognito.UserPool\n\n    user_pool_identity_provider_props = cognito.UserPoolIdentityProviderProps(\n        user_pool=user_pool,\n\n        # the properties below are optional\n        attribute_mapping=cognito.AttributeMapping(\n            address=provider_attribute,\n            birthdate=provider_attribute,\n            custom={\n                "custom_key": provider_attribute\n            },\n            email=provider_attribute,\n            family_name=provider_attribute,\n            fullname=provider_attribute,\n            gender=provider_attribute,\n            given_name=provider_attribute,\n            last_update_time=provider_attribute,\n            locale=provider_attribute,\n            middle_name=provider_attribute,\n            nickname=provider_attribute,\n            phone_number=provider_attribute,\n            preferred_username=provider_attribute,\n            profile_page=provider_attribute,\n            profile_picture=provider_attribute,\n            timezone=provider_attribute,\n            website=provider_attribute\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'attribute_mapping']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderPropsDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderPropsDefConfig(pydantic.BaseModel):
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderSamlProps
class UserPoolIdentityProviderSamlPropsDef(BaseStruct):
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to which this construct provides identities.\n')
    attribute_mapping: typing.Union[models.aws_cognito.AttributeMappingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Mapping attributes from the identity provider to standard and custom attributes of the user pool. Default: - no attribute mapping\n')
    metadata: typing.Union[models.aws_cognito.UserPoolIdentityProviderSamlMetadataDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SAML metadata.\n')
    encrypted_responses: typing.Optional[bool] = pydantic.Field(None, description='Whether to require encrypted SAML assertions from IdP. Default: false\n')
    identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Identifiers. Identifiers can be used to redirect users to the correct IdP in multitenant apps. Default: - no identifiers used\n')
    idp_initiated: typing.Optional[bool] = pydantic.Field(None, description='Whether to enable IdP-initiated SAML auth flows. Default: false\n')
    idp_signout: typing.Optional[bool] = pydantic.Field(None, description='Whether to enable the "Sign-out flow" feature. Default: - false\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the provider. Must be between 3 and 32 characters. Default: - the unique ID of the construct\n')
    request_signing_algorithm: typing.Optional[aws_cdk.aws_cognito.SigningAlgorithm] = pydantic.Field(None, description='The signing algorithm for SAML requests. Default: - don\'t sign requests\n\n:exampleMetadata: infused\n\nExample::\n\n    userpool = cognito.UserPool(self, "Pool")\n\n    # specify the metadata as a file content\n    cognito.UserPoolIdentityProviderSaml(self, "userpoolIdpFile",\n        user_pool=userpool,\n        metadata=cognito.UserPoolIdentityProviderSamlMetadata.file("my-file-contents"),\n        # Whether to require encrypted SAML assertions from IdP\n        encrypted_responses=True,\n        # The signing algorithm for the SAML requests\n        request_signing_algorithm=cognito.SigningAlgorithm.RSA_SHA256,\n        # Enable IdP initiated SAML auth flow\n        idp_initiated=True\n    )\n\n    # specify the metadata as a URL\n    cognito.UserPoolIdentityProviderSaml(self, "userpoolidpUrl",\n        user_pool=userpool,\n        metadata=cognito.UserPoolIdentityProviderSamlMetadata.url("https://my-metadata-url.com")\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool', 'attribute_mapping', 'metadata', 'encrypted_responses', 'identifiers', 'idp_initiated', 'idp_signout', 'name', 'request_signing_algorithm']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolIdentityProviderSamlProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderSamlPropsDefConfig] = pydantic.Field(None)


class UserPoolIdentityProviderSamlPropsDefConfig(pydantic.BaseModel):
    metadata_config: typing.Optional[models.aws_cognito.UserPoolIdentityProviderSamlMetadataDefConfig] = pydantic.Field(None)
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolProps
class UserPoolPropsDef(BaseStruct):
    account_recovery: typing.Optional[aws_cdk.aws_cognito.AccountRecovery] = pydantic.Field(None, description='How will a user be able to recover their account? Default: AccountRecovery.PHONE_WITHOUT_MFA_AND_EMAIL\n')
    advanced_security_mode: typing.Optional[aws_cdk.aws_cognito.AdvancedSecurityMode] = pydantic.Field(None, description="The user pool's Advanced Security Mode. Default: - no value\n")
    auto_verify: typing.Union[models.aws_cognito.AutoVerifiedAttrsDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Attributes which Cognito will look to verify automatically upon user sign up. EMAIL and PHONE are the only available options. Default: - If ``signInAlias`` includes email and/or phone, they will be included in ``autoVerifiedAttributes`` by default. If absent, no attributes will be auto-verified.\n')
    custom_attributes: typing.Optional[typing.Mapping[str, typing.Union[models.aws_cognito.BooleanAttributeDef, models.aws_cognito.DateTimeAttributeDef, models.aws_cognito.NumberAttributeDef, models.aws_cognito.StringAttributeDef]]] = pydantic.Field(None, description='Define a set of custom attributes that can be configured for each user in the user pool. Default: - No custom attributes.\n')
    custom_sender_kms_key: typing.Optional[typing.Union[models.aws_kms.KeyDef]] = pydantic.Field(None, description='This key will be used to encrypt temporary passwords and authorization codes that Amazon Cognito generates. Default: - no key ID configured\n')
    deletion_protection: typing.Optional[bool] = pydantic.Field(None, description='Indicates whether the user pool should have deletion protection enabled. Default: false\n')
    device_tracking: typing.Union[models.aws_cognito.DeviceTrackingDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Device tracking settings. Default: - see defaults on each property of DeviceTracking.\n')
    email: typing.Optional[models.aws_cognito.UserPoolEmailDef] = pydantic.Field(None, description='Email settings for a user pool. Default: - cognito will use the default email configuration\n')
    enable_sms_role: typing.Optional[bool] = pydantic.Field(None, description='Setting this would explicitly enable or disable SMS role creation. When left unspecified, CDK will determine based on other properties if a role is needed or not. Default: - CDK will determine based on other properties of the user pool if an SMS role should be created or not.\n')
    keep_original: typing.Union[models.aws_cognito.KeepOriginalAttrsDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Attributes which Cognito will look to handle changes to the value of your users' email address and phone number attributes. EMAIL and PHONE are the only available options. Default: - Nothing is kept.\n")
    lambda_triggers: typing.Union[models.aws_cognito.UserPoolTriggersDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Lambda functions to use for supported Cognito triggers. Default: - No Lambda triggers.\n')
    mfa: typing.Optional[aws_cdk.aws_cognito.Mfa] = pydantic.Field(None, description='Configure whether users of this user pool can or are required use MFA to sign in. Default: Mfa.OFF\n')
    mfa_message: typing.Optional[str] = pydantic.Field(None, description="The SMS message template sent during MFA verification. Use '{####}' in the template where Cognito should insert the verification code. Default: 'Your authentication code is {####}.'\n")
    mfa_second_factor: typing.Union[models.aws_cognito.MfaSecondFactorDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configure the MFA types that users can use in this user pool. Ignored if ``mfa`` is set to ``OFF``. Default: - { sms: true, otp: false }, if ``mfa`` is set to ``OPTIONAL`` or ``REQUIRED``. { sms: false, otp: false }, otherwise\n')
    password_policy: typing.Union[models.aws_cognito.PasswordPolicyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Password policy for this user pool. Default: - see defaults on each property of PasswordPolicy.\n')
    removal_policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='Policy to apply when the user pool is removed from the stack. Default: RemovalPolicy.RETAIN\n')
    self_sign_up_enabled: typing.Optional[bool] = pydantic.Field(None, description='Whether self sign-up should be enabled. To configure self sign-up configuration use the ``userVerification`` property. Default: - false\n')
    sign_in_aliases: typing.Union[models.aws_cognito.SignInAliasesDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Methods in which a user registers or signs in to a user pool. Allows either username with aliases OR sign in with email, phone, or both. Read the sections on usernames and aliases to learn more - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html To match with 'Option 1' in the above link, with a verified email, this property should be set to ``{ username: true, email: true }``. To match with 'Option 2' in the above link with both a verified email and phone number, this property should be set to ``{ email: true, phone: true }``. Default: { username: true }\n")
    sign_in_case_sensitive: typing.Optional[bool] = pydantic.Field(None, description='Whether sign-in aliases should be evaluated with case sensitivity. For example, when this option is set to false, users will be able to sign in using either ``MyUsername`` or ``myusername``. Default: true\n')
    sms_role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description='The IAM role that Cognito will assume while sending SMS messages. Default: - a new IAM role is created.\n')
    sms_role_external_id: typing.Optional[str] = pydantic.Field(None, description="The 'ExternalId' that Cognito service must be using when assuming the ``smsRole``, if the role is restricted with an 'sts:ExternalId' conditional. Learn more about ExternalId here - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html This property will be ignored if ``smsRole`` is not specified. Default: - No external id will be configured.\n")
    sns_region: typing.Optional[str] = pydantic.Field(None, description='The region to integrate with SNS to send SMS messages. This property will do nothing if SMS configuration is not configured. Default: - The same region as the user pool, with a few exceptions - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html#user-pool-sms-settings-first-time\n')
    standard_attributes: typing.Union[models.aws_cognito.StandardAttributesDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The set of attributes that are required for every user in the user pool. Read more on attributes here - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html Default: - All standard attributes are optional and mutable.\n')
    user_invitation: typing.Union[models.aws_cognito.UserInvitationConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration around admins signing up users into a user pool. Default: - see defaults in UserInvitationConfig.\n')
    user_pool_name: typing.Optional[str] = pydantic.Field(None, description='Name of the user pool. Default: - automatically generated name by CloudFormation at deploy time.\n')
    user_verification: typing.Union[models.aws_cognito.UserVerificationConfigDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration around users signing themselves up to the user pool. Enable or disable self sign-up via the ``selfSignUpEnabled`` property. Default: - see defaults in UserVerificationConfig.\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        self_sign_up_enabled=True,\n        user_verification=cognito.UserVerificationConfig(\n            email_subject="Verify your email for our awesome app!",\n            email_body="Thanks for signing up to our awesome app! Your verification code is {####}",\n            email_style=cognito.VerificationEmailStyle.CODE,\n            sms_message="Thanks for signing up to our awesome app! Your verification code is {####}"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['account_recovery', 'advanced_security_mode', 'auto_verify', 'custom_attributes', 'custom_sender_kms_key', 'deletion_protection', 'device_tracking', 'email', 'enable_sms_role', 'keep_original', 'lambda_triggers', 'mfa', 'mfa_message', 'mfa_second_factor', 'password_policy', 'removal_policy', 'self_sign_up_enabled', 'sign_in_aliases', 'sign_in_case_sensitive', 'sms_role', 'sms_role_external_id', 'sns_region', 'standard_attributes', 'user_invitation', 'user_pool_name', 'user_verification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.UserPoolResourceServerOptions
class UserPoolResourceServerOptionsDef(BaseStruct):
    identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique resource server identifier for the resource server.\n')
    scopes: typing.Optional[typing.Sequence[models.aws_cognito.ResourceServerScopeDef]] = pydantic.Field(None, description='Oauth scopes. Default: - No scopes will be added\n')
    user_pool_resource_server_name: typing.Optional[str] = pydantic.Field(None, description='A friendly name for the resource server. Default: - same as ``identifier``\n\n:exampleMetadata: infused\n\nExample::\n\n    pool = cognito.UserPool(self, "Pool")\n\n    read_only_scope = cognito.ResourceServerScope(scope_name="read", scope_description="Read-only access")\n    full_access_scope = cognito.ResourceServerScope(scope_name="*", scope_description="Full access")\n\n    user_server = pool.add_resource_server("ResourceServer",\n        identifier="users",\n        scopes=[read_only_scope, full_access_scope]\n    )\n\n    read_only_client = pool.add_client("read-only-client",\n        # ...\n        o_auth=cognito.OAuthSettings(\n            # ...\n            scopes=[cognito.OAuthScope.resource_server(user_server, read_only_scope)]\n        )\n    )\n\n    full_access_client = pool.add_client("full-access-client",\n        # ...\n        o_auth=cognito.OAuthSettings(\n            # ...\n            scopes=[cognito.OAuthScope.resource_server(user_server, full_access_scope)]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['identifier', 'scopes', 'user_pool_resource_server_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolResourceServerOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.UserPoolResourceServerProps
class UserPoolResourceServerPropsDef(BaseStruct):
    identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique resource server identifier for the resource server.\n')
    scopes: typing.Optional[typing.Sequence[models.aws_cognito.ResourceServerScopeDef]] = pydantic.Field(None, description='Oauth scopes. Default: - No scopes will be added\n')
    user_pool_resource_server_name: typing.Optional[str] = pydantic.Field(None, description='A friendly name for the resource server. Default: - same as ``identifier``\n')
    user_pool: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cognito.UserPoolDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool to add this resource server to.\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    # resource_server_scope: cognito.ResourceServerScope\n    # user_pool: cognito.UserPool\n\n    user_pool_resource_server_props = cognito.UserPoolResourceServerProps(\n        identifier="identifier",\n        user_pool=user_pool,\n\n        # the properties below are optional\n        scopes=[resource_server_scope],\n        user_pool_resource_server_name="userPoolResourceServerName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['identifier', 'scopes', 'user_pool_resource_server_name', 'user_pool']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolResourceServerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.UserPoolResourceServerPropsDefConfig] = pydantic.Field(None)


class UserPoolResourceServerPropsDefConfig(pydantic.BaseModel):
    user_pool_config: typing.Optional[models._interface_methods.AwsCognitoIUserPoolDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cognito.UserPoolSESOptions
class UserPoolSESOptionsDef(BaseStruct):
    from_email: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The verified Amazon SES email address that Cognito should use to send emails. The email address used must be a verified email address in Amazon SES and must be configured to allow Cognito to send emails.\n')
    configuration_set_name: typing.Optional[str] = pydantic.Field(None, description='The name of a configuration set in Amazon SES that should be applied to emails sent via Cognito. Default: - no configuration set\n')
    from_name: typing.Optional[str] = pydantic.Field(None, description="An optional name that should be used as the sender's name along with the email. Default: - no name\n")
    reply_to: typing.Optional[str] = pydantic.Field(None, description='The destination to which the receiver of the email should reply to. Default: - same as the fromEmail\n')
    ses_region: typing.Optional[str] = pydantic.Field(None, description='Required if the UserPool region is different than the SES region. If sending emails with a Amazon SES verified email address, and the region that SES is configured is different than the region in which the UserPool is deployed, you must specify that region here. Default: - The same region as the Cognito UserPool\n')
    ses_verified_domain: typing.Optional[str] = pydantic.Field(None, description='SES Verified custom domain to be used to verify the identity. Default: - no domain\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        email=cognito.UserPoolEmail.with_sES(\n            from_email="noreply@myawesomeapp.com",\n            from_name="Awesome App",\n            reply_to="support@myawesomeapp.com"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['from_email', 'configuration_set_name', 'from_name', 'reply_to', 'ses_region', 'ses_verified_domain']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolSESOptions'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.UserPoolTriggers
class UserPoolTriggersDef(BaseStruct):
    create_auth_challenge: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='Creates an authentication challenge. Default: - no trigger configured\n')
    custom_email_sender: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='Amazon Cognito invokes this trigger to send email notifications to users. Default: - no trigger configured\n')
    custom_message: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='A custom Message AWS Lambda trigger. Default: - no trigger configured\n')
    custom_sms_sender: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='Amazon Cognito invokes this trigger to send SMS notifications to users. Default: - no trigger configured\n')
    define_auth_challenge: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='Defines the authentication challenge. Default: - no trigger configured\n')
    post_authentication: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='A post-authentication AWS Lambda trigger. Default: - no trigger configured\n')
    post_confirmation: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='A post-confirmation AWS Lambda trigger. Default: - no trigger configured\n')
    pre_authentication: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='A pre-authentication AWS Lambda trigger. Default: - no trigger configured\n')
    pre_sign_up: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='A pre-registration AWS Lambda trigger. Default: - no trigger configured\n')
    pre_token_generation: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='A pre-token-generation AWS Lambda trigger. Default: - no trigger configured\n')
    user_migration: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='A user-migration AWS Lambda trigger. Default: - no trigger configured\n')
    verify_auth_challenge_response: typing.Optional[typing.Union[models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef]] = pydantic.Field(None, description='Verifies the authentication challenge response. Default: - no trigger configured\n\n:see: https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html\n:exampleMetadata: infused\n\nExample::\n\n    auth_challenge_fn = lambda_.Function(self, "authChallengeFn",\n        runtime=lambda_.Runtime.NODEJS_LATEST,\n        handler="index.handler",\n        code=lambda_.Code.from_asset(path.join(__dirname, "path/to/asset"))\n    )\n\n    userpool = cognito.UserPool(self, "myuserpool",\n        # ...\n        lambda_triggers=cognito.UserPoolTriggers(\n            create_auth_challenge=auth_challenge_fn\n        )\n    )\n\n    userpool.add_trigger(cognito.UserPoolOperation.USER_MIGRATION, lambda_.Function(self, "userMigrationFn",\n        runtime=lambda_.Runtime.NODEJS_LATEST,\n        handler="index.handler",\n        code=lambda_.Code.from_asset(path.join(__dirname, "path/to/asset"))\n    ))\n')
    _init_params: typing.ClassVar[list[str]] = ['create_auth_challenge', 'custom_email_sender', 'custom_message', 'custom_sms_sender', 'define_auth_challenge', 'post_authentication', 'post_confirmation', 'pre_authentication', 'pre_sign_up', 'pre_token_generation', 'user_migration', 'verify_auth_challenge_response']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserPoolTriggers'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.UserVerificationConfig
class UserVerificationConfigDef(BaseStruct):
    email_body: typing.Optional[str] = pydantic.Field(None, description="The email body template for the verification email sent to the user upon sign up. See https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-templates.html to learn more about message templates. Default: - 'The verification code to your new account is {####}' if VerificationEmailStyle.CODE is chosen, 'Verify your account by clicking on {##Verify Email##}' if VerificationEmailStyle.LINK is chosen.\n")
    email_style: typing.Optional[aws_cdk.aws_cognito.VerificationEmailStyle] = pydantic.Field(None, description='Emails can be verified either using a code or a link. Learn more at https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-email-verification-message-customization.html Default: VerificationEmailStyle.CODE\n')
    email_subject: typing.Optional[str] = pydantic.Field(None, description="The email subject template for the verification email sent to the user upon sign up. See https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-templates.html to learn more about message templates. Default: 'Verify your new account'\n")
    sms_message: typing.Optional[str] = pydantic.Field(None, description='The message template for the verification SMS sent to the user upon sign up. See https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-templates.html to learn more about message templates. Default: - \'The verification code to your new account is {####}\' if VerificationEmailStyle.CODE is chosen, not configured if VerificationEmailStyle.LINK is chosen\n\n:exampleMetadata: infused\n\nExample::\n\n    cognito.UserPool(self, "myuserpool",\n        # ...\n        self_sign_up_enabled=True,\n        user_verification=cognito.UserVerificationConfig(\n            email_subject="Verify your email for our awesome app!",\n            email_body="Thanks for signing up to our awesome app! Your verification code is {####}",\n            email_style=cognito.VerificationEmailStyle.CODE,\n            sms_message="Thanks for signing up to our awesome app! Your verification code is {####}"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email_body', 'email_style', 'email_subject', 'sms_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.UserVerificationConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.AccountRecovery
# skipping emum

#  autogenerated from aws_cdk.aws_cognito.AdvancedSecurityMode
# skipping emum

#  autogenerated from aws_cdk.aws_cognito.LambdaVersion
# skipping emum

#  autogenerated from aws_cdk.aws_cognito.Mfa
# skipping emum

#  autogenerated from aws_cdk.aws_cognito.OidcAttributeRequestMethod
# skipping emum

#  autogenerated from aws_cdk.aws_cognito.SigningAlgorithm
# skipping emum

#  autogenerated from aws_cdk.aws_cognito.UserPoolIdentityProviderSamlMetadataType
# skipping emum

#  autogenerated from aws_cdk.aws_cognito.VerificationEmailStyle
# skipping emum

#  autogenerated from aws_cdk.aws_cognito.ICustomAttribute
#  skipping Interface

#  autogenerated from aws_cdk.aws_cognito.IUserPool
#  skipping Interface

#  autogenerated from aws_cdk.aws_cognito.IUserPoolClient
#  skipping Interface

#  autogenerated from aws_cdk.aws_cognito.IUserPoolDomain
#  skipping Interface

#  autogenerated from aws_cdk.aws_cognito.IUserPoolIdentityProvider
#  skipping Interface

#  autogenerated from aws_cdk.aws_cognito.IUserPoolResourceServer
#  skipping Interface

#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPool
class CfnIdentityPoolDef(BaseCfnResource):
    allow_unauthenticated_identities: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the identity pool supports unauthenticated logins.\n')
    allow_classic_flow: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Enables the Basic (Classic) authentication flow.\n')
    cognito_events: typing.Any = pydantic.Field(None, description='The events to configure.\n')
    cognito_identity_providers: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPool_CognitoIdentityProviderPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon Cognito user pools and their client IDs.\n')
    cognito_streams: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPool_CognitoStreamsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration options for configuring Amazon Cognito streams.\n')
    developer_provider_name: typing.Optional[str] = pydantic.Field(None, description='The "domain" Amazon Cognito uses when referencing your users. This name acts as a placeholder that allows your backend and the Amazon Cognito service to communicate about the developer provider. For the ``DeveloperProviderName`` , you can use letters and periods (.), underscores (_), and dashes (-). *Minimum length* : 1 *Maximum length* : 100\n')
    identity_pool_name: typing.Optional[str] = pydantic.Field(None, description='The name of your Amazon Cognito identity pool. *Minimum length* : 1 *Maximum length* : 128 *Pattern* : ``[\\w\\s+=,.@-]+``\n')
    open_id_connect_provider_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Names (ARNs) of the OpenID connect providers.\n')
    push_sync: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPool_PushSyncPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration options to be applied to the identity pool.\n')
    saml_provider_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Names (ARNs) of the Security Assertion Markup Language (SAML) providers.\n')
    supported_login_providers: typing.Any = pydantic.Field(None, description='Key-value pairs that map provider names to provider app IDs.')
    _init_params: typing.ClassVar[list[str]] = ['allow_unauthenticated_identities', 'allow_classic_flow', 'cognito_events', 'cognito_identity_providers', 'cognito_streams', 'developer_provider_name', 'identity_pool_name', 'open_id_connect_provider_arns', 'push_sync', 'saml_provider_arns', 'supported_login_providers']
    _method_names: typing.ClassVar[list[str]] = ['CognitoIdentityProviderProperty', 'CognitoStreamsProperty', 'PushSyncProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPool'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnIdentityPoolDefConfig] = pydantic.Field(None)


class CfnIdentityPoolDefConfig(pydantic.BaseModel):
    CognitoIdentityProviderProperty: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefCognitoidentityproviderpropertyParams]] = pydantic.Field(None, description='')
    CognitoStreamsProperty: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefCognitostreamspropertyParams]] = pydantic.Field(None, description='')
    PushSyncProperty: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefPushsyncpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnIdentityPoolDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnIdentityPoolDefCognitoidentityproviderpropertyParams(pydantic.BaseModel):
    client_id: str = pydantic.Field(..., description='')
    provider_name: str = pydantic.Field(..., description='')
    server_side_token_check: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnIdentityPoolDefCognitostreamspropertyParams(pydantic.BaseModel):
    role_arn: typing.Optional[str] = pydantic.Field(None, description='')
    streaming_status: typing.Optional[str] = pydantic.Field(None, description='')
    stream_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnIdentityPoolDefPushsyncpropertyParams(pydantic.BaseModel):
    application_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnIdentityPoolDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnIdentityPoolDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIdentityPoolDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnIdentityPoolDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIdentityPoolDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnIdentityPoolDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnIdentityPoolDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnIdentityPoolDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnIdentityPoolDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnIdentityPoolDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIdentityPoolDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnIdentityPoolDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnIdentityPoolDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIdentityPoolDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPoolPrincipalTag
class CfnIdentityPoolPrincipalTagDef(BaseCfnResource):
    identity_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identity pool that you want to associate with this principal tag map.\n')
    identity_provider_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identity pool identity provider (IdP) that you want to associate with this principal tag map.\n')
    principal_tags: typing.Any = pydantic.Field(None, description="A JSON-formatted list of user claims and the principal tags that you want to associate with them. When Amazon Cognito requests credentials, it sets the value of the principal tag to the value of the user's claim.\n")
    use_defaults: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Use a default set of mappings between claims and tags for this provider, instead of a custom map.')
    _init_params: typing.ClassVar[list[str]] = ['identity_pool_id', 'identity_provider_name', 'principal_tags', 'use_defaults']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPoolPrincipalTag'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnIdentityPoolPrincipalTagDefConfig] = pydantic.Field(None)


class CfnIdentityPoolPrincipalTagDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnIdentityPoolPrincipalTagDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnIdentityPoolPrincipalTagDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnIdentityPoolPrincipalTagDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIdentityPoolPrincipalTagDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnIdentityPoolPrincipalTagDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIdentityPoolPrincipalTagDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnIdentityPoolPrincipalTagDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnIdentityPoolPrincipalTagDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnIdentityPoolPrincipalTagDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnIdentityPoolPrincipalTagDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnIdentityPoolPrincipalTagDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIdentityPoolPrincipalTagDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnIdentityPoolPrincipalTagDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnIdentityPoolPrincipalTagDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIdentityPoolPrincipalTagDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachment
class CfnIdentityPoolRoleAttachmentDef(BaseCfnResource):
    identity_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An identity pool ID in the format ``REGION:GUID`` .\n')
    role_mappings: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPoolRoleAttachment_RoleMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="How users for a specific identity provider are mapped to roles. This is a string to the ``RoleMapping`` object map. The string identifies the identity provider. For example: ``graph.facebook.com`` or ``cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id`` . If the ``IdentityProvider`` field isn't provided in this object, the string is used as the identity provider name. For more information, see the `RoleMapping property <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypoolroleattachment-rolemapping.html>`_ .\n")
    roles: typing.Any = pydantic.Field(None, description='The map of the roles associated with this pool. For a given role, the key is either "authenticated" or "unauthenticated". The value is the role ARN.')
    _init_params: typing.ClassVar[list[str]] = ['identity_pool_id', 'role_mappings', 'roles']
    _method_names: typing.ClassVar[list[str]] = ['MappingRuleProperty', 'RoleMappingProperty', 'RulesConfigurationTypeProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefConfig] = pydantic.Field(None)


class CfnIdentityPoolRoleAttachmentDefConfig(pydantic.BaseModel):
    MappingRuleProperty: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefMappingrulepropertyParams]] = pydantic.Field(None, description='')
    RoleMappingProperty: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefRolemappingpropertyParams]] = pydantic.Field(None, description='')
    RulesConfigurationTypeProperty: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefRulesconfigurationtypepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnIdentityPoolRoleAttachmentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnIdentityPoolRoleAttachmentDefMappingrulepropertyParams(pydantic.BaseModel):
    claim: str = pydantic.Field(..., description='')
    match_type: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnIdentityPoolRoleAttachmentDefRolemappingpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    ambiguous_role_resolution: typing.Optional[str] = pydantic.Field(None, description='')
    identity_provider: typing.Optional[str] = pydantic.Field(None, description='')
    rules_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPoolRoleAttachment_RulesConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnIdentityPoolRoleAttachmentDefRulesconfigurationtypepropertyParams(pydantic.BaseModel):
    rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPoolRoleAttachment_MappingRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnIdentityPoolRoleAttachmentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnIdentityPoolRoleAttachmentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIdentityPoolRoleAttachmentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnIdentityPoolRoleAttachmentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIdentityPoolRoleAttachmentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnIdentityPoolRoleAttachmentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnIdentityPoolRoleAttachmentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnIdentityPoolRoleAttachmentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnIdentityPoolRoleAttachmentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnIdentityPoolRoleAttachmentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIdentityPoolRoleAttachmentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnIdentityPoolRoleAttachmentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnIdentityPoolRoleAttachmentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIdentityPoolRoleAttachmentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnLogDeliveryConfiguration
class CfnLogDeliveryConfigurationDef(BaseCfnResource):
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the user pool where you configured detailed activity logging.\n')
    log_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnLogDeliveryConfiguration_LogConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The detailed activity logging destination of a user pool.')
    _init_params: typing.ClassVar[list[str]] = ['user_pool_id', 'log_configurations']
    _method_names: typing.ClassVar[list[str]] = ['CloudWatchLogsConfigurationProperty', 'LogConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnLogDeliveryConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnLogDeliveryConfigurationDefConfig] = pydantic.Field(None)


class CfnLogDeliveryConfigurationDefConfig(pydantic.BaseModel):
    CloudWatchLogsConfigurationProperty: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefCloudwatchlogsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    LogConfigurationProperty: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefLogconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnLogDeliveryConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnLogDeliveryConfigurationDefCloudwatchlogsconfigurationpropertyParams(pydantic.BaseModel):
    log_group_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLogDeliveryConfigurationDefLogconfigurationpropertyParams(pydantic.BaseModel):
    cloud_watch_logs_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnLogDeliveryConfiguration_CloudWatchLogsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    event_source: typing.Optional[str] = pydantic.Field(None, description='')
    log_level: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLogDeliveryConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLogDeliveryConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLogDeliveryConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLogDeliveryConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLogDeliveryConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLogDeliveryConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLogDeliveryConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLogDeliveryConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLogDeliveryConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLogDeliveryConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLogDeliveryConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnLogDeliveryConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLogDeliveryConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLogDeliveryConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPool
class CfnUserPoolDef(BaseCfnResource):
    account_recovery_setting: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_AccountRecoverySettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use this setting to define which verified available method a user can use to recover their password when they call ``ForgotPassword`` . It allows you to define a preferred method when a user has more than one method available. With this setting, SMS does not qualify for a valid password recovery mechanism if the user also has SMS MFA enabled. In the absence of this setting, Cognito uses the legacy behavior to determine the recovery method where SMS is preferred over email.\n')
    admin_create_user_config: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_AdminCreateUserConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for creating a new user profile.\n')
    alias_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Attributes supported as an alias for this user pool. Possible values: *phone_number* , *email* , or *preferred_username* . .. epigraph:: This user pool property cannot be updated.\n')
    auto_verified_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The attributes to be auto-verified. Possible values: *email* , *phone_number* .\n')
    deletion_protection: typing.Optional[str] = pydantic.Field(None, description='When active, ``DeletionProtection`` prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. When you try to delete a protected user pool in a ``DeleteUserPool`` API request, Amazon Cognito returns an ``InvalidParameterException`` error. To delete a protected user pool, send a new ``DeleteUserPool`` request after you deactivate deletion protection in an ``UpdateUserPool`` API request.\n')
    device_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_DeviceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. .. epigraph:: When you provide a value for any ``DeviceConfiguration`` field, you activate the Amazon Cognito device-remembering feature.\n')
    email_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_EmailConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The email configuration of your user pool. The email configuration type sets your preferred sending method, AWS Region, and sender for messages from your user pool.\n')
    email_verification_message: typing.Optional[str] = pydantic.Field(None, description='This parameter is no longer used. See `VerificationMessageTemplateType <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html>`_ .\n')
    email_verification_subject: typing.Optional[str] = pydantic.Field(None, description='This parameter is no longer used. See `VerificationMessageTemplateType <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html>`_ .\n')
    enabled_mfas: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Enables MFA on a specified user pool. To disable all MFAs after it has been enabled, set MfaConfiguration to “OFF” and remove EnabledMfas. MFAs can only be all disabled if MfaConfiguration is OFF. Once SMS_MFA is enabled, SMS_MFA can only be disabled by setting MfaConfiguration to “OFF”. Can be one of the following values: - ``SMS_MFA`` - Enables SMS MFA for the user pool. SMS_MFA can only be enabled if SMS configuration is provided. - ``SOFTWARE_TOKEN_MFA`` - Enables software token MFA for the user pool. Allowed values: ``SMS_MFA`` | ``SOFTWARE_TOKEN_MFA``\n')
    lambda_config: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_LambdaConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Lambda trigger configuration information for the new user pool. .. epigraph:: In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you must make an extra call to add permission for these event sources to invoke your Lambda function. For more information on using the Lambda API to add permission, see `AddPermission <https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html>`_ . For adding permission using the AWS CLI , see `add-permission <https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html>`_ .\n')
    mfa_configuration: typing.Optional[str] = pydantic.Field(None, description="The multi-factor authentication (MFA) configuration. Valid values include:. - ``OFF`` MFA won't be used for any users. - ``ON`` MFA is required for all users to sign in. - ``OPTIONAL`` MFA will be required only for individual users who have an MFA factor activated.\n")
    policies: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_PoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The policy associated with a user pool.\n')
    schema_: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_SchemaAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The schema attributes for the new user pool. These attributes can be standard or custom attributes. .. epigraph:: During a user pool update, you can add new schema attributes but you cannot modify or delete an existing schema attribute.\n', alias='schema')
    sms_authentication_message: typing.Optional[str] = pydantic.Field(None, description='A string representing the SMS authentication message.\n')
    sms_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_SmsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your AWS account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the AWS Region that you want, the Amazon Cognito user pool uses an AWS Identity and Access Management (IAM) role in your AWS account .\n')
    sms_verification_message: typing.Optional[str] = pydantic.Field(None, description='This parameter is no longer used. See `VerificationMessageTemplateType <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html>`_ .\n')
    user_attribute_update_settings: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_UserAttributeUpdateSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The settings for updates to user attributes. These settings include the property ``AttributesRequireVerificationBeforeUpdate`` , a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see `Verifying updates to email addresses and phone numbers <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates>`_ .\n")
    username_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Determines whether email addresses or phone numbers can be specified as user names when a user signs up. Possible values: ``phone_number`` or ``email`` . This user pool property cannot be updated.\n')
    username_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_UsernameConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can choose to set case sensitivity on the username input for the selected sign-in option. For example, when this is set to ``False`` , users will be able to sign in using either "username" or "Username". This configuration is immutable once it has been set.\n')
    user_pool_add_ons: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_UserPoolAddOnsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='User pool add-ons. Contains settings for activation of advanced security features. To log user security information but take no action, set to ``AUDIT`` . To configure automatic security responses to risky traffic to your user pool, set to ``ENFORCED`` . For more information, see `Adding advanced security to a user pool <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html>`_ .\n')
    user_pool_name: typing.Optional[str] = pydantic.Field(None, description='A string used to name the user pool.\n')
    user_pool_tags: typing.Any = pydantic.Field(None, description='The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.\n')
    verification_message_template: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_VerificationMessageTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The template for the verification message that the user sees when the app requests permission to access the user's information.")
    _init_params: typing.ClassVar[list[str]] = ['account_recovery_setting', 'admin_create_user_config', 'alias_attributes', 'auto_verified_attributes', 'deletion_protection', 'device_configuration', 'email_configuration', 'email_verification_message', 'email_verification_subject', 'enabled_mfas', 'lambda_config', 'mfa_configuration', 'policies', 'schema', 'sms_authentication_message', 'sms_configuration', 'sms_verification_message', 'user_attribute_update_settings', 'username_attributes', 'username_configuration', 'user_pool_add_ons', 'user_pool_name', 'user_pool_tags', 'verification_message_template']
    _method_names: typing.ClassVar[list[str]] = ['AccountRecoverySettingProperty', 'AdminCreateUserConfigProperty', 'CustomEmailSenderProperty', 'CustomSMSSenderProperty', 'DeviceConfigurationProperty', 'EmailConfigurationProperty', 'InviteMessageTemplateProperty', 'LambdaConfigProperty', 'NumberAttributeConstraintsProperty', 'PasswordPolicyProperty', 'PoliciesProperty', 'PreTokenGenerationConfigProperty', 'RecoveryOptionProperty', 'SchemaAttributeProperty', 'SmsConfigurationProperty', 'StringAttributeConstraintsProperty', 'UserAttributeUpdateSettingsProperty', 'UserPoolAddOnsProperty', 'UsernameConfigurationProperty', 'VerificationMessageTemplateProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPool'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolDefConfig] = pydantic.Field(None)


class CfnUserPoolDefConfig(pydantic.BaseModel):
    AccountRecoverySettingProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefAccountrecoverysettingpropertyParams]] = pydantic.Field(None, description='')
    AdminCreateUserConfigProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefAdmincreateuserconfigpropertyParams]] = pydantic.Field(None, description='')
    CustomEmailSenderProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefCustomemailsenderpropertyParams]] = pydantic.Field(None, description='')
    CustomSMSSenderProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefCustomsmssenderpropertyParams]] = pydantic.Field(None, description='')
    DeviceConfigurationProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefDeviceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    EmailConfigurationProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefEmailconfigurationpropertyParams]] = pydantic.Field(None, description='')
    InviteMessageTemplateProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefInvitemessagetemplatepropertyParams]] = pydantic.Field(None, description='')
    LambdaConfigProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefLambdaconfigpropertyParams]] = pydantic.Field(None, description='')
    NumberAttributeConstraintsProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefNumberattributeconstraintspropertyParams]] = pydantic.Field(None, description='')
    PasswordPolicyProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefPasswordpolicypropertyParams]] = pydantic.Field(None, description='')
    PoliciesProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefPoliciespropertyParams]] = pydantic.Field(None, description='')
    PreTokenGenerationConfigProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefPretokengenerationconfigpropertyParams]] = pydantic.Field(None, description='')
    RecoveryOptionProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefRecoveryoptionpropertyParams]] = pydantic.Field(None, description='')
    SchemaAttributeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefSchemaattributepropertyParams]] = pydantic.Field(None, description='')
    SmsConfigurationProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefSmsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    StringAttributeConstraintsProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefStringattributeconstraintspropertyParams]] = pydantic.Field(None, description='')
    UserAttributeUpdateSettingsProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefUserattributeupdatesettingspropertyParams]] = pydantic.Field(None, description='')
    UserPoolAddOnsProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefUserpooladdonspropertyParams]] = pydantic.Field(None, description='')
    UsernameConfigurationProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefUsernameconfigurationpropertyParams]] = pydantic.Field(None, description='')
    VerificationMessageTemplateProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDefVerificationmessagetemplatepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnUserPoolDefAccountrecoverysettingpropertyParams(pydantic.BaseModel):
    recovery_mechanisms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_RecoveryOptionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefAdmincreateuserconfigpropertyParams(pydantic.BaseModel):
    allow_admin_create_user_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    invite_message_template: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_InviteMessageTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    unused_account_validity_days: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefCustomemailsenderpropertyParams(pydantic.BaseModel):
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='')
    lambda_version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefCustomsmssenderpropertyParams(pydantic.BaseModel):
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='')
    lambda_version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefDeviceconfigurationpropertyParams(pydantic.BaseModel):
    challenge_required_on_new_device: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    device_only_remembered_on_user_prompt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefEmailconfigurationpropertyParams(pydantic.BaseModel):
    configuration_set: typing.Optional[str] = pydantic.Field(None, description='')
    email_sending_account: typing.Optional[str] = pydantic.Field(None, description='')
    from_: typing.Optional[str] = pydantic.Field(None, description='')
    reply_to_email_address: typing.Optional[str] = pydantic.Field(None, description='')
    source_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefInvitemessagetemplatepropertyParams(pydantic.BaseModel):
    email_message: typing.Optional[str] = pydantic.Field(None, description='')
    email_subject: typing.Optional[str] = pydantic.Field(None, description='')
    sms_message: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefLambdaconfigpropertyParams(pydantic.BaseModel):
    create_auth_challenge: typing.Optional[str] = pydantic.Field(None, description='')
    custom_email_sender: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_CustomEmailSenderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    custom_message: typing.Optional[str] = pydantic.Field(None, description='')
    custom_sms_sender: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_CustomSMSSenderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    define_auth_challenge: typing.Optional[str] = pydantic.Field(None, description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    post_authentication: typing.Optional[str] = pydantic.Field(None, description='')
    post_confirmation: typing.Optional[str] = pydantic.Field(None, description='')
    pre_authentication: typing.Optional[str] = pydantic.Field(None, description='')
    pre_sign_up: typing.Optional[str] = pydantic.Field(None, description='')
    pre_token_generation: typing.Optional[str] = pydantic.Field(None, description='')
    pre_token_generation_config: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_PreTokenGenerationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    user_migration: typing.Optional[str] = pydantic.Field(None, description='')
    verify_auth_challenge_response: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefNumberattributeconstraintspropertyParams(pydantic.BaseModel):
    max_value: typing.Optional[str] = pydantic.Field(None, description='')
    min_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefPasswordpolicypropertyParams(pydantic.BaseModel):
    minimum_length: typing.Union[int, float, None] = pydantic.Field(None, description='')
    require_lowercase: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_numbers: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_symbols: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    require_uppercase: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    temporary_password_validity_days: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefPoliciespropertyParams(pydantic.BaseModel):
    password_policy: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_PasswordPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefPretokengenerationconfigpropertyParams(pydantic.BaseModel):
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='')
    lambda_version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefRecoveryoptionpropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefSchemaattributepropertyParams(pydantic.BaseModel):
    attribute_data_type: typing.Optional[str] = pydantic.Field(None, description='')
    developer_only_attribute: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    mutable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    number_attribute_constraints: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_NumberAttributeConstraintsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    string_attribute_constraints: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_StringAttributeConstraintsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefSmsconfigurationpropertyParams(pydantic.BaseModel):
    external_id: typing.Optional[str] = pydantic.Field(None, description='')
    sns_caller_arn: typing.Optional[str] = pydantic.Field(None, description='')
    sns_region: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefStringattributeconstraintspropertyParams(pydantic.BaseModel):
    max_length: typing.Optional[str] = pydantic.Field(None, description='')
    min_length: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefUserattributeupdatesettingspropertyParams(pydantic.BaseModel):
    attributes_require_verification_before_update: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnUserPoolDefUserpooladdonspropertyParams(pydantic.BaseModel):
    advanced_security_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefUsernameconfigurationpropertyParams(pydantic.BaseModel):
    case_sensitive: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefVerificationmessagetemplatepropertyParams(pydantic.BaseModel):
    default_email_option: typing.Optional[str] = pydantic.Field(None, description='')
    email_message: typing.Optional[str] = pydantic.Field(None, description='')
    email_message_by_link: typing.Optional[str] = pydantic.Field(None, description='')
    email_subject: typing.Optional[str] = pydantic.Field(None, description='')
    email_subject_by_link: typing.Optional[str] = pydantic.Field(None, description='')
    sms_message: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolClient
class CfnUserPoolClientDef(BaseCfnResource):
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool where you want to create a user pool client.\n')
    access_token_validity: typing.Union[int, float, None] = pydantic.Field(None, description="The access token time limit. After this limit expires, your user can't use their access token. To specify the time unit for ``AccessTokenValidity`` as ``seconds`` , ``minutes`` , ``hours`` , or ``days`` , set a ``TokenValidityUnits`` value in your API request. For example, when you set ``AccessTokenValidity`` to ``10`` and ``TokenValidityUnits`` to ``hours`` , your user can authorize access with their access token for 10 hours. The default time unit for ``AccessTokenValidity`` in an API request is hours.\n")
    allowed_o_auth_flows: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The OAuth grant types that you want your app client to generate. To create an app client that generates client credentials grants, you must add ``client_credentials`` as the only allowed OAuth flow. - **code** - Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the ``/oauth2/token`` endpoint. - **implicit** - Issue the access token (and, optionally, ID token, based on scopes) directly to your user. - **client_credentials** - Issue the access token from the ``/oauth2/token`` endpoint directly to a non-person user using a combination of the client ID and client secret.\n')
    allowed_o_auth_flows_user_pool_client: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Set to ``true`` to use OAuth 2.0 features in your user pool app client. ``AllowedOAuthFlowsUserPoolClient`` must be ``true`` before you can configure the following features in your app client. - ``CallBackURLs`` : Callback URLs. - ``LogoutURLs`` : Sign-out redirect URLs. - ``AllowedOAuthScopes`` : OAuth 2.0 scopes. - ``AllowedOAuthFlows`` : Support for authorization code, implicit, and client credentials OAuth 2.0 grants. To use OAuth 2.0 features, configure one of these features in the Amazon Cognito console or set ``AllowedOAuthFlowsUserPoolClient`` to ``true`` in a ``CreateUserPoolClient`` or ``UpdateUserPoolClient`` API request. If you don't set a value for ``AllowedOAuthFlowsUserPoolClient`` in a request with the AWS CLI or SDKs, it defaults to ``false`` .\n")
    allowed_o_auth_scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The allowed OAuth scopes. Possible values provided by OAuth are ``phone`` , ``email`` , ``openid`` , and ``profile`` . Possible values provided by AWS are ``aws.cognito.signin.user.admin`` . Custom scopes created in Resource Servers are also supported.\n')
    analytics_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolClient_AnalyticsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user pool analytics configuration for collecting metrics and sending them to your Amazon Pinpoint campaign. .. epigraph:: In AWS Regions where Amazon Pinpoint isn't available, user pools only support sending events to Amazon Pinpoint projects in AWS Region us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.\n")
    auth_session_validity: typing.Union[int, float, None] = pydantic.Field(None, description='Amazon Cognito creates a session token for each API request in an authentication flow. ``AuthSessionValidity`` is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires.\n')
    callback_ur_ls: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must: - Be an absolute URI. - Be registered with the authorization server. - Not include a fragment component. See `OAuth 2.0 - Redirection Endpoint <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6749#section-3.1.2>`_ . Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.\n')
    client_name: typing.Optional[str] = pydantic.Field(None, description='The client name for the user pool client you would like to create.\n')
    default_redirect_uri: typing.Optional[str] = pydantic.Field(None, description='The default redirect URI. In app clients with one assigned IdP, replaces ``redirect_uri`` in authentication requests. Must be in the ``CallbackURLs`` list. A redirect URI must: - Be an absolute URI. - Be registered with the authorization server. - Not include a fragment component. For more information, see `Default redirect URI <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-client-apps.html#cognito-user-pools-app-idp-settings-about>`_ . Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.\n')
    enable_propagate_additional_user_context_data: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Activates the propagation of additional user context data. For more information about propagation of user context data, see `Adding advanced security to a user pool <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html>`_ . If you don’t include this parameter, you can't send device fingerprint information, including source IP address, to Amazon Cognito advanced security. You can only activate ``EnablePropagateAdditionalUserContextData`` in an app client that has a client secret.\n")
    enable_token_revocation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Activates or deactivates token revocation. For more information about revoking tokens, see `RevokeToken <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html>`_ . If you don't include this parameter, token revocation is automatically activated for the new user pool client.\n")
    explicit_auth_flows: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in your users with any combination of one or more flows, including with a user name and Secure Remote Password (SRP), a user name and password, or a custom authentication process that you define with Lambda functions. .. epigraph:: If you don't specify a value for ``ExplicitAuthFlows`` , your user client supports ``ALLOW_REFRESH_TOKEN_AUTH`` , ``ALLOW_USER_SRP_AUTH`` , and ``ALLOW_CUSTOM_AUTH`` . Valid values include: - ``ALLOW_ADMIN_USER_PASSWORD_AUTH`` : Enable admin based user password authentication flow ``ADMIN_USER_PASSWORD_AUTH`` . This setting replaces the ``ADMIN_NO_SRP_AUTH`` setting. With this authentication flow, your app passes a user name and password to Amazon Cognito in the request, instead of using the Secure Remote Password (SRP) protocol to securely transmit the password. - ``ALLOW_CUSTOM_AUTH`` : Enable Lambda trigger based authentication. - ``ALLOW_USER_PASSWORD_AUTH`` : Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP protocol to verify passwords. - ``ALLOW_USER_SRP_AUTH`` : Enable SRP-based authentication. - ``ALLOW_REFRESH_TOKEN_AUTH`` : Enable authflow to refresh tokens. In some environments, you will see the values ``ADMIN_NO_SRP_AUTH`` , ``CUSTOM_AUTH_FLOW_ONLY`` , or ``USER_PASSWORD_AUTH`` . You can't assign these legacy ``ExplicitAuthFlows`` values to user pool clients at the same time as values that begin with ``ALLOW_`` , like ``ALLOW_USER_SRP_AUTH`` .\n")
    generate_secret: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Boolean to specify whether you want to generate a secret for the user pool client being created.\n')
    id_token_validity: typing.Union[int, float, None] = pydantic.Field(None, description="The ID token time limit. After this limit expires, your user can't use their ID token. To specify the time unit for ``IdTokenValidity`` as ``seconds`` , ``minutes`` , ``hours`` , or ``days`` , set a ``TokenValidityUnits`` value in your API request. For example, when you set ``IdTokenValidity`` as ``10`` and ``TokenValidityUnits`` as ``hours`` , your user can authenticate their session with their ID token for 10 hours. The default time unit for ``IdTokenValidity`` in an API request is hours.\n")
    logout_ur_ls: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of allowed logout URLs for the IdPs.\n')
    prevent_user_existence_errors: typing.Optional[str] = pydantic.Field(None, description='Use this setting to choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to ``ENABLED`` and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to ``LEGACY`` , those APIs will return a ``UserNotFoundException`` exception if the user does not exist in the user pool.\n')
    read_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="The list of user attributes that you want your app client to have read-only access to. After your user authenticates in your app, their access token authorizes them to read their own attribute value for any attribute in this list. An example of this kind of activity is when your user selects a link to view their profile information. Your app makes a `GetUser <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_GetUser.html>`_ API request to retrieve and display your user's profile data. When you don't specify the ``ReadAttributes`` for your app client, your app can read the values of ``email_verified`` , ``phone_number_verified`` , and the Standard attributes of your user pool. When your user pool has read access to these default attributes, ``ReadAttributes`` doesn't return any information. Amazon Cognito only populates ``ReadAttributes`` in the API response if you have specified your own custom set of read attributes.\n")
    refresh_token_validity: typing.Union[int, float, None] = pydantic.Field(None, description="The refresh token time limit. After this limit expires, your user can't use their refresh token. To specify the time unit for ``RefreshTokenValidity`` as ``seconds`` , ``minutes`` , ``hours`` , or ``days`` , set a ``TokenValidityUnits`` value in your API request. For example, when you set ``RefreshTokenValidity`` as ``10`` and ``TokenValidityUnits`` as ``days`` , your user can refresh their session and retrieve new access and ID tokens for 10 days. The default time unit for ``RefreshTokenValidity`` in an API request is days. You can't set ``RefreshTokenValidity`` to 0. If you do, Amazon Cognito overrides the value with the default value of 30 days.\n")
    supported_identity_providers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of provider names for the identity providers (IdPs) that are supported on this client. The following are supported: ``COGNITO`` , ``Facebook`` , ``Google`` , ``SignInWithApple`` , and ``LoginWithAmazon`` . You can also specify the names that you configured for the SAML and OIDC IdPs in your user pool, for example ``MySAMLIdP`` or ``MyOIDCIdP`` .\n')
    token_validity_units: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolClient_TokenValidityUnitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The units in which the validity times are represented. The default unit for RefreshToken is days, and default for ID and access tokens are hours.\n')
    write_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="The list of user attributes that you want your app client to have write access to. After your user authenticates in your app, their access token authorizes them to set or modify their own attribute value for any attribute in this list. An example of this kind of activity is when you present your user with a form to update their profile information and they change their last name. Your app then makes an `UpdateUserAttributes <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateUserAttributes.html>`_ API request and sets ``family_name`` to the new value. When you don't specify the ``WriteAttributes`` for your app client, your app can write the values of the Standard attributes of your user pool. When your user pool has write access to these default attributes, ``WriteAttributes`` doesn't return any information. Amazon Cognito only populates ``WriteAttributes`` in the API response if you have specified your own custom set of write attributes. If your app client allows users to sign in through an IdP, this array must include all attributes that you have mapped to IdP attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If your app client does not have write access to a mapped attribute, Amazon Cognito throws an error when it tries to update the attribute. For more information, see `Specifying IdP Attribute Mappings for Your user pool <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html>`_ .")
    _init_params: typing.ClassVar[list[str]] = ['user_pool_id', 'access_token_validity', 'allowed_o_auth_flows', 'allowed_o_auth_flows_user_pool_client', 'allowed_o_auth_scopes', 'analytics_configuration', 'auth_session_validity', 'callback_ur_ls', 'client_name', 'default_redirect_uri', 'enable_propagate_additional_user_context_data', 'enable_token_revocation', 'explicit_auth_flows', 'generate_secret', 'id_token_validity', 'logout_ur_ls', 'prevent_user_existence_errors', 'read_attributes', 'refresh_token_validity', 'supported_identity_providers', 'token_validity_units', 'write_attributes']
    _method_names: typing.ClassVar[list[str]] = ['AnalyticsConfigurationProperty', 'TokenValidityUnitsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolClient'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolClientDefConfig] = pydantic.Field(None)


class CfnUserPoolClientDefConfig(pydantic.BaseModel):
    AnalyticsConfigurationProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefAnalyticsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    TokenValidityUnitsProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefTokenvalidityunitspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolClientDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserPoolClientDefAnalyticsconfigurationpropertyParams(pydantic.BaseModel):
    application_arn: typing.Optional[str] = pydantic.Field(None, description='')
    application_id: typing.Optional[str] = pydantic.Field(None, description='')
    external_id: typing.Optional[str] = pydantic.Field(None, description='')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='')
    user_data_shared: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolClientDefTokenvalidityunitspropertyParams(pydantic.BaseModel):
    access_token: typing.Optional[str] = pydantic.Field(None, description='')
    id_token: typing.Optional[str] = pydantic.Field(None, description='')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolClientDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolClientDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolClientDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolClientDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolClientDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolClientDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolClientDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolClientDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolClientDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolClientDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolClientDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolClientDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolClientDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolClientDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolDomain
class CfnUserPoolDomainDef(BaseCfnResource):
    domain: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The domain name for the domain that hosts the sign-up and sign-in pages for your application. For example: ``auth.example.com`` . If you're using a prefix domain, this field denotes the first part of the domain before ``.auth.[region].amazoncognito.com`` . This string can include only lowercase letters, numbers, and hyphens. Don't use a hyphen for the first or last character. Use periods to separate subdomain names.\n")
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool where you want to associate a user pool domain.\n')
    custom_domain_config: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolDomain_CustomDomainConfigTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.')
    _init_params: typing.ClassVar[list[str]] = ['domain', 'user_pool_id', 'custom_domain_config']
    _method_names: typing.ClassVar[list[str]] = ['CustomDomainConfigTypeProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolDomain'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolDomainDefConfig] = pydantic.Field(None)


class CfnUserPoolDomainDefConfig(pydantic.BaseModel):
    CustomDomainConfigTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefCustomdomainconfigtypepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolDomainDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserPoolDomainDefCustomdomainconfigtypepropertyParams(pydantic.BaseModel):
    certificate_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolDomainDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolDomainDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolDomainDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolDomainDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolDomainDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolDomainDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolDomainDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolDomainDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolDomainDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolDomainDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolDomainDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolDomainDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolDomainDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolDomainDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolGroup
class CfnUserPoolGroupDef(BaseCfnResource):
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A string containing the description of the group.\n')
    group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the group. Must be unique.\n')
    precedence: typing.Union[int, float, None] = pydantic.Field(None, description="A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower ``Precedence`` values take precedence over groups with higher or null ``Precedence`` values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the ``cognito:roles`` and ``cognito:preferred_role`` claims. Two groups can have the same ``Precedence`` value. If this happens, neither group takes precedence over the other. If two groups with the same ``Precedence`` have the same role ARN, that role is used in the ``cognito:preferred_role`` claim in tokens for users in each group. If the two groups have different role ARNs, the ``cognito:preferred_role`` claim isn't set in users' tokens. The default ``Precedence`` value is null. The maximum ``Precedence`` value is ``2^31-1`` .\n")
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The role Amazon Resource Name (ARN) for the group.')
    _init_params: typing.ClassVar[list[str]] = ['user_pool_id', 'description', 'group_name', 'precedence', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolGroupDefConfig] = pydantic.Field(None)


class CfnUserPoolGroupDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserPoolGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolIdentityProvider
class CfnUserPoolIdentityProviderDef(BaseCfnResource):
    provider_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IdP name.\n')
    provider_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IdP type.\n')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID.\n')
    attribute_mapping: typing.Any = pydantic.Field(None, description='A mapping of IdP attributes to standard and custom user pool attributes.\n')
    idp_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of IdP identifiers.\n')
    provider_details: typing.Any = pydantic.Field(None, description='The scopes, URLs, and identifiers for your external identity provider. The following examples describe the provider detail keys for each IdP type. These values and their schema are subject to change. Social IdP ``authorize_scopes`` values must match the values listed here. - **OpenID Connect (OIDC)** - Amazon Cognito accepts the following elements when it can\'t discover endpoint URLs from ``oidc_issuer`` : ``attributes_url`` , ``authorize_url`` , ``jwks_uri`` , ``token_url`` . Create or update request: ``"ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" }`` Describe response: ``"ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "attributes_url_add_attributes": "false", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" }`` - **SAML** - Create or update request with Metadata URL: ``"ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256" }`` Create or update request with Metadata file: ``"ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataFile": "[metadata XML]", "RequestSigningAlgorithm": "rsa-sha256" }`` The value of ``MetadataFile`` must be the plaintext metadata document with all quote (") characters escaped by backslashes. Describe response: ``"ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "ActiveEncryptionCertificate": "[certificate]", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256", "SLORedirectBindingURI": "https://auth.example.com/slo/saml", "SSORedirectBindingURI": "https://auth.example.com/sso/saml" }`` - **LoginWithAmazon** - Create or update request: ``"ProviderDetails": { "authorize_scopes": "profile postal_code", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret"`` Describe response: ``"ProviderDetails": { "attributes_url": "https://api.amazon.com/user/profile", "attributes_url_add_attributes": "false", "authorize_scopes": "profile postal_code", "authorize_url": "https://www.amazon.com/ap/oa", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "POST", "token_url": "https://api.amazon.com/auth/o2/token" }`` - **Google** - Create or update request: ``"ProviderDetails": { "authorize_scopes": "email profile openid", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret" }`` Describe response: ``"ProviderDetails": { "attributes_url": "https://people.googleapis.com/v1/people/me?personFields=", "attributes_url_add_attributes": "true", "authorize_scopes": "email profile openid", "authorize_url": "https://accounts.google.com/o/oauth2/v2/auth", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret", "oidc_issuer": "https://accounts.google.com", "token_request_method": "POST", "token_url": "https://www.googleapis.com/oauth2/v4/token" }`` - **SignInWithApple** - Create or update request: ``"ProviderDetails": { "authorize_scopes": "email name", "client_id": "com.example.cognito", "private_key": "1EXAMPLE", "key_id": "2EXAMPLE", "team_id": "3EXAMPLE" }`` Describe response: ``"ProviderDetails": { "attributes_url_add_attributes": "false", "authorize_scopes": "email name", "authorize_url": "https://appleid.apple.com/auth/authorize", "client_id": "com.example.cognito", "key_id": "1EXAMPLE", "oidc_issuer": "https://appleid.apple.com", "team_id": "2EXAMPLE", "token_request_method": "POST", "token_url": "https://appleid.apple.com/auth/token" }`` - **Facebook** - Create or update request: ``"ProviderDetails": { "api_version": "v17.0", "authorize_scopes": "public_profile, email", "client_id": "1example23456789", "client_secret": "provider-app-client-secret" }`` Describe response: ``"ProviderDetails": { "api_version": "v17.0", "attributes_url": "https://graph.facebook.com/v17.0/me?fields=", "attributes_url_add_attributes": "true", "authorize_scopes": "public_profile, email", "authorize_url": "https://www.facebook.com/v17.0/dialog/oauth", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "GET", "token_url": "https://graph.facebook.com/v17.0/oauth/access_token" }``')
    _init_params: typing.ClassVar[list[str]] = ['provider_name', 'provider_type', 'user_pool_id', 'attribute_mapping', 'idp_identifiers', 'provider_details']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolIdentityProvider'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolIdentityProviderDefConfig] = pydantic.Field(None)


class CfnUserPoolIdentityProviderDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolIdentityProviderDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserPoolIdentityProviderDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolIdentityProviderDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolIdentityProviderDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolIdentityProviderDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolIdentityProviderDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolIdentityProviderDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolIdentityProviderDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolIdentityProviderDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolIdentityProviderDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolIdentityProviderDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolIdentityProviderDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolIdentityProviderDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolIdentityProviderDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolIdentityProviderDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolResourceServer
class CfnUserPoolResourceServerDef(BaseCfnResource):
    identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located. For example: ``https://my-weather-api.example.com`` .\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A friendly name for the resource server.\n')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool.\n')
    scopes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolResourceServer_ResourceServerScopeTypePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of scopes. Each scope is a map with keys ``ScopeName`` and ``ScopeDescription`` .')
    _init_params: typing.ClassVar[list[str]] = ['identifier', 'name', 'user_pool_id', 'scopes']
    _method_names: typing.ClassVar[list[str]] = ['ResourceServerScopeTypeProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolResourceServer'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolResourceServerDefConfig] = pydantic.Field(None)


class CfnUserPoolResourceServerDefConfig(pydantic.BaseModel):
    ResourceServerScopeTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefResourceserverscopetypepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolResourceServerDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserPoolResourceServerDefResourceserverscopetypepropertyParams(pydantic.BaseModel):
    scope_description: str = pydantic.Field(..., description='')
    scope_name: str = pydantic.Field(..., description='')
    ...

class CfnUserPoolResourceServerDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolResourceServerDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolResourceServerDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolResourceServerDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolResourceServerDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolResourceServerDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolResourceServerDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolResourceServerDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolResourceServerDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolResourceServerDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolResourceServerDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolResourceServerDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolResourceServerDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolResourceServerDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment
class CfnUserPoolRiskConfigurationAttachmentDef(BaseCfnResource):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The app client ID. You can specify the risk configuration for a single client (with a specific ClientId) or for all clients (by setting the ClientId to ``ALL`` ).\n')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID.\n')
    account_takeover_risk_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The account takeover risk configuration object, including the ``NotifyConfiguration`` object and ``Actions`` to take if there is an account takeover.\n')
    compromised_credentials_risk_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The compromised credentials risk configuration object, including the ``EventFilter`` and the ``EventAction`` .\n')
    risk_exception_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_RiskExceptionConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration to override the risk decision.')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'user_pool_id', 'account_takeover_risk_configuration', 'compromised_credentials_risk_configuration', 'risk_exception_configuration']
    _method_names: typing.ClassVar[list[str]] = ['AccountTakeoverActionTypeProperty', 'AccountTakeoverActionsTypeProperty', 'AccountTakeoverRiskConfigurationTypeProperty', 'CompromisedCredentialsActionsTypeProperty', 'CompromisedCredentialsRiskConfigurationTypeProperty', 'NotifyConfigurationTypeProperty', 'NotifyEmailTypeProperty', 'RiskExceptionConfigurationTypeProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefConfig] = pydantic.Field(None)


class CfnUserPoolRiskConfigurationAttachmentDefConfig(pydantic.BaseModel):
    AccountTakeoverActionTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAccounttakeoveractiontypepropertyParams]] = pydantic.Field(None, description='')
    AccountTakeoverActionsTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAccounttakeoveractionstypepropertyParams]] = pydantic.Field(None, description='')
    AccountTakeoverRiskConfigurationTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAccounttakeoverriskconfigurationtypepropertyParams]] = pydantic.Field(None, description='')
    CompromisedCredentialsActionsTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefCompromisedcredentialsactionstypepropertyParams]] = pydantic.Field(None, description='')
    CompromisedCredentialsRiskConfigurationTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefCompromisedcredentialsriskconfigurationtypepropertyParams]] = pydantic.Field(None, description='')
    NotifyConfigurationTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefNotifyconfigurationtypepropertyParams]] = pydantic.Field(None, description='')
    NotifyEmailTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefNotifyemailtypepropertyParams]] = pydantic.Field(None, description='')
    RiskExceptionConfigurationTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefRiskexceptionconfigurationtypepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserPoolRiskConfigurationAttachmentDefAccounttakeoveractiontypepropertyParams(pydantic.BaseModel):
    event_action: str = pydantic.Field(..., description='')
    notify: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefAccounttakeoveractionstypepropertyParams(pydantic.BaseModel):
    high_action: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    low_action: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    medium_action: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefAccounttakeoverriskconfigurationtypepropertyParams(pydantic.BaseModel):
    actions: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionsTypePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    notify_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefCompromisedcredentialsactionstypepropertyParams(pydantic.BaseModel):
    event_action: str = pydantic.Field(..., description='')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefCompromisedcredentialsriskconfigurationtypepropertyParams(pydantic.BaseModel):
    actions: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsTypePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    event_filter: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefNotifyconfigurationtypepropertyParams(pydantic.BaseModel):
    source_arn: str = pydantic.Field(..., description='')
    block_email: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    from_: typing.Optional[str] = pydantic.Field(None, description='')
    mfa_email: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    no_action_email: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    reply_to: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefNotifyemailtypepropertyParams(pydantic.BaseModel):
    subject: str = pydantic.Field(..., description='')
    html_body: typing.Optional[str] = pydantic.Field(None, description='')
    text_body: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefRiskexceptionconfigurationtypepropertyParams(pydantic.BaseModel):
    blocked_ip_range_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    skipped_ip_range_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolRiskConfigurationAttachmentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolRiskConfigurationAttachmentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolRiskConfigurationAttachmentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolUICustomizationAttachment
class CfnUserPoolUICustomizationAttachmentDef(BaseCfnResource):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client ID for the client app. You can specify the UI customization settings for a single client (with a specific clientId) or for all clients (by setting the clientId to ``ALL`` ).\n')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool.\n')
    css: typing.Optional[str] = pydantic.Field(None, description='The CSS values in the UI customization.')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'user_pool_id', 'css']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolUICustomizationAttachment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefConfig] = pydantic.Field(None)


class CfnUserPoolUICustomizationAttachmentDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolUICustomizationAttachmentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserPoolUICustomizationAttachmentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolUICustomizationAttachmentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolUICustomizationAttachmentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolUICustomizationAttachmentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolUICustomizationAttachmentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolUICustomizationAttachmentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolUICustomizationAttachmentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolUICustomizationAttachmentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolUICustomizationAttachmentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolUICustomizationAttachmentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolUICustomizationAttachmentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolUICustomizationAttachmentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolUICustomizationAttachmentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolUICustomizationAttachmentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolUser
class CfnUserPoolUserDef(BaseCfnResource):
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool where the user will be created.\n')
    client_metadata: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description="A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning AWS Lambda functions to user pool triggers. When you use the AdminCreateUser API action, Amazon Cognito invokes the function that is assigned to the *pre sign-up* trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a ``clientMetadata`` attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminCreateUser request. In your function code in AWS Lambda , you can process the ``clientMetadata`` value to enhance your workflow for your specific needs. For more information, see `Customizing user pool Workflows with Lambda Triggers <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html>`_ in the *Amazon Cognito Developer Guide* . .. epigraph:: When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following: - Store the ClientMetadata value. This data is available only to AWS Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose. - Validate the ClientMetadata value. - Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.\n")
    desired_delivery_mediums: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specify ``"EMAIL"`` if email will be used to send the welcome message. Specify ``"SMS"`` if the phone number will be used. The default value is ``"SMS"`` . You can specify more than one value.\n')
    force_alias_creation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='This parameter is used only if the ``phone_number_verified`` or ``email_verified`` attribute is set to ``True`` . Otherwise, it is ignored. If this parameter is set to ``True`` and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. If this parameter is set to ``False`` , the API throws an ``AliasExistsException`` error if the alias already exists. The default value is ``False`` .\n')
    message_action: typing.Optional[str] = pydantic.Field(None, description="Set to ``RESEND`` to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to ``SUPPRESS`` to suppress sending the message. You can specify only one value.\n")
    user_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolUser_AttributeTypePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of name-value pairs that contain user attributes and attribute values.\n')
    username: typing.Optional[str] = pydantic.Field(None, description="The value that you want to set as the username sign-in attribute. The following conditions apply to the username parameter. - The username can't be a duplicate of another username in the same user pool. - You can't change the value of a username after you create it. - You can only provide a value if usernames are a valid sign-in attribute for your user pool. If your user pool only supports phone numbers or email addresses as sign-in attributes, Amazon Cognito automatically generates a username value. For more information, see `Customizing sign-in attributes <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases>`_ .\n")
    validation_data: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolUser_AttributeTypePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Temporary user attributes that contribute to the outcomes of your pre sign-up Lambda trigger. This set of key-value pairs are for custom validation of information that you collect from your users but don't need to retain. Your Lambda function can analyze this additional data and act on it. Your function might perform external API operations like logging user attributes and validation data to Amazon CloudWatch Logs. Validation data might also affect the response that your function returns to Amazon Cognito, like automatically confirming the user if they sign up from within your network. For more information about the pre sign-up Lambda trigger, see `Pre sign-up Lambda trigger <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-sign-up.html>`_ .")
    _init_params: typing.ClassVar[list[str]] = ['user_pool_id', 'client_metadata', 'desired_delivery_mediums', 'force_alias_creation', 'message_action', 'user_attributes', 'username', 'validation_data']
    _method_names: typing.ClassVar[list[str]] = ['AttributeTypeProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolUser'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolUserDefConfig] = pydantic.Field(None)


class CfnUserPoolUserDefConfig(pydantic.BaseModel):
    AttributeTypeProperty: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefAttributetypepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolUserDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserPoolUserDefAttributetypepropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserPoolUserDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolUserDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolUserDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolUserDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolUserDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolUserDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolUserDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolUserDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolUserDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolUserDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolUserDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolUserDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolUserDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolUserDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolUserToGroupAttachment
class CfnUserPoolUserToGroupAttachmentDef(BaseCfnResource):
    group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the group that you want to add your user to.\n')
    username: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool.')
    _init_params: typing.ClassVar[list[str]] = ['group_name', 'username', 'user_pool_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolUserToGroupAttachment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefConfig] = pydantic.Field(None)


class CfnUserPoolUserToGroupAttachmentDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_cognito.CfnUserPoolUserToGroupAttachmentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnUserPoolUserToGroupAttachmentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserPoolUserToGroupAttachmentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolUserToGroupAttachmentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserPoolUserToGroupAttachmentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolUserToGroupAttachmentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserPoolUserToGroupAttachmentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserPoolUserToGroupAttachmentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserPoolUserToGroupAttachmentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserPoolUserToGroupAttachmentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserPoolUserToGroupAttachmentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserPoolUserToGroupAttachmentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnUserPoolUserToGroupAttachmentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserPoolUserToGroupAttachmentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserPoolUserToGroupAttachmentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPoolPrincipalTagProps
class CfnIdentityPoolPrincipalTagPropsDef(BaseCfnProperty):
    identity_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identity pool that you want to associate with this principal tag map.\n')
    identity_provider_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identity pool identity provider (IdP) that you want to associate with this principal tag map.\n')
    principal_tags: typing.Any = pydantic.Field(None, description="A JSON-formatted list of user claims and the principal tags that you want to associate with them. When Amazon Cognito requests credentials, it sets the value of the principal tag to the value of the user's claim.\n")
    use_defaults: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Use a default set of mappings between claims and tags for this provider, instead of a custom map.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypoolprincipaltag.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    # principal_tags: Any\n\n    cfn_identity_pool_principal_tag_props = cognito.CfnIdentityPoolPrincipalTagProps(\n        identity_pool_id="identityPoolId",\n        identity_provider_name="identityProviderName",\n\n        # the properties below are optional\n        principal_tags=principal_tags,\n        use_defaults=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['identity_pool_id', 'identity_provider_name', 'principal_tags', 'use_defaults']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPoolPrincipalTagProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPoolProps
class CfnIdentityPoolPropsDef(BaseCfnProperty):
    allow_unauthenticated_identities: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the identity pool supports unauthenticated logins.\n')
    allow_classic_flow: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Enables the Basic (Classic) authentication flow.\n')
    cognito_events: typing.Any = pydantic.Field(None, description='The events to configure.\n')
    cognito_identity_providers: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPool_CognitoIdentityProviderPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon Cognito user pools and their client IDs.\n')
    cognito_streams: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPool_CognitoStreamsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration options for configuring Amazon Cognito streams.\n')
    developer_provider_name: typing.Optional[str] = pydantic.Field(None, description='The "domain" Amazon Cognito uses when referencing your users. This name acts as a placeholder that allows your backend and the Amazon Cognito service to communicate about the developer provider. For the ``DeveloperProviderName`` , you can use letters and periods (.), underscores (_), and dashes (-). *Minimum length* : 1 *Maximum length* : 100\n')
    identity_pool_name: typing.Optional[str] = pydantic.Field(None, description='The name of your Amazon Cognito identity pool. *Minimum length* : 1 *Maximum length* : 128 *Pattern* : ``[\\w\\s+=,.@-]+``\n')
    open_id_connect_provider_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Names (ARNs) of the OpenID connect providers.\n')
    push_sync: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPool_PushSyncPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration options to be applied to the identity pool.\n')
    saml_provider_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Amazon Resource Names (ARNs) of the Security Assertion Markup Language (SAML) providers.\n')
    supported_login_providers: typing.Any = pydantic.Field(None, description='Key-value pairs that map provider names to provider app IDs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypool.html\n:exampleMetadata: infused\n\nExample::\n\n    import aws_cdk.aws_cognito as cognito\n\n    # my_provider: iam.OpenIdConnectProvider\n\n    cognito.CfnIdentityPool(self, "IdentityPool",\n        open_id_connect_provider_arns=[my_provider.open_id_connect_provider_arn],\n        # And the other properties for your identity pool\n        allow_unauthenticated_identities=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allow_unauthenticated_identities', 'allow_classic_flow', 'cognito_events', 'cognito_identity_providers', 'cognito_streams', 'developer_provider_name', 'identity_pool_name', 'open_id_connect_provider_arns', 'push_sync', 'saml_provider_arns', 'supported_login_providers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPoolProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachmentProps
class CfnIdentityPoolRoleAttachmentPropsDef(BaseCfnProperty):
    identity_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An identity pool ID in the format ``REGION:GUID`` .\n')
    role_mappings: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_cognito.CfnIdentityPoolRoleAttachment_RoleMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="How users for a specific identity provider are mapped to roles. This is a string to the ``RoleMapping`` object map. The string identifies the identity provider. For example: ``graph.facebook.com`` or ``cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id`` . If the ``IdentityProvider`` field isn't provided in this object, the string is used as the identity provider name. For more information, see the `RoleMapping property <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypoolroleattachment-rolemapping.html>`_ .\n")
    roles: typing.Any = pydantic.Field(None, description='The map of the roles associated with this pool. For a given role, the key is either "authenticated" or "unauthenticated". The value is the role ARN.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypoolroleattachment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    # roles: Any\n\n    cfn_identity_pool_role_attachment_props = cognito.CfnIdentityPoolRoleAttachmentProps(\n        identity_pool_id="identityPoolId",\n\n        # the properties below are optional\n        role_mappings={\n            "role_mappings_key": cognito.CfnIdentityPoolRoleAttachment.RoleMappingProperty(\n                type="type",\n\n                # the properties below are optional\n                ambiguous_role_resolution="ambiguousRoleResolution",\n                identity_provider="identityProvider",\n                rules_configuration=cognito.CfnIdentityPoolRoleAttachment.RulesConfigurationTypeProperty(\n                    rules=[cognito.CfnIdentityPoolRoleAttachment.MappingRuleProperty(\n                        claim="claim",\n                        match_type="matchType",\n                        role_arn="roleArn",\n                        value="value"\n                    )]\n                )\n            )\n        },\n        roles=roles\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['identity_pool_id', 'role_mappings', 'roles']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnIdentityPoolRoleAttachmentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnLogDeliveryConfigurationProps
class CfnLogDeliveryConfigurationPropsDef(BaseCfnProperty):
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the user pool where you configured detailed activity logging.\n')
    log_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnLogDeliveryConfiguration_LogConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The detailed activity logging destination of a user pool.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-logdeliveryconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cfn_log_delivery_configuration_props = cognito.CfnLogDeliveryConfigurationProps(\n        user_pool_id="userPoolId",\n\n        # the properties below are optional\n        log_configurations=[cognito.CfnLogDeliveryConfiguration.LogConfigurationProperty(\n            cloud_watch_logs_configuration=cognito.CfnLogDeliveryConfiguration.CloudWatchLogsConfigurationProperty(\n                log_group_arn="logGroupArn"\n            ),\n            event_source="eventSource",\n            log_level="logLevel"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool_id', 'log_configurations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnLogDeliveryConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolClientProps
class CfnUserPoolClientPropsDef(BaseCfnProperty):
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool where you want to create a user pool client.\n')
    access_token_validity: typing.Union[int, float, None] = pydantic.Field(None, description="The access token time limit. After this limit expires, your user can't use their access token. To specify the time unit for ``AccessTokenValidity`` as ``seconds`` , ``minutes`` , ``hours`` , or ``days`` , set a ``TokenValidityUnits`` value in your API request. For example, when you set ``AccessTokenValidity`` to ``10`` and ``TokenValidityUnits`` to ``hours`` , your user can authorize access with their access token for 10 hours. The default time unit for ``AccessTokenValidity`` in an API request is hours.\n")
    allowed_o_auth_flows: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The OAuth grant types that you want your app client to generate. To create an app client that generates client credentials grants, you must add ``client_credentials`` as the only allowed OAuth flow. - **code** - Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the ``/oauth2/token`` endpoint. - **implicit** - Issue the access token (and, optionally, ID token, based on scopes) directly to your user. - **client_credentials** - Issue the access token from the ``/oauth2/token`` endpoint directly to a non-person user using a combination of the client ID and client secret.\n')
    allowed_o_auth_flows_user_pool_client: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Set to ``true`` to use OAuth 2.0 features in your user pool app client. ``AllowedOAuthFlowsUserPoolClient`` must be ``true`` before you can configure the following features in your app client. - ``CallBackURLs`` : Callback URLs. - ``LogoutURLs`` : Sign-out redirect URLs. - ``AllowedOAuthScopes`` : OAuth 2.0 scopes. - ``AllowedOAuthFlows`` : Support for authorization code, implicit, and client credentials OAuth 2.0 grants. To use OAuth 2.0 features, configure one of these features in the Amazon Cognito console or set ``AllowedOAuthFlowsUserPoolClient`` to ``true`` in a ``CreateUserPoolClient`` or ``UpdateUserPoolClient`` API request. If you don't set a value for ``AllowedOAuthFlowsUserPoolClient`` in a request with the AWS CLI or SDKs, it defaults to ``false`` .\n")
    allowed_o_auth_scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The allowed OAuth scopes. Possible values provided by OAuth are ``phone`` , ``email`` , ``openid`` , and ``profile`` . Possible values provided by AWS are ``aws.cognito.signin.user.admin`` . Custom scopes created in Resource Servers are also supported.\n')
    analytics_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolClient_AnalyticsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The user pool analytics configuration for collecting metrics and sending them to your Amazon Pinpoint campaign. .. epigraph:: In AWS Regions where Amazon Pinpoint isn't available, user pools only support sending events to Amazon Pinpoint projects in AWS Region us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.\n")
    auth_session_validity: typing.Union[int, float, None] = pydantic.Field(None, description='Amazon Cognito creates a session token for each API request in an authentication flow. ``AuthSessionValidity`` is the duration, in minutes, of that session token. Your user pool native user must respond to each authentication challenge before the session expires.\n')
    callback_ur_ls: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must: - Be an absolute URI. - Be registered with the authorization server. - Not include a fragment component. See `OAuth 2.0 - Redirection Endpoint <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6749#section-3.1.2>`_ . Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.\n')
    client_name: typing.Optional[str] = pydantic.Field(None, description='The client name for the user pool client you would like to create.\n')
    default_redirect_uri: typing.Optional[str] = pydantic.Field(None, description='The default redirect URI. In app clients with one assigned IdP, replaces ``redirect_uri`` in authentication requests. Must be in the ``CallbackURLs`` list. A redirect URI must: - Be an absolute URI. - Be registered with the authorization server. - Not include a fragment component. For more information, see `Default redirect URI <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-client-apps.html#cognito-user-pools-app-idp-settings-about>`_ . Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.\n')
    enable_propagate_additional_user_context_data: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Activates the propagation of additional user context data. For more information about propagation of user context data, see `Adding advanced security to a user pool <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html>`_ . If you don’t include this parameter, you can't send device fingerprint information, including source IP address, to Amazon Cognito advanced security. You can only activate ``EnablePropagateAdditionalUserContextData`` in an app client that has a client secret.\n")
    enable_token_revocation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Activates or deactivates token revocation. For more information about revoking tokens, see `RevokeToken <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html>`_ . If you don't include this parameter, token revocation is automatically activated for the new user pool client.\n")
    explicit_auth_flows: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in your users with any combination of one or more flows, including with a user name and Secure Remote Password (SRP), a user name and password, or a custom authentication process that you define with Lambda functions. .. epigraph:: If you don't specify a value for ``ExplicitAuthFlows`` , your user client supports ``ALLOW_REFRESH_TOKEN_AUTH`` , ``ALLOW_USER_SRP_AUTH`` , and ``ALLOW_CUSTOM_AUTH`` . Valid values include: - ``ALLOW_ADMIN_USER_PASSWORD_AUTH`` : Enable admin based user password authentication flow ``ADMIN_USER_PASSWORD_AUTH`` . This setting replaces the ``ADMIN_NO_SRP_AUTH`` setting. With this authentication flow, your app passes a user name and password to Amazon Cognito in the request, instead of using the Secure Remote Password (SRP) protocol to securely transmit the password. - ``ALLOW_CUSTOM_AUTH`` : Enable Lambda trigger based authentication. - ``ALLOW_USER_PASSWORD_AUTH`` : Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP protocol to verify passwords. - ``ALLOW_USER_SRP_AUTH`` : Enable SRP-based authentication. - ``ALLOW_REFRESH_TOKEN_AUTH`` : Enable authflow to refresh tokens. In some environments, you will see the values ``ADMIN_NO_SRP_AUTH`` , ``CUSTOM_AUTH_FLOW_ONLY`` , or ``USER_PASSWORD_AUTH`` . You can't assign these legacy ``ExplicitAuthFlows`` values to user pool clients at the same time as values that begin with ``ALLOW_`` , like ``ALLOW_USER_SRP_AUTH`` .\n")
    generate_secret: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Boolean to specify whether you want to generate a secret for the user pool client being created.\n')
    id_token_validity: typing.Union[int, float, None] = pydantic.Field(None, description="The ID token time limit. After this limit expires, your user can't use their ID token. To specify the time unit for ``IdTokenValidity`` as ``seconds`` , ``minutes`` , ``hours`` , or ``days`` , set a ``TokenValidityUnits`` value in your API request. For example, when you set ``IdTokenValidity`` as ``10`` and ``TokenValidityUnits`` as ``hours`` , your user can authenticate their session with their ID token for 10 hours. The default time unit for ``IdTokenValidity`` in an API request is hours.\n")
    logout_ur_ls: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of allowed logout URLs for the IdPs.\n')
    prevent_user_existence_errors: typing.Optional[str] = pydantic.Field(None, description='Use this setting to choose which errors and responses are returned by Cognito APIs during authentication, account confirmation, and password recovery when the user does not exist in the user pool. When set to ``ENABLED`` and the user does not exist, authentication returns an error indicating either the username or password was incorrect, and account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to ``LEGACY`` , those APIs will return a ``UserNotFoundException`` exception if the user does not exist in the user pool.\n')
    read_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="The list of user attributes that you want your app client to have read-only access to. After your user authenticates in your app, their access token authorizes them to read their own attribute value for any attribute in this list. An example of this kind of activity is when your user selects a link to view their profile information. Your app makes a `GetUser <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_GetUser.html>`_ API request to retrieve and display your user's profile data. When you don't specify the ``ReadAttributes`` for your app client, your app can read the values of ``email_verified`` , ``phone_number_verified`` , and the Standard attributes of your user pool. When your user pool has read access to these default attributes, ``ReadAttributes`` doesn't return any information. Amazon Cognito only populates ``ReadAttributes`` in the API response if you have specified your own custom set of read attributes.\n")
    refresh_token_validity: typing.Union[int, float, None] = pydantic.Field(None, description="The refresh token time limit. After this limit expires, your user can't use their refresh token. To specify the time unit for ``RefreshTokenValidity`` as ``seconds`` , ``minutes`` , ``hours`` , or ``days`` , set a ``TokenValidityUnits`` value in your API request. For example, when you set ``RefreshTokenValidity`` as ``10`` and ``TokenValidityUnits`` as ``days`` , your user can refresh their session and retrieve new access and ID tokens for 10 days. The default time unit for ``RefreshTokenValidity`` in an API request is days. You can't set ``RefreshTokenValidity`` to 0. If you do, Amazon Cognito overrides the value with the default value of 30 days.\n")
    supported_identity_providers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of provider names for the identity providers (IdPs) that are supported on this client. The following are supported: ``COGNITO`` , ``Facebook`` , ``Google`` , ``SignInWithApple`` , and ``LoginWithAmazon`` . You can also specify the names that you configured for the SAML and OIDC IdPs in your user pool, for example ``MySAMLIdP`` or ``MyOIDCIdP`` .\n')
    token_validity_units: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolClient_TokenValidityUnitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The units in which the validity times are represented. The default unit for RefreshToken is days, and default for ID and access tokens are hours.\n')
    write_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of user attributes that you want your app client to have write access to. After your user authenticates in your app, their access token authorizes them to set or modify their own attribute value for any attribute in this list. An example of this kind of activity is when you present your user with a form to update their profile information and they change their last name. Your app then makes an `UpdateUserAttributes <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateUserAttributes.html>`_ API request and sets ``family_name`` to the new value. When you don\'t specify the ``WriteAttributes`` for your app client, your app can write the values of the Standard attributes of your user pool. When your user pool has write access to these default attributes, ``WriteAttributes`` doesn\'t return any information. Amazon Cognito only populates ``WriteAttributes`` in the API response if you have specified your own custom set of write attributes. If your app client allows users to sign in through an IdP, this array must include all attributes that you have mapped to IdP attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If your app client does not have write access to a mapped attribute, Amazon Cognito throws an error when it tries to update the attribute. For more information, see `Specifying IdP Attribute Mappings for Your user pool <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cfn_user_pool_client_props = cognito.CfnUserPoolClientProps(\n        user_pool_id="userPoolId",\n\n        # the properties below are optional\n        access_token_validity=123,\n        allowed_oAuth_flows=["allowedOAuthFlows"],\n        allowed_oAuth_flows_user_pool_client=False,\n        allowed_oAuth_scopes=["allowedOAuthScopes"],\n        analytics_configuration=cognito.CfnUserPoolClient.AnalyticsConfigurationProperty(\n            application_arn="applicationArn",\n            application_id="applicationId",\n            external_id="externalId",\n            role_arn="roleArn",\n            user_data_shared=False\n        ),\n        auth_session_validity=123,\n        callback_ur_ls=["callbackUrLs"],\n        client_name="clientName",\n        default_redirect_uri="defaultRedirectUri",\n        enable_propagate_additional_user_context_data=False,\n        enable_token_revocation=False,\n        explicit_auth_flows=["explicitAuthFlows"],\n        generate_secret=False,\n        id_token_validity=123,\n        logout_ur_ls=["logoutUrLs"],\n        prevent_user_existence_errors="preventUserExistenceErrors",\n        read_attributes=["readAttributes"],\n        refresh_token_validity=123,\n        supported_identity_providers=["supportedIdentityProviders"],\n        token_validity_units=cognito.CfnUserPoolClient.TokenValidityUnitsProperty(\n            access_token="accessToken",\n            id_token="idToken",\n            refresh_token="refreshToken"\n        ),\n        write_attributes=["writeAttributes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool_id', 'access_token_validity', 'allowed_o_auth_flows', 'allowed_o_auth_flows_user_pool_client', 'allowed_o_auth_scopes', 'analytics_configuration', 'auth_session_validity', 'callback_ur_ls', 'client_name', 'default_redirect_uri', 'enable_propagate_additional_user_context_data', 'enable_token_revocation', 'explicit_auth_flows', 'generate_secret', 'id_token_validity', 'logout_ur_ls', 'prevent_user_existence_errors', 'read_attributes', 'refresh_token_validity', 'supported_identity_providers', 'token_validity_units', 'write_attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolClientProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolDomainProps
class CfnUserPoolDomainPropsDef(BaseCfnProperty):
    domain: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The domain name for the domain that hosts the sign-up and sign-in pages for your application. For example: ``auth.example.com`` . If you're using a prefix domain, this field denotes the first part of the domain before ``.auth.[region].amazoncognito.com`` . This string can include only lowercase letters, numbers, and hyphens. Don't use a hyphen for the first or last character. Use periods to separate subdomain names.\n")
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool where you want to associate a user pool domain.\n')
    custom_domain_config: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolDomain_CustomDomainConfigTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooldomain.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cfn_user_pool_domain_props = cognito.CfnUserPoolDomainProps(\n        domain="domain",\n        user_pool_id="userPoolId",\n\n        # the properties below are optional\n        custom_domain_config=cognito.CfnUserPoolDomain.CustomDomainConfigTypeProperty(\n            certificate_arn="certificateArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain', 'user_pool_id', 'custom_domain_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolDomainProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolGroupProps
class CfnUserPoolGroupPropsDef(BaseCfnProperty):
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A string containing the description of the group.\n')
    group_name: typing.Optional[str] = pydantic.Field(None, description='The name of the group. Must be unique.\n')
    precedence: typing.Union[int, float, None] = pydantic.Field(None, description="A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower ``Precedence`` values take precedence over groups with higher or null ``Precedence`` values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the ``cognito:roles`` and ``cognito:preferred_role`` claims. Two groups can have the same ``Precedence`` value. If this happens, neither group takes precedence over the other. If two groups with the same ``Precedence`` have the same role ARN, that role is used in the ``cognito:preferred_role`` claim in tokens for users in each group. If the two groups have different role ARNs, the ``cognito:preferred_role`` claim isn't set in users' tokens. The default ``Precedence`` value is null. The maximum ``Precedence`` value is ``2^31-1`` .\n")
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The role Amazon Resource Name (ARN) for the group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolgroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cfn_user_pool_group_props = cognito.CfnUserPoolGroupProps(\n        user_pool_id="userPoolId",\n\n        # the properties below are optional\n        description="description",\n        group_name="groupName",\n        precedence=123,\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool_id', 'description', 'group_name', 'precedence', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolIdentityProviderProps
class CfnUserPoolIdentityProviderPropsDef(BaseCfnProperty):
    provider_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IdP name.\n')
    provider_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IdP type.\n')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID.\n')
    attribute_mapping: typing.Any = pydantic.Field(None, description='A mapping of IdP attributes to standard and custom user pool attributes.\n')
    idp_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of IdP identifiers.\n')
    provider_details: typing.Any = pydantic.Field(None, description='The scopes, URLs, and identifiers for your external identity provider. The following examples describe the provider detail keys for each IdP type. These values and their schema are subject to change. Social IdP ``authorize_scopes`` values must match the values listed here. - **OpenID Connect (OIDC)** - Amazon Cognito accepts the following elements when it can\'t discover endpoint URLs from ``oidc_issuer`` : ``attributes_url`` , ``authorize_url`` , ``jwks_uri`` , ``token_url`` . Create or update request: ``"ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" }`` Describe response: ``"ProviderDetails": { "attributes_request_method": "GET", "attributes_url": "https://auth.example.com/userInfo", "attributes_url_add_attributes": "false", "authorize_scopes": "openid profile email", "authorize_url": "https://auth.example.com/authorize", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "jwks_uri": "https://auth.example.com/.well-known/jwks.json", "oidc_issuer": "https://auth.example.com", "token_url": "https://example.com/token" }`` - **SAML** - Create or update request with Metadata URL: ``"ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256" }`` Create or update request with Metadata file: ``"ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "MetadataFile": "[metadata XML]", "RequestSigningAlgorithm": "rsa-sha256" }`` The value of ``MetadataFile`` must be the plaintext metadata document with all quote (") characters escaped by backslashes. Describe response: ``"ProviderDetails": { "IDPInit": "true", "IDPSignout": "true", "EncryptedResponses" : "true", "ActiveEncryptionCertificate": "[certificate]", "MetadataURL": "https://auth.example.com/sso/saml/metadata", "RequestSigningAlgorithm": "rsa-sha256", "SLORedirectBindingURI": "https://auth.example.com/slo/saml", "SSORedirectBindingURI": "https://auth.example.com/sso/saml" }`` - **LoginWithAmazon** - Create or update request: ``"ProviderDetails": { "authorize_scopes": "profile postal_code", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret"`` Describe response: ``"ProviderDetails": { "attributes_url": "https://api.amazon.com/user/profile", "attributes_url_add_attributes": "false", "authorize_scopes": "profile postal_code", "authorize_url": "https://www.amazon.com/ap/oa", "client_id": "amzn1.application-oa2-client.1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "POST", "token_url": "https://api.amazon.com/auth/o2/token" }`` - **Google** - Create or update request: ``"ProviderDetails": { "authorize_scopes": "email profile openid", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret" }`` Describe response: ``"ProviderDetails": { "attributes_url": "https://people.googleapis.com/v1/people/me?personFields=", "attributes_url_add_attributes": "true", "authorize_scopes": "email profile openid", "authorize_url": "https://accounts.google.com/o/oauth2/v2/auth", "client_id": "1example23456789.apps.googleusercontent.com", "client_secret": "provider-app-client-secret", "oidc_issuer": "https://accounts.google.com", "token_request_method": "POST", "token_url": "https://www.googleapis.com/oauth2/v4/token" }`` - **SignInWithApple** - Create or update request: ``"ProviderDetails": { "authorize_scopes": "email name", "client_id": "com.example.cognito", "private_key": "1EXAMPLE", "key_id": "2EXAMPLE", "team_id": "3EXAMPLE" }`` Describe response: ``"ProviderDetails": { "attributes_url_add_attributes": "false", "authorize_scopes": "email name", "authorize_url": "https://appleid.apple.com/auth/authorize", "client_id": "com.example.cognito", "key_id": "1EXAMPLE", "oidc_issuer": "https://appleid.apple.com", "team_id": "2EXAMPLE", "token_request_method": "POST", "token_url": "https://appleid.apple.com/auth/token" }`` - **Facebook** - Create or update request: ``"ProviderDetails": { "api_version": "v17.0", "authorize_scopes": "public_profile, email", "client_id": "1example23456789", "client_secret": "provider-app-client-secret" }`` Describe response: ``"ProviderDetails": { "api_version": "v17.0", "attributes_url": "https://graph.facebook.com/v17.0/me?fields=", "attributes_url_add_attributes": "true", "authorize_scopes": "public_profile, email", "authorize_url": "https://www.facebook.com/v17.0/dialog/oauth", "client_id": "1example23456789", "client_secret": "provider-app-client-secret", "token_request_method": "GET", "token_url": "https://graph.facebook.com/v17.0/oauth/access_token" }``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolidentityprovider.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    # attribute_mapping: Any\n    # provider_details: Any\n\n    cfn_user_pool_identity_provider_props = cognito.CfnUserPoolIdentityProviderProps(\n        provider_name="providerName",\n        provider_type="providerType",\n        user_pool_id="userPoolId",\n\n        # the properties below are optional\n        attribute_mapping=attribute_mapping,\n        idp_identifiers=["idpIdentifiers"],\n        provider_details=provider_details\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['provider_name', 'provider_type', 'user_pool_id', 'attribute_mapping', 'idp_identifiers', 'provider_details']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolIdentityProviderProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolProps
class CfnUserPoolPropsDef(BaseCfnProperty):
    account_recovery_setting: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_AccountRecoverySettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use this setting to define which verified available method a user can use to recover their password when they call ``ForgotPassword`` . It allows you to define a preferred method when a user has more than one method available. With this setting, SMS does not qualify for a valid password recovery mechanism if the user also has SMS MFA enabled. In the absence of this setting, Cognito uses the legacy behavior to determine the recovery method where SMS is preferred over email.\n')
    admin_create_user_config: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_AdminCreateUserConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for creating a new user profile.\n')
    alias_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Attributes supported as an alias for this user pool. Possible values: *phone_number* , *email* , or *preferred_username* . .. epigraph:: This user pool property cannot be updated.\n')
    auto_verified_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The attributes to be auto-verified. Possible values: *email* , *phone_number* .\n')
    deletion_protection: typing.Optional[str] = pydantic.Field(None, description='When active, ``DeletionProtection`` prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. When you try to delete a protected user pool in a ``DeleteUserPool`` API request, Amazon Cognito returns an ``InvalidParameterException`` error. To delete a protected user pool, send a new ``DeleteUserPool`` request after you deactivate deletion protection in an ``UpdateUserPool`` API request.\n')
    device_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_DeviceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. .. epigraph:: When you provide a value for any ``DeviceConfiguration`` field, you activate the Amazon Cognito device-remembering feature.\n')
    email_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_EmailConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The email configuration of your user pool. The email configuration type sets your preferred sending method, AWS Region, and sender for messages from your user pool.\n')
    email_verification_message: typing.Optional[str] = pydantic.Field(None, description='This parameter is no longer used. See `VerificationMessageTemplateType <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html>`_ .\n')
    email_verification_subject: typing.Optional[str] = pydantic.Field(None, description='This parameter is no longer used. See `VerificationMessageTemplateType <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html>`_ .\n')
    enabled_mfas: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Enables MFA on a specified user pool. To disable all MFAs after it has been enabled, set MfaConfiguration to “OFF” and remove EnabledMfas. MFAs can only be all disabled if MfaConfiguration is OFF. Once SMS_MFA is enabled, SMS_MFA can only be disabled by setting MfaConfiguration to “OFF”. Can be one of the following values: - ``SMS_MFA`` - Enables SMS MFA for the user pool. SMS_MFA can only be enabled if SMS configuration is provided. - ``SOFTWARE_TOKEN_MFA`` - Enables software token MFA for the user pool. Allowed values: ``SMS_MFA`` | ``SOFTWARE_TOKEN_MFA``\n')
    lambda_config: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_LambdaConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Lambda trigger configuration information for the new user pool. .. epigraph:: In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you must make an extra call to add permission for these event sources to invoke your Lambda function. For more information on using the Lambda API to add permission, see `AddPermission <https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html>`_ . For adding permission using the AWS CLI , see `add-permission <https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html>`_ .\n')
    mfa_configuration: typing.Optional[str] = pydantic.Field(None, description="The multi-factor authentication (MFA) configuration. Valid values include:. - ``OFF`` MFA won't be used for any users. - ``ON`` MFA is required for all users to sign in. - ``OPTIONAL`` MFA will be required only for individual users who have an MFA factor activated.\n")
    policies: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_PoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The policy associated with a user pool.\n')
    schema_: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_SchemaAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The schema attributes for the new user pool. These attributes can be standard or custom attributes. .. epigraph:: During a user pool update, you can add new schema attributes but you cannot modify or delete an existing schema attribute.\n', alias='schema')
    sms_authentication_message: typing.Optional[str] = pydantic.Field(None, description='A string representing the SMS authentication message.\n')
    sms_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_SmsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your AWS account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the AWS Region that you want, the Amazon Cognito user pool uses an AWS Identity and Access Management (IAM) role in your AWS account .\n')
    sms_verification_message: typing.Optional[str] = pydantic.Field(None, description='This parameter is no longer used. See `VerificationMessageTemplateType <https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html>`_ .\n')
    user_attribute_update_settings: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_UserAttributeUpdateSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The settings for updates to user attributes. These settings include the property ``AttributesRequireVerificationBeforeUpdate`` , a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see `Verifying updates to email addresses and phone numbers <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates>`_ .\n")
    username_attributes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Determines whether email addresses or phone numbers can be specified as user names when a user signs up. Possible values: ``phone_number`` or ``email`` . This user pool property cannot be updated.\n')
    username_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_UsernameConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='You can choose to set case sensitivity on the username input for the selected sign-in option. For example, when this is set to ``False`` , users will be able to sign in using either "username" or "Username". This configuration is immutable once it has been set.\n')
    user_pool_add_ons: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_UserPoolAddOnsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='User pool add-ons. Contains settings for activation of advanced security features. To log user security information but take no action, set to ``AUDIT`` . To configure automatic security responses to risky traffic to your user pool, set to ``ENFORCED`` . For more information, see `Adding advanced security to a user pool <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html>`_ .\n')
    user_pool_name: typing.Optional[str] = pydantic.Field(None, description='A string used to name the user pool.\n')
    user_pool_tags: typing.Any = pydantic.Field(None, description='The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.\n')
    verification_message_template: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPool_VerificationMessageTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The template for the verification message that the user sees when the app requests permission to access the user\'s information.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    # user_pool_tags: Any\n\n    cfn_user_pool_props = cognito.CfnUserPoolProps(\n        account_recovery_setting=cognito.CfnUserPool.AccountRecoverySettingProperty(\n            recovery_mechanisms=[cognito.CfnUserPool.RecoveryOptionProperty(\n                name="name",\n                priority=123\n            )]\n        ),\n        admin_create_user_config=cognito.CfnUserPool.AdminCreateUserConfigProperty(\n            allow_admin_create_user_only=False,\n            invite_message_template=cognito.CfnUserPool.InviteMessageTemplateProperty(\n                email_message="emailMessage",\n                email_subject="emailSubject",\n                sms_message="smsMessage"\n            ),\n            unused_account_validity_days=123\n        ),\n        alias_attributes=["aliasAttributes"],\n        auto_verified_attributes=["autoVerifiedAttributes"],\n        deletion_protection="deletionProtection",\n        device_configuration=cognito.CfnUserPool.DeviceConfigurationProperty(\n            challenge_required_on_new_device=False,\n            device_only_remembered_on_user_prompt=False\n        ),\n        email_configuration=cognito.CfnUserPool.EmailConfigurationProperty(\n            configuration_set="configurationSet",\n            email_sending_account="emailSendingAccount",\n            from="from",\n            reply_to_email_address="replyToEmailAddress",\n            source_arn="sourceArn"\n        ),\n        email_verification_message="emailVerificationMessage",\n        email_verification_subject="emailVerificationSubject",\n        enabled_mfas=["enabledMfas"],\n        lambda_config=cognito.CfnUserPool.LambdaConfigProperty(\n            create_auth_challenge="createAuthChallenge",\n            custom_email_sender=cognito.CfnUserPool.CustomEmailSenderProperty(\n                lambda_arn="lambdaArn",\n                lambda_version="lambdaVersion"\n            ),\n            custom_message="customMessage",\n            custom_sms_sender=cognito.CfnUserPool.CustomSMSSenderProperty(\n                lambda_arn="lambdaArn",\n                lambda_version="lambdaVersion"\n            ),\n            define_auth_challenge="defineAuthChallenge",\n            kms_key_id="kmsKeyId",\n            post_authentication="postAuthentication",\n            post_confirmation="postConfirmation",\n            pre_authentication="preAuthentication",\n            pre_sign_up="preSignUp",\n            pre_token_generation="preTokenGeneration",\n            pre_token_generation_config=cognito.CfnUserPool.PreTokenGenerationConfigProperty(\n                lambda_arn="lambdaArn",\n                lambda_version="lambdaVersion"\n            ),\n            user_migration="userMigration",\n            verify_auth_challenge_response="verifyAuthChallengeResponse"\n        ),\n        mfa_configuration="mfaConfiguration",\n        policies=cognito.CfnUserPool.PoliciesProperty(\n            password_policy=cognito.CfnUserPool.PasswordPolicyProperty(\n                minimum_length=123,\n                require_lowercase=False,\n                require_numbers=False,\n                require_symbols=False,\n                require_uppercase=False,\n                temporary_password_validity_days=123\n            )\n        ),\n        schema=[cognito.CfnUserPool.SchemaAttributeProperty(\n            attribute_data_type="attributeDataType",\n            developer_only_attribute=False,\n            mutable=False,\n            name="name",\n            number_attribute_constraints=cognito.CfnUserPool.NumberAttributeConstraintsProperty(\n                max_value="maxValue",\n                min_value="minValue"\n            ),\n            required=False,\n            string_attribute_constraints=cognito.CfnUserPool.StringAttributeConstraintsProperty(\n                max_length="maxLength",\n                min_length="minLength"\n            )\n        )],\n        sms_authentication_message="smsAuthenticationMessage",\n        sms_configuration=cognito.CfnUserPool.SmsConfigurationProperty(\n            external_id="externalId",\n            sns_caller_arn="snsCallerArn",\n            sns_region="snsRegion"\n        ),\n        sms_verification_message="smsVerificationMessage",\n        user_attribute_update_settings=cognito.CfnUserPool.UserAttributeUpdateSettingsProperty(\n            attributes_require_verification_before_update=["attributesRequireVerificationBeforeUpdate"]\n        ),\n        username_attributes=["usernameAttributes"],\n        username_configuration=cognito.CfnUserPool.UsernameConfigurationProperty(\n            case_sensitive=False\n        ),\n        user_pool_add_ons=cognito.CfnUserPool.UserPoolAddOnsProperty(\n            advanced_security_mode="advancedSecurityMode"\n        ),\n        user_pool_name="userPoolName",\n        user_pool_tags=user_pool_tags,\n        verification_message_template=cognito.CfnUserPool.VerificationMessageTemplateProperty(\n            default_email_option="defaultEmailOption",\n            email_message="emailMessage",\n            email_message_by_link="emailMessageByLink",\n            email_subject="emailSubject",\n            email_subject_by_link="emailSubjectByLink",\n            sms_message="smsMessage"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['account_recovery_setting', 'admin_create_user_config', 'alias_attributes', 'auto_verified_attributes', 'deletion_protection', 'device_configuration', 'email_configuration', 'email_verification_message', 'email_verification_subject', 'enabled_mfas', 'lambda_config', 'mfa_configuration', 'policies', 'schema', 'sms_authentication_message', 'sms_configuration', 'sms_verification_message', 'user_attribute_update_settings', 'username_attributes', 'username_configuration', 'user_pool_add_ons', 'user_pool_name', 'user_pool_tags', 'verification_message_template']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolResourceServerProps
class CfnUserPoolResourceServerPropsDef(BaseCfnProperty):
    identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located. For example: ``https://my-weather-api.example.com`` .\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A friendly name for the resource server.\n')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool.\n')
    scopes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolResourceServer_ResourceServerScopeTypePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of scopes. Each scope is a map with keys ``ScopeName`` and ``ScopeDescription`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cfn_user_pool_resource_server_props = cognito.CfnUserPoolResourceServerProps(\n        identifier="identifier",\n        name="name",\n        user_pool_id="userPoolId",\n\n        # the properties below are optional\n        scopes=[cognito.CfnUserPoolResourceServer.ResourceServerScopeTypeProperty(\n            scope_description="scopeDescription",\n            scope_name="scopeName"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['identifier', 'name', 'user_pool_id', 'scopes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolResourceServerProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachmentProps
class CfnUserPoolRiskConfigurationAttachmentPropsDef(BaseCfnProperty):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The app client ID. You can specify the risk configuration for a single client (with a specific ClientId) or for all clients (by setting the ClientId to ``ALL`` ).\n')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID.\n')
    account_takeover_risk_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The account takeover risk configuration object, including the ``NotifyConfiguration`` object and ``Actions`` to take if there is an account takeover.\n')
    compromised_credentials_risk_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The compromised credentials risk configuration object, including the ``EventFilter`` and the ``EventAction`` .\n')
    risk_exception_configuration: typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_RiskExceptionConfigurationTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration to override the risk decision.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolriskconfigurationattachment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cfn_user_pool_risk_configuration_attachment_props = cognito.CfnUserPoolRiskConfigurationAttachmentProps(\n        client_id="clientId",\n        user_pool_id="userPoolId",\n\n        # the properties below are optional\n        account_takeover_risk_configuration=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationTypeProperty(\n            actions=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionsTypeProperty(\n                high_action=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n                    event_action="eventAction",\n                    notify=False\n                ),\n                low_action=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n                    event_action="eventAction",\n                    notify=False\n                ),\n                medium_action=cognito.CfnUserPoolRiskConfigurationAttachment.AccountTakeoverActionTypeProperty(\n                    event_action="eventAction",\n                    notify=False\n                )\n            ),\n\n            # the properties below are optional\n            notify_configuration=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyConfigurationTypeProperty(\n                source_arn="sourceArn",\n\n                # the properties below are optional\n                block_email=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n                    subject="subject",\n\n                    # the properties below are optional\n                    html_body="htmlBody",\n                    text_body="textBody"\n                ),\n                from="from",\n                mfa_email=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n                    subject="subject",\n\n                    # the properties below are optional\n                    html_body="htmlBody",\n                    text_body="textBody"\n                ),\n                no_action_email=cognito.CfnUserPoolRiskConfigurationAttachment.NotifyEmailTypeProperty(\n                    subject="subject",\n\n                    # the properties below are optional\n                    html_body="htmlBody",\n                    text_body="textBody"\n                ),\n                reply_to="replyTo"\n            )\n        ),\n        compromised_credentials_risk_configuration=cognito.CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationTypeProperty(\n            actions=cognito.CfnUserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsTypeProperty(\n                event_action="eventAction"\n            ),\n\n            # the properties below are optional\n            event_filter=["eventFilter"]\n        ),\n        risk_exception_configuration=cognito.CfnUserPoolRiskConfigurationAttachment.RiskExceptionConfigurationTypeProperty(\n            blocked_ip_range_list=["blockedIpRangeList"],\n            skipped_ip_range_list=["skippedIpRangeList"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'user_pool_id', 'account_takeover_risk_configuration', 'compromised_credentials_risk_configuration', 'risk_exception_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolRiskConfigurationAttachmentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolUICustomizationAttachmentProps
class CfnUserPoolUICustomizationAttachmentPropsDef(BaseCfnProperty):
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The client ID for the client app. You can specify the UI customization settings for a single client (with a specific clientId) or for all clients (by setting the clientId to ``ALL`` ).\n')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool.\n')
    css: typing.Optional[str] = pydantic.Field(None, description='The CSS values in the UI customization.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooluicustomizationattachment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cfn_user_pool_uICustomization_attachment_props = cognito.CfnUserPoolUICustomizationAttachmentProps(\n        client_id="clientId",\n        user_pool_id="userPoolId",\n\n        # the properties below are optional\n        css="css"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'user_pool_id', 'css']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolUICustomizationAttachmentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolUserProps
class CfnUserPoolUserPropsDef(BaseCfnProperty):
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool where the user will be created.\n')
    client_metadata: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description="A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning AWS Lambda functions to user pool triggers. When you use the AdminCreateUser API action, Amazon Cognito invokes the function that is assigned to the *pre sign-up* trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a ``clientMetadata`` attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminCreateUser request. In your function code in AWS Lambda , you can process the ``clientMetadata`` value to enhance your workflow for your specific needs. For more information, see `Customizing user pool Workflows with Lambda Triggers <https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html>`_ in the *Amazon Cognito Developer Guide* . .. epigraph:: When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following: - Store the ClientMetadata value. This data is available only to AWS Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose. - Validate the ClientMetadata value. - Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.\n")
    desired_delivery_mediums: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specify ``"EMAIL"`` if email will be used to send the welcome message. Specify ``"SMS"`` if the phone number will be used. The default value is ``"SMS"`` . You can specify more than one value.\n')
    force_alias_creation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='This parameter is used only if the ``phone_number_verified`` or ``email_verified`` attribute is set to ``True`` . Otherwise, it is ignored. If this parameter is set to ``True`` and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. If this parameter is set to ``False`` , the API throws an ``AliasExistsException`` error if the alias already exists. The default value is ``False`` .\n')
    message_action: typing.Optional[str] = pydantic.Field(None, description="Set to ``RESEND`` to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to ``SUPPRESS`` to suppress sending the message. You can specify only one value.\n")
    user_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolUser_AttributeTypePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of name-value pairs that contain user attributes and attribute values.\n')
    username: typing.Optional[str] = pydantic.Field(None, description="The value that you want to set as the username sign-in attribute. The following conditions apply to the username parameter. - The username can't be a duplicate of another username in the same user pool. - You can't change the value of a username after you create it. - You can only provide a value if usernames are a valid sign-in attribute for your user pool. If your user pool only supports phone numbers or email addresses as sign-in attributes, Amazon Cognito automatically generates a username value. For more information, see `Customizing sign-in attributes <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases>`_ .\n")
    validation_data: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_cognito.CfnUserPoolUser_AttributeTypePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Temporary user attributes that contribute to the outcomes of your pre sign-up Lambda trigger. This set of key-value pairs are for custom validation of information that you collect from your users but don\'t need to retain. Your Lambda function can analyze this additional data and act on it. Your function might perform external API operations like logging user attributes and validation data to Amazon CloudWatch Logs. Validation data might also affect the response that your function returns to Amazon Cognito, like automatically confirming the user if they sign up from within your network. For more information about the pre sign-up Lambda trigger, see `Pre sign-up Lambda trigger <https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-sign-up.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooluser.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cfn_user_pool_user_props = cognito.CfnUserPoolUserProps(\n        user_pool_id="userPoolId",\n\n        # the properties below are optional\n        client_metadata={\n            "client_metadata_key": "clientMetadata"\n        },\n        desired_delivery_mediums=["desiredDeliveryMediums"],\n        force_alias_creation=False,\n        message_action="messageAction",\n        user_attributes=[cognito.CfnUserPoolUser.AttributeTypeProperty(\n            name="name",\n            value="value"\n        )],\n        username="username",\n        validation_data=[cognito.CfnUserPoolUser.AttributeTypeProperty(\n            name="name",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['user_pool_id', 'client_metadata', 'desired_delivery_mediums', 'force_alias_creation', 'message_action', 'user_attributes', 'username', 'validation_data']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolUserProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cognito.CfnUserPoolUserToGroupAttachmentProps
class CfnUserPoolUserToGroupAttachmentPropsDef(BaseCfnProperty):
    group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the group that you want to add your user to.\n')
    username: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    user_pool_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user pool ID for the user pool.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolusertogroupattachment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_cognito as cognito\n\n    cfn_user_pool_user_to_group_attachment_props = cognito.CfnUserPoolUserToGroupAttachmentProps(\n        group_name="groupName",\n        username="username",\n        user_pool_id="userPoolId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['group_name', 'username', 'user_pool_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cognito.CfnUserPoolUserToGroupAttachmentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    BooleanAttribute: typing.Optional[dict[str, models.aws_cognito.BooleanAttributeDef]] = pydantic.Field(None)
    ClientAttributes: typing.Optional[dict[str, models.aws_cognito.ClientAttributesDef]] = pydantic.Field(None)
    DateTimeAttribute: typing.Optional[dict[str, models.aws_cognito.DateTimeAttributeDef]] = pydantic.Field(None)
    NumberAttribute: typing.Optional[dict[str, models.aws_cognito.NumberAttributeDef]] = pydantic.Field(None)
    OAuthScope: typing.Optional[dict[str, models.aws_cognito.OAuthScopeDef]] = pydantic.Field(None)
    ProviderAttribute: typing.Optional[dict[str, models.aws_cognito.ProviderAttributeDef]] = pydantic.Field(None)
    ResourceServerScope: typing.Optional[dict[str, models.aws_cognito.ResourceServerScopeDef]] = pydantic.Field(None)
    StringAttribute: typing.Optional[dict[str, models.aws_cognito.StringAttributeDef]] = pydantic.Field(None)
    UserPoolClientIdentityProvider: typing.Optional[dict[str, models.aws_cognito.UserPoolClientIdentityProviderDef]] = pydantic.Field(None)
    UserPoolEmail: typing.Optional[dict[str, models.aws_cognito.UserPoolEmailDef]] = pydantic.Field(None)
    UserPoolIdentityProvider: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderDef]] = pydantic.Field(None)
    UserPoolIdentityProviderSamlMetadata: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderSamlMetadataDef]] = pydantic.Field(None)
    UserPoolOperation: typing.Optional[dict[str, models.aws_cognito.UserPoolOperationDef]] = pydantic.Field(None)
    UserPool: typing.Optional[dict[str, models.aws_cognito.UserPoolDef]] = pydantic.Field(None)
    UserPoolClient: typing.Optional[dict[str, models.aws_cognito.UserPoolClientDef]] = pydantic.Field(None)
    UserPoolDomain: typing.Optional[dict[str, models.aws_cognito.UserPoolDomainDef]] = pydantic.Field(None)
    UserPoolIdentityProviderAmazon: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderAmazonDef]] = pydantic.Field(None)
    UserPoolIdentityProviderApple: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderAppleDef]] = pydantic.Field(None)
    UserPoolIdentityProviderFacebook: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderFacebookDef]] = pydantic.Field(None)
    UserPoolIdentityProviderGoogle: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderGoogleDef]] = pydantic.Field(None)
    UserPoolIdentityProviderOidc: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderOidcDef]] = pydantic.Field(None)
    UserPoolIdentityProviderSaml: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderSamlDef]] = pydantic.Field(None)
    UserPoolResourceServer: typing.Optional[dict[str, models.aws_cognito.UserPoolResourceServerDef]] = pydantic.Field(None)
    AttributeMapping: typing.Optional[dict[str, models.aws_cognito.AttributeMappingDef]] = pydantic.Field(None)
    AuthFlow: typing.Optional[dict[str, models.aws_cognito.AuthFlowDef]] = pydantic.Field(None)
    AutoVerifiedAttrs: typing.Optional[dict[str, models.aws_cognito.AutoVerifiedAttrsDef]] = pydantic.Field(None)
    BaseUrlOptions: typing.Optional[dict[str, models.aws_cognito.BaseUrlOptionsDef]] = pydantic.Field(None)
    CfnIdentityPool_CognitoIdentityProviderProperty: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPool_CognitoIdentityProviderPropertyDef]] = pydantic.Field(None)
    CfnIdentityPool_CognitoStreamsProperty: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPool_CognitoStreamsPropertyDef]] = pydantic.Field(None)
    CfnIdentityPool_PushSyncProperty: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPool_PushSyncPropertyDef]] = pydantic.Field(None)
    CfnIdentityPoolRoleAttachment_MappingRuleProperty: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPoolRoleAttachment_MappingRulePropertyDef]] = pydantic.Field(None)
    CfnIdentityPoolRoleAttachment_RoleMappingProperty: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPoolRoleAttachment_RoleMappingPropertyDef]] = pydantic.Field(None)
    CfnIdentityPoolRoleAttachment_RulesConfigurationTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPoolRoleAttachment_RulesConfigurationTypePropertyDef]] = pydantic.Field(None)
    CfnLogDeliveryConfiguration_CloudWatchLogsConfigurationProperty: typing.Optional[dict[str, models.aws_cognito.CfnLogDeliveryConfiguration_CloudWatchLogsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnLogDeliveryConfiguration_LogConfigurationProperty: typing.Optional[dict[str, models.aws_cognito.CfnLogDeliveryConfiguration_LogConfigurationPropertyDef]] = pydantic.Field(None)
    CfnUserPool_AccountRecoverySettingProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_AccountRecoverySettingPropertyDef]] = pydantic.Field(None)
    CfnUserPool_AdminCreateUserConfigProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_AdminCreateUserConfigPropertyDef]] = pydantic.Field(None)
    CfnUserPool_CustomEmailSenderProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_CustomEmailSenderPropertyDef]] = pydantic.Field(None)
    CfnUserPool_CustomSMSSenderProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_CustomSMSSenderPropertyDef]] = pydantic.Field(None)
    CfnUserPool_DeviceConfigurationProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_DeviceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnUserPool_EmailConfigurationProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_EmailConfigurationPropertyDef]] = pydantic.Field(None)
    CfnUserPool_InviteMessageTemplateProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_InviteMessageTemplatePropertyDef]] = pydantic.Field(None)
    CfnUserPool_LambdaConfigProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_LambdaConfigPropertyDef]] = pydantic.Field(None)
    CfnUserPool_NumberAttributeConstraintsProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_NumberAttributeConstraintsPropertyDef]] = pydantic.Field(None)
    CfnUserPool_PasswordPolicyProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_PasswordPolicyPropertyDef]] = pydantic.Field(None)
    CfnUserPool_PoliciesProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_PoliciesPropertyDef]] = pydantic.Field(None)
    CfnUserPool_PreTokenGenerationConfigProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_PreTokenGenerationConfigPropertyDef]] = pydantic.Field(None)
    CfnUserPool_RecoveryOptionProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_RecoveryOptionPropertyDef]] = pydantic.Field(None)
    CfnUserPool_SchemaAttributeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_SchemaAttributePropertyDef]] = pydantic.Field(None)
    CfnUserPool_SmsConfigurationProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_SmsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnUserPool_StringAttributeConstraintsProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_StringAttributeConstraintsPropertyDef]] = pydantic.Field(None)
    CfnUserPool_UserAttributeUpdateSettingsProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_UserAttributeUpdateSettingsPropertyDef]] = pydantic.Field(None)
    CfnUserPool_UsernameConfigurationProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_UsernameConfigurationPropertyDef]] = pydantic.Field(None)
    CfnUserPool_UserPoolAddOnsProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_UserPoolAddOnsPropertyDef]] = pydantic.Field(None)
    CfnUserPool_VerificationMessageTemplateProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPool_VerificationMessageTemplatePropertyDef]] = pydantic.Field(None)
    CfnUserPoolClient_AnalyticsConfigurationProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolClient_AnalyticsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnUserPoolClient_TokenValidityUnitsProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolClient_TokenValidityUnitsPropertyDef]] = pydantic.Field(None)
    CfnUserPoolDomain_CustomDomainConfigTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolDomain_CustomDomainConfigTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolResourceServer_ResourceServerScopeTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolResourceServer_ResourceServerScopeTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionsTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionsTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverActionTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_AccountTakeoverRiskConfigurationTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsActionsTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_CompromisedCredentialsRiskConfigurationTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachment_NotifyConfigurationTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyConfigurationTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_NotifyEmailTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachment_RiskExceptionConfigurationTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachment_RiskExceptionConfigurationTypePropertyDef]] = pydantic.Field(None)
    CfnUserPoolUser_AttributeTypeProperty: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolUser_AttributeTypePropertyDef]] = pydantic.Field(None)
    CognitoDomainOptions: typing.Optional[dict[str, models.aws_cognito.CognitoDomainOptionsDef]] = pydantic.Field(None)
    CustomAttributeConfig: typing.Optional[dict[str, models.aws_cognito.CustomAttributeConfigDef]] = pydantic.Field(None)
    CustomAttributeProps: typing.Optional[dict[str, models.aws_cognito.CustomAttributePropsDef]] = pydantic.Field(None)
    CustomDomainOptions: typing.Optional[dict[str, models.aws_cognito.CustomDomainOptionsDef]] = pydantic.Field(None)
    DeviceTracking: typing.Optional[dict[str, models.aws_cognito.DeviceTrackingDef]] = pydantic.Field(None)
    EmailSettings: typing.Optional[dict[str, models.aws_cognito.EmailSettingsDef]] = pydantic.Field(None)
    KeepOriginalAttrs: typing.Optional[dict[str, models.aws_cognito.KeepOriginalAttrsDef]] = pydantic.Field(None)
    MfaSecondFactor: typing.Optional[dict[str, models.aws_cognito.MfaSecondFactorDef]] = pydantic.Field(None)
    NumberAttributeConstraints: typing.Optional[dict[str, models.aws_cognito.NumberAttributeConstraintsDef]] = pydantic.Field(None)
    NumberAttributeProps: typing.Optional[dict[str, models.aws_cognito.NumberAttributePropsDef]] = pydantic.Field(None)
    OAuthFlows: typing.Optional[dict[str, models.aws_cognito.OAuthFlowsDef]] = pydantic.Field(None)
    OAuthSettings: typing.Optional[dict[str, models.aws_cognito.OAuthSettingsDef]] = pydantic.Field(None)
    OidcEndpoints: typing.Optional[dict[str, models.aws_cognito.OidcEndpointsDef]] = pydantic.Field(None)
    PasswordPolicy: typing.Optional[dict[str, models.aws_cognito.PasswordPolicyDef]] = pydantic.Field(None)
    ResourceServerScopeProps: typing.Optional[dict[str, models.aws_cognito.ResourceServerScopePropsDef]] = pydantic.Field(None)
    SignInAliases: typing.Optional[dict[str, models.aws_cognito.SignInAliasesDef]] = pydantic.Field(None)
    SignInUrlOptions: typing.Optional[dict[str, models.aws_cognito.SignInUrlOptionsDef]] = pydantic.Field(None)
    StandardAttribute: typing.Optional[dict[str, models.aws_cognito.StandardAttributeDef]] = pydantic.Field(None)
    StandardAttributes: typing.Optional[dict[str, models.aws_cognito.StandardAttributesDef]] = pydantic.Field(None)
    StandardAttributesMask: typing.Optional[dict[str, models.aws_cognito.StandardAttributesMaskDef]] = pydantic.Field(None)
    StringAttributeConstraints: typing.Optional[dict[str, models.aws_cognito.StringAttributeConstraintsDef]] = pydantic.Field(None)
    StringAttributeProps: typing.Optional[dict[str, models.aws_cognito.StringAttributePropsDef]] = pydantic.Field(None)
    UserInvitationConfig: typing.Optional[dict[str, models.aws_cognito.UserInvitationConfigDef]] = pydantic.Field(None)
    UserPoolClientOptions: typing.Optional[dict[str, models.aws_cognito.UserPoolClientOptionsDef]] = pydantic.Field(None)
    UserPoolClientProps: typing.Optional[dict[str, models.aws_cognito.UserPoolClientPropsDef]] = pydantic.Field(None)
    UserPoolDomainOptions: typing.Optional[dict[str, models.aws_cognito.UserPoolDomainOptionsDef]] = pydantic.Field(None)
    UserPoolDomainProps: typing.Optional[dict[str, models.aws_cognito.UserPoolDomainPropsDef]] = pydantic.Field(None)
    UserPoolIdentityProviderAmazonProps: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderAmazonPropsDef]] = pydantic.Field(None)
    UserPoolIdentityProviderAppleProps: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderApplePropsDef]] = pydantic.Field(None)
    UserPoolIdentityProviderFacebookProps: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderFacebookPropsDef]] = pydantic.Field(None)
    UserPoolIdentityProviderGoogleProps: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderGooglePropsDef]] = pydantic.Field(None)
    UserPoolIdentityProviderOidcProps: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderOidcPropsDef]] = pydantic.Field(None)
    UserPoolIdentityProviderProps: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderPropsDef]] = pydantic.Field(None)
    UserPoolIdentityProviderSamlProps: typing.Optional[dict[str, models.aws_cognito.UserPoolIdentityProviderSamlPropsDef]] = pydantic.Field(None)
    UserPoolProps: typing.Optional[dict[str, models.aws_cognito.UserPoolPropsDef]] = pydantic.Field(None)
    UserPoolResourceServerOptions: typing.Optional[dict[str, models.aws_cognito.UserPoolResourceServerOptionsDef]] = pydantic.Field(None)
    UserPoolResourceServerProps: typing.Optional[dict[str, models.aws_cognito.UserPoolResourceServerPropsDef]] = pydantic.Field(None)
    UserPoolSESOptions: typing.Optional[dict[str, models.aws_cognito.UserPoolSESOptionsDef]] = pydantic.Field(None)
    UserPoolTriggers: typing.Optional[dict[str, models.aws_cognito.UserPoolTriggersDef]] = pydantic.Field(None)
    UserVerificationConfig: typing.Optional[dict[str, models.aws_cognito.UserVerificationConfigDef]] = pydantic.Field(None)
    CfnIdentityPool: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPoolDef]] = pydantic.Field(None)
    CfnIdentityPoolPrincipalTag: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPoolPrincipalTagDef]] = pydantic.Field(None)
    CfnIdentityPoolRoleAttachment: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPoolRoleAttachmentDef]] = pydantic.Field(None)
    CfnLogDeliveryConfiguration: typing.Optional[dict[str, models.aws_cognito.CfnLogDeliveryConfigurationDef]] = pydantic.Field(None)
    CfnUserPool: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolDef]] = pydantic.Field(None)
    CfnUserPoolClient: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolClientDef]] = pydantic.Field(None)
    CfnUserPoolDomain: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolDomainDef]] = pydantic.Field(None)
    CfnUserPoolGroup: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolGroupDef]] = pydantic.Field(None)
    CfnUserPoolIdentityProvider: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolIdentityProviderDef]] = pydantic.Field(None)
    CfnUserPoolResourceServer: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolResourceServerDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachment: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentDef]] = pydantic.Field(None)
    CfnUserPoolUICustomizationAttachment: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolUICustomizationAttachmentDef]] = pydantic.Field(None)
    CfnUserPoolUser: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolUserDef]] = pydantic.Field(None)
    CfnUserPoolUserToGroupAttachment: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolUserToGroupAttachmentDef]] = pydantic.Field(None)
    CfnIdentityPoolPrincipalTagProps: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPoolPrincipalTagPropsDef]] = pydantic.Field(None)
    CfnIdentityPoolProps: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPoolPropsDef]] = pydantic.Field(None)
    CfnIdentityPoolRoleAttachmentProps: typing.Optional[dict[str, models.aws_cognito.CfnIdentityPoolRoleAttachmentPropsDef]] = pydantic.Field(None)
    CfnLogDeliveryConfigurationProps: typing.Optional[dict[str, models.aws_cognito.CfnLogDeliveryConfigurationPropsDef]] = pydantic.Field(None)
    CfnUserPoolClientProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolClientPropsDef]] = pydantic.Field(None)
    CfnUserPoolDomainProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolDomainPropsDef]] = pydantic.Field(None)
    CfnUserPoolGroupProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolGroupPropsDef]] = pydantic.Field(None)
    CfnUserPoolIdentityProviderProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolIdentityProviderPropsDef]] = pydantic.Field(None)
    CfnUserPoolProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolPropsDef]] = pydantic.Field(None)
    CfnUserPoolResourceServerProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolResourceServerPropsDef]] = pydantic.Field(None)
    CfnUserPoolRiskConfigurationAttachmentProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolRiskConfigurationAttachmentPropsDef]] = pydantic.Field(None)
    CfnUserPoolUICustomizationAttachmentProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolUICustomizationAttachmentPropsDef]] = pydantic.Field(None)
    CfnUserPoolUserProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolUserPropsDef]] = pydantic.Field(None)
    CfnUserPoolUserToGroupAttachmentProps: typing.Optional[dict[str, models.aws_cognito.CfnUserPoolUserToGroupAttachmentPropsDef]] = pydantic.Field(None)
    ...

import models
