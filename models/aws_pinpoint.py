from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_pinpoint.CfnApplicationSettings.CampaignHookProperty
class CfnApplicationSettings_CampaignHookPropertyDef(BaseStruct):
    lambda_function_name: typing.Optional[str] = pydantic.Field(None, description='The name or Amazon Resource Name (ARN) of the Lambda function that Amazon Pinpoint invokes to send messages for campaigns in the application.\n')
    mode: typing.Optional[str] = pydantic.Field(None, description="The mode that Amazon Pinpoint uses to invoke the Lambda function. Possible values are:. - ``FILTER`` - Invoke the function to customize the segment that's used by a campaign. - ``DELIVERY`` - (Deprecated) Previously, invoked the function to send a campaign through a custom channel. This functionality is not supported anymore. To send a campaign through a custom channel, use the ``CustomDeliveryConfiguration`` and ``CampaignCustomMessage`` objects of the campaign.\n")
    web_url: typing.Optional[str] = pydantic.Field(None, description='The web URL that Amazon Pinpoint calls to invoke the Lambda function over HTTPS.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-applicationsettings-campaignhook.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    campaign_hook_property = pinpoint.CfnApplicationSettings.CampaignHookProperty(\n        lambda_function_name="lambdaFunctionName",\n        mode="mode",\n        web_url="webUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_function_name', 'mode', 'web_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnApplicationSettings.CampaignHookProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnApplicationSettings.LimitsProperty
class CfnApplicationSettings_LimitsPropertyDef(BaseStruct):
    daily: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of messages that a campaign can send to a single endpoint during a 24-hour period. The maximum value is 100.\n')
    maximum_duration: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum amount of time, in seconds, that a campaign can attempt to deliver a message after the scheduled start time for the campaign. The minimum value is 60 seconds.\n')
    messages_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of messages that a campaign can send each second. The minimum value is 1. The maximum value is 20,000.\n')
    total: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of messages that a campaign can send to a single endpoint during the course of the campaign. The maximum value is 100.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-applicationsettings-limits.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    limits_property = pinpoint.CfnApplicationSettings.LimitsProperty(\n        daily=123,\n        maximum_duration=123,\n        messages_per_second=123,\n        total=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['daily', 'maximum_duration', 'messages_per_second', 'total']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnApplicationSettings.LimitsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnApplicationSettings.QuietTimeProperty
class CfnApplicationSettings_QuietTimePropertyDef(BaseStruct):
    end: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The specific time when quiet time ends. This value has to use 24-hour notation and be in HH:MM format, where HH is the hour (with a leading zero, if applicable) and MM is the minutes. For example, use ``02:30`` to represent 2:30 AM, or ``14:30`` to represent 2:30 PM.\n')
    start: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The specific time when quiet time begins. This value has to use 24-hour notation and be in HH:MM format, where HH is the hour (with a leading zero, if applicable) and MM is the minutes. For example, use ``02:30`` to represent 2:30 AM, or ``14:30`` to represent 2:30 PM.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-applicationsettings-quiettime.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    quiet_time_property = pinpoint.CfnApplicationSettings.QuietTimeProperty(\n        end="end",\n        start="start"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end', 'start']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnApplicationSettings.QuietTimeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.AttributeDimensionProperty
class CfnCampaign_AttributeDimensionPropertyDef(BaseStruct):
    attribute_type: typing.Optional[str] = pydantic.Field(None, description="The type of segment dimension to use. Valid values are:. - ``INCLUSIVE`` – endpoints that have attributes matching the values are included in the segment. - ``EXCLUSIVE`` – endpoints that have attributes matching the values are excluded from the segment. - ``CONTAINS`` – endpoints that have attributes' substrings match the values are included in the segment. - ``BEFORE`` – endpoints with attributes read as ISO_INSTANT datetimes before the value are included in the segment. - ``AFTER`` – endpoints with attributes read as ISO_INSTANT datetimes after the value are included in the segment. - ``BETWEEN`` – endpoints with attributes read as ISO_INSTANT datetimes between the values are included in the segment. - ``ON`` – endpoints with attributes read as ISO_INSTANT dates on the value are included in the segment. Time is ignored in this comparison.\n")
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The criteria values to use for the segment dimension. Depending on the value of the ``AttributeType`` property, endpoints are included or excluded from the segment if their attribute values match the criteria values.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-attributedimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    attribute_dimension_property = pinpoint.CfnCampaign.AttributeDimensionProperty(\n        attribute_type="attributeType",\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attribute_type', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.AttributeDimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.CampaignCustomMessageProperty
class CfnCampaign_CampaignCustomMessagePropertyDef(BaseStruct):
    data: typing.Optional[str] = pydantic.Field(None, description='The raw, JSON-formatted string to use as the payload for the message. The maximum size is 5 KB.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-campaigncustommessage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    campaign_custom_message_property = pinpoint.CfnCampaign.CampaignCustomMessageProperty(\n        data="data"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.CampaignCustomMessageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.CampaignEmailMessageProperty
class CfnCampaign_CampaignEmailMessagePropertyDef(BaseStruct):
    body: typing.Optional[str] = pydantic.Field(None, description="The body of the email for recipients whose email clients don't render HTML content.\n")
    from_address: typing.Optional[str] = pydantic.Field(None, description='The verified email address to send the email from. The default address is the ``FromAddress`` specified for the email channel for the application.\n')
    html_body: typing.Optional[str] = pydantic.Field(None, description='The body of the email, in HTML format, for recipients whose email clients render HTML content.\n')
    title: typing.Optional[str] = pydantic.Field(None, description='The subject line, or title, of the email.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-campaignemailmessage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    campaign_email_message_property = pinpoint.CfnCampaign.CampaignEmailMessageProperty(\n        body="body",\n        from_address="fromAddress",\n        html_body="htmlBody",\n        title="title"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['body', 'from_address', 'html_body', 'title']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.CampaignEmailMessageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.CampaignEventFilterProperty
class CfnCampaign_CampaignEventFilterPropertyDef(BaseStruct):
    dimensions: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_EventDimensionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The dimension settings of the event filter for the campaign.\n')
    filter_type: typing.Optional[str] = pydantic.Field(None, description='The type of event that causes the campaign to be sent. Valid values are: ``SYSTEM`` , sends the campaign when a system event occurs; and, ``ENDPOINT`` , sends the campaign when an endpoint event (Events resource) occurs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-campaigneventfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # attributes: Any\n    # metrics: Any\n\n    campaign_event_filter_property = pinpoint.CfnCampaign.CampaignEventFilterProperty(\n        dimensions=pinpoint.CfnCampaign.EventDimensionsProperty(\n            attributes=attributes,\n            event_type=pinpoint.CfnCampaign.SetDimensionProperty(\n                dimension_type="dimensionType",\n                values=["values"]\n            ),\n            metrics=metrics\n        ),\n        filter_type="filterType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dimensions', 'filter_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.CampaignEventFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.CampaignHookProperty
class CfnCampaign_CampaignHookPropertyDef(BaseStruct):
    lambda_function_name: typing.Optional[str] = pydantic.Field(None, description='The name or Amazon Resource Name (ARN) of the Lambda function that Amazon Pinpoint invokes to customize a segment for a campaign.\n')
    mode: typing.Optional[str] = pydantic.Field(None, description="The mode that Amazon Pinpoint uses to invoke the Lambda function. Possible values are:. - ``FILTER`` - Invoke the function to customize the segment that's used by a campaign. - ``DELIVERY`` - (Deprecated) Previously, invoked the function to send a campaign through a custom channel. This functionality is not supported anymore. To send a campaign through a custom channel, use the ``CustomDeliveryConfiguration`` and ``CampaignCustomMessage`` objects of the campaign.\n")
    web_url: typing.Optional[str] = pydantic.Field(None, description='The web URL that Amazon Pinpoint calls to invoke the Lambda function over HTTPS.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-campaignhook.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    campaign_hook_property = pinpoint.CfnCampaign.CampaignHookProperty(\n        lambda_function_name="lambdaFunctionName",\n        mode="mode",\n        web_url="webUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_function_name', 'mode', 'web_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.CampaignHookProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.CampaignInAppMessageProperty
class CfnCampaign_CampaignInAppMessagePropertyDef(BaseStruct):
    content: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageContentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array that contains configurtion information about the in-app message for the campaign, including title and body text, text colors, background colors, image URLs, and button configurations.\n')
    custom_config: typing.Any = pydantic.Field(None, description='Custom data, in the form of key-value pairs, that is included in an in-app messaging payload.\n')
    layout: typing.Optional[str] = pydantic.Field(None, description='A string that describes how the in-app message will appear. You can specify one of the following:. - ``BOTTOM_BANNER`` – a message that appears as a banner at the bottom of the page. - ``TOP_BANNER`` – a message that appears as a banner at the top of the page. - ``OVERLAYS`` – a message that covers entire screen. - ``MOBILE_FEED`` – a message that appears in a window in front of the page. - ``MIDDLE_BANNER`` – a message that appears as a banner in the middle of the page. - ``CAROUSEL`` – a scrollable layout of up to five unique messages.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-campaigninappmessage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # custom_config: Any\n\n    campaign_in_app_message_property = pinpoint.CfnCampaign.CampaignInAppMessageProperty(\n        content=[pinpoint.CfnCampaign.InAppMessageContentProperty(\n            background_color="backgroundColor",\n            body_config=pinpoint.CfnCampaign.InAppMessageBodyConfigProperty(\n                alignment="alignment",\n                body="body",\n                text_color="textColor"\n            ),\n            header_config=pinpoint.CfnCampaign.InAppMessageHeaderConfigProperty(\n                alignment="alignment",\n                header="header",\n                text_color="textColor"\n            ),\n            image_url="imageUrl",\n            primary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                ),\n                default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                    background_color="backgroundColor",\n                    border_radius=123,\n                    button_action="buttonAction",\n                    link="link",\n                    text="text",\n                    text_color="textColor"\n                ),\n                ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                ),\n                web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                )\n            ),\n            secondary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                ),\n                default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                    background_color="backgroundColor",\n                    border_radius=123,\n                    button_action="buttonAction",\n                    link="link",\n                    text="text",\n                    text_color="textColor"\n                ),\n                ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                ),\n                web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                )\n            )\n        )],\n        custom_config=custom_config,\n        layout="layout"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content', 'custom_config', 'layout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.CampaignInAppMessageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.CampaignSmsMessageProperty
class CfnCampaign_CampaignSmsMessagePropertyDef(BaseStruct):
    body: typing.Optional[str] = pydantic.Field(None, description='The body of the SMS message.\n')
    entity_id: typing.Optional[str] = pydantic.Field(None, description='The entity ID or Principal Entity (PE) id received from the regulatory body for sending SMS in your country.\n')
    message_type: typing.Optional[str] = pydantic.Field(None, description="The SMS message type. Valid values are ``TRANSACTIONAL`` (for messages that are critical or time-sensitive, such as a one-time passwords) and ``PROMOTIONAL`` (for messsages that aren't critical or time-sensitive, such as marketing messages).\n")
    origination_number: typing.Optional[str] = pydantic.Field(None, description="The long code to send the SMS message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code using an E.164 format to ensure prompt and accurate delivery of the message. For example, +12065550100.\n")
    sender_id: typing.Optional[str] = pydantic.Field(None, description="The alphabetic Sender ID to display as the sender of the message on a recipient's device. Support for sender IDs varies by country or region. To specify a phone number as the sender, omit this parameter and use ``OriginationNumber`` instead. For more information about support for Sender ID by country, see the `Amazon Pinpoint User Guide <https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-countries.html>`_ .\n")
    template_id: typing.Optional[str] = pydantic.Field(None, description='The template ID received from the regulatory body for sending SMS in your country.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-campaignsmsmessage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    campaign_sms_message_property = pinpoint.CfnCampaign.CampaignSmsMessageProperty(\n        body="body",\n        entity_id="entityId",\n        message_type="messageType",\n        origination_number="originationNumber",\n        sender_id="senderId",\n        template_id="templateId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['body', 'entity_id', 'message_type', 'origination_number', 'sender_id', 'template_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.CampaignSmsMessageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.CustomDeliveryConfigurationProperty
class CfnCampaign_CustomDeliveryConfigurationPropertyDef(BaseStruct):
    delivery_uri: typing.Optional[str] = pydantic.Field(None, description='The destination to send the campaign or treatment to. This value can be one of the following:. - The name or Amazon Resource Name (ARN) of an AWS Lambda function to invoke to handle delivery of the campaign or treatment. - The URL for a web application or service that supports HTTPS and can receive the message. The URL has to be a full URL, including the HTTPS protocol.\n')
    endpoint_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The types of endpoints to send the campaign or treatment to. Each valid value maps to a type of channel that you can associate with an endpoint by using the ``ChannelType`` property of an endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-customdeliveryconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    custom_delivery_configuration_property = pinpoint.CfnCampaign.CustomDeliveryConfigurationProperty(\n        delivery_uri="deliveryUri",\n        endpoint_types=["endpointTypes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['delivery_uri', 'endpoint_types']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.CustomDeliveryConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.DefaultButtonConfigurationProperty
class CfnCampaign_DefaultButtonConfigurationPropertyDef(BaseStruct):
    background_color: typing.Optional[str] = pydantic.Field(None, description='The background color of a button, expressed as a hex color code (such as #000000 for black).\n')
    border_radius: typing.Union[int, float, None] = pydantic.Field(None, description='The border radius of a button.\n')
    button_action: typing.Optional[str] = pydantic.Field(None, description='The action that occurs when a recipient chooses a button in an in-app message. You can specify one of the following: - ``LINK`` – A link to a web destination. - ``DEEP_LINK`` – A link to a specific page in an application. - ``CLOSE`` – Dismisses the message.\n')
    link: typing.Optional[str] = pydantic.Field(None, description='The destination (such as a URL) for a button.\n')
    text: typing.Optional[str] = pydantic.Field(None, description='The text that appears on a button in an in-app message.\n')
    text_color: typing.Optional[str] = pydantic.Field(None, description='The color of the body text in a button, expressed as a hex color code (such as #000000 for black).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-defaultbuttonconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    default_button_configuration_property = pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n        background_color="backgroundColor",\n        border_radius=123,\n        button_action="buttonAction",\n        link="link",\n        text="text",\n        text_color="textColor"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['background_color', 'border_radius', 'button_action', 'link', 'text', 'text_color']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.DefaultButtonConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.EventDimensionsProperty
class CfnCampaign_EventDimensionsPropertyDef(BaseStruct):
    attributes: typing.Any = pydantic.Field(None, description='One or more custom attributes that your application reports to Amazon Pinpoint. You can use these attributes as selection criteria when you create an event filter.\n')
    event_type: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The name of the event that causes the campaign to be sent or the journey activity to be performed. This can be a standard event that Amazon Pinpoint generates, such as ``_email.delivered`` or ``_custom.delivered`` . For campaigns, this can also be a custom event that's specific to your application. For information about standard events, see `Streaming Amazon Pinpoint Events <https://docs.aws.amazon.com/pinpoint/latest/developerguide/event-streams.html>`_ in the *Amazon Pinpoint Developer Guide* .\n")
    metrics: typing.Any = pydantic.Field(None, description='One or more custom metrics that your application reports to Amazon Pinpoint . You can use these metrics as selection criteria when you create an event filter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-eventdimensions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # attributes: Any\n    # metrics: Any\n\n    event_dimensions_property = pinpoint.CfnCampaign.EventDimensionsProperty(\n        attributes=attributes,\n        event_type=pinpoint.CfnCampaign.SetDimensionProperty(\n            dimension_type="dimensionType",\n            values=["values"]\n        ),\n        metrics=metrics\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attributes', 'event_type', 'metrics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.EventDimensionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.InAppMessageBodyConfigProperty
class CfnCampaign_InAppMessageBodyConfigPropertyDef(BaseStruct):
    alignment: typing.Optional[str] = pydantic.Field(None, description='The text alignment of the main body text of the message. Acceptable values: ``LEFT`` , ``CENTER`` , ``RIGHT`` .\n')
    body: typing.Optional[str] = pydantic.Field(None, description='The main body text of the message.\n')
    text_color: typing.Optional[str] = pydantic.Field(None, description='The color of the body text, expressed as a string consisting of a hex color code (such as "#000000" for black).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-inappmessagebodyconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    in_app_message_body_config_property = pinpoint.CfnCampaign.InAppMessageBodyConfigProperty(\n        alignment="alignment",\n        body="body",\n        text_color="textColor"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alignment', 'body', 'text_color']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.InAppMessageBodyConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.InAppMessageButtonProperty
class CfnCampaign_InAppMessageButtonPropertyDef(BaseStruct):
    android: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that defines the default behavior for a button in in-app messages sent to Android.\n')
    default_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_DefaultButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that defines the default behavior for a button in an in-app message.\n')
    ios: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that defines the default behavior for a button in in-app messages sent to iOS devices.\n')
    web: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that defines the default behavior for a button in in-app messages for web applications.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-inappmessagebutton.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    in_app_message_button_property = pinpoint.CfnCampaign.InAppMessageButtonProperty(\n        android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n            button_action="buttonAction",\n            link="link"\n        ),\n        default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n            background_color="backgroundColor",\n            border_radius=123,\n            button_action="buttonAction",\n            link="link",\n            text="text",\n            text_color="textColor"\n        ),\n        ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n            button_action="buttonAction",\n            link="link"\n        ),\n        web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n            button_action="buttonAction",\n            link="link"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['android', 'default_config', 'ios', 'web']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.InAppMessageButtonProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.InAppMessageContentProperty
class CfnCampaign_InAppMessageContentPropertyDef(BaseStruct):
    background_color: typing.Optional[str] = pydantic.Field(None, description='The background color for an in-app message banner, expressed as a hex color code (such as #000000 for black).\n')
    body_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageBodyConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the configuration of main body text in an in-app message template.\n')
    header_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageHeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the configuration and content of the header or title text of the in-app message.\n')
    image_url: typing.Optional[str] = pydantic.Field(None, description='The URL of the image that appears on an in-app message banner.\n')
    primary_btn: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains configuration information about the primary button in an in-app message.\n')
    secondary_btn: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains configuration information about the secondary button in an in-app message.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-inappmessagecontent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    in_app_message_content_property = pinpoint.CfnCampaign.InAppMessageContentProperty(\n        background_color="backgroundColor",\n        body_config=pinpoint.CfnCampaign.InAppMessageBodyConfigProperty(\n            alignment="alignment",\n            body="body",\n            text_color="textColor"\n        ),\n        header_config=pinpoint.CfnCampaign.InAppMessageHeaderConfigProperty(\n            alignment="alignment",\n            header="header",\n            text_color="textColor"\n        ),\n        image_url="imageUrl",\n        primary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n            android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            ),\n            default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                background_color="backgroundColor",\n                border_radius=123,\n                button_action="buttonAction",\n                link="link",\n                text="text",\n                text_color="textColor"\n            ),\n            ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            ),\n            web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            )\n        ),\n        secondary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n            android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            ),\n            default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                background_color="backgroundColor",\n                border_radius=123,\n                button_action="buttonAction",\n                link="link",\n                text="text",\n                text_color="textColor"\n            ),\n            ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            ),\n            web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['background_color', 'body_config', 'header_config', 'image_url', 'primary_btn', 'secondary_btn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.InAppMessageContentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.InAppMessageHeaderConfigProperty
class CfnCampaign_InAppMessageHeaderConfigPropertyDef(BaseStruct):
    alignment: typing.Optional[str] = pydantic.Field(None, description='The text alignment of the title of the message. Acceptable values: ``LEFT`` , ``CENTER`` , ``RIGHT`` .\n')
    header: typing.Optional[str] = pydantic.Field(None, description='The header or title text of the in-app message.\n')
    text_color: typing.Optional[str] = pydantic.Field(None, description='The color of the body text, expressed as a string consisting of a hex color code (such as "#000000" for black).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-inappmessageheaderconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    in_app_message_header_config_property = pinpoint.CfnCampaign.InAppMessageHeaderConfigProperty(\n        alignment="alignment",\n        header="header",\n        text_color="textColor"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alignment', 'header', 'text_color']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.InAppMessageHeaderConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.LimitsProperty
class CfnCampaign_LimitsPropertyDef(BaseStruct):
    daily: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of messages that a campaign can send to a single endpoint during a 24-hour period. The maximum value is 100.\n')
    maximum_duration: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum amount of time, in seconds, that a campaign can attempt to deliver a message after the scheduled start time for the campaign. The minimum value is 60 seconds.\n')
    messages_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of messages that a campaign can send each second. The minimum value is 1. The maximum value is 20,000.\n')
    session: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of messages that the campaign can send per user session.\n')
    total: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of messages that a campaign can send to a single endpoint during the course of the campaign. The maximum value is 100.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-limits.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    limits_property = pinpoint.CfnCampaign.LimitsProperty(\n        daily=123,\n        maximum_duration=123,\n        messages_per_second=123,\n        session=123,\n        total=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['daily', 'maximum_duration', 'messages_per_second', 'session', 'total']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.LimitsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.MessageConfigurationProperty
class CfnCampaign_MessageConfigurationPropertyDef(BaseStruct):
    adm_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message that the campaign sends through the ADM (Amazon Device Messaging) channel. If specified, this message overrides the default message.\n')
    apns_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message that the campaign sends through the APNs (Apple Push Notification service) channel. If specified, this message overrides the default message.\n')
    baidu_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message that the campaign sends through the Baidu (Baidu Cloud Push) channel. If specified, this message overrides the default message.\n')
    custom_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignCustomMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message that the campaign sends through a custom channel, as specified by the delivery configuration ( ``CustomDeliveryConfiguration`` ) settings for the campaign. If specified, this message overrides the default message.\n')
    default_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default message that the campaign sends through all the channels that are configured for the campaign.\n')
    email_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignEmailMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message that the campaign sends through the email channel. If specified, this message overrides the default message.\n')
    gcm_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message that the campaign sends through the GCM channel, which enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. If specified, this message overrides the default message.\n')
    in_app_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignInAppMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default message for the in-app messaging channel. This message overrides the default message ( ``DefaultMessage`` ).\n')
    sms_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignSmsMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message that the campaign sends through the SMS channel. If specified, this message overrides the default message.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-messageconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # custom_config: Any\n\n    message_configuration_property = pinpoint.CfnCampaign.MessageConfigurationProperty(\n        adm_message=pinpoint.CfnCampaign.MessageProperty(\n            action="action",\n            body="body",\n            image_icon_url="imageIconUrl",\n            image_small_icon_url="imageSmallIconUrl",\n            image_url="imageUrl",\n            json_body="jsonBody",\n            media_url="mediaUrl",\n            raw_content="rawContent",\n            silent_push=False,\n            time_to_live=123,\n            title="title",\n            url="url"\n        ),\n        apns_message=pinpoint.CfnCampaign.MessageProperty(\n            action="action",\n            body="body",\n            image_icon_url="imageIconUrl",\n            image_small_icon_url="imageSmallIconUrl",\n            image_url="imageUrl",\n            json_body="jsonBody",\n            media_url="mediaUrl",\n            raw_content="rawContent",\n            silent_push=False,\n            time_to_live=123,\n            title="title",\n            url="url"\n        ),\n        baidu_message=pinpoint.CfnCampaign.MessageProperty(\n            action="action",\n            body="body",\n            image_icon_url="imageIconUrl",\n            image_small_icon_url="imageSmallIconUrl",\n            image_url="imageUrl",\n            json_body="jsonBody",\n            media_url="mediaUrl",\n            raw_content="rawContent",\n            silent_push=False,\n            time_to_live=123,\n            title="title",\n            url="url"\n        ),\n        custom_message=pinpoint.CfnCampaign.CampaignCustomMessageProperty(\n            data="data"\n        ),\n        default_message=pinpoint.CfnCampaign.MessageProperty(\n            action="action",\n            body="body",\n            image_icon_url="imageIconUrl",\n            image_small_icon_url="imageSmallIconUrl",\n            image_url="imageUrl",\n            json_body="jsonBody",\n            media_url="mediaUrl",\n            raw_content="rawContent",\n            silent_push=False,\n            time_to_live=123,\n            title="title",\n            url="url"\n        ),\n        email_message=pinpoint.CfnCampaign.CampaignEmailMessageProperty(\n            body="body",\n            from_address="fromAddress",\n            html_body="htmlBody",\n            title="title"\n        ),\n        gcm_message=pinpoint.CfnCampaign.MessageProperty(\n            action="action",\n            body="body",\n            image_icon_url="imageIconUrl",\n            image_small_icon_url="imageSmallIconUrl",\n            image_url="imageUrl",\n            json_body="jsonBody",\n            media_url="mediaUrl",\n            raw_content="rawContent",\n            silent_push=False,\n            time_to_live=123,\n            title="title",\n            url="url"\n        ),\n        in_app_message=pinpoint.CfnCampaign.CampaignInAppMessageProperty(\n            content=[pinpoint.CfnCampaign.InAppMessageContentProperty(\n                background_color="backgroundColor",\n                body_config=pinpoint.CfnCampaign.InAppMessageBodyConfigProperty(\n                    alignment="alignment",\n                    body="body",\n                    text_color="textColor"\n                ),\n                header_config=pinpoint.CfnCampaign.InAppMessageHeaderConfigProperty(\n                    alignment="alignment",\n                    header="header",\n                    text_color="textColor"\n                ),\n                image_url="imageUrl",\n                primary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                    android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                        button_action="buttonAction",\n                        link="link"\n                    ),\n                    default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                        background_color="backgroundColor",\n                        border_radius=123,\n                        button_action="buttonAction",\n                        link="link",\n                        text="text",\n                        text_color="textColor"\n                    ),\n                    ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                        button_action="buttonAction",\n                        link="link"\n                    ),\n                    web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                        button_action="buttonAction",\n                        link="link"\n                    )\n                ),\n                secondary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                    android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                        button_action="buttonAction",\n                        link="link"\n                    ),\n                    default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                        background_color="backgroundColor",\n                        border_radius=123,\n                        button_action="buttonAction",\n                        link="link",\n                        text="text",\n                        text_color="textColor"\n                    ),\n                    ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                        button_action="buttonAction",\n                        link="link"\n                    ),\n                    web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                        button_action="buttonAction",\n                        link="link"\n                    )\n                )\n            )],\n            custom_config=custom_config,\n            layout="layout"\n        ),\n        sms_message=pinpoint.CfnCampaign.CampaignSmsMessageProperty(\n            body="body",\n            entity_id="entityId",\n            message_type="messageType",\n            origination_number="originationNumber",\n            sender_id="senderId",\n            template_id="templateId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['adm_message', 'apns_message', 'baidu_message', 'custom_message', 'default_message', 'email_message', 'gcm_message', 'in_app_message', 'sms_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.MessageConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.MessageProperty
class CfnCampaign_MessagePropertyDef(BaseStruct):
    action: typing.Optional[str] = pydantic.Field(None, description="The action to occur if a recipient taps the push notification. Valid values are:. - ``OPEN_APP`` – Your app opens or it becomes the foreground app if it was sent to the background. This is the default action. - ``DEEP_LINK`` – Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of iOS and Android. - ``URL`` – The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.\n")
    body: typing.Optional[str] = pydantic.Field(None, description='The body of the notification message. The maximum number of characters is 200.\n')
    image_icon_url: typing.Optional[str] = pydantic.Field(None, description='The URL of the image to display as the push notification icon, such as the icon for the app.\n')
    image_small_icon_url: typing.Optional[str] = pydantic.Field(None, description='The URL of the image to display as the small, push notification icon, such as a small version of the icon for the app.\n')
    image_url: typing.Optional[str] = pydantic.Field(None, description='The URL of an image to display in the push notification.\n')
    json_body: typing.Optional[str] = pydantic.Field(None, description='The JSON payload to use for a silent push notification.\n')
    media_url: typing.Optional[str] = pydantic.Field(None, description='The URL of the image or video to display in the push notification.\n')
    raw_content: typing.Optional[str] = pydantic.Field(None, description='The raw, JSON-formatted string to use as the payload for the notification message. If specified, this value overrides all other content for the message.\n')
    silent_push: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether the notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration, displaying messages in an in-app message center, or supporting phone home functionality.\n")
    time_to_live: typing.Union[int, float, None] = pydantic.Field(None, description="The number of seconds that the push notification service should keep the message, if the service is unable to deliver the notification the first time. This value is converted to an expiration value when it's sent to a push notification service. If this value is ``0`` , the service treats the notification as if it expires immediately and the service doesn't store or try to deliver the notification again. This value doesn't apply to messages that are sent through the Amazon Device Messaging (ADM) service.\n")
    title: typing.Optional[str] = pydantic.Field(None, description="The title to display above the notification message on a recipient's device.\n")
    url: typing.Optional[str] = pydantic.Field(None, description='The URL to open in a recipient\'s default mobile browser, if a recipient taps the push notification and the value of the ``Action`` property is ``URL`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-message.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    message_property = pinpoint.CfnCampaign.MessageProperty(\n        action="action",\n        body="body",\n        image_icon_url="imageIconUrl",\n        image_small_icon_url="imageSmallIconUrl",\n        image_url="imageUrl",\n        json_body="jsonBody",\n        media_url="mediaUrl",\n        raw_content="rawContent",\n        silent_push=False,\n        time_to_live=123,\n        title="title",\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'body', 'image_icon_url', 'image_small_icon_url', 'image_url', 'json_body', 'media_url', 'raw_content', 'silent_push', 'time_to_live', 'title', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.MessageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.MetricDimensionProperty
class CfnCampaign_MetricDimensionPropertyDef(BaseStruct):
    comparison_operator: typing.Optional[str] = pydantic.Field(None, description='The operator to use when comparing metric values. Valid values are: ``GREATER_THAN`` , ``LESS_THAN`` , ``GREATER_THAN_OR_EQUAL`` , ``LESS_THAN_OR_EQUAL`` , and ``EQUAL`` .\n')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='The value to compare.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-metricdimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    metric_dimension_property = pinpoint.CfnCampaign.MetricDimensionProperty(\n        comparison_operator="comparisonOperator",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison_operator', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.MetricDimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.OverrideButtonConfigurationProperty
class CfnCampaign_OverrideButtonConfigurationPropertyDef(BaseStruct):
    button_action: typing.Optional[str] = pydantic.Field(None, description='The action that occurs when a recipient chooses a button in an in-app message. You can specify one of the following: - ``LINK`` – A link to a web destination. - ``DEEP_LINK`` – A link to a specific page in an application. - ``CLOSE`` – Dismisses the message.\n')
    link: typing.Optional[str] = pydantic.Field(None, description='The destination (such as a URL) for a button.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-overridebuttonconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    override_button_configuration_property = pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n        button_action="buttonAction",\n        link="link"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['button_action', 'link']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.OverrideButtonConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.QuietTimeProperty
class CfnCampaign_QuietTimePropertyDef(BaseStruct):
    end: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The specific time when quiet time ends. This value has to use 24-hour notation and be in HH:MM format, where HH is the hour (with a leading zero, if applicable) and MM is the minutes. For example, use ``02:30`` to represent 2:30 AM, or ``14:30`` to represent 2:30 PM.\n')
    start: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The specific time when quiet time begins. This value has to use 24-hour notation and be in HH:MM format, where HH is the hour (with a leading zero, if applicable) and MM is the minutes. For example, use ``02:30`` to represent 2:30 AM, or ``14:30`` to represent 2:30 PM.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-quiettime.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    quiet_time_property = pinpoint.CfnCampaign.QuietTimeProperty(\n        end="end",\n        start="start"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end', 'start']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.QuietTimeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.ScheduleProperty
class CfnCampaign_SchedulePropertyDef(BaseStruct):
    end_time: typing.Optional[str] = pydantic.Field(None, description='The scheduled time, in ISO 8601 format, when the campaign ended or will end.\n')
    event_filter: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignEventFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The type of event that causes the campaign to be sent, if the value of the ``Frequency`` property is ``EVENT`` .\n')
    frequency: typing.Optional[str] = pydantic.Field(None, description='Specifies how often the campaign is sent or whether the campaign is sent in response to a specific event.\n')
    is_local_time: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether the start and end times for the campaign schedule use each recipient's local time. To base the schedule on each recipient's local time, set this value to ``true`` .\n")
    quiet_time: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_QuietTimePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The default quiet time for the campaign. Quiet time is a specific time range when a campaign doesn't send messages to endpoints, if all the following conditions are met: - The ``EndpointDemographic.Timezone`` property of the endpoint is set to a valid value. - The current time in the endpoint's time zone is later than or equal to the time specified by the ``QuietTime.Start`` property for the campaign. - The current time in the endpoint's time zone is earlier than or equal to the time specified by the ``QuietTime.End`` property for the campaign. If any of the preceding conditions isn't met, the endpoint will receive messages from the campaign, even if quiet time is enabled.\n")
    start_time: typing.Optional[str] = pydantic.Field(None, description='The scheduled time when the campaign began or will begin. Valid values are: ``IMMEDIATE`` , to start the campaign immediately; or, a specific time in ISO 8601 format.\n')
    time_zone: typing.Optional[str] = pydantic.Field(None, description='The starting UTC offset for the campaign schedule, if the value of the ``IsLocalTime`` property is ``true`` . Valid values are: ``UTC, UTC+01, UTC+02, UTC+03, UTC+03:30, UTC+04, UTC+04:30, UTC+05, UTC+05:30, UTC+05:45, UTC+06, UTC+06:30, UTC+07, UTC+08, UTC+09, UTC+09:30, UTC+10, UTC+10:30, UTC+11, UTC+12, UTC+13, UTC-02, UTC-03, UTC-04, UTC-05, UTC-06, UTC-07, UTC-08, UTC-09, UTC-10,`` and ``UTC-11`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-schedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # attributes: Any\n    # metrics: Any\n\n    schedule_property = pinpoint.CfnCampaign.ScheduleProperty(\n        end_time="endTime",\n        event_filter=pinpoint.CfnCampaign.CampaignEventFilterProperty(\n            dimensions=pinpoint.CfnCampaign.EventDimensionsProperty(\n                attributes=attributes,\n                event_type=pinpoint.CfnCampaign.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                metrics=metrics\n            ),\n            filter_type="filterType"\n        ),\n        frequency="frequency",\n        is_local_time=False,\n        quiet_time=pinpoint.CfnCampaign.QuietTimeProperty(\n            end="end",\n            start="start"\n        ),\n        start_time="startTime",\n        time_zone="timeZone"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end_time', 'event_filter', 'frequency', 'is_local_time', 'quiet_time', 'start_time', 'time_zone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.ScheduleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.SetDimensionProperty
class CfnCampaign_SetDimensionPropertyDef(BaseStruct):
    dimension_type: typing.Optional[str] = pydantic.Field(None, description='The type of segment dimension to use. Valid values are: ``INCLUSIVE`` , endpoints that match the criteria are included in the segment; and, ``EXCLUSIVE`` , endpoints that match the criteria are excluded from the segment.\n')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The criteria values to use for the segment dimension. Depending on the value of the ``DimensionType`` property, endpoints are included or excluded from the segment if their values match the criteria values.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-setdimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    set_dimension_property = pinpoint.CfnCampaign.SetDimensionProperty(\n        dimension_type="dimensionType",\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dimension_type', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.SetDimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.TemplateConfigurationProperty
class CfnCampaign_TemplateConfigurationPropertyDef(BaseStruct):
    email_template: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The email template to use for the message.\n')
    push_template: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The push notification template to use for the message.\n')
    sms_template: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SMS template to use for the message.\n')
    voice_template: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The voice template to use for the message. This object isn\'t supported for campaigns.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-templateconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    template_configuration_property = pinpoint.CfnCampaign.TemplateConfigurationProperty(\n        email_template=pinpoint.CfnCampaign.TemplateProperty(\n            name="name",\n            version="version"\n        ),\n        push_template=pinpoint.CfnCampaign.TemplateProperty(\n            name="name",\n            version="version"\n        ),\n        sms_template=pinpoint.CfnCampaign.TemplateProperty(\n            name="name",\n            version="version"\n        ),\n        voice_template=pinpoint.CfnCampaign.TemplateProperty(\n            name="name",\n            version="version"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email_template', 'push_template', 'sms_template', 'voice_template']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.TemplateConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.TemplateProperty
class CfnCampaign_TemplatePropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the message template to use for the message. If specified, this value must match the name of an existing message template.\n')
    version: typing.Optional[str] = pydantic.Field(None, description='The unique identifier for the version of the message template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the `Template Versions <https://docs.aws.amazon.com/pinpoint/latest/apireference/templates-template-name-template-type-versions.html>`_ resource. If you don\'t specify a value for this property, Amazon Pinpoint uses the *active version* of the template. The *active version* is typically the version of a template that\'s been most recently reviewed and approved for use, depending on your workflow. It isn\'t necessarily the latest version of a template.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-template.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    template_property = pinpoint.CfnCampaign.TemplateProperty(\n        name="name",\n        version="version"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.TemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign.WriteTreatmentResourceProperty
class CfnCampaign_WriteTreatmentResourcePropertyDef(BaseStruct):
    custom_delivery_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CustomDeliveryConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The delivery configuration settings for sending the treatment through a custom channel. This object is required if the ``MessageConfiguration`` object for the treatment specifies a ``CustomMessage`` object.\n')
    message_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessageConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message configuration settings for the treatment.\n')
    schedule: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_SchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The schedule settings for the treatment.\n')
    size_percent: typing.Union[int, float, None] = pydantic.Field(None, description='The allocated percentage of users (segment members) to send the treatment to.\n')
    template_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplateConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the treatment.\n')
    treatment_description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the treatment.\n')
    treatment_name: typing.Optional[str] = pydantic.Field(None, description='A custom name for the treatment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-campaign-writetreatmentresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # attributes: Any\n    # custom_config: Any\n    # metrics: Any\n\n    write_treatment_resource_property = pinpoint.CfnCampaign.WriteTreatmentResourceProperty(\n        custom_delivery_configuration=pinpoint.CfnCampaign.CustomDeliveryConfigurationProperty(\n            delivery_uri="deliveryUri",\n            endpoint_types=["endpointTypes"]\n        ),\n        message_configuration=pinpoint.CfnCampaign.MessageConfigurationProperty(\n            adm_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            apns_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            baidu_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            custom_message=pinpoint.CfnCampaign.CampaignCustomMessageProperty(\n                data="data"\n            ),\n            default_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            email_message=pinpoint.CfnCampaign.CampaignEmailMessageProperty(\n                body="body",\n                from_address="fromAddress",\n                html_body="htmlBody",\n                title="title"\n            ),\n            gcm_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            in_app_message=pinpoint.CfnCampaign.CampaignInAppMessageProperty(\n                content=[pinpoint.CfnCampaign.InAppMessageContentProperty(\n                    background_color="backgroundColor",\n                    body_config=pinpoint.CfnCampaign.InAppMessageBodyConfigProperty(\n                        alignment="alignment",\n                        body="body",\n                        text_color="textColor"\n                    ),\n                    header_config=pinpoint.CfnCampaign.InAppMessageHeaderConfigProperty(\n                        alignment="alignment",\n                        header="header",\n                        text_color="textColor"\n                    ),\n                    image_url="imageUrl",\n                    primary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                        android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        ),\n                        default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                            background_color="backgroundColor",\n                            border_radius=123,\n                            button_action="buttonAction",\n                            link="link",\n                            text="text",\n                            text_color="textColor"\n                        ),\n                        ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        ),\n                        web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        )\n                    ),\n                    secondary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                        android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        ),\n                        default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                            background_color="backgroundColor",\n                            border_radius=123,\n                            button_action="buttonAction",\n                            link="link",\n                            text="text",\n                            text_color="textColor"\n                        ),\n                        ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        ),\n                        web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        )\n                    )\n                )],\n                custom_config=custom_config,\n                layout="layout"\n            ),\n            sms_message=pinpoint.CfnCampaign.CampaignSmsMessageProperty(\n                body="body",\n                entity_id="entityId",\n                message_type="messageType",\n                origination_number="originationNumber",\n                sender_id="senderId",\n                template_id="templateId"\n            )\n        ),\n        schedule=pinpoint.CfnCampaign.ScheduleProperty(\n            end_time="endTime",\n            event_filter=pinpoint.CfnCampaign.CampaignEventFilterProperty(\n                dimensions=pinpoint.CfnCampaign.EventDimensionsProperty(\n                    attributes=attributes,\n                    event_type=pinpoint.CfnCampaign.SetDimensionProperty(\n                        dimension_type="dimensionType",\n                        values=["values"]\n                    ),\n                    metrics=metrics\n                ),\n                filter_type="filterType"\n            ),\n            frequency="frequency",\n            is_local_time=False,\n            quiet_time=pinpoint.CfnCampaign.QuietTimeProperty(\n                end="end",\n                start="start"\n            ),\n            start_time="startTime",\n            time_zone="timeZone"\n        ),\n        size_percent=123,\n        template_configuration=pinpoint.CfnCampaign.TemplateConfigurationProperty(\n            email_template=pinpoint.CfnCampaign.TemplateProperty(\n                name="name",\n                version="version"\n            ),\n            push_template=pinpoint.CfnCampaign.TemplateProperty(\n                name="name",\n                version="version"\n            ),\n            sms_template=pinpoint.CfnCampaign.TemplateProperty(\n                name="name",\n                version="version"\n            ),\n            voice_template=pinpoint.CfnCampaign.TemplateProperty(\n                name="name",\n                version="version"\n            )\n        ),\n        treatment_description="treatmentDescription",\n        treatment_name="treatmentName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_delivery_configuration', 'message_configuration', 'schedule', 'size_percent', 'template_configuration', 'treatment_description', 'treatment_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign.WriteTreatmentResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnInAppTemplate.BodyConfigProperty
class CfnInAppTemplate_BodyConfigPropertyDef(BaseStruct):
    alignment: typing.Optional[str] = pydantic.Field(None, description='The text alignment of the main body text of the message. Acceptable values: ``LEFT`` , ``CENTER`` , ``RIGHT`` .\n')
    body: typing.Optional[str] = pydantic.Field(None, description='The main body text of the message.\n')
    text_color: typing.Optional[str] = pydantic.Field(None, description='The color of the body text, expressed as a hex color code (such as #000000 for black).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-inapptemplate-bodyconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    body_config_property = pinpoint.CfnInAppTemplate.BodyConfigProperty(\n        alignment="alignment",\n        body="body",\n        text_color="textColor"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alignment', 'body', 'text_color']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnInAppTemplate.BodyConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnInAppTemplate.ButtonConfigProperty
class CfnInAppTemplate_ButtonConfigPropertyDef(BaseStruct):
    android: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Optional button configuration to use for in-app messages sent to Android devices. This button configuration overrides the default button configuration.\n')
    default_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_DefaultButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the default behavior of a button that appears in an in-app message. You can optionally add button configurations that specifically apply to iOS, Android, or web browser users.\n')
    ios: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Optional button configuration to use for in-app messages sent to iOS devices. This button configuration overrides the default button configuration.\n')
    web: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Optional button configuration to use for in-app messages sent to web applications. This button configuration overrides the default button configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-inapptemplate-buttonconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    button_config_property = pinpoint.CfnInAppTemplate.ButtonConfigProperty(\n        android=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n            button_action="buttonAction",\n            link="link"\n        ),\n        default_config=pinpoint.CfnInAppTemplate.DefaultButtonConfigurationProperty(\n            background_color="backgroundColor",\n            border_radius=123,\n            button_action="buttonAction",\n            link="link",\n            text="text",\n            text_color="textColor"\n        ),\n        ios=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n            button_action="buttonAction",\n            link="link"\n        ),\n        web=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n            button_action="buttonAction",\n            link="link"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['android', 'default_config', 'ios', 'web']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnInAppTemplate.ButtonConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnInAppTemplate.DefaultButtonConfigurationProperty
class CfnInAppTemplate_DefaultButtonConfigurationPropertyDef(BaseStruct):
    background_color: typing.Optional[str] = pydantic.Field(None, description='The background color of a button, expressed as a hex color code (such as #000000 for black).\n')
    border_radius: typing.Union[int, float, None] = pydantic.Field(None, description='The border radius of a button.\n')
    button_action: typing.Optional[str] = pydantic.Field(None, description='The action that occurs when a recipient chooses a button in an in-app message. You can specify one of the following: - ``LINK`` – A link to a web destination. - ``DEEP_LINK`` – A link to a specific page in an application. - ``CLOSE`` – Dismisses the message.\n')
    link: typing.Optional[str] = pydantic.Field(None, description='The destination (such as a URL) for a button.\n')
    text: typing.Optional[str] = pydantic.Field(None, description='The text that appears on a button in an in-app message.\n')
    text_color: typing.Optional[str] = pydantic.Field(None, description='The color of the body text in a button, expressed as a hex color code (such as #000000 for black).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-inapptemplate-defaultbuttonconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    default_button_configuration_property = pinpoint.CfnInAppTemplate.DefaultButtonConfigurationProperty(\n        background_color="backgroundColor",\n        border_radius=123,\n        button_action="buttonAction",\n        link="link",\n        text="text",\n        text_color="textColor"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['background_color', 'border_radius', 'button_action', 'link', 'text', 'text_color']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnInAppTemplate.DefaultButtonConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnInAppTemplate.HeaderConfigProperty
class CfnInAppTemplate_HeaderConfigPropertyDef(BaseStruct):
    alignment: typing.Optional[str] = pydantic.Field(None, description='The text alignment of the title of the message. Acceptable values: ``LEFT`` , ``CENTER`` , ``RIGHT`` .\n')
    header: typing.Optional[str] = pydantic.Field(None, description='The title text of the in-app message.\n')
    text_color: typing.Optional[str] = pydantic.Field(None, description='The color of the title text, expressed as a hex color code (such as #000000 for black).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-inapptemplate-headerconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    header_config_property = pinpoint.CfnInAppTemplate.HeaderConfigProperty(\n        alignment="alignment",\n        header="header",\n        text_color="textColor"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alignment', 'header', 'text_color']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnInAppTemplate.HeaderConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnInAppTemplate.InAppMessageContentProperty
class CfnInAppTemplate_InAppMessageContentPropertyDef(BaseStruct):
    background_color: typing.Optional[str] = pydantic.Field(None, description='The background color for an in-app message banner, expressed as a hex color code (such as #000000 for black).\n')
    body_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_BodyConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains configuration information about the header or title text of the in-app message.\n')
    header_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_HeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains configuration information about the header or title text of the in-app message.\n')
    image_url: typing.Optional[str] = pydantic.Field(None, description='The URL of the image that appears on an in-app message banner.\n')
    primary_btn: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_ButtonConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains configuration information about the primary button in an in-app message.\n')
    secondary_btn: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_ButtonConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains configuration information about the secondary button in an in-app message.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-inapptemplate-inappmessagecontent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    in_app_message_content_property = pinpoint.CfnInAppTemplate.InAppMessageContentProperty(\n        background_color="backgroundColor",\n        body_config=pinpoint.CfnInAppTemplate.BodyConfigProperty(\n            alignment="alignment",\n            body="body",\n            text_color="textColor"\n        ),\n        header_config=pinpoint.CfnInAppTemplate.HeaderConfigProperty(\n            alignment="alignment",\n            header="header",\n            text_color="textColor"\n        ),\n        image_url="imageUrl",\n        primary_btn=pinpoint.CfnInAppTemplate.ButtonConfigProperty(\n            android=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            ),\n            default_config=pinpoint.CfnInAppTemplate.DefaultButtonConfigurationProperty(\n                background_color="backgroundColor",\n                border_radius=123,\n                button_action="buttonAction",\n                link="link",\n                text="text",\n                text_color="textColor"\n            ),\n            ios=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            ),\n            web=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            )\n        ),\n        secondary_btn=pinpoint.CfnInAppTemplate.ButtonConfigProperty(\n            android=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            ),\n            default_config=pinpoint.CfnInAppTemplate.DefaultButtonConfigurationProperty(\n                background_color="backgroundColor",\n                border_radius=123,\n                button_action="buttonAction",\n                link="link",\n                text="text",\n                text_color="textColor"\n            ),\n            ios=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            ),\n            web=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                button_action="buttonAction",\n                link="link"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['background_color', 'body_config', 'header_config', 'image_url', 'primary_btn', 'secondary_btn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnInAppTemplate.InAppMessageContentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty
class CfnInAppTemplate_OverrideButtonConfigurationPropertyDef(BaseStruct):
    button_action: typing.Optional[str] = pydantic.Field(None, description='The action that occurs when a recipient chooses a button in an in-app message. You can specify one of the following: - ``LINK`` – A link to a web destination. - ``DEEP_LINK`` – A link to a specific page in an application. - ``CLOSE`` – Dismisses the message.\n')
    link: typing.Optional[str] = pydantic.Field(None, description='The destination (such as a URL) for a button.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-inapptemplate-overridebuttonconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    override_button_configuration_property = pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n        button_action="buttonAction",\n        link="link"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['button_action', 'link']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnPushTemplate.AndroidPushNotificationTemplateProperty
class CfnPushTemplate_AndroidPushNotificationTemplatePropertyDef(BaseStruct):
    action: typing.Optional[str] = pydantic.Field(None, description="The action to occur if a recipient taps a push notification that's based on the message template. Valid values are: - ``OPEN_APP`` – Your app opens or it becomes the foreground app if it was sent to the background. This is the default action. - ``DEEP_LINK`` – Your app opens and displays a designated user interface in the app. This action uses the deep-linking features of the Android platform. - ``URL`` – The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.\n")
    body: typing.Optional[str] = pydantic.Field(None, description="The message body to use in a push notification that's based on the message template.\n")
    image_icon_url: typing.Optional[str] = pydantic.Field(None, description="The URL of the large icon image to display in the content view of a push notification that's based on the message template.\n")
    image_url: typing.Optional[str] = pydantic.Field(None, description="The URL of an image to display in a push notification that's based on the message template.\n")
    small_image_icon_url: typing.Optional[str] = pydantic.Field(None, description="The URL of the small icon image to display in the status bar and the content view of a push notification that's based on the message template.\n")
    sound: typing.Optional[str] = pydantic.Field(None, description="The sound to play when a recipient receives a push notification that's based on the message template. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in ``/res/raw/`` .\n")
    title: typing.Optional[str] = pydantic.Field(None, description="The title to use in a push notification that's based on the message template. This title appears above the notification message on a recipient's device.\n")
    url: typing.Optional[str] = pydantic.Field(None, description='The URL to open in a recipient\'s default mobile browser, if a recipient taps a push notification that\'s based on the message template and the value of the ``Action`` property is ``URL`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-pushtemplate-androidpushnotificationtemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    android_push_notification_template_property = pinpoint.CfnPushTemplate.AndroidPushNotificationTemplateProperty(\n        action="action",\n        body="body",\n        image_icon_url="imageIconUrl",\n        image_url="imageUrl",\n        small_image_icon_url="smallImageIconUrl",\n        sound="sound",\n        title="title",\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'body', 'image_icon_url', 'image_url', 'small_image_icon_url', 'sound', 'title', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnPushTemplate.AndroidPushNotificationTemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnPushTemplate.APNSPushNotificationTemplateProperty
class CfnPushTemplate_APNSPushNotificationTemplatePropertyDef(BaseStruct):
    action: typing.Optional[str] = pydantic.Field(None, description="The action to occur if a recipient taps a push notification that's based on the message template. Valid values are: - ``OPEN_APP`` – Your app opens or it becomes the foreground app if it was sent to the background. This is the default action. - ``DEEP_LINK`` – Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS platform. - ``URL`` – The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.\n")
    body: typing.Optional[str] = pydantic.Field(None, description='The message body to use in push notifications that are based on the message template.\n')
    media_url: typing.Optional[str] = pydantic.Field(None, description='The URL of an image or video to display in push notifications that are based on the message template.\n')
    sound: typing.Optional[str] = pydantic.Field(None, description="The key for the sound to play when the recipient receives a push notification that's based on the message template. The value for this key is the name of a sound file in your app's main bundle or the ``Library/Sounds`` folder in your app's data container. If the sound file can't be found or you specify ``default`` for the value, the system plays the default alert sound.\n")
    title: typing.Optional[str] = pydantic.Field(None, description="The title to use in push notifications that are based on the message template. This title appears above the notification message on a recipient's device.\n")
    url: typing.Optional[str] = pydantic.Field(None, description='The URL to open in the recipient\'s default mobile browser, if a recipient taps a push notification that\'s based on the message template and the value of the ``Action`` property is ``URL`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-pushtemplate-apnspushnotificationtemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    a_pNSPush_notification_template_property = pinpoint.CfnPushTemplate.APNSPushNotificationTemplateProperty(\n        action="action",\n        body="body",\n        media_url="mediaUrl",\n        sound="sound",\n        title="title",\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'body', 'media_url', 'sound', 'title', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnPushTemplate.APNSPushNotificationTemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnPushTemplate.DefaultPushNotificationTemplateProperty
class CfnPushTemplate_DefaultPushNotificationTemplatePropertyDef(BaseStruct):
    action: typing.Optional[str] = pydantic.Field(None, description="The action to occur if a recipient taps a push notification that's based on the message template. Valid values are: - ``OPEN_APP`` – Your app opens or it becomes the foreground app if it was sent to the background. This is the default action. - ``DEEP_LINK`` – Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms. - ``URL`` – The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.\n")
    body: typing.Optional[str] = pydantic.Field(None, description='The message body to use in push notifications that are based on the message template.\n')
    sound: typing.Optional[str] = pydantic.Field(None, description="The sound to play when a recipient receives a push notification that's based on the message template. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in ``/res/raw/`` . For an iOS platform, this value is the key for the name of a sound file in your app's main bundle or the ``Library/Sounds`` folder in your app's data container. If the sound file can't be found or you specify ``default`` for the value, the system plays the default alert sound.\n")
    title: typing.Optional[str] = pydantic.Field(None, description="The title to use in push notifications that are based on the message template. This title appears above the notification message on a recipient's device.\n")
    url: typing.Optional[str] = pydantic.Field(None, description='The URL to open in a recipient\'s default mobile browser, if a recipient taps a push notification that\'s based on the message template and the value of the ``Action`` property is ``URL`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-pushtemplate-defaultpushnotificationtemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    default_push_notification_template_property = pinpoint.CfnPushTemplate.DefaultPushNotificationTemplateProperty(\n        action="action",\n        body="body",\n        sound="sound",\n        title="title",\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'body', 'sound', 'title', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnPushTemplate.DefaultPushNotificationTemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.AttributeDimensionProperty
class CfnSegment_AttributeDimensionPropertyDef(BaseStruct):
    attribute_type: typing.Optional[str] = pydantic.Field(None, description="The type of segment dimension to use. Valid values are:. - ``INCLUSIVE`` – endpoints that have attributes matching the values are included in the segment. - ``EXCLUSIVE`` – endpoints that have attributes matching the values are excluded from the segment. - ``CONTAINS`` – endpoints that have attributes' substrings match the values are included in the segment. - ``BEFORE`` – endpoints with attributes read as ISO_INSTANT datetimes before the value are included in the segment. - ``AFTER`` – endpoints with attributes read as ISO_INSTANT datetimes after the value are included in the segment. - ``BETWEEN`` – endpoints with attributes read as ISO_INSTANT datetimes between the values are included in the segment. - ``ON`` – endpoints with attributes read as ISO_INSTANT dates on the value are included in the segment. Time is ignored in this comparison.\n")
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The criteria values to use for the segment dimension. Depending on the value of the ``AttributeType`` property, endpoints are included or excluded from the segment if their attribute values match the criteria values.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-attributedimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    attribute_dimension_property = pinpoint.CfnSegment.AttributeDimensionProperty(\n        attribute_type="attributeType",\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attribute_type', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.AttributeDimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.BehaviorProperty
class CfnSegment_BehaviorPropertyDef(BaseStruct):
    recency: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_RecencyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies how recently segment members were active.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-behavior.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    behavior_property = pinpoint.CfnSegment.BehaviorProperty(\n        recency=pinpoint.CfnSegment.RecencyProperty(\n            duration="duration",\n            recency_type="recencyType"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['recency']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.BehaviorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.CoordinatesProperty
class CfnSegment_CoordinatesPropertyDef(BaseStruct):
    latitude: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The latitude coordinate of the location.\n')
    longitude: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The longitude coordinate of the location.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-coordinates.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    coordinates_property = pinpoint.CfnSegment.CoordinatesProperty(\n        latitude=123,\n        longitude=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['latitude', 'longitude']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.CoordinatesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.DemographicProperty
class CfnSegment_DemographicPropertyDef(BaseStruct):
    app_version: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The app version criteria for the segment.\n')
    channel: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The channel criteria for the segment.\n')
    device_type: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The device type criteria for the segment.\n')
    make: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The device make criteria for the segment.\n')
    model: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The device model criteria for the segment.\n')
    platform: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The device platform criteria for the segment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-demographic.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    demographic_property = pinpoint.CfnSegment.DemographicProperty(\n        app_version=pinpoint.CfnSegment.SetDimensionProperty(\n            dimension_type="dimensionType",\n            values=["values"]\n        ),\n        channel=pinpoint.CfnSegment.SetDimensionProperty(\n            dimension_type="dimensionType",\n            values=["values"]\n        ),\n        device_type=pinpoint.CfnSegment.SetDimensionProperty(\n            dimension_type="dimensionType",\n            values=["values"]\n        ),\n        make=pinpoint.CfnSegment.SetDimensionProperty(\n            dimension_type="dimensionType",\n            values=["values"]\n        ),\n        model=pinpoint.CfnSegment.SetDimensionProperty(\n            dimension_type="dimensionType",\n            values=["values"]\n        ),\n        platform=pinpoint.CfnSegment.SetDimensionProperty(\n            dimension_type="dimensionType",\n            values=["values"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_version', 'channel', 'device_type', 'make', 'model', 'platform']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.DemographicProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.GPSPointProperty
class CfnSegment_GPSPointPropertyDef(BaseStruct):
    coordinates: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pinpoint.CfnSegment_CoordinatesPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The GPS coordinates to measure distance from.\n')
    range_in_kilometers: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The range, in kilometers, from the GPS coordinates.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-gpspoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    g_pSPoint_property = pinpoint.CfnSegment.GPSPointProperty(\n        coordinates=pinpoint.CfnSegment.CoordinatesProperty(\n            latitude=123,\n            longitude=123\n        ),\n        range_in_kilometers=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['coordinates', 'range_in_kilometers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.GPSPointProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.GroupsProperty
class CfnSegment_GroupsPropertyDef(BaseStruct):
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SegmentDimensionsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array that defines the dimensions to include or exclude from the segment.\n')
    source_segments: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SourceSegmentsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The base segment to build the segment on. A base segment, also called a *source segment* , defines the initial population of endpoints for a segment. When you add dimensions to the segment, Amazon Pinpoint filters the base segment by using the dimensions that you specify. You can specify more than one dimensional segment or only one imported segment. If you specify an imported segment, the segment size estimate that displays on the Amazon Pinpoint console indicates the size of the imported segment without any filters applied to it.\n')
    source_type: typing.Optional[str] = pydantic.Field(None, description='Specifies how to handle multiple base segments for the segment. For example, if you specify three base segments for the segment, whether the resulting segment is based on all, any, or none of the base segments.\n')
    type: typing.Optional[str] = pydantic.Field(None, description='Specifies how to handle multiple dimensions for the segment. For example, if you specify three dimensions for the segment, whether the resulting segment includes endpoints that match all, any, or none of the dimensions.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-groups.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # attributes: Any\n    # metrics: Any\n    # user_attributes: Any\n\n    groups_property = pinpoint.CfnSegment.GroupsProperty(\n        dimensions=[pinpoint.CfnSegment.SegmentDimensionsProperty(\n            attributes=attributes,\n            behavior=pinpoint.CfnSegment.BehaviorProperty(\n                recency=pinpoint.CfnSegment.RecencyProperty(\n                    duration="duration",\n                    recency_type="recencyType"\n                )\n            ),\n            demographic=pinpoint.CfnSegment.DemographicProperty(\n                app_version=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                channel=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                device_type=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                make=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                model=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                platform=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                )\n            ),\n            location=pinpoint.CfnSegment.LocationProperty(\n                country=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                gps_point=pinpoint.CfnSegment.GPSPointProperty(\n                    coordinates=pinpoint.CfnSegment.CoordinatesProperty(\n                        latitude=123,\n                        longitude=123\n                    ),\n                    range_in_kilometers=123\n                )\n            ),\n            metrics=metrics,\n            user_attributes=user_attributes\n        )],\n        source_segments=[pinpoint.CfnSegment.SourceSegmentsProperty(\n            id="id",\n\n            # the properties below are optional\n            version=123\n        )],\n        source_type="sourceType",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dimensions', 'source_segments', 'source_type', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.GroupsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.LocationProperty
class CfnSegment_LocationPropertyDef(BaseStruct):
    country: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The country or region code, in ISO 3166-1 alpha-2 format, for the segment.\n')
    gps_point: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_GPSPointPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The GPS point dimension for the segment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-location.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    location_property = pinpoint.CfnSegment.LocationProperty(\n        country=pinpoint.CfnSegment.SetDimensionProperty(\n            dimension_type="dimensionType",\n            values=["values"]\n        ),\n        gps_point=pinpoint.CfnSegment.GPSPointProperty(\n            coordinates=pinpoint.CfnSegment.CoordinatesProperty(\n                latitude=123,\n                longitude=123\n            ),\n            range_in_kilometers=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['country', 'gps_point']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.LocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.RecencyProperty
class CfnSegment_RecencyPropertyDef(BaseStruct):
    duration: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The duration to use when determining which users have been active or inactive with your app. Possible values: ``HR_24`` | ``DAY_7`` | ``DAY_14`` | ``DAY_30`` .\n')
    recency_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of recency dimension to use for the segment. Valid values are: ``ACTIVE`` and ``INACTIVE`` . If the value is ``ACTIVE`` , the segment includes users who have used your app within the specified duration are included in the segment. If the value is ``INACTIVE`` , the segment includes users who haven\'t used your app within the specified duration are included in the segment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-recency.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    recency_property = pinpoint.CfnSegment.RecencyProperty(\n        duration="duration",\n        recency_type="recencyType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['duration', 'recency_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.RecencyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.SegmentDimensionsProperty
class CfnSegment_SegmentDimensionsPropertyDef(BaseStruct):
    attributes: typing.Any = pydantic.Field(None, description='One or more custom attributes to use as criteria for the segment. For more information see `AttributeDimension <https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-segments.html#apps-application-id-segments-model-attributedimension>`_\n')
    behavior: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_BehaviorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The behavior-based criteria, such as how recently users have used your app, for the segment.\n')
    demographic: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_DemographicPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The demographic-based criteria, such as device platform, for the segment.\n')
    location: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The location-based criteria, such as region or GPS coordinates, for the segment.\n')
    metrics: typing.Any = pydantic.Field(None, description='One or more custom metrics to use as criteria for the segment.\n')
    user_attributes: typing.Any = pydantic.Field(None, description='One or more custom user attributes to use as criteria for the segment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-segmentdimensions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # attributes: Any\n    # metrics: Any\n    # user_attributes: Any\n\n    segment_dimensions_property = pinpoint.CfnSegment.SegmentDimensionsProperty(\n        attributes=attributes,\n        behavior=pinpoint.CfnSegment.BehaviorProperty(\n            recency=pinpoint.CfnSegment.RecencyProperty(\n                duration="duration",\n                recency_type="recencyType"\n            )\n        ),\n        demographic=pinpoint.CfnSegment.DemographicProperty(\n            app_version=pinpoint.CfnSegment.SetDimensionProperty(\n                dimension_type="dimensionType",\n                values=["values"]\n            ),\n            channel=pinpoint.CfnSegment.SetDimensionProperty(\n                dimension_type="dimensionType",\n                values=["values"]\n            ),\n            device_type=pinpoint.CfnSegment.SetDimensionProperty(\n                dimension_type="dimensionType",\n                values=["values"]\n            ),\n            make=pinpoint.CfnSegment.SetDimensionProperty(\n                dimension_type="dimensionType",\n                values=["values"]\n            ),\n            model=pinpoint.CfnSegment.SetDimensionProperty(\n                dimension_type="dimensionType",\n                values=["values"]\n            ),\n            platform=pinpoint.CfnSegment.SetDimensionProperty(\n                dimension_type="dimensionType",\n                values=["values"]\n            )\n        ),\n        location=pinpoint.CfnSegment.LocationProperty(\n            country=pinpoint.CfnSegment.SetDimensionProperty(\n                dimension_type="dimensionType",\n                values=["values"]\n            ),\n            gps_point=pinpoint.CfnSegment.GPSPointProperty(\n                coordinates=pinpoint.CfnSegment.CoordinatesProperty(\n                    latitude=123,\n                    longitude=123\n                ),\n                range_in_kilometers=123\n            )\n        ),\n        metrics=metrics,\n        user_attributes=user_attributes\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attributes', 'behavior', 'demographic', 'location', 'metrics', 'user_attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.SegmentDimensionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.SegmentGroupsProperty
class CfnSegment_SegmentGroupsPropertyDef(BaseStruct):
    groups: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_GroupsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the set of segment criteria to evaluate when handling segment groups for the segment.\n')
    include: typing.Optional[str] = pydantic.Field(None, description='Specifies how to handle multiple segment groups for the segment. For example, if the segment includes three segment groups, whether the resulting segment includes endpoints that match all, any, or none of the segment groups.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-segmentgroups.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # attributes: Any\n    # metrics: Any\n    # user_attributes: Any\n\n    segment_groups_property = pinpoint.CfnSegment.SegmentGroupsProperty(\n        groups=[pinpoint.CfnSegment.GroupsProperty(\n            dimensions=[pinpoint.CfnSegment.SegmentDimensionsProperty(\n                attributes=attributes,\n                behavior=pinpoint.CfnSegment.BehaviorProperty(\n                    recency=pinpoint.CfnSegment.RecencyProperty(\n                        duration="duration",\n                        recency_type="recencyType"\n                    )\n                ),\n                demographic=pinpoint.CfnSegment.DemographicProperty(\n                    app_version=pinpoint.CfnSegment.SetDimensionProperty(\n                        dimension_type="dimensionType",\n                        values=["values"]\n                    ),\n                    channel=pinpoint.CfnSegment.SetDimensionProperty(\n                        dimension_type="dimensionType",\n                        values=["values"]\n                    ),\n                    device_type=pinpoint.CfnSegment.SetDimensionProperty(\n                        dimension_type="dimensionType",\n                        values=["values"]\n                    ),\n                    make=pinpoint.CfnSegment.SetDimensionProperty(\n                        dimension_type="dimensionType",\n                        values=["values"]\n                    ),\n                    model=pinpoint.CfnSegment.SetDimensionProperty(\n                        dimension_type="dimensionType",\n                        values=["values"]\n                    ),\n                    platform=pinpoint.CfnSegment.SetDimensionProperty(\n                        dimension_type="dimensionType",\n                        values=["values"]\n                    )\n                ),\n                location=pinpoint.CfnSegment.LocationProperty(\n                    country=pinpoint.CfnSegment.SetDimensionProperty(\n                        dimension_type="dimensionType",\n                        values=["values"]\n                    ),\n                    gps_point=pinpoint.CfnSegment.GPSPointProperty(\n                        coordinates=pinpoint.CfnSegment.CoordinatesProperty(\n                            latitude=123,\n                            longitude=123\n                        ),\n                        range_in_kilometers=123\n                    )\n                ),\n                metrics=metrics,\n                user_attributes=user_attributes\n            )],\n            source_segments=[pinpoint.CfnSegment.SourceSegmentsProperty(\n                id="id",\n\n                # the properties below are optional\n                version=123\n            )],\n            source_type="sourceType",\n            type="type"\n        )],\n        include="include"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['groups', 'include']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.SegmentGroupsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.SetDimensionProperty
class CfnSegment_SetDimensionPropertyDef(BaseStruct):
    dimension_type: typing.Optional[str] = pydantic.Field(None, description='The type of segment dimension to use. Valid values are: ``INCLUSIVE`` , endpoints that match the criteria are included in the segment; and, ``EXCLUSIVE`` , endpoints that match the criteria are excluded from the segment.\n')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The criteria values to use for the segment dimension. Depending on the value of the ``DimensionType`` property, endpoints are included or excluded from the segment if their values match the criteria values.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-setdimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    set_dimension_property = pinpoint.CfnSegment.SetDimensionProperty(\n        dimension_type="dimensionType",\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dimension_type', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.SetDimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment.SourceSegmentsProperty
class CfnSegment_SourceSegmentsPropertyDef(BaseStruct):
    version: typing.Union[int, float, None] = pydantic.Field(None, description='The version number of the source segment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-pinpoint-segment-sourcesegments.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    source_segments_property = pinpoint.CfnSegment.SourceSegmentsProperty(\n        id="id",\n\n        # the properties below are optional\n        version=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment.SourceSegmentsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnADMChannel
class CfnADMChannelDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the ADM channel applies to.\n')
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Client ID that you received from Amazon to send messages by using ADM.\n')
    client_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Client Secret that you received from Amazon to send messages by using ADM.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the ADM channel for the application.')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'client_id', 'client_secret', 'enabled']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnADMChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnADMChannelDefConfig] = pydantic.Field(None)


class CfnADMChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnADMChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnADMChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnADMChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnADMChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnADMChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnADMChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnADMChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnADMChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnADMChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnADMChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnADMChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnADMChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnADMChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnADMChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnADMChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnADMChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnADMChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnADMChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnADMChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnADMChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnADMChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnADMChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnADMChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnADMChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnADMChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnADMChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnADMChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnAPNSChannel
class CfnAPNSChannelDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the APNs channel applies to.\n')
    bundle_id: typing.Optional[str] = pydantic.Field(None, description="The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.\n")
    certificate: typing.Optional[str] = pydantic.Field(None, description='The APNs client certificate that you received from Apple. Specify this value if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.\n')
    default_authentication_method: typing.Optional[str] = pydantic.Field(None, description='The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs. Valid options are ``key`` or ``certificate`` .\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the APNs channel for the application.\n')
    private_key: typing.Optional[str] = pydantic.Field(None, description='The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.\n')
    team_id: typing.Optional[str] = pydantic.Field(None, description="The identifier that's assigned to your Apple Developer Account team. This identifier is used for APNs tokens.\n")
    token_key: typing.Optional[str] = pydantic.Field(None, description='The authentication key to use for APNs tokens.\n')
    token_key_id: typing.Optional[str] = pydantic.Field(None, description="The key identifier that's assigned to your APNs signing key. Specify this value if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.")
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'bundle_id', 'certificate', 'default_authentication_method', 'enabled', 'private_key', 'team_id', 'token_key', 'token_key_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnAPNSChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAPNSChannelDefConfig] = pydantic.Field(None)


class CfnAPNSChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnAPNSChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAPNSChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAPNSChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAPNSChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAPNSChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAPNSChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAPNSChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAPNSChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAPNSChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAPNSChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAPNSChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAPNSChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAPNSChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnAPNSChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAPNSChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAPNSChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAPNSChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAPNSChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAPNSChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAPNSChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAPNSChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAPNSChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAPNSChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAPNSChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAPNSChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAPNSChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAPNSChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnAPNSSandboxChannel
class CfnAPNSSandboxChannelDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the APNs sandbox channel applies to.\n')
    bundle_id: typing.Optional[str] = pydantic.Field(None, description="The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.\n")
    certificate: typing.Optional[str] = pydantic.Field(None, description='The APNs client certificate that you received from Apple. Specify this value if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.\n')
    default_authentication_method: typing.Optional[str] = pydantic.Field(None, description='The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs. Valid options are ``key`` or ``certificate`` .\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the APNs Sandbox channel for the Amazon Pinpoint application.\n')
    private_key: typing.Optional[str] = pydantic.Field(None, description='The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.\n')
    team_id: typing.Optional[str] = pydantic.Field(None, description="The identifier that's assigned to your Apple Developer Account team. This identifier is used for APNs tokens.\n")
    token_key: typing.Optional[str] = pydantic.Field(None, description='The authentication key to use for APNs tokens.\n')
    token_key_id: typing.Optional[str] = pydantic.Field(None, description="The key identifier that's assigned to your APNs signing key. Specify this value if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.")
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'bundle_id', 'certificate', 'default_authentication_method', 'enabled', 'private_key', 'team_id', 'token_key', 'token_key_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnAPNSSandboxChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAPNSSandboxChannelDefConfig] = pydantic.Field(None)


class CfnAPNSSandboxChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnAPNSSandboxChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAPNSSandboxChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAPNSSandboxChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAPNSSandboxChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAPNSSandboxChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAPNSSandboxChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAPNSSandboxChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAPNSSandboxChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAPNSSandboxChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAPNSSandboxChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAPNSSandboxChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAPNSSandboxChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAPNSSandboxChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnAPNSSandboxChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAPNSSandboxChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAPNSSandboxChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAPNSSandboxChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAPNSSandboxChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAPNSSandboxChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAPNSSandboxChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAPNSSandboxChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAPNSSandboxChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAPNSSandboxChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAPNSSandboxChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAPNSSandboxChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAPNSSandboxChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAPNSSandboxChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnAPNSVoipChannel
class CfnAPNSVoipChannelDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the APNs VoIP channel applies to.\n')
    bundle_id: typing.Optional[str] = pydantic.Field(None, description="The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.\n")
    certificate: typing.Optional[str] = pydantic.Field(None, description='The APNs client certificate that you received from Apple. Specify this value if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.\n')
    default_authentication_method: typing.Optional[str] = pydantic.Field(None, description='The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs. Valid options are ``key`` or ``certificate`` .\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the APNs VoIP channel for the Amazon Pinpoint application.\n')
    private_key: typing.Optional[str] = pydantic.Field(None, description='The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.\n')
    team_id: typing.Optional[str] = pydantic.Field(None, description="The identifier that's assigned to your Apple Developer Account team. This identifier is used for APNs tokens.\n")
    token_key: typing.Optional[str] = pydantic.Field(None, description='The authentication key to use for APNs tokens.\n')
    token_key_id: typing.Optional[str] = pydantic.Field(None, description="The key identifier that's assigned to your APNs signing key. Specify this value if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.")
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'bundle_id', 'certificate', 'default_authentication_method', 'enabled', 'private_key', 'team_id', 'token_key', 'token_key_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnAPNSVoipChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAPNSVoipChannelDefConfig] = pydantic.Field(None)


class CfnAPNSVoipChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnAPNSVoipChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAPNSVoipChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAPNSVoipChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAPNSVoipChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAPNSVoipChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAPNSVoipChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAPNSVoipChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAPNSVoipChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAPNSVoipChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAPNSVoipChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAPNSVoipChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAPNSVoipChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAPNSVoipChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnAPNSVoipChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAPNSVoipChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAPNSVoipChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAPNSVoipChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAPNSVoipChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAPNSVoipChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAPNSVoipChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAPNSVoipChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAPNSVoipChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAPNSVoipChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAPNSVoipChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAPNSVoipChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAPNSVoipChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAPNSVoipChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnAPNSVoipSandboxChannel
class CfnAPNSVoipSandboxChannelDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the application that the APNs VoIP sandbox channel applies to.\n')
    bundle_id: typing.Optional[str] = pydantic.Field(None, description="The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.\n")
    certificate: typing.Optional[str] = pydantic.Field(None, description='The APNs client certificate that you received from Apple. Specify this value if you want Amazon Pinpoint to communicate with the APNs sandbox environment by using an APNs certificate.\n')
    default_authentication_method: typing.Optional[str] = pydantic.Field(None, description='The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs. Valid options are ``key`` or ``certificate`` .\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether the APNs VoIP sandbox channel is enabled for the application.\n')
    private_key: typing.Optional[str] = pydantic.Field(None, description='The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with the APNs sandbox environment.\n')
    team_id: typing.Optional[str] = pydantic.Field(None, description="The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.\n")
    token_key: typing.Optional[str] = pydantic.Field(None, description='The authentication key to use for APNs tokens.\n')
    token_key_id: typing.Optional[str] = pydantic.Field(None, description="The key identifier that's assigned to your APNs signing key. Specify this value if you want Amazon Pinpoint to communicate with the APNs sandbox environment by using APNs tokens.")
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'bundle_id', 'certificate', 'default_authentication_method', 'enabled', 'private_key', 'team_id', 'token_key', 'token_key_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnAPNSVoipSandboxChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAPNSVoipSandboxChannelDefConfig] = pydantic.Field(None)


class CfnAPNSVoipSandboxChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnAPNSVoipSandboxChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAPNSVoipSandboxChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAPNSVoipSandboxChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAPNSVoipSandboxChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAPNSVoipSandboxChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAPNSVoipSandboxChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAPNSVoipSandboxChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAPNSVoipSandboxChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAPNSVoipSandboxChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAPNSVoipSandboxChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAPNSVoipSandboxChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAPNSVoipSandboxChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAPNSVoipSandboxChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnAPNSVoipSandboxChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAPNSVoipSandboxChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAPNSVoipSandboxChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAPNSVoipSandboxChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAPNSVoipSandboxChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAPNSVoipSandboxChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAPNSVoipSandboxChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAPNSVoipSandboxChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAPNSVoipSandboxChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAPNSVoipSandboxChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAPNSVoipSandboxChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAPNSVoipSandboxChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAPNSVoipSandboxChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAPNSVoipSandboxChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnApp
class CfnAppDef(BaseCfnResource):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the application.\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnApp'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAppDefConfig] = pydantic.Field(None)


class CfnAppDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnAppDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAppDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAppDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAppDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAppDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAppDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAppDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAppDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAppDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAppDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAppDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAppDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAppDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAppDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAppDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAppDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAppDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAppDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAppDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAppDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAppDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAppDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAppDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAppDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAppDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAppDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAppDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnApplicationSettings
class CfnApplicationSettingsDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application.\n')
    campaign_hook: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnApplicationSettings_CampaignHookPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings for the Lambda function to use by default as a code hook for campaigns in the application. To override these settings for a specific campaign, use the Campaign resource to define custom Lambda function settings for the campaign.\n')
    cloud_watch_metrics_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable application-related alarms in Amazon CloudWatch.\n')
    limits: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnApplicationSettings_LimitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default sending limits for campaigns in the application. To override these limits for a specific campaign, use the Campaign resource to define custom limits for the campaign.\n')
    quiet_time: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnApplicationSettings_QuietTimePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The default quiet time for campaigns in the application. Quiet time is a specific time range when campaigns don't send messages to endpoints, if all the following conditions are met: - The ``EndpointDemographic.Timezone`` property of the endpoint is set to a valid value. - The current time in the endpoint's time zone is later than or equal to the time specified by the ``QuietTime.Start`` property for the application (or a campaign that has custom quiet time settings). - The current time in the endpoint's time zone is earlier than or equal to the time specified by the ``QuietTime.End`` property for the application (or a campaign that has custom quiet time settings). If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign, even if quiet time is enabled. To override the default quiet time settings for a specific campaign, use the Campaign resource to define a custom quiet time for the campaign.")
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'campaign_hook', 'cloud_watch_metrics_enabled', 'limits', 'quiet_time']
    _method_names: typing.ClassVar[list[str]] = ['CampaignHookProperty', 'LimitsProperty', 'QuietTimeProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnApplicationSettings'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnApplicationSettingsDefConfig] = pydantic.Field(None)


class CfnApplicationSettingsDefConfig(pydantic.BaseModel):
    CampaignHookProperty: typing.Optional[list[CfnApplicationSettingsDefCampaignhookpropertyParams]] = pydantic.Field(None, description='')
    LimitsProperty: typing.Optional[list[CfnApplicationSettingsDefLimitspropertyParams]] = pydantic.Field(None, description='')
    QuietTimeProperty: typing.Optional[list[CfnApplicationSettingsDefQuiettimepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnApplicationSettingsDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnApplicationSettingsDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnApplicationSettingsDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnApplicationSettingsDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnApplicationSettingsDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnApplicationSettingsDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnApplicationSettingsDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnApplicationSettingsDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnApplicationSettingsDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnApplicationSettingsDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnApplicationSettingsDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnApplicationSettingsDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnApplicationSettingsDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnApplicationSettingsDefCampaignhookpropertyParams(pydantic.BaseModel):
    lambda_function_name: typing.Optional[str] = pydantic.Field(None, description='')
    mode: typing.Optional[str] = pydantic.Field(None, description='')
    web_url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationSettingsDefLimitspropertyParams(pydantic.BaseModel):
    daily: typing.Union[int, float, None] = pydantic.Field(None, description='')
    maximum_duration: typing.Union[int, float, None] = pydantic.Field(None, description='')
    messages_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='')
    total: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnApplicationSettingsDefQuiettimepropertyParams(pydantic.BaseModel):
    end: str = pydantic.Field(..., description='')
    start: str = pydantic.Field(..., description='')
    ...

class CfnApplicationSettingsDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApplicationSettingsDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationSettingsDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApplicationSettingsDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationSettingsDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApplicationSettingsDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApplicationSettingsDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApplicationSettingsDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApplicationSettingsDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApplicationSettingsDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationSettingsDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnApplicationSettingsDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApplicationSettingsDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationSettingsDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnBaiduChannel
class CfnBaiduChannelDef(BaseCfnResource):
    api_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The API key that you received from the Baidu Cloud Push service to communicate with the service.\n')
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The unique identifier for the Amazon Pinpoint application that you're configuring the Baidu channel for.\n")
    secret_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The secret key that you received from the Baidu Cloud Push service to communicate with the service.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the Baidu channel for the application.')
    _init_params: typing.ClassVar[list[str]] = ['api_key', 'application_id', 'secret_key', 'enabled']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnBaiduChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnBaiduChannelDefConfig] = pydantic.Field(None)


class CfnBaiduChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnBaiduChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnBaiduChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnBaiduChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnBaiduChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnBaiduChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnBaiduChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnBaiduChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnBaiduChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnBaiduChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnBaiduChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnBaiduChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnBaiduChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnBaiduChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnBaiduChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnBaiduChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBaiduChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnBaiduChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBaiduChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnBaiduChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnBaiduChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnBaiduChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnBaiduChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnBaiduChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBaiduChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnBaiduChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnBaiduChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBaiduChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaign
class CfnCampaignDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the campaign is associated with.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the campaign.\n')
    schedule: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_SchedulePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The schedule settings for the campaign.\n')
    segment_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the segment to associate with the campaign.\n')
    additional_treatments: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_WriteTreatmentResourcePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of requests that defines additional treatments for the campaign, in addition to the default treatment for the campaign.\n')
    campaign_hook: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignHookPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the Lambda function to use as a code hook for a campaign.\n')
    custom_delivery_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CustomDeliveryConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The delivery configuration settings for sending the treatment through a custom channel. This object is required if the ``MessageConfiguration`` object for the treatment specifies a ``CustomMessage`` object.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the campaign.\n')
    holdout_percent: typing.Union[int, float, None] = pydantic.Field(None, description="The allocated percentage of users (segment members) who shouldn't receive messages from the campaign.\n")
    is_paused: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether to pause the campaign. A paused campaign doesn't run unless you resume it by changing this value to ``false`` . If you restart a campaign, the campaign restarts from the beginning and not at the point you paused it. If a campaign is running it will complete and then pause. Pause only pauses or skips the next run for a recurring future scheduled campaign. A campaign scheduled for immediate can't be paused.\n")
    limits: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_LimitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The messaging limits for the campaign.\n')
    message_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessageConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message configuration settings for the campaign.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='An integer between 1 and 5, inclusive, that represents the priority of the in-app message campaign, where 1 is the highest priority and 5 is the lowest. If there are multiple messages scheduled to be displayed at the same time, the priority determines the order in which those messages are displayed.\n')
    segment_version: typing.Union[int, float, None] = pydantic.Field(None, description='The version of the segment to associate with the campaign.\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplateConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the treatment.\n')
    treatment_description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the default treatment for the campaign.\n')
    treatment_name: typing.Optional[str] = pydantic.Field(None, description="A custom name of the default treatment for the campaign, if the campaign has multiple treatments. A *treatment* is a variation of a campaign that's used for A/B testing.")
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'name', 'schedule', 'segment_id', 'additional_treatments', 'campaign_hook', 'custom_delivery_configuration', 'description', 'holdout_percent', 'is_paused', 'limits', 'message_configuration', 'priority', 'segment_version', 'tags', 'template_configuration', 'treatment_description', 'treatment_name']
    _method_names: typing.ClassVar[list[str]] = ['AttributeDimensionProperty', 'CampaignCustomMessageProperty', 'CampaignEmailMessageProperty', 'CampaignEventFilterProperty', 'CampaignHookProperty', 'CampaignInAppMessageProperty', 'CampaignSmsMessageProperty', 'CustomDeliveryConfigurationProperty', 'DefaultButtonConfigurationProperty', 'EventDimensionsProperty', 'InAppMessageBodyConfigProperty', 'InAppMessageButtonProperty', 'InAppMessageContentProperty', 'InAppMessageHeaderConfigProperty', 'LimitsProperty', 'MessageConfigurationProperty', 'MessageProperty', 'MetricDimensionProperty', 'OverrideButtonConfigurationProperty', 'QuietTimeProperty', 'ScheduleProperty', 'SetDimensionProperty', 'TemplateConfigurationProperty', 'TemplateProperty', 'WriteTreatmentResourceProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaign'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnCampaignDefConfig] = pydantic.Field(None)


class CfnCampaignDefConfig(pydantic.BaseModel):
    AttributeDimensionProperty: typing.Optional[list[CfnCampaignDefAttributedimensionpropertyParams]] = pydantic.Field(None, description='')
    CampaignCustomMessageProperty: typing.Optional[list[CfnCampaignDefCampaigncustommessagepropertyParams]] = pydantic.Field(None, description='')
    CampaignEmailMessageProperty: typing.Optional[list[CfnCampaignDefCampaignemailmessagepropertyParams]] = pydantic.Field(None, description='')
    CampaignEventFilterProperty: typing.Optional[list[CfnCampaignDefCampaigneventfilterpropertyParams]] = pydantic.Field(None, description='')
    CampaignHookProperty: typing.Optional[list[CfnCampaignDefCampaignhookpropertyParams]] = pydantic.Field(None, description='')
    CampaignInAppMessageProperty: typing.Optional[list[CfnCampaignDefCampaigninappmessagepropertyParams]] = pydantic.Field(None, description='')
    CampaignSmsMessageProperty: typing.Optional[list[CfnCampaignDefCampaignsmsmessagepropertyParams]] = pydantic.Field(None, description='')
    CustomDeliveryConfigurationProperty: typing.Optional[list[CfnCampaignDefCustomdeliveryconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DefaultButtonConfigurationProperty: typing.Optional[list[CfnCampaignDefDefaultbuttonconfigurationpropertyParams]] = pydantic.Field(None, description='')
    EventDimensionsProperty: typing.Optional[list[CfnCampaignDefEventdimensionspropertyParams]] = pydantic.Field(None, description='')
    InAppMessageBodyConfigProperty: typing.Optional[list[CfnCampaignDefInappmessagebodyconfigpropertyParams]] = pydantic.Field(None, description='')
    InAppMessageButtonProperty: typing.Optional[list[CfnCampaignDefInappmessagebuttonpropertyParams]] = pydantic.Field(None, description='')
    InAppMessageContentProperty: typing.Optional[list[CfnCampaignDefInappmessagecontentpropertyParams]] = pydantic.Field(None, description='')
    InAppMessageHeaderConfigProperty: typing.Optional[list[CfnCampaignDefInappmessageheaderconfigpropertyParams]] = pydantic.Field(None, description='')
    LimitsProperty: typing.Optional[list[CfnCampaignDefLimitspropertyParams]] = pydantic.Field(None, description='')
    MessageConfigurationProperty: typing.Optional[list[CfnCampaignDefMessageconfigurationpropertyParams]] = pydantic.Field(None, description='')
    MessageProperty: typing.Optional[list[CfnCampaignDefMessagepropertyParams]] = pydantic.Field(None, description='')
    MetricDimensionProperty: typing.Optional[list[CfnCampaignDefMetricdimensionpropertyParams]] = pydantic.Field(None, description='')
    OverrideButtonConfigurationProperty: typing.Optional[list[CfnCampaignDefOverridebuttonconfigurationpropertyParams]] = pydantic.Field(None, description='')
    QuietTimeProperty: typing.Optional[list[CfnCampaignDefQuiettimepropertyParams]] = pydantic.Field(None, description='')
    ScheduleProperty: typing.Optional[list[CfnCampaignDefSchedulepropertyParams]] = pydantic.Field(None, description='')
    SetDimensionProperty: typing.Optional[list[CfnCampaignDefSetdimensionpropertyParams]] = pydantic.Field(None, description='')
    TemplateConfigurationProperty: typing.Optional[list[CfnCampaignDefTemplateconfigurationpropertyParams]] = pydantic.Field(None, description='')
    TemplateProperty: typing.Optional[list[CfnCampaignDefTemplatepropertyParams]] = pydantic.Field(None, description='')
    WriteTreatmentResourceProperty: typing.Optional[list[CfnCampaignDefWritetreatmentresourcepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnCampaignDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnCampaignDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnCampaignDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnCampaignDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnCampaignDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnCampaignDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnCampaignDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnCampaignDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnCampaignDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnCampaignDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnCampaignDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnCampaignDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnCampaignDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnCampaignDefAttributedimensionpropertyParams(pydantic.BaseModel):
    attribute_type: typing.Optional[str] = pydantic.Field(None, description='')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefCampaigncustommessagepropertyParams(pydantic.BaseModel):
    data: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefCampaignemailmessagepropertyParams(pydantic.BaseModel):
    body: typing.Optional[str] = pydantic.Field(None, description='')
    from_address: typing.Optional[str] = pydantic.Field(None, description='')
    html_body: typing.Optional[str] = pydantic.Field(None, description='')
    title: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefCampaigneventfilterpropertyParams(pydantic.BaseModel):
    dimensions: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_EventDimensionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    filter_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefCampaignhookpropertyParams(pydantic.BaseModel):
    lambda_function_name: typing.Optional[str] = pydantic.Field(None, description='')
    mode: typing.Optional[str] = pydantic.Field(None, description='')
    web_url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefCampaigninappmessagepropertyParams(pydantic.BaseModel):
    content: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageContentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    custom_config: typing.Any = pydantic.Field(None, description='')
    layout: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefCampaignsmsmessagepropertyParams(pydantic.BaseModel):
    body: typing.Optional[str] = pydantic.Field(None, description='')
    entity_id: typing.Optional[str] = pydantic.Field(None, description='')
    message_type: typing.Optional[str] = pydantic.Field(None, description='')
    origination_number: typing.Optional[str] = pydantic.Field(None, description='')
    sender_id: typing.Optional[str] = pydantic.Field(None, description='')
    template_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefCustomdeliveryconfigurationpropertyParams(pydantic.BaseModel):
    delivery_uri: typing.Optional[str] = pydantic.Field(None, description='')
    endpoint_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefDefaultbuttonconfigurationpropertyParams(pydantic.BaseModel):
    background_color: typing.Optional[str] = pydantic.Field(None, description='')
    border_radius: typing.Union[int, float, None] = pydantic.Field(None, description='')
    button_action: typing.Optional[str] = pydantic.Field(None, description='')
    link: typing.Optional[str] = pydantic.Field(None, description='')
    text: typing.Optional[str] = pydantic.Field(None, description='')
    text_color: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefEventdimensionspropertyParams(pydantic.BaseModel):
    attributes: typing.Any = pydantic.Field(None, description='')
    event_type: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    metrics: typing.Any = pydantic.Field(None, description='')
    ...

class CfnCampaignDefInappmessagebodyconfigpropertyParams(pydantic.BaseModel):
    alignment: typing.Optional[str] = pydantic.Field(None, description='')
    body: typing.Optional[str] = pydantic.Field(None, description='')
    text_color: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefInappmessagebuttonpropertyParams(pydantic.BaseModel):
    android: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_DefaultButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ios: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    web: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefInappmessagecontentpropertyParams(pydantic.BaseModel):
    background_color: typing.Optional[str] = pydantic.Field(None, description='')
    body_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageBodyConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    header_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageHeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    image_url: typing.Optional[str] = pydantic.Field(None, description='')
    primary_btn: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    secondary_btn: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_InAppMessageButtonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefInappmessageheaderconfigpropertyParams(pydantic.BaseModel):
    alignment: typing.Optional[str] = pydantic.Field(None, description='')
    header: typing.Optional[str] = pydantic.Field(None, description='')
    text_color: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefLimitspropertyParams(pydantic.BaseModel):
    daily: typing.Union[int, float, None] = pydantic.Field(None, description='')
    maximum_duration: typing.Union[int, float, None] = pydantic.Field(None, description='')
    messages_per_second: typing.Union[int, float, None] = pydantic.Field(None, description='')
    session: typing.Union[int, float, None] = pydantic.Field(None, description='')
    total: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefMessageconfigurationpropertyParams(pydantic.BaseModel):
    adm_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    apns_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    baidu_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    custom_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignCustomMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    email_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignEmailMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    gcm_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    in_app_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignInAppMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sms_message: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignSmsMessagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefMessagepropertyParams(pydantic.BaseModel):
    action: typing.Optional[str] = pydantic.Field(None, description='')
    body: typing.Optional[str] = pydantic.Field(None, description='')
    image_icon_url: typing.Optional[str] = pydantic.Field(None, description='')
    image_small_icon_url: typing.Optional[str] = pydantic.Field(None, description='')
    image_url: typing.Optional[str] = pydantic.Field(None, description='')
    json_body: typing.Optional[str] = pydantic.Field(None, description='')
    media_url: typing.Optional[str] = pydantic.Field(None, description='')
    raw_content: typing.Optional[str] = pydantic.Field(None, description='')
    silent_push: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    time_to_live: typing.Union[int, float, None] = pydantic.Field(None, description='')
    title: typing.Optional[str] = pydantic.Field(None, description='')
    url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefMetricdimensionpropertyParams(pydantic.BaseModel):
    comparison_operator: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefOverridebuttonconfigurationpropertyParams(pydantic.BaseModel):
    button_action: typing.Optional[str] = pydantic.Field(None, description='')
    link: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefQuiettimepropertyParams(pydantic.BaseModel):
    end: str = pydantic.Field(..., description='')
    start: str = pydantic.Field(..., description='')
    ...

class CfnCampaignDefSchedulepropertyParams(pydantic.BaseModel):
    end_time: typing.Optional[str] = pydantic.Field(None, description='')
    event_filter: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignEventFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    frequency: typing.Optional[str] = pydantic.Field(None, description='')
    is_local_time: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    quiet_time: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_QuietTimePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    start_time: typing.Optional[str] = pydantic.Field(None, description='')
    time_zone: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefSetdimensionpropertyParams(pydantic.BaseModel):
    dimension_type: typing.Optional[str] = pydantic.Field(None, description='')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefTemplateconfigurationpropertyParams(pydantic.BaseModel):
    email_template: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    push_template: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sms_template: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    voice_template: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefTemplatepropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefWritetreatmentresourcepropertyParams(pydantic.BaseModel):
    custom_delivery_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CustomDeliveryConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    message_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessageConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    schedule: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_SchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    size_percent: typing.Union[int, float, None] = pydantic.Field(None, description='')
    template_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplateConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    treatment_description: typing.Optional[str] = pydantic.Field(None, description='')
    treatment_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCampaignDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCampaignDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCampaignDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCampaignDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCampaignDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCampaignDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCampaignDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCampaignDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCampaignDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCampaignDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCampaignDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnCampaignDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCampaignDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCampaignDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnEmailChannel
class CfnEmailChannelDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The unique identifier for the Amazon Pinpoint application that you're specifying the email channel for.\n")
    from_address: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The verified email address that you want to send email from when you send email through the channel.\n')
    identity: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the identity, verified with Amazon Simple Email Service (Amazon SES), that you want to use when you send email through the channel.\n')
    configuration_set: typing.Optional[str] = pydantic.Field(None, description='The `Amazon SES configuration set <https://docs.aws.amazon.com/ses/latest/APIReference/API_ConfigurationSet.html>`_ that you want to apply to messages that you send through the channel.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the email channel for the application.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the AWS Identity and Access Management (IAM) role that you want Amazon Pinpoint to use when it submits email-related event data for the channel.')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'from_address', 'identity', 'configuration_set', 'enabled', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnEmailChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnEmailChannelDefConfig] = pydantic.Field(None)


class CfnEmailChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnEmailChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnEmailChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnEmailChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnEmailChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnEmailChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnEmailChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnEmailChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnEmailChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnEmailChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnEmailChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnEmailChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnEmailChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnEmailChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnEmailChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEmailChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEmailChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEmailChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEmailChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEmailChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEmailChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEmailChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEmailChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEmailChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEmailChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnEmailChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEmailChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEmailChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnEmailTemplate
class CfnEmailTemplateDef(BaseCfnResource):
    subject: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The subject line, or title, to use in email messages that are based on the message template.\n')
    template_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the message template.\n')
    default_substitutions: typing.Optional[str] = pydantic.Field(None, description="A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.\n")
    html_part: typing.Optional[str] = pydantic.Field(None, description='The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the message template.\n')
    text_part: typing.Optional[str] = pydantic.Field(None, description="The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.")
    _init_params: typing.ClassVar[list[str]] = ['subject', 'template_name', 'default_substitutions', 'html_part', 'tags', 'template_description', 'text_part']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnEmailTemplate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnEmailTemplateDefConfig] = pydantic.Field(None)


class CfnEmailTemplateDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnEmailTemplateDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnEmailTemplateDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnEmailTemplateDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnEmailTemplateDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnEmailTemplateDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnEmailTemplateDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnEmailTemplateDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnEmailTemplateDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnEmailTemplateDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnEmailTemplateDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnEmailTemplateDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnEmailTemplateDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnEmailTemplateDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnEmailTemplateDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEmailTemplateDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEmailTemplateDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEmailTemplateDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEmailTemplateDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEmailTemplateDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEmailTemplateDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEmailTemplateDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEmailTemplateDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEmailTemplateDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEmailTemplateDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnEmailTemplateDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEmailTemplateDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEmailTemplateDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnEventStream
class CfnEventStreamDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that you want to export data from.\n')
    destination_stream_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the Amazon Kinesis data stream or Amazon Kinesis Data Firehose delivery stream that you want to publish event data to. For a Kinesis data stream, the ARN format is: ``arn:aws:kinesis: region : account-id :stream/ stream_name`` For a Kinesis Data Firehose delivery stream, the ARN format is: ``arn:aws:firehose: region : account-id :deliverystream/ stream_name``\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to publish event data to the stream in your AWS account.')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'destination_stream_arn', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnEventStream'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnEventStreamDefConfig] = pydantic.Field(None)


class CfnEventStreamDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnEventStreamDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnEventStreamDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnEventStreamDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnEventStreamDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnEventStreamDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnEventStreamDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnEventStreamDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnEventStreamDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnEventStreamDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnEventStreamDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnEventStreamDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnEventStreamDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnEventStreamDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnEventStreamDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEventStreamDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEventStreamDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEventStreamDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEventStreamDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEventStreamDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEventStreamDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEventStreamDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEventStreamDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEventStreamDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEventStreamDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnEventStreamDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEventStreamDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEventStreamDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnGCMChannel
class CfnGCMChannelDef(BaseCfnResource):
    api_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Web API key, also called the *server key* , that you received from Google to communicate with Google services.\n')
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the GCM channel applies to.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the GCM channel for the Amazon Pinpoint application.')
    _init_params: typing.ClassVar[list[str]] = ['api_key', 'application_id', 'enabled']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnGCMChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnGCMChannelDefConfig] = pydantic.Field(None)


class CfnGCMChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnGCMChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnGCMChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnGCMChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnGCMChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnGCMChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnGCMChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnGCMChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnGCMChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnGCMChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnGCMChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnGCMChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnGCMChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnGCMChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnGCMChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnGCMChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGCMChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnGCMChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGCMChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnGCMChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnGCMChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnGCMChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnGCMChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnGCMChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGCMChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnGCMChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnGCMChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGCMChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnInAppTemplate
class CfnInAppTemplateDef(BaseCfnResource):
    template_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the in-app message template.\n')
    content: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_InAppMessageContentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that contains information about the content of an in-app message, including its title and body text, text colors, background colors, images, buttons, and behaviors.\n')
    custom_config: typing.Any = pydantic.Field(None, description='Custom data, in the form of key-value pairs, that is included in an in-app messaging payload.\n')
    layout: typing.Optional[str] = pydantic.Field(None, description='A string that determines the appearance of the in-app message. You can specify one of the following:. - ``BOTTOM_BANNER`` – a message that appears as a banner at the bottom of the page. - ``TOP_BANNER`` – a message that appears as a banner at the top of the page. - ``OVERLAYS`` – a message that covers entire screen. - ``MOBILE_FEED`` – a message that appears in a window in front of the page. - ``MIDDLE_BANNER`` – a message that appears as a banner in the middle of the page. - ``CAROUSEL`` – a scrollable layout of up to five unique messages.\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_description: typing.Optional[str] = pydantic.Field(None, description='An optional description of the in-app template.')
    _init_params: typing.ClassVar[list[str]] = ['template_name', 'content', 'custom_config', 'layout', 'tags', 'template_description']
    _method_names: typing.ClassVar[list[str]] = ['BodyConfigProperty', 'ButtonConfigProperty', 'DefaultButtonConfigurationProperty', 'HeaderConfigProperty', 'InAppMessageContentProperty', 'OverrideButtonConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnInAppTemplate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnInAppTemplateDefConfig] = pydantic.Field(None)


class CfnInAppTemplateDefConfig(pydantic.BaseModel):
    BodyConfigProperty: typing.Optional[list[CfnInAppTemplateDefBodyconfigpropertyParams]] = pydantic.Field(None, description='')
    ButtonConfigProperty: typing.Optional[list[CfnInAppTemplateDefButtonconfigpropertyParams]] = pydantic.Field(None, description='')
    DefaultButtonConfigurationProperty: typing.Optional[list[CfnInAppTemplateDefDefaultbuttonconfigurationpropertyParams]] = pydantic.Field(None, description='')
    HeaderConfigProperty: typing.Optional[list[CfnInAppTemplateDefHeaderconfigpropertyParams]] = pydantic.Field(None, description='')
    InAppMessageContentProperty: typing.Optional[list[CfnInAppTemplateDefInappmessagecontentpropertyParams]] = pydantic.Field(None, description='')
    OverrideButtonConfigurationProperty: typing.Optional[list[CfnInAppTemplateDefOverridebuttonconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnInAppTemplateDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnInAppTemplateDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnInAppTemplateDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnInAppTemplateDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnInAppTemplateDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnInAppTemplateDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnInAppTemplateDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnInAppTemplateDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnInAppTemplateDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnInAppTemplateDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnInAppTemplateDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnInAppTemplateDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnInAppTemplateDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnInAppTemplateDefBodyconfigpropertyParams(pydantic.BaseModel):
    alignment: typing.Optional[str] = pydantic.Field(None, description='')
    body: typing.Optional[str] = pydantic.Field(None, description='')
    text_color: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInAppTemplateDefButtonconfigpropertyParams(pydantic.BaseModel):
    android: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_DefaultButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ios: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    web: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_OverrideButtonConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnInAppTemplateDefDefaultbuttonconfigurationpropertyParams(pydantic.BaseModel):
    background_color: typing.Optional[str] = pydantic.Field(None, description='')
    border_radius: typing.Union[int, float, None] = pydantic.Field(None, description='')
    button_action: typing.Optional[str] = pydantic.Field(None, description='')
    link: typing.Optional[str] = pydantic.Field(None, description='')
    text: typing.Optional[str] = pydantic.Field(None, description='')
    text_color: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInAppTemplateDefHeaderconfigpropertyParams(pydantic.BaseModel):
    alignment: typing.Optional[str] = pydantic.Field(None, description='')
    header: typing.Optional[str] = pydantic.Field(None, description='')
    text_color: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInAppTemplateDefInappmessagecontentpropertyParams(pydantic.BaseModel):
    background_color: typing.Optional[str] = pydantic.Field(None, description='')
    body_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_BodyConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    header_config: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_HeaderConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    image_url: typing.Optional[str] = pydantic.Field(None, description='')
    primary_btn: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_ButtonConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    secondary_btn: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_ButtonConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnInAppTemplateDefOverridebuttonconfigurationpropertyParams(pydantic.BaseModel):
    button_action: typing.Optional[str] = pydantic.Field(None, description='')
    link: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInAppTemplateDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnInAppTemplateDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInAppTemplateDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnInAppTemplateDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInAppTemplateDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnInAppTemplateDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnInAppTemplateDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnInAppTemplateDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnInAppTemplateDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnInAppTemplateDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInAppTemplateDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnInAppTemplateDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnInAppTemplateDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInAppTemplateDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnPushTemplate
class CfnPushTemplateDef(BaseCfnResource):
    template_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the message template.\n')
    adm: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_AndroidPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the ADM (Amazon Device Messaging) channel. This message template overrides the default template for push notification channels ( ``Default`` ).\n')
    apns: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_APNSPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the APNs (Apple Push Notification service) channel. This message template overrides the default template for push notification channels ( ``Default`` ).\n')
    baidu: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_AndroidPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the Baidu (Baidu Cloud Push) channel. This message template overrides the default template for push notification channels ( ``Default`` ).\n')
    default: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_DefaultPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default message template to use for push notification channels.\n')
    default_substitutions: typing.Optional[str] = pydantic.Field(None, description="A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.\n")
    gcm: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_AndroidPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message template overrides the default template for push notification channels ( ``Default`` ).\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the message template.')
    _init_params: typing.ClassVar[list[str]] = ['template_name', 'adm', 'apns', 'baidu', 'default', 'default_substitutions', 'gcm', 'tags', 'template_description']
    _method_names: typing.ClassVar[list[str]] = ['APNSPushNotificationTemplateProperty', 'AndroidPushNotificationTemplateProperty', 'DefaultPushNotificationTemplateProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnPushTemplate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPushTemplateDefConfig] = pydantic.Field(None)


class CfnPushTemplateDefConfig(pydantic.BaseModel):
    APNSPushNotificationTemplateProperty: typing.Optional[list[CfnPushTemplateDefApnspushnotificationtemplatepropertyParams]] = pydantic.Field(None, description='')
    AndroidPushNotificationTemplateProperty: typing.Optional[list[CfnPushTemplateDefAndroidpushnotificationtemplatepropertyParams]] = pydantic.Field(None, description='')
    DefaultPushNotificationTemplateProperty: typing.Optional[list[CfnPushTemplateDefDefaultpushnotificationtemplatepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnPushTemplateDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPushTemplateDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPushTemplateDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPushTemplateDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPushTemplateDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPushTemplateDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPushTemplateDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPushTemplateDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPushTemplateDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPushTemplateDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPushTemplateDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPushTemplateDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPushTemplateDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPushTemplateDefApnspushnotificationtemplatepropertyParams(pydantic.BaseModel):
    action: typing.Optional[str] = pydantic.Field(None, description='')
    body: typing.Optional[str] = pydantic.Field(None, description='')
    media_url: typing.Optional[str] = pydantic.Field(None, description='')
    sound: typing.Optional[str] = pydantic.Field(None, description='')
    title: typing.Optional[str] = pydantic.Field(None, description='')
    url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPushTemplateDefAndroidpushnotificationtemplatepropertyParams(pydantic.BaseModel):
    action: typing.Optional[str] = pydantic.Field(None, description='')
    body: typing.Optional[str] = pydantic.Field(None, description='')
    image_icon_url: typing.Optional[str] = pydantic.Field(None, description='')
    image_url: typing.Optional[str] = pydantic.Field(None, description='')
    small_image_icon_url: typing.Optional[str] = pydantic.Field(None, description='')
    sound: typing.Optional[str] = pydantic.Field(None, description='')
    title: typing.Optional[str] = pydantic.Field(None, description='')
    url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPushTemplateDefDefaultpushnotificationtemplatepropertyParams(pydantic.BaseModel):
    action: typing.Optional[str] = pydantic.Field(None, description='')
    body: typing.Optional[str] = pydantic.Field(None, description='')
    sound: typing.Optional[str] = pydantic.Field(None, description='')
    title: typing.Optional[str] = pydantic.Field(None, description='')
    url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPushTemplateDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPushTemplateDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPushTemplateDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPushTemplateDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPushTemplateDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPushTemplateDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPushTemplateDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPushTemplateDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPushTemplateDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPushTemplateDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPushTemplateDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPushTemplateDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPushTemplateDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPushTemplateDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnSegment
class CfnSegmentDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the segment is associated with.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the segment. .. epigraph:: A segment must have a name otherwise it will not appear in the Amazon Pinpoint console.\n')
    dimensions: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SegmentDimensionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The criteria that define the dimensions for the segment.\n')
    segment_groups: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SegmentGroupsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The segment group to use and the dimensions to apply to the group's base segments in order to build the segment. A segment group can consist of zero or more base segments. Your request can include only one segment group.\n")
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'name', 'dimensions', 'segment_groups', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AttributeDimensionProperty', 'BehaviorProperty', 'CoordinatesProperty', 'DemographicProperty', 'GPSPointProperty', 'GroupsProperty', 'LocationProperty', 'RecencyProperty', 'SegmentDimensionsProperty', 'SegmentGroupsProperty', 'SetDimensionProperty', 'SourceSegmentsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnSegmentDefConfig] = pydantic.Field(None)


class CfnSegmentDefConfig(pydantic.BaseModel):
    AttributeDimensionProperty: typing.Optional[list[CfnSegmentDefAttributedimensionpropertyParams]] = pydantic.Field(None, description='')
    BehaviorProperty: typing.Optional[list[CfnSegmentDefBehaviorpropertyParams]] = pydantic.Field(None, description='')
    CoordinatesProperty: typing.Optional[list[CfnSegmentDefCoordinatespropertyParams]] = pydantic.Field(None, description='')
    DemographicProperty: typing.Optional[list[CfnSegmentDefDemographicpropertyParams]] = pydantic.Field(None, description='')
    GPSPointProperty: typing.Optional[list[CfnSegmentDefGpspointpropertyParams]] = pydantic.Field(None, description='')
    GroupsProperty: typing.Optional[list[CfnSegmentDefGroupspropertyParams]] = pydantic.Field(None, description='')
    LocationProperty: typing.Optional[list[CfnSegmentDefLocationpropertyParams]] = pydantic.Field(None, description='')
    RecencyProperty: typing.Optional[list[CfnSegmentDefRecencypropertyParams]] = pydantic.Field(None, description='')
    SegmentDimensionsProperty: typing.Optional[list[CfnSegmentDefSegmentdimensionspropertyParams]] = pydantic.Field(None, description='')
    SegmentGroupsProperty: typing.Optional[list[CfnSegmentDefSegmentgroupspropertyParams]] = pydantic.Field(None, description='')
    SetDimensionProperty: typing.Optional[list[CfnSegmentDefSetdimensionpropertyParams]] = pydantic.Field(None, description='')
    SourceSegmentsProperty: typing.Optional[list[CfnSegmentDefSourcesegmentspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnSegmentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnSegmentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnSegmentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnSegmentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnSegmentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnSegmentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnSegmentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnSegmentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnSegmentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnSegmentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnSegmentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnSegmentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnSegmentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnSegmentDefAttributedimensionpropertyParams(pydantic.BaseModel):
    attribute_type: typing.Optional[str] = pydantic.Field(None, description='')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnSegmentDefBehaviorpropertyParams(pydantic.BaseModel):
    recency: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_RecencyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnSegmentDefCoordinatespropertyParams(pydantic.BaseModel):
    latitude: typing.Union[int, float] = pydantic.Field(..., description='')
    longitude: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnSegmentDefDemographicpropertyParams(pydantic.BaseModel):
    app_version: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    channel: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    device_type: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    make: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    platform: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnSegmentDefGpspointpropertyParams(pydantic.BaseModel):
    coordinates: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_CoordinatesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    range_in_kilometers: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnSegmentDefGroupspropertyParams(pydantic.BaseModel):
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SegmentDimensionsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    source_segments: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SourceSegmentsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    source_type: typing.Optional[str] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnSegmentDefLocationpropertyParams(pydantic.BaseModel):
    country: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SetDimensionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    gps_point: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_GPSPointPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnSegmentDefRecencypropertyParams(pydantic.BaseModel):
    duration: str = pydantic.Field(..., description='')
    recency_type: str = pydantic.Field(..., description='')
    ...

class CfnSegmentDefSegmentdimensionspropertyParams(pydantic.BaseModel):
    attributes: typing.Any = pydantic.Field(None, description='')
    behavior: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_BehaviorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    demographic: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_DemographicPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    location: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    metrics: typing.Any = pydantic.Field(None, description='')
    user_attributes: typing.Any = pydantic.Field(None, description='')
    ...

class CfnSegmentDefSegmentgroupspropertyParams(pydantic.BaseModel):
    groups: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_GroupsPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    include: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnSegmentDefSetdimensionpropertyParams(pydantic.BaseModel):
    dimension_type: typing.Optional[str] = pydantic.Field(None, description='')
    values: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnSegmentDefSourcesegmentspropertyParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='')
    version: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnSegmentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSegmentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSegmentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSegmentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSegmentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSegmentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSegmentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSegmentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSegmentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSegmentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSegmentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnSegmentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSegmentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSegmentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnSMSChannel
class CfnSMSChannelDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the SMS channel applies to.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the SMS channel for the application.\n')
    sender_id: typing.Optional[str] = pydantic.Field(None, description="The identity that you want to display on recipients' devices when they receive messages from the SMS channel. .. epigraph:: SenderIDs are only supported in certain countries and regions. For more information, see `Supported Countries and Regions <https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-countries.html>`_ in the *Amazon Pinpoint User Guide* .\n")
    short_code: typing.Optional[str] = pydantic.Field(None, description='The registered short code that you want to use when you send messages through the SMS channel. .. epigraph:: For information about obtaining a dedicated short code for sending SMS messages, see `Requesting Dedicated Short Codes for SMS Messaging with Amazon Pinpoint <https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-awssupport-short-code.html>`_ in the *Amazon Pinpoint User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'enabled', 'sender_id', 'short_code']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSMSChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnSMSChannelDefConfig] = pydantic.Field(None)


class CfnSMSChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnSMSChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnSMSChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnSMSChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnSMSChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnSMSChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnSMSChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnSMSChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnSMSChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnSMSChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnSMSChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnSMSChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnSMSChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnSMSChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnSMSChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSMSChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSMSChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSMSChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSMSChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSMSChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSMSChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSMSChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSMSChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSMSChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSMSChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnSMSChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSMSChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSMSChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnSmsTemplate
class CfnSmsTemplateDef(BaseCfnResource):
    body: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The message body to use in text messages that are based on the message template.\n')
    template_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the message template.\n')
    default_substitutions: typing.Optional[str] = pydantic.Field(None, description="A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.\n")
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the message template.')
    _init_params: typing.ClassVar[list[str]] = ['body', 'template_name', 'default_substitutions', 'tags', 'template_description']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSmsTemplate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnSmsTemplateDefConfig] = pydantic.Field(None)


class CfnSmsTemplateDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnSmsTemplateDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnSmsTemplateDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnSmsTemplateDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnSmsTemplateDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnSmsTemplateDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnSmsTemplateDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnSmsTemplateDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnSmsTemplateDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnSmsTemplateDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnSmsTemplateDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnSmsTemplateDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnSmsTemplateDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnSmsTemplateDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnSmsTemplateDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSmsTemplateDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSmsTemplateDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSmsTemplateDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSmsTemplateDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSmsTemplateDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSmsTemplateDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSmsTemplateDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSmsTemplateDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSmsTemplateDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSmsTemplateDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnSmsTemplateDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSmsTemplateDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSmsTemplateDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnVoiceChannel
class CfnVoiceChannelDef(BaseCfnResource):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the voice channel applies to.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the voice channel for the application.')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'enabled']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnVoiceChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnVoiceChannelDefConfig] = pydantic.Field(None)


class CfnVoiceChannelDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnVoiceChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnVoiceChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnVoiceChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnVoiceChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnVoiceChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnVoiceChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnVoiceChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnVoiceChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnVoiceChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnVoiceChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnVoiceChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnVoiceChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnVoiceChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnVoiceChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnVoiceChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnVoiceChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnVoiceChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnVoiceChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnVoiceChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnVoiceChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnVoiceChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnVoiceChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnVoiceChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnVoiceChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnVoiceChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnVoiceChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnVoiceChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_pinpoint.CfnADMChannelProps
class CfnADMChannelPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the ADM channel applies to.\n')
    client_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Client ID that you received from Amazon to send messages by using ADM.\n')
    client_secret: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Client Secret that you received from Amazon to send messages by using ADM.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the ADM channel for the application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-admchannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_aDMChannel_props = pinpoint.CfnADMChannelProps(\n        application_id="applicationId",\n        client_id="clientId",\n        client_secret="clientSecret",\n\n        # the properties below are optional\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'client_id', 'client_secret', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnADMChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnAPNSChannelProps
class CfnAPNSChannelPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the APNs channel applies to.\n')
    bundle_id: typing.Optional[str] = pydantic.Field(None, description="The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.\n")
    certificate: typing.Optional[str] = pydantic.Field(None, description='The APNs client certificate that you received from Apple. Specify this value if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.\n')
    default_authentication_method: typing.Optional[str] = pydantic.Field(None, description='The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs. Valid options are ``key`` or ``certificate`` .\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the APNs channel for the application.\n')
    private_key: typing.Optional[str] = pydantic.Field(None, description='The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.\n')
    team_id: typing.Optional[str] = pydantic.Field(None, description="The identifier that's assigned to your Apple Developer Account team. This identifier is used for APNs tokens.\n")
    token_key: typing.Optional[str] = pydantic.Field(None, description='The authentication key to use for APNs tokens.\n')
    token_key_id: typing.Optional[str] = pydantic.Field(None, description='The key identifier that\'s assigned to your APNs signing key. Specify this value if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-apnschannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_aPNSChannel_props = pinpoint.CfnAPNSChannelProps(\n        application_id="applicationId",\n\n        # the properties below are optional\n        bundle_id="bundleId",\n        certificate="certificate",\n        default_authentication_method="defaultAuthenticationMethod",\n        enabled=False,\n        private_key="privateKey",\n        team_id="teamId",\n        token_key="tokenKey",\n        token_key_id="tokenKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'bundle_id', 'certificate', 'default_authentication_method', 'enabled', 'private_key', 'team_id', 'token_key', 'token_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnAPNSChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnAPNSSandboxChannelProps
class CfnAPNSSandboxChannelPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the APNs sandbox channel applies to.\n')
    bundle_id: typing.Optional[str] = pydantic.Field(None, description="The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.\n")
    certificate: typing.Optional[str] = pydantic.Field(None, description='The APNs client certificate that you received from Apple. Specify this value if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.\n')
    default_authentication_method: typing.Optional[str] = pydantic.Field(None, description='The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs. Valid options are ``key`` or ``certificate`` .\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the APNs Sandbox channel for the Amazon Pinpoint application.\n')
    private_key: typing.Optional[str] = pydantic.Field(None, description='The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.\n')
    team_id: typing.Optional[str] = pydantic.Field(None, description="The identifier that's assigned to your Apple Developer Account team. This identifier is used for APNs tokens.\n")
    token_key: typing.Optional[str] = pydantic.Field(None, description='The authentication key to use for APNs tokens.\n')
    token_key_id: typing.Optional[str] = pydantic.Field(None, description='The key identifier that\'s assigned to your APNs signing key. Specify this value if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-apnssandboxchannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_aPNSSandbox_channel_props = pinpoint.CfnAPNSSandboxChannelProps(\n        application_id="applicationId",\n\n        # the properties below are optional\n        bundle_id="bundleId",\n        certificate="certificate",\n        default_authentication_method="defaultAuthenticationMethod",\n        enabled=False,\n        private_key="privateKey",\n        team_id="teamId",\n        token_key="tokenKey",\n        token_key_id="tokenKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'bundle_id', 'certificate', 'default_authentication_method', 'enabled', 'private_key', 'team_id', 'token_key', 'token_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnAPNSSandboxChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnAPNSVoipChannelProps
class CfnAPNSVoipChannelPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the APNs VoIP channel applies to.\n')
    bundle_id: typing.Optional[str] = pydantic.Field(None, description="The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.\n")
    certificate: typing.Optional[str] = pydantic.Field(None, description='The APNs client certificate that you received from Apple. Specify this value if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.\n')
    default_authentication_method: typing.Optional[str] = pydantic.Field(None, description='The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs. Valid options are ``key`` or ``certificate`` .\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the APNs VoIP channel for the Amazon Pinpoint application.\n')
    private_key: typing.Optional[str] = pydantic.Field(None, description='The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.\n')
    team_id: typing.Optional[str] = pydantic.Field(None, description="The identifier that's assigned to your Apple Developer Account team. This identifier is used for APNs tokens.\n")
    token_key: typing.Optional[str] = pydantic.Field(None, description='The authentication key to use for APNs tokens.\n')
    token_key_id: typing.Optional[str] = pydantic.Field(None, description='The key identifier that\'s assigned to your APNs signing key. Specify this value if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-apnsvoipchannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_aPNSVoip_channel_props = pinpoint.CfnAPNSVoipChannelProps(\n        application_id="applicationId",\n\n        # the properties below are optional\n        bundle_id="bundleId",\n        certificate="certificate",\n        default_authentication_method="defaultAuthenticationMethod",\n        enabled=False,\n        private_key="privateKey",\n        team_id="teamId",\n        token_key="tokenKey",\n        token_key_id="tokenKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'bundle_id', 'certificate', 'default_authentication_method', 'enabled', 'private_key', 'team_id', 'token_key', 'token_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnAPNSVoipChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnAPNSVoipSandboxChannelProps
class CfnAPNSVoipSandboxChannelPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the application that the APNs VoIP sandbox channel applies to.\n')
    bundle_id: typing.Optional[str] = pydantic.Field(None, description="The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.\n")
    certificate: typing.Optional[str] = pydantic.Field(None, description='The APNs client certificate that you received from Apple. Specify this value if you want Amazon Pinpoint to communicate with the APNs sandbox environment by using an APNs certificate.\n')
    default_authentication_method: typing.Optional[str] = pydantic.Field(None, description='The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs. Valid options are ``key`` or ``certificate`` .\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether the APNs VoIP sandbox channel is enabled for the application.\n')
    private_key: typing.Optional[str] = pydantic.Field(None, description='The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with the APNs sandbox environment.\n')
    team_id: typing.Optional[str] = pydantic.Field(None, description="The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.\n")
    token_key: typing.Optional[str] = pydantic.Field(None, description='The authentication key to use for APNs tokens.\n')
    token_key_id: typing.Optional[str] = pydantic.Field(None, description='The key identifier that\'s assigned to your APNs signing key. Specify this value if you want Amazon Pinpoint to communicate with the APNs sandbox environment by using APNs tokens.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-apnsvoipsandboxchannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_aPNSVoip_sandbox_channel_props = pinpoint.CfnAPNSVoipSandboxChannelProps(\n        application_id="applicationId",\n\n        # the properties below are optional\n        bundle_id="bundleId",\n        certificate="certificate",\n        default_authentication_method="defaultAuthenticationMethod",\n        enabled=False,\n        private_key="privateKey",\n        team_id="teamId",\n        token_key="tokenKey",\n        token_key_id="tokenKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'bundle_id', 'certificate', 'default_authentication_method', 'enabled', 'private_key', 'team_id', 'token_key', 'token_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnAPNSVoipSandboxChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnApplicationSettingsProps
class CfnApplicationSettingsPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application.\n')
    campaign_hook: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnApplicationSettings_CampaignHookPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings for the Lambda function to use by default as a code hook for campaigns in the application. To override these settings for a specific campaign, use the Campaign resource to define custom Lambda function settings for the campaign.\n')
    cloud_watch_metrics_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable application-related alarms in Amazon CloudWatch.\n')
    limits: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnApplicationSettings_LimitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default sending limits for campaigns in the application. To override these limits for a specific campaign, use the Campaign resource to define custom limits for the campaign.\n')
    quiet_time: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnApplicationSettings_QuietTimePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default quiet time for campaigns in the application. Quiet time is a specific time range when campaigns don\'t send messages to endpoints, if all the following conditions are met: - The ``EndpointDemographic.Timezone`` property of the endpoint is set to a valid value. - The current time in the endpoint\'s time zone is later than or equal to the time specified by the ``QuietTime.Start`` property for the application (or a campaign that has custom quiet time settings). - The current time in the endpoint\'s time zone is earlier than or equal to the time specified by the ``QuietTime.End`` property for the application (or a campaign that has custom quiet time settings). If any of the preceding conditions isn\'t met, the endpoint will receive messages from a campaign, even if quiet time is enabled. To override the default quiet time settings for a specific campaign, use the Campaign resource to define a custom quiet time for the campaign.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-applicationsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_application_settings_props = pinpoint.CfnApplicationSettingsProps(\n        application_id="applicationId",\n\n        # the properties below are optional\n        campaign_hook=pinpoint.CfnApplicationSettings.CampaignHookProperty(\n            lambda_function_name="lambdaFunctionName",\n            mode="mode",\n            web_url="webUrl"\n        ),\n        cloud_watch_metrics_enabled=False,\n        limits=pinpoint.CfnApplicationSettings.LimitsProperty(\n            daily=123,\n            maximum_duration=123,\n            messages_per_second=123,\n            total=123\n        ),\n        quiet_time=pinpoint.CfnApplicationSettings.QuietTimeProperty(\n            end="end",\n            start="start"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'campaign_hook', 'cloud_watch_metrics_enabled', 'limits', 'quiet_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnApplicationSettingsProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnAppProps
class CfnAppPropsDef(BaseCfnProperty):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the application.\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-app.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # tags: Any\n\n    cfn_app_props = pinpoint.CfnAppProps(\n        name="name",\n\n        # the properties below are optional\n        tags=tags\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnAppProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnBaiduChannelProps
class CfnBaiduChannelPropsDef(BaseCfnProperty):
    api_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The API key that you received from the Baidu Cloud Push service to communicate with the service.\n')
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The unique identifier for the Amazon Pinpoint application that you're configuring the Baidu channel for.\n")
    secret_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The secret key that you received from the Baidu Cloud Push service to communicate with the service.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the Baidu channel for the application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-baiduchannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_baidu_channel_props = pinpoint.CfnBaiduChannelProps(\n        api_key="apiKey",\n        application_id="applicationId",\n        secret_key="secretKey",\n\n        # the properties below are optional\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['api_key', 'application_id', 'secret_key', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnBaiduChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnCampaignProps
class CfnCampaignPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the campaign is associated with.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the campaign.\n')
    schedule: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_SchedulePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The schedule settings for the campaign.\n')
    segment_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the segment to associate with the campaign.\n')
    additional_treatments: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_WriteTreatmentResourcePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of requests that defines additional treatments for the campaign, in addition to the default treatment for the campaign.\n')
    campaign_hook: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CampaignHookPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the Lambda function to use as a code hook for a campaign.\n')
    custom_delivery_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_CustomDeliveryConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The delivery configuration settings for sending the treatment through a custom channel. This object is required if the ``MessageConfiguration`` object for the treatment specifies a ``CustomMessage`` object.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the campaign.\n')
    holdout_percent: typing.Union[int, float, None] = pydantic.Field(None, description="The allocated percentage of users (segment members) who shouldn't receive messages from the campaign.\n")
    is_paused: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether to pause the campaign. A paused campaign doesn't run unless you resume it by changing this value to ``false`` . If you restart a campaign, the campaign restarts from the beginning and not at the point you paused it. If a campaign is running it will complete and then pause. Pause only pauses or skips the next run for a recurring future scheduled campaign. A campaign scheduled for immediate can't be paused.\n")
    limits: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_LimitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The messaging limits for the campaign.\n')
    message_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_MessageConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message configuration settings for the campaign.\n')
    priority: typing.Union[int, float, None] = pydantic.Field(None, description='An integer between 1 and 5, inclusive, that represents the priority of the in-app message campaign, where 1 is the highest priority and 5 is the lowest. If there are multiple messages scheduled to be displayed at the same time, the priority determines the order in which those messages are displayed.\n')
    segment_version: typing.Union[int, float, None] = pydantic.Field(None, description='The version of the segment to associate with the campaign.\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_configuration: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnCampaign_TemplateConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the treatment.\n')
    treatment_description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the default treatment for the campaign.\n')
    treatment_name: typing.Optional[str] = pydantic.Field(None, description='A custom name of the default treatment for the campaign, if the campaign has multiple treatments. A *treatment* is a variation of a campaign that\'s used for A/B testing.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-campaign.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # attributes: Any\n    # custom_config: Any\n    # metrics: Any\n    # tags: Any\n\n    cfn_campaign_props = pinpoint.CfnCampaignProps(\n        application_id="applicationId",\n        name="name",\n        schedule=pinpoint.CfnCampaign.ScheduleProperty(\n            end_time="endTime",\n            event_filter=pinpoint.CfnCampaign.CampaignEventFilterProperty(\n                dimensions=pinpoint.CfnCampaign.EventDimensionsProperty(\n                    attributes=attributes,\n                    event_type=pinpoint.CfnCampaign.SetDimensionProperty(\n                        dimension_type="dimensionType",\n                        values=["values"]\n                    ),\n                    metrics=metrics\n                ),\n                filter_type="filterType"\n            ),\n            frequency="frequency",\n            is_local_time=False,\n            quiet_time=pinpoint.CfnCampaign.QuietTimeProperty(\n                end="end",\n                start="start"\n            ),\n            start_time="startTime",\n            time_zone="timeZone"\n        ),\n        segment_id="segmentId",\n\n        # the properties below are optional\n        additional_treatments=[pinpoint.CfnCampaign.WriteTreatmentResourceProperty(\n            custom_delivery_configuration=pinpoint.CfnCampaign.CustomDeliveryConfigurationProperty(\n                delivery_uri="deliveryUri",\n                endpoint_types=["endpointTypes"]\n            ),\n            message_configuration=pinpoint.CfnCampaign.MessageConfigurationProperty(\n                adm_message=pinpoint.CfnCampaign.MessageProperty(\n                    action="action",\n                    body="body",\n                    image_icon_url="imageIconUrl",\n                    image_small_icon_url="imageSmallIconUrl",\n                    image_url="imageUrl",\n                    json_body="jsonBody",\n                    media_url="mediaUrl",\n                    raw_content="rawContent",\n                    silent_push=False,\n                    time_to_live=123,\n                    title="title",\n                    url="url"\n                ),\n                apns_message=pinpoint.CfnCampaign.MessageProperty(\n                    action="action",\n                    body="body",\n                    image_icon_url="imageIconUrl",\n                    image_small_icon_url="imageSmallIconUrl",\n                    image_url="imageUrl",\n                    json_body="jsonBody",\n                    media_url="mediaUrl",\n                    raw_content="rawContent",\n                    silent_push=False,\n                    time_to_live=123,\n                    title="title",\n                    url="url"\n                ),\n                baidu_message=pinpoint.CfnCampaign.MessageProperty(\n                    action="action",\n                    body="body",\n                    image_icon_url="imageIconUrl",\n                    image_small_icon_url="imageSmallIconUrl",\n                    image_url="imageUrl",\n                    json_body="jsonBody",\n                    media_url="mediaUrl",\n                    raw_content="rawContent",\n                    silent_push=False,\n                    time_to_live=123,\n                    title="title",\n                    url="url"\n                ),\n                custom_message=pinpoint.CfnCampaign.CampaignCustomMessageProperty(\n                    data="data"\n                ),\n                default_message=pinpoint.CfnCampaign.MessageProperty(\n                    action="action",\n                    body="body",\n                    image_icon_url="imageIconUrl",\n                    image_small_icon_url="imageSmallIconUrl",\n                    image_url="imageUrl",\n                    json_body="jsonBody",\n                    media_url="mediaUrl",\n                    raw_content="rawContent",\n                    silent_push=False,\n                    time_to_live=123,\n                    title="title",\n                    url="url"\n                ),\n                email_message=pinpoint.CfnCampaign.CampaignEmailMessageProperty(\n                    body="body",\n                    from_address="fromAddress",\n                    html_body="htmlBody",\n                    title="title"\n                ),\n                gcm_message=pinpoint.CfnCampaign.MessageProperty(\n                    action="action",\n                    body="body",\n                    image_icon_url="imageIconUrl",\n                    image_small_icon_url="imageSmallIconUrl",\n                    image_url="imageUrl",\n                    json_body="jsonBody",\n                    media_url="mediaUrl",\n                    raw_content="rawContent",\n                    silent_push=False,\n                    time_to_live=123,\n                    title="title",\n                    url="url"\n                ),\n                in_app_message=pinpoint.CfnCampaign.CampaignInAppMessageProperty(\n                    content=[pinpoint.CfnCampaign.InAppMessageContentProperty(\n                        background_color="backgroundColor",\n                        body_config=pinpoint.CfnCampaign.InAppMessageBodyConfigProperty(\n                            alignment="alignment",\n                            body="body",\n                            text_color="textColor"\n                        ),\n                        header_config=pinpoint.CfnCampaign.InAppMessageHeaderConfigProperty(\n                            alignment="alignment",\n                            header="header",\n                            text_color="textColor"\n                        ),\n                        image_url="imageUrl",\n                        primary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                            android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                                button_action="buttonAction",\n                                link="link"\n                            ),\n                            default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                                background_color="backgroundColor",\n                                border_radius=123,\n                                button_action="buttonAction",\n                                link="link",\n                                text="text",\n                                text_color="textColor"\n                            ),\n                            ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                                button_action="buttonAction",\n                                link="link"\n                            ),\n                            web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                                button_action="buttonAction",\n                                link="link"\n                            )\n                        ),\n                        secondary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                            android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                                button_action="buttonAction",\n                                link="link"\n                            ),\n                            default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                                background_color="backgroundColor",\n                                border_radius=123,\n                                button_action="buttonAction",\n                                link="link",\n                                text="text",\n                                text_color="textColor"\n                            ),\n                            ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                                button_action="buttonAction",\n                                link="link"\n                            ),\n                            web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                                button_action="buttonAction",\n                                link="link"\n                            )\n                        )\n                    )],\n                    custom_config=custom_config,\n                    layout="layout"\n                ),\n                sms_message=pinpoint.CfnCampaign.CampaignSmsMessageProperty(\n                    body="body",\n                    entity_id="entityId",\n                    message_type="messageType",\n                    origination_number="originationNumber",\n                    sender_id="senderId",\n                    template_id="templateId"\n                )\n            ),\n            schedule=pinpoint.CfnCampaign.ScheduleProperty(\n                end_time="endTime",\n                event_filter=pinpoint.CfnCampaign.CampaignEventFilterProperty(\n                    dimensions=pinpoint.CfnCampaign.EventDimensionsProperty(\n                        attributes=attributes,\n                        event_type=pinpoint.CfnCampaign.SetDimensionProperty(\n                            dimension_type="dimensionType",\n                            values=["values"]\n                        ),\n                        metrics=metrics\n                    ),\n                    filter_type="filterType"\n                ),\n                frequency="frequency",\n                is_local_time=False,\n                quiet_time=pinpoint.CfnCampaign.QuietTimeProperty(\n                    end="end",\n                    start="start"\n                ),\n                start_time="startTime",\n                time_zone="timeZone"\n            ),\n            size_percent=123,\n            template_configuration=pinpoint.CfnCampaign.TemplateConfigurationProperty(\n                email_template=pinpoint.CfnCampaign.TemplateProperty(\n                    name="name",\n                    version="version"\n                ),\n                push_template=pinpoint.CfnCampaign.TemplateProperty(\n                    name="name",\n                    version="version"\n                ),\n                sms_template=pinpoint.CfnCampaign.TemplateProperty(\n                    name="name",\n                    version="version"\n                ),\n                voice_template=pinpoint.CfnCampaign.TemplateProperty(\n                    name="name",\n                    version="version"\n                )\n            ),\n            treatment_description="treatmentDescription",\n            treatment_name="treatmentName"\n        )],\n        campaign_hook=pinpoint.CfnCampaign.CampaignHookProperty(\n            lambda_function_name="lambdaFunctionName",\n            mode="mode",\n            web_url="webUrl"\n        ),\n        custom_delivery_configuration=pinpoint.CfnCampaign.CustomDeliveryConfigurationProperty(\n            delivery_uri="deliveryUri",\n            endpoint_types=["endpointTypes"]\n        ),\n        description="description",\n        holdout_percent=123,\n        is_paused=False,\n        limits=pinpoint.CfnCampaign.LimitsProperty(\n            daily=123,\n            maximum_duration=123,\n            messages_per_second=123,\n            session=123,\n            total=123\n        ),\n        message_configuration=pinpoint.CfnCampaign.MessageConfigurationProperty(\n            adm_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            apns_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            baidu_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            custom_message=pinpoint.CfnCampaign.CampaignCustomMessageProperty(\n                data="data"\n            ),\n            default_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            email_message=pinpoint.CfnCampaign.CampaignEmailMessageProperty(\n                body="body",\n                from_address="fromAddress",\n                html_body="htmlBody",\n                title="title"\n            ),\n            gcm_message=pinpoint.CfnCampaign.MessageProperty(\n                action="action",\n                body="body",\n                image_icon_url="imageIconUrl",\n                image_small_icon_url="imageSmallIconUrl",\n                image_url="imageUrl",\n                json_body="jsonBody",\n                media_url="mediaUrl",\n                raw_content="rawContent",\n                silent_push=False,\n                time_to_live=123,\n                title="title",\n                url="url"\n            ),\n            in_app_message=pinpoint.CfnCampaign.CampaignInAppMessageProperty(\n                content=[pinpoint.CfnCampaign.InAppMessageContentProperty(\n                    background_color="backgroundColor",\n                    body_config=pinpoint.CfnCampaign.InAppMessageBodyConfigProperty(\n                        alignment="alignment",\n                        body="body",\n                        text_color="textColor"\n                    ),\n                    header_config=pinpoint.CfnCampaign.InAppMessageHeaderConfigProperty(\n                        alignment="alignment",\n                        header="header",\n                        text_color="textColor"\n                    ),\n                    image_url="imageUrl",\n                    primary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                        android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        ),\n                        default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                            background_color="backgroundColor",\n                            border_radius=123,\n                            button_action="buttonAction",\n                            link="link",\n                            text="text",\n                            text_color="textColor"\n                        ),\n                        ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        ),\n                        web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        )\n                    ),\n                    secondary_btn=pinpoint.CfnCampaign.InAppMessageButtonProperty(\n                        android=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        ),\n                        default_config=pinpoint.CfnCampaign.DefaultButtonConfigurationProperty(\n                            background_color="backgroundColor",\n                            border_radius=123,\n                            button_action="buttonAction",\n                            link="link",\n                            text="text",\n                            text_color="textColor"\n                        ),\n                        ios=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        ),\n                        web=pinpoint.CfnCampaign.OverrideButtonConfigurationProperty(\n                            button_action="buttonAction",\n                            link="link"\n                        )\n                    )\n                )],\n                custom_config=custom_config,\n                layout="layout"\n            ),\n            sms_message=pinpoint.CfnCampaign.CampaignSmsMessageProperty(\n                body="body",\n                entity_id="entityId",\n                message_type="messageType",\n                origination_number="originationNumber",\n                sender_id="senderId",\n                template_id="templateId"\n            )\n        ),\n        priority=123,\n        segment_version=123,\n        tags=tags,\n        template_configuration=pinpoint.CfnCampaign.TemplateConfigurationProperty(\n            email_template=pinpoint.CfnCampaign.TemplateProperty(\n                name="name",\n                version="version"\n            ),\n            push_template=pinpoint.CfnCampaign.TemplateProperty(\n                name="name",\n                version="version"\n            ),\n            sms_template=pinpoint.CfnCampaign.TemplateProperty(\n                name="name",\n                version="version"\n            ),\n            voice_template=pinpoint.CfnCampaign.TemplateProperty(\n                name="name",\n                version="version"\n            )\n        ),\n        treatment_description="treatmentDescription",\n        treatment_name="treatmentName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'name', 'schedule', 'segment_id', 'additional_treatments', 'campaign_hook', 'custom_delivery_configuration', 'description', 'holdout_percent', 'is_paused', 'limits', 'message_configuration', 'priority', 'segment_version', 'tags', 'template_configuration', 'treatment_description', 'treatment_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnCampaignProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnEmailChannelProps
class CfnEmailChannelPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The unique identifier for the Amazon Pinpoint application that you're specifying the email channel for.\n")
    from_address: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The verified email address that you want to send email from when you send email through the channel.\n')
    identity: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the identity, verified with Amazon Simple Email Service (Amazon SES), that you want to use when you send email through the channel.\n')
    configuration_set: typing.Optional[str] = pydantic.Field(None, description='The `Amazon SES configuration set <https://docs.aws.amazon.com/ses/latest/APIReference/API_ConfigurationSet.html>`_ that you want to apply to messages that you send through the channel.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the email channel for the application.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the AWS Identity and Access Management (IAM) role that you want Amazon Pinpoint to use when it submits email-related event data for the channel.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-emailchannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_email_channel_props = pinpoint.CfnEmailChannelProps(\n        application_id="applicationId",\n        from_address="fromAddress",\n        identity="identity",\n\n        # the properties below are optional\n        configuration_set="configurationSet",\n        enabled=False,\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'from_address', 'identity', 'configuration_set', 'enabled', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnEmailChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnEmailTemplateProps
class CfnEmailTemplatePropsDef(BaseCfnProperty):
    subject: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The subject line, or title, to use in email messages that are based on the message template.\n')
    template_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the message template.\n')
    default_substitutions: typing.Optional[str] = pydantic.Field(None, description="A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.\n")
    html_part: typing.Optional[str] = pydantic.Field(None, description='The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the message template.\n')
    text_part: typing.Optional[str] = pydantic.Field(None, description='The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don\'t render HTML content and clients that are connected to high-latency networks, such as mobile devices.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-emailtemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # tags: Any\n\n    cfn_email_template_props = pinpoint.CfnEmailTemplateProps(\n        subject="subject",\n        template_name="templateName",\n\n        # the properties below are optional\n        default_substitutions="defaultSubstitutions",\n        html_part="htmlPart",\n        tags=tags,\n        template_description="templateDescription",\n        text_part="textPart"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['subject', 'template_name', 'default_substitutions', 'html_part', 'tags', 'template_description', 'text_part']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnEmailTemplateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnEventStreamProps
class CfnEventStreamPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that you want to export data from.\n')
    destination_stream_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the Amazon Kinesis data stream or Amazon Kinesis Data Firehose delivery stream that you want to publish event data to. For a Kinesis data stream, the ARN format is: ``arn:aws:kinesis: region : account-id :stream/ stream_name`` For a Kinesis Data Firehose delivery stream, the ARN format is: ``arn:aws:firehose: region : account-id :deliverystream/ stream_name``\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to publish event data to the stream in your AWS account.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-eventstream.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_event_stream_props = pinpoint.CfnEventStreamProps(\n        application_id="applicationId",\n        destination_stream_arn="destinationStreamArn",\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'destination_stream_arn', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnEventStreamProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnGCMChannelProps
class CfnGCMChannelPropsDef(BaseCfnProperty):
    api_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Web API key, also called the *server key* , that you received from Google to communicate with Google services.\n')
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the GCM channel applies to.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the GCM channel for the Amazon Pinpoint application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-gcmchannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_gCMChannel_props = pinpoint.CfnGCMChannelProps(\n        api_key="apiKey",\n        application_id="applicationId",\n\n        # the properties below are optional\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['api_key', 'application_id', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnGCMChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnInAppTemplateProps
class CfnInAppTemplatePropsDef(BaseCfnProperty):
    template_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the in-app message template.\n')
    content: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnInAppTemplate_InAppMessageContentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that contains information about the content of an in-app message, including its title and body text, text colors, background colors, images, buttons, and behaviors.\n')
    custom_config: typing.Any = pydantic.Field(None, description='Custom data, in the form of key-value pairs, that is included in an in-app messaging payload.\n')
    layout: typing.Optional[str] = pydantic.Field(None, description='A string that determines the appearance of the in-app message. You can specify one of the following:. - ``BOTTOM_BANNER`` – a message that appears as a banner at the bottom of the page. - ``TOP_BANNER`` – a message that appears as a banner at the top of the page. - ``OVERLAYS`` – a message that covers entire screen. - ``MOBILE_FEED`` – a message that appears in a window in front of the page. - ``MIDDLE_BANNER`` – a message that appears as a banner in the middle of the page. - ``CAROUSEL`` – a scrollable layout of up to five unique messages.\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_description: typing.Optional[str] = pydantic.Field(None, description='An optional description of the in-app template.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-inapptemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # custom_config: Any\n    # tags: Any\n\n    cfn_in_app_template_props = pinpoint.CfnInAppTemplateProps(\n        template_name="templateName",\n\n        # the properties below are optional\n        content=[pinpoint.CfnInAppTemplate.InAppMessageContentProperty(\n            background_color="backgroundColor",\n            body_config=pinpoint.CfnInAppTemplate.BodyConfigProperty(\n                alignment="alignment",\n                body="body",\n                text_color="textColor"\n            ),\n            header_config=pinpoint.CfnInAppTemplate.HeaderConfigProperty(\n                alignment="alignment",\n                header="header",\n                text_color="textColor"\n            ),\n            image_url="imageUrl",\n            primary_btn=pinpoint.CfnInAppTemplate.ButtonConfigProperty(\n                android=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                ),\n                default_config=pinpoint.CfnInAppTemplate.DefaultButtonConfigurationProperty(\n                    background_color="backgroundColor",\n                    border_radius=123,\n                    button_action="buttonAction",\n                    link="link",\n                    text="text",\n                    text_color="textColor"\n                ),\n                ios=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                ),\n                web=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                )\n            ),\n            secondary_btn=pinpoint.CfnInAppTemplate.ButtonConfigProperty(\n                android=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                ),\n                default_config=pinpoint.CfnInAppTemplate.DefaultButtonConfigurationProperty(\n                    background_color="backgroundColor",\n                    border_radius=123,\n                    button_action="buttonAction",\n                    link="link",\n                    text="text",\n                    text_color="textColor"\n                ),\n                ios=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                ),\n                web=pinpoint.CfnInAppTemplate.OverrideButtonConfigurationProperty(\n                    button_action="buttonAction",\n                    link="link"\n                )\n            )\n        )],\n        custom_config=custom_config,\n        layout="layout",\n        tags=tags,\n        template_description="templateDescription"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['template_name', 'content', 'custom_config', 'layout', 'tags', 'template_description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnInAppTemplateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnPushTemplateProps
class CfnPushTemplatePropsDef(BaseCfnProperty):
    template_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the message template.\n')
    adm: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_AndroidPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the ADM (Amazon Device Messaging) channel. This message template overrides the default template for push notification channels ( ``Default`` ).\n')
    apns: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_APNSPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the APNs (Apple Push Notification service) channel. This message template overrides the default template for push notification channels ( ``Default`` ).\n')
    baidu: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_AndroidPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the Baidu (Baidu Cloud Push) channel. This message template overrides the default template for push notification channels ( ``Default`` ).\n')
    default: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_DefaultPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default message template to use for push notification channels.\n')
    default_substitutions: typing.Optional[str] = pydantic.Field(None, description="A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.\n")
    gcm: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnPushTemplate_AndroidPushNotificationTemplatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The message template to use for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message template overrides the default template for push notification channels ( ``Default`` ).\n')
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the message template.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-pushtemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # tags: Any\n\n    cfn_push_template_props = pinpoint.CfnPushTemplateProps(\n        template_name="templateName",\n\n        # the properties below are optional\n        adm=pinpoint.CfnPushTemplate.AndroidPushNotificationTemplateProperty(\n            action="action",\n            body="body",\n            image_icon_url="imageIconUrl",\n            image_url="imageUrl",\n            small_image_icon_url="smallImageIconUrl",\n            sound="sound",\n            title="title",\n            url="url"\n        ),\n        apns=pinpoint.CfnPushTemplate.APNSPushNotificationTemplateProperty(\n            action="action",\n            body="body",\n            media_url="mediaUrl",\n            sound="sound",\n            title="title",\n            url="url"\n        ),\n        baidu=pinpoint.CfnPushTemplate.AndroidPushNotificationTemplateProperty(\n            action="action",\n            body="body",\n            image_icon_url="imageIconUrl",\n            image_url="imageUrl",\n            small_image_icon_url="smallImageIconUrl",\n            sound="sound",\n            title="title",\n            url="url"\n        ),\n        default=pinpoint.CfnPushTemplate.DefaultPushNotificationTemplateProperty(\n            action="action",\n            body="body",\n            sound="sound",\n            title="title",\n            url="url"\n        ),\n        default_substitutions="defaultSubstitutions",\n        gcm=pinpoint.CfnPushTemplate.AndroidPushNotificationTemplateProperty(\n            action="action",\n            body="body",\n            image_icon_url="imageIconUrl",\n            image_url="imageUrl",\n            small_image_icon_url="smallImageIconUrl",\n            sound="sound",\n            title="title",\n            url="url"\n        ),\n        tags=tags,\n        template_description="templateDescription"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['template_name', 'adm', 'apns', 'baidu', 'default', 'default_substitutions', 'gcm', 'tags', 'template_description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnPushTemplateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSegmentProps
class CfnSegmentPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the segment is associated with.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the segment. .. epigraph:: A segment must have a name otherwise it will not appear in the Amazon Pinpoint console.\n')
    dimensions: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SegmentDimensionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The criteria that define the dimensions for the segment.\n')
    segment_groups: typing.Union[models.UnsupportedResource, models.aws_pinpoint.CfnSegment_SegmentGroupsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The segment group to use and the dimensions to apply to the group's base segments in order to build the segment. A segment group can consist of zero or more base segments. Your request can include only one segment group.\n")
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-segment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # attributes: Any\n    # metrics: Any\n    # tags: Any\n    # user_attributes: Any\n\n    cfn_segment_props = pinpoint.CfnSegmentProps(\n        application_id="applicationId",\n        name="name",\n\n        # the properties below are optional\n        dimensions=pinpoint.CfnSegment.SegmentDimensionsProperty(\n            attributes=attributes,\n            behavior=pinpoint.CfnSegment.BehaviorProperty(\n                recency=pinpoint.CfnSegment.RecencyProperty(\n                    duration="duration",\n                    recency_type="recencyType"\n                )\n            ),\n            demographic=pinpoint.CfnSegment.DemographicProperty(\n                app_version=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                channel=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                device_type=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                make=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                model=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                platform=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                )\n            ),\n            location=pinpoint.CfnSegment.LocationProperty(\n                country=pinpoint.CfnSegment.SetDimensionProperty(\n                    dimension_type="dimensionType",\n                    values=["values"]\n                ),\n                gps_point=pinpoint.CfnSegment.GPSPointProperty(\n                    coordinates=pinpoint.CfnSegment.CoordinatesProperty(\n                        latitude=123,\n                        longitude=123\n                    ),\n                    range_in_kilometers=123\n                )\n            ),\n            metrics=metrics,\n            user_attributes=user_attributes\n        ),\n        segment_groups=pinpoint.CfnSegment.SegmentGroupsProperty(\n            groups=[pinpoint.CfnSegment.GroupsProperty(\n                dimensions=[pinpoint.CfnSegment.SegmentDimensionsProperty(\n                    attributes=attributes,\n                    behavior=pinpoint.CfnSegment.BehaviorProperty(\n                        recency=pinpoint.CfnSegment.RecencyProperty(\n                            duration="duration",\n                            recency_type="recencyType"\n                        )\n                    ),\n                    demographic=pinpoint.CfnSegment.DemographicProperty(\n                        app_version=pinpoint.CfnSegment.SetDimensionProperty(\n                            dimension_type="dimensionType",\n                            values=["values"]\n                        ),\n                        channel=pinpoint.CfnSegment.SetDimensionProperty(\n                            dimension_type="dimensionType",\n                            values=["values"]\n                        ),\n                        device_type=pinpoint.CfnSegment.SetDimensionProperty(\n                            dimension_type="dimensionType",\n                            values=["values"]\n                        ),\n                        make=pinpoint.CfnSegment.SetDimensionProperty(\n                            dimension_type="dimensionType",\n                            values=["values"]\n                        ),\n                        model=pinpoint.CfnSegment.SetDimensionProperty(\n                            dimension_type="dimensionType",\n                            values=["values"]\n                        ),\n                        platform=pinpoint.CfnSegment.SetDimensionProperty(\n                            dimension_type="dimensionType",\n                            values=["values"]\n                        )\n                    ),\n                    location=pinpoint.CfnSegment.LocationProperty(\n                        country=pinpoint.CfnSegment.SetDimensionProperty(\n                            dimension_type="dimensionType",\n                            values=["values"]\n                        ),\n                        gps_point=pinpoint.CfnSegment.GPSPointProperty(\n                            coordinates=pinpoint.CfnSegment.CoordinatesProperty(\n                                latitude=123,\n                                longitude=123\n                            ),\n                            range_in_kilometers=123\n                        )\n                    ),\n                    metrics=metrics,\n                    user_attributes=user_attributes\n                )],\n                source_segments=[pinpoint.CfnSegment.SourceSegmentsProperty(\n                    id="id",\n\n                    # the properties below are optional\n                    version=123\n                )],\n                source_type="sourceType",\n                type="type"\n            )],\n            include="include"\n        ),\n        tags=tags\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'name', 'dimensions', 'segment_groups', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSegmentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSMSChannelProps
class CfnSMSChannelPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the SMS channel applies to.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the SMS channel for the application.\n')
    sender_id: typing.Optional[str] = pydantic.Field(None, description="The identity that you want to display on recipients' devices when they receive messages from the SMS channel. .. epigraph:: SenderIDs are only supported in certain countries and regions. For more information, see `Supported Countries and Regions <https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-countries.html>`_ in the *Amazon Pinpoint User Guide* .\n")
    short_code: typing.Optional[str] = pydantic.Field(None, description='The registered short code that you want to use when you send messages through the SMS channel. .. epigraph:: For information about obtaining a dedicated short code for sending SMS messages, see `Requesting Dedicated Short Codes for SMS Messaging with Amazon Pinpoint <https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-awssupport-short-code.html>`_ in the *Amazon Pinpoint User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-smschannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_sMSChannel_props = pinpoint.CfnSMSChannelProps(\n        application_id="applicationId",\n\n        # the properties below are optional\n        enabled=False,\n        sender_id="senderId",\n        short_code="shortCode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'enabled', 'sender_id', 'short_code']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSMSChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnSmsTemplateProps
class CfnSmsTemplatePropsDef(BaseCfnProperty):
    body: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The message body to use in text messages that are based on the message template.\n')
    template_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the message template.\n')
    default_substitutions: typing.Optional[str] = pydantic.Field(None, description="A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.\n")
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    template_description: typing.Optional[str] = pydantic.Field(None, description='A custom description of the message template.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-smstemplate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    # tags: Any\n\n    cfn_sms_template_props = pinpoint.CfnSmsTemplateProps(\n        body="body",\n        template_name="templateName",\n\n        # the properties below are optional\n        default_substitutions="defaultSubstitutions",\n        tags=tags,\n        template_description="templateDescription"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['body', 'template_name', 'default_substitutions', 'tags', 'template_description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnSmsTemplateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_pinpoint.CfnVoiceChannelProps
class CfnVoiceChannelPropsDef(BaseCfnProperty):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the Amazon Pinpoint application that the voice channel applies to.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether to enable the voice channel for the application.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-voicechannel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_pinpoint as pinpoint\n\n    cfn_voice_channel_props = pinpoint.CfnVoiceChannelProps(\n        application_id="applicationId",\n\n        # the properties below are optional\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_pinpoint.CfnVoiceChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnApplicationSettings_CampaignHookProperty: typing.Optional[dict[str, CfnApplicationSettings_CampaignHookPropertyDef]] = pydantic.Field(None)
    CfnApplicationSettings_LimitsProperty: typing.Optional[dict[str, CfnApplicationSettings_LimitsPropertyDef]] = pydantic.Field(None)
    CfnApplicationSettings_QuietTimeProperty: typing.Optional[dict[str, CfnApplicationSettings_QuietTimePropertyDef]] = pydantic.Field(None)
    CfnCampaign_AttributeDimensionProperty: typing.Optional[dict[str, CfnCampaign_AttributeDimensionPropertyDef]] = pydantic.Field(None)
    CfnCampaign_CampaignCustomMessageProperty: typing.Optional[dict[str, CfnCampaign_CampaignCustomMessagePropertyDef]] = pydantic.Field(None)
    CfnCampaign_CampaignEmailMessageProperty: typing.Optional[dict[str, CfnCampaign_CampaignEmailMessagePropertyDef]] = pydantic.Field(None)
    CfnCampaign_CampaignEventFilterProperty: typing.Optional[dict[str, CfnCampaign_CampaignEventFilterPropertyDef]] = pydantic.Field(None)
    CfnCampaign_CampaignHookProperty: typing.Optional[dict[str, CfnCampaign_CampaignHookPropertyDef]] = pydantic.Field(None)
    CfnCampaign_CampaignInAppMessageProperty: typing.Optional[dict[str, CfnCampaign_CampaignInAppMessagePropertyDef]] = pydantic.Field(None)
    CfnCampaign_CampaignSmsMessageProperty: typing.Optional[dict[str, CfnCampaign_CampaignSmsMessagePropertyDef]] = pydantic.Field(None)
    CfnCampaign_CustomDeliveryConfigurationProperty: typing.Optional[dict[str, CfnCampaign_CustomDeliveryConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCampaign_DefaultButtonConfigurationProperty: typing.Optional[dict[str, CfnCampaign_DefaultButtonConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCampaign_EventDimensionsProperty: typing.Optional[dict[str, CfnCampaign_EventDimensionsPropertyDef]] = pydantic.Field(None)
    CfnCampaign_InAppMessageBodyConfigProperty: typing.Optional[dict[str, CfnCampaign_InAppMessageBodyConfigPropertyDef]] = pydantic.Field(None)
    CfnCampaign_InAppMessageButtonProperty: typing.Optional[dict[str, CfnCampaign_InAppMessageButtonPropertyDef]] = pydantic.Field(None)
    CfnCampaign_InAppMessageContentProperty: typing.Optional[dict[str, CfnCampaign_InAppMessageContentPropertyDef]] = pydantic.Field(None)
    CfnCampaign_InAppMessageHeaderConfigProperty: typing.Optional[dict[str, CfnCampaign_InAppMessageHeaderConfigPropertyDef]] = pydantic.Field(None)
    CfnCampaign_LimitsProperty: typing.Optional[dict[str, CfnCampaign_LimitsPropertyDef]] = pydantic.Field(None)
    CfnCampaign_MessageConfigurationProperty: typing.Optional[dict[str, CfnCampaign_MessageConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCampaign_MessageProperty: typing.Optional[dict[str, CfnCampaign_MessagePropertyDef]] = pydantic.Field(None)
    CfnCampaign_MetricDimensionProperty: typing.Optional[dict[str, CfnCampaign_MetricDimensionPropertyDef]] = pydantic.Field(None)
    CfnCampaign_OverrideButtonConfigurationProperty: typing.Optional[dict[str, CfnCampaign_OverrideButtonConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCampaign_QuietTimeProperty: typing.Optional[dict[str, CfnCampaign_QuietTimePropertyDef]] = pydantic.Field(None)
    CfnCampaign_ScheduleProperty: typing.Optional[dict[str, CfnCampaign_SchedulePropertyDef]] = pydantic.Field(None)
    CfnCampaign_SetDimensionProperty: typing.Optional[dict[str, CfnCampaign_SetDimensionPropertyDef]] = pydantic.Field(None)
    CfnCampaign_TemplateConfigurationProperty: typing.Optional[dict[str, CfnCampaign_TemplateConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCampaign_TemplateProperty: typing.Optional[dict[str, CfnCampaign_TemplatePropertyDef]] = pydantic.Field(None)
    CfnCampaign_WriteTreatmentResourceProperty: typing.Optional[dict[str, CfnCampaign_WriteTreatmentResourcePropertyDef]] = pydantic.Field(None)
    CfnInAppTemplate_BodyConfigProperty: typing.Optional[dict[str, CfnInAppTemplate_BodyConfigPropertyDef]] = pydantic.Field(None)
    CfnInAppTemplate_ButtonConfigProperty: typing.Optional[dict[str, CfnInAppTemplate_ButtonConfigPropertyDef]] = pydantic.Field(None)
    CfnInAppTemplate_DefaultButtonConfigurationProperty: typing.Optional[dict[str, CfnInAppTemplate_DefaultButtonConfigurationPropertyDef]] = pydantic.Field(None)
    CfnInAppTemplate_HeaderConfigProperty: typing.Optional[dict[str, CfnInAppTemplate_HeaderConfigPropertyDef]] = pydantic.Field(None)
    CfnInAppTemplate_InAppMessageContentProperty: typing.Optional[dict[str, CfnInAppTemplate_InAppMessageContentPropertyDef]] = pydantic.Field(None)
    CfnInAppTemplate_OverrideButtonConfigurationProperty: typing.Optional[dict[str, CfnInAppTemplate_OverrideButtonConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPushTemplate_AndroidPushNotificationTemplateProperty: typing.Optional[dict[str, CfnPushTemplate_AndroidPushNotificationTemplatePropertyDef]] = pydantic.Field(None)
    CfnPushTemplate_APNSPushNotificationTemplateProperty: typing.Optional[dict[str, CfnPushTemplate_APNSPushNotificationTemplatePropertyDef]] = pydantic.Field(None)
    CfnPushTemplate_DefaultPushNotificationTemplateProperty: typing.Optional[dict[str, CfnPushTemplate_DefaultPushNotificationTemplatePropertyDef]] = pydantic.Field(None)
    CfnSegment_AttributeDimensionProperty: typing.Optional[dict[str, CfnSegment_AttributeDimensionPropertyDef]] = pydantic.Field(None)
    CfnSegment_BehaviorProperty: typing.Optional[dict[str, CfnSegment_BehaviorPropertyDef]] = pydantic.Field(None)
    CfnSegment_CoordinatesProperty: typing.Optional[dict[str, CfnSegment_CoordinatesPropertyDef]] = pydantic.Field(None)
    CfnSegment_DemographicProperty: typing.Optional[dict[str, CfnSegment_DemographicPropertyDef]] = pydantic.Field(None)
    CfnSegment_GPSPointProperty: typing.Optional[dict[str, CfnSegment_GPSPointPropertyDef]] = pydantic.Field(None)
    CfnSegment_GroupsProperty: typing.Optional[dict[str, CfnSegment_GroupsPropertyDef]] = pydantic.Field(None)
    CfnSegment_LocationProperty: typing.Optional[dict[str, CfnSegment_LocationPropertyDef]] = pydantic.Field(None)
    CfnSegment_RecencyProperty: typing.Optional[dict[str, CfnSegment_RecencyPropertyDef]] = pydantic.Field(None)
    CfnSegment_SegmentDimensionsProperty: typing.Optional[dict[str, CfnSegment_SegmentDimensionsPropertyDef]] = pydantic.Field(None)
    CfnSegment_SegmentGroupsProperty: typing.Optional[dict[str, CfnSegment_SegmentGroupsPropertyDef]] = pydantic.Field(None)
    CfnSegment_SetDimensionProperty: typing.Optional[dict[str, CfnSegment_SetDimensionPropertyDef]] = pydantic.Field(None)
    CfnSegment_SourceSegmentsProperty: typing.Optional[dict[str, CfnSegment_SourceSegmentsPropertyDef]] = pydantic.Field(None)
    CfnADMChannel: typing.Optional[dict[str, CfnADMChannelDef]] = pydantic.Field(None)
    CfnAPNSChannel: typing.Optional[dict[str, CfnAPNSChannelDef]] = pydantic.Field(None)
    CfnAPNSSandboxChannel: typing.Optional[dict[str, CfnAPNSSandboxChannelDef]] = pydantic.Field(None)
    CfnAPNSVoipChannel: typing.Optional[dict[str, CfnAPNSVoipChannelDef]] = pydantic.Field(None)
    CfnAPNSVoipSandboxChannel: typing.Optional[dict[str, CfnAPNSVoipSandboxChannelDef]] = pydantic.Field(None)
    CfnApp: typing.Optional[dict[str, CfnAppDef]] = pydantic.Field(None)
    CfnApplicationSettings: typing.Optional[dict[str, CfnApplicationSettingsDef]] = pydantic.Field(None)
    CfnBaiduChannel: typing.Optional[dict[str, CfnBaiduChannelDef]] = pydantic.Field(None)
    CfnCampaign: typing.Optional[dict[str, CfnCampaignDef]] = pydantic.Field(None)
    CfnEmailChannel: typing.Optional[dict[str, CfnEmailChannelDef]] = pydantic.Field(None)
    CfnEmailTemplate: typing.Optional[dict[str, CfnEmailTemplateDef]] = pydantic.Field(None)
    CfnEventStream: typing.Optional[dict[str, CfnEventStreamDef]] = pydantic.Field(None)
    CfnGCMChannel: typing.Optional[dict[str, CfnGCMChannelDef]] = pydantic.Field(None)
    CfnInAppTemplate: typing.Optional[dict[str, CfnInAppTemplateDef]] = pydantic.Field(None)
    CfnPushTemplate: typing.Optional[dict[str, CfnPushTemplateDef]] = pydantic.Field(None)
    CfnSegment: typing.Optional[dict[str, CfnSegmentDef]] = pydantic.Field(None)
    CfnSMSChannel: typing.Optional[dict[str, CfnSMSChannelDef]] = pydantic.Field(None)
    CfnSmsTemplate: typing.Optional[dict[str, CfnSmsTemplateDef]] = pydantic.Field(None)
    CfnVoiceChannel: typing.Optional[dict[str, CfnVoiceChannelDef]] = pydantic.Field(None)
    CfnADMChannelProps: typing.Optional[dict[str, CfnADMChannelPropsDef]] = pydantic.Field(None)
    CfnAPNSChannelProps: typing.Optional[dict[str, CfnAPNSChannelPropsDef]] = pydantic.Field(None)
    CfnAPNSSandboxChannelProps: typing.Optional[dict[str, CfnAPNSSandboxChannelPropsDef]] = pydantic.Field(None)
    CfnAPNSVoipChannelProps: typing.Optional[dict[str, CfnAPNSVoipChannelPropsDef]] = pydantic.Field(None)
    CfnAPNSVoipSandboxChannelProps: typing.Optional[dict[str, CfnAPNSVoipSandboxChannelPropsDef]] = pydantic.Field(None)
    CfnApplicationSettingsProps: typing.Optional[dict[str, CfnApplicationSettingsPropsDef]] = pydantic.Field(None)
    CfnAppProps: typing.Optional[dict[str, CfnAppPropsDef]] = pydantic.Field(None)
    CfnBaiduChannelProps: typing.Optional[dict[str, CfnBaiduChannelPropsDef]] = pydantic.Field(None)
    CfnCampaignProps: typing.Optional[dict[str, CfnCampaignPropsDef]] = pydantic.Field(None)
    CfnEmailChannelProps: typing.Optional[dict[str, CfnEmailChannelPropsDef]] = pydantic.Field(None)
    CfnEmailTemplateProps: typing.Optional[dict[str, CfnEmailTemplatePropsDef]] = pydantic.Field(None)
    CfnEventStreamProps: typing.Optional[dict[str, CfnEventStreamPropsDef]] = pydantic.Field(None)
    CfnGCMChannelProps: typing.Optional[dict[str, CfnGCMChannelPropsDef]] = pydantic.Field(None)
    CfnInAppTemplateProps: typing.Optional[dict[str, CfnInAppTemplatePropsDef]] = pydantic.Field(None)
    CfnPushTemplateProps: typing.Optional[dict[str, CfnPushTemplatePropsDef]] = pydantic.Field(None)
    CfnSegmentProps: typing.Optional[dict[str, CfnSegmentPropsDef]] = pydantic.Field(None)
    CfnSMSChannelProps: typing.Optional[dict[str, CfnSMSChannelPropsDef]] = pydantic.Field(None)
    CfnSmsTemplateProps: typing.Optional[dict[str, CfnSmsTemplatePropsDef]] = pydantic.Field(None)
    CfnVoiceChannelProps: typing.Optional[dict[str, CfnVoiceChannelPropsDef]] = pydantic.Field(None)
    ...
