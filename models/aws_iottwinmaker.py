from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.DataConnectorProperty
class CfnComponentType_DataConnectorPropertyDef(BaseStruct):
    is_native: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A boolean value that specifies whether the data connector is native to IoT TwinMaker.\n')
    lambda_: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_LambdaFunctionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Lambda function associated with the data connector.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-dataconnector.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    data_connector_property = iottwinmaker.CfnComponentType.DataConnectorProperty(\n        is_native=False,\n        lambda_=iottwinmaker.CfnComponentType.LambdaFunctionProperty(\n            arn="arn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['is_native', 'lambda_']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.DataConnectorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.DataTypeProperty
class CfnComponentType_DataTypePropertyDef(BaseStruct):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The underlying type of the data type. Valid Values: ``RELATIONSHIP | STRING | LONG | BOOLEAN | INTEGER | DOUBLE | LIST | MAP``\n')
    allowed_values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The allowed values for this data type.\n')
    nested_type: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The nested type in the data type.\n')
    relationship: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_RelationshipPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A relationship that associates a component with another component.\n')
    unit_of_measure: typing.Optional[str] = pydantic.Field(None, description='The unit of measure used in this data type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-datatype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_type_property_: iottwinmaker.CfnComponentType.DataTypeProperty\n    # data_value_property_: iottwinmaker.CfnComponentType.DataValueProperty\n    # relationship_value: Any\n\n    data_type_property = iottwinmaker.CfnComponentType.DataTypeProperty(\n        type="type",\n\n        # the properties below are optional\n        allowed_values=[iottwinmaker.CfnComponentType.DataValueProperty(\n            boolean_value=False,\n            double_value=123,\n            expression="expression",\n            integer_value=123,\n            list_value=[data_value_property_],\n            long_value=123,\n            map_value={\n                "map_value_key": data_value_property_\n            },\n            relationship_value=relationship_value,\n            string_value="stringValue"\n        )],\n        nested_type=data_type_property_,\n        relationship=iottwinmaker.CfnComponentType.RelationshipProperty(\n            relationship_type="relationshipType",\n            target_component_type_id="targetComponentTypeId"\n        ),\n        unit_of_measure="unitOfMeasure"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'allowed_values', 'nested_type', 'relationship', 'unit_of_measure']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.DataTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.DataValueProperty
class CfnComponentType_DataValuePropertyDef(BaseStruct):
    boolean_value: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A boolean value.\n')
    double_value: typing.Union[int, float, None] = pydantic.Field(None, description='A double value.\n')
    expression: typing.Optional[str] = pydantic.Field(None, description='An expression that produces the value.\n')
    integer_value: typing.Union[int, float, None] = pydantic.Field(None, description='An integer value.\n')
    list_value: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of multiple values.\n')
    long_value: typing.Union[int, float, None] = pydantic.Field(None, description='A long value.\n')
    map_value: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to multiple ``DataValue`` objects.\n')
    relationship_value: typing.Any = pydantic.Field(None, description='A value that relates a component to another component.\n')
    string_value: typing.Optional[str] = pydantic.Field(None, description='A string value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-datavalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_value_property_: iottwinmaker.CfnComponentType.DataValueProperty\n    # relationship_value: Any\n\n    data_value_property = iottwinmaker.CfnComponentType.DataValueProperty(\n        boolean_value=False,\n        double_value=123,\n        expression="expression",\n        integer_value=123,\n        list_value=[data_value_property_],\n        long_value=123,\n        map_value={\n            "map_value_key": data_value_property_\n        },\n        relationship_value=relationship_value,\n        string_value="stringValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['boolean_value', 'double_value', 'expression', 'integer_value', 'list_value', 'long_value', 'map_value', 'relationship_value', 'string_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.DataValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.ErrorProperty
class CfnComponentType_ErrorPropertyDef(BaseStruct):
    code: typing.Optional[str] = pydantic.Field(None, description='The component type error code.\n')
    message: typing.Optional[str] = pydantic.Field(None, description='The component type error message.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-error.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    error_property = iottwinmaker.CfnComponentType.ErrorProperty(\n        code="code",\n        message="message"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['code', 'message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.ErrorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.FunctionProperty
class CfnComponentType_FunctionPropertyDef(BaseStruct):
    implemented_by: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataConnectorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The data connector.\n')
    required_properties: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The required properties of the function.\n')
    _init_params: typing.ClassVar[list[str]] = ['implemented_by', 'required_properties']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.FunctionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.LambdaFunctionProperty
class CfnComponentType_LambdaFunctionPropertyDef(BaseStruct):
    arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Lambda function ARN.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-lambdafunction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    lambda_function_property = iottwinmaker.CfnComponentType.LambdaFunctionProperty(\n        arn="arn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.LambdaFunctionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.PropertyDefinitionProperty
class CfnComponentType_PropertyDefinitionPropertyDef(BaseStruct):
    configurations: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='A mapping that specifies configuration information about the property.\n')
    data_type: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that specifies the data type of a property.\n')
    default_value: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A boolean value that specifies whether the property ID comes from an external data store.\n')
    is_external_id: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A Boolean value that specifies whether the property ID comes from an external data store.\n')
    is_required_in_entity: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A boolean value that specifies whether the property is required in an entity.\n')
    is_stored_externally: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A boolean value that specifies whether the property is stored externally.\n')
    is_time_series: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A boolean value that specifies whether the property consists of time series data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-propertydefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_type_property_: iottwinmaker.CfnComponentType.DataTypeProperty\n    # data_value_property_: iottwinmaker.CfnComponentType.DataValueProperty\n    # relationship_value: Any\n\n    property_definition_property = iottwinmaker.CfnComponentType.PropertyDefinitionProperty(\n        configurations={\n            "configurations_key": "configurations"\n        },\n        data_type=iottwinmaker.CfnComponentType.DataTypeProperty(\n            type="type",\n\n            # the properties below are optional\n            allowed_values=[iottwinmaker.CfnComponentType.DataValueProperty(\n                boolean_value=False,\n                double_value=123,\n                expression="expression",\n                integer_value=123,\n                list_value=[data_value_property_],\n                long_value=123,\n                map_value={\n                    "map_value_key": data_value_property_\n                },\n                relationship_value=relationship_value,\n                string_value="stringValue"\n            )],\n            nested_type=data_type_property_,\n            relationship=iottwinmaker.CfnComponentType.RelationshipProperty(\n                relationship_type="relationshipType",\n                target_component_type_id="targetComponentTypeId"\n            ),\n            unit_of_measure="unitOfMeasure"\n        ),\n        default_value=iottwinmaker.CfnComponentType.DataValueProperty(\n            boolean_value=False,\n            double_value=123,\n            expression="expression",\n            integer_value=123,\n            list_value=[data_value_property_],\n            long_value=123,\n            map_value={\n                "map_value_key": data_value_property_\n            },\n            relationship_value=relationship_value,\n            string_value="stringValue"\n        ),\n        is_external_id=False,\n        is_required_in_entity=False,\n        is_stored_externally=False,\n        is_time_series=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configurations', 'data_type', 'default_value', 'is_external_id', 'is_required_in_entity', 'is_stored_externally', 'is_time_series']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.PropertyDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.PropertyGroupProperty
class CfnComponentType_PropertyGroupPropertyDef(BaseStruct):
    group_type: typing.Optional[str] = pydantic.Field(None, description='The group type.\n')
    property_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The property names.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-propertygroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    property_group_property = iottwinmaker.CfnComponentType.PropertyGroupProperty(\n        group_type="groupType",\n        property_names=["propertyNames"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['group_type', 'property_names']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.PropertyGroupProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.RelationshipProperty
class CfnComponentType_RelationshipPropertyDef(BaseStruct):
    relationship_type: typing.Optional[str] = pydantic.Field(None, description='The type of the relationship.\n')
    target_component_type_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the target component type associated with this relationship.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-relationship.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    relationship_property = iottwinmaker.CfnComponentType.RelationshipProperty(\n        relationship_type="relationshipType",\n        target_component_type_id="targetComponentTypeId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['relationship_type', 'target_component_type_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.RelationshipProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.RelationshipValueProperty
class CfnComponentType_RelationshipValuePropertyDef(BaseStruct):
    target_component_name: typing.Optional[str] = pydantic.Field(None, description='The target component name.\n')
    target_entity_id: typing.Optional[str] = pydantic.Field(None, description='The target entity Id.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-relationshipvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    relationship_value_property = iottwinmaker.CfnComponentType.RelationshipValueProperty(\n        target_component_name="targetComponentName",\n        target_entity_id="targetEntityId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_component_name', 'target_entity_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.RelationshipValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType.StatusProperty
class CfnComponentType_StatusPropertyDef(BaseStruct):
    error: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_ErrorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The component type error.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The component type status state.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-componenttype-status.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    status_property = iottwinmaker.CfnComponentType.StatusProperty(\n        error=iottwinmaker.CfnComponentType.ErrorProperty(\n            code="code",\n            message="message"\n        ),\n        state="state"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['error', 'state']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType.StatusProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.ComponentProperty
class CfnEntity_ComponentPropertyDef(BaseStruct):
    component_name: typing.Optional[str] = pydantic.Field(None, description='The name of the component.\n')
    component_type_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the component type.\n')
    defined_in: typing.Optional[str] = pydantic.Field(None, description='The name of the property definition set in the request.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the component.\n')
    properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_PropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.\n')
    property_groups: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_PropertyGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the property groups in the component type. Each string in the mapping must be unique to this object.\n')
    status: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_StatusPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The status of the component.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-component.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_value_property_: iottwinmaker.CfnEntity.DataValueProperty\n    # definition: Any\n    # error: Any\n    # relationship_value: Any\n\n    component_property = iottwinmaker.CfnEntity.ComponentProperty(\n        component_name="componentName",\n        component_type_id="componentTypeId",\n        defined_in="definedIn",\n        description="description",\n        properties={\n            "properties_key": iottwinmaker.CfnEntity.PropertyProperty(\n                definition=definition,\n                value=iottwinmaker.CfnEntity.DataValueProperty(\n                    boolean_value=False,\n                    double_value=123,\n                    expression="expression",\n                    integer_value=123,\n                    list_value=[data_value_property_],\n                    long_value=123,\n                    map_value={\n                        "map_value_key": data_value_property_\n                    },\n                    relationship_value=relationship_value,\n                    string_value="stringValue"\n                )\n            )\n        },\n        property_groups={\n            "property_groups_key": iottwinmaker.CfnEntity.PropertyGroupProperty(\n                group_type="groupType",\n                property_names=["propertyNames"]\n            )\n        },\n        status=iottwinmaker.CfnEntity.StatusProperty(\n            error=error,\n            state="state"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['component_name', 'component_type_id', 'defined_in', 'description', 'properties', 'property_groups', 'status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.ComponentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.DataTypeProperty
class CfnEntity_DataTypePropertyDef(BaseStruct):
    allowed_values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The allowed values.\n')
    nested_type: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The nested type.\n')
    relationship: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_RelationshipPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The relationship.\n')
    type: typing.Optional[str] = pydantic.Field(None, description='The entity type.\n')
    unit_of_measure: typing.Optional[str] = pydantic.Field(None, description='The unit of measure.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-datatype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_type_property_: iottwinmaker.CfnEntity.DataTypeProperty\n    # data_value_property_: iottwinmaker.CfnEntity.DataValueProperty\n    # relationship_value: Any\n\n    data_type_property = iottwinmaker.CfnEntity.DataTypeProperty(\n        allowed_values=[iottwinmaker.CfnEntity.DataValueProperty(\n            boolean_value=False,\n            double_value=123,\n            expression="expression",\n            integer_value=123,\n            list_value=[data_value_property_],\n            long_value=123,\n            map_value={\n                "map_value_key": data_value_property_\n            },\n            relationship_value=relationship_value,\n            string_value="stringValue"\n        )],\n        nested_type=data_type_property_,\n        relationship=iottwinmaker.CfnEntity.RelationshipProperty(\n            relationship_type="relationshipType",\n            target_component_type_id="targetComponentTypeId"\n        ),\n        type="type",\n        unit_of_measure="unitOfMeasure"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allowed_values', 'nested_type', 'relationship', 'type', 'unit_of_measure']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.DataTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.DataValueProperty
class CfnEntity_DataValuePropertyDef(BaseStruct):
    boolean_value: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A boolean value.\n')
    double_value: typing.Union[int, float, None] = pydantic.Field(None, description='A double value.\n')
    expression: typing.Optional[str] = pydantic.Field(None, description='An expression that produces the value.\n')
    integer_value: typing.Union[int, float, None] = pydantic.Field(None, description='An integer value.\n')
    list_value: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of multiple values.\n')
    long_value: typing.Union[int, float, None] = pydantic.Field(None, description='A long value.\n')
    map_value: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to multiple DataValue objects.\n')
    relationship_value: typing.Any = pydantic.Field(None, description='A value that relates a component to another component.\n')
    string_value: typing.Optional[str] = pydantic.Field(None, description='A string value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-datavalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_value_property_: iottwinmaker.CfnEntity.DataValueProperty\n    # relationship_value: Any\n\n    data_value_property = iottwinmaker.CfnEntity.DataValueProperty(\n        boolean_value=False,\n        double_value=123,\n        expression="expression",\n        integer_value=123,\n        list_value=[data_value_property_],\n        long_value=123,\n        map_value={\n            "map_value_key": data_value_property_\n        },\n        relationship_value=relationship_value,\n        string_value="stringValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['boolean_value', 'double_value', 'expression', 'integer_value', 'list_value', 'long_value', 'map_value', 'relationship_value', 'string_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.DataValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.DefinitionProperty
class CfnEntity_DefinitionPropertyDef(BaseStruct):
    configuration: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='The configuration.\n')
    data_type: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The data type.\n')
    default_value: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default value.\n')
    is_external_id: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Displays if the entity has a external Id.\n')
    is_final: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Displays if the entity is final.\n')
    is_imported: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Displays if the entity is imported.\n')
    is_inherited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Displays if the entity is inherited.\n')
    is_required_in_entity: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Displays if the entity is a required entity.\n')
    is_stored_externally: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Displays if the entity is tored externally.\n')
    is_time_series: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Displays if the entity.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-definition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_type_property_: iottwinmaker.CfnEntity.DataTypeProperty\n    # data_value_property_: iottwinmaker.CfnEntity.DataValueProperty\n    # relationship_value: Any\n\n    definition_property = iottwinmaker.CfnEntity.DefinitionProperty(\n        configuration={\n            "configuration_key": "configuration"\n        },\n        data_type=iottwinmaker.CfnEntity.DataTypeProperty(\n            allowed_values=[iottwinmaker.CfnEntity.DataValueProperty(\n                boolean_value=False,\n                double_value=123,\n                expression="expression",\n                integer_value=123,\n                list_value=[data_value_property_],\n                long_value=123,\n                map_value={\n                    "map_value_key": data_value_property_\n                },\n                relationship_value=relationship_value,\n                string_value="stringValue"\n            )],\n            nested_type=data_type_property_,\n            relationship=iottwinmaker.CfnEntity.RelationshipProperty(\n                relationship_type="relationshipType",\n                target_component_type_id="targetComponentTypeId"\n            ),\n            type="type",\n            unit_of_measure="unitOfMeasure"\n        ),\n        default_value=iottwinmaker.CfnEntity.DataValueProperty(\n            boolean_value=False,\n            double_value=123,\n            expression="expression",\n            integer_value=123,\n            list_value=[data_value_property_],\n            long_value=123,\n            map_value={\n                "map_value_key": data_value_property_\n            },\n            relationship_value=relationship_value,\n            string_value="stringValue"\n        ),\n        is_external_id=False,\n        is_final=False,\n        is_imported=False,\n        is_inherited=False,\n        is_required_in_entity=False,\n        is_stored_externally=False,\n        is_time_series=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration', 'data_type', 'default_value', 'is_external_id', 'is_final', 'is_imported', 'is_inherited', 'is_required_in_entity', 'is_stored_externally', 'is_time_series']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.DefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.ErrorProperty
class CfnEntity_ErrorPropertyDef(BaseStruct):
    code: typing.Optional[str] = pydantic.Field(None, description='The entity error code.\n')
    message: typing.Optional[str] = pydantic.Field(None, description='The entity error message.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-error.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    error_property = iottwinmaker.CfnEntity.ErrorProperty(\n        code="code",\n        message="message"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['code', 'message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.ErrorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.PropertyGroupProperty
class CfnEntity_PropertyGroupPropertyDef(BaseStruct):
    group_type: typing.Optional[str] = pydantic.Field(None, description='The group type.\n')
    property_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The property names.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-propertygroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    property_group_property = iottwinmaker.CfnEntity.PropertyGroupProperty(\n        group_type="groupType",\n        property_names=["propertyNames"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['group_type', 'property_names']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.PropertyGroupProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.PropertyProperty
class CfnEntity_PropertyPropertyDef(BaseStruct):
    definition: typing.Any = pydantic.Field(None, description='An object that specifies information about a property.\n')
    value: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that contains information about a value for a time series property.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-property.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_value_property_: iottwinmaker.CfnEntity.DataValueProperty\n    # definition: Any\n    # relationship_value: Any\n\n    property_property = iottwinmaker.CfnEntity.PropertyProperty(\n        definition=definition,\n        value=iottwinmaker.CfnEntity.DataValueProperty(\n            boolean_value=False,\n            double_value=123,\n            expression="expression",\n            integer_value=123,\n            list_value=[data_value_property_],\n            long_value=123,\n            map_value={\n                "map_value_key": data_value_property_\n            },\n            relationship_value=relationship_value,\n            string_value="stringValue"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['definition', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.PropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.RelationshipProperty
class CfnEntity_RelationshipPropertyDef(BaseStruct):
    relationship_type: typing.Optional[str] = pydantic.Field(None, description='The relationship type.\n')
    target_component_type_id: typing.Optional[str] = pydantic.Field(None, description='the component type Id target.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-relationship.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    relationship_property = iottwinmaker.CfnEntity.RelationshipProperty(\n        relationship_type="relationshipType",\n        target_component_type_id="targetComponentTypeId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['relationship_type', 'target_component_type_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.RelationshipProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.RelationshipValueProperty
class CfnEntity_RelationshipValuePropertyDef(BaseStruct):
    target_component_name: typing.Optional[str] = pydantic.Field(None, description='The target component name.\n')
    target_entity_id: typing.Optional[str] = pydantic.Field(None, description='The target entity Id.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-relationshipvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    relationship_value_property = iottwinmaker.CfnEntity.RelationshipValueProperty(\n        target_component_name="targetComponentName",\n        target_entity_id="targetEntityId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_component_name', 'target_entity_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.RelationshipValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity.StatusProperty
class CfnEntity_StatusPropertyDef(BaseStruct):
    error: typing.Any = pydantic.Field(None, description='The error message.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The current state of the entity, component, component type, or workspace. Valid Values: ``CREATING | UPDATING | DELETING | ACTIVE | ERROR``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iottwinmaker-entity-status.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # error: Any\n\n    status_property = iottwinmaker.CfnEntity.StatusProperty(\n        error=error,\n        state="state"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['error', 'state']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity.StatusProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentType
class CfnComponentTypeDef(BaseCfnResource):
    component_type_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the component type.\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the workspace that contains the component type.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the component type.\n')
    extends_from: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The name of the parent component type that this component type extends.\n')
    functions: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_FunctionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object. For information on the FunctionResponse object see the `FunctionResponse <https://docs.aws.amazon.com//iot-twinmaker/latest/apireference/API_FunctionResponse.html>`_ API reference.\n')
    is_singleton: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A boolean value that specifies whether an entity can have more than one component of this type.\n')
    property_definitions: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_PropertyDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object. For information about the PropertyDefinitionResponse object, see the `PropertyDefinitionResponse <https://docs.aws.amazon.com//iot-twinmaker/latest/apireference/API_PropertyDefinitionResponse.html>`_ API reference.\n')
    property_groups: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_PropertyGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the property groups in the component type. Each string in the mapping must be unique to this object.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='The ComponentType tags.')
    _init_params: typing.ClassVar[list[str]] = ['component_type_id', 'workspace_id', 'description', 'extends_from', 'functions', 'is_singleton', 'property_definitions', 'property_groups', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['DataConnectorProperty', 'DataTypeProperty', 'DataValueProperty', 'ErrorProperty', 'FunctionProperty', 'LambdaFunctionProperty', 'PropertyDefinitionProperty', 'PropertyGroupProperty', 'RelationshipProperty', 'RelationshipValueProperty', 'StatusProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentType'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iottwinmaker.CfnComponentTypeDefConfig] = pydantic.Field(None)


class CfnComponentTypeDefConfig(pydantic.BaseModel):
    DataConnectorProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefDataconnectorpropertyParams]] = pydantic.Field(None, description='')
    DataTypeProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefDatatypepropertyParams]] = pydantic.Field(None, description='')
    DataValueProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefDatavaluepropertyParams]] = pydantic.Field(None, description='')
    ErrorProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefErrorpropertyParams]] = pydantic.Field(None, description='')
    FunctionProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefFunctionpropertyParams]] = pydantic.Field(None, description='')
    LambdaFunctionProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefLambdafunctionpropertyParams]] = pydantic.Field(None, description='')
    PropertyDefinitionProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefPropertydefinitionpropertyParams]] = pydantic.Field(None, description='')
    PropertyGroupProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefPropertygrouppropertyParams]] = pydantic.Field(None, description='')
    RelationshipProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefRelationshippropertyParams]] = pydantic.Field(None, description='')
    RelationshipValueProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefRelationshipvaluepropertyParams]] = pydantic.Field(None, description='')
    StatusProperty: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefStatuspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnComponentTypeDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_is_abstract_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    attr_is_schema_initialized_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    attr_status_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    attr_status_error_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnComponentTypeDefDataconnectorpropertyParams(pydantic.BaseModel):
    is_native: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    lambda_: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_LambdaFunctionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefDatatypepropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    allowed_values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    nested_type: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    relationship: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_RelationshipPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    unit_of_measure: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefDatavaluepropertyParams(pydantic.BaseModel):
    boolean_value: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    double_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    expression: typing.Optional[str] = pydantic.Field(None, description='')
    integer_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    list_value: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    long_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    map_value: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    relationship_value: typing.Any = pydantic.Field(None, description='')
    string_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefErrorpropertyParams(pydantic.BaseModel):
    code: typing.Optional[str] = pydantic.Field(None, description='')
    message: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefFunctionpropertyParams(pydantic.BaseModel):
    implemented_by: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataConnectorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    required_properties: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    scope: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefLambdafunctionpropertyParams(pydantic.BaseModel):
    arn: str = pydantic.Field(..., description='')
    ...

class CfnComponentTypeDefPropertydefinitionpropertyParams(pydantic.BaseModel):
    configurations: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    data_type: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_value: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_DataValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    is_external_id: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    is_required_in_entity: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    is_stored_externally: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    is_time_series: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefPropertygrouppropertyParams(pydantic.BaseModel):
    group_type: typing.Optional[str] = pydantic.Field(None, description='')
    property_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefRelationshippropertyParams(pydantic.BaseModel):
    relationship_type: typing.Optional[str] = pydantic.Field(None, description='')
    target_component_type_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefRelationshipvaluepropertyParams(pydantic.BaseModel):
    target_component_name: typing.Optional[str] = pydantic.Field(None, description='')
    target_entity_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefStatuspropertyParams(pydantic.BaseModel):
    error: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_ErrorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    state: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentTypeDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnComponentTypeDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnComponentTypeDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnComponentTypeDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnComponentTypeDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnComponentTypeDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnComponentTypeDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnComponentTypeDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnComponentTypeDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnComponentTypeDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnComponentTypeDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnComponentTypeDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnComponentTypeDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnComponentTypeDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntity
class CfnEntityDef(BaseCfnResource):
    entity_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The entity name.\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the workspace.\n')
    components: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_ComponentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object. For information on the component object see the `component <https://docs.aws.amazon.com//iot-twinmaker/latest/apireference/API_ComponentResponse.html>`_ API reference.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the entity.\n')
    entity_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the entity.\n')
    parent_entity_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the parent entity.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata that you can use to manage the entity.')
    _init_params: typing.ClassVar[list[str]] = ['entity_name', 'workspace_id', 'components', 'description', 'entity_id', 'parent_entity_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ComponentProperty', 'DataTypeProperty', 'DataValueProperty', 'DefinitionProperty', 'ErrorProperty', 'PropertyGroupProperty', 'PropertyProperty', 'RelationshipProperty', 'RelationshipValueProperty', 'StatusProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntity'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iottwinmaker.CfnEntityDefConfig] = pydantic.Field(None)


class CfnEntityDefConfig(pydantic.BaseModel):
    ComponentProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefComponentpropertyParams]] = pydantic.Field(None, description='')
    DataTypeProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefDatatypepropertyParams]] = pydantic.Field(None, description='')
    DataValueProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefDatavaluepropertyParams]] = pydantic.Field(None, description='')
    DefinitionProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefDefinitionpropertyParams]] = pydantic.Field(None, description='')
    ErrorProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefErrorpropertyParams]] = pydantic.Field(None, description='')
    PropertyGroupProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefPropertygrouppropertyParams]] = pydantic.Field(None, description='')
    PropertyProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefPropertypropertyParams]] = pydantic.Field(None, description='')
    RelationshipProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefRelationshippropertyParams]] = pydantic.Field(None, description='')
    RelationshipValueProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefRelationshipvaluepropertyParams]] = pydantic.Field(None, description='')
    StatusProperty: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefStatuspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnEntityDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_has_child_entities_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    attr_status_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    attr_status_error_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnEntityDefComponentpropertyParams(pydantic.BaseModel):
    component_name: typing.Optional[str] = pydantic.Field(None, description='')
    component_type_id: typing.Optional[str] = pydantic.Field(None, description='')
    defined_in: typing.Optional[str] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    properties: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_PropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    property_groups: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_PropertyGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    status: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_StatusPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnEntityDefDatatypepropertyParams(pydantic.BaseModel):
    allowed_values: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    nested_type: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    relationship: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_RelationshipPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    unit_of_measure: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEntityDefDatavaluepropertyParams(pydantic.BaseModel):
    boolean_value: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    double_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    expression: typing.Optional[str] = pydantic.Field(None, description='')
    integer_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    list_value: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    long_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    map_value: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    relationship_value: typing.Any = pydantic.Field(None, description='')
    string_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEntityDefDefinitionpropertyParams(pydantic.BaseModel):
    configuration: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    data_type: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataTypePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_value: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    is_external_id: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    is_final: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    is_imported: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    is_inherited: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    is_required_in_entity: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    is_stored_externally: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    is_time_series: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnEntityDefErrorpropertyParams(pydantic.BaseModel):
    code: typing.Optional[str] = pydantic.Field(None, description='')
    message: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEntityDefPropertygrouppropertyParams(pydantic.BaseModel):
    group_type: typing.Optional[str] = pydantic.Field(None, description='')
    property_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnEntityDefPropertypropertyParams(pydantic.BaseModel):
    definition: typing.Any = pydantic.Field(None, description='')
    value: typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnEntityDefRelationshippropertyParams(pydantic.BaseModel):
    relationship_type: typing.Optional[str] = pydantic.Field(None, description='')
    target_component_type_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEntityDefRelationshipvaluepropertyParams(pydantic.BaseModel):
    target_component_name: typing.Optional[str] = pydantic.Field(None, description='')
    target_entity_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEntityDefStatuspropertyParams(pydantic.BaseModel):
    error: typing.Any = pydantic.Field(None, description='')
    state: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEntityDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEntityDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEntityDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEntityDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEntityDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEntityDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEntityDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEntityDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEntityDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEntityDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEntityDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnEntityDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEntityDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEntityDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iottwinmaker.CfnScene
class CfnSceneDef(BaseCfnResource):
    content_location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The relative path that specifies the location of the content definition file.\n')
    scene_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the scene.\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the scene.\n')
    capabilities: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of capabilities that the scene uses to render.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of this scene.\n')
    scene_metadata: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='The scene metadata.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='The ComponentType tags.')
    _init_params: typing.ClassVar[list[str]] = ['content_location', 'scene_id', 'workspace_id', 'capabilities', 'description', 'scene_metadata', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnScene'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iottwinmaker.CfnSceneDefConfig] = pydantic.Field(None)


class CfnSceneDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnSceneDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_generated_scene_metadata_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnSceneDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSceneDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSceneDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSceneDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSceneDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSceneDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSceneDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSceneDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSceneDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSceneDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSceneDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnSceneDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSceneDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSceneDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iottwinmaker.CfnSyncJob
class CfnSyncJobDef(BaseCfnResource):
    sync_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SyncJob IAM role. This IAM role is used by the sync job to read from the syncSource, and create, update or delete the corresponding resources.\n')
    sync_source: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The sync source. .. epigraph:: Currently the only supported syncSoucre is ``SITEWISE`` .\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the workspace that contains the sync job.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata you can use to manage the SyncJob.')
    _init_params: typing.ClassVar[list[str]] = ['sync_role', 'sync_source', 'workspace_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnSyncJob'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iottwinmaker.CfnSyncJobDefConfig] = pydantic.Field(None)


class CfnSyncJobDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnSyncJobDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnSyncJobDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSyncJobDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSyncJobDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSyncJobDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSyncJobDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSyncJobDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSyncJobDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSyncJobDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSyncJobDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSyncJobDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSyncJobDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnSyncJobDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSyncJobDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSyncJobDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iottwinmaker.CfnWorkspace
class CfnWorkspaceDef(BaseCfnResource):
    role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the execution role associated with the workspace.\n')
    s3_location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the S3 bucket where resources associated with the workspace are stored.\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the workspace.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the workspace.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata that you can use to manage the workspace.')
    _init_params: typing.ClassVar[list[str]] = ['role', 's3_location', 'workspace_id', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnWorkspace'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iottwinmaker.CfnWorkspaceDefConfig] = pydantic.Field(None)


class CfnWorkspaceDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iottwinmaker.CfnWorkspaceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnWorkspaceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWorkspaceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWorkspaceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWorkspaceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWorkspaceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWorkspaceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWorkspaceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWorkspaceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWorkspaceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWorkspaceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWorkspaceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnWorkspaceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWorkspaceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWorkspaceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iottwinmaker.CfnComponentTypeProps
class CfnComponentTypePropsDef(BaseCfnProperty):
    component_type_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the component type.\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the workspace that contains the component type.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the component type.\n')
    extends_from: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The name of the parent component type that this component type extends.\n')
    functions: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_FunctionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object. For information on the FunctionResponse object see the `FunctionResponse <https://docs.aws.amazon.com//iot-twinmaker/latest/apireference/API_FunctionResponse.html>`_ API reference.\n')
    is_singleton: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A boolean value that specifies whether an entity can have more than one component of this type.\n')
    property_definitions: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_PropertyDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object. For information about the PropertyDefinitionResponse object, see the `PropertyDefinitionResponse <https://docs.aws.amazon.com//iot-twinmaker/latest/apireference/API_PropertyDefinitionResponse.html>`_ API reference.\n')
    property_groups: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnComponentType_PropertyGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the property groups in the component type. Each string in the mapping must be unique to this object.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='The ComponentType tags.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iottwinmaker-componenttype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_type_property_: iottwinmaker.CfnComponentType.DataTypeProperty\n    # data_value_property_: iottwinmaker.CfnComponentType.DataValueProperty\n    # relationship_value: Any\n\n    cfn_component_type_props = iottwinmaker.CfnComponentTypeProps(\n        component_type_id="componentTypeId",\n        workspace_id="workspaceId",\n\n        # the properties below are optional\n        description="description",\n        extends_from=["extendsFrom"],\n        functions={\n            "functions_key": iottwinmaker.CfnComponentType.FunctionProperty(\n                implemented_by=iottwinmaker.CfnComponentType.DataConnectorProperty(\n                    is_native=False,\n                    lambda_=iottwinmaker.CfnComponentType.LambdaFunctionProperty(\n                        arn="arn"\n                    )\n                ),\n                required_properties=["requiredProperties"],\n                scope="scope"\n            )\n        },\n        is_singleton=False,\n        property_definitions={\n            "property_definitions_key": iottwinmaker.CfnComponentType.PropertyDefinitionProperty(\n                configurations={\n                    "configurations_key": "configurations"\n                },\n                data_type=iottwinmaker.CfnComponentType.DataTypeProperty(\n                    type="type",\n\n                    # the properties below are optional\n                    allowed_values=[iottwinmaker.CfnComponentType.DataValueProperty(\n                        boolean_value=False,\n                        double_value=123,\n                        expression="expression",\n                        integer_value=123,\n                        list_value=[data_value_property_],\n                        long_value=123,\n                        map_value={\n                            "map_value_key": data_value_property_\n                        },\n                        relationship_value=relationship_value,\n                        string_value="stringValue"\n                    )],\n                    nested_type=data_type_property_,\n                    relationship=iottwinmaker.CfnComponentType.RelationshipProperty(\n                        relationship_type="relationshipType",\n                        target_component_type_id="targetComponentTypeId"\n                    ),\n                    unit_of_measure="unitOfMeasure"\n                ),\n                default_value=iottwinmaker.CfnComponentType.DataValueProperty(\n                    boolean_value=False,\n                    double_value=123,\n                    expression="expression",\n                    integer_value=123,\n                    list_value=[data_value_property_],\n                    long_value=123,\n                    map_value={\n                        "map_value_key": data_value_property_\n                    },\n                    relationship_value=relationship_value,\n                    string_value="stringValue"\n                ),\n                is_external_id=False,\n                is_required_in_entity=False,\n                is_stored_externally=False,\n                is_time_series=False\n            )\n        },\n        property_groups={\n            "property_groups_key": iottwinmaker.CfnComponentType.PropertyGroupProperty(\n                group_type="groupType",\n                property_names=["propertyNames"]\n            )\n        },\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['component_type_id', 'workspace_id', 'description', 'extends_from', 'functions', 'is_singleton', 'property_definitions', 'property_groups', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnComponentTypeProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnEntityProps
class CfnEntityPropsDef(BaseCfnProperty):
    entity_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The entity name.\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the workspace.\n')
    components: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_iottwinmaker.CfnEntity_ComponentPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object. For information on the component object see the `component <https://docs.aws.amazon.com//iot-twinmaker/latest/apireference/API_ComponentResponse.html>`_ API reference.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the entity.\n')
    entity_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the entity.\n')
    parent_entity_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the parent entity.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata that you can use to manage the entity.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iottwinmaker-entity.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    # data_value_property_: iottwinmaker.CfnEntity.DataValueProperty\n    # definition: Any\n    # error: Any\n    # relationship_value: Any\n\n    cfn_entity_props = iottwinmaker.CfnEntityProps(\n        entity_name="entityName",\n        workspace_id="workspaceId",\n\n        # the properties below are optional\n        components={\n            "components_key": iottwinmaker.CfnEntity.ComponentProperty(\n                component_name="componentName",\n                component_type_id="componentTypeId",\n                defined_in="definedIn",\n                description="description",\n                properties={\n                    "properties_key": iottwinmaker.CfnEntity.PropertyProperty(\n                        definition=definition,\n                        value=iottwinmaker.CfnEntity.DataValueProperty(\n                            boolean_value=False,\n                            double_value=123,\n                            expression="expression",\n                            integer_value=123,\n                            list_value=[data_value_property_],\n                            long_value=123,\n                            map_value={\n                                "map_value_key": data_value_property_\n                            },\n                            relationship_value=relationship_value,\n                            string_value="stringValue"\n                        )\n                    )\n                },\n                property_groups={\n                    "property_groups_key": iottwinmaker.CfnEntity.PropertyGroupProperty(\n                        group_type="groupType",\n                        property_names=["propertyNames"]\n                    )\n                },\n                status=iottwinmaker.CfnEntity.StatusProperty(\n                    error=error,\n                    state="state"\n                )\n            )\n        },\n        description="description",\n        entity_id="entityId",\n        parent_entity_id="parentEntityId",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['entity_name', 'workspace_id', 'components', 'description', 'entity_id', 'parent_entity_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnEntityProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnSceneProps
class CfnScenePropsDef(BaseCfnProperty):
    content_location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The relative path that specifies the location of the content definition file.\n')
    scene_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the scene.\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the scene.\n')
    capabilities: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of capabilities that the scene uses to render.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of this scene.\n')
    scene_metadata: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='The scene metadata.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='The ComponentType tags.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iottwinmaker-scene.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    cfn_scene_props = iottwinmaker.CfnSceneProps(\n        content_location="contentLocation",\n        scene_id="sceneId",\n        workspace_id="workspaceId",\n\n        # the properties below are optional\n        capabilities=["capabilities"],\n        description="description",\n        scene_metadata={\n            "scene_metadata_key": "sceneMetadata"\n        },\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_location', 'scene_id', 'workspace_id', 'capabilities', 'description', 'scene_metadata', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnSceneProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnSyncJobProps
class CfnSyncJobPropsDef(BaseCfnProperty):
    sync_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SyncJob IAM role. This IAM role is used by the sync job to read from the syncSource, and create, update or delete the corresponding resources.\n')
    sync_source: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The sync source. .. epigraph:: Currently the only supported syncSoucre is ``SITEWISE`` .\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the workspace that contains the sync job.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata you can use to manage the SyncJob.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iottwinmaker-syncjob.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    cfn_sync_job_props = iottwinmaker.CfnSyncJobProps(\n        sync_role="syncRole",\n        sync_source="syncSource",\n        workspace_id="workspaceId",\n\n        # the properties below are optional\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sync_role', 'sync_source', 'workspace_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnSyncJobProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iottwinmaker.CfnWorkspaceProps
class CfnWorkspacePropsDef(BaseCfnProperty):
    role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the execution role associated with the workspace.\n')
    s3_location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the S3 bucket where resources associated with the workspace are stored.\n')
    workspace_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the workspace.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the workspace.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Metadata that you can use to manage the workspace.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iottwinmaker-workspace.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iottwinmaker as iottwinmaker\n\n    cfn_workspace_props = iottwinmaker.CfnWorkspaceProps(\n        role="role",\n        s3_location="s3Location",\n        workspace_id="workspaceId",\n\n        # the properties below are optional\n        description="description",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role', 's3_location', 'workspace_id', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iottwinmaker.CfnWorkspaceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnComponentType_DataConnectorProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_DataConnectorPropertyDef]] = pydantic.Field(None)
    CfnComponentType_DataTypeProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_DataTypePropertyDef]] = pydantic.Field(None)
    CfnComponentType_DataValueProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_DataValuePropertyDef]] = pydantic.Field(None)
    CfnComponentType_ErrorProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_ErrorPropertyDef]] = pydantic.Field(None)
    CfnComponentType_FunctionProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_FunctionPropertyDef]] = pydantic.Field(None)
    CfnComponentType_LambdaFunctionProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_LambdaFunctionPropertyDef]] = pydantic.Field(None)
    CfnComponentType_PropertyDefinitionProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_PropertyDefinitionPropertyDef]] = pydantic.Field(None)
    CfnComponentType_PropertyGroupProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_PropertyGroupPropertyDef]] = pydantic.Field(None)
    CfnComponentType_RelationshipProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_RelationshipPropertyDef]] = pydantic.Field(None)
    CfnComponentType_RelationshipValueProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_RelationshipValuePropertyDef]] = pydantic.Field(None)
    CfnComponentType_StatusProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentType_StatusPropertyDef]] = pydantic.Field(None)
    CfnEntity_ComponentProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_ComponentPropertyDef]] = pydantic.Field(None)
    CfnEntity_DataTypeProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_DataTypePropertyDef]] = pydantic.Field(None)
    CfnEntity_DataValueProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_DataValuePropertyDef]] = pydantic.Field(None)
    CfnEntity_DefinitionProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_DefinitionPropertyDef]] = pydantic.Field(None)
    CfnEntity_ErrorProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_ErrorPropertyDef]] = pydantic.Field(None)
    CfnEntity_PropertyGroupProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_PropertyGroupPropertyDef]] = pydantic.Field(None)
    CfnEntity_PropertyProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_PropertyPropertyDef]] = pydantic.Field(None)
    CfnEntity_RelationshipProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_RelationshipPropertyDef]] = pydantic.Field(None)
    CfnEntity_RelationshipValueProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_RelationshipValuePropertyDef]] = pydantic.Field(None)
    CfnEntity_StatusProperty: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntity_StatusPropertyDef]] = pydantic.Field(None)
    CfnComponentType: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentTypeDef]] = pydantic.Field(None)
    CfnEntity: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntityDef]] = pydantic.Field(None)
    CfnScene: typing.Optional[dict[str, models.aws_iottwinmaker.CfnSceneDef]] = pydantic.Field(None)
    CfnSyncJob: typing.Optional[dict[str, models.aws_iottwinmaker.CfnSyncJobDef]] = pydantic.Field(None)
    CfnWorkspace: typing.Optional[dict[str, models.aws_iottwinmaker.CfnWorkspaceDef]] = pydantic.Field(None)
    CfnComponentTypeProps: typing.Optional[dict[str, models.aws_iottwinmaker.CfnComponentTypePropsDef]] = pydantic.Field(None)
    CfnEntityProps: typing.Optional[dict[str, models.aws_iottwinmaker.CfnEntityPropsDef]] = pydantic.Field(None)
    CfnSceneProps: typing.Optional[dict[str, models.aws_iottwinmaker.CfnScenePropsDef]] = pydantic.Field(None)
    CfnSyncJobProps: typing.Optional[dict[str, models.aws_iottwinmaker.CfnSyncJobPropsDef]] = pydantic.Field(None)
    CfnWorkspaceProps: typing.Optional[dict[str, models.aws_iottwinmaker.CfnWorkspacePropsDef]] = pydantic.Field(None)
    ...

import models
