from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_budgets.CfnBudget.AutoAdjustDataProperty
class CfnBudget_AutoAdjustDataPropertyDef(BaseStruct):
    auto_adjust_type: str = pydantic.Field(..., description='``CfnBudget.AutoAdjustDataProperty.AutoAdjustType``.')
    historical_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_HistoricalOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnBudget.AutoAdjustDataProperty.HistoricalOptions``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budget-autoadjustdata.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    auto_adjust_data_property = budgets.CfnBudget.AutoAdjustDataProperty(\n        auto_adjust_type="autoAdjustType",\n\n        # the properties below are optional\n        historical_options=budgets.CfnBudget.HistoricalOptionsProperty(\n            budget_adjustment_period=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auto_adjust_type', 'historical_options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget.AutoAdjustDataProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudget.BudgetDataProperty
class CfnBudget_BudgetDataPropertyDef(BaseStruct):
    budget_type: str = pydantic.Field(..., description='Specifies whether this budget tracks costs, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage.\n')
    time_unit: str = pydantic.Field(..., description='The length of time until a budget resets the actual and forecasted spend. ``DAILY`` is available only for ``RI_UTILIZATION`` and ``RI_COVERAGE`` budgets.\n')
    auto_adjust_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_AutoAdjustDataPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnBudget.BudgetDataProperty.AutoAdjustData``.\n')
    budget_limit: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_SpendPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage that you want to track with your budget. ``BudgetLimit`` is required for cost or usage budgets, but optional for RI or Savings Plans utilization or coverage budgets. RI and Savings Plans utilization or coverage budgets default to ``100`` . This is the only valid value for RI or Savings Plans utilization or coverage budgets. You can't use ``BudgetLimit`` with ``PlannedBudgetLimits`` for ``CreateBudget`` and ``UpdateBudget`` actions.\n")
    budget_name: typing.Optional[str] = pydantic.Field(None, description="The name of a budget. The value must be unique within an account. ``BudgetName`` can't include ``:`` and ``\\`` characters. If you don't include value for ``BudgetName`` in the template, Billing and Cost Management assigns your budget a randomly generated name.\n")
    cost_filters: typing.Any = pydantic.Field(None, description='The cost filters, such as ``Region`` , ``Service`` , ``member account`` , ``Tag`` , or ``Cost Category`` , that are applied to a budget. AWS Budgets supports the following services as a ``Service`` filter for RI budgets: - Amazon EC2 - Amazon Redshift - Amazon Relational Database Service - Amazon ElastiCache - Amazon OpenSearch Service\n')
    cost_types: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_CostTypesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The types of costs that are included in this ``COST`` budget. ``USAGE`` , ``RI_UTILIZATION`` , ``RI_COVERAGE`` , ``SAVINGS_PLANS_UTILIZATION`` , and ``SAVINGS_PLANS_COVERAGE`` budgets do not have ``CostTypes`` .\n')
    planned_budget_limits: typing.Any = pydantic.Field(None, description="A map containing multiple ``BudgetLimit`` , including current or future limits. ``PlannedBudgetLimits`` is available for cost or usage budget and supports both monthly and quarterly ``TimeUnit`` . For monthly budgets, provide 12 months of ``PlannedBudgetLimits`` values. This must start from the current month and include the next 11 months. The ``key`` is the start of the month, ``UTC`` in epoch seconds. For quarterly budgets, provide four quarters of ``PlannedBudgetLimits`` value entries in standard calendar quarter increments. This must start from the current quarter and include the next three quarters. The ``key`` is the start of the quarter, ``UTC`` in epoch seconds. If the planned budget expires before 12 months for monthly or four quarters for quarterly, provide the ``PlannedBudgetLimits`` values only for the remaining periods. If the budget begins at a date in the future, provide ``PlannedBudgetLimits`` values from the start date of the budget. After all of the ``BudgetLimit`` values in ``PlannedBudgetLimits`` are used, the budget continues to use the last limit as the ``BudgetLimit`` . At that point, the planned budget provides the same experience as a fixed budget. ``DescribeBudget`` and ``DescribeBudgets`` response along with ``PlannedBudgetLimits`` also contain ``BudgetLimit`` representing the current month or quarter limit present in ``PlannedBudgetLimits`` . This only applies to budgets that are created with ``PlannedBudgetLimits`` . Budgets that are created without ``PlannedBudgetLimits`` only contain ``BudgetLimit`` . They don't contain ``PlannedBudgetLimits`` .\n")
    time_period: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_TimePeriodPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The period of time that is covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. The start date for a budget. If you created your budget and didn\'t specify a start date, the start date defaults to the start of the chosen time period (MONTHLY, QUARTERLY, or ANNUALLY). For example, if you create your budget on January 24, 2019, choose ``MONTHLY`` , and don\'t set a start date, the start date defaults to ``01/01/19 00:00 UTC`` . The defaults are the same for the AWS Billing and Cost Management console and the API. You can change your start date with the ``UpdateBudget`` operation. After the end date, AWS deletes the budget and all associated notifications and subscribers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budget-budgetdata.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    # cost_filters: Any\n    # planned_budget_limits: Any\n\n    budget_data_property = budgets.CfnBudget.BudgetDataProperty(\n        budget_type="budgetType",\n        time_unit="timeUnit",\n\n        # the properties below are optional\n        auto_adjust_data=budgets.CfnBudget.AutoAdjustDataProperty(\n            auto_adjust_type="autoAdjustType",\n\n            # the properties below are optional\n            historical_options=budgets.CfnBudget.HistoricalOptionsProperty(\n                budget_adjustment_period=123\n            )\n        ),\n        budget_limit=budgets.CfnBudget.SpendProperty(\n            amount=123,\n            unit="unit"\n        ),\n        budget_name="budgetName",\n        cost_filters=cost_filters,\n        cost_types=budgets.CfnBudget.CostTypesProperty(\n            include_credit=False,\n            include_discount=False,\n            include_other_subscription=False,\n            include_recurring=False,\n            include_refund=False,\n            include_subscription=False,\n            include_support=False,\n            include_tax=False,\n            include_upfront=False,\n            use_amortized=False,\n            use_blended=False\n        ),\n        planned_budget_limits=planned_budget_limits,\n        time_period=budgets.CfnBudget.TimePeriodProperty(\n            end="end",\n            start="start"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['budget_type', 'time_unit', 'auto_adjust_data', 'budget_limit', 'budget_name', 'cost_filters', 'cost_types', 'planned_budget_limits', 'time_period']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget.BudgetDataProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudget.CostTypesProperty
class CfnBudget_CostTypesPropertyDef(BaseStruct):
    include_credit: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget includes credits. The default value is ``true`` .\n')
    include_discount: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget includes discounts. The default value is ``true`` .\n')
    include_other_subscription: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget includes non-RI subscription costs. The default value is ``true`` .\n')
    include_recurring: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget includes recurring fees such as monthly RI fees. The default value is ``true`` .\n')
    include_refund: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget includes refunds. The default value is ``true`` .\n')
    include_subscription: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget includes subscriptions. The default value is ``true`` .\n')
    include_support: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget includes support subscription fees. The default value is ``true`` .\n')
    include_tax: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget includes taxes. The default value is ``true`` .\n')
    include_upfront: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget includes upfront RI costs. The default value is ``true`` .\n')
    use_amortized: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget uses the amortized rate. The default value is ``false`` .\n')
    use_blended: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether a budget uses a blended rate. The default value is ``false`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budget-costtypes.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    cost_types_property = budgets.CfnBudget.CostTypesProperty(\n        include_credit=False,\n        include_discount=False,\n        include_other_subscription=False,\n        include_recurring=False,\n        include_refund=False,\n        include_subscription=False,\n        include_support=False,\n        include_tax=False,\n        include_upfront=False,\n        use_amortized=False,\n        use_blended=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['include_credit', 'include_discount', 'include_other_subscription', 'include_recurring', 'include_refund', 'include_subscription', 'include_support', 'include_tax', 'include_upfront', 'use_amortized', 'use_blended']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget.CostTypesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudget.HistoricalOptionsProperty
class CfnBudget_HistoricalOptionsPropertyDef(BaseStruct):
    budget_adjustment_period: typing.Union[int, float] = pydantic.Field(..., description='``CfnBudget.HistoricalOptionsProperty.BudgetAdjustmentPeriod``.')
    _init_params: typing.ClassVar[list[str]] = ['budget_adjustment_period']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget.HistoricalOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudget.NotificationProperty
class CfnBudget_NotificationPropertyDef(BaseStruct):
    comparison_operator: str = pydantic.Field(..., description="The comparison that's used for this notification.\n")
    notification_type: str = pydantic.Field(..., description="Specifies whether the notification is for how much you have spent ( ``ACTUAL`` ) or for how much that you're forecasted to spend ( ``FORECASTED`` ).\n")
    threshold: typing.Union[int, float] = pydantic.Field(..., description="The threshold that's associated with a notification. Thresholds are always a percentage, and many customers find value being alerted between 50% - 200% of the budgeted amount. The maximum limit for your threshold is 1,000,000% above the budgeted amount.\n")
    threshold_type: typing.Optional[str] = pydantic.Field(None, description='The type of threshold for a notification. For ``ABSOLUTE_VALUE`` thresholds, AWS notifies you when you go over or are forecasted to go over your total cost threshold. For ``PERCENTAGE`` thresholds, AWS notifies you when you go over or are forecasted to go over a certain percentage of your forecasted spend. For example, if you have a budget for 200 dollars and you have a ``PERCENTAGE`` threshold of 80%, AWS notifies you when you go over 160 dollars.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budget-notification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    notification_property = budgets.CfnBudget.NotificationProperty(\n        comparison_operator="comparisonOperator",\n        notification_type="notificationType",\n        threshold=123,\n\n        # the properties below are optional\n        threshold_type="thresholdType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison_operator', 'notification_type', 'threshold', 'threshold_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget.NotificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudget.NotificationWithSubscribersProperty
class CfnBudget_NotificationWithSubscribersPropertyDef(BaseStruct):
    notification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_NotificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description="The notification that's associated with a budget.\n")
    subscribers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_SubscriberPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of subscribers who are subscribed to this notification.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budget-notificationwithsubscribers.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    notification_with_subscribers_property = budgets.CfnBudget.NotificationWithSubscribersProperty(\n        notification=budgets.CfnBudget.NotificationProperty(\n            comparison_operator="comparisonOperator",\n            notification_type="notificationType",\n            threshold=123,\n\n            # the properties below are optional\n            threshold_type="thresholdType"\n        ),\n        subscribers=[budgets.CfnBudget.SubscriberProperty(\n            address="address",\n            subscription_type="subscriptionType"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['notification', 'subscribers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget.NotificationWithSubscribersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudget.SpendProperty
class CfnBudget_SpendPropertyDef(BaseStruct):
    amount: typing.Union[int, float] = pydantic.Field(..., description="The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold.\n")
    unit: str = pydantic.Field(..., description='The unit of measurement that\'s used for the budget forecast, actual spend, or budget threshold, such as USD or GBP.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budget-spend.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    spend_property = budgets.CfnBudget.SpendProperty(\n        amount=123,\n        unit="unit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['amount', 'unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget.SpendProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudget.SubscriberProperty
class CfnBudget_SubscriberPropertyDef(BaseStruct):
    address: str = pydantic.Field(..., description="The address that AWS sends budget notifications to, either an SNS topic or an email. When you create a subscriber, the value of ``Address`` can't contain line breaks.\n")
    subscription_type: str = pydantic.Field(..., description='The type of notification that AWS sends to a subscriber.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budget-subscriber.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    subscriber_property = budgets.CfnBudget.SubscriberProperty(\n        address="address",\n        subscription_type="subscriptionType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['address', 'subscription_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget.SubscriberProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudget.TimePeriodProperty
class CfnBudget_TimePeriodPropertyDef(BaseStruct):
    end: typing.Optional[str] = pydantic.Field(None, description="The end date for a budget. If you didn't specify an end date, AWS set your end date to ``06/15/87 00:00 UTC`` . The defaults are the same for the AWS Billing and Cost Management console and the API. After the end date, AWS deletes the budget and all the associated notifications and subscribers. You can change your end date with the ``UpdateBudget`` operation.\n")
    start: typing.Optional[str] = pydantic.Field(None, description='The start date for a budget. If you created your budget and didn\'t specify a start date, the start date defaults to the start of the chosen time period (MONTHLY, QUARTERLY, or ANNUALLY). For example, if you create your budget on January 24, 2019, choose ``MONTHLY`` , and don\'t set a start date, the start date defaults to ``01/01/19 00:00 UTC`` . The defaults are the same for the AWS Billing and Cost Management console and the API. You can change your start date with the ``UpdateBudget`` operation. Valid values depend on the value of ``BudgetType`` : - If ``BudgetType`` is ``COST`` or ``USAGE`` : Valid values are ``MONTHLY`` , ``QUARTERLY`` , and ``ANNUALLY`` . - If ``BudgetType`` is ``RI_UTILIZATION`` or ``RI_COVERAGE`` : Valid values are ``DAILY`` , ``MONTHLY`` , ``QUARTERLY`` , and ``ANNUALLY`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budget-timeperiod.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    time_period_property = budgets.CfnBudget.TimePeriodProperty(\n        end="end",\n        start="start"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end', 'start']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget.TimePeriodProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudgetsAction.ActionThresholdProperty
class CfnBudgetsAction_ActionThresholdPropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='The type of threshold for a notification.\n')
    value: typing.Union[int, float] = pydantic.Field(..., description='The threshold of a notification.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budgetsaction-actionthreshold.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    action_threshold_property = budgets.CfnBudgetsAction.ActionThresholdProperty(\n        type="type",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudgetsAction.ActionThresholdProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudgetsAction.DefinitionProperty
class CfnBudgetsAction_DefinitionPropertyDef(BaseStruct):
    iam_action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_IamActionDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The AWS Identity and Access Management ( IAM ) action definition details.\n')
    scp_action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_ScpActionDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The service control policies (SCP) action definition details.\n')
    ssm_action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_SsmActionDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon EC2 Systems Manager ( SSM ) action definition details.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budgetsaction-definition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    definition_property = budgets.CfnBudgetsAction.DefinitionProperty(\n        iam_action_definition=budgets.CfnBudgetsAction.IamActionDefinitionProperty(\n            policy_arn="policyArn",\n\n            # the properties below are optional\n            groups=["groups"],\n            roles=["roles"],\n            users=["users"]\n        ),\n        scp_action_definition=budgets.CfnBudgetsAction.ScpActionDefinitionProperty(\n            policy_id="policyId",\n            target_ids=["targetIds"]\n        ),\n        ssm_action_definition=budgets.CfnBudgetsAction.SsmActionDefinitionProperty(\n            instance_ids=["instanceIds"],\n            region="region",\n            subtype="subtype"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['iam_action_definition', 'scp_action_definition', 'ssm_action_definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudgetsAction.DefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudgetsAction.IamActionDefinitionProperty
class CfnBudgetsAction_IamActionDefinitionPropertyDef(BaseStruct):
    policy_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the policy to be attached.\n')
    groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of groups to be attached. There must be at least one group.\n')
    roles: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of roles to be attached. There must be at least one role.\n')
    users: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of users to be attached. There must be at least one user.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budgetsaction-iamactiondefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    iam_action_definition_property = budgets.CfnBudgetsAction.IamActionDefinitionProperty(\n        policy_arn="policyArn",\n\n        # the properties below are optional\n        groups=["groups"],\n        roles=["roles"],\n        users=["users"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['policy_arn', 'groups', 'roles', 'users']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudgetsAction.IamActionDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudgetsAction.ScpActionDefinitionProperty
class CfnBudgetsAction_ScpActionDefinitionPropertyDef(BaseStruct):
    policy_id: str = pydantic.Field(..., description='The policy ID attached.\n')
    target_ids: typing.Sequence[str] = pydantic.Field(..., description='A list of target IDs.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budgetsaction-scpactiondefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    scp_action_definition_property = budgets.CfnBudgetsAction.ScpActionDefinitionProperty(\n        policy_id="policyId",\n        target_ids=["targetIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['policy_id', 'target_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudgetsAction.ScpActionDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudgetsAction.SsmActionDefinitionProperty
class CfnBudgetsAction_SsmActionDefinitionPropertyDef(BaseStruct):
    instance_ids: typing.Sequence[str] = pydantic.Field(..., description='The EC2 and RDS instance IDs.\n')
    region: str = pydantic.Field(..., description='The Region to run the ( SSM ) document.\n')
    subtype: str = pydantic.Field(..., description='The action subType.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budgetsaction-ssmactiondefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    ssm_action_definition_property = budgets.CfnBudgetsAction.SsmActionDefinitionProperty(\n        instance_ids=["instanceIds"],\n        region="region",\n        subtype="subtype"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_ids', 'region', 'subtype']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudgetsAction.SsmActionDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudgetsAction.SubscriberProperty
class CfnBudgetsAction_SubscriberPropertyDef(BaseStruct):
    address: str = pydantic.Field(..., description="The address that AWS sends budget notifications to, either an SNS topic or an email. When you create a subscriber, the value of ``Address`` can't contain line breaks.\n")
    type: str = pydantic.Field(..., description='The type of notification that AWS sends to a subscriber.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-budgets-budgetsaction-subscriber.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    subscriber_property = budgets.CfnBudgetsAction.SubscriberProperty(\n        address="address",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['address', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudgetsAction.SubscriberProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudget
class CfnBudgetDef(BaseCfnResource):
    budget: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_BudgetDataPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The budget object that you want to create.\n')
    notifications_with_subscribers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_NotificationWithSubscribersPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your ``CreateBudget`` call, AWS creates the notifications and subscribers for you.')
    _init_params: typing.ClassVar[list[str]] = ['budget', 'notifications_with_subscribers']
    _method_names: typing.ClassVar[list[str]] = ['AutoAdjustDataProperty', 'BudgetDataProperty', 'CostTypesProperty', 'HistoricalOptionsProperty', 'NotificationProperty', 'NotificationWithSubscribersProperty', 'SpendProperty', 'SubscriberProperty', 'TimePeriodProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudget'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnBudgetDefConfig] = pydantic.Field(None)


class CfnBudgetDefConfig(pydantic.BaseModel):
    AutoAdjustDataProperty: typing.Optional[list[CfnBudgetDefAutoadjustdatapropertyParams]] = pydantic.Field(None, description='')
    BudgetDataProperty: typing.Optional[list[CfnBudgetDefBudgetdatapropertyParams]] = pydantic.Field(None, description='')
    CostTypesProperty: typing.Optional[list[CfnBudgetDefCosttypespropertyParams]] = pydantic.Field(None, description='')
    HistoricalOptionsProperty: typing.Optional[list[CfnBudgetDefHistoricaloptionspropertyParams]] = pydantic.Field(None, description='')
    NotificationProperty: typing.Optional[list[CfnBudgetDefNotificationpropertyParams]] = pydantic.Field(None, description='')
    NotificationWithSubscribersProperty: typing.Optional[list[CfnBudgetDefNotificationwithsubscriberspropertyParams]] = pydantic.Field(None, description='')
    SpendProperty: typing.Optional[list[CfnBudgetDefSpendpropertyParams]] = pydantic.Field(None, description='')
    SubscriberProperty: typing.Optional[list[CfnBudgetDefSubscriberpropertyParams]] = pydantic.Field(None, description='')
    TimePeriodProperty: typing.Optional[list[CfnBudgetDefTimeperiodpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnBudgetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnBudgetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnBudgetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnBudgetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnBudgetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnBudgetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnBudgetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnBudgetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnBudgetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnBudgetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnBudgetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnBudgetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnBudgetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnBudgetDefAutoadjustdatapropertyParams(pydantic.BaseModel):
    auto_adjust_type: str = pydantic.Field(..., description='')
    historical_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_HistoricalOptionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBudgetDefBudgetdatapropertyParams(pydantic.BaseModel):
    budget_type: str = pydantic.Field(..., description='')
    time_unit: str = pydantic.Field(..., description='')
    auto_adjust_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_AutoAdjustDataPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    budget_limit: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_SpendPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    budget_name: typing.Optional[str] = pydantic.Field(None, description='')
    cost_filters: typing.Any = pydantic.Field(None, description='')
    cost_types: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_CostTypesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    planned_budget_limits: typing.Any = pydantic.Field(None, description='')
    time_period: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_TimePeriodPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBudgetDefCosttypespropertyParams(pydantic.BaseModel):
    include_credit: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_discount: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_other_subscription: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_recurring: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_refund: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_subscription: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_support: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_tax: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_upfront: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    use_amortized: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    use_blended: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnBudgetDefHistoricaloptionspropertyParams(pydantic.BaseModel):
    budget_adjustment_period: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnBudgetDefNotificationpropertyParams(pydantic.BaseModel):
    comparison_operator: str = pydantic.Field(..., description='')
    notification_type: str = pydantic.Field(..., description='')
    threshold: typing.Union[int, float] = pydantic.Field(..., description='')
    threshold_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBudgetDefNotificationwithsubscriberspropertyParams(pydantic.BaseModel):
    notification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_NotificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    subscribers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_SubscriberPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnBudgetDefSpendpropertyParams(pydantic.BaseModel):
    amount: typing.Union[int, float] = pydantic.Field(..., description='')
    unit: str = pydantic.Field(..., description='')
    ...

class CfnBudgetDefSubscriberpropertyParams(pydantic.BaseModel):
    address: str = pydantic.Field(..., description='')
    subscription_type: str = pydantic.Field(..., description='')
    ...

class CfnBudgetDefTimeperiodpropertyParams(pydantic.BaseModel):
    end: typing.Optional[str] = pydantic.Field(None, description='')
    start: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnBudgetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnBudgetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBudgetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnBudgetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBudgetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnBudgetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnBudgetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnBudgetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnBudgetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnBudgetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBudgetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnBudgetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnBudgetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBudgetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_budgets.CfnBudgetsAction
class CfnBudgetsActionDef(BaseCfnResource):
    action_threshold: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_ActionThresholdPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The trigger threshold of the action.\n')
    action_type: str = pydantic.Field(..., description='The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.\n')
    budget_name: str = pydantic.Field(..., description='A string that represents the budget name. ":" and "" characters aren\'t allowed.\n')
    definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_DefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Specifies all of the type-specific parameters.\n')
    execution_role_arn: str = pydantic.Field(..., description='The role passed for action execution and reversion. Roles and actions must be in the same account.\n')
    notification_type: str = pydantic.Field(..., description='The type of a notification.\n')
    subscribers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_SubscriberPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of subscribers.\n')
    approval_model: typing.Optional[str] = pydantic.Field(None, description='This specifies if the action needs manual or automatic approval.')
    _init_params: typing.ClassVar[list[str]] = ['action_threshold', 'action_type', 'budget_name', 'definition', 'execution_role_arn', 'notification_type', 'subscribers', 'approval_model']
    _method_names: typing.ClassVar[list[str]] = ['ActionThresholdProperty', 'DefinitionProperty', 'IamActionDefinitionProperty', 'ScpActionDefinitionProperty', 'SsmActionDefinitionProperty', 'SubscriberProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudgetsAction'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnBudgetsActionDefConfig] = pydantic.Field(None)


class CfnBudgetsActionDefConfig(pydantic.BaseModel):
    ActionThresholdProperty: typing.Optional[list[CfnBudgetsActionDefActionthresholdpropertyParams]] = pydantic.Field(None, description='')
    DefinitionProperty: typing.Optional[list[CfnBudgetsActionDefDefinitionpropertyParams]] = pydantic.Field(None, description='')
    IamActionDefinitionProperty: typing.Optional[list[CfnBudgetsActionDefIamactiondefinitionpropertyParams]] = pydantic.Field(None, description='')
    ScpActionDefinitionProperty: typing.Optional[list[CfnBudgetsActionDefScpactiondefinitionpropertyParams]] = pydantic.Field(None, description='')
    SsmActionDefinitionProperty: typing.Optional[list[CfnBudgetsActionDefSsmactiondefinitionpropertyParams]] = pydantic.Field(None, description='')
    SubscriberProperty: typing.Optional[list[CfnBudgetsActionDefSubscriberpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnBudgetsActionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnBudgetsActionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnBudgetsActionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnBudgetsActionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnBudgetsActionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnBudgetsActionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnBudgetsActionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnBudgetsActionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnBudgetsActionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnBudgetsActionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnBudgetsActionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnBudgetsActionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnBudgetsActionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnBudgetsActionDefActionthresholdpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    value: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnBudgetsActionDefDefinitionpropertyParams(pydantic.BaseModel):
    iam_action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_IamActionDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    scp_action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_ScpActionDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ssm_action_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_SsmActionDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnBudgetsActionDefIamactiondefinitionpropertyParams(pydantic.BaseModel):
    policy_arn: str = pydantic.Field(..., description='')
    groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    roles: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    users: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnBudgetsActionDefScpactiondefinitionpropertyParams(pydantic.BaseModel):
    policy_id: str = pydantic.Field(..., description='')
    target_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnBudgetsActionDefSsmactiondefinitionpropertyParams(pydantic.BaseModel):
    instance_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    region: str = pydantic.Field(..., description='')
    subtype: str = pydantic.Field(..., description='')
    ...

class CfnBudgetsActionDefSubscriberpropertyParams(pydantic.BaseModel):
    address: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnBudgetsActionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnBudgetsActionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBudgetsActionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnBudgetsActionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBudgetsActionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnBudgetsActionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnBudgetsActionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnBudgetsActionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnBudgetsActionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnBudgetsActionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBudgetsActionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnBudgetsActionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnBudgetsActionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBudgetsActionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_budgets.CfnBudgetProps
class CfnBudgetPropsDef(BaseCfnProperty):
    budget: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_BudgetDataPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The budget object that you want to create.\n')
    notifications_with_subscribers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudget_NotificationWithSubscribersPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your ``CreateBudget`` call, AWS creates the notifications and subscribers for you.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-budgets-budget.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    # cost_filters: Any\n    # planned_budget_limits: Any\n\n    cfn_budget_props = budgets.CfnBudgetProps(\n        budget=budgets.CfnBudget.BudgetDataProperty(\n            budget_type="budgetType",\n            time_unit="timeUnit",\n\n            # the properties below are optional\n            auto_adjust_data=budgets.CfnBudget.AutoAdjustDataProperty(\n                auto_adjust_type="autoAdjustType",\n\n                # the properties below are optional\n                historical_options=budgets.CfnBudget.HistoricalOptionsProperty(\n                    budget_adjustment_period=123\n                )\n            ),\n            budget_limit=budgets.CfnBudget.SpendProperty(\n                amount=123,\n                unit="unit"\n            ),\n            budget_name="budgetName",\n            cost_filters=cost_filters,\n            cost_types=budgets.CfnBudget.CostTypesProperty(\n                include_credit=False,\n                include_discount=False,\n                include_other_subscription=False,\n                include_recurring=False,\n                include_refund=False,\n                include_subscription=False,\n                include_support=False,\n                include_tax=False,\n                include_upfront=False,\n                use_amortized=False,\n                use_blended=False\n            ),\n            planned_budget_limits=planned_budget_limits,\n            time_period=budgets.CfnBudget.TimePeriodProperty(\n                end="end",\n                start="start"\n            )\n        ),\n\n        # the properties below are optional\n        notifications_with_subscribers=[budgets.CfnBudget.NotificationWithSubscribersProperty(\n            notification=budgets.CfnBudget.NotificationProperty(\n                comparison_operator="comparisonOperator",\n                notification_type="notificationType",\n                threshold=123,\n\n                # the properties below are optional\n                threshold_type="thresholdType"\n            ),\n            subscribers=[budgets.CfnBudget.SubscriberProperty(\n                address="address",\n                subscription_type="subscriptionType"\n            )]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['budget', 'notifications_with_subscribers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudgetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_budgets.CfnBudgetsActionProps
class CfnBudgetsActionPropsDef(BaseCfnProperty):
    action_threshold: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_ActionThresholdPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The trigger threshold of the action.\n')
    action_type: str = pydantic.Field(..., description='The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.\n')
    budget_name: str = pydantic.Field(..., description='A string that represents the budget name. ":" and "" characters aren\'t allowed.\n')
    definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_DefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Specifies all of the type-specific parameters.\n')
    execution_role_arn: str = pydantic.Field(..., description='The role passed for action execution and reversion. Roles and actions must be in the same account.\n')
    notification_type: str = pydantic.Field(..., description='The type of a notification.\n')
    subscribers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_budgets.CfnBudgetsAction_SubscriberPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of subscribers.\n')
    approval_model: typing.Optional[str] = pydantic.Field(None, description='This specifies if the action needs manual or automatic approval.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-budgets-budgetsaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_budgets as budgets\n\n    cfn_budgets_action_props = budgets.CfnBudgetsActionProps(\n        action_threshold=budgets.CfnBudgetsAction.ActionThresholdProperty(\n            type="type",\n            value=123\n        ),\n        action_type="actionType",\n        budget_name="budgetName",\n        definition=budgets.CfnBudgetsAction.DefinitionProperty(\n            iam_action_definition=budgets.CfnBudgetsAction.IamActionDefinitionProperty(\n                policy_arn="policyArn",\n\n                # the properties below are optional\n                groups=["groups"],\n                roles=["roles"],\n                users=["users"]\n            ),\n            scp_action_definition=budgets.CfnBudgetsAction.ScpActionDefinitionProperty(\n                policy_id="policyId",\n                target_ids=["targetIds"]\n            ),\n            ssm_action_definition=budgets.CfnBudgetsAction.SsmActionDefinitionProperty(\n                instance_ids=["instanceIds"],\n                region="region",\n                subtype="subtype"\n            )\n        ),\n        execution_role_arn="executionRoleArn",\n        notification_type="notificationType",\n        subscribers=[budgets.CfnBudgetsAction.SubscriberProperty(\n            address="address",\n            type="type"\n        )],\n\n        # the properties below are optional\n        approval_model="approvalModel"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action_threshold', 'action_type', 'budget_name', 'definition', 'execution_role_arn', 'notification_type', 'subscribers', 'approval_model']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_budgets.CfnBudgetsActionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnBudget_AutoAdjustDataProperty: typing.Optional[dict[str, CfnBudget_AutoAdjustDataPropertyDef]] = pydantic.Field(None)
    CfnBudget_BudgetDataProperty: typing.Optional[dict[str, CfnBudget_BudgetDataPropertyDef]] = pydantic.Field(None)
    CfnBudget_CostTypesProperty: typing.Optional[dict[str, CfnBudget_CostTypesPropertyDef]] = pydantic.Field(None)
    CfnBudget_HistoricalOptionsProperty: typing.Optional[dict[str, CfnBudget_HistoricalOptionsPropertyDef]] = pydantic.Field(None)
    CfnBudget_NotificationProperty: typing.Optional[dict[str, CfnBudget_NotificationPropertyDef]] = pydantic.Field(None)
    CfnBudget_NotificationWithSubscribersProperty: typing.Optional[dict[str, CfnBudget_NotificationWithSubscribersPropertyDef]] = pydantic.Field(None)
    CfnBudget_SpendProperty: typing.Optional[dict[str, CfnBudget_SpendPropertyDef]] = pydantic.Field(None)
    CfnBudget_SubscriberProperty: typing.Optional[dict[str, CfnBudget_SubscriberPropertyDef]] = pydantic.Field(None)
    CfnBudget_TimePeriodProperty: typing.Optional[dict[str, CfnBudget_TimePeriodPropertyDef]] = pydantic.Field(None)
    CfnBudgetsAction_ActionThresholdProperty: typing.Optional[dict[str, CfnBudgetsAction_ActionThresholdPropertyDef]] = pydantic.Field(None)
    CfnBudgetsAction_DefinitionProperty: typing.Optional[dict[str, CfnBudgetsAction_DefinitionPropertyDef]] = pydantic.Field(None)
    CfnBudgetsAction_IamActionDefinitionProperty: typing.Optional[dict[str, CfnBudgetsAction_IamActionDefinitionPropertyDef]] = pydantic.Field(None)
    CfnBudgetsAction_ScpActionDefinitionProperty: typing.Optional[dict[str, CfnBudgetsAction_ScpActionDefinitionPropertyDef]] = pydantic.Field(None)
    CfnBudgetsAction_SsmActionDefinitionProperty: typing.Optional[dict[str, CfnBudgetsAction_SsmActionDefinitionPropertyDef]] = pydantic.Field(None)
    CfnBudgetsAction_SubscriberProperty: typing.Optional[dict[str, CfnBudgetsAction_SubscriberPropertyDef]] = pydantic.Field(None)
    CfnBudget: typing.Optional[dict[str, CfnBudgetDef]] = pydantic.Field(None)
    CfnBudgetsAction: typing.Optional[dict[str, CfnBudgetsActionDef]] = pydantic.Field(None)
    CfnBudgetProps: typing.Optional[dict[str, CfnBudgetPropsDef]] = pydantic.Field(None)
    CfnBudgetsActionProps: typing.Optional[dict[str, CfnBudgetsActionPropsDef]] = pydantic.Field(None)
    ...
