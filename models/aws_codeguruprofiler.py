from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_codeguruprofiler.ProfilingGroup
class ProfilingGroupDef(BaseConstruct):
    compute_platform: typing.Optional[aws_cdk.aws_codeguruprofiler.ComputePlatform] = pydantic.Field(None, description='The compute platform of the profiling group. Default: ComputePlatform.DEFAULT\n')
    profiling_group_name: typing.Optional[str] = pydantic.Field(None, description='A name for the profiling group. Default: - automatically generated name.')
    _init_params: typing.ClassVar[list[str]] = ['compute_platform', 'profiling_group_name']
    _method_names: typing.ClassVar[list[str]] = ['apply_removal_policy', 'grant_publish', 'grant_read']
    _classmethod_names: typing.ClassVar[list[str]] = ['from_profiling_group_arn', 'from_profiling_group_name']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_codeguruprofiler.ProfilingGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_profiling_group_arn', 'from_profiling_group_name']
    ...


    from_profiling_group_arn: typing.Optional[models.aws_codeguruprofiler.ProfilingGroupDefFromProfilingGroupArnParams] = pydantic.Field(None, description='Import an existing Profiling Group provided an ARN.')
    from_profiling_group_name: typing.Optional[models.aws_codeguruprofiler.ProfilingGroupDefFromProfilingGroupNameParams] = pydantic.Field(None, description='Import an existing Profiling Group provided a Profiling Group Name.')
    resource_config: typing.Optional[models.aws_codeguruprofiler.ProfilingGroupDefConfig] = pydantic.Field(None)


class ProfilingGroupDefConfig(pydantic.BaseModel):
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    grant_publish: typing.Optional[list[models.aws_codeguruprofiler.ProfilingGroupDefGrantPublishParams]] = pydantic.Field(None, description='Grant access to publish profiling information to the Profiling Group to the given identity.\nThis will grant the following permissions:\n\n- codeguru-profiler:ConfigureAgent\n- codeguru-profiler:PostAgentProfile')
    grant_read: typing.Optional[list[models.aws_codeguruprofiler.ProfilingGroupDefGrantReadParams]] = pydantic.Field(None, description='Grant access to read profiling information from the Profiling Group to the given identity.\nThis will grant the following permissions:\n\n- codeguru-profiler:GetProfile\n- codeguru-profiler:DescribeProfilingGroup')

class ProfilingGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: aws_cdk.RemovalPolicy = pydantic.Field(..., description='-')
    ...

class ProfilingGroupDefFromProfilingGroupArnParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The parent creating construct.\n')
    id: str = pydantic.Field(..., description="The construct's name.\n")
    profiling_group_arn: str = pydantic.Field(..., description='Profiling Group ARN.')
    ...

class ProfilingGroupDefFromProfilingGroupNameParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='The parent creating construct.\n')
    id: str = pydantic.Field(..., description="The construct's name.\n")
    profiling_group_name: str = pydantic.Field(..., description='Profiling Group Name.')
    ...

class ProfilingGroupDefGrantPublishParams(pydantic.BaseModel):
    grantee: models.AnyResource = pydantic.Field(..., description='Principal to grant publish rights to.')
    return_config: typing.Optional[list[models.aws_iam.GrantDefConfig]] = pydantic.Field(None)
    ...

class ProfilingGroupDefGrantReadParams(pydantic.BaseModel):
    grantee: models.AnyResource = pydantic.Field(..., description='Principal to grant read rights to.')
    return_config: typing.Optional[list[models.aws_iam.GrantDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_codeguruprofiler.CfnProfilingGroup.AgentPermissionsProperty
class CfnProfilingGroup_AgentPermissionsPropertyDef(BaseStruct):
    principals: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The principals for the agent permissions.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codeguruprofiler-profilinggroup-agentpermissions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_codeguruprofiler as codeguruprofiler\n\n    agent_permissions_property = codeguruprofiler.CfnProfilingGroup.AgentPermissionsProperty(\n        principals=["principals"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['principals']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_codeguruprofiler.CfnProfilingGroup.AgentPermissionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_codeguruprofiler.CfnProfilingGroup.ChannelProperty
class CfnProfilingGroup_ChannelPropertyDef(BaseStruct):
    channel_uri: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The channel URI.\n')
    channel_id: typing.Optional[str] = pydantic.Field(None, description='The channel ID.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codeguruprofiler-profilinggroup-channel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_codeguruprofiler as codeguruprofiler\n\n    channel_property = codeguruprofiler.CfnProfilingGroup.ChannelProperty(\n        channel_uri="channelUri",\n\n        # the properties below are optional\n        channel_id="channelId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_uri', 'channel_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_codeguruprofiler.CfnProfilingGroup.ChannelProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_codeguruprofiler.ProfilingGroupProps
class ProfilingGroupPropsDef(BaseStruct):
    compute_platform: typing.Optional[aws_cdk.aws_codeguruprofiler.ComputePlatform] = pydantic.Field(None, description='The compute platform of the profiling group. Default: ComputePlatform.DEFAULT\n')
    profiling_group_name: typing.Optional[str] = pydantic.Field(None, description='A name for the profiling group. Default: - automatically generated name.\n\n:exampleMetadata: infused\n\nExample::\n\n    profiling_group = codeguruprofiler.ProfilingGroup(self, "MyProfilingGroup",\n        compute_platform=codeguruprofiler.ComputePlatform.AWS_LAMBDA\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['compute_platform', 'profiling_group_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_codeguruprofiler.ProfilingGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_codeguruprofiler.ComputePlatform
# skipping emum

#  autogenerated from aws_cdk.aws_codeguruprofiler.IProfilingGroup
#  skipping Interface

#  autogenerated from aws_cdk.aws_codeguruprofiler.CfnProfilingGroup
class CfnProfilingGroupDef(BaseCfnResource):
    profiling_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the profiling group.\n')
    agent_permissions: typing.Any = pydantic.Field(None, description='The agent permissions attached to this profiling group. This action group grants ``ConfigureAgent`` and ``PostAgentProfile`` permissions to perform actions required by the profiling agent. The Json consists of key ``Principals`` . *Principals* : A list of string ARNs for the roles and users you want to grant access to the profiling group. Wildcards are not supported in the ARNs. You are allowed to provide up to 50 ARNs. An empty list is not permitted. This is a required key. For more information, see `Resource-based policies in CodeGuru Profiler <https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html>`_ in the *Amazon CodeGuru Profiler user guide* , `ConfigureAgent <https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html>`_ , and `PostAgentProfile <https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html>`_ .\n')
    anomaly_detection_notification_configuration: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_codeguruprofiler.CfnProfilingGroup_ChannelPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Adds anomaly notifications for a profiling group.\n')
    compute_platform: typing.Optional[str] = pydantic.Field(None, description='The compute platform of the profiling group. Use ``AWSLambda`` if your application runs on AWS Lambda. Use ``Default`` if your application runs on a compute platform that is not AWS Lambda , such an Amazon EC2 instance, an on-premises server, or a different platform. If not specified, ``Default`` is used. This property is immutable.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of tags to add to the created profiling group.')
    _init_params: typing.ClassVar[list[str]] = ['profiling_group_name', 'agent_permissions', 'anomaly_detection_notification_configuration', 'compute_platform', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AgentPermissionsProperty', 'ChannelProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_codeguruprofiler.CfnProfilingGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_codeguruprofiler.CfnProfilingGroupDefConfig] = pydantic.Field(None)


class CfnProfilingGroupDefConfig(pydantic.BaseModel):
    AgentPermissionsProperty: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefAgentpermissionspropertyParams]] = pydantic.Field(None, description='')
    ChannelProperty: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefChannelpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_codeguruprofiler.CfnProfilingGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnProfilingGroupDefAgentpermissionspropertyParams(pydantic.BaseModel):
    principals: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnProfilingGroupDefChannelpropertyParams(pydantic.BaseModel):
    channel_uri: str = pydantic.Field(..., description='')
    channel_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnProfilingGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnProfilingGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProfilingGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnProfilingGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProfilingGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnProfilingGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnProfilingGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnProfilingGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnProfilingGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnProfilingGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProfilingGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnProfilingGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnProfilingGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProfilingGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_codeguruprofiler.CfnProfilingGroupProps
class CfnProfilingGroupPropsDef(BaseCfnProperty):
    profiling_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the profiling group.\n')
    agent_permissions: typing.Any = pydantic.Field(None, description='The agent permissions attached to this profiling group. This action group grants ``ConfigureAgent`` and ``PostAgentProfile`` permissions to perform actions required by the profiling agent. The Json consists of key ``Principals`` . *Principals* : A list of string ARNs for the roles and users you want to grant access to the profiling group. Wildcards are not supported in the ARNs. You are allowed to provide up to 50 ARNs. An empty list is not permitted. This is a required key. For more information, see `Resource-based policies in CodeGuru Profiler <https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html>`_ in the *Amazon CodeGuru Profiler user guide* , `ConfigureAgent <https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html>`_ , and `PostAgentProfile <https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html>`_ .\n')
    anomaly_detection_notification_configuration: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_codeguruprofiler.CfnProfilingGroup_ChannelPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Adds anomaly notifications for a profiling group.\n')
    compute_platform: typing.Optional[str] = pydantic.Field(None, description='The compute platform of the profiling group. Use ``AWSLambda`` if your application runs on AWS Lambda. Use ``Default`` if your application runs on a compute platform that is not AWS Lambda , such an Amazon EC2 instance, an on-premises server, or a different platform. If not specified, ``Default`` is used. This property is immutable.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of tags to add to the created profiling group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codeguruprofiler-profilinggroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_codeguruprofiler as codeguruprofiler\n\n    # agent_permissions: Any\n\n    cfn_profiling_group_props = codeguruprofiler.CfnProfilingGroupProps(\n        profiling_group_name="profilingGroupName",\n\n        # the properties below are optional\n        agent_permissions=agent_permissions,\n        anomaly_detection_notification_configuration=[codeguruprofiler.CfnProfilingGroup.ChannelProperty(\n            channel_uri="channelUri",\n\n            # the properties below are optional\n            channel_id="channelId"\n        )],\n        compute_platform="computePlatform",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['profiling_group_name', 'agent_permissions', 'anomaly_detection_notification_configuration', 'compute_platform', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_codeguruprofiler.CfnProfilingGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    ProfilingGroup: typing.Optional[dict[str, models.aws_codeguruprofiler.ProfilingGroupDef]] = pydantic.Field(None)
    CfnProfilingGroup_AgentPermissionsProperty: typing.Optional[dict[str, models.aws_codeguruprofiler.CfnProfilingGroup_AgentPermissionsPropertyDef]] = pydantic.Field(None)
    CfnProfilingGroup_ChannelProperty: typing.Optional[dict[str, models.aws_codeguruprofiler.CfnProfilingGroup_ChannelPropertyDef]] = pydantic.Field(None)
    ProfilingGroupProps: typing.Optional[dict[str, models.aws_codeguruprofiler.ProfilingGroupPropsDef]] = pydantic.Field(None)
    CfnProfilingGroup: typing.Optional[dict[str, models.aws_codeguruprofiler.CfnProfilingGroupDef]] = pydantic.Field(None)
    CfnProfilingGroupProps: typing.Optional[dict[str, models.aws_codeguruprofiler.CfnProfilingGroupPropsDef]] = pydantic.Field(None)
    ...

import models
