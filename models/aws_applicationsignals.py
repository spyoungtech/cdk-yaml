from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.CalendarIntervalProperty
class CfnServiceLevelObjective_CalendarIntervalPropertyDef(BaseStruct):
    duration: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the duration of each calendar interval. For example, if ``Duration`` is ``1`` and ``DurationUnit`` is ``MONTH`` , each interval is one month, aligned with the calendar.\n')
    duration_unit: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the calendar interval unit.\n')
    start_time: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The date and time when you want the first interval to start. Be sure to choose a time that configures the intervals the way that you want. For example, if you want weekly intervals starting on Mondays at 6 a.m., be sure to specify a start time that is a Monday at 6 a.m. When used in a raw HTTP Query API, it is formatted as be epoch time in seconds. For example: ``1698778057`` As soon as one calendar interval ends, another automatically begins.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-calendarinterval.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    calendar_interval_property = applicationsignals.CfnServiceLevelObjective.CalendarIntervalProperty(\n        duration=123,\n        duration_unit="durationUnit",\n        start_time=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['duration', 'duration_unit', 'start_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.CalendarIntervalProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.DimensionProperty
class CfnServiceLevelObjective_DimensionPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the dimension. Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon ( ``:`` ). ASCII control characters are not supported as part of dimension names.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character. ASCII control characters are not supported as part of dimension values.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-dimension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    dimension_property = applicationsignals.CfnServiceLevelObjective.DimensionProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.DimensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.GoalProperty
class CfnServiceLevelObjective_GoalPropertyDef(BaseStruct):
    attainment_goal: typing.Union[int, float, None] = pydantic.Field(None, description='The threshold that determines if the goal is being met. An *attainment goal* is the ratio of good periods that meet the threshold requirements to the total periods within the interval. For example, an attainment goal of 99.9% means that within your interval, you are targeting 99.9% of the periods to be in healthy state. If you omit this parameter, 99 is used to represent 99% as the attainment goal.\n')
    interval: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_IntervalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval. If you omit this parameter, a rolling interval of 7 days is used.\n')
    warning_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='The percentage of remaining budget over total budget that you want to get warnings for. If you omit this parameter, the default of 50.0 is used.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-goal.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    goal_property = applicationsignals.CfnServiceLevelObjective.GoalProperty(\n        attainment_goal=123,\n        interval=applicationsignals.CfnServiceLevelObjective.IntervalProperty(\n            calendar_interval=applicationsignals.CfnServiceLevelObjective.CalendarIntervalProperty(\n                duration=123,\n                duration_unit="durationUnit",\n                start_time=123\n            ),\n            rolling_interval=applicationsignals.CfnServiceLevelObjective.RollingIntervalProperty(\n                duration=123,\n                duration_unit="durationUnit"\n            )\n        ),\n        warning_threshold=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attainment_goal', 'interval', 'warning_threshold']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.GoalProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.IntervalProperty
class CfnServiceLevelObjective_IntervalPropertyDef(BaseStruct):
    calendar_interval: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_CalendarIntervalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If the interval is a calendar interval, this structure contains the interval specifications.\n')
    rolling_interval: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_RollingIntervalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If the interval is a rolling interval, this structure contains the interval specifications.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-interval.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    interval_property = applicationsignals.CfnServiceLevelObjective.IntervalProperty(\n        calendar_interval=applicationsignals.CfnServiceLevelObjective.CalendarIntervalProperty(\n            duration=123,\n            duration_unit="durationUnit",\n            start_time=123\n        ),\n        rolling_interval=applicationsignals.CfnServiceLevelObjective.RollingIntervalProperty(\n            duration=123,\n            duration_unit="durationUnit"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['calendar_interval', 'rolling_interval']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.IntervalProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.MetricDataQueryProperty
class CfnServiceLevelObjective_MetricDataQueryPropertyDef(BaseStruct):
    account_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the account where this metric is located. If you are performing this operation in a monitoring account, use this to specify which source account to retrieve this metric from.\n')
    expression: typing.Optional[str] = pydantic.Field(None, description='This field can contain a metric math expression to be performed on the other metrics that you are retrieving within this ``MetricDataQueries`` structure. A math expression can use the ``Id`` of the other metrics or queries to refer to those metrics, and can also use the ``Id`` of other expressions to use the result of those expressions. For more information about metric math expressions, see `Metric Math Syntax and Functions <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax>`_ in the *Amazon CloudWatch User Guide* . Within each ``MetricDataQuery`` object, you must specify either ``Expression`` or ``MetricStat`` but not both.\n')
    metric_stat: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_MetricStatPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A metric to be used directly for the SLO, or to be used in the math expression that will be used for the SLO. Within one ``MetricDataQuery`` object, you must specify either ``Expression`` or ``MetricStat`` but not both.\n')
    return_data: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Use this only if you are using a metric math expression for the SLO. Specify ``true`` for ``ReturnData`` for only the one expression result to use as the alarm. For all other metrics and expressions in the same ``CreateServiceLevelObjective`` operation, specify ``ReturnData`` as ``false`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-metricdataquery.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    metric_data_query_property = applicationsignals.CfnServiceLevelObjective.MetricDataQueryProperty(\n        id="id",\n\n        # the properties below are optional\n        account_id="accountId",\n        expression="expression",\n        metric_stat=applicationsignals.CfnServiceLevelObjective.MetricStatProperty(\n            metric=applicationsignals.CfnServiceLevelObjective.MetricProperty(\n                dimensions=[applicationsignals.CfnServiceLevelObjective.DimensionProperty(\n                    name="name",\n                    value="value"\n                )],\n                metric_name="metricName",\n                namespace="namespace"\n            ),\n            period=123,\n            stat="stat",\n\n            # the properties below are optional\n            unit="unit"\n        ),\n        return_data=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['account_id', 'expression', 'metric_stat', 'return_data']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.MetricDataQueryProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.MetricProperty
class CfnServiceLevelObjective_MetricPropertyDef(BaseStruct):
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_DimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of one or more dimensions to use to define the metric that you want to use. For more information, see `Dimensions <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension>`_ .\n')
    metric_name: typing.Optional[str] = pydantic.Field(None, description='The name of the metric to use.\n')
    namespace: typing.Optional[str] = pydantic.Field(None, description='The namespace of the metric. For more information, see `Namespaces <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-metric.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    metric_property = applicationsignals.CfnServiceLevelObjective.MetricProperty(\n        dimensions=[applicationsignals.CfnServiceLevelObjective.DimensionProperty(\n            name="name",\n            value="value"\n        )],\n        metric_name="metricName",\n        namespace="namespace"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dimensions', 'metric_name', 'namespace']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.MetricProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.MetricStatProperty
class CfnServiceLevelObjective_MetricStatPropertyDef(BaseStruct):
    metric: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_MetricPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The metric to use as the service level indicator, including the metric name, namespace, and dimensions.\n')
    period: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The granularity, in seconds, to be used for the metric. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second.\n')
    stat: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic. For more information about statistics, see `CloudWatch statistics definitions <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html>`_ .\n')
    unit: typing.Optional[str] = pydantic.Field(None, description='If you omit ``Unit`` then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-metricstat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    metric_stat_property = applicationsignals.CfnServiceLevelObjective.MetricStatProperty(\n        metric=applicationsignals.CfnServiceLevelObjective.MetricProperty(\n            dimensions=[applicationsignals.CfnServiceLevelObjective.DimensionProperty(\n                name="name",\n                value="value"\n            )],\n            metric_name="metricName",\n            namespace="namespace"\n        ),\n        period=123,\n        stat="stat",\n\n        # the properties below are optional\n        unit="unit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['metric', 'period', 'stat', 'unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.MetricStatProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.RollingIntervalProperty
class CfnServiceLevelObjective_RollingIntervalPropertyDef(BaseStruct):
    duration: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the duration of each rolling interval. For example, if ``Duration`` is ``7`` and ``DurationUnit`` is ``DAY`` , each rolling interval is seven days.\n')
    duration_unit: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the rolling interval unit.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-rollinginterval.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    rolling_interval_property = applicationsignals.CfnServiceLevelObjective.RollingIntervalProperty(\n        duration=123,\n        duration_unit="durationUnit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['duration', 'duration_unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.RollingIntervalProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.SliMetricProperty
class CfnServiceLevelObjective_SliMetricPropertyDef(BaseStruct):
    key_attributes: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the ``Type`` , ``Name`` , and ``Environment`` attributes. This is a string-to-string map. It can include the following fields. - ``Type`` designates the type of object this is. - ``ResourceType`` specifies the type of the resource. This field is used only when the value of the ``Type`` field is ``Resource`` or ``AWS::Resource`` . - ``Name`` specifies the name of the object. This is used only if the value of the ``Type`` field is ``Service`` , ``RemoteService`` , or ``AWS::Service`` . - ``Identifier`` identifies the resource objects of this resource. This is used only if the value of the ``Type`` field is ``Resource`` or ``AWS::Resource`` . - ``Environment`` specifies the location where this object is hosted, or what it belongs to.\n')
    metric_data_queries: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_MetricDataQueryPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.\n')
    metric_type: typing.Optional[str] = pydantic.Field(None, description='If the SLO is to monitor either the ``LATENCY`` or ``AVAILABILITY`` metric that Application Signals collects, use this field to specify which of those metrics is used.\n')
    operation_name: typing.Optional[str] = pydantic.Field(None, description='If the SLO is to monitor a specific operation of the service, use this field to specify the name of that operation.\n')
    period_seconds: typing.Union[int, float, None] = pydantic.Field(None, description="The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.\n")
    statistic: typing.Optional[str] = pydantic.Field(None, description='The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic. For more information about statistics, see `CloudWatch statistics definitions <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-slimetric.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    sli_metric_property = applicationsignals.CfnServiceLevelObjective.SliMetricProperty(\n        key_attributes={\n            "key_attributes_key": "keyAttributes"\n        },\n        metric_data_queries=[applicationsignals.CfnServiceLevelObjective.MetricDataQueryProperty(\n            id="id",\n\n            # the properties below are optional\n            account_id="accountId",\n            expression="expression",\n            metric_stat=applicationsignals.CfnServiceLevelObjective.MetricStatProperty(\n                metric=applicationsignals.CfnServiceLevelObjective.MetricProperty(\n                    dimensions=[applicationsignals.CfnServiceLevelObjective.DimensionProperty(\n                        name="name",\n                        value="value"\n                    )],\n                    metric_name="metricName",\n                    namespace="namespace"\n                ),\n                period=123,\n                stat="stat",\n\n                # the properties below are optional\n                unit="unit"\n            ),\n            return_data=False\n        )],\n        metric_type="metricType",\n        operation_name="operationName",\n        period_seconds=123,\n        statistic="statistic"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_attributes', 'metric_data_queries', 'metric_type', 'operation_name', 'period_seconds', 'statistic']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.SliMetricProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.SliProperty
class CfnServiceLevelObjective_SliPropertyDef(BaseStruct):
    comparison_operator: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The arithmetic operation to use when comparing the specified metric to the threshold.\n')
    metric_threshold: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value that the SLI metric is compared to.\n')
    sli_metric: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_SliMetricPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Use this structure to specify the metric to be used for the SLO.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationsignals-servicelevelobjective-sli.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    sli_property = applicationsignals.CfnServiceLevelObjective.SliProperty(\n        comparison_operator="comparisonOperator",\n        metric_threshold=123,\n        sli_metric=applicationsignals.CfnServiceLevelObjective.SliMetricProperty(\n            key_attributes={\n                "key_attributes_key": "keyAttributes"\n            },\n            metric_data_queries=[applicationsignals.CfnServiceLevelObjective.MetricDataQueryProperty(\n                id="id",\n\n                # the properties below are optional\n                account_id="accountId",\n                expression="expression",\n                metric_stat=applicationsignals.CfnServiceLevelObjective.MetricStatProperty(\n                    metric=applicationsignals.CfnServiceLevelObjective.MetricProperty(\n                        dimensions=[applicationsignals.CfnServiceLevelObjective.DimensionProperty(\n                            name="name",\n                            value="value"\n                        )],\n                        metric_name="metricName",\n                        namespace="namespace"\n                    ),\n                    period=123,\n                    stat="stat",\n\n                    # the properties below are optional\n                    unit="unit"\n                ),\n                return_data=False\n            )],\n            metric_type="metricType",\n            operation_name="operationName",\n            period_seconds=123,\n            statistic="statistic"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison_operator', 'metric_threshold', 'sli_metric']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective.SliProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjective
class CfnServiceLevelObjectiveDef(BaseCfnResource):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A name for this SLO.\n')
    sli: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_SliPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A structure containing information about the performance metric that this SLO monitors.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='An optional description for this SLO. Default: - "No description"\n')
    goal: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_GoalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to associate with the SLO. You can associate as many as 50 tags with an SLO. To be able to associate tags with the SLO when you create the SLO, you must have the cloudwatch:TagResource permission. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.')
    _init_params: typing.ClassVar[list[str]] = ['name', 'sli', 'description', 'goal', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CalendarIntervalProperty', 'DimensionProperty', 'GoalProperty', 'IntervalProperty', 'MetricDataQueryProperty', 'MetricProperty', 'MetricStatProperty', 'RollingIntervalProperty', 'SliMetricProperty', 'SliProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjective'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_applicationsignals.CfnServiceLevelObjectiveDefConfig] = pydantic.Field(None)


class CfnServiceLevelObjectiveDefConfig(pydantic.BaseModel):
    CalendarIntervalProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefCalendarintervalpropertyParams]] = pydantic.Field(None, description='')
    DimensionProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefDimensionpropertyParams]] = pydantic.Field(None, description='')
    GoalProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefGoalpropertyParams]] = pydantic.Field(None, description='')
    IntervalProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefIntervalpropertyParams]] = pydantic.Field(None, description='')
    MetricDataQueryProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefMetricdataquerypropertyParams]] = pydantic.Field(None, description='')
    MetricProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefMetricpropertyParams]] = pydantic.Field(None, description='')
    MetricStatProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefMetricstatpropertyParams]] = pydantic.Field(None, description='')
    RollingIntervalProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefRollingintervalpropertyParams]] = pydantic.Field(None, description='')
    SliMetricProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefSlimetricpropertyParams]] = pydantic.Field(None, description='')
    SliProperty: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefSlipropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_applicationsignals.CfnServiceLevelObjectiveDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnServiceLevelObjectiveDefCalendarintervalpropertyParams(pydantic.BaseModel):
    duration: typing.Union[int, float] = pydantic.Field(..., description='')
    duration_unit: str = pydantic.Field(..., description='')
    start_time: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnServiceLevelObjectiveDefDimensionpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnServiceLevelObjectiveDefGoalpropertyParams(pydantic.BaseModel):
    attainment_goal: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_IntervalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    warning_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnServiceLevelObjectiveDefIntervalpropertyParams(pydantic.BaseModel):
    calendar_interval: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_CalendarIntervalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rolling_interval: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_RollingIntervalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnServiceLevelObjectiveDefMetricdataquerypropertyParams(pydantic.BaseModel):
    id: str = pydantic.Field(..., description='')
    account_id: typing.Optional[str] = pydantic.Field(None, description='')
    expression: typing.Optional[str] = pydantic.Field(None, description='')
    metric_stat: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_MetricStatPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    return_data: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnServiceLevelObjectiveDefMetricpropertyParams(pydantic.BaseModel):
    dimensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_DimensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    metric_name: typing.Optional[str] = pydantic.Field(None, description='')
    namespace: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnServiceLevelObjectiveDefMetricstatpropertyParams(pydantic.BaseModel):
    metric: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_MetricPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    period: typing.Union[int, float] = pydantic.Field(..., description='')
    stat: str = pydantic.Field(..., description='')
    unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnServiceLevelObjectiveDefRollingintervalpropertyParams(pydantic.BaseModel):
    duration: typing.Union[int, float] = pydantic.Field(..., description='')
    duration_unit: str = pydantic.Field(..., description='')
    ...

class CfnServiceLevelObjectiveDefSlimetricpropertyParams(pydantic.BaseModel):
    key_attributes: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    metric_data_queries: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_MetricDataQueryPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    metric_type: typing.Optional[str] = pydantic.Field(None, description='')
    operation_name: typing.Optional[str] = pydantic.Field(None, description='')
    period_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    statistic: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnServiceLevelObjectiveDefSlipropertyParams(pydantic.BaseModel):
    comparison_operator: str = pydantic.Field(..., description='')
    metric_threshold: typing.Union[int, float] = pydantic.Field(..., description='')
    sli_metric: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_SliMetricPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnServiceLevelObjectiveDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnServiceLevelObjectiveDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnServiceLevelObjectiveDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnServiceLevelObjectiveDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnServiceLevelObjectiveDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnServiceLevelObjectiveDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnServiceLevelObjectiveDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnServiceLevelObjectiveDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnServiceLevelObjectiveDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnServiceLevelObjectiveDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnServiceLevelObjectiveDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnServiceLevelObjectiveDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnServiceLevelObjectiveDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnServiceLevelObjectiveDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_applicationsignals.CfnServiceLevelObjectiveProps
class CfnServiceLevelObjectivePropsDef(BaseCfnProperty):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A name for this SLO.\n')
    sli: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_SliPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A structure containing information about the performance metric that this SLO monitors.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='An optional description for this SLO. Default: - "No description"\n')
    goal: typing.Union[models.UnsupportedResource, models.aws_applicationsignals.CfnServiceLevelObjective_GoalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to associate with the SLO. You can associate as many as 50 tags with an SLO. To be able to associate tags with the SLO when you create the SLO, you must have the cloudwatch:TagResource permission. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationsignals-servicelevelobjective.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_applicationsignals as applicationsignals\n\n    cfn_service_level_objective_props = applicationsignals.CfnServiceLevelObjectiveProps(\n        name="name",\n        sli=applicationsignals.CfnServiceLevelObjective.SliProperty(\n            comparison_operator="comparisonOperator",\n            metric_threshold=123,\n            sli_metric=applicationsignals.CfnServiceLevelObjective.SliMetricProperty(\n                key_attributes={\n                    "key_attributes_key": "keyAttributes"\n                },\n                metric_data_queries=[applicationsignals.CfnServiceLevelObjective.MetricDataQueryProperty(\n                    id="id",\n\n                    # the properties below are optional\n                    account_id="accountId",\n                    expression="expression",\n                    metric_stat=applicationsignals.CfnServiceLevelObjective.MetricStatProperty(\n                        metric=applicationsignals.CfnServiceLevelObjective.MetricProperty(\n                            dimensions=[applicationsignals.CfnServiceLevelObjective.DimensionProperty(\n                                name="name",\n                                value="value"\n                            )],\n                            metric_name="metricName",\n                            namespace="namespace"\n                        ),\n                        period=123,\n                        stat="stat",\n\n                        # the properties below are optional\n                        unit="unit"\n                    ),\n                    return_data=False\n                )],\n                metric_type="metricType",\n                operation_name="operationName",\n                period_seconds=123,\n                statistic="statistic"\n            )\n        ),\n\n        # the properties below are optional\n        description="description",\n        goal=applicationsignals.CfnServiceLevelObjective.GoalProperty(\n            attainment_goal=123,\n            interval=applicationsignals.CfnServiceLevelObjective.IntervalProperty(\n                calendar_interval=applicationsignals.CfnServiceLevelObjective.CalendarIntervalProperty(\n                    duration=123,\n                    duration_unit="durationUnit",\n                    start_time=123\n                ),\n                rolling_interval=applicationsignals.CfnServiceLevelObjective.RollingIntervalProperty(\n                    duration=123,\n                    duration_unit="durationUnit"\n                )\n            ),\n            warning_threshold=123\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'sli', 'description', 'goal', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_applicationsignals.CfnServiceLevelObjectiveProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnServiceLevelObjective_CalendarIntervalProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_CalendarIntervalPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective_DimensionProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_DimensionPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective_GoalProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_GoalPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective_IntervalProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_IntervalPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective_MetricDataQueryProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_MetricDataQueryPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective_MetricProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_MetricPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective_MetricStatProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_MetricStatPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective_RollingIntervalProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_RollingIntervalPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective_SliMetricProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_SliMetricPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective_SliProperty: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjective_SliPropertyDef]] = pydantic.Field(None)
    CfnServiceLevelObjective: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjectiveDef]] = pydantic.Field(None)
    CfnServiceLevelObjectiveProps: typing.Optional[dict[str, models.aws_applicationsignals.CfnServiceLevelObjectivePropsDef]] = pydantic.Field(None)
    ...

import models
