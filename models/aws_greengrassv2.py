from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion.ComponentDependencyRequirementProperty
class CfnComponentVersion_ComponentDependencyRequirementPropertyDef(BaseStruct):
    dependency_type: typing.Optional[str] = pydantic.Field(None, description="The type of this dependency. Choose from the following options:. - ``SOFT`` – The component doesn't restart if the dependency changes state. - ``HARD`` – The component restarts if the dependency changes state. Default: ``HARD``\n")
    version_requirement: typing.Optional[str] = pydantic.Field(None, description='The component version requirement for the component dependency. AWS IoT Greengrass uses semantic version constraints. For more information, see `Semantic Versioning <https://docs.aws.amazon.com/https://semver.org/>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-componentversion-componentdependencyrequirement.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    component_dependency_requirement_property = greengrassv2.CfnComponentVersion.ComponentDependencyRequirementProperty(\n        dependency_type="dependencyType",\n        version_requirement="versionRequirement"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dependency_type', 'version_requirement']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion.ComponentDependencyRequirementProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion.ComponentPlatformProperty
class CfnComponentVersion_ComponentPlatformPropertyDef(BaseStruct):
    attributes: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='A dictionary of attributes for the platform. The AWS IoT Greengrass Core software defines the ``os`` and ``platform`` by default. You can specify additional platform attributes for a core device when you deploy the AWS IoT Greengrass nucleus component. For more information, see the `AWS IoT Greengrass nucleus component <https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html>`_ in the *AWS IoT Greengrass V2 Developer Guide* .\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The friendly name of the platform. This name helps you identify the platform. If you omit this parameter, AWS IoT Greengrass creates a friendly name from the ``os`` and ``architecture`` of the platform.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-componentversion-componentplatform.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    component_platform_property = greengrassv2.CfnComponentVersion.ComponentPlatformProperty(\n        attributes={\n            "attributes_key": "attributes"\n        },\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attributes', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion.ComponentPlatformProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaContainerParamsProperty
class CfnComponentVersion_LambdaContainerParamsPropertyDef(BaseStruct):
    devices: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaDeviceMountPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The list of system devices that the container can access.\n')
    memory_size_in_kb: typing.Union[int, float, None] = pydantic.Field(None, description='The memory size of the container, expressed in kilobytes. Default: ``16384`` (16 MB)\n')
    mount_ro_sysfs: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Whether or not the container can read information from the device's ``/sys`` folder. Default: ``false``\n")
    volumes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaVolumeMountPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The list of volumes that the container can access.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-componentversion-lambdacontainerparams.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    lambda_container_params_property = greengrassv2.CfnComponentVersion.LambdaContainerParamsProperty(\n        devices=[greengrassv2.CfnComponentVersion.LambdaDeviceMountProperty(\n            add_group_owner=False,\n            path="path",\n            permission="permission"\n        )],\n        memory_size_in_kb=123,\n        mount_ro_sysfs=False,\n        volumes=[greengrassv2.CfnComponentVersion.LambdaVolumeMountProperty(\n            add_group_owner=False,\n            destination_path="destinationPath",\n            permission="permission",\n            source_path="sourcePath"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['devices', 'memory_size_in_kb', 'mount_ro_sysfs', 'volumes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaContainerParamsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaDeviceMountProperty
class CfnComponentVersion_LambdaDeviceMountPropertyDef(BaseStruct):
    add_group_owner: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Whether or not to add the component's system user as an owner of the device. Default: ``false``\n")
    path: typing.Optional[str] = pydantic.Field(None, description='The mount path for the device in the file system.\n')
    permission: typing.Optional[str] = pydantic.Field(None, description='The permission to access the device: read/only ( ``ro`` ) or read/write ( ``rw`` ). Default: ``ro``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-componentversion-lambdadevicemount.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    lambda_device_mount_property = greengrassv2.CfnComponentVersion.LambdaDeviceMountProperty(\n        add_group_owner=False,\n        path="path",\n        permission="permission"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['add_group_owner', 'path', 'permission']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaDeviceMountProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaEventSourceProperty
class CfnComponentVersion_LambdaEventSourcePropertyDef(BaseStruct):
    topic: typing.Optional[str] = pydantic.Field(None, description='The topic to which to subscribe to receive event messages.\n')
    type: typing.Optional[str] = pydantic.Field(None, description='The type of event source. Choose from the following options:. - ``PUB_SUB`` – Subscribe to local publish/subscribe messages. This event source type doesn\'t support MQTT wildcards ( ``+`` and ``#`` ) in the event source topic. - ``IOT_CORE`` – Subscribe to AWS IoT Core MQTT messages. This event source type supports MQTT wildcards ( ``+`` and ``#`` ) in the event source topic.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-componentversion-lambdaeventsource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    lambda_event_source_property = greengrassv2.CfnComponentVersion.LambdaEventSourceProperty(\n        topic="topic",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['topic', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaEventSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaExecutionParametersProperty
class CfnComponentVersion_LambdaExecutionParametersPropertyDef(BaseStruct):
    environment_variables: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='The map of environment variables that are available to the Lambda function when it runs.\n')
    event_sources: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaEventSourcePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and AWS IoT Core MQTT messages.\n')
    exec_args: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of arguments to pass to the Lambda function when it runs.\n')
    input_payload_encoding_type: typing.Optional[str] = pydantic.Field(None, description='The encoding type that the Lambda function supports. Default: ``json``\n')
    linux_process_params: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaLinuxProcessParamsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The parameters for the Linux process that contains the Lambda function.\n')
    max_idle_time_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum amount of time in seconds that a non-pinned Lambda function can idle before the AWS IoT Greengrass Core software stops its process.\n')
    max_instances_count: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of instances that a non-pinned Lambda function can run at the same time.\n')
    max_queue_size: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum size of the message queue for the Lambda function component. The AWS IoT Greengrass core device stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.\n')
    pinned: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether or not the Lambda function is pinned, or long-lived. - A pinned Lambda function starts when the AWS IoT Greengrass Core starts and keeps running in its own container. - A non-pinned Lambda function starts only when it receives a work item and exists after it idles for ``maxIdleTimeInSeconds`` . If the function has multiple work items, the AWS IoT Greengrass Core software creates multiple instances of the function. Default: ``true``\n')
    status_timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.\n')
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum amount of time in seconds that the Lambda function can process a work item.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-componentversion-lambdaexecutionparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    lambda_execution_parameters_property = greengrassv2.CfnComponentVersion.LambdaExecutionParametersProperty(\n        environment_variables={\n            "environment_variables_key": "environmentVariables"\n        },\n        event_sources=[greengrassv2.CfnComponentVersion.LambdaEventSourceProperty(\n            topic="topic",\n            type="type"\n        )],\n        exec_args=["execArgs"],\n        input_payload_encoding_type="inputPayloadEncodingType",\n        linux_process_params=greengrassv2.CfnComponentVersion.LambdaLinuxProcessParamsProperty(\n            container_params=greengrassv2.CfnComponentVersion.LambdaContainerParamsProperty(\n                devices=[greengrassv2.CfnComponentVersion.LambdaDeviceMountProperty(\n                    add_group_owner=False,\n                    path="path",\n                    permission="permission"\n                )],\n                memory_size_in_kb=123,\n                mount_ro_sysfs=False,\n                volumes=[greengrassv2.CfnComponentVersion.LambdaVolumeMountProperty(\n                    add_group_owner=False,\n                    destination_path="destinationPath",\n                    permission="permission",\n                    source_path="sourcePath"\n                )]\n            ),\n            isolation_mode="isolationMode"\n        ),\n        max_idle_time_in_seconds=123,\n        max_instances_count=123,\n        max_queue_size=123,\n        pinned=False,\n        status_timeout_in_seconds=123,\n        timeout_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['environment_variables', 'event_sources', 'exec_args', 'input_payload_encoding_type', 'linux_process_params', 'max_idle_time_in_seconds', 'max_instances_count', 'max_queue_size', 'pinned', 'status_timeout_in_seconds', 'timeout_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaExecutionParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaFunctionRecipeSourceProperty
class CfnComponentVersion_LambdaFunctionRecipeSourcePropertyDef(BaseStruct):
    component_dependencies: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_ComponentDependencyRequirementPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The component versions on which this Lambda function component depends.\n')
    component_lambda_parameters: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaExecutionParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The system and runtime parameters for the Lambda function as it runs on the AWS IoT Greengrass core device.\n')
    component_name: typing.Optional[str] = pydantic.Field(None, description='The name of the component. Defaults to the name of the Lambda function.\n')
    component_platforms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_ComponentPlatformPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The platforms that the component version supports.\n')
    component_version: typing.Optional[str] = pydantic.Field(None, description='The version of the component. Defaults to the version of the Lambda function as a semantic version. For example, if your function version is ``3`` , the component version becomes ``3.0.0`` .\n')
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the Lambda function. The ARN must include the version of the function to import. You can\'t use version aliases like ``$LATEST`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-componentversion-lambdafunctionrecipesource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    lambda_function_recipe_source_property = greengrassv2.CfnComponentVersion.LambdaFunctionRecipeSourceProperty(\n        component_dependencies={\n            "component_dependencies_key": greengrassv2.CfnComponentVersion.ComponentDependencyRequirementProperty(\n                dependency_type="dependencyType",\n                version_requirement="versionRequirement"\n            )\n        },\n        component_lambda_parameters=greengrassv2.CfnComponentVersion.LambdaExecutionParametersProperty(\n            environment_variables={\n                "environment_variables_key": "environmentVariables"\n            },\n            event_sources=[greengrassv2.CfnComponentVersion.LambdaEventSourceProperty(\n                topic="topic",\n                type="type"\n            )],\n            exec_args=["execArgs"],\n            input_payload_encoding_type="inputPayloadEncodingType",\n            linux_process_params=greengrassv2.CfnComponentVersion.LambdaLinuxProcessParamsProperty(\n                container_params=greengrassv2.CfnComponentVersion.LambdaContainerParamsProperty(\n                    devices=[greengrassv2.CfnComponentVersion.LambdaDeviceMountProperty(\n                        add_group_owner=False,\n                        path="path",\n                        permission="permission"\n                    )],\n                    memory_size_in_kb=123,\n                    mount_ro_sysfs=False,\n                    volumes=[greengrassv2.CfnComponentVersion.LambdaVolumeMountProperty(\n                        add_group_owner=False,\n                        destination_path="destinationPath",\n                        permission="permission",\n                        source_path="sourcePath"\n                    )]\n                ),\n                isolation_mode="isolationMode"\n            ),\n            max_idle_time_in_seconds=123,\n            max_instances_count=123,\n            max_queue_size=123,\n            pinned=False,\n            status_timeout_in_seconds=123,\n            timeout_in_seconds=123\n        ),\n        component_name="componentName",\n        component_platforms=[greengrassv2.CfnComponentVersion.ComponentPlatformProperty(\n            attributes={\n                "attributes_key": "attributes"\n            },\n            name="name"\n        )],\n        component_version="componentVersion",\n        lambda_arn="lambdaArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['component_dependencies', 'component_lambda_parameters', 'component_name', 'component_platforms', 'component_version', 'lambda_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaFunctionRecipeSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaLinuxProcessParamsProperty
class CfnComponentVersion_LambdaLinuxProcessParamsPropertyDef(BaseStruct):
    container_params: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaContainerParamsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The parameters for the container in which the Lambda function runs.\n')
    isolation_mode: typing.Optional[str] = pydantic.Field(None, description='The isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the AWS IoT Greengrass container, or as a regular process outside any container. Default: ``GreengrassContainer``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-componentversion-lambdalinuxprocessparams.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    lambda_linux_process_params_property = greengrassv2.CfnComponentVersion.LambdaLinuxProcessParamsProperty(\n        container_params=greengrassv2.CfnComponentVersion.LambdaContainerParamsProperty(\n            devices=[greengrassv2.CfnComponentVersion.LambdaDeviceMountProperty(\n                add_group_owner=False,\n                path="path",\n                permission="permission"\n            )],\n            memory_size_in_kb=123,\n            mount_ro_sysfs=False,\n            volumes=[greengrassv2.CfnComponentVersion.LambdaVolumeMountProperty(\n                add_group_owner=False,\n                destination_path="destinationPath",\n                permission="permission",\n                source_path="sourcePath"\n            )]\n        ),\n        isolation_mode="isolationMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['container_params', 'isolation_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaLinuxProcessParamsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaVolumeMountProperty
class CfnComponentVersion_LambdaVolumeMountPropertyDef(BaseStruct):
    add_group_owner: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether or not to add the AWS IoT Greengrass user group as an owner of the volume. Default: ``false``\n')
    destination_path: typing.Optional[str] = pydantic.Field(None, description='The path to the logical volume in the file system.\n')
    permission: typing.Optional[str] = pydantic.Field(None, description='The permission to access the volume: read/only ( ``ro`` ) or read/write ( ``rw`` ). Default: ``ro``\n')
    source_path: typing.Optional[str] = pydantic.Field(None, description='The path to the physical volume in the file system.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-componentversion-lambdavolumemount.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    lambda_volume_mount_property = greengrassv2.CfnComponentVersion.LambdaVolumeMountProperty(\n        add_group_owner=False,\n        destination_path="destinationPath",\n        permission="permission",\n        source_path="sourcePath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['add_group_owner', 'destination_path', 'permission', 'source_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion.LambdaVolumeMountProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.ComponentConfigurationUpdateProperty
class CfnDeployment_ComponentConfigurationUpdatePropertyDef(BaseStruct):
    merge: typing.Optional[str] = pydantic.Field(None, description="A serialized JSON string that contains the configuration object to merge to target devices. The core device merges this configuration with the component's existing configuration. If this is the first time a component deploys on a device, the core device merges this configuration with the component's default configuration. This means that the core device keeps it's existing configuration for keys and values that you don't specify in this object. For more information, see `Merge configuration updates <https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#merge-configuration-update>`_ in the *AWS IoT Greengrass V2 Developer Guide* .\n")
    reset: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of configuration nodes to reset to default values on target devices. Use JSON pointers to specify each node to reset. JSON pointers start with a forward slash ( ``/`` ) and use forward slashes to separate the key for each level in the object. For more information, see the `JSON pointer specification <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901>`_ and `Reset configuration updates <https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#reset-configuration-update>`_ in the *AWS IoT Greengrass V2 Developer Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-componentconfigurationupdate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    component_configuration_update_property = greengrassv2.CfnDeployment.ComponentConfigurationUpdateProperty(\n        merge="merge",\n        reset=["reset"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['merge', 'reset']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.ComponentConfigurationUpdateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.ComponentDeploymentSpecificationProperty
class CfnDeployment_ComponentDeploymentSpecificationPropertyDef(BaseStruct):
    component_version: typing.Optional[str] = pydantic.Field(None, description='The version of the component.\n')
    configuration_update: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_ComponentConfigurationUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The configuration updates to deploy for the component. You can define reset updates and merge updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device's component configuration with the keys and values that you specify. The AWS IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see `Update component configuration <https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html>`_ .\n")
    run_with: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_ComponentRunWithPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The system user and group that the software uses to run component processes on the core device. If you omit this parameter, the software uses the system user and group that you configure for the core device. For more information, see `Configure the user and group that run components <https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user>`_ in the *AWS IoT Greengrass V2 Developer Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-componentdeploymentspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    component_deployment_specification_property = greengrassv2.CfnDeployment.ComponentDeploymentSpecificationProperty(\n        component_version="componentVersion",\n        configuration_update=greengrassv2.CfnDeployment.ComponentConfigurationUpdateProperty(\n            merge="merge",\n            reset=["reset"]\n        ),\n        run_with=greengrassv2.CfnDeployment.ComponentRunWithProperty(\n            posix_user="posixUser",\n            system_resource_limits=greengrassv2.CfnDeployment.SystemResourceLimitsProperty(\n                cpus=123,\n                memory=123\n            ),\n            windows_user="windowsUser"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['component_version', 'configuration_update', 'run_with']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.ComponentDeploymentSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.ComponentRunWithProperty
class CfnDeployment_ComponentRunWithPropertyDef(BaseStruct):
    posix_user: typing.Optional[str] = pydantic.Field(None, description="The POSIX system user and (optional) group to use to run this component. Specify the user and group separated by a colon ( ``:`` ) in the following format: ``user:group`` . The group is optional. If you don't specify a group, the AWS IoT Greengrass Core software uses the primary user for the group.\n")
    system_resource_limits: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_SystemResourceLimitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The system resource limits to apply to this component's process on the core device. AWS IoT Greengrass supports this feature only on Linux core devices. If you omit this parameter, the AWS IoT Greengrass Core software uses the default system resource limits that you configure on the AWS IoT Greengrass nucleus component. For more information, see `Configure system resource limits for components <https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits>`_ .\n")
    windows_user: typing.Optional[str] = pydantic.Field(None, description='The Windows user to use to run this component on Windows core devices. The user must exist on each Windows core device, and its name and password must be in the LocalSystem account\'s Credentials Manager instance. If you omit this parameter, the AWS IoT Greengrass Core software uses the default Windows user that you configure on the AWS IoT Greengrass nucleus component. For more information, see `Configure the user and group that run components <https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-componentrunwith.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    component_run_with_property = greengrassv2.CfnDeployment.ComponentRunWithProperty(\n        posix_user="posixUser",\n        system_resource_limits=greengrassv2.CfnDeployment.SystemResourceLimitsProperty(\n            cpus=123,\n            memory=123\n        ),\n        windows_user="windowsUser"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['posix_user', 'system_resource_limits', 'windows_user']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.ComponentRunWithProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.DeploymentComponentUpdatePolicyProperty
class CfnDeployment_DeploymentComponentUpdatePolicyPropertyDef(BaseStruct):
    action: typing.Optional[str] = pydantic.Field(None, description="Whether or not to notify components and wait for components to become safe to update. Choose from the following options: - ``NOTIFY_COMPONENTS`` – The deployment notifies each component before it stops and updates that component. Components can use the `SubscribeToComponentUpdates <https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetocomponentupdates>`_ IPC operation to receive these notifications. Then, components can respond with the `DeferComponentUpdate <https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-defercomponentupdate>`_ IPC operation. For more information, see the `Create deployments <https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html>`_ in the *AWS IoT Greengrass V2 Developer Guide* . - ``SKIP_NOTIFY_COMPONENTS`` – The deployment doesn't notify components or wait for them to be safe to update. Default: ``NOTIFY_COMPONENTS``\n")
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time in seconds that each component on a device has to report that it\'s safe to update. If the component waits for longer than this timeout, then the deployment proceeds on the device. Default: ``60``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-deploymentcomponentupdatepolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    deployment_component_update_policy_property = greengrassv2.CfnDeployment.DeploymentComponentUpdatePolicyProperty(\n        action="action",\n        timeout_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'timeout_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.DeploymentComponentUpdatePolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.DeploymentConfigurationValidationPolicyProperty
class CfnDeployment_DeploymentConfigurationValidationPolicyPropertyDef(BaseStruct):
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time in seconds that a component can validate its configuration updates. If the validation time exceeds this timeout, then the deployment proceeds for the device. Default: ``30``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-deploymentconfigurationvalidationpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    deployment_configuration_validation_policy_property = greengrassv2.CfnDeployment.DeploymentConfigurationValidationPolicyProperty(\n        timeout_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['timeout_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.DeploymentConfigurationValidationPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.DeploymentIoTJobConfigurationProperty
class CfnDeployment_DeploymentIoTJobConfigurationPropertyDef(BaseStruct):
    abort_config: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobAbortConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The stop configuration for the job. This configuration defines when and how to stop a job rollout.\n')
    job_executions_rollout_config: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobExecutionsRolloutConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The rollout configuration for the job. This configuration defines the rate at which the job rolls out to the fleet of target devices.\n')
    timeout_config: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobTimeoutConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The timeout configuration for the job. This configuration defines the amount of time each device has to complete the job.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-deploymentiotjobconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    # rate_increase_criteria: Any\n\n    deployment_io_tJob_configuration_property = greengrassv2.CfnDeployment.DeploymentIoTJobConfigurationProperty(\n        abort_config=greengrassv2.CfnDeployment.IoTJobAbortConfigProperty(\n            criteria_list=[greengrassv2.CfnDeployment.IoTJobAbortCriteriaProperty(\n                action="action",\n                failure_type="failureType",\n                min_number_of_executed_things=123,\n                threshold_percentage=123\n            )]\n        ),\n        job_executions_rollout_config=greengrassv2.CfnDeployment.IoTJobExecutionsRolloutConfigProperty(\n            exponential_rate=greengrassv2.CfnDeployment.IoTJobExponentialRolloutRateProperty(\n                base_rate_per_minute=123,\n                increment_factor=123,\n                rate_increase_criteria=rate_increase_criteria\n            ),\n            maximum_per_minute=123\n        ),\n        timeout_config=greengrassv2.CfnDeployment.IoTJobTimeoutConfigProperty(\n            in_progress_timeout_in_minutes=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['abort_config', 'job_executions_rollout_config', 'timeout_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.DeploymentIoTJobConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.DeploymentPoliciesProperty
class CfnDeployment_DeploymentPoliciesPropertyDef(BaseStruct):
    component_update_policy: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_DeploymentComponentUpdatePolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.\n")
    configuration_validation_policy: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_DeploymentConfigurationValidationPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.\n')
    failure_handling_policy: typing.Optional[str] = pydantic.Field(None, description='The failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails. Default: ``ROLLBACK``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-deploymentpolicies.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    deployment_policies_property = greengrassv2.CfnDeployment.DeploymentPoliciesProperty(\n        component_update_policy=greengrassv2.CfnDeployment.DeploymentComponentUpdatePolicyProperty(\n            action="action",\n            timeout_in_seconds=123\n        ),\n        configuration_validation_policy=greengrassv2.CfnDeployment.DeploymentConfigurationValidationPolicyProperty(\n            timeout_in_seconds=123\n        ),\n        failure_handling_policy="failureHandlingPolicy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['component_update_policy', 'configuration_validation_policy', 'failure_handling_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.DeploymentPoliciesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobAbortConfigProperty
class CfnDeployment_IoTJobAbortConfigPropertyDef(BaseStruct):
    criteria_list: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobAbortCriteriaPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The list of criteria that define when and how to cancel the configuration deployment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-iotjobabortconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    io_tJob_abort_config_property = greengrassv2.CfnDeployment.IoTJobAbortConfigProperty(\n        criteria_list=[greengrassv2.CfnDeployment.IoTJobAbortCriteriaProperty(\n            action="action",\n            failure_type="failureType",\n            min_number_of_executed_things=123,\n            threshold_percentage=123\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['criteria_list']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobAbortConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobAbortCriteriaProperty
class CfnDeployment_IoTJobAbortCriteriaPropertyDef(BaseStruct):
    action: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The action to perform when the criteria are met.\n')
    failure_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of job deployment failure that can cancel a job.\n')
    min_number_of_executed_things: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum number of things that receive the configuration before the job can cancel.\n')
    threshold_percentage: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum percentage of ``failureType`` failures that occur before the job can cancel. This parameter supports up to two digits after the decimal (for example, you can specify ``10.9`` or ``10.99`` , but not ``10.999`` ).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-iotjobabortcriteria.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    io_tJob_abort_criteria_property = greengrassv2.CfnDeployment.IoTJobAbortCriteriaProperty(\n        action="action",\n        failure_type="failureType",\n        min_number_of_executed_things=123,\n        threshold_percentage=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['action', 'failure_type', 'min_number_of_executed_things', 'threshold_percentage']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobAbortCriteriaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobExecutionsRolloutConfigProperty
class CfnDeployment_IoTJobExecutionsRolloutConfigPropertyDef(BaseStruct):
    exponential_rate: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobExponentialRolloutRatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The exponential rate to increase the job rollout rate.\n')
    maximum_per_minute: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of devices that receive a pending job notification, per minute.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-iotjobexecutionsrolloutconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    # rate_increase_criteria: Any\n\n    io_tJob_executions_rollout_config_property = greengrassv2.CfnDeployment.IoTJobExecutionsRolloutConfigProperty(\n        exponential_rate=greengrassv2.CfnDeployment.IoTJobExponentialRolloutRateProperty(\n            base_rate_per_minute=123,\n            increment_factor=123,\n            rate_increase_criteria=rate_increase_criteria\n        ),\n        maximum_per_minute=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['exponential_rate', 'maximum_per_minute']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobExecutionsRolloutConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobExponentialRolloutRateProperty
class CfnDeployment_IoTJobExponentialRolloutRatePropertyDef(BaseStruct):
    base_rate_per_minute: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum number of devices that receive a pending job notification, per minute, when the job starts. This parameter defines the initial rollout rate of the job.\n')
    increment_factor: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The exponential factor to increase the rollout rate for the job. This parameter supports up to one digit after the decimal (for example, you can specify ``1.5`` , but not ``1.55`` ).\n')
    rate_increase_criteria: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The criteria to increase the rollout rate for the job.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-iotjobexponentialrolloutrate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    # rate_increase_criteria: Any\n\n    io_tJob_exponential_rollout_rate_property = greengrassv2.CfnDeployment.IoTJobExponentialRolloutRateProperty(\n        base_rate_per_minute=123,\n        increment_factor=123,\n        rate_increase_criteria=rate_increase_criteria\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['base_rate_per_minute', 'increment_factor', 'rate_increase_criteria']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobExponentialRolloutRateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobTimeoutConfigProperty
class CfnDeployment_IoTJobTimeoutConfigPropertyDef(BaseStruct):
    in_progress_timeout_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description="The amount of time, in minutes, that devices have to complete the job. The timer starts when the job status is set to ``IN_PROGRESS`` . If the job status doesn't change to a terminal state before the time expires, then the job status is set to ``TIMED_OUT`` . The timeout interval must be between 1 minute and 7 days (10080 minutes).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-iotjobtimeoutconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    io_tJob_timeout_config_property = greengrassv2.CfnDeployment.IoTJobTimeoutConfigProperty(\n        in_progress_timeout_in_minutes=123\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['in_progress_timeout_in_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.IoTJobTimeoutConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment.SystemResourceLimitsProperty
class CfnDeployment_SystemResourceLimitsPropertyDef(BaseStruct):
    cpus: typing.Union[int, float, None] = pydantic.Field(None, description="The maximum amount of CPU time that a component's processes can use on the core device. A core device's total CPU time is equivalent to the device's number of CPU cores. For example, on a core device with 4 CPU cores, you can set this value to 2 to limit the component's processes to 50 percent usage of each CPU core. On a device with 1 CPU core, you can set this value to 0.25 to limit the component's processes to 25 percent usage of the CPU. If you set this value to a number greater than the number of CPU cores, the AWS IoT Greengrass Core software doesn't limit the component's CPU usage.\n")
    memory: typing.Union[int, float, None] = pydantic.Field(None, description="The maximum amount of RAM, expressed in kilobytes, that a component's processes can use on the core device. For more information, see `Configure system resource limits for components <https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-greengrassv2-deployment-systemresourcelimits.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    system_resource_limits_property = greengrassv2.CfnDeployment.SystemResourceLimitsProperty(\n        cpus=123,\n        memory=123\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['cpus', 'memory']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment.SystemResourceLimitsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersion
class CfnComponentVersionDef(BaseCfnResource):
    inline_recipe: typing.Optional[str] = pydantic.Field(None, description="The recipe to use to create the component. The recipe defines the component's metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility. You must specify either ``InlineRecipe`` or ``LambdaFunction`` .\n")
    lambda_function: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaFunctionRecipeSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The parameters to create a component from a Lambda function. You must specify either ``InlineRecipe`` or ``LambdaFunction`` .\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Application-specific metadata to attach to the component version. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see `Tag your AWS IoT Greengrass Version 2 resources <https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html>`_ in the *AWS IoT Greengrass V2 Developer Guide* . This ``Json`` property type is processed as a map of key-value pairs. It uses the following format, which is different from most ``Tags`` implementations in AWS CloudFormation templates:: "Tags": { "KeyName0": "value", "KeyName1": "value", "KeyName2": "value" }')
    _init_params: typing.ClassVar[list[str]] = ['inline_recipe', 'lambda_function', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ComponentDependencyRequirementProperty', 'ComponentPlatformProperty', 'LambdaContainerParamsProperty', 'LambdaDeviceMountProperty', 'LambdaEventSourceProperty', 'LambdaExecutionParametersProperty', 'LambdaFunctionRecipeSourceProperty', 'LambdaLinuxProcessParamsProperty', 'LambdaVolumeMountProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersion'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnComponentVersionDefConfig] = pydantic.Field(None)


class CfnComponentVersionDefConfig(pydantic.BaseModel):
    ComponentDependencyRequirementProperty: typing.Optional[list[CfnComponentVersionDefComponentdependencyrequirementpropertyParams]] = pydantic.Field(None, description='')
    ComponentPlatformProperty: typing.Optional[list[CfnComponentVersionDefComponentplatformpropertyParams]] = pydantic.Field(None, description='')
    LambdaContainerParamsProperty: typing.Optional[list[CfnComponentVersionDefLambdacontainerparamspropertyParams]] = pydantic.Field(None, description='')
    LambdaDeviceMountProperty: typing.Optional[list[CfnComponentVersionDefLambdadevicemountpropertyParams]] = pydantic.Field(None, description='')
    LambdaEventSourceProperty: typing.Optional[list[CfnComponentVersionDefLambdaeventsourcepropertyParams]] = pydantic.Field(None, description='')
    LambdaExecutionParametersProperty: typing.Optional[list[CfnComponentVersionDefLambdaexecutionparameterspropertyParams]] = pydantic.Field(None, description='')
    LambdaFunctionRecipeSourceProperty: typing.Optional[list[CfnComponentVersionDefLambdafunctionrecipesourcepropertyParams]] = pydantic.Field(None, description='')
    LambdaLinuxProcessParamsProperty: typing.Optional[list[CfnComponentVersionDefLambdalinuxprocessparamspropertyParams]] = pydantic.Field(None, description='')
    LambdaVolumeMountProperty: typing.Optional[list[CfnComponentVersionDefLambdavolumemountpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnComponentVersionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnComponentVersionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnComponentVersionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnComponentVersionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnComponentVersionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnComponentVersionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnComponentVersionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnComponentVersionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnComponentVersionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnComponentVersionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnComponentVersionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnComponentVersionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnComponentVersionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnComponentVersionDefComponentdependencyrequirementpropertyParams(pydantic.BaseModel):
    dependency_type: typing.Optional[str] = pydantic.Field(None, description='')
    version_requirement: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentVersionDefComponentplatformpropertyParams(pydantic.BaseModel):
    attributes: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentVersionDefLambdacontainerparamspropertyParams(pydantic.BaseModel):
    devices: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaDeviceMountPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    memory_size_in_kb: typing.Union[int, float, None] = pydantic.Field(None, description='')
    mount_ro_sysfs: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    volumes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaVolumeMountPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnComponentVersionDefLambdadevicemountpropertyParams(pydantic.BaseModel):
    add_group_owner: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    path: typing.Optional[str] = pydantic.Field(None, description='')
    permission: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentVersionDefLambdaeventsourcepropertyParams(pydantic.BaseModel):
    topic: typing.Optional[str] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentVersionDefLambdaexecutionparameterspropertyParams(pydantic.BaseModel):
    environment_variables: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    event_sources: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaEventSourcePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    exec_args: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    input_payload_encoding_type: typing.Optional[str] = pydantic.Field(None, description='')
    linux_process_params: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaLinuxProcessParamsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    max_idle_time_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_instances_count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_queue_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    pinned: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    status_timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnComponentVersionDefLambdafunctionrecipesourcepropertyParams(pydantic.BaseModel):
    component_dependencies: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_ComponentDependencyRequirementPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    component_lambda_parameters: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaExecutionParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    component_name: typing.Optional[str] = pydantic.Field(None, description='')
    component_platforms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_ComponentPlatformPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    component_version: typing.Optional[str] = pydantic.Field(None, description='')
    lambda_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentVersionDefLambdalinuxprocessparamspropertyParams(pydantic.BaseModel):
    container_params: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaContainerParamsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    isolation_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentVersionDefLambdavolumemountpropertyParams(pydantic.BaseModel):
    add_group_owner: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    destination_path: typing.Optional[str] = pydantic.Field(None, description='')
    permission: typing.Optional[str] = pydantic.Field(None, description='')
    source_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnComponentVersionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnComponentVersionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnComponentVersionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnComponentVersionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnComponentVersionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnComponentVersionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnComponentVersionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnComponentVersionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnComponentVersionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnComponentVersionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnComponentVersionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnComponentVersionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnComponentVersionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnComponentVersionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeployment
class CfnDeploymentDef(BaseCfnResource):
    target_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the target AWS IoT thing or thing group.\n')
    components: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_ComponentDeploymentSpecificationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.\n")
    deployment_name: typing.Optional[str] = pydantic.Field(None, description='The name of the deployment.\n')
    deployment_policies: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_DeploymentPoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The deployment policies for the deployment. These policies define how the deployment updates components and handles failure.\n')
    iot_job_configuration: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_DeploymentIoTJobConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.\n')
    parent_target_arn: typing.Optional[str] = pydantic.Field(None, description="The parent deployment's `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_ for a subdeployment.\n")
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Application-specific metadata to attach to the deployment. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see `Tag your AWS IoT Greengrass Version 2 resources <https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html>`_ in the *AWS IoT Greengrass V2 Developer Guide* . This ``Json`` property type is processed as a map of key-value pairs. It uses the following format, which is different from most ``Tags`` implementations in AWS CloudFormation templates:: "Tags": { "KeyName0": "value", "KeyName1": "value", "KeyName2": "value" }')
    _init_params: typing.ClassVar[list[str]] = ['target_arn', 'components', 'deployment_name', 'deployment_policies', 'iot_job_configuration', 'parent_target_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ComponentConfigurationUpdateProperty', 'ComponentDeploymentSpecificationProperty', 'ComponentRunWithProperty', 'DeploymentComponentUpdatePolicyProperty', 'DeploymentConfigurationValidationPolicyProperty', 'DeploymentIoTJobConfigurationProperty', 'DeploymentPoliciesProperty', 'IoTJobAbortConfigProperty', 'IoTJobAbortCriteriaProperty', 'IoTJobExecutionsRolloutConfigProperty', 'IoTJobExponentialRolloutRateProperty', 'IoTJobTimeoutConfigProperty', 'SystemResourceLimitsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeployment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnDeploymentDefConfig] = pydantic.Field(None)


class CfnDeploymentDefConfig(pydantic.BaseModel):
    ComponentConfigurationUpdateProperty: typing.Optional[list[CfnDeploymentDefComponentconfigurationupdatepropertyParams]] = pydantic.Field(None, description='')
    ComponentDeploymentSpecificationProperty: typing.Optional[list[CfnDeploymentDefComponentdeploymentspecificationpropertyParams]] = pydantic.Field(None, description='')
    ComponentRunWithProperty: typing.Optional[list[CfnDeploymentDefComponentrunwithpropertyParams]] = pydantic.Field(None, description='')
    DeploymentComponentUpdatePolicyProperty: typing.Optional[list[CfnDeploymentDefDeploymentcomponentupdatepolicypropertyParams]] = pydantic.Field(None, description='')
    DeploymentConfigurationValidationPolicyProperty: typing.Optional[list[CfnDeploymentDefDeploymentconfigurationvalidationpolicypropertyParams]] = pydantic.Field(None, description='')
    DeploymentIoTJobConfigurationProperty: typing.Optional[list[CfnDeploymentDefDeploymentiotjobconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DeploymentPoliciesProperty: typing.Optional[list[CfnDeploymentDefDeploymentpoliciespropertyParams]] = pydantic.Field(None, description='')
    IoTJobAbortConfigProperty: typing.Optional[list[CfnDeploymentDefIotjobabortconfigpropertyParams]] = pydantic.Field(None, description='')
    IoTJobAbortCriteriaProperty: typing.Optional[list[CfnDeploymentDefIotjobabortcriteriapropertyParams]] = pydantic.Field(None, description='')
    IoTJobExecutionsRolloutConfigProperty: typing.Optional[list[CfnDeploymentDefIotjobexecutionsrolloutconfigpropertyParams]] = pydantic.Field(None, description='')
    IoTJobExponentialRolloutRateProperty: typing.Optional[list[CfnDeploymentDefIotjobexponentialrolloutratepropertyParams]] = pydantic.Field(None, description='')
    IoTJobTimeoutConfigProperty: typing.Optional[list[CfnDeploymentDefIotjobtimeoutconfigpropertyParams]] = pydantic.Field(None, description='')
    SystemResourceLimitsProperty: typing.Optional[list[CfnDeploymentDefSystemresourcelimitspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnDeploymentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnDeploymentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnDeploymentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnDeploymentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnDeploymentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnDeploymentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnDeploymentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnDeploymentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnDeploymentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnDeploymentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnDeploymentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnDeploymentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnDeploymentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDeploymentDefComponentconfigurationupdatepropertyParams(pydantic.BaseModel):
    merge: typing.Optional[str] = pydantic.Field(None, description='')
    reset: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefComponentdeploymentspecificationpropertyParams(pydantic.BaseModel):
    component_version: typing.Optional[str] = pydantic.Field(None, description='')
    configuration_update: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_ComponentConfigurationUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    run_with: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_ComponentRunWithPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefComponentrunwithpropertyParams(pydantic.BaseModel):
    posix_user: typing.Optional[str] = pydantic.Field(None, description='')
    system_resource_limits: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_SystemResourceLimitsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    windows_user: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefDeploymentcomponentupdatepolicypropertyParams(pydantic.BaseModel):
    action: typing.Optional[str] = pydantic.Field(None, description='')
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefDeploymentconfigurationvalidationpolicypropertyParams(pydantic.BaseModel):
    timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefDeploymentiotjobconfigurationpropertyParams(pydantic.BaseModel):
    abort_config: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobAbortConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    job_executions_rollout_config: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobExecutionsRolloutConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_config: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobTimeoutConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefDeploymentpoliciespropertyParams(pydantic.BaseModel):
    component_update_policy: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_DeploymentComponentUpdatePolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    configuration_validation_policy: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_DeploymentConfigurationValidationPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    failure_handling_policy: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefIotjobabortconfigpropertyParams(pydantic.BaseModel):
    criteria_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobAbortCriteriaPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnDeploymentDefIotjobabortcriteriapropertyParams(pydantic.BaseModel):
    action: str = pydantic.Field(..., description='')
    failure_type: str = pydantic.Field(..., description='')
    min_number_of_executed_things: typing.Union[int, float] = pydantic.Field(..., description='')
    threshold_percentage: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnDeploymentDefIotjobexecutionsrolloutconfigpropertyParams(pydantic.BaseModel):
    exponential_rate: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_IoTJobExponentialRolloutRatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    maximum_per_minute: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefIotjobexponentialrolloutratepropertyParams(pydantic.BaseModel):
    base_rate_per_minute: typing.Union[int, float] = pydantic.Field(..., description='')
    increment_factor: typing.Union[int, float] = pydantic.Field(..., description='')
    rate_increase_criteria: typing.Any = pydantic.Field(..., description='')
    ...

class CfnDeploymentDefIotjobtimeoutconfigpropertyParams(pydantic.BaseModel):
    in_progress_timeout_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefSystemresourcelimitspropertyParams(pydantic.BaseModel):
    cpus: typing.Union[int, float, None] = pydantic.Field(None, description='')
    memory: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDeploymentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDeploymentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDeploymentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDeploymentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDeploymentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDeploymentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDeploymentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDeploymentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDeploymentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDeploymentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDeploymentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDeploymentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDeploymentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDeploymentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_greengrassv2.CfnComponentVersionProps
class CfnComponentVersionPropsDef(BaseCfnProperty):
    inline_recipe: typing.Optional[str] = pydantic.Field(None, description="The recipe to use to create the component. The recipe defines the component's metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility. You must specify either ``InlineRecipe`` or ``LambdaFunction`` .\n")
    lambda_function: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnComponentVersion_LambdaFunctionRecipeSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The parameters to create a component from a Lambda function. You must specify either ``InlineRecipe`` or ``LambdaFunction`` .\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Application-specific metadata to attach to the component version. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see `Tag your AWS IoT Greengrass Version 2 resources <https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html>`_ in the *AWS IoT Greengrass V2 Developer Guide* . This ``Json`` property type is processed as a map of key-value pairs. It uses the following format, which is different from most ``Tags`` implementations in AWS CloudFormation templates:: "Tags": { "KeyName0": "value", "KeyName1": "value", "KeyName2": "value" }\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrassv2-componentversion.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    cfn_component_version_props = greengrassv2.CfnComponentVersionProps(\n        inline_recipe="inlineRecipe",\n        lambda_function=greengrassv2.CfnComponentVersion.LambdaFunctionRecipeSourceProperty(\n            component_dependencies={\n                "component_dependencies_key": greengrassv2.CfnComponentVersion.ComponentDependencyRequirementProperty(\n                    dependency_type="dependencyType",\n                    version_requirement="versionRequirement"\n                )\n            },\n            component_lambda_parameters=greengrassv2.CfnComponentVersion.LambdaExecutionParametersProperty(\n                environment_variables={\n                    "environment_variables_key": "environmentVariables"\n                },\n                event_sources=[greengrassv2.CfnComponentVersion.LambdaEventSourceProperty(\n                    topic="topic",\n                    type="type"\n                )],\n                exec_args=["execArgs"],\n                input_payload_encoding_type="inputPayloadEncodingType",\n                linux_process_params=greengrassv2.CfnComponentVersion.LambdaLinuxProcessParamsProperty(\n                    container_params=greengrassv2.CfnComponentVersion.LambdaContainerParamsProperty(\n                        devices=[greengrassv2.CfnComponentVersion.LambdaDeviceMountProperty(\n                            add_group_owner=False,\n                            path="path",\n                            permission="permission"\n                        )],\n                        memory_size_in_kb=123,\n                        mount_ro_sysfs=False,\n                        volumes=[greengrassv2.CfnComponentVersion.LambdaVolumeMountProperty(\n                            add_group_owner=False,\n                            destination_path="destinationPath",\n                            permission="permission",\n                            source_path="sourcePath"\n                        )]\n                    ),\n                    isolation_mode="isolationMode"\n                ),\n                max_idle_time_in_seconds=123,\n                max_instances_count=123,\n                max_queue_size=123,\n                pinned=False,\n                status_timeout_in_seconds=123,\n                timeout_in_seconds=123\n            ),\n            component_name="componentName",\n            component_platforms=[greengrassv2.CfnComponentVersion.ComponentPlatformProperty(\n                attributes={\n                    "attributes_key": "attributes"\n                },\n                name="name"\n            )],\n            component_version="componentVersion",\n            lambda_arn="lambdaArn"\n        ),\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['inline_recipe', 'lambda_function', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnComponentVersionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_greengrassv2.CfnDeploymentProps
class CfnDeploymentPropsDef(BaseCfnProperty):
    target_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the target AWS IoT thing or thing group.\n')
    components: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_ComponentDeploymentSpecificationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.\n")
    deployment_name: typing.Optional[str] = pydantic.Field(None, description='The name of the deployment.\n')
    deployment_policies: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_DeploymentPoliciesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The deployment policies for the deployment. These policies define how the deployment updates components and handles failure.\n')
    iot_job_configuration: typing.Union[models.UnsupportedResource, models.aws_greengrassv2.CfnDeployment_DeploymentIoTJobConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.\n')
    parent_target_arn: typing.Optional[str] = pydantic.Field(None, description="The parent deployment's `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_ for a subdeployment.\n")
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='Application-specific metadata to attach to the deployment. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see `Tag your AWS IoT Greengrass Version 2 resources <https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html>`_ in the *AWS IoT Greengrass V2 Developer Guide* . This ``Json`` property type is processed as a map of key-value pairs. It uses the following format, which is different from most ``Tags`` implementations in AWS CloudFormation templates:: "Tags": { "KeyName0": "value", "KeyName1": "value", "KeyName2": "value" }\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrassv2-deployment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_greengrassv2 as greengrassv2\n\n    # rate_increase_criteria: Any\n\n    cfn_deployment_props = greengrassv2.CfnDeploymentProps(\n        target_arn="targetArn",\n\n        # the properties below are optional\n        components={\n            "components_key": greengrassv2.CfnDeployment.ComponentDeploymentSpecificationProperty(\n                component_version="componentVersion",\n                configuration_update=greengrassv2.CfnDeployment.ComponentConfigurationUpdateProperty(\n                    merge="merge",\n                    reset=["reset"]\n                ),\n                run_with=greengrassv2.CfnDeployment.ComponentRunWithProperty(\n                    posix_user="posixUser",\n                    system_resource_limits=greengrassv2.CfnDeployment.SystemResourceLimitsProperty(\n                        cpus=123,\n                        memory=123\n                    ),\n                    windows_user="windowsUser"\n                )\n            )\n        },\n        deployment_name="deploymentName",\n        deployment_policies=greengrassv2.CfnDeployment.DeploymentPoliciesProperty(\n            component_update_policy=greengrassv2.CfnDeployment.DeploymentComponentUpdatePolicyProperty(\n                action="action",\n                timeout_in_seconds=123\n            ),\n            configuration_validation_policy=greengrassv2.CfnDeployment.DeploymentConfigurationValidationPolicyProperty(\n                timeout_in_seconds=123\n            ),\n            failure_handling_policy="failureHandlingPolicy"\n        ),\n        iot_job_configuration=greengrassv2.CfnDeployment.DeploymentIoTJobConfigurationProperty(\n            abort_config=greengrassv2.CfnDeployment.IoTJobAbortConfigProperty(\n                criteria_list=[greengrassv2.CfnDeployment.IoTJobAbortCriteriaProperty(\n                    action="action",\n                    failure_type="failureType",\n                    min_number_of_executed_things=123,\n                    threshold_percentage=123\n                )]\n            ),\n            job_executions_rollout_config=greengrassv2.CfnDeployment.IoTJobExecutionsRolloutConfigProperty(\n                exponential_rate=greengrassv2.CfnDeployment.IoTJobExponentialRolloutRateProperty(\n                    base_rate_per_minute=123,\n                    increment_factor=123,\n                    rate_increase_criteria=rate_increase_criteria\n                ),\n                maximum_per_minute=123\n            ),\n            timeout_config=greengrassv2.CfnDeployment.IoTJobTimeoutConfigProperty(\n                in_progress_timeout_in_minutes=123\n            )\n        ),\n        parent_target_arn="parentTargetArn",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_arn', 'components', 'deployment_name', 'deployment_policies', 'iot_job_configuration', 'parent_target_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_greengrassv2.CfnDeploymentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnComponentVersion_ComponentDependencyRequirementProperty: typing.Optional[dict[str, CfnComponentVersion_ComponentDependencyRequirementPropertyDef]] = pydantic.Field(None)
    CfnComponentVersion_ComponentPlatformProperty: typing.Optional[dict[str, CfnComponentVersion_ComponentPlatformPropertyDef]] = pydantic.Field(None)
    CfnComponentVersion_LambdaContainerParamsProperty: typing.Optional[dict[str, CfnComponentVersion_LambdaContainerParamsPropertyDef]] = pydantic.Field(None)
    CfnComponentVersion_LambdaDeviceMountProperty: typing.Optional[dict[str, CfnComponentVersion_LambdaDeviceMountPropertyDef]] = pydantic.Field(None)
    CfnComponentVersion_LambdaEventSourceProperty: typing.Optional[dict[str, CfnComponentVersion_LambdaEventSourcePropertyDef]] = pydantic.Field(None)
    CfnComponentVersion_LambdaExecutionParametersProperty: typing.Optional[dict[str, CfnComponentVersion_LambdaExecutionParametersPropertyDef]] = pydantic.Field(None)
    CfnComponentVersion_LambdaFunctionRecipeSourceProperty: typing.Optional[dict[str, CfnComponentVersion_LambdaFunctionRecipeSourcePropertyDef]] = pydantic.Field(None)
    CfnComponentVersion_LambdaLinuxProcessParamsProperty: typing.Optional[dict[str, CfnComponentVersion_LambdaLinuxProcessParamsPropertyDef]] = pydantic.Field(None)
    CfnComponentVersion_LambdaVolumeMountProperty: typing.Optional[dict[str, CfnComponentVersion_LambdaVolumeMountPropertyDef]] = pydantic.Field(None)
    CfnDeployment_ComponentConfigurationUpdateProperty: typing.Optional[dict[str, CfnDeployment_ComponentConfigurationUpdatePropertyDef]] = pydantic.Field(None)
    CfnDeployment_ComponentDeploymentSpecificationProperty: typing.Optional[dict[str, CfnDeployment_ComponentDeploymentSpecificationPropertyDef]] = pydantic.Field(None)
    CfnDeployment_ComponentRunWithProperty: typing.Optional[dict[str, CfnDeployment_ComponentRunWithPropertyDef]] = pydantic.Field(None)
    CfnDeployment_DeploymentComponentUpdatePolicyProperty: typing.Optional[dict[str, CfnDeployment_DeploymentComponentUpdatePolicyPropertyDef]] = pydantic.Field(None)
    CfnDeployment_DeploymentConfigurationValidationPolicyProperty: typing.Optional[dict[str, CfnDeployment_DeploymentConfigurationValidationPolicyPropertyDef]] = pydantic.Field(None)
    CfnDeployment_DeploymentIoTJobConfigurationProperty: typing.Optional[dict[str, CfnDeployment_DeploymentIoTJobConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDeployment_DeploymentPoliciesProperty: typing.Optional[dict[str, CfnDeployment_DeploymentPoliciesPropertyDef]] = pydantic.Field(None)
    CfnDeployment_IoTJobAbortConfigProperty: typing.Optional[dict[str, CfnDeployment_IoTJobAbortConfigPropertyDef]] = pydantic.Field(None)
    CfnDeployment_IoTJobAbortCriteriaProperty: typing.Optional[dict[str, CfnDeployment_IoTJobAbortCriteriaPropertyDef]] = pydantic.Field(None)
    CfnDeployment_IoTJobExecutionsRolloutConfigProperty: typing.Optional[dict[str, CfnDeployment_IoTJobExecutionsRolloutConfigPropertyDef]] = pydantic.Field(None)
    CfnDeployment_IoTJobExponentialRolloutRateProperty: typing.Optional[dict[str, CfnDeployment_IoTJobExponentialRolloutRatePropertyDef]] = pydantic.Field(None)
    CfnDeployment_IoTJobTimeoutConfigProperty: typing.Optional[dict[str, CfnDeployment_IoTJobTimeoutConfigPropertyDef]] = pydantic.Field(None)
    CfnDeployment_SystemResourceLimitsProperty: typing.Optional[dict[str, CfnDeployment_SystemResourceLimitsPropertyDef]] = pydantic.Field(None)
    CfnComponentVersion: typing.Optional[dict[str, CfnComponentVersionDef]] = pydantic.Field(None)
    CfnDeployment: typing.Optional[dict[str, CfnDeploymentDef]] = pydantic.Field(None)
    CfnComponentVersionProps: typing.Optional[dict[str, CfnComponentVersionPropsDef]] = pydantic.Field(None)
    CfnDeploymentProps: typing.Optional[dict[str, CfnDeploymentPropsDef]] = pydantic.Field(None)
    ...
