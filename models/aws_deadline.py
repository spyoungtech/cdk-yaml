from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_deadline.CfnFleet.AcceleratorCountRangeProperty
class CfnFleet_AcceleratorCountRangePropertyDef(BaseStruct):
    min: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum GPU for the accelerator.\n')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum GPU for the accelerator.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-acceleratorcountrange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    accelerator_count_range_property = deadline.CfnFleet.AcceleratorCountRangeProperty(\n        min=123,\n\n        # the properties below are optional\n        max=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['min', 'max']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.AcceleratorCountRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.AcceleratorTotalMemoryMiBRangeProperty
class CfnFleet_AcceleratorTotalMemoryMiBRangePropertyDef(BaseStruct):
    min: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum amount of memory to use for the accelerator, measured in MiB.\n')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum amount of memory to use for the accelerator, measured in MiB.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-acceleratortotalmemorymibrange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    accelerator_total_memory_mi_bRange_property = deadline.CfnFleet.AcceleratorTotalMemoryMiBRangeProperty(\n        min=123,\n\n        # the properties below are optional\n        max=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['min', 'max']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.AcceleratorTotalMemoryMiBRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.CustomerManagedFleetConfigurationProperty
class CfnFleet_CustomerManagedFleetConfigurationPropertyDef(BaseStruct):
    mode: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS Auto Scaling mode for the customer managed fleet configuration.\n')
    worker_capabilities: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_deadline.CfnFleet_CustomerManagedWorkerCapabilitiesPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The worker capabilities for a customer managed fleet configuration.\n')
    storage_profile_id: typing.Optional[str] = pydantic.Field(None, description='The storage profile ID.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-customermanagedfleetconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    customer_managed_fleet_configuration_property = deadline.CfnFleet.CustomerManagedFleetConfigurationProperty(\n        mode="mode",\n        worker_capabilities=deadline.CfnFleet.CustomerManagedWorkerCapabilitiesProperty(\n            cpu_architecture_type="cpuArchitectureType",\n            memory_mi_b=deadline.CfnFleet.MemoryMiBRangeProperty(\n                min=123,\n\n                # the properties below are optional\n                max=123\n            ),\n            os_family="osFamily",\n            v_cpu_count=deadline.CfnFleet.VCpuCountRangeProperty(\n                min=123,\n\n                # the properties below are optional\n                max=123\n            ),\n\n            # the properties below are optional\n            accelerator_count=deadline.CfnFleet.AcceleratorCountRangeProperty(\n                min=123,\n\n                # the properties below are optional\n                max=123\n            ),\n            accelerator_total_memory_mi_b=deadline.CfnFleet.AcceleratorTotalMemoryMiBRangeProperty(\n                min=123,\n\n                # the properties below are optional\n                max=123\n            ),\n            accelerator_types=["acceleratorTypes"],\n            custom_amounts=[deadline.CfnFleet.FleetAmountCapabilityProperty(\n                min=123,\n                name="name",\n\n                # the properties below are optional\n                max=123\n            )],\n            custom_attributes=[deadline.CfnFleet.FleetAttributeCapabilityProperty(\n                name="name",\n                values=["values"]\n            )]\n        ),\n\n        # the properties below are optional\n        storage_profile_id="storageProfileId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mode', 'worker_capabilities', 'storage_profile_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.CustomerManagedFleetConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.CustomerManagedWorkerCapabilitiesProperty
class CfnFleet_CustomerManagedWorkerCapabilitiesPropertyDef(BaseStruct):
    cpu_architecture_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The CPU architecture type for the customer managed worker capabilities.\n')
    memory_mib: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_deadline.CfnFleet_MemoryMiBRangePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The memory (MiB).\n')
    os_family: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The operating system (OS) family.\n')
    v_cpu_count: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_deadline.CfnFleet_VCpuCountRangePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The vCPU count for the customer manged worker capabilities.\n')
    accelerator_count: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_AcceleratorCountRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The range of the accelerator.\n')
    accelerator_total_memory_mib: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_AcceleratorTotalMemoryMiBRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The total memory (MiB) for the customer managed worker capabilities.\n')
    accelerator_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The accelerator types for the customer managed worker capabilities.\n')
    custom_amounts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAmountCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Custom requirement ranges for customer managed worker capabilities.\n')
    custom_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAttributeCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Custom attributes for the customer manged worker capabilities.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-customermanagedworkercapabilities.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    customer_managed_worker_capabilities_property = deadline.CfnFleet.CustomerManagedWorkerCapabilitiesProperty(\n        cpu_architecture_type="cpuArchitectureType",\n        memory_mi_b=deadline.CfnFleet.MemoryMiBRangeProperty(\n            min=123,\n\n            # the properties below are optional\n            max=123\n        ),\n        os_family="osFamily",\n        v_cpu_count=deadline.CfnFleet.VCpuCountRangeProperty(\n            min=123,\n\n            # the properties below are optional\n            max=123\n        ),\n\n        # the properties below are optional\n        accelerator_count=deadline.CfnFleet.AcceleratorCountRangeProperty(\n            min=123,\n\n            # the properties below are optional\n            max=123\n        ),\n        accelerator_total_memory_mi_b=deadline.CfnFleet.AcceleratorTotalMemoryMiBRangeProperty(\n            min=123,\n\n            # the properties below are optional\n            max=123\n        ),\n        accelerator_types=["acceleratorTypes"],\n        custom_amounts=[deadline.CfnFleet.FleetAmountCapabilityProperty(\n            min=123,\n            name="name",\n\n            # the properties below are optional\n            max=123\n        )],\n        custom_attributes=[deadline.CfnFleet.FleetAttributeCapabilityProperty(\n            name="name",\n            values=["values"]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cpu_architecture_type', 'memory_mib', 'os_family', 'v_cpu_count', 'accelerator_count', 'accelerator_total_memory_mib', 'accelerator_types', 'custom_amounts', 'custom_attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.CustomerManagedWorkerCapabilitiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.Ec2EbsVolumeProperty
class CfnFleet_Ec2EbsVolumePropertyDef(BaseStruct):
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='The IOPS per volume. Default: - 3000\n')
    size_gib: typing.Union[int, float, None] = pydantic.Field(None, description='The EBS volume size in GiB. Default: - 250\n')
    throughput_mib: typing.Union[int, float, None] = pydantic.Field(None, description='The throughput per volume in MiB. Default: - 125\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-ec2ebsvolume.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    ec2_ebs_volume_property = deadline.CfnFleet.Ec2EbsVolumeProperty(\n        iops=123,\n        size_gi_b=123,\n        throughput_mi_b=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['iops', 'size_gib', 'throughput_mib']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.Ec2EbsVolumeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.FleetAmountCapabilityProperty
class CfnFleet_FleetAmountCapabilityPropertyDef(BaseStruct):
    min: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum amount of fleet worker capability.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the fleet capability.\n')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum amount of the fleet worker capability.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-fleetamountcapability.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    fleet_amount_capability_property = deadline.CfnFleet.FleetAmountCapabilityProperty(\n        min=123,\n        name="name",\n\n        # the properties below are optional\n        max=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['min', 'name', 'max']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.FleetAmountCapabilityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.FleetAttributeCapabilityProperty
class CfnFleet_FleetAttributeCapabilityPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the fleet attribute capability for the worker.\n')
    values: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The number of fleet attribute capabilities.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-fleetattributecapability.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    fleet_attribute_capability_property = deadline.CfnFleet.FleetAttributeCapabilityProperty(\n        name="name",\n        values=["values"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'values']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.FleetAttributeCapabilityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.FleetCapabilitiesProperty
class CfnFleet_FleetCapabilitiesPropertyDef(BaseStruct):
    amounts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAmountCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Amount capabilities of the fleet.\n')
    attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAttributeCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Attribute capabilities of the fleet.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-fleetcapabilities.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    fleet_capabilities_property = deadline.CfnFleet.FleetCapabilitiesProperty(\n        amounts=[deadline.CfnFleet.FleetAmountCapabilityProperty(\n            min=123,\n            name="name",\n\n            # the properties below are optional\n            max=123\n        )],\n        attributes=[deadline.CfnFleet.FleetAttributeCapabilityProperty(\n            name="name",\n            values=["values"]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['amounts', 'attributes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.FleetCapabilitiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.FleetConfigurationProperty
class CfnFleet_FleetConfigurationPropertyDef(BaseStruct):
    customer_managed: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_CustomerManagedFleetConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The customer managed fleets within a fleet configuration.\n')
    service_managed_ec2: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_ServiceManagedEc2FleetConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The service managed Amazon EC2 instances for a fleet configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-fleetconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    fleet_configuration_property = deadline.CfnFleet.FleetConfigurationProperty(\n        customer_managed=deadline.CfnFleet.CustomerManagedFleetConfigurationProperty(\n            mode="mode",\n            worker_capabilities=deadline.CfnFleet.CustomerManagedWorkerCapabilitiesProperty(\n                cpu_architecture_type="cpuArchitectureType",\n                memory_mi_b=deadline.CfnFleet.MemoryMiBRangeProperty(\n                    min=123,\n\n                    # the properties below are optional\n                    max=123\n                ),\n                os_family="osFamily",\n                v_cpu_count=deadline.CfnFleet.VCpuCountRangeProperty(\n                    min=123,\n\n                    # the properties below are optional\n                    max=123\n                ),\n\n                # the properties below are optional\n                accelerator_count=deadline.CfnFleet.AcceleratorCountRangeProperty(\n                    min=123,\n\n                    # the properties below are optional\n                    max=123\n                ),\n                accelerator_total_memory_mi_b=deadline.CfnFleet.AcceleratorTotalMemoryMiBRangeProperty(\n                    min=123,\n\n                    # the properties below are optional\n                    max=123\n                ),\n                accelerator_types=["acceleratorTypes"],\n                custom_amounts=[deadline.CfnFleet.FleetAmountCapabilityProperty(\n                    min=123,\n                    name="name",\n\n                    # the properties below are optional\n                    max=123\n                )],\n                custom_attributes=[deadline.CfnFleet.FleetAttributeCapabilityProperty(\n                    name="name",\n                    values=["values"]\n                )]\n            ),\n\n            # the properties below are optional\n            storage_profile_id="storageProfileId"\n        ),\n        service_managed_ec2=deadline.CfnFleet.ServiceManagedEc2FleetConfigurationProperty(\n            instance_capabilities=deadline.CfnFleet.ServiceManagedEc2InstanceCapabilitiesProperty(\n                cpu_architecture_type="cpuArchitectureType",\n                memory_mi_b=deadline.CfnFleet.MemoryMiBRangeProperty(\n                    min=123,\n\n                    # the properties below are optional\n                    max=123\n                ),\n                os_family="osFamily",\n                v_cpu_count=deadline.CfnFleet.VCpuCountRangeProperty(\n                    min=123,\n\n                    # the properties below are optional\n                    max=123\n                ),\n\n                # the properties below are optional\n                allowed_instance_types=["allowedInstanceTypes"],\n                custom_amounts=[deadline.CfnFleet.FleetAmountCapabilityProperty(\n                    min=123,\n                    name="name",\n\n                    # the properties below are optional\n                    max=123\n                )],\n                custom_attributes=[deadline.CfnFleet.FleetAttributeCapabilityProperty(\n                    name="name",\n                    values=["values"]\n                )],\n                excluded_instance_types=["excludedInstanceTypes"],\n                root_ebs_volume=deadline.CfnFleet.Ec2EbsVolumeProperty(\n                    iops=123,\n                    size_gi_b=123,\n                    throughput_mi_b=123\n                )\n            ),\n            instance_market_options=deadline.CfnFleet.ServiceManagedEc2InstanceMarketOptionsProperty(\n                type="type"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['customer_managed', 'service_managed_ec2']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.FleetConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.MemoryMiBRangeProperty
class CfnFleet_MemoryMiBRangePropertyDef(BaseStruct):
    min: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum amount of memory (in MiB).\n')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum amount of memory (in MiB).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-memorymibrange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    memory_mi_bRange_property = deadline.CfnFleet.MemoryMiBRangeProperty(\n        min=123,\n\n        # the properties below are optional\n        max=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['min', 'max']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.MemoryMiBRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.ServiceManagedEc2FleetConfigurationProperty
class CfnFleet_ServiceManagedEc2FleetConfigurationPropertyDef(BaseStruct):
    instance_capabilities: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_deadline.CfnFleet_ServiceManagedEc2InstanceCapabilitiesPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon EC2 instance capabilities.\n')
    instance_market_options: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_deadline.CfnFleet_ServiceManagedEc2InstanceMarketOptionsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon EC2 market type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-servicemanagedec2fleetconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    service_managed_ec2_fleet_configuration_property = deadline.CfnFleet.ServiceManagedEc2FleetConfigurationProperty(\n        instance_capabilities=deadline.CfnFleet.ServiceManagedEc2InstanceCapabilitiesProperty(\n            cpu_architecture_type="cpuArchitectureType",\n            memory_mi_b=deadline.CfnFleet.MemoryMiBRangeProperty(\n                min=123,\n\n                # the properties below are optional\n                max=123\n            ),\n            os_family="osFamily",\n            v_cpu_count=deadline.CfnFleet.VCpuCountRangeProperty(\n                min=123,\n\n                # the properties below are optional\n                max=123\n            ),\n\n            # the properties below are optional\n            allowed_instance_types=["allowedInstanceTypes"],\n            custom_amounts=[deadline.CfnFleet.FleetAmountCapabilityProperty(\n                min=123,\n                name="name",\n\n                # the properties below are optional\n                max=123\n            )],\n            custom_attributes=[deadline.CfnFleet.FleetAttributeCapabilityProperty(\n                name="name",\n                values=["values"]\n            )],\n            excluded_instance_types=["excludedInstanceTypes"],\n            root_ebs_volume=deadline.CfnFleet.Ec2EbsVolumeProperty(\n                iops=123,\n                size_gi_b=123,\n                throughput_mi_b=123\n            )\n        ),\n        instance_market_options=deadline.CfnFleet.ServiceManagedEc2InstanceMarketOptionsProperty(\n            type="type"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_capabilities', 'instance_market_options']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.ServiceManagedEc2FleetConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.ServiceManagedEc2InstanceCapabilitiesProperty
class CfnFleet_ServiceManagedEc2InstanceCapabilitiesPropertyDef(BaseStruct):
    cpu_architecture_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The CPU architecture type.\n')
    memory_mib: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_deadline.CfnFleet_MemoryMiBRangePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The memory, as MiB, for the Amazon EC2 instance type.\n')
    os_family: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The operating system (OS) family.\n')
    v_cpu_count: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_deadline.CfnFleet_VCpuCountRangePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The amount of vCPU to require for instances in this fleet.\n')
    allowed_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The allowable Amazon EC2 instance types.\n')
    custom_amounts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAmountCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The custom capability amounts to require for instances in this fleet.\n')
    custom_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAttributeCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The custom capability attributes to require for instances in this fleet.\n')
    excluded_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The instance types to exclude from the fleet.\n')
    root_ebs_volume: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_Ec2EbsVolumePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The root EBS volume.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-servicemanagedec2instancecapabilities.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    service_managed_ec2_instance_capabilities_property = deadline.CfnFleet.ServiceManagedEc2InstanceCapabilitiesProperty(\n        cpu_architecture_type="cpuArchitectureType",\n        memory_mi_b=deadline.CfnFleet.MemoryMiBRangeProperty(\n            min=123,\n\n            # the properties below are optional\n            max=123\n        ),\n        os_family="osFamily",\n        v_cpu_count=deadline.CfnFleet.VCpuCountRangeProperty(\n            min=123,\n\n            # the properties below are optional\n            max=123\n        ),\n\n        # the properties below are optional\n        allowed_instance_types=["allowedInstanceTypes"],\n        custom_amounts=[deadline.CfnFleet.FleetAmountCapabilityProperty(\n            min=123,\n            name="name",\n\n            # the properties below are optional\n            max=123\n        )],\n        custom_attributes=[deadline.CfnFleet.FleetAttributeCapabilityProperty(\n            name="name",\n            values=["values"]\n        )],\n        excluded_instance_types=["excludedInstanceTypes"],\n        root_ebs_volume=deadline.CfnFleet.Ec2EbsVolumeProperty(\n            iops=123,\n            size_gi_b=123,\n            throughput_mi_b=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cpu_architecture_type', 'memory_mib', 'os_family', 'v_cpu_count', 'allowed_instance_types', 'custom_amounts', 'custom_attributes', 'excluded_instance_types', 'root_ebs_volume']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.ServiceManagedEc2InstanceCapabilitiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.ServiceManagedEc2InstanceMarketOptionsProperty
class CfnFleet_ServiceManagedEc2InstanceMarketOptionsPropertyDef(BaseStruct):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon EC2 instance type.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-servicemanagedec2instancemarketoptions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    service_managed_ec2_instance_market_options_property = deadline.CfnFleet.ServiceManagedEc2InstanceMarketOptionsProperty(\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.ServiceManagedEc2InstanceMarketOptionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleet.VCpuCountRangeProperty
class CfnFleet_VCpuCountRangePropertyDef(BaseStruct):
    min: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The minimum amount of vCPU.\n')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum amount of vCPU.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-fleet-vcpucountrange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    v_cpu_count_range_property = deadline.CfnFleet.VCpuCountRangeProperty(\n        min=123,\n\n        # the properties below are optional\n        max=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['min', 'max']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet.VCpuCountRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnQueue.JobAttachmentSettingsProperty
class CfnQueue_JobAttachmentSettingsPropertyDef(BaseStruct):
    root_prefix: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The root prefix.\n')
    s3_bucket_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon S3 bucket name.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-queue-jobattachmentsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    job_attachment_settings_property = deadline.CfnQueue.JobAttachmentSettingsProperty(\n        root_prefix="rootPrefix",\n        s3_bucket_name="s3BucketName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['root_prefix', 's3_bucket_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueue.JobAttachmentSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnQueue.JobRunAsUserProperty
class CfnQueue_JobRunAsUserPropertyDef(BaseStruct):
    run_as: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Specifies whether the job should run using the queue's system user or if the job should run using the worker agent system user.\n")
    posix: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnQueue_PosixUserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The user and group that the jobs in the queue run as.\n')
    windows: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnQueue_WindowsUserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Identifies a Microsoft Windows user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-queue-jobrunasuser.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    job_run_as_user_property = deadline.CfnQueue.JobRunAsUserProperty(\n        run_as="runAs",\n\n        # the properties below are optional\n        posix=deadline.CfnQueue.PosixUserProperty(\n            group="group",\n            user="user"\n        ),\n        windows=deadline.CfnQueue.WindowsUserProperty(\n            password_arn="passwordArn",\n            user="user"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['run_as', 'posix', 'windows']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueue.JobRunAsUserProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnQueue.PosixUserProperty
class CfnQueue_PosixUserPropertyDef(BaseStruct):
    group: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the POSIX user's group.\n")
    user: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the POSIX user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-queue-posixuser.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    posix_user_property = deadline.CfnQueue.PosixUserProperty(\n        group="group",\n        user="user"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['group', 'user']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueue.PosixUserProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnQueue.WindowsUserProperty
class CfnQueue_WindowsUserPropertyDef(BaseStruct):
    password_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The password ARN for the Windows user.\n')
    user: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-queue-windowsuser.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    windows_user_property = deadline.CfnQueue.WindowsUserProperty(\n        password_arn="passwordArn",\n        user="user"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['password_arn', 'user']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueue.WindowsUserProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnStorageProfile.FileSystemLocationProperty
class CfnStorageProfile_FileSystemLocationPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The location name.\n')
    path: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The file path.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of file.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-deadline-storageprofile-filesystemlocation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    file_system_location_property = deadline.CfnStorageProfile.FileSystemLocationProperty(\n        name="name",\n        path="path",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'path', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnStorageProfile.FileSystemLocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFarm
class CfnFarmDef(BaseCfnResource):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the farm.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the farm that helps identify what the farm is used for. Default: - ""\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN for the KMS key.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to add to your farm. Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'description', 'kms_key_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFarm'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_deadline.CfnFarmDefConfig] = pydantic.Field(None)


class CfnFarmDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_deadline.CfnFarmDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_deadline.CfnFarmDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_deadline.CfnFarmDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_deadline.CfnFarmDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_deadline.CfnFarmDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_deadline.CfnFarmDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_deadline.CfnFarmDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_deadline.CfnFarmDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_deadline.CfnFarmDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_deadline.CfnFarmDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_deadline.CfnFarmDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_deadline.CfnFarmDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_deadline.CfnFarmDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFarmDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFarmDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFarmDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFarmDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFarmDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFarmDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFarmDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFarmDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFarmDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFarmDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFarmDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnFarmDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFarmDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFarmDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_deadline.CfnFleet
class CfnFleetDef(BaseCfnResource):
    configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The configuration details for the fleet.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the fleet summary to update.\n')
    max_worker_count: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The maximum number of workers specified in the fleet.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IAM role that workers in the fleet use when processing jobs.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description that helps identify what the fleet is used for. Default: - ""\n')
    farm_id: typing.Optional[str] = pydantic.Field(None, description='The farm ID.\n')
    min_worker_count: typing.Union[int, float, None] = pydantic.Field(None, description='The minimum number of workers in the fleet. Default: - 0\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to add to your fleet. Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.')
    _init_params: typing.ClassVar[list[str]] = ['configuration', 'display_name', 'max_worker_count', 'role_arn', 'description', 'farm_id', 'min_worker_count', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AcceleratorCountRangeProperty', 'AcceleratorTotalMemoryMiBRangeProperty', 'CustomerManagedFleetConfigurationProperty', 'CustomerManagedWorkerCapabilitiesProperty', 'Ec2EbsVolumeProperty', 'FleetAmountCapabilityProperty', 'FleetAttributeCapabilityProperty', 'FleetCapabilitiesProperty', 'FleetConfigurationProperty', 'MemoryMiBRangeProperty', 'ServiceManagedEc2FleetConfigurationProperty', 'ServiceManagedEc2InstanceCapabilitiesProperty', 'ServiceManagedEc2InstanceMarketOptionsProperty', 'VCpuCountRangeProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_deadline.CfnFleetDefConfig] = pydantic.Field(None)


class CfnFleetDefConfig(pydantic.BaseModel):
    AcceleratorCountRangeProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefAcceleratorcountrangepropertyParams]] = pydantic.Field(None, description='')
    AcceleratorTotalMemoryMiBRangeProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefAcceleratortotalmemorymibrangepropertyParams]] = pydantic.Field(None, description='')
    CustomerManagedFleetConfigurationProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefCustomermanagedfleetconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CustomerManagedWorkerCapabilitiesProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefCustomermanagedworkercapabilitiespropertyParams]] = pydantic.Field(None, description='')
    Ec2EbsVolumeProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefEc2EbsvolumepropertyParams]] = pydantic.Field(None, description='')
    FleetAmountCapabilityProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefFleetamountcapabilitypropertyParams]] = pydantic.Field(None, description='')
    FleetAttributeCapabilityProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefFleetattributecapabilitypropertyParams]] = pydantic.Field(None, description='')
    FleetCapabilitiesProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefFleetcapabilitiespropertyParams]] = pydantic.Field(None, description='')
    FleetConfigurationProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefFleetconfigurationpropertyParams]] = pydantic.Field(None, description='')
    MemoryMiBRangeProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefMemorymibrangepropertyParams]] = pydantic.Field(None, description='')
    ServiceManagedEc2FleetConfigurationProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefServicemanagedec2FleetconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ServiceManagedEc2InstanceCapabilitiesProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefServicemanagedec2InstancecapabilitiespropertyParams]] = pydantic.Field(None, description='')
    ServiceManagedEc2InstanceMarketOptionsProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefServicemanagedec2InstancemarketoptionspropertyParams]] = pydantic.Field(None, description='')
    VCpuCountRangeProperty: typing.Optional[list[models.aws_deadline.CfnFleetDefVcpucountrangepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_deadline.CfnFleetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_deadline.CfnFleetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_deadline.CfnFleetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_deadline.CfnFleetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_deadline.CfnFleetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_deadline.CfnFleetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_deadline.CfnFleetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_deadline.CfnFleetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_deadline.CfnFleetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_deadline.CfnFleetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_deadline.CfnFleetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_deadline.CfnFleetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_deadline.CfnFleetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_capabilities_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFleetDefAcceleratorcountrangepropertyParams(pydantic.BaseModel):
    min: typing.Union[int, float] = pydantic.Field(..., description='')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefAcceleratortotalmemorymibrangepropertyParams(pydantic.BaseModel):
    min: typing.Union[int, float] = pydantic.Field(..., description='')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefCustomermanagedfleetconfigurationpropertyParams(pydantic.BaseModel):
    mode: str = pydantic.Field(..., description='')
    worker_capabilities: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_CustomerManagedWorkerCapabilitiesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    storage_profile_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFleetDefCustomermanagedworkercapabilitiespropertyParams(pydantic.BaseModel):
    cpu_architecture_type: str = pydantic.Field(..., description='')
    memory_mib: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_MemoryMiBRangePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    os_family: str = pydantic.Field(..., description='')
    v_cpu_count: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_VCpuCountRangePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    accelerator_count: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_AcceleratorCountRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    accelerator_total_memory_mib: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_AcceleratorTotalMemoryMiBRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    accelerator_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    custom_amounts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAmountCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    custom_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAttributeCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefEc2EbsvolumepropertyParams(pydantic.BaseModel):
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='')
    size_gib: typing.Union[int, float, None] = pydantic.Field(None, description='')
    throughput_mib: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefFleetamountcapabilitypropertyParams(pydantic.BaseModel):
    min: typing.Union[int, float] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefFleetattributecapabilitypropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    values: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnFleetDefFleetcapabilitiespropertyParams(pydantic.BaseModel):
    amounts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAmountCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAttributeCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefFleetconfigurationpropertyParams(pydantic.BaseModel):
    customer_managed: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_CustomerManagedFleetConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_managed_ec2: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_ServiceManagedEc2FleetConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefMemorymibrangepropertyParams(pydantic.BaseModel):
    min: typing.Union[int, float] = pydantic.Field(..., description='')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefServicemanagedec2FleetconfigurationpropertyParams(pydantic.BaseModel):
    instance_capabilities: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_ServiceManagedEc2InstanceCapabilitiesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    instance_market_options: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_ServiceManagedEc2InstanceMarketOptionsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnFleetDefServicemanagedec2InstancecapabilitiespropertyParams(pydantic.BaseModel):
    cpu_architecture_type: str = pydantic.Field(..., description='')
    memory_mib: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_MemoryMiBRangePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    os_family: str = pydantic.Field(..., description='')
    v_cpu_count: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_VCpuCountRangePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    allowed_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    custom_amounts: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAmountCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    custom_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetAttributeCapabilityPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    excluded_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    root_ebs_volume: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnFleet_Ec2EbsVolumePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefServicemanagedec2InstancemarketoptionspropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    ...

class CfnFleetDefVcpucountrangepropertyParams(pydantic.BaseModel):
    min: typing.Union[int, float] = pydantic.Field(..., description='')
    max: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFleetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFleetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFleetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFleetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFleetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFleetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFleetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFleetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFleetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFleetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFleetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnFleetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFleetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFleetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_deadline.CfnLicenseEndpoint
class CfnLicenseEndpointDef(BaseCfnResource):
    security_group_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon EC2 security group that controls access to the license endpoint.\n')
    subnet_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Identifies the VPC subnets that can connect to a license endpoint.\n')
    vpc_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The VCP(virtual private cloud) ID associated with the license endpoint.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to add to your license endpoint. Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids', 'vpc_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnLicenseEndpoint'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_deadline.CfnLicenseEndpointDefConfig] = pydantic.Field(None)


class CfnLicenseEndpointDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_deadline.CfnLicenseEndpointDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnLicenseEndpointDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLicenseEndpointDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLicenseEndpointDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLicenseEndpointDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLicenseEndpointDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLicenseEndpointDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLicenseEndpointDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLicenseEndpointDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLicenseEndpointDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLicenseEndpointDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLicenseEndpointDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnLicenseEndpointDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLicenseEndpointDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLicenseEndpointDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_deadline.CfnMeteredProduct
class CfnMeteredProductDef(BaseCfnResource):
    family: typing.Optional[str] = pydantic.Field(None, description='The family to which the metered product belongs.\n')
    license_endpoint_id: typing.Optional[str] = pydantic.Field(None, description='The Amazon EC2 identifier of the license endpoint.\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the metered product should run.\n')
    product_id: typing.Optional[str] = pydantic.Field(None, description='The product ID.\n')
    vendor: typing.Optional[str] = pydantic.Field(None, description='The vendor.')
    _init_params: typing.ClassVar[list[str]] = ['family', 'license_endpoint_id', 'port', 'product_id', 'vendor']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnMeteredProduct'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_deadline.CfnMeteredProductDefConfig] = pydantic.Field(None)


class CfnMeteredProductDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_deadline.CfnMeteredProductDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnMeteredProductDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMeteredProductDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMeteredProductDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMeteredProductDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMeteredProductDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMeteredProductDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMeteredProductDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMeteredProductDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMeteredProductDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMeteredProductDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMeteredProductDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnMeteredProductDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMeteredProductDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMeteredProductDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_deadline.CfnMonitor
class CfnMonitorDef(BaseCfnResource):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the monitor that displays on the Deadline Cloud console.\n')
    identity_center_instance_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the IAM Identity Center instance responsible for authenticating monitor users.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the IAM role for the monitor. Users of the monitor use this role to access Deadline Cloud resources.\n')
    subdomain: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The subdomain used for the monitor URL. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'identity_center_instance_arn', 'role_arn', 'subdomain']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnMonitor'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_deadline.CfnMonitorDefConfig] = pydantic.Field(None)


class CfnMonitorDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_deadline.CfnMonitorDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_deadline.CfnMonitorDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_deadline.CfnMonitorDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_deadline.CfnMonitorDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_deadline.CfnMonitorDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_deadline.CfnMonitorDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_deadline.CfnMonitorDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_deadline.CfnMonitorDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_deadline.CfnMonitorDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_deadline.CfnMonitorDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_deadline.CfnMonitorDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_deadline.CfnMonitorDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_deadline.CfnMonitorDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnMonitorDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMonitorDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMonitorDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMonitorDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMonitorDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMonitorDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMonitorDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMonitorDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMonitorDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMonitorDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMonitorDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnMonitorDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMonitorDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMonitorDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_deadline.CfnQueue
class CfnQueueDef(BaseCfnResource):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the queue summary to update.\n')
    allowed_storage_profile_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The identifiers of the storage profiles that this queue can use to share assets between workers using different operating systems.\n')
    default_budget_action: typing.Optional[str] = pydantic.Field(None, description='The default action taken on a queue summary if a budget wasn\'t configured. Default: - "NONE"\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the queue that helps identify what the queue is used for. Default: - ""\n')
    farm_id: typing.Optional[str] = pydantic.Field(None, description='The farm ID.\n')
    job_attachment_settings: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnQueue_JobAttachmentSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The job attachment settings. These are the Amazon S3 bucket name and the Amazon S3 prefix.\n')
    job_run_as_user: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnQueue_JobRunAsUserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Identifies the user for a job.\n')
    required_file_system_location_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The file system location that the queue uses.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM role that workers use when running jobs in this queue.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to add to your queue. Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'allowed_storage_profile_ids', 'default_budget_action', 'description', 'farm_id', 'job_attachment_settings', 'job_run_as_user', 'required_file_system_location_names', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['JobAttachmentSettingsProperty', 'JobRunAsUserProperty', 'PosixUserProperty', 'WindowsUserProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueue'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_deadline.CfnQueueDefConfig] = pydantic.Field(None)


class CfnQueueDefConfig(pydantic.BaseModel):
    JobAttachmentSettingsProperty: typing.Optional[list[models.aws_deadline.CfnQueueDefJobattachmentsettingspropertyParams]] = pydantic.Field(None, description='')
    JobRunAsUserProperty: typing.Optional[list[models.aws_deadline.CfnQueueDefJobrunasuserpropertyParams]] = pydantic.Field(None, description='')
    PosixUserProperty: typing.Optional[list[models.aws_deadline.CfnQueueDefPosixuserpropertyParams]] = pydantic.Field(None, description='')
    WindowsUserProperty: typing.Optional[list[models.aws_deadline.CfnQueueDefWindowsuserpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_deadline.CfnQueueDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_deadline.CfnQueueDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_deadline.CfnQueueDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_deadline.CfnQueueDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_deadline.CfnQueueDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_deadline.CfnQueueDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_deadline.CfnQueueDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_deadline.CfnQueueDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_deadline.CfnQueueDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_deadline.CfnQueueDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_deadline.CfnQueueDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_deadline.CfnQueueDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_deadline.CfnQueueDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnQueueDefJobattachmentsettingspropertyParams(pydantic.BaseModel):
    root_prefix: str = pydantic.Field(..., description='')
    s3_bucket_name: str = pydantic.Field(..., description='')
    ...

class CfnQueueDefJobrunasuserpropertyParams(pydantic.BaseModel):
    run_as: str = pydantic.Field(..., description='')
    posix: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnQueue_PosixUserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    windows: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnQueue_WindowsUserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnQueueDefPosixuserpropertyParams(pydantic.BaseModel):
    group: str = pydantic.Field(..., description='')
    user: str = pydantic.Field(..., description='')
    ...

class CfnQueueDefWindowsuserpropertyParams(pydantic.BaseModel):
    password_arn: str = pydantic.Field(..., description='')
    user: str = pydantic.Field(..., description='')
    ...

class CfnQueueDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnQueueDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnQueueDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnQueueDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnQueueDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnQueueDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnQueueDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnQueueDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnQueueDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnQueueDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnQueueDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnQueueDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnQueueDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnQueueDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_deadline.CfnQueueEnvironment
class CfnQueueEnvironmentDef(BaseCfnResource):
    farm_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier assigned to the farm that contains the queue.\n')
    priority: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="The queue environment's priority.\n")
    queue_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the queue that contains the environment.\n')
    template: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A JSON or YAML template that describes the processing environment for the queue.\n')
    template_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the template for the queue environment is JSON or YAML.')
    _init_params: typing.ClassVar[list[str]] = ['farm_id', 'priority', 'queue_id', 'template', 'template_type']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueueEnvironment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_deadline.CfnQueueEnvironmentDefConfig] = pydantic.Field(None)


class CfnQueueEnvironmentDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_deadline.CfnQueueEnvironmentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnQueueEnvironmentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnQueueEnvironmentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnQueueEnvironmentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnQueueEnvironmentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnQueueEnvironmentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnQueueEnvironmentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnQueueEnvironmentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnQueueEnvironmentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnQueueEnvironmentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnQueueEnvironmentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnQueueEnvironmentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnQueueEnvironmentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnQueueEnvironmentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnQueueEnvironmentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_deadline.CfnQueueFleetAssociation
class CfnQueueFleetAssociationDef(BaseCfnResource):
    farm_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the farm that contains the queue and the fleet.\n')
    fleet_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The fleet ID.\n')
    queue_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The queue ID.')
    _init_params: typing.ClassVar[list[str]] = ['farm_id', 'fleet_id', 'queue_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueueFleetAssociation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_deadline.CfnQueueFleetAssociationDefConfig] = pydantic.Field(None)


class CfnQueueFleetAssociationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_deadline.CfnQueueFleetAssociationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnQueueFleetAssociationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnQueueFleetAssociationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnQueueFleetAssociationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnQueueFleetAssociationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnQueueFleetAssociationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnQueueFleetAssociationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnQueueFleetAssociationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnQueueFleetAssociationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnQueueFleetAssociationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnQueueFleetAssociationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnQueueFleetAssociationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnQueueFleetAssociationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnQueueFleetAssociationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnQueueFleetAssociationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_deadline.CfnStorageProfile
class CfnStorageProfileDef(BaseCfnResource):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the storage profile summary to update.\n')
    os_family: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The operating system (OS) family.\n')
    farm_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the farm that contains the storage profile.\n')
    file_system_locations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnStorageProfile_FileSystemLocationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Operating system specific file system path to the storage location.')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'os_family', 'farm_id', 'file_system_locations']
    _method_names: typing.ClassVar[list[str]] = ['FileSystemLocationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnStorageProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_deadline.CfnStorageProfileDefConfig] = pydantic.Field(None)


class CfnStorageProfileDefConfig(pydantic.BaseModel):
    FileSystemLocationProperty: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefFilesystemlocationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_deadline.CfnStorageProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnStorageProfileDefFilesystemlocationpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    path: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnStorageProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStorageProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStorageProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStorageProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStorageProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStorageProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStorageProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStorageProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStorageProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStorageProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStorageProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnStorageProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStorageProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStorageProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_deadline.CfnFarmProps
class CfnFarmPropsDef(BaseCfnProperty):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the farm.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the farm that helps identify what the farm is used for. Default: - ""\n')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN for the KMS key.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to add to your farm. Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-deadline-farm.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    cfn_farm_props = deadline.CfnFarmProps(\n        display_name="displayName",\n\n        # the properties below are optional\n        description="description",\n        kms_key_arn="kmsKeyArn",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'description', 'kms_key_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFarmProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnFleetProps
class CfnFleetPropsDef(BaseCfnProperty):
    configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_deadline.CfnFleet_FleetConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The configuration details for the fleet.\n')
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the fleet summary to update.\n')
    max_worker_count: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The maximum number of workers specified in the fleet.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The IAM role that workers in the fleet use when processing jobs.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description that helps identify what the fleet is used for. Default: - ""\n')
    farm_id: typing.Optional[str] = pydantic.Field(None, description='The farm ID.\n')
    min_worker_count: typing.Union[int, float, None] = pydantic.Field(None, description='The minimum number of workers in the fleet. Default: - 0\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to add to your fleet. Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-deadline-fleet.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    cfn_fleet_props = deadline.CfnFleetProps(\n        configuration=deadline.CfnFleet.FleetConfigurationProperty(\n            customer_managed=deadline.CfnFleet.CustomerManagedFleetConfigurationProperty(\n                mode="mode",\n                worker_capabilities=deadline.CfnFleet.CustomerManagedWorkerCapabilitiesProperty(\n                    cpu_architecture_type="cpuArchitectureType",\n                    memory_mi_b=deadline.CfnFleet.MemoryMiBRangeProperty(\n                        min=123,\n\n                        # the properties below are optional\n                        max=123\n                    ),\n                    os_family="osFamily",\n                    v_cpu_count=deadline.CfnFleet.VCpuCountRangeProperty(\n                        min=123,\n\n                        # the properties below are optional\n                        max=123\n                    ),\n\n                    # the properties below are optional\n                    accelerator_count=deadline.CfnFleet.AcceleratorCountRangeProperty(\n                        min=123,\n\n                        # the properties below are optional\n                        max=123\n                    ),\n                    accelerator_total_memory_mi_b=deadline.CfnFleet.AcceleratorTotalMemoryMiBRangeProperty(\n                        min=123,\n\n                        # the properties below are optional\n                        max=123\n                    ),\n                    accelerator_types=["acceleratorTypes"],\n                    custom_amounts=[deadline.CfnFleet.FleetAmountCapabilityProperty(\n                        min=123,\n                        name="name",\n\n                        # the properties below are optional\n                        max=123\n                    )],\n                    custom_attributes=[deadline.CfnFleet.FleetAttributeCapabilityProperty(\n                        name="name",\n                        values=["values"]\n                    )]\n                ),\n\n                # the properties below are optional\n                storage_profile_id="storageProfileId"\n            ),\n            service_managed_ec2=deadline.CfnFleet.ServiceManagedEc2FleetConfigurationProperty(\n                instance_capabilities=deadline.CfnFleet.ServiceManagedEc2InstanceCapabilitiesProperty(\n                    cpu_architecture_type="cpuArchitectureType",\n                    memory_mi_b=deadline.CfnFleet.MemoryMiBRangeProperty(\n                        min=123,\n\n                        # the properties below are optional\n                        max=123\n                    ),\n                    os_family="osFamily",\n                    v_cpu_count=deadline.CfnFleet.VCpuCountRangeProperty(\n                        min=123,\n\n                        # the properties below are optional\n                        max=123\n                    ),\n\n                    # the properties below are optional\n                    allowed_instance_types=["allowedInstanceTypes"],\n                    custom_amounts=[deadline.CfnFleet.FleetAmountCapabilityProperty(\n                        min=123,\n                        name="name",\n\n                        # the properties below are optional\n                        max=123\n                    )],\n                    custom_attributes=[deadline.CfnFleet.FleetAttributeCapabilityProperty(\n                        name="name",\n                        values=["values"]\n                    )],\n                    excluded_instance_types=["excludedInstanceTypes"],\n                    root_ebs_volume=deadline.CfnFleet.Ec2EbsVolumeProperty(\n                        iops=123,\n                        size_gi_b=123,\n                        throughput_mi_b=123\n                    )\n                ),\n                instance_market_options=deadline.CfnFleet.ServiceManagedEc2InstanceMarketOptionsProperty(\n                    type="type"\n                )\n            )\n        ),\n        display_name="displayName",\n        max_worker_count=123,\n        role_arn="roleArn",\n\n        # the properties below are optional\n        description="description",\n        farm_id="farmId",\n        min_worker_count=123,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration', 'display_name', 'max_worker_count', 'role_arn', 'description', 'farm_id', 'min_worker_count', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnFleetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnLicenseEndpointProps
class CfnLicenseEndpointPropsDef(BaseCfnProperty):
    security_group_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the Amazon EC2 security group that controls access to the license endpoint.\n')
    subnet_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Identifies the VPC subnets that can connect to a license endpoint.\n')
    vpc_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The VCP(virtual private cloud) ID associated with the license endpoint.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to add to your license endpoint. Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-deadline-licenseendpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    cfn_license_endpoint_props = deadline.CfnLicenseEndpointProps(\n        security_group_ids=["securityGroupIds"],\n        subnet_ids=["subnetIds"],\n        vpc_id="vpcId",\n\n        # the properties below are optional\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids', 'vpc_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnLicenseEndpointProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnMeteredProductProps
class CfnMeteredProductPropsDef(BaseCfnProperty):
    family: typing.Optional[str] = pydantic.Field(None, description='The family to which the metered product belongs.\n')
    license_endpoint_id: typing.Optional[str] = pydantic.Field(None, description='The Amazon EC2 identifier of the license endpoint.\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port on which the metered product should run.\n')
    product_id: typing.Optional[str] = pydantic.Field(None, description='The product ID.\n')
    vendor: typing.Optional[str] = pydantic.Field(None, description='The vendor.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-deadline-meteredproduct.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    cfn_metered_product_props = deadline.CfnMeteredProductProps(\n        family="family",\n        license_endpoint_id="licenseEndpointId",\n        port=123,\n        product_id="productId",\n        vendor="vendor"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['family', 'license_endpoint_id', 'port', 'product_id', 'vendor']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnMeteredProductProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnMonitorProps
class CfnMonitorPropsDef(BaseCfnProperty):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the monitor that displays on the Deadline Cloud console.\n')
    identity_center_instance_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the IAM Identity Center instance responsible for authenticating monitor users.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the IAM role for the monitor. Users of the monitor use this role to access Deadline Cloud resources.\n')
    subdomain: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The subdomain used for the monitor URL. The full URL of the monitor is subdomain.Region.deadlinecloud.amazonaws.com.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-deadline-monitor.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    cfn_monitor_props = deadline.CfnMonitorProps(\n        display_name="displayName",\n        identity_center_instance_arn="identityCenterInstanceArn",\n        role_arn="roleArn",\n        subdomain="subdomain"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'identity_center_instance_arn', 'role_arn', 'subdomain']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnMonitorProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnQueueEnvironmentProps
class CfnQueueEnvironmentPropsDef(BaseCfnProperty):
    farm_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier assigned to the farm that contains the queue.\n')
    priority: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description="The queue environment's priority.\n")
    queue_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier of the queue that contains the environment.\n')
    template: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A JSON or YAML template that describes the processing environment for the queue.\n')
    template_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the template for the queue environment is JSON or YAML.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-deadline-queueenvironment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    cfn_queue_environment_props = deadline.CfnQueueEnvironmentProps(\n        farm_id="farmId",\n        priority=123,\n        queue_id="queueId",\n        template="template",\n        template_type="templateType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['farm_id', 'priority', 'queue_id', 'template', 'template_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueueEnvironmentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnQueueFleetAssociationProps
class CfnQueueFleetAssociationPropsDef(BaseCfnProperty):
    farm_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the farm that contains the queue and the fleet.\n')
    fleet_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The fleet ID.\n')
    queue_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The queue ID.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-deadline-queuefleetassociation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    cfn_queue_fleet_association_props = deadline.CfnQueueFleetAssociationProps(\n        farm_id="farmId",\n        fleet_id="fleetId",\n        queue_id="queueId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['farm_id', 'fleet_id', 'queue_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueueFleetAssociationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnQueueProps
class CfnQueuePropsDef(BaseCfnProperty):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the queue summary to update.\n')
    allowed_storage_profile_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The identifiers of the storage profiles that this queue can use to share assets between workers using different operating systems.\n')
    default_budget_action: typing.Optional[str] = pydantic.Field(None, description='The default action taken on a queue summary if a budget wasn\'t configured. Default: - "NONE"\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the queue that helps identify what the queue is used for. Default: - ""\n')
    farm_id: typing.Optional[str] = pydantic.Field(None, description='The farm ID.\n')
    job_attachment_settings: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnQueue_JobAttachmentSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The job attachment settings. These are the Amazon S3 bucket name and the Amazon S3 prefix.\n')
    job_run_as_user: typing.Union[models.UnsupportedResource, models.aws_deadline.CfnQueue_JobRunAsUserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Identifies the user for a job.\n')
    required_file_system_location_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The file system location that the queue uses.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM role that workers use when running jobs in this queue.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to add to your queue. Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-deadline-queue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    cfn_queue_props = deadline.CfnQueueProps(\n        display_name="displayName",\n\n        # the properties below are optional\n        allowed_storage_profile_ids=["allowedStorageProfileIds"],\n        default_budget_action="defaultBudgetAction",\n        description="description",\n        farm_id="farmId",\n        job_attachment_settings=deadline.CfnQueue.JobAttachmentSettingsProperty(\n            root_prefix="rootPrefix",\n            s3_bucket_name="s3BucketName"\n        ),\n        job_run_as_user=deadline.CfnQueue.JobRunAsUserProperty(\n            run_as="runAs",\n\n            # the properties below are optional\n            posix=deadline.CfnQueue.PosixUserProperty(\n                group="group",\n                user="user"\n            ),\n            windows=deadline.CfnQueue.WindowsUserProperty(\n                password_arn="passwordArn",\n                user="user"\n            )\n        ),\n        required_file_system_location_names=["requiredFileSystemLocationNames"],\n        role_arn="roleArn",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'allowed_storage_profile_ids', 'default_budget_action', 'description', 'farm_id', 'job_attachment_settings', 'job_run_as_user', 'required_file_system_location_names', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnQueueProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_deadline.CfnStorageProfileProps
class CfnStorageProfilePropsDef(BaseCfnProperty):
    display_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The display name of the storage profile summary to update.\n')
    os_family: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The operating system (OS) family.\n')
    farm_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of the farm that contains the storage profile.\n')
    file_system_locations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_deadline.CfnStorageProfile_FileSystemLocationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Operating system specific file system path to the storage location.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-deadline-storageprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_deadline as deadline\n\n    cfn_storage_profile_props = deadline.CfnStorageProfileProps(\n        display_name="displayName",\n        os_family="osFamily",\n\n        # the properties below are optional\n        farm_id="farmId",\n        file_system_locations=[deadline.CfnStorageProfile.FileSystemLocationProperty(\n            name="name",\n            path="path",\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['display_name', 'os_family', 'farm_id', 'file_system_locations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_deadline.CfnStorageProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnFleet_AcceleratorCountRangeProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_AcceleratorCountRangePropertyDef]] = pydantic.Field(None)
    CfnFleet_AcceleratorTotalMemoryMiBRangeProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_AcceleratorTotalMemoryMiBRangePropertyDef]] = pydantic.Field(None)
    CfnFleet_CustomerManagedFleetConfigurationProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_CustomerManagedFleetConfigurationPropertyDef]] = pydantic.Field(None)
    CfnFleet_CustomerManagedWorkerCapabilitiesProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_CustomerManagedWorkerCapabilitiesPropertyDef]] = pydantic.Field(None)
    CfnFleet_Ec2EbsVolumeProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_Ec2EbsVolumePropertyDef]] = pydantic.Field(None)
    CfnFleet_FleetAmountCapabilityProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_FleetAmountCapabilityPropertyDef]] = pydantic.Field(None)
    CfnFleet_FleetAttributeCapabilityProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_FleetAttributeCapabilityPropertyDef]] = pydantic.Field(None)
    CfnFleet_FleetCapabilitiesProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_FleetCapabilitiesPropertyDef]] = pydantic.Field(None)
    CfnFleet_FleetConfigurationProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_FleetConfigurationPropertyDef]] = pydantic.Field(None)
    CfnFleet_MemoryMiBRangeProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_MemoryMiBRangePropertyDef]] = pydantic.Field(None)
    CfnFleet_ServiceManagedEc2FleetConfigurationProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_ServiceManagedEc2FleetConfigurationPropertyDef]] = pydantic.Field(None)
    CfnFleet_ServiceManagedEc2InstanceCapabilitiesProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_ServiceManagedEc2InstanceCapabilitiesPropertyDef]] = pydantic.Field(None)
    CfnFleet_ServiceManagedEc2InstanceMarketOptionsProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_ServiceManagedEc2InstanceMarketOptionsPropertyDef]] = pydantic.Field(None)
    CfnFleet_VCpuCountRangeProperty: typing.Optional[dict[str, models.aws_deadline.CfnFleet_VCpuCountRangePropertyDef]] = pydantic.Field(None)
    CfnQueue_JobAttachmentSettingsProperty: typing.Optional[dict[str, models.aws_deadline.CfnQueue_JobAttachmentSettingsPropertyDef]] = pydantic.Field(None)
    CfnQueue_JobRunAsUserProperty: typing.Optional[dict[str, models.aws_deadline.CfnQueue_JobRunAsUserPropertyDef]] = pydantic.Field(None)
    CfnQueue_PosixUserProperty: typing.Optional[dict[str, models.aws_deadline.CfnQueue_PosixUserPropertyDef]] = pydantic.Field(None)
    CfnQueue_WindowsUserProperty: typing.Optional[dict[str, models.aws_deadline.CfnQueue_WindowsUserPropertyDef]] = pydantic.Field(None)
    CfnStorageProfile_FileSystemLocationProperty: typing.Optional[dict[str, models.aws_deadline.CfnStorageProfile_FileSystemLocationPropertyDef]] = pydantic.Field(None)
    CfnFarm: typing.Optional[dict[str, models.aws_deadline.CfnFarmDef]] = pydantic.Field(None)
    CfnFleet: typing.Optional[dict[str, models.aws_deadline.CfnFleetDef]] = pydantic.Field(None)
    CfnLicenseEndpoint: typing.Optional[dict[str, models.aws_deadline.CfnLicenseEndpointDef]] = pydantic.Field(None)
    CfnMeteredProduct: typing.Optional[dict[str, models.aws_deadline.CfnMeteredProductDef]] = pydantic.Field(None)
    CfnMonitor: typing.Optional[dict[str, models.aws_deadline.CfnMonitorDef]] = pydantic.Field(None)
    CfnQueue: typing.Optional[dict[str, models.aws_deadline.CfnQueueDef]] = pydantic.Field(None)
    CfnQueueEnvironment: typing.Optional[dict[str, models.aws_deadline.CfnQueueEnvironmentDef]] = pydantic.Field(None)
    CfnQueueFleetAssociation: typing.Optional[dict[str, models.aws_deadline.CfnQueueFleetAssociationDef]] = pydantic.Field(None)
    CfnStorageProfile: typing.Optional[dict[str, models.aws_deadline.CfnStorageProfileDef]] = pydantic.Field(None)
    CfnFarmProps: typing.Optional[dict[str, models.aws_deadline.CfnFarmPropsDef]] = pydantic.Field(None)
    CfnFleetProps: typing.Optional[dict[str, models.aws_deadline.CfnFleetPropsDef]] = pydantic.Field(None)
    CfnLicenseEndpointProps: typing.Optional[dict[str, models.aws_deadline.CfnLicenseEndpointPropsDef]] = pydantic.Field(None)
    CfnMeteredProductProps: typing.Optional[dict[str, models.aws_deadline.CfnMeteredProductPropsDef]] = pydantic.Field(None)
    CfnMonitorProps: typing.Optional[dict[str, models.aws_deadline.CfnMonitorPropsDef]] = pydantic.Field(None)
    CfnQueueEnvironmentProps: typing.Optional[dict[str, models.aws_deadline.CfnQueueEnvironmentPropsDef]] = pydantic.Field(None)
    CfnQueueFleetAssociationProps: typing.Optional[dict[str, models.aws_deadline.CfnQueueFleetAssociationPropsDef]] = pydantic.Field(None)
    CfnQueueProps: typing.Optional[dict[str, models.aws_deadline.CfnQueuePropsDef]] = pydantic.Field(None)
    CfnStorageProfileProps: typing.Optional[dict[str, models.aws_deadline.CfnStorageProfilePropsDef]] = pydantic.Field(None)
    ...

import models
