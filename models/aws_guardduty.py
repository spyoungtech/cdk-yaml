from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_guardduty.CfnDetector.CFNDataSourceConfigurationsProperty
class CfnDetector_CFNDataSourceConfigurationsPropertyDef(BaseStruct):
    kubernetes: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNKubernetesConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes which Kubernetes data sources are enabled for a detector.\n')
    malware_protection: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNMalwareProtectionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes whether Malware Protection will be enabled as a data source.\n')
    s3_logs: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNS3LogsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes whether S3 data event logs are enabled as a data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-detector-cfndatasourceconfigurations.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNData_source_configurations_property = guardduty.CfnDetector.CFNDataSourceConfigurationsProperty(\n        kubernetes=guardduty.CfnDetector.CFNKubernetesConfigurationProperty(\n            audit_logs=guardduty.CfnDetector.CFNKubernetesAuditLogsConfigurationProperty(\n                enable=False\n            )\n        ),\n        malware_protection=guardduty.CfnDetector.CFNMalwareProtectionConfigurationProperty(\n            scan_ec2_instance_with_findings=guardduty.CfnDetector.CFNScanEc2InstanceWithFindingsConfigurationProperty(\n                ebs_volumes=False\n            )\n        ),\n        s3_logs=guardduty.CfnDetector.CFNS3LogsConfigurationProperty(\n            enable=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kubernetes', 'malware_protection', 's3_logs']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector.CFNDataSourceConfigurationsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnDetector.CFNFeatureAdditionalConfigurationProperty
class CfnDetector_CFNFeatureAdditionalConfigurationPropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='Name of the additional configuration.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='Status of the additional configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-detector-cfnfeatureadditionalconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNFeature_additional_configuration_property = guardduty.CfnDetector.CFNFeatureAdditionalConfigurationProperty(\n        name="name",\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector.CFNFeatureAdditionalConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnDetector.CFNFeatureConfigurationProperty
class CfnDetector_CFNFeatureConfigurationPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the feature. For a list of allowed values, see `DetectorFeatureConfiguration <https://docs.aws.amazon.com/guardduty/latest/APIReference/API_DetectorFeatureConfiguration.html#guardduty-Type-DetectorFeatureConfiguration-name>`_ in the *GuardDuty API Reference* .\n')
    status: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Status of the feature configuration.\n')
    additional_configuration: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNFeatureAdditionalConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Information about the additional configuration of a feature in your account.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-detector-cfnfeatureconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNFeature_configuration_property = guardduty.CfnDetector.CFNFeatureConfigurationProperty(\n        name="name",\n        status="status",\n\n        # the properties below are optional\n        additional_configuration=[guardduty.CfnDetector.CFNFeatureAdditionalConfigurationProperty(\n            name="name",\n            status="status"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'status', 'additional_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector.CFNFeatureConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnDetector.CFNKubernetesAuditLogsConfigurationProperty
class CfnDetector_CFNKubernetesAuditLogsConfigurationPropertyDef(BaseStruct):
    enable: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Describes whether Kubernetes audit logs are enabled as a data source for the detector.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-detector-cfnkubernetesauditlogsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNKubernetes_audit_logs_configuration_property = guardduty.CfnDetector.CFNKubernetesAuditLogsConfigurationProperty(\n        enable=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector.CFNKubernetesAuditLogsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnDetector.CFNKubernetesConfigurationProperty
class CfnDetector_CFNKubernetesConfigurationPropertyDef(BaseStruct):
    audit_logs: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNKubernetesAuditLogsConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Describes whether Kubernetes audit logs are enabled as a data source for the detector.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-detector-cfnkubernetesconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNKubernetes_configuration_property = guardduty.CfnDetector.CFNKubernetesConfigurationProperty(\n        audit_logs=guardduty.CfnDetector.CFNKubernetesAuditLogsConfigurationProperty(\n            enable=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['audit_logs']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector.CFNKubernetesConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnDetector.CFNMalwareProtectionConfigurationProperty
class CfnDetector_CFNMalwareProtectionConfigurationPropertyDef(BaseStruct):
    scan_ec2_instance_with_findings: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNScanEc2InstanceWithFindingsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes the configuration of Malware Protection for EC2 instances with findings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-detector-cfnmalwareprotectionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNMalware_protection_configuration_property = guardduty.CfnDetector.CFNMalwareProtectionConfigurationProperty(\n        scan_ec2_instance_with_findings=guardduty.CfnDetector.CFNScanEc2InstanceWithFindingsConfigurationProperty(\n            ebs_volumes=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['scan_ec2_instance_with_findings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector.CFNMalwareProtectionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnDetector.CFNS3LogsConfigurationProperty
class CfnDetector_CFNS3LogsConfigurationPropertyDef(BaseStruct):
    enable: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='The status of S3 data event logs as a data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-detector-cfns3logsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNS3_logs_configuration_property = guardduty.CfnDetector.CFNS3LogsConfigurationProperty(\n        enable=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector.CFNS3LogsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnDetector.CFNScanEc2InstanceWithFindingsConfigurationProperty
class CfnDetector_CFNScanEc2InstanceWithFindingsConfigurationPropertyDef(BaseStruct):
    ebs_volumes: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Describes the configuration for scanning EBS volumes as data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-detector-cfnscanec2instancewithfindingsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNScan_ec2_instance_with_findings_configuration_property = guardduty.CfnDetector.CFNScanEc2InstanceWithFindingsConfigurationProperty(\n        ebs_volumes=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ebs_volumes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector.CFNScanEc2InstanceWithFindingsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnDetector.TagItemProperty
class CfnDetector_TagItemPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The tag key.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The tag value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-detector-tagitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    tag_item_property = guardduty.CfnDetector.TagItemProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector.TagItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnFilter.ConditionProperty
class CfnFilter_ConditionPropertyDef(BaseStruct):
    eq: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Represents the equal condition to apply to a single field when querying for findings.\n')
    equal_to: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Represents an *equal* ** condition to be applied to a single field when querying for findings.\n')
    greater_than: typing.Union[int, float, None] = pydantic.Field(None, description='Represents a *greater than* condition to be applied to a single field when querying for findings.\n')
    greater_than_or_equal: typing.Union[int, float, None] = pydantic.Field(None, description='Represents a *greater than or equal* condition to be applied to a single field when querying for findings.\n')
    gt: typing.Union[int, float, None] = pydantic.Field(None, description='Represents a *greater than* condition to be applied to a single field when querying for findings.\n')
    gte: typing.Union[int, float, None] = pydantic.Field(None, description='Represents the greater than or equal condition to apply to a single field when querying for findings.\n')
    less_than: typing.Union[int, float, None] = pydantic.Field(None, description='Represents a *less than* condition to be applied to a single field when querying for findings.\n')
    less_than_or_equal: typing.Union[int, float, None] = pydantic.Field(None, description='Represents a *less than or equal* condition to be applied to a single field when querying for findings.\n')
    lt: typing.Union[int, float, None] = pydantic.Field(None, description='Represents the less than condition to apply to a single field when querying for findings.\n')
    lte: typing.Union[int, float, None] = pydantic.Field(None, description='Represents the less than or equal condition to apply to a single field when querying for findings.\n')
    neq: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Represents the not equal condition to apply to a single field when querying for findings.\n')
    not_equals: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Represents a *not equal* ** condition to be applied to a single field when querying for findings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-filter-condition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    condition_property = guardduty.CfnFilter.ConditionProperty(\n        eq=["eq"],\n        equal_to=["equalTo"],\n        greater_than=123,\n        greater_than_or_equal=123,\n        gt=123,\n        gte=123,\n        less_than=123,\n        less_than_or_equal=123,\n        lt=123,\n        lte=123,\n        neq=["neq"],\n        not_equals=["notEquals"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['eq', 'equal_to', 'greater_than', 'greater_than_or_equal', 'gt', 'gte', 'less_than', 'less_than_or_equal', 'lt', 'lte', 'neq', 'not_equals']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnFilter.ConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnFilter.FindingCriteriaProperty
class CfnFilter_FindingCriteriaPropertyDef(BaseStruct):
    criterion: typing.Any = pydantic.Field(None, description='Represents a map of finding properties that match specified conditions and values when querying findings. For information about JSON criterion mapping to their console equivalent, see `Finding criteria <https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_filter-findings.html#filter_criteria>`_ . The following are the available criterion: - accountId - id - region - severity To filter on the basis of severity, the API and AWS CLI use the following input list for the ``FindingCriteria`` condition: - *Low* : ``["1", "2", "3"]`` - *Medium* : ``["4", "5", "6"]`` - *High* : ``["7", "8", "9"]`` For more information, see `Severity levels for GuardDuty findings <https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_findings.html#guardduty_findings-severity>`_ in the *Amazon GuardDuty User Guide* . - type - updatedAt Type: ISO 8601 string format: ``YYYY-MM-DDTHH:MM:SS.SSSZ`` or ``YYYY-MM-DDTHH:MM:SSZ`` depending on whether the value contains milliseconds. - resource.accessKeyDetails.accessKeyId - resource.accessKeyDetails.principalId - resource.accessKeyDetails.userName - resource.accessKeyDetails.userType - resource.instanceDetails.iamInstanceProfile.id - resource.instanceDetails.imageId - resource.instanceDetails.instanceId - resource.instanceDetails.tags.key - resource.instanceDetails.tags.value - resource.instanceDetails.networkInterfaces.ipv6Addresses - resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress - resource.instanceDetails.networkInterfaces.publicDnsName - resource.instanceDetails.networkInterfaces.publicIp - resource.instanceDetails.networkInterfaces.securityGroups.groupId - resource.instanceDetails.networkInterfaces.securityGroups.groupName - resource.instanceDetails.networkInterfaces.subnetId - resource.instanceDetails.networkInterfaces.vpcId - resource.instanceDetails.outpostArn - resource.resourceType - resource.s3BucketDetails.publicAccess.effectivePermissions - resource.s3BucketDetails.name - resource.s3BucketDetails.tags.key - resource.s3BucketDetails.tags.value - resource.s3BucketDetails.type - service.action.actionType - service.action.awsApiCallAction.api - service.action.awsApiCallAction.callerType - service.action.awsApiCallAction.errorCode - service.action.awsApiCallAction.remoteIpDetails.city.cityName - service.action.awsApiCallAction.remoteIpDetails.country.countryName - service.action.awsApiCallAction.remoteIpDetails.ipAddressV4 - service.action.awsApiCallAction.remoteIpDetails.ipAddressV6 - service.action.awsApiCallAction.remoteIpDetails.organization.asn - service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg - service.action.awsApiCallAction.serviceName - service.action.dnsRequestAction.domain - service.action.dnsRequestAction.domainWithSuffix - service.action.networkConnectionAction.blocked - service.action.networkConnectionAction.connectionDirection - service.action.networkConnectionAction.localPortDetails.port - service.action.networkConnectionAction.protocol - service.action.networkConnectionAction.remoteIpDetails.city.cityName - service.action.networkConnectionAction.remoteIpDetails.country.countryName - service.action.networkConnectionAction.remoteIpDetails.ipAddressV4 - service.action.networkConnectionAction.remoteIpDetails.ipAddressV6 - service.action.networkConnectionAction.remoteIpDetails.organization.asn - service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg - service.action.networkConnectionAction.remotePortDetails.port - service.action.awsApiCallAction.remoteAccountDetails.affiliated - service.action.kubernetesApiCallAction.remoteIpDetails.ipAddressV4 - service.action.kubernetesApiCallAction.remoteIpDetails.ipAddressV6 - service.action.kubernetesApiCallAction.namespace - service.action.kubernetesApiCallAction.remoteIpDetails.organization.asn - service.action.kubernetesApiCallAction.requestUri - service.action.kubernetesApiCallAction.statusCode - service.action.networkConnectionAction.localIpDetails.ipAddressV4 - service.action.networkConnectionAction.localIpDetails.ipAddressV6 - service.action.networkConnectionAction.protocol - service.action.awsApiCallAction.serviceName - service.action.awsApiCallAction.remoteAccountDetails.accountId - service.additionalInfo.threatListName - service.resourceRole - resource.eksClusterDetails.name - resource.kubernetesDetails.kubernetesWorkloadDetails.name - resource.kubernetesDetails.kubernetesWorkloadDetails.namespace - resource.kubernetesDetails.kubernetesUserDetails.username - resource.kubernetesDetails.kubernetesWorkloadDetails.containers.image - resource.kubernetesDetails.kubernetesWorkloadDetails.containers.imagePrefix - service.ebsVolumeScanDetails.scanId - service.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.name - service.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.severity - service.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.filePaths.hash - service.malwareScanDetails.threats.name - resource.ecsClusterDetails.name - resource.ecsClusterDetails.taskDetails.containers.image - resource.ecsClusterDetails.taskDetails.definitionArn - resource.containerDetails.image - resource.rdsDbInstanceDetails.dbInstanceIdentifier - resource.rdsDbInstanceDetails.dbClusterIdentifier - resource.rdsDbInstanceDetails.engine - resource.rdsDbUserDetails.user - resource.rdsDbInstanceDetails.tags.key - resource.rdsDbInstanceDetails.tags.value - service.runtimeDetails.process.executableSha256 - service.runtimeDetails.process.name - service.runtimeDetails.process.name - resource.lambdaDetails.functionName - resource.lambdaDetails.functionArn - resource.lambdaDetails.tags.key - resource.lambdaDetails.tags.value\n')
    item_type: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnFilter_ConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['criterion', 'item_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnFilter.FindingCriteriaProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.CFNActionsProperty
class CfnMalwareProtectionPlan_CFNActionsPropertyDef(BaseStruct):
    tagging: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnMalwareProtectionPlan_CFNTaggingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about tagging status of the Malware Protection plan resource.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-malwareprotectionplan-cfnactions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNActions_property = guardduty.CfnMalwareProtectionPlan.CFNActionsProperty(\n        tagging=guardduty.CfnMalwareProtectionPlan.CFNTaggingProperty(\n            status="status"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['tagging']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.CFNActionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.CFNProtectedResourceProperty
class CfnMalwareProtectionPlan_CFNProtectedResourcePropertyDef(BaseStruct):
    s3_bucket: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_guardduty.CfnMalwareProtectionPlan_S3BucketPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about the protected S3 bucket resource.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-malwareprotectionplan-cfnprotectedresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNProtected_resource_property = guardduty.CfnMalwareProtectionPlan.CFNProtectedResourceProperty(\n        s3_bucket=guardduty.CfnMalwareProtectionPlan.S3BucketProperty(\n            bucket_name="bucketName",\n            object_prefixes=["objectPrefixes"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_bucket']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.CFNProtectedResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.CFNStatusReasonsProperty
class CfnMalwareProtectionPlan_CFNStatusReasonsPropertyDef(BaseStruct):
    code: typing.Optional[str] = pydantic.Field(None, description='The status code of the Malware Protection plan. For more information, see `Malware Protection plan resource status <https://docs.aws.amazon.com/guardduty/latest/ug/malware-protection-s3-bucket-status-gdu.html>`_ in the *GuardDuty User Guide* .\n')
    message: typing.Optional[str] = pydantic.Field(None, description='Issue message that specifies the reason. For information about potential troubleshooting steps, see `Troubleshooting Malware Protection for S3 status issues <https://docs.aws.amazon.com/guardduty/latest/ug/troubleshoot-s3-malware-protection-status-errors.html>`_ in the *GuardDuty User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-malwareprotectionplan-cfnstatusreasons.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNStatus_reasons_property = guardduty.CfnMalwareProtectionPlan.CFNStatusReasonsProperty(\n        code="code",\n        message="message"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['code', 'message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.CFNStatusReasonsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.CFNTaggingProperty
class CfnMalwareProtectionPlan_CFNTaggingPropertyDef(BaseStruct):
    status: typing.Optional[str] = pydantic.Field(None, description='Indicates whether or not you chose GuardDuty to add a predefined tag to the scanned S3 object.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-malwareprotectionplan-cfntagging.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    c_fNTagging_property = guardduty.CfnMalwareProtectionPlan.CFNTaggingProperty(\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.CFNTaggingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.S3BucketProperty
class CfnMalwareProtectionPlan_S3BucketPropertyDef(BaseStruct):
    bucket_name: typing.Optional[str] = pydantic.Field(None, description='Name of the S3 bucket.\n')
    object_prefixes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Information about the specified object prefixes. An S3 object will be scanned only if it belongs to any of the specified object prefixes.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-malwareprotectionplan-s3bucket.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    s3_bucket_property = guardduty.CfnMalwareProtectionPlan.S3BucketProperty(\n        bucket_name="bucketName",\n        object_prefixes=["objectPrefixes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'object_prefixes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.S3BucketProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.TagItemProperty
class CfnMalwareProtectionPlan_TagItemPropertyDef(BaseStruct):
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The tag key.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The tag value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-guardduty-malwareprotectionplan-tagitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    tag_item_property = guardduty.CfnMalwareProtectionPlan.TagItemProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMalwareProtectionPlan.TagItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnDetector
class CfnDetectorDef(BaseCfnResource):
    enable: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the detector is to be enabled on creation.\n')
    data_sources: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNDataSourceConfigurationsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes which data sources will be enabled for the detector.\n')
    features: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNFeatureConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of features that will be configured for the detector.\n')
    finding_publishing_frequency: typing.Optional[str] = pydantic.Field(None, description='Specifies how frequently updated findings are exported.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.aws_guardduty.CfnDetector_TagItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Specifies tags added to a new detector resource. Each tag consists of a key and an optional value, both of which you define. Currently, support is available only for creating and deleting a tag. No support exists for updating the tags. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['enable', 'data_sources', 'features', 'finding_publishing_frequency', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CFNDataSourceConfigurationsProperty', 'CFNFeatureAdditionalConfigurationProperty', 'CFNFeatureConfigurationProperty', 'CFNKubernetesAuditLogsConfigurationProperty', 'CFNKubernetesConfigurationProperty', 'CFNMalwareProtectionConfigurationProperty', 'CFNS3LogsConfigurationProperty', 'CFNScanEc2InstanceWithFindingsConfigurationProperty', 'TagItemProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetector'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_guardduty.CfnDetectorDefConfig] = pydantic.Field(None)


class CfnDetectorDefConfig(pydantic.BaseModel):
    CFNDataSourceConfigurationsProperty: typing.Optional[list[models.aws_guardduty.CfnDetectorDefCfndatasourceconfigurationspropertyParams]] = pydantic.Field(None, description='')
    CFNFeatureAdditionalConfigurationProperty: typing.Optional[list[models.aws_guardduty.CfnDetectorDefCfnfeatureadditionalconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CFNFeatureConfigurationProperty: typing.Optional[list[models.aws_guardduty.CfnDetectorDefCfnfeatureconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CFNKubernetesAuditLogsConfigurationProperty: typing.Optional[list[models.aws_guardduty.CfnDetectorDefCfnkubernetesauditlogsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CFNKubernetesConfigurationProperty: typing.Optional[list[models.aws_guardduty.CfnDetectorDefCfnkubernetesconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CFNMalwareProtectionConfigurationProperty: typing.Optional[list[models.aws_guardduty.CfnDetectorDefCfnmalwareprotectionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CFNS3LogsConfigurationProperty: typing.Optional[list[models.aws_guardduty.CfnDetectorDefCfns3LogsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CFNScanEc2InstanceWithFindingsConfigurationProperty: typing.Optional[list[models.aws_guardduty.CfnDetectorDefCfnscanec2InstancewithfindingsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    TagItemProperty: typing.Optional[list[models.aws_guardduty.CfnDetectorDefTagitempropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_guardduty.CfnDetectorDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_guardduty.CfnDetectorDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_guardduty.CfnDetectorDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_guardduty.CfnDetectorDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_guardduty.CfnDetectorDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_guardduty.CfnDetectorDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_guardduty.CfnDetectorDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_guardduty.CfnDetectorDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_guardduty.CfnDetectorDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_guardduty.CfnDetectorDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_guardduty.CfnDetectorDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_guardduty.CfnDetectorDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_guardduty.CfnDetectorDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDetectorDefCfndatasourceconfigurationspropertyParams(pydantic.BaseModel):
    kubernetes: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNKubernetesConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    malware_protection: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNMalwareProtectionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_logs: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNS3LogsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorDefCfnfeatureadditionalconfigurationpropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    status: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDetectorDefCfnfeatureconfigurationpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    status: str = pydantic.Field(..., description='')
    additional_configuration: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNFeatureAdditionalConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorDefCfnkubernetesauditlogsconfigurationpropertyParams(pydantic.BaseModel):
    enable: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnDetectorDefCfnkubernetesconfigurationpropertyParams(pydantic.BaseModel):
    audit_logs: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNKubernetesAuditLogsConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnDetectorDefCfnmalwareprotectionconfigurationpropertyParams(pydantic.BaseModel):
    scan_ec2_instance_with_findings: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNScanEc2InstanceWithFindingsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDetectorDefCfns3LogsconfigurationpropertyParams(pydantic.BaseModel):
    enable: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnDetectorDefCfnscanec2InstancewithfindingsconfigurationpropertyParams(pydantic.BaseModel):
    ebs_volumes: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDetectorDefTagitempropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnDetectorDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDetectorDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDetectorDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDetectorDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDetectorDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDetectorDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDetectorDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDetectorDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDetectorDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDetectorDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDetectorDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDetectorDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDetectorDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDetectorDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_guardduty.CfnFilter
class CfnFilterDef(BaseCfnResource):
    detector_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the detector belonging to the GuardDuty account that you want to create a filter for.\n')
    finding_criteria: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_guardduty.CfnFilter_FindingCriteriaPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Represents the criteria to be used in the filter for querying findings.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the filter. Valid characters include period (.), underscore (_), dash (-), and alphanumeric characters. A whitespace is considered to be an invalid character.\n')
    action: typing.Optional[str] = pydantic.Field(None, description='Specifies the action that is to be applied to the findings that match the filter.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses ( ``{ }`` , ``[ ]`` , and ``( )`` ), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.\n')
    rank: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings. The minimum value for this property is 1 and the maximum is 100. By default, filters may not be created in the same order as they are ranked. To ensure that the filters are created in the expected order, you can use an optional attribute, `DependsOn <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html>`_ , with the following syntax: ``"DependsOn":[ "ObjectName" ]`` .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to be added to a new filter resource. Each tag consists of a key and an optional value, both of which you define. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['detector_id', 'finding_criteria', 'name', 'action', 'description', 'rank', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ConditionProperty', 'FindingCriteriaProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnFilter'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_guardduty.CfnFilterDefConfig] = pydantic.Field(None)


class CfnFilterDefConfig(pydantic.BaseModel):
    ConditionProperty: typing.Optional[list[models.aws_guardduty.CfnFilterDefConditionpropertyParams]] = pydantic.Field(None, description='')
    FindingCriteriaProperty: typing.Optional[list[models.aws_guardduty.CfnFilterDefFindingcriteriapropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_guardduty.CfnFilterDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_guardduty.CfnFilterDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_guardduty.CfnFilterDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_guardduty.CfnFilterDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_guardduty.CfnFilterDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_guardduty.CfnFilterDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_guardduty.CfnFilterDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_guardduty.CfnFilterDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_guardduty.CfnFilterDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_guardduty.CfnFilterDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_guardduty.CfnFilterDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_guardduty.CfnFilterDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_guardduty.CfnFilterDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFilterDefConditionpropertyParams(pydantic.BaseModel):
    eq: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    equal_to: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    greater_than: typing.Union[int, float, None] = pydantic.Field(None, description='')
    greater_than_or_equal: typing.Union[int, float, None] = pydantic.Field(None, description='')
    gt: typing.Union[int, float, None] = pydantic.Field(None, description='')
    gte: typing.Union[int, float, None] = pydantic.Field(None, description='')
    less_than: typing.Union[int, float, None] = pydantic.Field(None, description='')
    less_than_or_equal: typing.Union[int, float, None] = pydantic.Field(None, description='')
    lt: typing.Union[int, float, None] = pydantic.Field(None, description='')
    lte: typing.Union[int, float, None] = pydantic.Field(None, description='')
    neq: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    not_equals: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnFilterDefFindingcriteriapropertyParams(pydantic.BaseModel):
    criterion: typing.Any = pydantic.Field(None, description='')
    item_type: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnFilter_ConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFilterDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFilterDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFilterDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFilterDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFilterDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFilterDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFilterDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFilterDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFilterDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFilterDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFilterDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnFilterDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFilterDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFilterDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_guardduty.CfnIPSet
class CfnIPSetDef(BaseCfnResource):
    format: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The format of the file that contains the IPSet.\n')
    location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URI of the file that contains the IPSet.\n')
    activate: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether or not GuardDuty uses the ``IPSet`` .\n')
    detector_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the detector of the GuardDuty account that you want to create an IPSet for.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The user-friendly name to identify the IPSet. Allowed characters are alphanumeric, whitespace, dash (-), and underscores (_).\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to be added to a new IP set resource. Each tag consists of a key and an optional value, both of which you define. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['format', 'location', 'activate', 'detector_id', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnIPSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_guardduty.CfnIPSetDefConfig] = pydantic.Field(None)


class CfnIPSetDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_guardduty.CfnIPSetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_guardduty.CfnIPSetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_guardduty.CfnIPSetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_guardduty.CfnIPSetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_guardduty.CfnIPSetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_guardduty.CfnIPSetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_guardduty.CfnIPSetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_guardduty.CfnIPSetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_guardduty.CfnIPSetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_guardduty.CfnIPSetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_guardduty.CfnIPSetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_guardduty.CfnIPSetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_guardduty.CfnIPSetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnIPSetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnIPSetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIPSetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnIPSetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIPSetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnIPSetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnIPSetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnIPSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnIPSetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnIPSetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIPSetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnIPSetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnIPSetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIPSetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_guardduty.CfnMalwareProtectionPlan
class CfnMalwareProtectionPlanDef(BaseCfnResource):
    protected_resource: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_guardduty.CfnMalwareProtectionPlan_CFNProtectedResourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about the protected resource. Presently, ``S3Bucket`` is the only supported protected resource.\n')
    role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='IAM role that includes the permissions required to scan and (optionally) add tags to the associated protected resource.\n')
    actions: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnMalwareProtectionPlan_CFNActionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the action that is to be applied to the Malware Protection plan resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.aws_guardduty.CfnMalwareProtectionPlan_TagItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to be added to the created Malware Protection plan resource. Each tag consists of a key and an optional value, both of which you need to specify.')
    _init_params: typing.ClassVar[list[str]] = ['protected_resource', 'role', 'actions', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CFNActionsProperty', 'CFNProtectedResourceProperty', 'CFNStatusReasonsProperty', 'CFNTaggingProperty', 'S3BucketProperty', 'TagItemProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMalwareProtectionPlan'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_guardduty.CfnMalwareProtectionPlanDefConfig] = pydantic.Field(None)


class CfnMalwareProtectionPlanDefConfig(pydantic.BaseModel):
    CFNActionsProperty: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefCfnactionspropertyParams]] = pydantic.Field(None, description='')
    CFNProtectedResourceProperty: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefCfnprotectedresourcepropertyParams]] = pydantic.Field(None, description='')
    CFNStatusReasonsProperty: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefCfnstatusreasonspropertyParams]] = pydantic.Field(None, description='')
    CFNTaggingProperty: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefCfntaggingpropertyParams]] = pydantic.Field(None, description='')
    S3BucketProperty: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefS3BucketpropertyParams]] = pydantic.Field(None, description='')
    TagItemProperty: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefTagitempropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_guardduty.CfnMalwareProtectionPlanDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_status_reasons_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnMalwareProtectionPlanDefCfnactionspropertyParams(pydantic.BaseModel):
    tagging: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnMalwareProtectionPlan_CFNTaggingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMalwareProtectionPlanDefCfnprotectedresourcepropertyParams(pydantic.BaseModel):
    s3_bucket: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnMalwareProtectionPlan_S3BucketPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnMalwareProtectionPlanDefCfnstatusreasonspropertyParams(pydantic.BaseModel):
    code: typing.Optional[str] = pydantic.Field(None, description='')
    message: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMalwareProtectionPlanDefCfntaggingpropertyParams(pydantic.BaseModel):
    status: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMalwareProtectionPlanDefS3BucketpropertyParams(pydantic.BaseModel):
    bucket_name: typing.Optional[str] = pydantic.Field(None, description='')
    object_prefixes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnMalwareProtectionPlanDefTagitempropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnMalwareProtectionPlanDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMalwareProtectionPlanDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMalwareProtectionPlanDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMalwareProtectionPlanDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMalwareProtectionPlanDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMalwareProtectionPlanDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMalwareProtectionPlanDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMalwareProtectionPlanDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMalwareProtectionPlanDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMalwareProtectionPlanDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMalwareProtectionPlanDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnMalwareProtectionPlanDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMalwareProtectionPlanDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMalwareProtectionPlanDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_guardduty.CfnMaster
class CfnMasterDef(BaseCfnResource):
    detector_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique ID of the detector of the GuardDuty member account.\n')
    master_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS account ID of the account designated as the GuardDuty administrator account.\n')
    invitation_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the invitation that is sent to the account designated as a member account. You can find the invitation ID by running the `ListInvitations <https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListInvitations.html>`_ in the *GuardDuty API Reference* .')
    _init_params: typing.ClassVar[list[str]] = ['detector_id', 'master_id', 'invitation_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMaster'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_guardduty.CfnMasterDefConfig] = pydantic.Field(None)


class CfnMasterDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_guardduty.CfnMasterDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_guardduty.CfnMasterDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_guardduty.CfnMasterDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_guardduty.CfnMasterDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_guardduty.CfnMasterDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_guardduty.CfnMasterDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_guardduty.CfnMasterDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_guardduty.CfnMasterDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_guardduty.CfnMasterDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_guardduty.CfnMasterDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_guardduty.CfnMasterDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_guardduty.CfnMasterDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_guardduty.CfnMasterDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnMasterDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMasterDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMasterDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMasterDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMasterDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMasterDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMasterDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMasterDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMasterDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMasterDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMasterDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnMasterDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMasterDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMasterDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_guardduty.CfnMember
class CfnMemberDef(BaseCfnResource):
    email: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The email address associated with the member account.\n')
    detector_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the detector associated with the GuardDuty service to add the member to.\n')
    disable_email_notification: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether or not to disable email notification for the member account that you invite.\n')
    member_id: typing.Optional[str] = pydantic.Field(None, description='The AWS account ID of the account to designate as a member.\n')
    message: typing.Optional[str] = pydantic.Field(None, description="The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.\n")
    status: typing.Optional[str] = pydantic.Field(None, description='You can use the ``Status`` property to update the status of the relationship between the member account and its administrator account. Valid values are ``Created`` and ``Invited`` when using an ``AWS::GuardDuty::Member`` resource. If the value for this property is not provided or set to ``Created`` , a member account is created but not invited. If the value of this property is set to ``Invited`` , a member account is created and invited.')
    _init_params: typing.ClassVar[list[str]] = ['email', 'detector_id', 'disable_email_notification', 'member_id', 'message', 'status']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMember'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_guardduty.CfnMemberDefConfig] = pydantic.Field(None)


class CfnMemberDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_guardduty.CfnMemberDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_guardduty.CfnMemberDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_guardduty.CfnMemberDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_guardduty.CfnMemberDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_guardduty.CfnMemberDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_guardduty.CfnMemberDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_guardduty.CfnMemberDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_guardduty.CfnMemberDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_guardduty.CfnMemberDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_guardduty.CfnMemberDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_guardduty.CfnMemberDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_guardduty.CfnMemberDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_guardduty.CfnMemberDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnMemberDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMemberDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMemberDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMemberDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMemberDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMemberDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMemberDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMemberDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMemberDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMemberDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMemberDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnMemberDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMemberDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMemberDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_guardduty.CfnThreatIntelSet
class CfnThreatIntelSetDef(BaseCfnResource):
    format: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The format of the file that contains the ThreatIntelSet.\n')
    location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URI of the file that contains the ThreatIntelSet.\n')
    activate: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.\n')
    detector_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to be added to a new threat list resource. Each tag consists of a key and an optional value, both of which you define. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['format', 'location', 'activate', 'detector_id', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnThreatIntelSet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_guardduty.CfnThreatIntelSetDefConfig] = pydantic.Field(None)


class CfnThreatIntelSetDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_guardduty.CfnThreatIntelSetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnThreatIntelSetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnThreatIntelSetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnThreatIntelSetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnThreatIntelSetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnThreatIntelSetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnThreatIntelSetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnThreatIntelSetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnThreatIntelSetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnThreatIntelSetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnThreatIntelSetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnThreatIntelSetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnThreatIntelSetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnThreatIntelSetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnThreatIntelSetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_guardduty.CfnDetectorProps
class CfnDetectorPropsDef(BaseCfnProperty):
    enable: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the detector is to be enabled on creation.\n')
    data_sources: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNDataSourceConfigurationsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes which data sources will be enabled for the detector.\n')
    features: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnDetector_CFNFeatureConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of features that will be configured for the detector.\n')
    finding_publishing_frequency: typing.Optional[str] = pydantic.Field(None, description='Specifies how frequently updated findings are exported.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.aws_guardduty.CfnDetector_TagItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Specifies tags added to a new detector resource. Each tag consists of a key and an optional value, both of which you define. Currently, support is available only for creating and deleting a tag. No support exists for updating the tags. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    cfn_detector_props = guardduty.CfnDetectorProps(\n        enable=False,\n\n        # the properties below are optional\n        data_sources=guardduty.CfnDetector.CFNDataSourceConfigurationsProperty(\n            kubernetes=guardduty.CfnDetector.CFNKubernetesConfigurationProperty(\n                audit_logs=guardduty.CfnDetector.CFNKubernetesAuditLogsConfigurationProperty(\n                    enable=False\n                )\n            ),\n            malware_protection=guardduty.CfnDetector.CFNMalwareProtectionConfigurationProperty(\n                scan_ec2_instance_with_findings=guardduty.CfnDetector.CFNScanEc2InstanceWithFindingsConfigurationProperty(\n                    ebs_volumes=False\n                )\n            ),\n            s3_logs=guardduty.CfnDetector.CFNS3LogsConfigurationProperty(\n                enable=False\n            )\n        ),\n        features=[guardduty.CfnDetector.CFNFeatureConfigurationProperty(\n            name="name",\n            status="status",\n\n            # the properties below are optional\n            additional_configuration=[guardduty.CfnDetector.CFNFeatureAdditionalConfigurationProperty(\n                name="name",\n                status="status"\n            )]\n        )],\n        finding_publishing_frequency="findingPublishingFrequency",\n        tags=[guardduty.CfnDetector.TagItemProperty(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable', 'data_sources', 'features', 'finding_publishing_frequency', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnDetectorProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnFilterProps
class CfnFilterPropsDef(BaseCfnProperty):
    detector_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the detector belonging to the GuardDuty account that you want to create a filter for.\n')
    finding_criteria: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_guardduty.CfnFilter_FindingCriteriaPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Represents the criteria to be used in the filter for querying findings.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the filter. Valid characters include period (.), underscore (_), dash (-), and alphanumeric characters. A whitespace is considered to be an invalid character.\n')
    action: typing.Optional[str] = pydantic.Field(None, description='Specifies the action that is to be applied to the findings that match the filter.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses ( ``{ }`` , ``[ ]`` , and ``( )`` ), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.\n')
    rank: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings. The minimum value for this property is 1 and the maximum is 100. By default, filters may not be created in the same order as they are ranked. To ensure that the filters are created in the expected order, you can use an optional attribute, `DependsOn <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html>`_ , with the following syntax: ``"DependsOn":[ "ObjectName" ]`` .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to be added to a new filter resource. Each tag consists of a key and an optional value, both of which you define. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-filter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    # criterion: Any\n\n    cfn_filter_props = guardduty.CfnFilterProps(\n        detector_id="detectorId",\n        finding_criteria=guardduty.CfnFilter.FindingCriteriaProperty(\n            criterion=criterion,\n            item_type=guardduty.CfnFilter.ConditionProperty(\n                eq=["eq"],\n                equal_to=["equalTo"],\n                greater_than=123,\n                greater_than_or_equal=123,\n                gt=123,\n                gte=123,\n                less_than=123,\n                less_than_or_equal=123,\n                lt=123,\n                lte=123,\n                neq=["neq"],\n                not_equals=["notEquals"]\n            )\n        ),\n        name="name",\n\n        # the properties below are optional\n        action="action",\n        description="description",\n        rank=123,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['detector_id', 'finding_criteria', 'name', 'action', 'description', 'rank', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnFilterProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnIPSetProps
class CfnIPSetPropsDef(BaseCfnProperty):
    format: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The format of the file that contains the IPSet.\n')
    location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URI of the file that contains the IPSet.\n')
    activate: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether or not GuardDuty uses the ``IPSet`` .\n')
    detector_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the detector of the GuardDuty account that you want to create an IPSet for.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The user-friendly name to identify the IPSet. Allowed characters are alphanumeric, whitespace, dash (-), and underscores (_).\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to be added to a new IP set resource. Each tag consists of a key and an optional value, both of which you define. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-ipset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    cfn_iPSet_props = guardduty.CfnIPSetProps(\n        format="format",\n        location="location",\n\n        # the properties below are optional\n        activate=False,\n        detector_id="detectorId",\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['format', 'location', 'activate', 'detector_id', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnIPSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnMalwareProtectionPlanProps
class CfnMalwareProtectionPlanPropsDef(BaseCfnProperty):
    protected_resource: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_guardduty.CfnMalwareProtectionPlan_CFNProtectedResourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about the protected resource. Presently, ``S3Bucket`` is the only supported protected resource.\n')
    role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='IAM role that includes the permissions required to scan and (optionally) add tags to the associated protected resource.\n')
    actions: typing.Union[models.UnsupportedResource, models.aws_guardduty.CfnMalwareProtectionPlan_CFNActionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the action that is to be applied to the Malware Protection plan resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.aws_guardduty.CfnMalwareProtectionPlan_TagItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to be added to the created Malware Protection plan resource. Each tag consists of a key and an optional value, both of which you need to specify.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-malwareprotectionplan.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    cfn_malware_protection_plan_props = guardduty.CfnMalwareProtectionPlanProps(\n        protected_resource=guardduty.CfnMalwareProtectionPlan.CFNProtectedResourceProperty(\n            s3_bucket=guardduty.CfnMalwareProtectionPlan.S3BucketProperty(\n                bucket_name="bucketName",\n                object_prefixes=["objectPrefixes"]\n            )\n        ),\n        role="role",\n\n        # the properties below are optional\n        actions=guardduty.CfnMalwareProtectionPlan.CFNActionsProperty(\n            tagging=guardduty.CfnMalwareProtectionPlan.CFNTaggingProperty(\n                status="status"\n            )\n        ),\n        tags=[guardduty.CfnMalwareProtectionPlan.TagItemProperty(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['protected_resource', 'role', 'actions', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMalwareProtectionPlanProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnMasterProps
class CfnMasterPropsDef(BaseCfnProperty):
    detector_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique ID of the detector of the GuardDuty member account.\n')
    master_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS account ID of the account designated as the GuardDuty administrator account.\n')
    invitation_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the invitation that is sent to the account designated as a member account. You can find the invitation ID by running the `ListInvitations <https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListInvitations.html>`_ in the *GuardDuty API Reference* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    cfn_master_props = guardduty.CfnMasterProps(\n        detector_id="detectorId",\n        master_id="masterId",\n\n        # the properties below are optional\n        invitation_id="invitationId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['detector_id', 'master_id', 'invitation_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMasterProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnMemberProps
class CfnMemberPropsDef(BaseCfnProperty):
    email: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The email address associated with the member account.\n')
    detector_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the detector associated with the GuardDuty service to add the member to.\n')
    disable_email_notification: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies whether or not to disable email notification for the member account that you invite.\n')
    member_id: typing.Optional[str] = pydantic.Field(None, description='The AWS account ID of the account to designate as a member.\n')
    message: typing.Optional[str] = pydantic.Field(None, description="The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.\n")
    status: typing.Optional[str] = pydantic.Field(None, description='You can use the ``Status`` property to update the status of the relationship between the member account and its administrator account. Valid values are ``Created`` and ``Invited`` when using an ``AWS::GuardDuty::Member`` resource. If the value for this property is not provided or set to ``Created`` , a member account is created but not invited. If the value of this property is set to ``Invited`` , a member account is created and invited.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-member.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    cfn_member_props = guardduty.CfnMemberProps(\n        email="email",\n\n        # the properties below are optional\n        detector_id="detectorId",\n        disable_email_notification=False,\n        member_id="memberId",\n        message="message",\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['email', 'detector_id', 'disable_email_notification', 'member_id', 'message', 'status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnMemberProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_guardduty.CfnThreatIntelSetProps
class CfnThreatIntelSetPropsDef(BaseCfnProperty):
    format: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The format of the file that contains the ThreatIntelSet.\n')
    location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URI of the file that contains the ThreatIntelSet.\n')
    activate: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.\n')
    detector_id: typing.Optional[str] = pydantic.Field(None, description='The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to be added to a new threat list resource. Each tag consists of a key and an optional value, both of which you define. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-threatintelset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_guardduty as guardduty\n\n    cfn_threat_intel_set_props = guardduty.CfnThreatIntelSetProps(\n        format="format",\n        location="location",\n\n        # the properties below are optional\n        activate=False,\n        detector_id="detectorId",\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['format', 'location', 'activate', 'detector_id', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_guardduty.CfnThreatIntelSetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnDetector_CFNDataSourceConfigurationsProperty: typing.Optional[dict[str, models.aws_guardduty.CfnDetector_CFNDataSourceConfigurationsPropertyDef]] = pydantic.Field(None)
    CfnDetector_CFNFeatureAdditionalConfigurationProperty: typing.Optional[dict[str, models.aws_guardduty.CfnDetector_CFNFeatureAdditionalConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDetector_CFNFeatureConfigurationProperty: typing.Optional[dict[str, models.aws_guardduty.CfnDetector_CFNFeatureConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDetector_CFNKubernetesAuditLogsConfigurationProperty: typing.Optional[dict[str, models.aws_guardduty.CfnDetector_CFNKubernetesAuditLogsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDetector_CFNKubernetesConfigurationProperty: typing.Optional[dict[str, models.aws_guardduty.CfnDetector_CFNKubernetesConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDetector_CFNMalwareProtectionConfigurationProperty: typing.Optional[dict[str, models.aws_guardduty.CfnDetector_CFNMalwareProtectionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDetector_CFNS3LogsConfigurationProperty: typing.Optional[dict[str, models.aws_guardduty.CfnDetector_CFNS3LogsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDetector_CFNScanEc2InstanceWithFindingsConfigurationProperty: typing.Optional[dict[str, models.aws_guardduty.CfnDetector_CFNScanEc2InstanceWithFindingsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDetector_TagItemProperty: typing.Optional[dict[str, models.aws_guardduty.CfnDetector_TagItemPropertyDef]] = pydantic.Field(None)
    CfnFilter_ConditionProperty: typing.Optional[dict[str, models.aws_guardduty.CfnFilter_ConditionPropertyDef]] = pydantic.Field(None)
    CfnFilter_FindingCriteriaProperty: typing.Optional[dict[str, models.aws_guardduty.CfnFilter_FindingCriteriaPropertyDef]] = pydantic.Field(None)
    CfnMalwareProtectionPlan_CFNActionsProperty: typing.Optional[dict[str, models.aws_guardduty.CfnMalwareProtectionPlan_CFNActionsPropertyDef]] = pydantic.Field(None)
    CfnMalwareProtectionPlan_CFNProtectedResourceProperty: typing.Optional[dict[str, models.aws_guardduty.CfnMalwareProtectionPlan_CFNProtectedResourcePropertyDef]] = pydantic.Field(None)
    CfnMalwareProtectionPlan_CFNStatusReasonsProperty: typing.Optional[dict[str, models.aws_guardduty.CfnMalwareProtectionPlan_CFNStatusReasonsPropertyDef]] = pydantic.Field(None)
    CfnMalwareProtectionPlan_CFNTaggingProperty: typing.Optional[dict[str, models.aws_guardduty.CfnMalwareProtectionPlan_CFNTaggingPropertyDef]] = pydantic.Field(None)
    CfnMalwareProtectionPlan_S3BucketProperty: typing.Optional[dict[str, models.aws_guardduty.CfnMalwareProtectionPlan_S3BucketPropertyDef]] = pydantic.Field(None)
    CfnMalwareProtectionPlan_TagItemProperty: typing.Optional[dict[str, models.aws_guardduty.CfnMalwareProtectionPlan_TagItemPropertyDef]] = pydantic.Field(None)
    CfnDetector: typing.Optional[dict[str, models.aws_guardduty.CfnDetectorDef]] = pydantic.Field(None)
    CfnFilter: typing.Optional[dict[str, models.aws_guardduty.CfnFilterDef]] = pydantic.Field(None)
    CfnIPSet: typing.Optional[dict[str, models.aws_guardduty.CfnIPSetDef]] = pydantic.Field(None)
    CfnMalwareProtectionPlan: typing.Optional[dict[str, models.aws_guardduty.CfnMalwareProtectionPlanDef]] = pydantic.Field(None)
    CfnMaster: typing.Optional[dict[str, models.aws_guardduty.CfnMasterDef]] = pydantic.Field(None)
    CfnMember: typing.Optional[dict[str, models.aws_guardduty.CfnMemberDef]] = pydantic.Field(None)
    CfnThreatIntelSet: typing.Optional[dict[str, models.aws_guardduty.CfnThreatIntelSetDef]] = pydantic.Field(None)
    CfnDetectorProps: typing.Optional[dict[str, models.aws_guardduty.CfnDetectorPropsDef]] = pydantic.Field(None)
    CfnFilterProps: typing.Optional[dict[str, models.aws_guardduty.CfnFilterPropsDef]] = pydantic.Field(None)
    CfnIPSetProps: typing.Optional[dict[str, models.aws_guardduty.CfnIPSetPropsDef]] = pydantic.Field(None)
    CfnMalwareProtectionPlanProps: typing.Optional[dict[str, models.aws_guardduty.CfnMalwareProtectionPlanPropsDef]] = pydantic.Field(None)
    CfnMasterProps: typing.Optional[dict[str, models.aws_guardduty.CfnMasterPropsDef]] = pydantic.Field(None)
    CfnMemberProps: typing.Optional[dict[str, models.aws_guardduty.CfnMemberPropsDef]] = pydantic.Field(None)
    CfnThreatIntelSetProps: typing.Optional[dict[str, models.aws_guardduty.CfnThreatIntelSetPropsDef]] = pydantic.Field(None)
    ...

import models
