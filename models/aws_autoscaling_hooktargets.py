from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_autoscaling_hooktargets.FunctionHook
class FunctionHookDef(BaseClass):
    fn: typing.Union[_REQUIRED_INIT_PARAM, models.aws_lambda.FunctionBaseDef, models.aws_lambda.QualifiedFunctionBaseDef, models.aws_lambda.AliasDef, models.aws_lambda.DockerImageFunctionDef, models.aws_lambda.FunctionDef, models.aws_lambda.SingletonFunctionDef, models.aws_lambda.VersionDef, models.aws_lambda_nodejs.NodejsFunctionDef, models.triggers.TriggerFunctionDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='Function to invoke in response to a lifecycle event.')
    encryption_key: typing.Optional[typing.Union[models.aws_kms.KeyDef]] = pydantic.Field(None, description='If provided, this key is used to encrypt the contents of the SNS topic.')
    _init_params: typing.ClassVar[list[str]] = ['fn', 'encryption_key']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscaling_hooktargets.FunctionHook'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_autoscaling_hooktargets.FunctionHookDefConfig] = pydantic.Field(None)


class FunctionHookDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_autoscaling_hooktargets.FunctionHookDefBindParams]] = pydantic.Field(None, description='If the ``IRole`` does not exist in ``options``, will create an ``IRole`` and an SNS Topic and attach both to the lifecycle hook.\nIf the ``IRole`` does exist in ``options``, will only create an SNS Topic and attach it to the lifecycle hook.')

class FunctionHookDefBindParams(pydantic.BaseModel):
    lifecycle_hook: models.aws_autoscaling.LifecycleHookDef = pydantic.Field(..., description='The lifecycle hook to attach to. [disable-awslint:ref-via-interface]\n')
    role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description='The role to use when attaching to the lifecycle hook. [disable-awslint:ref-via-interface] Default: : a role is not created unless the target arn is specified')
    return_config: typing.Optional[list[models.aws_autoscaling.LifecycleHookTargetConfigDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_autoscaling_hooktargets.QueueHook
class QueueHookDef(BaseClass):
    queue: typing.Union[_REQUIRED_INIT_PARAM, models.aws_sqs.QueueBaseDef, models.aws_sqs.QueueDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    _init_params: typing.ClassVar[list[str]] = ['queue']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscaling_hooktargets.QueueHook'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_autoscaling_hooktargets.QueueHookDefConfig] = pydantic.Field(None)


class QueueHookDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_autoscaling_hooktargets.QueueHookDefBindParams]] = pydantic.Field(None, description='If an ``IRole`` is found in ``options``, grant it access to send messages.\nOtherwise, create a new ``IRole`` and grant it access to send messages.')

class QueueHookDefBindParams(pydantic.BaseModel):
    lifecycle_hook: models.aws_autoscaling.LifecycleHookDef = pydantic.Field(..., description='The lifecycle hook to attach to. [disable-awslint:ref-via-interface]\n')
    role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description='The role to use when attaching to the lifecycle hook. [disable-awslint:ref-via-interface] Default: : a role is not created unless the target arn is specified\n')
    return_config: typing.Optional[list[models.aws_autoscaling.LifecycleHookTargetConfigDefConfig]] = pydantic.Field(None)
    ...


#  autogenerated from aws_cdk.aws_autoscaling_hooktargets.TopicHook
class TopicHookDef(BaseClass):
    topic: typing.Union[_REQUIRED_INIT_PARAM, models.aws_sns.TopicBaseDef, models.aws_sns.TopicDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    _init_params: typing.ClassVar[list[str]] = ['topic']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_autoscaling_hooktargets.TopicHook'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_autoscaling_hooktargets.TopicHookDefConfig] = pydantic.Field(None)


class TopicHookDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_autoscaling_hooktargets.TopicHookDefBindParams]] = pydantic.Field(None, description='If an ``IRole`` is found in ``options``, grant it topic publishing permissions.\nOtherwise, create a new ``IRole`` and grant it topic publishing permissions.')

class TopicHookDefBindParams(pydantic.BaseModel):
    lifecycle_hook: models.aws_autoscaling.LifecycleHookDef = pydantic.Field(..., description='The lifecycle hook to attach to. [disable-awslint:ref-via-interface]\n')
    role: typing.Optional[typing.Union[models.aws_iam.LazyRoleDef, models.aws_iam.RoleDef]] = pydantic.Field(None, description='The role to use when attaching to the lifecycle hook. [disable-awslint:ref-via-interface] Default: : a role is not created unless the target arn is specified\n')
    return_config: typing.Optional[list[models.aws_autoscaling.LifecycleHookTargetConfigDefConfig]] = pydantic.Field(None)
    ...


class ModuleModel(pydantic.BaseModel):
    FunctionHook: typing.Optional[dict[str, models.aws_autoscaling_hooktargets.FunctionHookDef]] = pydantic.Field(None)
    QueueHook: typing.Optional[dict[str, models.aws_autoscaling_hooktargets.QueueHookDef]] = pydantic.Field(None)
    TopicHook: typing.Optional[dict[str, models.aws_autoscaling_hooktargets.TopicHookDef]] = pydantic.Field(None)
    ...

import models
