from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.AntennaDownlinkConfigProperty
class CfnConfig_AntennaDownlinkConfigPropertyDef(BaseStruct):
    spectrum_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_SpectrumConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines the spectrum configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-antennadownlinkconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    antenna_downlink_config_property = groundstation.CfnConfig.AntennaDownlinkConfigProperty(\n        spectrum_config=groundstation.CfnConfig.SpectrumConfigProperty(\n            bandwidth=groundstation.CfnConfig.FrequencyBandwidthProperty(\n                units="units",\n                value=123\n            ),\n            center_frequency=groundstation.CfnConfig.FrequencyProperty(\n                units="units",\n                value=123\n            ),\n            polarization="polarization"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['spectrum_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.AntennaDownlinkConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.AntennaDownlinkDemodDecodeConfigProperty
class CfnConfig_AntennaDownlinkDemodDecodeConfigPropertyDef(BaseStruct):
    decode_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_DecodeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines how the RF signal will be decoded.\n')
    demodulation_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_DemodulationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines how the RF signal will be demodulated.\n')
    spectrum_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_SpectrumConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines the spectrum configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-antennadownlinkdemoddecodeconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    antenna_downlink_demod_decode_config_property = groundstation.CfnConfig.AntennaDownlinkDemodDecodeConfigProperty(\n        decode_config=groundstation.CfnConfig.DecodeConfigProperty(\n            unvalidated_json="unvalidatedJson"\n        ),\n        demodulation_config=groundstation.CfnConfig.DemodulationConfigProperty(\n            unvalidated_json="unvalidatedJson"\n        ),\n        spectrum_config=groundstation.CfnConfig.SpectrumConfigProperty(\n            bandwidth=groundstation.CfnConfig.FrequencyBandwidthProperty(\n                units="units",\n                value=123\n            ),\n            center_frequency=groundstation.CfnConfig.FrequencyProperty(\n                units="units",\n                value=123\n            ),\n            polarization="polarization"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['decode_config', 'demodulation_config', 'spectrum_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.AntennaDownlinkDemodDecodeConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.AntennaUplinkConfigProperty
class CfnConfig_AntennaUplinkConfigPropertyDef(BaseStruct):
    spectrum_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_UplinkSpectrumConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines the spectrum configuration.\n')
    target_eirp: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_EirpPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The equivalent isotropically radiated power (EIRP) to use for uplink transmissions. Valid values are between 20.0 to 50.0 dBW.\n')
    transmit_disabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether or not uplink transmit is disabled.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-antennauplinkconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    antenna_uplink_config_property = groundstation.CfnConfig.AntennaUplinkConfigProperty(\n        spectrum_config=groundstation.CfnConfig.UplinkSpectrumConfigProperty(\n            center_frequency=groundstation.CfnConfig.FrequencyProperty(\n                units="units",\n                value=123\n            ),\n            polarization="polarization"\n        ),\n        target_eirp=groundstation.CfnConfig.EirpProperty(\n            units="units",\n            value=123\n        ),\n        transmit_disabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['spectrum_config', 'target_eirp', 'transmit_disabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.AntennaUplinkConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.ConfigDataProperty
class CfnConfig_ConfigDataPropertyDef(BaseStruct):
    antenna_downlink_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_AntennaDownlinkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information for an antenna downlink config object. Antenna downlink config objects are used to provide parameters for downlinks where no demodulation or decoding is performed by Ground Station (RF over IP downlinks).\n')
    antenna_downlink_demod_decode_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_AntennaDownlinkDemodDecodeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information for a downlink demod decode config object. Downlink demod decode config objects are used to provide parameters for downlinks where the Ground Station service will demodulate and decode the downlinked data.\n')
    antenna_uplink_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_AntennaUplinkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information for an uplink config object. Uplink config objects are used to provide parameters for uplink contacts.\n')
    dataflow_endpoint_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_DataflowEndpointConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information for a dataflow endpoint config object. Dataflow endpoint config objects are used to provide parameters about which IP endpoint(s) to use during a contact. Dataflow endpoints are where Ground Station sends data during a downlink contact and where Ground Station receives data to send to the satellite during an uplink contact.\n')
    s3_recording_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_S3RecordingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information for an S3 recording config object. S3 recording config objects are used to provide parameters for S3 recording during downlink contacts.\n')
    tracking_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_TrackingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information for a tracking config object. Tracking config objects are used to provide parameters about how to track the satellite through the sky during a contact.\n')
    uplink_echo_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_UplinkEchoConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information for an uplink echo config object. Uplink echo config objects are used to provide parameters for uplink echo during uplink contacts.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-configdata.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    config_data_property = groundstation.CfnConfig.ConfigDataProperty(\n        antenna_downlink_config=groundstation.CfnConfig.AntennaDownlinkConfigProperty(\n            spectrum_config=groundstation.CfnConfig.SpectrumConfigProperty(\n                bandwidth=groundstation.CfnConfig.FrequencyBandwidthProperty(\n                    units="units",\n                    value=123\n                ),\n                center_frequency=groundstation.CfnConfig.FrequencyProperty(\n                    units="units",\n                    value=123\n                ),\n                polarization="polarization"\n            )\n        ),\n        antenna_downlink_demod_decode_config=groundstation.CfnConfig.AntennaDownlinkDemodDecodeConfigProperty(\n            decode_config=groundstation.CfnConfig.DecodeConfigProperty(\n                unvalidated_json="unvalidatedJson"\n            ),\n            demodulation_config=groundstation.CfnConfig.DemodulationConfigProperty(\n                unvalidated_json="unvalidatedJson"\n            ),\n            spectrum_config=groundstation.CfnConfig.SpectrumConfigProperty(\n                bandwidth=groundstation.CfnConfig.FrequencyBandwidthProperty(\n                    units="units",\n                    value=123\n                ),\n                center_frequency=groundstation.CfnConfig.FrequencyProperty(\n                    units="units",\n                    value=123\n                ),\n                polarization="polarization"\n            )\n        ),\n        antenna_uplink_config=groundstation.CfnConfig.AntennaUplinkConfigProperty(\n            spectrum_config=groundstation.CfnConfig.UplinkSpectrumConfigProperty(\n                center_frequency=groundstation.CfnConfig.FrequencyProperty(\n                    units="units",\n                    value=123\n                ),\n                polarization="polarization"\n            ),\n            target_eirp=groundstation.CfnConfig.EirpProperty(\n                units="units",\n                value=123\n            ),\n            transmit_disabled=False\n        ),\n        dataflow_endpoint_config=groundstation.CfnConfig.DataflowEndpointConfigProperty(\n            dataflow_endpoint_name="dataflowEndpointName",\n            dataflow_endpoint_region="dataflowEndpointRegion"\n        ),\n        s3_recording_config=groundstation.CfnConfig.S3RecordingConfigProperty(\n            bucket_arn="bucketArn",\n            prefix="prefix",\n            role_arn="roleArn"\n        ),\n        tracking_config=groundstation.CfnConfig.TrackingConfigProperty(\n            autotrack="autotrack"\n        ),\n        uplink_echo_config=groundstation.CfnConfig.UplinkEchoConfigProperty(\n            antenna_uplink_config_arn="antennaUplinkConfigArn",\n            enabled=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['antenna_downlink_config', 'antenna_downlink_demod_decode_config', 'antenna_uplink_config', 'dataflow_endpoint_config', 's3_recording_config', 'tracking_config', 'uplink_echo_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.ConfigDataProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.DataflowEndpointConfigProperty
class CfnConfig_DataflowEndpointConfigPropertyDef(BaseStruct):
    dataflow_endpoint_name: typing.Optional[str] = pydantic.Field(None, description='The name of the dataflow endpoint to use during contacts.\n')
    dataflow_endpoint_region: typing.Optional[str] = pydantic.Field(None, description='The region of the dataflow endpoint to use during contacts. When omitted, Ground Station will use the region of the contact.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-dataflowendpointconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    dataflow_endpoint_config_property = groundstation.CfnConfig.DataflowEndpointConfigProperty(\n        dataflow_endpoint_name="dataflowEndpointName",\n        dataflow_endpoint_region="dataflowEndpointRegion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dataflow_endpoint_name', 'dataflow_endpoint_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.DataflowEndpointConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.DecodeConfigProperty
class CfnConfig_DecodeConfigPropertyDef(BaseStruct):
    unvalidated_json: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['unvalidated_json']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.DecodeConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.DemodulationConfigProperty
class CfnConfig_DemodulationConfigPropertyDef(BaseStruct):
    unvalidated_json: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['unvalidated_json']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.DemodulationConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.EirpProperty
class CfnConfig_EirpPropertyDef(BaseStruct):
    units: typing.Optional[str] = pydantic.Field(None, description='The units of the EIRP.\n')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='The value of the EIRP. Valid values are between 20.0 to 50.0 dBW.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-eirp.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    eirp_property = groundstation.CfnConfig.EirpProperty(\n        units="units",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['units', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.EirpProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.FrequencyBandwidthProperty
class CfnConfig_FrequencyBandwidthPropertyDef(BaseStruct):
    units: typing.Optional[str] = pydantic.Field(None, description='The units of the bandwidth.\n')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='The value of the bandwidth. AWS Ground Station currently has the following bandwidth limitations:. - For ``AntennaDownlinkDemodDecodeconfig`` , valid values are between 125 kHz to 650 MHz. - For ``AntennaDownlinkconfig`` , valid values are between 10 kHz to 54 MHz. - For ``AntennaUplinkConfig`` , valid values are between 10 kHz to 54 MHz.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-frequencybandwidth.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    frequency_bandwidth_property = groundstation.CfnConfig.FrequencyBandwidthProperty(\n        units="units",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['units', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.FrequencyBandwidthProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.FrequencyProperty
class CfnConfig_FrequencyPropertyDef(BaseStruct):
    units: typing.Optional[str] = pydantic.Field(None, description='The units of the frequency.\n')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='The value of the frequency. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-frequency.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    frequency_property = groundstation.CfnConfig.FrequencyProperty(\n        units="units",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['units', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.FrequencyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.S3RecordingConfigProperty
class CfnConfig_S3RecordingConfigPropertyDef(BaseStruct):
    bucket_arn: typing.Optional[str] = pydantic.Field(None, description='S3 Bucket where the data is written. The name of the S3 Bucket provided must begin with ``aws-groundstation`` .\n')
    prefix: typing.Optional[str] = pydantic.Field(None, description='The prefix of the S3 data object. If you choose to use any optional keys for substitution, these values will be replaced with the corresponding information from your contact details. For example, a prefix of ``{satellite_id}/{year}/{month}/{day}/`` will replaced with ``fake_satellite_id/2021/01/10/`` *Optional keys for substitution* : ``{satellite_id}`` | ``{config-name}`` | ``{config-id}`` | ``{year}`` | ``{month}`` | ``{day}``\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='Defines the ARN of the role assumed for putting archives to S3.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-s3recordingconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    s3_recording_config_property = groundstation.CfnConfig.S3RecordingConfigProperty(\n        bucket_arn="bucketArn",\n        prefix="prefix",\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_arn', 'prefix', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.S3RecordingConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.SpectrumConfigProperty
class CfnConfig_SpectrumConfigPropertyDef(BaseStruct):
    bandwidth: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_FrequencyBandwidthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The bandwidth of the spectrum. AWS Ground Station currently has the following bandwidth limitations:. - For ``AntennaDownlinkDemodDecodeconfig`` , valid values are between 125 kHz to 650 MHz. - For ``AntennaDownlinkconfig`` , valid values are between 10 kHz to 54 MHz. - For ``AntennaUplinkConfig`` , valid values are between 10 kHz to 54 MHz.\n')
    center_frequency: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_FrequencyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The center frequency of the spectrum. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.\n')
    polarization: typing.Optional[str] = pydantic.Field(None, description='The polarization of the spectrum. Valid values are ``"RIGHT_HAND"`` and ``"LEFT_HAND"`` . Capturing both ``"RIGHT_HAND"`` and ``"LEFT_HAND"`` polarization requires two separate configs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-spectrumconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    spectrum_config_property = groundstation.CfnConfig.SpectrumConfigProperty(\n        bandwidth=groundstation.CfnConfig.FrequencyBandwidthProperty(\n            units="units",\n            value=123\n        ),\n        center_frequency=groundstation.CfnConfig.FrequencyProperty(\n            units="units",\n            value=123\n        ),\n        polarization="polarization"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bandwidth', 'center_frequency', 'polarization']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.SpectrumConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.TrackingConfigProperty
class CfnConfig_TrackingConfigPropertyDef(BaseStruct):
    autotrack: typing.Optional[str] = pydantic.Field(None, description='Specifies whether or not to use autotrack. ``REMOVED`` specifies that program track should only be used during the contact. ``PREFERRED`` specifies that autotracking is preferred during the contact but fallback to program track if the signal is lost. ``REQUIRED`` specifies that autotracking is required during the contact and not to use program track if the signal is lost.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-trackingconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    tracking_config_property = groundstation.CfnConfig.TrackingConfigProperty(\n        autotrack="autotrack"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['autotrack']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.TrackingConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.UplinkEchoConfigProperty
class CfnConfig_UplinkEchoConfigPropertyDef(BaseStruct):
    antenna_uplink_config_arn: typing.Optional[str] = pydantic.Field(None, description='Defines the ARN of the uplink config to echo back to a dataflow endpoint.\n')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether or not uplink echo is enabled.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-uplinkechoconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    uplink_echo_config_property = groundstation.CfnConfig.UplinkEchoConfigProperty(\n        antenna_uplink_config_arn="antennaUplinkConfigArn",\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['antenna_uplink_config_arn', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.UplinkEchoConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig.UplinkSpectrumConfigProperty
class CfnConfig_UplinkSpectrumConfigPropertyDef(BaseStruct):
    center_frequency: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_FrequencyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The center frequency of the spectrum. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.\n')
    polarization: typing.Optional[str] = pydantic.Field(None, description='The polarization of the spectrum. Valid values are ``"RIGHT_HAND"`` and ``"LEFT_HAND"`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-config-uplinkspectrumconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    uplink_spectrum_config_property = groundstation.CfnConfig.UplinkSpectrumConfigProperty(\n        center_frequency=groundstation.CfnConfig.FrequencyProperty(\n            units="units",\n            value=123\n        ),\n        polarization="polarization"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['center_frequency', 'polarization']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig.UplinkSpectrumConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.AwsGroundStationAgentEndpointProperty
class CfnDataflowEndpointGroup_AwsGroundStationAgentEndpointPropertyDef(BaseStruct):
    agent_status: typing.Optional[str] = pydantic.Field(None, description='')
    audit_results: typing.Optional[str] = pydantic.Field(None, description='')
    egress_address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_ConnectionDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ingress_address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_RangedConnectionDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['agent_status', 'audit_results', 'egress_address', 'ingress_address', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.AwsGroundStationAgentEndpointProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.ConnectionDetailsProperty
class CfnDataflowEndpointGroup_ConnectionDetailsPropertyDef(BaseStruct):
    mtu: typing.Union[int, float, None] = pydantic.Field(None, description='')
    socket_address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_SocketAddressPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['mtu', 'socket_address']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.ConnectionDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.DataflowEndpointProperty
class CfnDataflowEndpointGroup_DataflowEndpointPropertyDef(BaseStruct):
    address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_SocketAddressPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The address and port of an endpoint.\n')
    mtu: typing.Union[int, float, None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='The endpoint name. When listing available contacts for a satellite, Ground Station searches for a dataflow endpoint whose name matches the value specified by the dataflow endpoint config of the selected mission profile. If no matching dataflow endpoints are found then Ground Station will not display any available contacts for the satellite.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-dataflowendpointgroup-dataflowendpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    dataflow_endpoint_property = groundstation.CfnDataflowEndpointGroup.DataflowEndpointProperty(\n        address=groundstation.CfnDataflowEndpointGroup.SocketAddressProperty(\n            name="name",\n            port=123\n        ),\n        mtu=123,\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['address', 'mtu', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.DataflowEndpointProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.EndpointDetailsProperty
class CfnDataflowEndpointGroup_EndpointDetailsPropertyDef(BaseStruct):
    aws_ground_station_agent_endpoint: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_AwsGroundStationAgentEndpointPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    endpoint: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_DataflowEndpointPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the endpoint such as name and the endpoint address.\n')
    security_details: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_SecurityDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The role ARN, and IDs for security groups and subnets.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-dataflowendpointgroup-endpointdetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    endpoint_details_property = groundstation.CfnDataflowEndpointGroup.EndpointDetailsProperty(\n        aws_ground_station_agent_endpoint=groundstation.CfnDataflowEndpointGroup.AwsGroundStationAgentEndpointProperty(\n            agent_status="agentStatus",\n            audit_results="auditResults",\n            egress_address=groundstation.CfnDataflowEndpointGroup.ConnectionDetailsProperty(\n                mtu=123,\n                socket_address=groundstation.CfnDataflowEndpointGroup.SocketAddressProperty(\n                    name="name",\n                    port=123\n                )\n            ),\n            ingress_address=groundstation.CfnDataflowEndpointGroup.RangedConnectionDetailsProperty(\n                mtu=123,\n                socket_address=groundstation.CfnDataflowEndpointGroup.RangedSocketAddressProperty(\n                    name="name",\n                    port_range=groundstation.CfnDataflowEndpointGroup.IntegerRangeProperty(\n                        maximum=123,\n                        minimum=123\n                    )\n                )\n            ),\n            name="name"\n        ),\n        endpoint=groundstation.CfnDataflowEndpointGroup.DataflowEndpointProperty(\n            address=groundstation.CfnDataflowEndpointGroup.SocketAddressProperty(\n                name="name",\n                port=123\n            ),\n            mtu=123,\n            name="name"\n        ),\n        security_details=groundstation.CfnDataflowEndpointGroup.SecurityDetailsProperty(\n            role_arn="roleArn",\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aws_ground_station_agent_endpoint', 'endpoint', 'security_details']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.EndpointDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.IntegerRangeProperty
class CfnDataflowEndpointGroup_IntegerRangePropertyDef(BaseStruct):
    maximum: typing.Union[int, float, None] = pydantic.Field(None, description='')
    minimum: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['maximum', 'minimum']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.IntegerRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.RangedConnectionDetailsProperty
class CfnDataflowEndpointGroup_RangedConnectionDetailsPropertyDef(BaseStruct):
    mtu: typing.Union[int, float, None] = pydantic.Field(None, description='')
    socket_address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_RangedSocketAddressPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['mtu', 'socket_address']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.RangedConnectionDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.RangedSocketAddressProperty
class CfnDataflowEndpointGroup_RangedSocketAddressPropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    port_range: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_IntegerRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['name', 'port_range']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.RangedSocketAddressProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.SecurityDetailsProperty
class CfnDataflowEndpointGroup_SecurityDetailsPropertyDef(BaseStruct):
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of a role which Ground Station has permission to assume, such as ``arn:aws:iam::1234567890:role/DataDeliveryServiceRole`` . Ground Station will assume this role and create an ENI in your VPC on the specified subnet upon creation of a dataflow endpoint group. This ENI is used as the ingress/egress point for data streamed during a satellite contact.\n')
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The security group Ids of the security role, such as ``sg-1234567890abcdef0`` .\n')
    subnet_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The subnet Ids of the security details, such as ``subnet-12345678`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-dataflowendpointgroup-securitydetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    security_details_property = groundstation.CfnDataflowEndpointGroup.SecurityDetailsProperty(\n        role_arn="roleArn",\n        security_group_ids=["securityGroupIds"],\n        subnet_ids=["subnetIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['role_arn', 'security_group_ids', 'subnet_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.SecurityDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.SocketAddressProperty
class CfnDataflowEndpointGroup_SocketAddressPropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the endpoint, such as ``Endpoint 1`` .\n')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='The port of the endpoint, such as ``55888`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-dataflowendpointgroup-socketaddress.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    socket_address_property = groundstation.CfnDataflowEndpointGroup.SocketAddressProperty(\n        name="name",\n        port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup.SocketAddressProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnMissionProfile.DataflowEdgeProperty
class CfnMissionProfile_DataflowEdgePropertyDef(BaseStruct):
    destination: typing.Optional[str] = pydantic.Field(None, description='The ARN of the destination for this dataflow edge. For example, specify the ARN of a dataflow endpoint config for a downlink edge or an antenna uplink config for an uplink edge.\n')
    source: typing.Optional[str] = pydantic.Field(None, description='The ARN of the source for this dataflow edge. For example, specify the ARN of an antenna downlink config for a downlink edge or a dataflow endpoint config for an uplink edge.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-groundstation-missionprofile-dataflowedge.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    dataflow_edge_property = groundstation.CfnMissionProfile.DataflowEdgeProperty(\n        destination="destination",\n        source="source"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnMissionProfile.DataflowEdgeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnMissionProfile.StreamsKmsKeyProperty
class CfnMissionProfile_StreamsKmsKeyPropertyDef(BaseStruct):
    kms_alias_arn: typing.Optional[str] = pydantic.Field(None, description='')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['kms_alias_arn', 'kms_key_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnMissionProfile.StreamsKmsKeyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnConfig
class CfnConfigDef(BaseCfnResource):
    config_data: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_groundstation.CfnConfig_ConfigDataPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Object containing the parameters of a config. Only one subtype may be specified per config. See the subtype definitions for a description of each config subtype.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the config object.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags assigned to a resource.')
    _init_params: typing.ClassVar[list[str]] = ['config_data', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AntennaDownlinkConfigProperty', 'AntennaDownlinkDemodDecodeConfigProperty', 'AntennaUplinkConfigProperty', 'ConfigDataProperty', 'DataflowEndpointConfigProperty', 'DecodeConfigProperty', 'DemodulationConfigProperty', 'EirpProperty', 'FrequencyBandwidthProperty', 'FrequencyProperty', 'S3RecordingConfigProperty', 'SpectrumConfigProperty', 'TrackingConfigProperty', 'UplinkEchoConfigProperty', 'UplinkSpectrumConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_groundstation.CfnConfigDefConfig] = pydantic.Field(None)


class CfnConfigDefConfig(pydantic.BaseModel):
    AntennaDownlinkConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefAntennadownlinkconfigpropertyParams]] = pydantic.Field(None, description='')
    AntennaDownlinkDemodDecodeConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefAntennadownlinkdemoddecodeconfigpropertyParams]] = pydantic.Field(None, description='')
    AntennaUplinkConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefAntennauplinkconfigpropertyParams]] = pydantic.Field(None, description='')
    ConfigDataProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefConfigdatapropertyParams]] = pydantic.Field(None, description='')
    DataflowEndpointConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefDataflowendpointconfigpropertyParams]] = pydantic.Field(None, description='')
    DecodeConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefDecodeconfigpropertyParams]] = pydantic.Field(None, description='')
    DemodulationConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefDemodulationconfigpropertyParams]] = pydantic.Field(None, description='')
    EirpProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefEirppropertyParams]] = pydantic.Field(None, description='')
    FrequencyBandwidthProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefFrequencybandwidthpropertyParams]] = pydantic.Field(None, description='')
    FrequencyProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefFrequencypropertyParams]] = pydantic.Field(None, description='')
    S3RecordingConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefS3RecordingconfigpropertyParams]] = pydantic.Field(None, description='')
    SpectrumConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefSpectrumconfigpropertyParams]] = pydantic.Field(None, description='')
    TrackingConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefTrackingconfigpropertyParams]] = pydantic.Field(None, description='')
    UplinkEchoConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefUplinkechoconfigpropertyParams]] = pydantic.Field(None, description='')
    UplinkSpectrumConfigProperty: typing.Optional[list[models.aws_groundstation.CfnConfigDefUplinkspectrumconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_groundstation.CfnConfigDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_groundstation.CfnConfigDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_groundstation.CfnConfigDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_groundstation.CfnConfigDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_groundstation.CfnConfigDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_groundstation.CfnConfigDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_groundstation.CfnConfigDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_groundstation.CfnConfigDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_groundstation.CfnConfigDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_groundstation.CfnConfigDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_groundstation.CfnConfigDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_groundstation.CfnConfigDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_groundstation.CfnConfigDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnConfigDefAntennadownlinkconfigpropertyParams(pydantic.BaseModel):
    spectrum_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_SpectrumConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConfigDefAntennadownlinkdemoddecodeconfigpropertyParams(pydantic.BaseModel):
    decode_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_DecodeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    demodulation_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_DemodulationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    spectrum_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_SpectrumConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConfigDefAntennauplinkconfigpropertyParams(pydantic.BaseModel):
    spectrum_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_UplinkSpectrumConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    target_eirp: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_EirpPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    transmit_disabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnConfigDefConfigdatapropertyParams(pydantic.BaseModel):
    antenna_downlink_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_AntennaDownlinkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    antenna_downlink_demod_decode_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_AntennaDownlinkDemodDecodeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    antenna_uplink_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_AntennaUplinkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dataflow_endpoint_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_DataflowEndpointConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_recording_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_S3RecordingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    tracking_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_TrackingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    uplink_echo_config: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_UplinkEchoConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConfigDefDataflowendpointconfigpropertyParams(pydantic.BaseModel):
    dataflow_endpoint_name: typing.Optional[str] = pydantic.Field(None, description='')
    dataflow_endpoint_region: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigDefDecodeconfigpropertyParams(pydantic.BaseModel):
    unvalidated_json: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigDefDemodulationconfigpropertyParams(pydantic.BaseModel):
    unvalidated_json: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigDefEirppropertyParams(pydantic.BaseModel):
    units: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnConfigDefFrequencybandwidthpropertyParams(pydantic.BaseModel):
    units: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnConfigDefFrequencypropertyParams(pydantic.BaseModel):
    units: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnConfigDefS3RecordingconfigpropertyParams(pydantic.BaseModel):
    bucket_arn: typing.Optional[str] = pydantic.Field(None, description='')
    prefix: typing.Optional[str] = pydantic.Field(None, description='')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigDefSpectrumconfigpropertyParams(pydantic.BaseModel):
    bandwidth: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_FrequencyBandwidthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    center_frequency: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_FrequencyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    polarization: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigDefTrackingconfigpropertyParams(pydantic.BaseModel):
    autotrack: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigDefUplinkechoconfigpropertyParams(pydantic.BaseModel):
    antenna_uplink_config_arn: typing.Optional[str] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnConfigDefUplinkspectrumconfigpropertyParams(pydantic.BaseModel):
    center_frequency: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnConfig_FrequencyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    polarization: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnConfigDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnConfigDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnConfigDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnConfigDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnConfigDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnConfigDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnConfigDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnConfigDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnConfigDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroup
class CfnDataflowEndpointGroupDef(BaseCfnResource):
    endpoint_details: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_EndpointDetailsPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='List of Endpoint Details, containing address and port for each endpoint.\n')
    contact_post_pass_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Amount of time, in seconds, after a contact ends that the Ground Station Dataflow Endpoint Group will be in a ``POSTPASS`` state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the ``POSTPASS`` state.\n')
    contact_pre_pass_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Amount of time, in seconds, before a contact starts that the Ground Station Dataflow Endpoint Group will be in a ``PREPASS`` state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the ``PREPASS`` state.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags assigned to a resource.')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_details', 'contact_post_pass_duration_seconds', 'contact_pre_pass_duration_seconds', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AwsGroundStationAgentEndpointProperty', 'ConnectionDetailsProperty', 'DataflowEndpointProperty', 'EndpointDetailsProperty', 'IntegerRangeProperty', 'RangedConnectionDetailsProperty', 'RangedSocketAddressProperty', 'SecurityDetailsProperty', 'SocketAddressProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_groundstation.CfnDataflowEndpointGroupDefConfig] = pydantic.Field(None)


class CfnDataflowEndpointGroupDefConfig(pydantic.BaseModel):
    AwsGroundStationAgentEndpointProperty: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefAwsgroundstationagentendpointpropertyParams]] = pydantic.Field(None, description='')
    ConnectionDetailsProperty: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefConnectiondetailspropertyParams]] = pydantic.Field(None, description='')
    DataflowEndpointProperty: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefDataflowendpointpropertyParams]] = pydantic.Field(None, description='')
    EndpointDetailsProperty: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefEndpointdetailspropertyParams]] = pydantic.Field(None, description='')
    IntegerRangeProperty: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefIntegerrangepropertyParams]] = pydantic.Field(None, description='')
    RangedConnectionDetailsProperty: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefRangedconnectiondetailspropertyParams]] = pydantic.Field(None, description='')
    RangedSocketAddressProperty: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefRangedsocketaddresspropertyParams]] = pydantic.Field(None, description='')
    SecurityDetailsProperty: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefSecuritydetailspropertyParams]] = pydantic.Field(None, description='')
    SocketAddressProperty: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefSocketaddresspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_groundstation.CfnDataflowEndpointGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDataflowEndpointGroupDefAwsgroundstationagentendpointpropertyParams(pydantic.BaseModel):
    agent_status: typing.Optional[str] = pydantic.Field(None, description='')
    audit_results: typing.Optional[str] = pydantic.Field(None, description='')
    egress_address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_ConnectionDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ingress_address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_RangedConnectionDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataflowEndpointGroupDefConnectiondetailspropertyParams(pydantic.BaseModel):
    mtu: typing.Union[int, float, None] = pydantic.Field(None, description='')
    socket_address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_SocketAddressPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataflowEndpointGroupDefDataflowendpointpropertyParams(pydantic.BaseModel):
    address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_SocketAddressPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    mtu: typing.Union[int, float, None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataflowEndpointGroupDefEndpointdetailspropertyParams(pydantic.BaseModel):
    aws_ground_station_agent_endpoint: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_AwsGroundStationAgentEndpointPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    endpoint: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_DataflowEndpointPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_details: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_SecurityDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataflowEndpointGroupDefIntegerrangepropertyParams(pydantic.BaseModel):
    maximum: typing.Union[int, float, None] = pydantic.Field(None, description='')
    minimum: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDataflowEndpointGroupDefRangedconnectiondetailspropertyParams(pydantic.BaseModel):
    mtu: typing.Union[int, float, None] = pydantic.Field(None, description='')
    socket_address: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_RangedSocketAddressPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataflowEndpointGroupDefRangedsocketaddresspropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    port_range: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_IntegerRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataflowEndpointGroupDefSecuritydetailspropertyParams(pydantic.BaseModel):
    role_arn: typing.Optional[str] = pydantic.Field(None, description='')
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    subnet_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDataflowEndpointGroupDefSocketaddresspropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    port: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDataflowEndpointGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDataflowEndpointGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataflowEndpointGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDataflowEndpointGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataflowEndpointGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDataflowEndpointGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDataflowEndpointGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDataflowEndpointGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDataflowEndpointGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDataflowEndpointGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataflowEndpointGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDataflowEndpointGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDataflowEndpointGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataflowEndpointGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_groundstation.CfnMissionProfile
class CfnMissionProfileDef(BaseCfnResource):
    dataflow_edges: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnMissionProfile_DataflowEdgePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list containing lists of config ARNs. Each list of config ARNs is an edge, with a "from" config and a "to" config.\n')
    minimum_viable_contact_duration_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Minimum length of a contact in seconds that Ground Station will return when listing contacts. Ground Station will not return contacts shorter than this duration.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the mission profile.\n')
    tracking_config_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of a tracking config objects that defines how to track the satellite through the sky during a contact.\n')
    contact_post_pass_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Amount of time in seconds after a contact ends that you’d like to receive a CloudWatch Event indicating the pass has finished. For more information on CloudWatch Events, see the `What Is CloudWatch Events? <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/WhatIsCloudWatchEvents.html>`_\n')
    contact_pre_pass_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description="Amount of time in seconds prior to contact start that you'd like to receive a CloudWatch Event indicating an upcoming pass. For more information on CloudWatch Events, see the `What Is CloudWatch Events? <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/WhatIsCloudWatchEvents.html>`_\n")
    streams_kms_key: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnMissionProfile_StreamsKmsKeyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    streams_kms_role: typing.Optional[str] = pydantic.Field(None, description='The ARN of the KMS Key or Alias Key role used to define permissions on KMS Key usage.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags assigned to the mission profile.')
    _init_params: typing.ClassVar[list[str]] = ['dataflow_edges', 'minimum_viable_contact_duration_seconds', 'name', 'tracking_config_arn', 'contact_post_pass_duration_seconds', 'contact_pre_pass_duration_seconds', 'streams_kms_key', 'streams_kms_role', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['DataflowEdgeProperty', 'StreamsKmsKeyProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnMissionProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_groundstation.CfnMissionProfileDefConfig] = pydantic.Field(None)


class CfnMissionProfileDefConfig(pydantic.BaseModel):
    DataflowEdgeProperty: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefDataflowedgepropertyParams]] = pydantic.Field(None, description='')
    StreamsKmsKeyProperty: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefStreamskmskeypropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_groundstation.CfnMissionProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnMissionProfileDefDataflowedgepropertyParams(pydantic.BaseModel):
    destination: typing.Optional[str] = pydantic.Field(None, description='')
    source: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMissionProfileDefStreamskmskeypropertyParams(pydantic.BaseModel):
    kms_alias_arn: typing.Optional[str] = pydantic.Field(None, description='')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMissionProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMissionProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMissionProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMissionProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMissionProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMissionProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMissionProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMissionProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMissionProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMissionProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMissionProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnMissionProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMissionProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMissionProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_groundstation.CfnConfigProps
class CfnConfigPropsDef(BaseCfnProperty):
    config_data: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_groundstation.CfnConfig_ConfigDataPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Object containing the parameters of a config. Only one subtype may be specified per config. See the subtype definitions for a description of each config subtype.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the config object.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags assigned to a resource.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-groundstation-config.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    cfn_config_props = groundstation.CfnConfigProps(\n        config_data=groundstation.CfnConfig.ConfigDataProperty(\n            antenna_downlink_config=groundstation.CfnConfig.AntennaDownlinkConfigProperty(\n                spectrum_config=groundstation.CfnConfig.SpectrumConfigProperty(\n                    bandwidth=groundstation.CfnConfig.FrequencyBandwidthProperty(\n                        units="units",\n                        value=123\n                    ),\n                    center_frequency=groundstation.CfnConfig.FrequencyProperty(\n                        units="units",\n                        value=123\n                    ),\n                    polarization="polarization"\n                )\n            ),\n            antenna_downlink_demod_decode_config=groundstation.CfnConfig.AntennaDownlinkDemodDecodeConfigProperty(\n                decode_config=groundstation.CfnConfig.DecodeConfigProperty(\n                    unvalidated_json="unvalidatedJson"\n                ),\n                demodulation_config=groundstation.CfnConfig.DemodulationConfigProperty(\n                    unvalidated_json="unvalidatedJson"\n                ),\n                spectrum_config=groundstation.CfnConfig.SpectrumConfigProperty(\n                    bandwidth=groundstation.CfnConfig.FrequencyBandwidthProperty(\n                        units="units",\n                        value=123\n                    ),\n                    center_frequency=groundstation.CfnConfig.FrequencyProperty(\n                        units="units",\n                        value=123\n                    ),\n                    polarization="polarization"\n                )\n            ),\n            antenna_uplink_config=groundstation.CfnConfig.AntennaUplinkConfigProperty(\n                spectrum_config=groundstation.CfnConfig.UplinkSpectrumConfigProperty(\n                    center_frequency=groundstation.CfnConfig.FrequencyProperty(\n                        units="units",\n                        value=123\n                    ),\n                    polarization="polarization"\n                ),\n                target_eirp=groundstation.CfnConfig.EirpProperty(\n                    units="units",\n                    value=123\n                ),\n                transmit_disabled=False\n            ),\n            dataflow_endpoint_config=groundstation.CfnConfig.DataflowEndpointConfigProperty(\n                dataflow_endpoint_name="dataflowEndpointName",\n                dataflow_endpoint_region="dataflowEndpointRegion"\n            ),\n            s3_recording_config=groundstation.CfnConfig.S3RecordingConfigProperty(\n                bucket_arn="bucketArn",\n                prefix="prefix",\n                role_arn="roleArn"\n            ),\n            tracking_config=groundstation.CfnConfig.TrackingConfigProperty(\n                autotrack="autotrack"\n            ),\n            uplink_echo_config=groundstation.CfnConfig.UplinkEchoConfigProperty(\n                antenna_uplink_config_arn="antennaUplinkConfigArn",\n                enabled=False\n            )\n        ),\n        name="name",\n\n        # the properties below are optional\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['config_data', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnConfigProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnDataflowEndpointGroupProps
class CfnDataflowEndpointGroupPropsDef(BaseCfnProperty):
    endpoint_details: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnDataflowEndpointGroup_EndpointDetailsPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='List of Endpoint Details, containing address and port for each endpoint.\n')
    contact_post_pass_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Amount of time, in seconds, after a contact ends that the Ground Station Dataflow Endpoint Group will be in a ``POSTPASS`` state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the ``POSTPASS`` state.\n')
    contact_pre_pass_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Amount of time, in seconds, before a contact starts that the Ground Station Dataflow Endpoint Group will be in a ``PREPASS`` state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the ``PREPASS`` state.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags assigned to a resource.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-groundstation-dataflowendpointgroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    cfn_dataflow_endpoint_group_props = groundstation.CfnDataflowEndpointGroupProps(\n        endpoint_details=[groundstation.CfnDataflowEndpointGroup.EndpointDetailsProperty(\n            aws_ground_station_agent_endpoint=groundstation.CfnDataflowEndpointGroup.AwsGroundStationAgentEndpointProperty(\n                agent_status="agentStatus",\n                audit_results="auditResults",\n                egress_address=groundstation.CfnDataflowEndpointGroup.ConnectionDetailsProperty(\n                    mtu=123,\n                    socket_address=groundstation.CfnDataflowEndpointGroup.SocketAddressProperty(\n                        name="name",\n                        port=123\n                    )\n                ),\n                ingress_address=groundstation.CfnDataflowEndpointGroup.RangedConnectionDetailsProperty(\n                    mtu=123,\n                    socket_address=groundstation.CfnDataflowEndpointGroup.RangedSocketAddressProperty(\n                        name="name",\n                        port_range=groundstation.CfnDataflowEndpointGroup.IntegerRangeProperty(\n                            maximum=123,\n                            minimum=123\n                        )\n                    )\n                ),\n                name="name"\n            ),\n            endpoint=groundstation.CfnDataflowEndpointGroup.DataflowEndpointProperty(\n                address=groundstation.CfnDataflowEndpointGroup.SocketAddressProperty(\n                    name="name",\n                    port=123\n                ),\n                mtu=123,\n                name="name"\n            ),\n            security_details=groundstation.CfnDataflowEndpointGroup.SecurityDetailsProperty(\n                role_arn="roleArn",\n                security_group_ids=["securityGroupIds"],\n                subnet_ids=["subnetIds"]\n            )\n        )],\n\n        # the properties below are optional\n        contact_post_pass_duration_seconds=123,\n        contact_pre_pass_duration_seconds=123,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_details', 'contact_post_pass_duration_seconds', 'contact_pre_pass_duration_seconds', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnDataflowEndpointGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_groundstation.CfnMissionProfileProps
class CfnMissionProfilePropsDef(BaseCfnProperty):
    dataflow_edges: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnMissionProfile_DataflowEdgePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list containing lists of config ARNs. Each list of config ARNs is an edge, with a "from" config and a "to" config.\n')
    minimum_viable_contact_duration_seconds: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='Minimum length of a contact in seconds that Ground Station will return when listing contacts. Ground Station will not return contacts shorter than this duration.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the mission profile.\n')
    tracking_config_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of a tracking config objects that defines how to track the satellite through the sky during a contact.\n')
    contact_post_pass_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Amount of time in seconds after a contact ends that you’d like to receive a CloudWatch Event indicating the pass has finished. For more information on CloudWatch Events, see the `What Is CloudWatch Events? <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/WhatIsCloudWatchEvents.html>`_\n')
    contact_pre_pass_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description="Amount of time in seconds prior to contact start that you'd like to receive a CloudWatch Event indicating an upcoming pass. For more information on CloudWatch Events, see the `What Is CloudWatch Events? <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/WhatIsCloudWatchEvents.html>`_\n")
    streams_kms_key: typing.Union[models.UnsupportedResource, models.aws_groundstation.CfnMissionProfile_StreamsKmsKeyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    streams_kms_role: typing.Optional[str] = pydantic.Field(None, description='The ARN of the KMS Key or Alias Key role used to define permissions on KMS Key usage.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags assigned to the mission profile.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-groundstation-missionprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_groundstation as groundstation\n\n    cfn_mission_profile_props = groundstation.CfnMissionProfileProps(\n        dataflow_edges=[groundstation.CfnMissionProfile.DataflowEdgeProperty(\n            destination="destination",\n            source="source"\n        )],\n        minimum_viable_contact_duration_seconds=123,\n        name="name",\n        tracking_config_arn="trackingConfigArn",\n\n        # the properties below are optional\n        contact_post_pass_duration_seconds=123,\n        contact_pre_pass_duration_seconds=123,\n        streams_kms_key=groundstation.CfnMissionProfile.StreamsKmsKeyProperty(\n            kms_alias_arn="kmsAliasArn",\n            kms_key_arn="kmsKeyArn"\n        ),\n        streams_kms_role="streamsKmsRole",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dataflow_edges', 'minimum_viable_contact_duration_seconds', 'name', 'tracking_config_arn', 'contact_post_pass_duration_seconds', 'contact_pre_pass_duration_seconds', 'streams_kms_key', 'streams_kms_role', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_groundstation.CfnMissionProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnConfig_AntennaDownlinkConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_AntennaDownlinkConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_AntennaDownlinkDemodDecodeConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_AntennaDownlinkDemodDecodeConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_AntennaUplinkConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_AntennaUplinkConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_ConfigDataProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_ConfigDataPropertyDef]] = pydantic.Field(None)
    CfnConfig_DataflowEndpointConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_DataflowEndpointConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_DecodeConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_DecodeConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_DemodulationConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_DemodulationConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_EirpProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_EirpPropertyDef]] = pydantic.Field(None)
    CfnConfig_FrequencyBandwidthProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_FrequencyBandwidthPropertyDef]] = pydantic.Field(None)
    CfnConfig_FrequencyProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_FrequencyPropertyDef]] = pydantic.Field(None)
    CfnConfig_S3RecordingConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_S3RecordingConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_SpectrumConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_SpectrumConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_TrackingConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_TrackingConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_UplinkEchoConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_UplinkEchoConfigPropertyDef]] = pydantic.Field(None)
    CfnConfig_UplinkSpectrumConfigProperty: typing.Optional[dict[str, models.aws_groundstation.CfnConfig_UplinkSpectrumConfigPropertyDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup_AwsGroundStationAgentEndpointProperty: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroup_AwsGroundStationAgentEndpointPropertyDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup_ConnectionDetailsProperty: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroup_ConnectionDetailsPropertyDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup_DataflowEndpointProperty: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroup_DataflowEndpointPropertyDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup_EndpointDetailsProperty: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroup_EndpointDetailsPropertyDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup_IntegerRangeProperty: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroup_IntegerRangePropertyDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup_RangedConnectionDetailsProperty: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroup_RangedConnectionDetailsPropertyDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup_RangedSocketAddressProperty: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroup_RangedSocketAddressPropertyDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup_SecurityDetailsProperty: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroup_SecurityDetailsPropertyDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup_SocketAddressProperty: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroup_SocketAddressPropertyDef]] = pydantic.Field(None)
    CfnMissionProfile_DataflowEdgeProperty: typing.Optional[dict[str, models.aws_groundstation.CfnMissionProfile_DataflowEdgePropertyDef]] = pydantic.Field(None)
    CfnMissionProfile_StreamsKmsKeyProperty: typing.Optional[dict[str, models.aws_groundstation.CfnMissionProfile_StreamsKmsKeyPropertyDef]] = pydantic.Field(None)
    CfnConfig: typing.Optional[dict[str, models.aws_groundstation.CfnConfigDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroup: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroupDef]] = pydantic.Field(None)
    CfnMissionProfile: typing.Optional[dict[str, models.aws_groundstation.CfnMissionProfileDef]] = pydantic.Field(None)
    CfnConfigProps: typing.Optional[dict[str, models.aws_groundstation.CfnConfigPropsDef]] = pydantic.Field(None)
    CfnDataflowEndpointGroupProps: typing.Optional[dict[str, models.aws_groundstation.CfnDataflowEndpointGroupPropsDef]] = pydantic.Field(None)
    CfnMissionProfileProps: typing.Optional[dict[str, models.aws_groundstation.CfnMissionProfilePropsDef]] = pydantic.Field(None)
    ...

import models
