from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.ActionProperty
class CfnLifecyclePolicy_ActionPropertyDef(BaseStruct):
    cross_region_copy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyActionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The rule for copying shared snapshots across Regions.\n')
    name: str = pydantic.Field(..., description='A descriptive name for the action.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-action.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    action_property = dlm.CfnLifecyclePolicy.ActionProperty(\n        cross_region_copy=[dlm.CfnLifecyclePolicy.CrossRegionCopyActionProperty(\n            encryption_configuration=dlm.CfnLifecyclePolicy.EncryptionConfigurationProperty(\n                encrypted=False,\n\n                # the properties below are optional\n                cmk_arn="cmkArn"\n            ),\n            target="target",\n\n            # the properties below are optional\n            retain_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty(\n                interval=123,\n                interval_unit="intervalUnit"\n            )\n        )],\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cross_region_copy', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.ActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.ArchiveRetainRuleProperty
class CfnLifecyclePolicy_ArchiveRetainRulePropertyDef(BaseStruct):
    retention_archive_tier: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_RetentionArchiveTierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``CfnLifecyclePolicy.ArchiveRetainRuleProperty.RetentionArchiveTier``.')
    _init_params: typing.ClassVar[list[str]] = ['retention_archive_tier']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.ArchiveRetainRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.ArchiveRuleProperty
class CfnLifecyclePolicy_ArchiveRulePropertyDef(BaseStruct):
    retain_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ArchiveRetainRulePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``CfnLifecyclePolicy.ArchiveRuleProperty.RetainRule``.')
    _init_params: typing.ClassVar[list[str]] = ['retain_rule']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.ArchiveRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.CreateRuleProperty
class CfnLifecyclePolicy_CreateRulePropertyDef(BaseStruct):
    cron_expression: typing.Optional[str] = pydantic.Field(None, description='The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. For more information, see `Cron expressions <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions>`_ in the *Amazon CloudWatch User Guide* .\n')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='The interval between snapshots. The supported values are 1, 2, 3, 4, 6, 8, 12, and 24.\n')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='The interval unit.\n')
    location: typing.Optional[str] = pydantic.Field(None, description='*[Snapshot policies only]* Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify ``CLOUD`` . To create snapshots on the same Outpost as the source resource, specify ``OUTPOST_LOCAL`` . If you omit this parameter, ``CLOUD`` is used by default. If the policy targets resources in an AWS Region , then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost.\n')
    times: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The time, in UTC, to start the operation. The supported format is hh:mm. The operation occurs within a one-hour window following the specified time. If you do not specify a time, Amazon Data Lifecycle Manager selects a time within the next 24 hours.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-createrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    create_rule_property = dlm.CfnLifecyclePolicy.CreateRuleProperty(\n        cron_expression="cronExpression",\n        interval=123,\n        interval_unit="intervalUnit",\n        location="location",\n        times=["times"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cron_expression', 'interval', 'interval_unit', 'location', 'times']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.CreateRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.CrossRegionCopyActionProperty
class CfnLifecyclePolicy_CrossRegionCopyActionPropertyDef(BaseStruct):
    encryption_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_EncryptionConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The encryption settings for the copied snapshot.\n')
    target: str = pydantic.Field(..., description='The target Region.\n')
    retain_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyRetainRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a retention rule for cross-Region snapshot copies created by snapshot or event-based policies, or cross-Region AMI copies created by AMI policies. After the retention period expires, the cross-Region copy is deleted.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-crossregioncopyaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    cross_region_copy_action_property = dlm.CfnLifecyclePolicy.CrossRegionCopyActionProperty(\n        encryption_configuration=dlm.CfnLifecyclePolicy.EncryptionConfigurationProperty(\n            encrypted=False,\n\n            # the properties below are optional\n            cmk_arn="cmkArn"\n        ),\n        target="target",\n\n        # the properties below are optional\n        retain_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty(\n            interval=123,\n            interval_unit="intervalUnit"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encryption_configuration', 'target', 'retain_rule']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.CrossRegionCopyActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.CrossRegionCopyDeprecateRuleProperty
class CfnLifecyclePolicy_CrossRegionCopyDeprecateRulePropertyDef(BaseStruct):
    interval: typing.Union[int, float] = pydantic.Field(..., description='``CfnLifecyclePolicy.CrossRegionCopyDeprecateRuleProperty.Interval``.')
    interval_unit: str = pydantic.Field(..., description='``CfnLifecyclePolicy.CrossRegionCopyDeprecateRuleProperty.IntervalUnit``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-crossregioncopydeprecaterule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    cross_region_copy_deprecate_rule_property = dlm.CfnLifecyclePolicy.CrossRegionCopyDeprecateRuleProperty(\n        interval=123,\n        interval_unit="intervalUnit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['interval', 'interval_unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.CrossRegionCopyDeprecateRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty
class CfnLifecyclePolicy_CrossRegionCopyRetainRulePropertyDef(BaseStruct):
    interval: typing.Union[int, float] = pydantic.Field(..., description='The amount of time to retain a cross-Region snapshot or AMI copy. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.\n')
    interval_unit: str = pydantic.Field(..., description='The unit of time for time-based retention. For example, to retain a cross-Region copy for 3 months, specify ``Interval=3`` and ``IntervalUnit=MONTHS`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-crossregioncopyretainrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    cross_region_copy_retain_rule_property = dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty(\n        interval=123,\n        interval_unit="intervalUnit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['interval', 'interval_unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.CrossRegionCopyRuleProperty
class CfnLifecyclePolicy_CrossRegionCopyRulePropertyDef(BaseStruct):
    encrypted: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or if encryption by default is not enabled.\n')
    cmk_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.\n')
    copy_tags: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether to copy all user-defined tags from the source snapshot or AMI to the cross-Region copy.\n')
    deprecate_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyDeprecateRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnLifecyclePolicy.CrossRegionCopyRuleProperty.DeprecateRule``.\n')
    retain_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyRetainRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The retention rule that indicates how long the cross-Region snapshot or AMI copies are to be retained in the destination Region.\n')
    target: typing.Optional[str] = pydantic.Field(None, description='The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies. Use this parameter instead of *TargetRegion* . Do not specify both.\n')
    target_region: typing.Optional[str] = pydantic.Field(None, description='.. epigraph:: Avoid using this parameter when creating new policies. Instead, use *Target* to specify a target Region or a target Outpost for snapshot copies. .. epigraph:: For policies created before the *Target* parameter was introduced, this parameter indicates the target Region for snapshot copies.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-crossregioncopyrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    cross_region_copy_rule_property = dlm.CfnLifecyclePolicy.CrossRegionCopyRuleProperty(\n        encrypted=False,\n\n        # the properties below are optional\n        cmk_arn="cmkArn",\n        copy_tags=False,\n        deprecate_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyDeprecateRuleProperty(\n            interval=123,\n            interval_unit="intervalUnit"\n        ),\n        retain_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty(\n            interval=123,\n            interval_unit="intervalUnit"\n        ),\n        target="target",\n        target_region="targetRegion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encrypted', 'cmk_arn', 'copy_tags', 'deprecate_rule', 'retain_rule', 'target', 'target_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.CrossRegionCopyRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.DeprecateRuleProperty
class CfnLifecyclePolicy_DeprecateRulePropertyDef(BaseStruct):
    count: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnLifecyclePolicy.DeprecateRuleProperty.Count``.')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnLifecyclePolicy.DeprecateRuleProperty.Interval``.\n')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='``CfnLifecyclePolicy.DeprecateRuleProperty.IntervalUnit``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-deprecaterule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    deprecate_rule_property = dlm.CfnLifecyclePolicy.DeprecateRuleProperty(\n        count=123,\n        interval=123,\n        interval_unit="intervalUnit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['count', 'interval', 'interval_unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.DeprecateRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.EncryptionConfigurationProperty
class CfnLifecyclePolicy_EncryptionConfigurationPropertyDef(BaseStruct):
    encrypted: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.\n')
    cmk_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-encryptionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    encryption_configuration_property = dlm.CfnLifecyclePolicy.EncryptionConfigurationProperty(\n        encrypted=False,\n\n        # the properties below are optional\n        cmk_arn="cmkArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encrypted', 'cmk_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.EncryptionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.EventParametersProperty
class CfnLifecyclePolicy_EventParametersPropertyDef(BaseStruct):
    event_type: str = pydantic.Field(..., description='The type of event. Currently, only snapshot sharing events are supported.\n')
    snapshot_owner: typing.Sequence[str] = pydantic.Field(..., description='The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.\n')
    description_regex: typing.Optional[str] = pydantic.Field(None, description='The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account. For example, specifying ``^.*Created for policy: policy-1234567890abcdef0.*$`` configures the policy to run only if snapshots created by policy ``policy-1234567890abcdef0`` are shared with your account.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-eventparameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    event_parameters_property = dlm.CfnLifecyclePolicy.EventParametersProperty(\n        event_type="eventType",\n        snapshot_owner=["snapshotOwner"],\n\n        # the properties below are optional\n        description_regex="descriptionRegex"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_type', 'snapshot_owner', 'description_regex']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.EventParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.EventSourceProperty
class CfnLifecyclePolicy_EventSourcePropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='The source of the event. Currently only managed CloudWatch Events rules are supported.\n')
    parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_EventParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the event.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-eventsource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    event_source_property = dlm.CfnLifecyclePolicy.EventSourceProperty(\n        type="type",\n\n        # the properties below are optional\n        parameters=dlm.CfnLifecyclePolicy.EventParametersProperty(\n            event_type="eventType",\n            snapshot_owner=["snapshotOwner"],\n\n            # the properties below are optional\n            description_regex="descriptionRegex"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.EventSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.FastRestoreRuleProperty
class CfnLifecyclePolicy_FastRestoreRulePropertyDef(BaseStruct):
    availability_zones: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The Availability Zones in which to enable fast snapshot restore.\n')
    count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of snapshots to be enabled with fast snapshot restore.\n')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time to enable fast snapshot restore. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.\n')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='The unit of time for enabling fast snapshot restore.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-fastrestorerule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    fast_restore_rule_property = dlm.CfnLifecyclePolicy.FastRestoreRuleProperty(\n        availability_zones=["availabilityZones"],\n        count=123,\n        interval=123,\n        interval_unit="intervalUnit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['availability_zones', 'count', 'interval', 'interval_unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.FastRestoreRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.ParametersProperty
class CfnLifecyclePolicy_ParametersPropertyDef(BaseStruct):
    exclude_boot_volume: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='*[Snapshot policies that target instances only]* Indicates whether to exclude the root volume from multi-volume snapshot sets. The default is ``false`` . If you specify ``true`` , then the root volumes attached to targeted instances will be excluded from the multi-volume snapshot sets created by the policy.\n')
    exclude_data_volume_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='``CfnLifecyclePolicy.ParametersProperty.ExcludeDataVolumeTags``.\n')
    no_reboot: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='*[AMI policies only]* Indicates whether targeted instances are rebooted when the lifecycle policy runs. ``true`` indicates that targeted instances are not rebooted when the policy runs. ``false`` indicates that target instances are rebooted when the policy runs. The default is ``true`` (instances are not rebooted).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-parameters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    parameters_property = dlm.CfnLifecyclePolicy.ParametersProperty(\n        exclude_boot_volume=False,\n        exclude_data_volume_tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        no_reboot=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['exclude_boot_volume', 'exclude_data_volume_tags', 'no_reboot']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.ParametersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.PolicyDetailsProperty
class CfnLifecyclePolicy_PolicyDetailsPropertyDef(BaseStruct):
    actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='*[Event-based policies only]* The actions to be performed when the event-based policy is activated. You can specify only one action per policy.\n')
    event_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_EventSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='*[Event-based policies only]* The event that activates the event-based policy.\n')
    parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="*[Snapshot and AMI policies only]* A set of optional parameters for snapshot and AMI lifecycle policies. .. epigraph:: If you are modifying a policy that was created or previously modified using the Amazon Data Lifecycle Manager console, then you must include this parameter and specify either the default values or the new values that you require. You can't omit this parameter or set its values to null.\n")
    policy_type: typing.Optional[str] = pydantic.Field(None, description='*[All policy types]* The valid target resource types and actions a policy can manage. Specify ``EBS_SNAPSHOT_MANAGEMENT`` to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify ``IMAGE_MANAGEMENT`` to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify ``EVENT_BASED_POLICY`` to create an event-based policy that performs specific actions when a defined event occurs in your AWS account . The default is ``EBS_SNAPSHOT_MANAGEMENT`` .\n')
    resource_locations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='*[Snapshot and AMI policies only]* The location of the resources to backup. If the source resources are located in an AWS Region , specify ``CLOUD`` . If the source resources are located on an Outpost in your account, specify ``OUTPOST`` . If you specify ``OUTPOST`` , Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.\n')
    resource_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='*[Snapshot policies only]* The target resource type for snapshot and AMI lifecycle policies. Use ``VOLUME`` to create snapshots of individual volumes or use ``INSTANCE`` to create multi-volume snapshots from the volumes for an instance.\n')
    schedules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_SchedulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='*[Snapshot and AMI policies only]* The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedules—one mandatory schedule and up to three optional schedules.\n')
    target_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='*[Snapshot and AMI policies only]* The single tag that identifies targeted resources for this policy.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-policydetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    policy_details_property = dlm.CfnLifecyclePolicy.PolicyDetailsProperty(\n        actions=[dlm.CfnLifecyclePolicy.ActionProperty(\n            cross_region_copy=[dlm.CfnLifecyclePolicy.CrossRegionCopyActionProperty(\n                encryption_configuration=dlm.CfnLifecyclePolicy.EncryptionConfigurationProperty(\n                    encrypted=False,\n\n                    # the properties below are optional\n                    cmk_arn="cmkArn"\n                ),\n                target="target",\n\n                # the properties below are optional\n                retain_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty(\n                    interval=123,\n                    interval_unit="intervalUnit"\n                )\n            )],\n            name="name"\n        )],\n        event_source=dlm.CfnLifecyclePolicy.EventSourceProperty(\n            type="type",\n\n            # the properties below are optional\n            parameters=dlm.CfnLifecyclePolicy.EventParametersProperty(\n                event_type="eventType",\n                snapshot_owner=["snapshotOwner"],\n\n                # the properties below are optional\n                description_regex="descriptionRegex"\n            )\n        ),\n        parameters=dlm.CfnLifecyclePolicy.ParametersProperty(\n            exclude_boot_volume=False,\n            exclude_data_volume_tags=[CfnTag(\n                key="key",\n                value="value"\n            )],\n            no_reboot=False\n        ),\n        policy_type="policyType",\n        resource_locations=["resourceLocations"],\n        resource_types=["resourceTypes"],\n        schedules=[dlm.CfnLifecyclePolicy.ScheduleProperty(\n            archive_rule=dlm.CfnLifecyclePolicy.ArchiveRuleProperty(\n                retain_rule=dlm.CfnLifecyclePolicy.ArchiveRetainRuleProperty(\n                    retention_archive_tier=dlm.CfnLifecyclePolicy.RetentionArchiveTierProperty(\n                        count=123,\n                        interval=123,\n                        interval_unit="intervalUnit"\n                    )\n                )\n            ),\n            copy_tags=False,\n            create_rule=dlm.CfnLifecyclePolicy.CreateRuleProperty(\n                cron_expression="cronExpression",\n                interval=123,\n                interval_unit="intervalUnit",\n                location="location",\n                times=["times"]\n            ),\n            cross_region_copy_rules=[dlm.CfnLifecyclePolicy.CrossRegionCopyRuleProperty(\n                encrypted=False,\n\n                # the properties below are optional\n                cmk_arn="cmkArn",\n                copy_tags=False,\n                deprecate_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyDeprecateRuleProperty(\n                    interval=123,\n                    interval_unit="intervalUnit"\n                ),\n                retain_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty(\n                    interval=123,\n                    interval_unit="intervalUnit"\n                ),\n                target="target",\n                target_region="targetRegion"\n            )],\n            deprecate_rule=dlm.CfnLifecyclePolicy.DeprecateRuleProperty(\n                count=123,\n                interval=123,\n                interval_unit="intervalUnit"\n            ),\n            fast_restore_rule=dlm.CfnLifecyclePolicy.FastRestoreRuleProperty(\n                availability_zones=["availabilityZones"],\n                count=123,\n                interval=123,\n                interval_unit="intervalUnit"\n            ),\n            name="name",\n            retain_rule=dlm.CfnLifecyclePolicy.RetainRuleProperty(\n                count=123,\n                interval=123,\n                interval_unit="intervalUnit"\n            ),\n            share_rules=[dlm.CfnLifecyclePolicy.ShareRuleProperty(\n                target_accounts=["targetAccounts"],\n                unshare_interval=123,\n                unshare_interval_unit="unshareIntervalUnit"\n            )],\n            tags_to_add=[CfnTag(\n                key="key",\n                value="value"\n            )],\n            variable_tags=[CfnTag(\n                key="key",\n                value="value"\n            )]\n        )],\n        target_tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'event_source', 'parameters', 'policy_type', 'resource_locations', 'resource_types', 'schedules', 'target_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.PolicyDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.RetainRuleProperty
class CfnLifecyclePolicy_RetainRulePropertyDef(BaseStruct):
    count: typing.Union[int, float, None] = pydantic.Field(None, description='The number of snapshots to retain for each volume, up to a maximum of 1000. For example if you want to retain a maximum of three snapshots, specify ``3`` . When the fourth snapshot is created, the oldest retained snapshot is deleted, or it is moved to the archive tier if you have specified an ``ArchiveRule`` .\n')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.\n')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='The unit of time for time-based retention. For example, to retain snapshots for 3 months, specify ``Interval=3`` and ``IntervalUnit=MONTHS`` . Once the snapshot has been retained for 3 months, it is deleted, or it is moved to the archive tier if you have specified an ``ArchiveRule`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-retainrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    retain_rule_property = dlm.CfnLifecyclePolicy.RetainRuleProperty(\n        count=123,\n        interval=123,\n        interval_unit="intervalUnit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['count', 'interval', 'interval_unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.RetainRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.RetentionArchiveTierProperty
class CfnLifecyclePolicy_RetentionArchiveTierPropertyDef(BaseStruct):
    count: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnLifecyclePolicy.RetentionArchiveTierProperty.Count``.')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnLifecyclePolicy.RetentionArchiveTierProperty.Interval``.\n')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='``CfnLifecyclePolicy.RetentionArchiveTierProperty.IntervalUnit``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-retentionarchivetier.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    retention_archive_tier_property = dlm.CfnLifecyclePolicy.RetentionArchiveTierProperty(\n        count=123,\n        interval=123,\n        interval_unit="intervalUnit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['count', 'interval', 'interval_unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.RetentionArchiveTierProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.ScheduleProperty
class CfnLifecyclePolicy_SchedulePropertyDef(BaseStruct):
    archive_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ArchiveRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnLifecyclePolicy.ScheduleProperty.ArchiveRule``.\n')
    copy_tags: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.\n')
    create_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CreateRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The creation rule.\n')
    cross_region_copy_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Specifies a rule for copying snapshots or AMIs across regions. .. epigraph:: You can't specify cross-Region copy rules for policies that create snapshots on an Outpost. If the policy creates snapshots in a Region, then snapshots can be copied to up to three Regions or Outposts.\n")
    deprecate_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_DeprecateRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnLifecyclePolicy.ScheduleProperty.DeprecateRule``.\n')
    fast_restore_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_FastRestoreRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='*[Snapshot policies only]* The rule for enabling fast snapshot restore.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the schedule.\n')
    retain_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_RetainRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The retention rule for snapshots or AMIs created by the policy.\n')
    share_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ShareRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='*[Snapshot policies only]* The rule for sharing snapshots with other AWS accounts .\n')
    tags_to_add: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The tags to apply to policy-created resources. These user-defined tags are in addition to the AWS -added lifecycle tags.\n')
    variable_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='*[AMI policies and snapshot policies that target instances only]* A collection of key/value pairs with values determined dynamically when the policy is executed. Keys may be any valid Amazon EC2 tag key. Values must be in one of the two following formats: ``$(instance-id)`` or ``$(timestamp)`` . Variable tags are only valid for EBS Snapshot Management – Instance policies.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-schedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    schedule_property = dlm.CfnLifecyclePolicy.ScheduleProperty(\n        archive_rule=dlm.CfnLifecyclePolicy.ArchiveRuleProperty(\n            retain_rule=dlm.CfnLifecyclePolicy.ArchiveRetainRuleProperty(\n                retention_archive_tier=dlm.CfnLifecyclePolicy.RetentionArchiveTierProperty(\n                    count=123,\n                    interval=123,\n                    interval_unit="intervalUnit"\n                )\n            )\n        ),\n        copy_tags=False,\n        create_rule=dlm.CfnLifecyclePolicy.CreateRuleProperty(\n            cron_expression="cronExpression",\n            interval=123,\n            interval_unit="intervalUnit",\n            location="location",\n            times=["times"]\n        ),\n        cross_region_copy_rules=[dlm.CfnLifecyclePolicy.CrossRegionCopyRuleProperty(\n            encrypted=False,\n\n            # the properties below are optional\n            cmk_arn="cmkArn",\n            copy_tags=False,\n            deprecate_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyDeprecateRuleProperty(\n                interval=123,\n                interval_unit="intervalUnit"\n            ),\n            retain_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty(\n                interval=123,\n                interval_unit="intervalUnit"\n            ),\n            target="target",\n            target_region="targetRegion"\n        )],\n        deprecate_rule=dlm.CfnLifecyclePolicy.DeprecateRuleProperty(\n            count=123,\n            interval=123,\n            interval_unit="intervalUnit"\n        ),\n        fast_restore_rule=dlm.CfnLifecyclePolicy.FastRestoreRuleProperty(\n            availability_zones=["availabilityZones"],\n            count=123,\n            interval=123,\n            interval_unit="intervalUnit"\n        ),\n        name="name",\n        retain_rule=dlm.CfnLifecyclePolicy.RetainRuleProperty(\n            count=123,\n            interval=123,\n            interval_unit="intervalUnit"\n        ),\n        share_rules=[dlm.CfnLifecyclePolicy.ShareRuleProperty(\n            target_accounts=["targetAccounts"],\n            unshare_interval=123,\n            unshare_interval_unit="unshareIntervalUnit"\n        )],\n        tags_to_add=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        variable_tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['archive_rule', 'copy_tags', 'create_rule', 'cross_region_copy_rules', 'deprecate_rule', 'fast_restore_rule', 'name', 'retain_rule', 'share_rules', 'tags_to_add', 'variable_tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.ScheduleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy.ShareRuleProperty
class CfnLifecyclePolicy_ShareRulePropertyDef(BaseStruct):
    target_accounts: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The IDs of the AWS accounts with which to share the snapshots.\n')
    unshare_interval: typing.Union[int, float, None] = pydantic.Field(None, description='The period after which snapshots that are shared with other AWS accounts are automatically unshared.\n')
    unshare_interval_unit: typing.Optional[str] = pydantic.Field(None, description='The unit of time for the automatic unsharing interval.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dlm-lifecyclepolicy-sharerule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    share_rule_property = dlm.CfnLifecyclePolicy.ShareRuleProperty(\n        target_accounts=["targetAccounts"],\n        unshare_interval=123,\n        unshare_interval_unit="unshareIntervalUnit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_accounts', 'unshare_interval', 'unshare_interval_unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy.ShareRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicy
class CfnLifecyclePolicyDef(BaseCfnResource):
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.\n')
    execution_role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.\n')
    policy_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_PolicyDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration details of the lifecycle policy.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The activation state of the lifecycle policy.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to apply to the lifecycle policy during creation.')
    _init_params: typing.ClassVar[list[str]] = ['description', 'execution_role_arn', 'policy_details', 'state', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ActionProperty', 'ArchiveRetainRuleProperty', 'ArchiveRuleProperty', 'CreateRuleProperty', 'CrossRegionCopyActionProperty', 'CrossRegionCopyDeprecateRuleProperty', 'CrossRegionCopyRetainRuleProperty', 'CrossRegionCopyRuleProperty', 'DeprecateRuleProperty', 'EncryptionConfigurationProperty', 'EventParametersProperty', 'EventSourceProperty', 'FastRestoreRuleProperty', 'ParametersProperty', 'PolicyDetailsProperty', 'RetainRuleProperty', 'RetentionArchiveTierProperty', 'ScheduleProperty', 'ShareRuleProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnLifecyclePolicyDefConfig] = pydantic.Field(None)


class CfnLifecyclePolicyDefConfig(pydantic.BaseModel):
    ActionProperty: typing.Optional[list[CfnLifecyclePolicyDefActionpropertyParams]] = pydantic.Field(None, description='')
    ArchiveRetainRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefArchiveretainrulepropertyParams]] = pydantic.Field(None, description='')
    ArchiveRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefArchiverulepropertyParams]] = pydantic.Field(None, description='')
    CreateRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefCreaterulepropertyParams]] = pydantic.Field(None, description='')
    CrossRegionCopyActionProperty: typing.Optional[list[CfnLifecyclePolicyDefCrossregioncopyactionpropertyParams]] = pydantic.Field(None, description='')
    CrossRegionCopyDeprecateRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefCrossregioncopydeprecaterulepropertyParams]] = pydantic.Field(None, description='')
    CrossRegionCopyRetainRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefCrossregioncopyretainrulepropertyParams]] = pydantic.Field(None, description='')
    CrossRegionCopyRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefCrossregioncopyrulepropertyParams]] = pydantic.Field(None, description='')
    DeprecateRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefDeprecaterulepropertyParams]] = pydantic.Field(None, description='')
    EncryptionConfigurationProperty: typing.Optional[list[CfnLifecyclePolicyDefEncryptionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    EventParametersProperty: typing.Optional[list[CfnLifecyclePolicyDefEventparameterspropertyParams]] = pydantic.Field(None, description='')
    EventSourceProperty: typing.Optional[list[CfnLifecyclePolicyDefEventsourcepropertyParams]] = pydantic.Field(None, description='')
    FastRestoreRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefFastrestorerulepropertyParams]] = pydantic.Field(None, description='')
    ParametersProperty: typing.Optional[list[CfnLifecyclePolicyDefParameterspropertyParams]] = pydantic.Field(None, description='')
    PolicyDetailsProperty: typing.Optional[list[CfnLifecyclePolicyDefPolicydetailspropertyParams]] = pydantic.Field(None, description='')
    RetainRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefRetainrulepropertyParams]] = pydantic.Field(None, description='')
    RetentionArchiveTierProperty: typing.Optional[list[CfnLifecyclePolicyDefRetentionarchivetierpropertyParams]] = pydantic.Field(None, description='')
    ScheduleProperty: typing.Optional[list[CfnLifecyclePolicyDefSchedulepropertyParams]] = pydantic.Field(None, description='')
    ShareRuleProperty: typing.Optional[list[CfnLifecyclePolicyDefSharerulepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnLifecyclePolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnLifecyclePolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnLifecyclePolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnLifecyclePolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnLifecyclePolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnLifecyclePolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnLifecyclePolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnLifecyclePolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnLifecyclePolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnLifecyclePolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnLifecyclePolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnLifecyclePolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnLifecyclePolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnLifecyclePolicyDefActionpropertyParams(pydantic.BaseModel):
    cross_region_copy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyActionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    ...

class CfnLifecyclePolicyDefArchiveretainrulepropertyParams(pydantic.BaseModel):
    retention_archive_tier: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_RetentionArchiveTierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnLifecyclePolicyDefArchiverulepropertyParams(pydantic.BaseModel):
    retain_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ArchiveRetainRulePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnLifecyclePolicyDefCreaterulepropertyParams(pydantic.BaseModel):
    cron_expression: typing.Optional[str] = pydantic.Field(None, description='')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='')
    location: typing.Optional[str] = pydantic.Field(None, description='')
    times: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefCrossregioncopyactionpropertyParams(pydantic.BaseModel):
    encryption_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_EncryptionConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    target: str = pydantic.Field(..., description='')
    retain_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyRetainRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefCrossregioncopydeprecaterulepropertyParams(pydantic.BaseModel):
    interval: typing.Union[int, float] = pydantic.Field(..., description='')
    interval_unit: str = pydantic.Field(..., description='')
    ...

class CfnLifecyclePolicyDefCrossregioncopyretainrulepropertyParams(pydantic.BaseModel):
    interval: typing.Union[int, float] = pydantic.Field(..., description='')
    interval_unit: str = pydantic.Field(..., description='')
    ...

class CfnLifecyclePolicyDefCrossregioncopyrulepropertyParams(pydantic.BaseModel):
    encrypted: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    cmk_arn: typing.Optional[str] = pydantic.Field(None, description='')
    copy_tags: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    deprecate_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyDeprecateRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    retain_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyRetainRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    target: typing.Optional[str] = pydantic.Field(None, description='')
    target_region: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefDeprecaterulepropertyParams(pydantic.BaseModel):
    count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefEncryptionconfigurationpropertyParams(pydantic.BaseModel):
    encrypted: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    cmk_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefEventparameterspropertyParams(pydantic.BaseModel):
    event_type: str = pydantic.Field(..., description='')
    snapshot_owner: typing.Sequence[str] = pydantic.Field(..., description='')
    description_regex: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefEventsourcepropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_EventParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefFastrestorerulepropertyParams(pydantic.BaseModel):
    availability_zones: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefParameterspropertyParams(pydantic.BaseModel):
    exclude_boot_volume: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    exclude_data_volume_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    no_reboot: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefPolicydetailspropertyParams(pydantic.BaseModel):
    actions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    event_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_EventSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ParametersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    policy_type: typing.Optional[str] = pydantic.Field(None, description='')
    resource_locations: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    resource_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    schedules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_SchedulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    target_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefRetainrulepropertyParams(pydantic.BaseModel):
    count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefRetentionarchivetierpropertyParams(pydantic.BaseModel):
    count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval: typing.Union[int, float, None] = pydantic.Field(None, description='')
    interval_unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefSchedulepropertyParams(pydantic.BaseModel):
    archive_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ArchiveRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    copy_tags: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    create_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CreateRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cross_region_copy_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_CrossRegionCopyRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    deprecate_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_DeprecateRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    fast_restore_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_FastRestoreRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    retain_rule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_RetainRulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    share_rules: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_ShareRulePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    tags_to_add: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    variable_tags: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.CfnTagDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefSharerulepropertyParams(pydantic.BaseModel):
    target_accounts: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    unshare_interval: typing.Union[int, float, None] = pydantic.Field(None, description='')
    unshare_interval_unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLifecyclePolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLifecyclePolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLifecyclePolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLifecyclePolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLifecyclePolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLifecyclePolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLifecyclePolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLifecyclePolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLifecyclePolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLifecyclePolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLifecyclePolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnLifecyclePolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLifecyclePolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLifecyclePolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_dlm.CfnLifecyclePolicyProps
class CfnLifecyclePolicyPropsDef(BaseCfnProperty):
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.\n')
    execution_role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.\n')
    policy_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_dlm.CfnLifecyclePolicy_PolicyDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration details of the lifecycle policy.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='The activation state of the lifecycle policy.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to apply to the lifecycle policy during creation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dlm-lifecyclepolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_dlm as dlm\n\n    cfn_lifecycle_policy_props = dlm.CfnLifecyclePolicyProps(\n        description="description",\n        execution_role_arn="executionRoleArn",\n        policy_details=dlm.CfnLifecyclePolicy.PolicyDetailsProperty(\n            actions=[dlm.CfnLifecyclePolicy.ActionProperty(\n                cross_region_copy=[dlm.CfnLifecyclePolicy.CrossRegionCopyActionProperty(\n                    encryption_configuration=dlm.CfnLifecyclePolicy.EncryptionConfigurationProperty(\n                        encrypted=False,\n\n                        # the properties below are optional\n                        cmk_arn="cmkArn"\n                    ),\n                    target="target",\n\n                    # the properties below are optional\n                    retain_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty(\n                        interval=123,\n                        interval_unit="intervalUnit"\n                    )\n                )],\n                name="name"\n            )],\n            event_source=dlm.CfnLifecyclePolicy.EventSourceProperty(\n                type="type",\n\n                # the properties below are optional\n                parameters=dlm.CfnLifecyclePolicy.EventParametersProperty(\n                    event_type="eventType",\n                    snapshot_owner=["snapshotOwner"],\n\n                    # the properties below are optional\n                    description_regex="descriptionRegex"\n                )\n            ),\n            parameters=dlm.CfnLifecyclePolicy.ParametersProperty(\n                exclude_boot_volume=False,\n                exclude_data_volume_tags=[CfnTag(\n                    key="key",\n                    value="value"\n                )],\n                no_reboot=False\n            ),\n            policy_type="policyType",\n            resource_locations=["resourceLocations"],\n            resource_types=["resourceTypes"],\n            schedules=[dlm.CfnLifecyclePolicy.ScheduleProperty(\n                archive_rule=dlm.CfnLifecyclePolicy.ArchiveRuleProperty(\n                    retain_rule=dlm.CfnLifecyclePolicy.ArchiveRetainRuleProperty(\n                        retention_archive_tier=dlm.CfnLifecyclePolicy.RetentionArchiveTierProperty(\n                            count=123,\n                            interval=123,\n                            interval_unit="intervalUnit"\n                        )\n                    )\n                ),\n                copy_tags=False,\n                create_rule=dlm.CfnLifecyclePolicy.CreateRuleProperty(\n                    cron_expression="cronExpression",\n                    interval=123,\n                    interval_unit="intervalUnit",\n                    location="location",\n                    times=["times"]\n                ),\n                cross_region_copy_rules=[dlm.CfnLifecyclePolicy.CrossRegionCopyRuleProperty(\n                    encrypted=False,\n\n                    # the properties below are optional\n                    cmk_arn="cmkArn",\n                    copy_tags=False,\n                    deprecate_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyDeprecateRuleProperty(\n                        interval=123,\n                        interval_unit="intervalUnit"\n                    ),\n                    retain_rule=dlm.CfnLifecyclePolicy.CrossRegionCopyRetainRuleProperty(\n                        interval=123,\n                        interval_unit="intervalUnit"\n                    ),\n                    target="target",\n                    target_region="targetRegion"\n                )],\n                deprecate_rule=dlm.CfnLifecyclePolicy.DeprecateRuleProperty(\n                    count=123,\n                    interval=123,\n                    interval_unit="intervalUnit"\n                ),\n                fast_restore_rule=dlm.CfnLifecyclePolicy.FastRestoreRuleProperty(\n                    availability_zones=["availabilityZones"],\n                    count=123,\n                    interval=123,\n                    interval_unit="intervalUnit"\n                ),\n                name="name",\n                retain_rule=dlm.CfnLifecyclePolicy.RetainRuleProperty(\n                    count=123,\n                    interval=123,\n                    interval_unit="intervalUnit"\n                ),\n                share_rules=[dlm.CfnLifecyclePolicy.ShareRuleProperty(\n                    target_accounts=["targetAccounts"],\n                    unshare_interval=123,\n                    unshare_interval_unit="unshareIntervalUnit"\n                )],\n                tags_to_add=[CfnTag(\n                    key="key",\n                    value="value"\n                )],\n                variable_tags=[CfnTag(\n                    key="key",\n                    value="value"\n                )]\n            )],\n            target_tags=[CfnTag(\n                key="key",\n                value="value"\n            )]\n        ),\n        state="state",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['description', 'execution_role_arn', 'policy_details', 'state', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_dlm.CfnLifecyclePolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnLifecyclePolicy_ActionProperty: typing.Optional[dict[str, CfnLifecyclePolicy_ActionPropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_ArchiveRetainRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_ArchiveRetainRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_ArchiveRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_ArchiveRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_CreateRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_CreateRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_CrossRegionCopyActionProperty: typing.Optional[dict[str, CfnLifecyclePolicy_CrossRegionCopyActionPropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_CrossRegionCopyDeprecateRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_CrossRegionCopyDeprecateRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_CrossRegionCopyRetainRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_CrossRegionCopyRetainRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_CrossRegionCopyRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_CrossRegionCopyRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_DeprecateRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_DeprecateRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_EncryptionConfigurationProperty: typing.Optional[dict[str, CfnLifecyclePolicy_EncryptionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_EventParametersProperty: typing.Optional[dict[str, CfnLifecyclePolicy_EventParametersPropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_EventSourceProperty: typing.Optional[dict[str, CfnLifecyclePolicy_EventSourcePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_FastRestoreRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_FastRestoreRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_ParametersProperty: typing.Optional[dict[str, CfnLifecyclePolicy_ParametersPropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_PolicyDetailsProperty: typing.Optional[dict[str, CfnLifecyclePolicy_PolicyDetailsPropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_RetainRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_RetainRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_RetentionArchiveTierProperty: typing.Optional[dict[str, CfnLifecyclePolicy_RetentionArchiveTierPropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_ScheduleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_SchedulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy_ShareRuleProperty: typing.Optional[dict[str, CfnLifecyclePolicy_ShareRulePropertyDef]] = pydantic.Field(None)
    CfnLifecyclePolicy: typing.Optional[dict[str, CfnLifecyclePolicyDef]] = pydantic.Field(None)
    CfnLifecyclePolicyProps: typing.Optional[dict[str, CfnLifecyclePolicyPropsDef]] = pydantic.Field(None)
    ...
