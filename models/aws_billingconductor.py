from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_billingconductor.CfnBillingGroup.AccountGroupingProperty
class CfnBillingGroup_AccountGroupingPropertyDef(BaseStruct):
    linked_account_ids: typing.Sequence[str] = pydantic.Field(..., description='The account IDs that make up the billing group. Account IDs must be a part of the consolidated billing family, and not associated with another billing group.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-billingconductor-billinggroup-accountgrouping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    account_grouping_property = billingconductor.CfnBillingGroup.AccountGroupingProperty(\n        linked_account_ids=["linkedAccountIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['linked_account_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnBillingGroup.AccountGroupingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnBillingGroup.ComputationPreferenceProperty
class CfnBillingGroup_ComputationPreferencePropertyDef(BaseStruct):
    pricing_plan_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the pricing plan used to compute the AWS charges for a billing group.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-billingconductor-billinggroup-computationpreference.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    computation_preference_property = billingconductor.CfnBillingGroup.ComputationPreferenceProperty(\n        pricing_plan_arn="pricingPlanArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['pricing_plan_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnBillingGroup.ComputationPreferenceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnCustomLineItem.BillingPeriodRangeProperty
class CfnCustomLineItem_BillingPeriodRangePropertyDef(BaseStruct):
    exclusive_end_billing_period: typing.Optional[str] = pydantic.Field(None, description='The exclusive end billing period that defines a billing period range where a custom line is applied.\n')
    inclusive_start_billing_period: typing.Optional[str] = pydantic.Field(None, description='The inclusive start billing period that defines a billing period range where a custom line is applied.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-billingconductor-customlineitem-billingperiodrange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    billing_period_range_property = billingconductor.CfnCustomLineItem.BillingPeriodRangeProperty(\n        exclusive_end_billing_period="exclusiveEndBillingPeriod",\n        inclusive_start_billing_period="inclusiveStartBillingPeriod"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['exclusive_end_billing_period', 'inclusive_start_billing_period']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnCustomLineItem.BillingPeriodRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnCustomLineItem.CustomLineItemChargeDetailsProperty
class CfnCustomLineItem_CustomLineItemChargeDetailsPropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='The type of the custom line item that indicates whether the charge is a fee or credit.\n')
    flat: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnCustomLineItem_CustomLineItemFlatChargeDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A ``CustomLineItemFlatChargeDetails`` that describes the charge details of a flat custom line item.\n')
    percentage: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnCustomLineItem_CustomLineItemPercentageChargeDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A ``CustomLineItemPercentageChargeDetails`` that describes the charge details of a percentage custom line item.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-billingconductor-customlineitem-customlineitemchargedetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    custom_line_item_charge_details_property = billingconductor.CfnCustomLineItem.CustomLineItemChargeDetailsProperty(\n        type="type",\n\n        # the properties below are optional\n        flat=billingconductor.CfnCustomLineItem.CustomLineItemFlatChargeDetailsProperty(\n            charge_value=123\n        ),\n        percentage=billingconductor.CfnCustomLineItem.CustomLineItemPercentageChargeDetailsProperty(\n            percentage_value=123,\n\n            # the properties below are optional\n            child_associated_resources=["childAssociatedResources"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'flat', 'percentage']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnCustomLineItem.CustomLineItemChargeDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnCustomLineItem.CustomLineItemFlatChargeDetailsProperty
class CfnCustomLineItem_CustomLineItemFlatChargeDetailsPropertyDef(BaseStruct):
    charge_value: typing.Union[int, float] = pydantic.Field(..., description="The custom line item's fixed charge value in USD.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-billingconductor-customlineitem-customlineitemflatchargedetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    custom_line_item_flat_charge_details_property = billingconductor.CfnCustomLineItem.CustomLineItemFlatChargeDetailsProperty(\n        charge_value=123\n    )\n")
    _init_params: typing.ClassVar[list[str]] = ['charge_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnCustomLineItem.CustomLineItemFlatChargeDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnCustomLineItem.CustomLineItemPercentageChargeDetailsProperty
class CfnCustomLineItem_CustomLineItemPercentageChargeDetailsPropertyDef(BaseStruct):
    percentage_value: typing.Union[int, float] = pydantic.Field(..., description="The custom line item's percentage value. This will be multiplied against the combined value of its associated resources to determine its charge value.\n")
    child_associated_resources: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of resource ARNs to associate to the percentage custom line item.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-billingconductor-customlineitem-customlineitempercentagechargedetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    custom_line_item_percentage_charge_details_property = billingconductor.CfnCustomLineItem.CustomLineItemPercentageChargeDetailsProperty(\n        percentage_value=123,\n\n        # the properties below are optional\n        child_associated_resources=["childAssociatedResources"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['percentage_value', 'child_associated_resources']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnCustomLineItem.CustomLineItemPercentageChargeDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnPricingRule.FreeTierProperty
class CfnPricingRule_FreeTierPropertyDef(BaseStruct):
    activated: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='Activate or deactivate AWS Free Tier.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-billingconductor-pricingrule-freetier.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    free_tier_property = billingconductor.CfnPricingRule.FreeTierProperty(\n        activated=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['activated']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnPricingRule.FreeTierProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnPricingRule.TieringProperty
class CfnPricingRule_TieringPropertyDef(BaseStruct):
    free_tier: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnPricingRule_FreeTierPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnPricingRule.TieringProperty.FreeTier``.')
    _init_params: typing.ClassVar[list[str]] = ['free_tier']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnPricingRule.TieringProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnBillingGroup
class CfnBillingGroupDef(BaseCfnResource):
    account_grouping: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnBillingGroup_AccountGroupingPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The set of accounts that will be under the billing group. The set of accounts resemble the linked accounts in a consolidated family.\n')
    computation_preference: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnBillingGroup_ComputationPreferencePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The preferences and settings that will be used to compute the AWS charges for a billing group.\n')
    name: str = pydantic.Field(..., description="The billing group's name.\n")
    primary_account_id: str = pydantic.Field(..., description='The account ID that serves as the main account in a billing group.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the billing group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='``AWS::BillingConductor::BillingGroup.Tags``.')
    _init_params: typing.ClassVar[list[str]] = ['account_grouping', 'computation_preference', 'name', 'primary_account_id', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AccountGroupingProperty', 'ComputationPreferenceProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnBillingGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnBillingGroupDefConfig] = pydantic.Field(None)


class CfnBillingGroupDefConfig(pydantic.BaseModel):
    AccountGroupingProperty: typing.Optional[list[CfnBillingGroupDefAccountgroupingpropertyParams]] = pydantic.Field(None, description='')
    ComputationPreferenceProperty: typing.Optional[list[CfnBillingGroupDefComputationpreferencepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnBillingGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnBillingGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnBillingGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnBillingGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnBillingGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnBillingGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnBillingGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnBillingGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnBillingGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnBillingGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnBillingGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnBillingGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnBillingGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnBillingGroupDefAccountgroupingpropertyParams(pydantic.BaseModel):
    linked_account_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnBillingGroupDefComputationpreferencepropertyParams(pydantic.BaseModel):
    pricing_plan_arn: str = pydantic.Field(..., description='')
    ...

class CfnBillingGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnBillingGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBillingGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnBillingGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBillingGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnBillingGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnBillingGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnBillingGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnBillingGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnBillingGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnBillingGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnBillingGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnBillingGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnBillingGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_billingconductor.CfnCustomLineItem
class CfnCustomLineItemDef(BaseCfnResource):
    billing_group_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) that references the billing group where the custom line item applies to.\n')
    name: str = pydantic.Field(..., description="The custom line item's name.\n")
    billing_period_range: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnCustomLineItem_BillingPeriodRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time range for which the custom line item is effective.\n')
    custom_line_item_charge_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnCustomLineItem_CustomLineItemChargeDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The charge details of a custom line item. It should contain only one of ``Flat`` or ``Percentage`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description="The custom line item's description. This is shown on the Bills page in association with the charge value.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A map that contains tag keys and tag values that are attached to a custom line item.')
    _init_params: typing.ClassVar[list[str]] = ['billing_group_arn', 'name', 'billing_period_range', 'custom_line_item_charge_details', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['BillingPeriodRangeProperty', 'CustomLineItemChargeDetailsProperty', 'CustomLineItemFlatChargeDetailsProperty', 'CustomLineItemPercentageChargeDetailsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnCustomLineItem'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnCustomLineItemDefConfig] = pydantic.Field(None)


class CfnCustomLineItemDefConfig(pydantic.BaseModel):
    BillingPeriodRangeProperty: typing.Optional[list[CfnCustomLineItemDefBillingperiodrangepropertyParams]] = pydantic.Field(None, description='')
    CustomLineItemChargeDetailsProperty: typing.Optional[list[CfnCustomLineItemDefCustomlineitemchargedetailspropertyParams]] = pydantic.Field(None, description='')
    CustomLineItemFlatChargeDetailsProperty: typing.Optional[list[CfnCustomLineItemDefCustomlineitemflatchargedetailspropertyParams]] = pydantic.Field(None, description='')
    CustomLineItemPercentageChargeDetailsProperty: typing.Optional[list[CfnCustomLineItemDefCustomlineitempercentagechargedetailspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnCustomLineItemDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnCustomLineItemDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnCustomLineItemDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnCustomLineItemDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnCustomLineItemDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnCustomLineItemDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnCustomLineItemDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnCustomLineItemDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnCustomLineItemDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnCustomLineItemDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnCustomLineItemDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnCustomLineItemDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnCustomLineItemDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnCustomLineItemDefBillingperiodrangepropertyParams(pydantic.BaseModel):
    exclusive_end_billing_period: typing.Optional[str] = pydantic.Field(None, description='')
    inclusive_start_billing_period: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCustomLineItemDefCustomlineitemchargedetailspropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    flat: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnCustomLineItem_CustomLineItemFlatChargeDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    percentage: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnCustomLineItem_CustomLineItemPercentageChargeDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCustomLineItemDefCustomlineitemflatchargedetailspropertyParams(pydantic.BaseModel):
    charge_value: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnCustomLineItemDefCustomlineitempercentagechargedetailspropertyParams(pydantic.BaseModel):
    percentage_value: typing.Union[int, float] = pydantic.Field(..., description='')
    child_associated_resources: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnCustomLineItemDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCustomLineItemDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCustomLineItemDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCustomLineItemDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCustomLineItemDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCustomLineItemDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCustomLineItemDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCustomLineItemDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCustomLineItemDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCustomLineItemDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCustomLineItemDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnCustomLineItemDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCustomLineItemDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCustomLineItemDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_billingconductor.CfnPricingPlan
class CfnPricingPlanDef(BaseCfnResource):
    name: str = pydantic.Field(..., description='The name of a pricing plan.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The pricing plan description.\n')
    pricing_rule_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The ``PricingRuleArns`` that are associated with the Pricing Plan.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A map that contains tag keys and tag values that are attached to a pricing plan.')
    _init_params: typing.ClassVar[list[str]] = ['name', 'description', 'pricing_rule_arns', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnPricingPlan'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPricingPlanDefConfig] = pydantic.Field(None)


class CfnPricingPlanDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnPricingPlanDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPricingPlanDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPricingPlanDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPricingPlanDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPricingPlanDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPricingPlanDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPricingPlanDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPricingPlanDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPricingPlanDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPricingPlanDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPricingPlanDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPricingPlanDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPricingPlanDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPricingPlanDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPricingPlanDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPricingPlanDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPricingPlanDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPricingPlanDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPricingPlanDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPricingPlanDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPricingPlanDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPricingPlanDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPricingPlanDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPricingPlanDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnPricingPlanDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPricingPlanDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPricingPlanDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_billingconductor.CfnPricingRule
class CfnPricingRuleDef(BaseCfnResource):
    scope_: models.constructs.ConstructDef = pydantic.Field(..., description='- scope in which this resource is defined.\n')
    name: str = pydantic.Field(..., description='The name of a pricing rule.\n')
    type: str = pydantic.Field(..., description='The type of pricing rule.\n')
    billing_entity: typing.Optional[str] = pydantic.Field(None, description='The seller of services provided by AWS , their affiliates, or third-party providers selling services via AWS Marketplace .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The pricing rule description.\n')
    modifier_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='A percentage modifier applied on the public pricing rates.\n')
    operation: typing.Optional[str] = pydantic.Field(None, description='Operation is the specific AWS action covered by this line item. This describes the specific usage of the line item.\n')
    service: typing.Optional[str] = pydantic.Field(None, description='If the ``Scope`` attribute is ``SERVICE`` , this attribute indicates which service the ``PricingRule`` is applicable for.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A map that contains tag keys and tag values that are attached to a pricing rule.\n')
    tiering: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnPricingRule_TieringPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The set of tiering configurations for the pricing rule.\n')
    usage_type: typing.Optional[str] = pydantic.Field(None, description='Usage Type is the unit that each service uses to measure the usage of a specific type of resource.')
    _init_params: typing.ClassVar[list[str]] = ['scope_', 'name', 'type', 'billing_entity', 'description', 'modifier_percentage', 'operation', 'service', 'tags', 'tiering', 'usage_type']
    _method_names: typing.ClassVar[list[str]] = ['FreeTierProperty', 'TieringProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnPricingRule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPricingRuleDefConfig] = pydantic.Field(None)


class CfnPricingRuleDefConfig(pydantic.BaseModel):
    FreeTierProperty: typing.Optional[list[CfnPricingRuleDefFreetierpropertyParams]] = pydantic.Field(None, description='')
    TieringProperty: typing.Optional[list[CfnPricingRuleDefTieringpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnPricingRuleDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPricingRuleDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPricingRuleDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPricingRuleDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPricingRuleDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPricingRuleDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPricingRuleDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPricingRuleDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPricingRuleDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPricingRuleDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPricingRuleDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPricingRuleDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPricingRuleDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPricingRuleDefFreetierpropertyParams(pydantic.BaseModel):
    activated: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef]] = pydantic.Field(..., description='')
    ...

class CfnPricingRuleDefTieringpropertyParams(pydantic.BaseModel):
    free_tier: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnPricingRule_FreeTierPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPricingRuleDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPricingRuleDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPricingRuleDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPricingRuleDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPricingRuleDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPricingRuleDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPricingRuleDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPricingRuleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPricingRuleDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPricingRuleDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPricingRuleDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnPricingRuleDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPricingRuleDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPricingRuleDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_billingconductor.CfnBillingGroupProps
class CfnBillingGroupPropsDef(BaseCfnProperty):
    account_grouping: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnBillingGroup_AccountGroupingPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The set of accounts that will be under the billing group. The set of accounts resemble the linked accounts in a consolidated family.\n')
    computation_preference: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnBillingGroup_ComputationPreferencePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The preferences and settings that will be used to compute the AWS charges for a billing group.\n')
    name: str = pydantic.Field(..., description="The billing group's name.\n")
    primary_account_id: str = pydantic.Field(..., description='The account ID that serves as the main account in a billing group.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the billing group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='``AWS::BillingConductor::BillingGroup.Tags``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-billinggroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    cfn_billing_group_props = billingconductor.CfnBillingGroupProps(\n        account_grouping=billingconductor.CfnBillingGroup.AccountGroupingProperty(\n            linked_account_ids=["linkedAccountIds"]\n        ),\n        computation_preference=billingconductor.CfnBillingGroup.ComputationPreferenceProperty(\n            pricing_plan_arn="pricingPlanArn"\n        ),\n        name="name",\n        primary_account_id="primaryAccountId",\n\n        # the properties below are optional\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['account_grouping', 'computation_preference', 'name', 'primary_account_id', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnBillingGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnCustomLineItemProps
class CfnCustomLineItemPropsDef(BaseCfnProperty):
    billing_group_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) that references the billing group where the custom line item applies to.\n')
    name: str = pydantic.Field(..., description="The custom line item's name.\n")
    billing_period_range: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnCustomLineItem_BillingPeriodRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time range for which the custom line item is effective.\n')
    custom_line_item_charge_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnCustomLineItem_CustomLineItemChargeDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The charge details of a custom line item. It should contain only one of ``Flat`` or ``Percentage`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description="The custom line item's description. This is shown on the Bills page in association with the charge value.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A map that contains tag keys and tag values that are attached to a custom line item.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-customlineitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    cfn_custom_line_item_props = billingconductor.CfnCustomLineItemProps(\n        billing_group_arn="billingGroupArn",\n        name="name",\n\n        # the properties below are optional\n        billing_period_range=billingconductor.CfnCustomLineItem.BillingPeriodRangeProperty(\n            exclusive_end_billing_period="exclusiveEndBillingPeriod",\n            inclusive_start_billing_period="inclusiveStartBillingPeriod"\n        ),\n        custom_line_item_charge_details=billingconductor.CfnCustomLineItem.CustomLineItemChargeDetailsProperty(\n            type="type",\n\n            # the properties below are optional\n            flat=billingconductor.CfnCustomLineItem.CustomLineItemFlatChargeDetailsProperty(\n                charge_value=123\n            ),\n            percentage=billingconductor.CfnCustomLineItem.CustomLineItemPercentageChargeDetailsProperty(\n                percentage_value=123,\n\n                # the properties below are optional\n                child_associated_resources=["childAssociatedResources"]\n            )\n        ),\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['billing_group_arn', 'name', 'billing_period_range', 'custom_line_item_charge_details', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnCustomLineItemProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnPricingPlanProps
class CfnPricingPlanPropsDef(BaseCfnProperty):
    name: str = pydantic.Field(..., description='The name of a pricing plan.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The pricing plan description.\n')
    pricing_rule_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The ``PricingRuleArns`` that are associated with the Pricing Plan.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A map that contains tag keys and tag values that are attached to a pricing plan.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-pricingplan.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    cfn_pricing_plan_props = billingconductor.CfnPricingPlanProps(\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        pricing_rule_arns=["pricingRuleArns"],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'description', 'pricing_rule_arns', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnPricingPlanProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_billingconductor.CfnPricingRuleProps
class CfnPricingRulePropsDef(BaseCfnProperty):
    name: str = pydantic.Field(..., description='The name of a pricing rule.\n')
    type: str = pydantic.Field(..., description='The type of pricing rule.\n')
    billing_entity: typing.Optional[str] = pydantic.Field(None, description='The seller of services provided by AWS , their affiliates, or third-party providers selling services via AWS Marketplace .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The pricing rule description.\n')
    modifier_percentage: typing.Union[int, float, None] = pydantic.Field(None, description='A percentage modifier applied on the public pricing rates.\n')
    operation: typing.Optional[str] = pydantic.Field(None, description='Operation is the specific AWS action covered by this line item. This describes the specific usage of the line item.\n')
    service: typing.Optional[str] = pydantic.Field(None, description='If the ``Scope`` attribute is ``SERVICE`` , this attribute indicates which service the ``PricingRule`` is applicable for.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A map that contains tag keys and tag values that are attached to a pricing rule.\n')
    tiering: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_billingconductor.CfnPricingRule_TieringPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The set of tiering configurations for the pricing rule.\n')
    usage_type: typing.Optional[str] = pydantic.Field(None, description='Usage Type is the unit that each service uses to measure the usage of a specific type of resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-billingconductor-pricingrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_billingconductor as billingconductor\n\n    cfn_pricing_rule_props = billingconductor.CfnPricingRuleProps(\n        name="name",\n        scope="scope",\n        type="type",\n\n        # the properties below are optional\n        billing_entity="billingEntity",\n        description="description",\n        modifier_percentage=123,\n        operation="operation",\n        service="service",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        tiering=billingconductor.CfnPricingRule.TieringProperty(\n            free_tier=billingconductor.CfnPricingRule.FreeTierProperty(\n                activated=False\n            )\n        ),\n        usage_type="usageType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'type', 'billing_entity', 'description', 'modifier_percentage', 'operation', 'service', 'tags', 'tiering', 'usage_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_billingconductor.CfnPricingRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnBillingGroup_AccountGroupingProperty: typing.Optional[dict[str, CfnBillingGroup_AccountGroupingPropertyDef]] = pydantic.Field(None)
    CfnBillingGroup_ComputationPreferenceProperty: typing.Optional[dict[str, CfnBillingGroup_ComputationPreferencePropertyDef]] = pydantic.Field(None)
    CfnCustomLineItem_BillingPeriodRangeProperty: typing.Optional[dict[str, CfnCustomLineItem_BillingPeriodRangePropertyDef]] = pydantic.Field(None)
    CfnCustomLineItem_CustomLineItemChargeDetailsProperty: typing.Optional[dict[str, CfnCustomLineItem_CustomLineItemChargeDetailsPropertyDef]] = pydantic.Field(None)
    CfnCustomLineItem_CustomLineItemFlatChargeDetailsProperty: typing.Optional[dict[str, CfnCustomLineItem_CustomLineItemFlatChargeDetailsPropertyDef]] = pydantic.Field(None)
    CfnCustomLineItem_CustomLineItemPercentageChargeDetailsProperty: typing.Optional[dict[str, CfnCustomLineItem_CustomLineItemPercentageChargeDetailsPropertyDef]] = pydantic.Field(None)
    CfnPricingRule_FreeTierProperty: typing.Optional[dict[str, CfnPricingRule_FreeTierPropertyDef]] = pydantic.Field(None)
    CfnPricingRule_TieringProperty: typing.Optional[dict[str, CfnPricingRule_TieringPropertyDef]] = pydantic.Field(None)
    CfnBillingGroup: typing.Optional[dict[str, CfnBillingGroupDef]] = pydantic.Field(None)
    CfnCustomLineItem: typing.Optional[dict[str, CfnCustomLineItemDef]] = pydantic.Field(None)
    CfnPricingPlan: typing.Optional[dict[str, CfnPricingPlanDef]] = pydantic.Field(None)
    CfnPricingRule: typing.Optional[dict[str, CfnPricingRuleDef]] = pydantic.Field(None)
    CfnBillingGroupProps: typing.Optional[dict[str, CfnBillingGroupPropsDef]] = pydantic.Field(None)
    CfnCustomLineItemProps: typing.Optional[dict[str, CfnCustomLineItemPropsDef]] = pydantic.Field(None)
    CfnPricingPlanProps: typing.Optional[dict[str, CfnPricingPlanPropsDef]] = pydantic.Field(None)
    CfnPricingRuleProps: typing.Optional[dict[str, CfnPricingRulePropsDef]] = pydantic.Field(None)
    ...
