from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_iotwireless.CfnDeviceProfile.LoRaWANDeviceProfileProperty
class CfnDeviceProfile_LoRaWANDeviceProfilePropertyDef(BaseStruct):
    class_b_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='The ClassBTimeout value.\n')
    class_c_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='The ClassCTimeout value.\n')
    factory_preset_freqs_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[int, float]], None] = pydantic.Field(None, description='The list of values that make up the FactoryPresetFreqs value. Valid range of values include a minimum value of 1000000 and a maximum value of 16700000.\n')
    mac_version: typing.Optional[str] = pydantic.Field(None, description='The MAC version (such as OTAA 1.1 or OTAA 1.0.3) to use with this device profile.\n')
    max_duty_cycle: typing.Union[int, float, None] = pydantic.Field(None, description='The MaxDutyCycle value.\n')
    max_eirp: typing.Union[int, float, None] = pydantic.Field(None, description='The MaxEIRP value.\n')
    ping_slot_dr: typing.Union[int, float, None] = pydantic.Field(None, description='The PingSlotDR value.\n')
    ping_slot_freq: typing.Union[int, float, None] = pydantic.Field(None, description='The PingSlotFreq value.\n')
    ping_slot_period: typing.Union[int, float, None] = pydantic.Field(None, description='The PingSlotPeriod value.\n')
    reg_params_revision: typing.Optional[str] = pydantic.Field(None, description='The version of regional parameters.\n')
    rf_region: typing.Optional[str] = pydantic.Field(None, description='The frequency band (RFRegion) value.\n')
    rx_data_rate2: typing.Union[int, float, None] = pydantic.Field(None, description='The RXDataRate2 value.\n')
    rx_delay1: typing.Union[int, float, None] = pydantic.Field(None, description='The RXDelay1 value.\n')
    rx_dr_offset1: typing.Union[int, float, None] = pydantic.Field(None, description='The RXDROffset1 value.\n')
    rx_freq2: typing.Union[int, float, None] = pydantic.Field(None, description='The RXFreq2 value.\n')
    supports32_bit_f_cnt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='The Supports32BitFCnt value.\n')
    supports_class_b: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='The SupportsClassB value.\n')
    supports_class_c: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='The SupportsClassC value.\n')
    supports_join: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='The SupportsJoin value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-deviceprofile-lorawandeviceprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    lo_ra_wANDevice_profile_property = iotwireless.CfnDeviceProfile.LoRaWANDeviceProfileProperty(\n        class_bTimeout=123,\n        class_cTimeout=123,\n        factory_preset_freqs_list=[123],\n        mac_version="macVersion",\n        max_duty_cycle=123,\n        max_eirp=123,\n        ping_slot_dr=123,\n        ping_slot_freq=123,\n        ping_slot_period=123,\n        reg_params_revision="regParamsRevision",\n        rf_region="rfRegion",\n        rx_data_rate2=123,\n        rx_delay1=123,\n        rx_dr_offset1=123,\n        rx_freq2=123,\n        supports32_bit_fCnt=False,\n        supports_class_b=False,\n        supports_class_c=False,\n        supports_join=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['class_b_timeout', 'class_c_timeout', 'factory_preset_freqs_list', 'mac_version', 'max_duty_cycle', 'max_eirp', 'ping_slot_dr', 'ping_slot_freq', 'ping_slot_period', 'reg_params_revision', 'rf_region', 'rx_data_rate2', 'rx_delay1', 'rx_dr_offset1', 'rx_freq2', 'supports32_bit_f_cnt', 'supports_class_b', 'supports_class_c', 'supports_join']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnDeviceProfile.LoRaWANDeviceProfileProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnFuotaTask.LoRaWANProperty
class CfnFuotaTask_LoRaWANPropertyDef(BaseStruct):
    rf_region: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The frequency band (RFRegion) value.\n')
    start_time: typing.Optional[str] = pydantic.Field(None, description='Start time of a FUOTA task.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-fuotatask-lorawan.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    lo_ra_wANProperty = iotwireless.CfnFuotaTask.LoRaWANProperty(\n        rf_region="rfRegion",\n\n        # the properties below are optional\n        start_time="startTime"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['rf_region', 'start_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnFuotaTask.LoRaWANProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnMulticastGroup.LoRaWANProperty
class CfnMulticastGroup_LoRaWANPropertyDef(BaseStruct):
    dl_class: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='DlClass for LoRaWAN. Valid values are ClassB and ClassC.\n')
    rf_region: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The frequency band (RFRegion) value.\n')
    number_of_devices_in_group: typing.Union[int, float, None] = pydantic.Field(None, description='Number of devices that are associated to the multicast group.\n')
    number_of_devices_requested: typing.Union[int, float, None] = pydantic.Field(None, description='Number of devices that are requested to be associated with the multicast group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-multicastgroup-lorawan.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    lo_ra_wANProperty = iotwireless.CfnMulticastGroup.LoRaWANProperty(\n        dl_class="dlClass",\n        rf_region="rfRegion",\n\n        # the properties below are optional\n        number_of_devices_in_group=123,\n        number_of_devices_requested=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dl_class', 'rf_region', 'number_of_devices_in_group', 'number_of_devices_requested']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnMulticastGroup.LoRaWANProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnNetworkAnalyzerConfiguration.TraceContentProperty
class CfnNetworkAnalyzerConfiguration_TraceContentPropertyDef(BaseStruct):
    log_level: typing.Optional[str] = pydantic.Field(None, description='The log level for a log message. The log levels can be disabled, or set to ``ERROR`` to display less verbose logs containing only error information, or to ``INFO`` for more detailed logs\n')
    wireless_device_frame_info: typing.Optional[str] = pydantic.Field(None, description='``FrameInfo`` of your wireless device resources for the trace content. Use FrameInfo to debug the communication between your LoRaWAN end devices and the network server.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-networkanalyzerconfiguration-tracecontent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    trace_content_property = iotwireless.CfnNetworkAnalyzerConfiguration.TraceContentProperty(\n        log_level="logLevel",\n        wireless_device_frame_info="wirelessDeviceFrameInfo"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['log_level', 'wireless_device_frame_info']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnNetworkAnalyzerConfiguration.TraceContentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnPartnerAccount.SidewalkAccountInfoProperty
class CfnPartnerAccount_SidewalkAccountInfoPropertyDef(BaseStruct):
    app_server_private_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Sidewalk application server private key. The application server private key is a secret key, which you should handle in a similar way as you would an application password. You can protect the application server private key by storing the value in the AWS Secrets Manager and use the `secretsmanager <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager>`_ to reference this value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-partneraccount-sidewalkaccountinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    sidewalk_account_info_property = iotwireless.CfnPartnerAccount.SidewalkAccountInfoProperty(\n        app_server_private_key="appServerPrivateKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_server_private_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnPartnerAccount.SidewalkAccountInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnPartnerAccount.SidewalkAccountInfoWithFingerprintProperty
class CfnPartnerAccount_SidewalkAccountInfoWithFingerprintPropertyDef(BaseStruct):
    amazon_id: typing.Optional[str] = pydantic.Field(None, description='The Sidewalk Amazon ID.\n')
    arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the resource.\n')
    fingerprint: typing.Optional[str] = pydantic.Field(None, description='The fingerprint of the Sidewalk application server private key.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-partneraccount-sidewalkaccountinfowithfingerprint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    sidewalk_account_info_with_fingerprint_property = iotwireless.CfnPartnerAccount.SidewalkAccountInfoWithFingerprintProperty(\n        amazon_id="amazonId",\n        arn="arn",\n        fingerprint="fingerprint"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['amazon_id', 'arn', 'fingerprint']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnPartnerAccount.SidewalkAccountInfoWithFingerprintProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnPartnerAccount.SidewalkUpdateAccountProperty
class CfnPartnerAccount_SidewalkUpdateAccountPropertyDef(BaseStruct):
    app_server_private_key: typing.Optional[str] = pydantic.Field(None, description='The new Sidewalk application server private key.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-partneraccount-sidewalkupdateaccount.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    sidewalk_update_account_property = iotwireless.CfnPartnerAccount.SidewalkUpdateAccountProperty(\n        app_server_private_key="appServerPrivateKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_server_private_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnPartnerAccount.SidewalkUpdateAccountProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnServiceProfile.LoRaWANServiceProfileProperty
class CfnServiceProfile_LoRaWANServiceProfilePropertyDef(BaseStruct):
    add_gw_metadata: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='The AddGWMetaData value.\n')
    channel_mask: typing.Optional[str] = pydantic.Field(None, description="The ChannelMask value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    dev_status_req_freq: typing.Union[int, float, None] = pydantic.Field(None, description="The DevStatusReqFreq value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    dl_bucket_size: typing.Union[int, float, None] = pydantic.Field(None, description="The DLBucketSize value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    dl_rate: typing.Union[int, float, None] = pydantic.Field(None, description="The DLRate value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    dl_rate_policy: typing.Optional[str] = pydantic.Field(None, description="The DLRatePolicy value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    dr_max: typing.Union[int, float, None] = pydantic.Field(None, description="The DRMax value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    dr_min: typing.Union[int, float, None] = pydantic.Field(None, description="The DRMin value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    hr_allowed: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="The HRAllowed value that describes whether handover roaming is allowed. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    min_gw_diversity: typing.Union[int, float, None] = pydantic.Field(None, description="The MinGwDiversity value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    nwk_geo_loc: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="The NwkGeoLoc value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    pr_allowed: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="The PRAllowed value that describes whether passive roaming is allowed. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    ra_allowed: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='The RAAllowed value that describes whether roaming activation is allowed.\n')
    report_dev_status_battery: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="The ReportDevStatusBattery value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    report_dev_status_margin: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="The ReportDevStatusMargin value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    target_per: typing.Union[int, float, None] = pydantic.Field(None, description="The TargetPer value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    ul_bucket_size: typing.Union[int, float, None] = pydantic.Field(None, description="The UlBucketSize value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    ul_rate: typing.Union[int, float, None] = pydantic.Field(None, description="The ULRate value. This property is ``ReadOnly`` and can't be inputted for create. It's returned with ``Fn::GetAtt``\n")
    ul_rate_policy: typing.Optional[str] = pydantic.Field(None, description='The ULRatePolicy value. This property is ``ReadOnly`` and can\'t be inputted for create. It\'s returned with ``Fn::GetAtt``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-serviceprofile-lorawanserviceprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    lo_ra_wANService_profile_property = iotwireless.CfnServiceProfile.LoRaWANServiceProfileProperty(\n        add_gw_metadata=False,\n        channel_mask="channelMask",\n        dev_status_req_freq=123,\n        dl_bucket_size=123,\n        dl_rate=123,\n        dl_rate_policy="dlRatePolicy",\n        dr_max=123,\n        dr_min=123,\n        hr_allowed=False,\n        min_gw_diversity=123,\n        nwk_geo_loc=False,\n        pr_allowed=False,\n        ra_allowed=False,\n        report_dev_status_battery=False,\n        report_dev_status_margin=False,\n        target_per=123,\n        ul_bucket_size=123,\n        ul_rate=123,\n        ul_rate_policy="ulRatePolicy"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['add_gw_metadata', 'channel_mask', 'dev_status_req_freq', 'dl_bucket_size', 'dl_rate', 'dl_rate_policy', 'dr_max', 'dr_min', 'hr_allowed', 'min_gw_diversity', 'nwk_geo_loc', 'pr_allowed', 'ra_allowed', 'report_dev_status_battery', 'report_dev_status_margin', 'target_per', 'ul_bucket_size', 'ul_rate', 'ul_rate_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnServiceProfile.LoRaWANServiceProfileProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty
class CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef(BaseStruct):
    model: typing.Optional[str] = pydantic.Field(None, description='The model number of the wireless gateway.\n')
    package_version: typing.Optional[str] = pydantic.Field(None, description='The version of the wireless gateway firmware.\n')
    station: typing.Optional[str] = pydantic.Field(None, description='The basic station version of the wireless gateway.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-taskdefinition-lorawangatewayversion.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    lo_ra_wANGateway_version_property = iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n        model="model",\n        package_version="packageVersion",\n        station="station"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['model', 'package_version', 'station']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnTaskDefinition.LoRaWANUpdateGatewayTaskCreateProperty
class CfnTaskDefinition_LoRaWANUpdateGatewayTaskCreatePropertyDef(BaseStruct):
    current_version: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The version of the gateways that should receive the update.\n')
    sig_key_crc: typing.Union[int, float, None] = pydantic.Field(None, description='The CRC of the signature private key to check.\n')
    update_signature: typing.Optional[str] = pydantic.Field(None, description='The signature used to verify the update firmware.\n')
    update_version: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The firmware version to update the gateway to.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-taskdefinition-lorawanupdategatewaytaskcreate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    lo_ra_wANUpdate_gateway_task_create_property = iotwireless.CfnTaskDefinition.LoRaWANUpdateGatewayTaskCreateProperty(\n        current_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n            model="model",\n            package_version="packageVersion",\n            station="station"\n        ),\n        sig_key_crc=123,\n        update_signature="updateSignature",\n        update_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n            model="model",\n            package_version="packageVersion",\n            station="station"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['current_version', 'sig_key_crc', 'update_signature', 'update_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnTaskDefinition.LoRaWANUpdateGatewayTaskCreateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnTaskDefinition.LoRaWANUpdateGatewayTaskEntryProperty
class CfnTaskDefinition_LoRaWANUpdateGatewayTaskEntryPropertyDef(BaseStruct):
    current_version: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The version of the gateways that should receive the update.\n')
    update_version: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The firmware version to update the gateway to.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-taskdefinition-lorawanupdategatewaytaskentry.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    lo_ra_wANUpdate_gateway_task_entry_property = iotwireless.CfnTaskDefinition.LoRaWANUpdateGatewayTaskEntryProperty(\n        current_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n            model="model",\n            package_version="packageVersion",\n            station="station"\n        ),\n        update_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n            model="model",\n            package_version="packageVersion",\n            station="station"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['current_version', 'update_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnTaskDefinition.LoRaWANUpdateGatewayTaskEntryProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnTaskDefinition.UpdateWirelessGatewayTaskCreateProperty
class CfnTaskDefinition_UpdateWirelessGatewayTaskCreatePropertyDef(BaseStruct):
    lo_ra_wan: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANUpdateGatewayTaskCreatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties that relate to the LoRaWAN wireless gateway.\n')
    update_data_role: typing.Optional[str] = pydantic.Field(None, description='The IAM role used to read data from the S3 bucket.\n')
    update_data_source: typing.Optional[str] = pydantic.Field(None, description='The link to the S3 bucket.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-taskdefinition-updatewirelessgatewaytaskcreate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    update_wireless_gateway_task_create_property = iotwireless.CfnTaskDefinition.UpdateWirelessGatewayTaskCreateProperty(\n        lo_ra_wan=iotwireless.CfnTaskDefinition.LoRaWANUpdateGatewayTaskCreateProperty(\n            current_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n                model="model",\n                package_version="packageVersion",\n                station="station"\n            ),\n            sig_key_crc=123,\n            update_signature="updateSignature",\n            update_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n                model="model",\n                package_version="packageVersion",\n                station="station"\n            )\n        ),\n        update_data_role="updateDataRole",\n        update_data_source="updateDataSource"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lo_ra_wan', 'update_data_role', 'update_data_source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnTaskDefinition.UpdateWirelessGatewayTaskCreateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDevice.AbpV10xProperty
class CfnWirelessDevice_AbpV10xPropertyDef(BaseStruct):
    dev_addr: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    session_keys: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_SessionKeysAbpV10xPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['dev_addr', 'session_keys']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDevice.AbpV10xProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDevice.AbpV11Property
class CfnWirelessDevice_AbpV11PropertyDef(BaseStruct):
    dev_addr: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The DevAddr value.\n')
    session_keys: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_SessionKeysAbpV11PropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Session keys for ABP v1.1.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-wirelessdevice-abpv11.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    abp_v11_property = iotwireless.CfnWirelessDevice.AbpV11Property(\n        dev_addr="devAddr",\n        session_keys=iotwireless.CfnWirelessDevice.SessionKeysAbpV11Property(\n            app_sKey="appSKey",\n            f_nwk_sInt_key="fNwkSIntKey",\n            nwk_sEnc_key="nwkSEncKey",\n            s_nwk_sInt_key="sNwkSIntKey"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dev_addr', 'session_keys']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDevice.AbpV11Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDevice.LoRaWANDeviceProperty
class CfnWirelessDevice_LoRaWANDevicePropertyDef(BaseStruct):
    abp_v10_x: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_AbpV10xPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    abp_v11: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_AbpV11PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='ABP device object for create APIs for v1.1.\n')
    dev_eui: typing.Optional[str] = pydantic.Field(None, description='The DevEUI value.\n')
    device_profile_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the device profile for the new wireless device.\n')
    otaa_v10_x: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_OtaaV10xPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='OTAA device object for create APIs for v1.0.x.\n')
    otaa_v11: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_OtaaV11PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='OTAA device object for v1.1 for create APIs.\n')
    service_profile_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the service profile.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-wirelessdevice-lorawandevice.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    lo_ra_wANDevice_property = iotwireless.CfnWirelessDevice.LoRaWANDeviceProperty(\n        abp_v10_x=iotwireless.CfnWirelessDevice.AbpV10xProperty(\n            dev_addr="devAddr",\n            session_keys=iotwireless.CfnWirelessDevice.SessionKeysAbpV10xProperty(\n                app_sKey="appSKey",\n                nwk_sKey="nwkSKey"\n            )\n        ),\n        abp_v11=iotwireless.CfnWirelessDevice.AbpV11Property(\n            dev_addr="devAddr",\n            session_keys=iotwireless.CfnWirelessDevice.SessionKeysAbpV11Property(\n                app_sKey="appSKey",\n                f_nwk_sInt_key="fNwkSIntKey",\n                nwk_sEnc_key="nwkSEncKey",\n                s_nwk_sInt_key="sNwkSIntKey"\n            )\n        ),\n        dev_eui="devEui",\n        device_profile_id="deviceProfileId",\n        otaa_v10_x=iotwireless.CfnWirelessDevice.OtaaV10xProperty(\n            app_eui="appEui",\n            app_key="appKey"\n        ),\n        otaa_v11=iotwireless.CfnWirelessDevice.OtaaV11Property(\n            app_key="appKey",\n            join_eui="joinEui",\n            nwk_key="nwkKey"\n        ),\n        service_profile_id="serviceProfileId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['abp_v10_x', 'abp_v11', 'dev_eui', 'device_profile_id', 'otaa_v10_x', 'otaa_v11', 'service_profile_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDevice.LoRaWANDeviceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDevice.OtaaV10xProperty
class CfnWirelessDevice_OtaaV10xPropertyDef(BaseStruct):
    app_eui: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    app_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['app_eui', 'app_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDevice.OtaaV10xProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDevice.OtaaV11Property
class CfnWirelessDevice_OtaaV11PropertyDef(BaseStruct):
    app_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AppKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the AppKey value by storing it in the AWS Secrets Manager and use the `secretsmanager <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager>`_ to reference this value.\n')
    join_eui: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The JoinEUI value.\n')
    nwk_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The NwkKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the NwkKey value by storing it in the AWS Secrets Manager and use the `secretsmanager <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager>`_ to reference this value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-wirelessdevice-otaav11.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    otaa_v11_property = iotwireless.CfnWirelessDevice.OtaaV11Property(\n        app_key="appKey",\n        join_eui="joinEui",\n        nwk_key="nwkKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_key', 'join_eui', 'nwk_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDevice.OtaaV11Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDevice.SessionKeysAbpV10xProperty
class CfnWirelessDevice_SessionKeysAbpV10xPropertyDef(BaseStruct):
    app_s_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    nwk_s_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['app_s_key', 'nwk_s_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDevice.SessionKeysAbpV10xProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDevice.SessionKeysAbpV11Property
class CfnWirelessDevice_SessionKeysAbpV11PropertyDef(BaseStruct):
    app_s_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AppSKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the AppSKey value by storing it in the AWS Secrets Manager and use the `secretsmanager <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager>`_ to reference this value.\n')
    f_nwk_s_int_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The FNwkSIntKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the FNwkSIntKey value by storing it in the AWS Secrets Manager and use the `secretsmanager <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager>`_ to reference this value.\n')
    nwk_s_enc_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The NwkSEncKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the NwkSEncKey value by storing it in the AWS Secrets Manager and use the `secretsmanager <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager>`_ to reference this value.\n')
    s_nwk_s_int_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SNwkSIntKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the SNwkSIntKey value by storing it in the AWS Secrets Manager and use the `secretsmanager <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager>`_ to reference this value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-wirelessdevice-sessionkeysabpv11.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    session_keys_abp_v11_property = iotwireless.CfnWirelessDevice.SessionKeysAbpV11Property(\n        app_sKey="appSKey",\n        f_nwk_sInt_key="fNwkSIntKey",\n        nwk_sEnc_key="nwkSEncKey",\n        s_nwk_sInt_key="sNwkSIntKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_s_key', 'f_nwk_s_int_key', 'nwk_s_enc_key', 's_nwk_s_int_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDevice.SessionKeysAbpV11Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDeviceImportTask.SidewalkProperty
class CfnWirelessDeviceImportTask_SidewalkPropertyDef(BaseStruct):
    device_creation_file: typing.Optional[str] = pydantic.Field(None, description="The CSV file contained in an S3 bucket that's used for adding devices to an import task.\n")
    device_creation_file_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='List of Sidewalk devices that are added to the import task.\n')
    role: typing.Optional[str] = pydantic.Field(None, description='The IAM role that allows AWS IoT Wireless to access the CSV file in the S3 bucket.\n')
    sidewalk_manufacturing_sn: typing.Optional[str] = pydantic.Field(None, description='The Sidewalk manufacturing serial number (SMSN) of the Sidewalk device.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-wirelessdeviceimporttask-sidewalk.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    sidewalk_property = iotwireless.CfnWirelessDeviceImportTask.SidewalkProperty(\n        device_creation_file="deviceCreationFile",\n        device_creation_file_list=["deviceCreationFileList"],\n        role="role",\n        sidewalk_manufacturing_sn="sidewalkManufacturingSn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['device_creation_file', 'device_creation_file_list', 'role', 'sidewalk_manufacturing_sn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDeviceImportTask.SidewalkProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessGateway.LoRaWANGatewayProperty
class CfnWirelessGateway_LoRaWANGatewayPropertyDef(BaseStruct):
    gateway_eui: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The gateway's EUI value.\n")
    rf_region: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The frequency band (RFRegion) value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotwireless-wirelessgateway-lorawangateway.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    lo_ra_wANGateway_property = iotwireless.CfnWirelessGateway.LoRaWANGatewayProperty(\n        gateway_eui="gatewayEui",\n        rf_region="rfRegion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['gateway_eui', 'rf_region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessGateway.LoRaWANGatewayProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnDestination
class CfnDestinationDef(BaseCfnResource):
    expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The rule name to send messages to.\n')
    expression_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of value in ``Expression`` .\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the new resource.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the new resource. Maximum length is 2048 characters.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the IAM Role that authorizes the destination.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.')
    _init_params: typing.ClassVar[list[str]] = ['expression', 'expression_type', 'name', 'description', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnDestination'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnDestinationDefConfig] = pydantic.Field(None)


class CfnDestinationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnDestinationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnDestinationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnDestinationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnDestinationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnDestinationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnDestinationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnDestinationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnDestinationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnDestinationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnDestinationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnDestinationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnDestinationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnDestinationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDestinationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDestinationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDestinationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDestinationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDestinationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDestinationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDestinationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDestinationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDestinationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDestinationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDestinationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDestinationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDestinationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDestinationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnDeviceProfile
class CfnDeviceProfileDef(BaseCfnResource):
    lo_ra_wan: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnDeviceProfile_LoRaWANDeviceProfilePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='LoRaWAN device profile object.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.')
    _init_params: typing.ClassVar[list[str]] = ['lo_ra_wan', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['LoRaWANDeviceProfileProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnDeviceProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnDeviceProfileDefConfig] = pydantic.Field(None)


class CfnDeviceProfileDefConfig(pydantic.BaseModel):
    LoRaWANDeviceProfileProperty: typing.Optional[list[CfnDeviceProfileDefLorawandeviceprofilepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnDeviceProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnDeviceProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnDeviceProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnDeviceProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnDeviceProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnDeviceProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnDeviceProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnDeviceProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnDeviceProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnDeviceProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnDeviceProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnDeviceProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnDeviceProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDeviceProfileDefLorawandeviceprofilepropertyParams(pydantic.BaseModel):
    class_b_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    class_c_timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    factory_preset_freqs_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[int, float]], None] = pydantic.Field(None, description='')
    mac_version: typing.Optional[str] = pydantic.Field(None, description='')
    max_duty_cycle: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_eirp: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ping_slot_dr: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ping_slot_freq: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ping_slot_period: typing.Union[int, float, None] = pydantic.Field(None, description='')
    reg_params_revision: typing.Optional[str] = pydantic.Field(None, description='')
    rf_region: typing.Optional[str] = pydantic.Field(None, description='')
    rx_data_rate2: typing.Union[int, float, None] = pydantic.Field(None, description='')
    rx_delay1: typing.Union[int, float, None] = pydantic.Field(None, description='')
    rx_dr_offset1: typing.Union[int, float, None] = pydantic.Field(None, description='')
    rx_freq2: typing.Union[int, float, None] = pydantic.Field(None, description='')
    supports32_bit_f_cnt: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    supports_class_b: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    supports_class_c: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    supports_join: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDeviceProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDeviceProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDeviceProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDeviceProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDeviceProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDeviceProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDeviceProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDeviceProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDeviceProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDeviceProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDeviceProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDeviceProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDeviceProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDeviceProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnFuotaTask
class CfnFuotaTaskDef(BaseCfnResource):
    firmware_update_image: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The S3 URI points to a firmware update image that is to be used with a FUOTA task.\n')
    firmware_update_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The firmware update role that is to be used with a FUOTA task.\n')
    lo_ra_wan: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnFuotaTask_LoRaWANPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The LoRaWAN information used with a FUOTA task.\n')
    associate_multicast_group: typing.Optional[str] = pydantic.Field(None, description='The ID of the multicast group to associate with a FUOTA task.\n')
    associate_wireless_device: typing.Optional[str] = pydantic.Field(None, description='The ID of the wireless device to associate with a multicast group.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the new resource.\n')
    disassociate_multicast_group: typing.Optional[str] = pydantic.Field(None, description='The ID of the multicast group to disassociate from a FUOTA task.\n')
    disassociate_wireless_device: typing.Optional[str] = pydantic.Field(None, description='The ID of the wireless device to disassociate from a FUOTA task.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of a FUOTA task.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.')
    _init_params: typing.ClassVar[list[str]] = ['firmware_update_image', 'firmware_update_role', 'lo_ra_wan', 'associate_multicast_group', 'associate_wireless_device', 'description', 'disassociate_multicast_group', 'disassociate_wireless_device', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['LoRaWANProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnFuotaTask'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnFuotaTaskDefConfig] = pydantic.Field(None)


class CfnFuotaTaskDefConfig(pydantic.BaseModel):
    LoRaWANProperty: typing.Optional[list[CfnFuotaTaskDefLorawanpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnFuotaTaskDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnFuotaTaskDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnFuotaTaskDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnFuotaTaskDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnFuotaTaskDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnFuotaTaskDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnFuotaTaskDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnFuotaTaskDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnFuotaTaskDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnFuotaTaskDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnFuotaTaskDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnFuotaTaskDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnFuotaTaskDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFuotaTaskDefLorawanpropertyParams(pydantic.BaseModel):
    rf_region: str = pydantic.Field(..., description='')
    start_time: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFuotaTaskDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFuotaTaskDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFuotaTaskDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFuotaTaskDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFuotaTaskDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFuotaTaskDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFuotaTaskDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFuotaTaskDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFuotaTaskDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFuotaTaskDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFuotaTaskDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnFuotaTaskDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFuotaTaskDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFuotaTaskDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnMulticastGroup
class CfnMulticastGroupDef(BaseCfnResource):
    lo_ra_wan: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnMulticastGroup_LoRaWANPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The LoRaWAN information that is to be used with the multicast group.\n')
    associate_wireless_device: typing.Optional[str] = pydantic.Field(None, description='The ID of the wireless device to associate with a multicast group.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the multicast group.\n')
    disassociate_wireless_device: typing.Optional[str] = pydantic.Field(None, description='The ID of the wireless device to disassociate from a multicast group.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the multicast group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.')
    _init_params: typing.ClassVar[list[str]] = ['lo_ra_wan', 'associate_wireless_device', 'description', 'disassociate_wireless_device', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['LoRaWANProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnMulticastGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnMulticastGroupDefConfig] = pydantic.Field(None)


class CfnMulticastGroupDefConfig(pydantic.BaseModel):
    LoRaWANProperty: typing.Optional[list[CfnMulticastGroupDefLorawanpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnMulticastGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnMulticastGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnMulticastGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnMulticastGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnMulticastGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnMulticastGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnMulticastGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnMulticastGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnMulticastGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnMulticastGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnMulticastGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnMulticastGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnMulticastGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnMulticastGroupDefLorawanpropertyParams(pydantic.BaseModel):
    dl_class: str = pydantic.Field(..., description='')
    rf_region: str = pydantic.Field(..., description='')
    number_of_devices_in_group: typing.Union[int, float, None] = pydantic.Field(None, description='')
    number_of_devices_requested: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnMulticastGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMulticastGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMulticastGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMulticastGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMulticastGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMulticastGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMulticastGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMulticastGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMulticastGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMulticastGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMulticastGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnMulticastGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMulticastGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMulticastGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnNetworkAnalyzerConfiguration
class CfnNetworkAnalyzerConfigurationDef(BaseCfnResource):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the network analyzer configuration.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.\n')
    trace_content: typing.Any = pydantic.Field(None, description='Trace content for your wireless gateway and wireless device resources.\n')
    wireless_devices: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Wireless device resources to add to the network analyzer configuration. Provide the ``WirelessDeviceId`` of the resource to add in the input array.\n')
    wireless_gateways: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Wireless gateway resources to add to the network analyzer configuration. Provide the ``WirelessGatewayId`` of the resource to add in the input array.')
    _init_params: typing.ClassVar[list[str]] = ['name', 'description', 'tags', 'trace_content', 'wireless_devices', 'wireless_gateways']
    _method_names: typing.ClassVar[list[str]] = ['TraceContentProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnNetworkAnalyzerConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnNetworkAnalyzerConfigurationDefConfig] = pydantic.Field(None)


class CfnNetworkAnalyzerConfigurationDefConfig(pydantic.BaseModel):
    TraceContentProperty: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefTracecontentpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnNetworkAnalyzerConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnNetworkAnalyzerConfigurationDefTracecontentpropertyParams(pydantic.BaseModel):
    log_level: typing.Optional[str] = pydantic.Field(None, description='')
    wireless_device_frame_info: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnNetworkAnalyzerConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnNetworkAnalyzerConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnNetworkAnalyzerConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnNetworkAnalyzerConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnNetworkAnalyzerConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnNetworkAnalyzerConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnNetworkAnalyzerConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnNetworkAnalyzerConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnNetworkAnalyzerConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnNetworkAnalyzerConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnNetworkAnalyzerConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnNetworkAnalyzerConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnNetworkAnalyzerConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnNetworkAnalyzerConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnPartnerAccount
class CfnPartnerAccountDef(BaseCfnResource):
    account_linked: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether the partner account is linked to the AWS account.\n')
    partner_account_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the partner account to update.\n')
    partner_type: typing.Optional[str] = pydantic.Field(None, description='The partner type.\n')
    sidewalk: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnPartnerAccount_SidewalkAccountInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Sidewalk account credentials.\n')
    sidewalk_response: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnPartnerAccount_SidewalkAccountInfoWithFingerprintPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sidewalk_update: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnPartnerAccount_SidewalkUpdateAccountPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sidewalk update.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.')
    _init_params: typing.ClassVar[list[str]] = ['account_linked', 'partner_account_id', 'partner_type', 'sidewalk', 'sidewalk_response', 'sidewalk_update', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['SidewalkAccountInfoProperty', 'SidewalkAccountInfoWithFingerprintProperty', 'SidewalkUpdateAccountProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnPartnerAccount'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPartnerAccountDefConfig] = pydantic.Field(None)


class CfnPartnerAccountDefConfig(pydantic.BaseModel):
    SidewalkAccountInfoProperty: typing.Optional[list[CfnPartnerAccountDefSidewalkaccountinfopropertyParams]] = pydantic.Field(None, description='')
    SidewalkAccountInfoWithFingerprintProperty: typing.Optional[list[CfnPartnerAccountDefSidewalkaccountinfowithfingerprintpropertyParams]] = pydantic.Field(None, description='')
    SidewalkUpdateAccountProperty: typing.Optional[list[CfnPartnerAccountDefSidewalkupdateaccountpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnPartnerAccountDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPartnerAccountDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPartnerAccountDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPartnerAccountDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPartnerAccountDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPartnerAccountDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPartnerAccountDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPartnerAccountDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPartnerAccountDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPartnerAccountDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPartnerAccountDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPartnerAccountDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPartnerAccountDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPartnerAccountDefSidewalkaccountinfopropertyParams(pydantic.BaseModel):
    app_server_private_key: str = pydantic.Field(..., description='')
    ...

class CfnPartnerAccountDefSidewalkaccountinfowithfingerprintpropertyParams(pydantic.BaseModel):
    amazon_id: typing.Optional[str] = pydantic.Field(None, description='')
    arn: typing.Optional[str] = pydantic.Field(None, description='')
    fingerprint: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPartnerAccountDefSidewalkupdateaccountpropertyParams(pydantic.BaseModel):
    app_server_private_key: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPartnerAccountDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPartnerAccountDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPartnerAccountDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPartnerAccountDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPartnerAccountDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPartnerAccountDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPartnerAccountDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPartnerAccountDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPartnerAccountDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPartnerAccountDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPartnerAccountDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPartnerAccountDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPartnerAccountDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPartnerAccountDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnServiceProfile
class CfnServiceProfileDef(BaseCfnResource):
    lo_ra_wan: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnServiceProfile_LoRaWANServiceProfilePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='LoRaWAN service profile object.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.')
    _init_params: typing.ClassVar[list[str]] = ['lo_ra_wan', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['LoRaWANServiceProfileProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnServiceProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnServiceProfileDefConfig] = pydantic.Field(None)


class CfnServiceProfileDefConfig(pydantic.BaseModel):
    LoRaWANServiceProfileProperty: typing.Optional[list[CfnServiceProfileDefLorawanserviceprofilepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnServiceProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnServiceProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnServiceProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnServiceProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnServiceProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnServiceProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnServiceProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnServiceProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnServiceProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnServiceProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnServiceProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnServiceProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnServiceProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_lo_ra_wan_hr_allowed_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    attr_lo_ra_wan_nwk_geo_loc_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    attr_lo_ra_wan_report_dev_status_battery_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    attr_lo_ra_wan_report_dev_status_margin_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    attr_lo_ra_wan_response_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnServiceProfileDefLorawanserviceprofilepropertyParams(pydantic.BaseModel):
    add_gw_metadata: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    channel_mask: typing.Optional[str] = pydantic.Field(None, description='')
    dev_status_req_freq: typing.Union[int, float, None] = pydantic.Field(None, description='')
    dl_bucket_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    dl_rate: typing.Union[int, float, None] = pydantic.Field(None, description='')
    dl_rate_policy: typing.Optional[str] = pydantic.Field(None, description='')
    dr_max: typing.Union[int, float, None] = pydantic.Field(None, description='')
    dr_min: typing.Union[int, float, None] = pydantic.Field(None, description='')
    hr_allowed: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    min_gw_diversity: typing.Union[int, float, None] = pydantic.Field(None, description='')
    nwk_geo_loc: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    pr_allowed: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ra_allowed: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    report_dev_status_battery: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    report_dev_status_margin: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    target_per: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ul_bucket_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ul_rate: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ul_rate_policy: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnServiceProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnServiceProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnServiceProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnServiceProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnServiceProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnServiceProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnServiceProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnServiceProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnServiceProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnServiceProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnServiceProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnServiceProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnServiceProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnServiceProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnTaskDefinition
class CfnTaskDefinitionDef(BaseCfnResource):
    auto_create_tasks: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Whether to automatically create tasks using this task definition for all gateways with the specified current version. If ``false`` , the task must be created by calling ``CreateWirelessGatewayTask`` .\n')
    lo_ra_wan_update_gateway_task_entry: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANUpdateGatewayTaskEntryPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='LoRaWANUpdateGatewayTaskEntry object.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n')
    task_definition_type: typing.Optional[str] = pydantic.Field(None, description='A filter to list only the wireless gateway task definitions that use this task definition type.\n')
    update: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_UpdateWirelessGatewayTaskCreatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the gateways to update.')
    _init_params: typing.ClassVar[list[str]] = ['auto_create_tasks', 'lo_ra_wan_update_gateway_task_entry', 'name', 'tags', 'task_definition_type', 'update']
    _method_names: typing.ClassVar[list[str]] = ['LoRaWANGatewayVersionProperty', 'LoRaWANUpdateGatewayTaskCreateProperty', 'LoRaWANUpdateGatewayTaskEntryProperty', 'UpdateWirelessGatewayTaskCreateProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnTaskDefinition'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnTaskDefinitionDefConfig] = pydantic.Field(None)


class CfnTaskDefinitionDefConfig(pydantic.BaseModel):
    LoRaWANGatewayVersionProperty: typing.Optional[list[CfnTaskDefinitionDefLorawangatewayversionpropertyParams]] = pydantic.Field(None, description='')
    LoRaWANUpdateGatewayTaskCreateProperty: typing.Optional[list[CfnTaskDefinitionDefLorawanupdategatewaytaskcreatepropertyParams]] = pydantic.Field(None, description='')
    LoRaWANUpdateGatewayTaskEntryProperty: typing.Optional[list[CfnTaskDefinitionDefLorawanupdategatewaytaskentrypropertyParams]] = pydantic.Field(None, description='')
    UpdateWirelessGatewayTaskCreateProperty: typing.Optional[list[CfnTaskDefinitionDefUpdatewirelessgatewaytaskcreatepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnTaskDefinitionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnTaskDefinitionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnTaskDefinitionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnTaskDefinitionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnTaskDefinitionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnTaskDefinitionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnTaskDefinitionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnTaskDefinitionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnTaskDefinitionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnTaskDefinitionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnTaskDefinitionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnTaskDefinitionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnTaskDefinitionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnTaskDefinitionDefLorawangatewayversionpropertyParams(pydantic.BaseModel):
    model: typing.Optional[str] = pydantic.Field(None, description='')
    package_version: typing.Optional[str] = pydantic.Field(None, description='')
    station: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnTaskDefinitionDefLorawanupdategatewaytaskcreatepropertyParams(pydantic.BaseModel):
    current_version: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sig_key_crc: typing.Union[int, float, None] = pydantic.Field(None, description='')
    update_signature: typing.Optional[str] = pydantic.Field(None, description='')
    update_version: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnTaskDefinitionDefLorawanupdategatewaytaskentrypropertyParams(pydantic.BaseModel):
    current_version: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    update_version: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnTaskDefinitionDefUpdatewirelessgatewaytaskcreatepropertyParams(pydantic.BaseModel):
    lo_ra_wan: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANUpdateGatewayTaskCreatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    update_data_role: typing.Optional[str] = pydantic.Field(None, description='')
    update_data_source: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnTaskDefinitionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnTaskDefinitionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTaskDefinitionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnTaskDefinitionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTaskDefinitionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnTaskDefinitionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnTaskDefinitionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnTaskDefinitionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnTaskDefinitionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnTaskDefinitionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnTaskDefinitionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnTaskDefinitionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnTaskDefinitionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnTaskDefinitionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDevice
class CfnWirelessDeviceDef(BaseCfnResource):
    destination_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the destination to assign to the new wireless device. Can have only have alphanumeric, - (hyphen) and _ (underscore) characters and it can't have any spaces.\n")
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The wireless device type.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the new resource. Maximum length is 2048.\n')
    last_uplink_received_at: typing.Optional[str] = pydantic.Field(None, description='The date and time when the most recent uplink was received.\n')
    lo_ra_wan: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_LoRaWANDevicePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The device configuration information to use to create the wireless device. Must be at least one of OtaaV10x, OtaaV11, AbpV11, or AbpV10x.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n')
    thing_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the thing to associate with the wireless device.')
    _init_params: typing.ClassVar[list[str]] = ['destination_name', 'type', 'description', 'last_uplink_received_at', 'lo_ra_wan', 'name', 'tags', 'thing_arn']
    _method_names: typing.ClassVar[list[str]] = ['AbpV10xProperty', 'AbpV11Property', 'LoRaWANDeviceProperty', 'OtaaV10xProperty', 'OtaaV11Property', 'SessionKeysAbpV10xProperty', 'SessionKeysAbpV11Property', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDevice'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnWirelessDeviceDefConfig] = pydantic.Field(None)


class CfnWirelessDeviceDefConfig(pydantic.BaseModel):
    AbpV10xProperty: typing.Optional[list[CfnWirelessDeviceDefAbpv10XpropertyParams]] = pydantic.Field(None, description='')
    AbpV11Property: typing.Optional[list[CfnWirelessDeviceDefAbpv11PropertyParams]] = pydantic.Field(None, description='')
    LoRaWANDeviceProperty: typing.Optional[list[CfnWirelessDeviceDefLorawandevicepropertyParams]] = pydantic.Field(None, description='')
    OtaaV10xProperty: typing.Optional[list[CfnWirelessDeviceDefOtaav10XpropertyParams]] = pydantic.Field(None, description='')
    OtaaV11Property: typing.Optional[list[CfnWirelessDeviceDefOtaav11PropertyParams]] = pydantic.Field(None, description='')
    SessionKeysAbpV10xProperty: typing.Optional[list[CfnWirelessDeviceDefSessionkeysabpv10XpropertyParams]] = pydantic.Field(None, description='')
    SessionKeysAbpV11Property: typing.Optional[list[CfnWirelessDeviceDefSessionkeysabpv11PropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnWirelessDeviceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnWirelessDeviceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnWirelessDeviceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnWirelessDeviceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnWirelessDeviceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnWirelessDeviceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnWirelessDeviceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnWirelessDeviceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnWirelessDeviceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnWirelessDeviceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnWirelessDeviceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnWirelessDeviceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnWirelessDeviceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnWirelessDeviceDefAbpv10XpropertyParams(pydantic.BaseModel):
    dev_addr: str = pydantic.Field(..., description='')
    session_keys: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_SessionKeysAbpV10xPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnWirelessDeviceDefAbpv11PropertyParams(pydantic.BaseModel):
    dev_addr: str = pydantic.Field(..., description='')
    session_keys: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_SessionKeysAbpV11PropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnWirelessDeviceDefLorawandevicepropertyParams(pydantic.BaseModel):
    abp_v10_x: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_AbpV10xPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    abp_v11: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_AbpV11PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dev_eui: typing.Optional[str] = pydantic.Field(None, description='')
    device_profile_id: typing.Optional[str] = pydantic.Field(None, description='')
    otaa_v10_x: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_OtaaV10xPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    otaa_v11: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_OtaaV11PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_profile_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnWirelessDeviceDefOtaav10XpropertyParams(pydantic.BaseModel):
    app_eui: str = pydantic.Field(..., description='')
    app_key: str = pydantic.Field(..., description='')
    ...

class CfnWirelessDeviceDefOtaav11PropertyParams(pydantic.BaseModel):
    app_key: str = pydantic.Field(..., description='')
    join_eui: str = pydantic.Field(..., description='')
    nwk_key: str = pydantic.Field(..., description='')
    ...

class CfnWirelessDeviceDefSessionkeysabpv10XpropertyParams(pydantic.BaseModel):
    app_s_key: str = pydantic.Field(..., description='')
    nwk_s_key: str = pydantic.Field(..., description='')
    ...

class CfnWirelessDeviceDefSessionkeysabpv11PropertyParams(pydantic.BaseModel):
    app_s_key: str = pydantic.Field(..., description='')
    f_nwk_s_int_key: str = pydantic.Field(..., description='')
    nwk_s_enc_key: str = pydantic.Field(..., description='')
    s_nwk_s_int_key: str = pydantic.Field(..., description='')
    ...

class CfnWirelessDeviceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWirelessDeviceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWirelessDeviceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWirelessDeviceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWirelessDeviceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWirelessDeviceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWirelessDeviceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWirelessDeviceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWirelessDeviceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWirelessDeviceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWirelessDeviceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnWirelessDeviceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWirelessDeviceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWirelessDeviceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDeviceImportTask
class CfnWirelessDeviceImportTaskDef(BaseCfnResource):
    destination_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the destination that describes the IoT rule to route messages from the Sidewalk devices in the import task to other applications.\n')
    sidewalk: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDeviceImportTask_SidewalkPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Sidewalk-related information of the wireless device import task.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Adds to or modifies the tags of the given resource. Tags are metadata that you can use to manage a resource.')
    _init_params: typing.ClassVar[list[str]] = ['destination_name', 'sidewalk', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['SidewalkProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDeviceImportTask'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnWirelessDeviceImportTaskDefConfig] = pydantic.Field(None)


class CfnWirelessDeviceImportTaskDefConfig(pydantic.BaseModel):
    SidewalkProperty: typing.Optional[list[CfnWirelessDeviceImportTaskDefSidewalkpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnWirelessDeviceImportTaskDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnWirelessDeviceImportTaskDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnWirelessDeviceImportTaskDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnWirelessDeviceImportTaskDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnWirelessDeviceImportTaskDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnWirelessDeviceImportTaskDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnWirelessDeviceImportTaskDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnWirelessDeviceImportTaskDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnWirelessDeviceImportTaskDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnWirelessDeviceImportTaskDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnWirelessDeviceImportTaskDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnWirelessDeviceImportTaskDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnWirelessDeviceImportTaskDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnWirelessDeviceImportTaskDefSidewalkpropertyParams(pydantic.BaseModel):
    device_creation_file: typing.Optional[str] = pydantic.Field(None, description='')
    device_creation_file_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    role: typing.Optional[str] = pydantic.Field(None, description='')
    sidewalk_manufacturing_sn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnWirelessDeviceImportTaskDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWirelessDeviceImportTaskDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWirelessDeviceImportTaskDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWirelessDeviceImportTaskDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWirelessDeviceImportTaskDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWirelessDeviceImportTaskDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWirelessDeviceImportTaskDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWirelessDeviceImportTaskDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWirelessDeviceImportTaskDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWirelessDeviceImportTaskDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWirelessDeviceImportTaskDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnWirelessDeviceImportTaskDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWirelessDeviceImportTaskDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWirelessDeviceImportTaskDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessGateway
class CfnWirelessGatewayDef(BaseCfnResource):
    lo_ra_wan: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnWirelessGateway_LoRaWANGatewayPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The gateway configuration information to use to create the wireless gateway.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the new resource. The maximum length is 2048 characters.\n')
    last_uplink_received_at: typing.Optional[str] = pydantic.Field(None, description='The date and time when the most recent uplink was received.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n')
    thing_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the thing to associate with the wireless gateway.\n')
    thing_name: typing.Optional[str] = pydantic.Field(None, description="The name of the thing associated with the wireless gateway. The value is empty if a thing isn't associated with the gateway.")
    _init_params: typing.ClassVar[list[str]] = ['lo_ra_wan', 'description', 'last_uplink_received_at', 'name', 'tags', 'thing_arn', 'thing_name']
    _method_names: typing.ClassVar[list[str]] = ['LoRaWANGatewayProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessGateway'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnWirelessGatewayDefConfig] = pydantic.Field(None)


class CfnWirelessGatewayDefConfig(pydantic.BaseModel):
    LoRaWANGatewayProperty: typing.Optional[list[CfnWirelessGatewayDefLorawangatewaypropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnWirelessGatewayDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnWirelessGatewayDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnWirelessGatewayDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnWirelessGatewayDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnWirelessGatewayDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnWirelessGatewayDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnWirelessGatewayDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnWirelessGatewayDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnWirelessGatewayDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnWirelessGatewayDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnWirelessGatewayDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnWirelessGatewayDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnWirelessGatewayDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnWirelessGatewayDefLorawangatewaypropertyParams(pydantic.BaseModel):
    gateway_eui: str = pydantic.Field(..., description='')
    rf_region: str = pydantic.Field(..., description='')
    ...

class CfnWirelessGatewayDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWirelessGatewayDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWirelessGatewayDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWirelessGatewayDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWirelessGatewayDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWirelessGatewayDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWirelessGatewayDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWirelessGatewayDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWirelessGatewayDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWirelessGatewayDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWirelessGatewayDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnWirelessGatewayDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWirelessGatewayDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWirelessGatewayDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotwireless.CfnDestinationProps
class CfnDestinationPropsDef(BaseCfnProperty):
    expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The rule name to send messages to.\n')
    expression_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of value in ``Expression`` .\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the new resource.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the new resource. Maximum length is 2048 characters.\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the IAM Role that authorizes the destination.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-destination.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_destination_props = iotwireless.CfnDestinationProps(\n        expression="expression",\n        expression_type="expressionType",\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        role_arn="roleArn",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['expression', 'expression_type', 'name', 'description', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnDestinationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnDeviceProfileProps
class CfnDeviceProfilePropsDef(BaseCfnProperty):
    lo_ra_wan: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnDeviceProfile_LoRaWANDeviceProfilePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='LoRaWAN device profile object.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-deviceprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_device_profile_props = iotwireless.CfnDeviceProfileProps(\n        lo_ra_wan=iotwireless.CfnDeviceProfile.LoRaWANDeviceProfileProperty(\n            class_bTimeout=123,\n            class_cTimeout=123,\n            factory_preset_freqs_list=[123],\n            mac_version="macVersion",\n            max_duty_cycle=123,\n            max_eirp=123,\n            ping_slot_dr=123,\n            ping_slot_freq=123,\n            ping_slot_period=123,\n            reg_params_revision="regParamsRevision",\n            rf_region="rfRegion",\n            rx_data_rate2=123,\n            rx_delay1=123,\n            rx_dr_offset1=123,\n            rx_freq2=123,\n            supports32_bit_fCnt=False,\n            supports_class_b=False,\n            supports_class_c=False,\n            supports_join=False\n        ),\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lo_ra_wan', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnDeviceProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnFuotaTaskProps
class CfnFuotaTaskPropsDef(BaseCfnProperty):
    firmware_update_image: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The S3 URI points to a firmware update image that is to be used with a FUOTA task.\n')
    firmware_update_role: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The firmware update role that is to be used with a FUOTA task.\n')
    lo_ra_wan: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnFuotaTask_LoRaWANPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The LoRaWAN information used with a FUOTA task.\n')
    associate_multicast_group: typing.Optional[str] = pydantic.Field(None, description='The ID of the multicast group to associate with a FUOTA task.\n')
    associate_wireless_device: typing.Optional[str] = pydantic.Field(None, description='The ID of the wireless device to associate with a multicast group.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the new resource.\n')
    disassociate_multicast_group: typing.Optional[str] = pydantic.Field(None, description='The ID of the multicast group to disassociate from a FUOTA task.\n')
    disassociate_wireless_device: typing.Optional[str] = pydantic.Field(None, description='The ID of the wireless device to disassociate from a FUOTA task.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of a FUOTA task.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-fuotatask.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_fuota_task_props = iotwireless.CfnFuotaTaskProps(\n        firmware_update_image="firmwareUpdateImage",\n        firmware_update_role="firmwareUpdateRole",\n        lo_ra_wan=iotwireless.CfnFuotaTask.LoRaWANProperty(\n            rf_region="rfRegion",\n\n            # the properties below are optional\n            start_time="startTime"\n        ),\n\n        # the properties below are optional\n        associate_multicast_group="associateMulticastGroup",\n        associate_wireless_device="associateWirelessDevice",\n        description="description",\n        disassociate_multicast_group="disassociateMulticastGroup",\n        disassociate_wireless_device="disassociateWirelessDevice",\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['firmware_update_image', 'firmware_update_role', 'lo_ra_wan', 'associate_multicast_group', 'associate_wireless_device', 'description', 'disassociate_multicast_group', 'disassociate_wireless_device', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnFuotaTaskProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnMulticastGroupProps
class CfnMulticastGroupPropsDef(BaseCfnProperty):
    lo_ra_wan: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnMulticastGroup_LoRaWANPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The LoRaWAN information that is to be used with the multicast group.\n')
    associate_wireless_device: typing.Optional[str] = pydantic.Field(None, description='The ID of the wireless device to associate with a multicast group.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the multicast group.\n')
    disassociate_wireless_device: typing.Optional[str] = pydantic.Field(None, description='The ID of the wireless device to disassociate from a multicast group.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the multicast group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-multicastgroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_multicast_group_props = iotwireless.CfnMulticastGroupProps(\n        lo_ra_wan=iotwireless.CfnMulticastGroup.LoRaWANProperty(\n            dl_class="dlClass",\n            rf_region="rfRegion",\n\n            # the properties below are optional\n            number_of_devices_in_group=123,\n            number_of_devices_requested=123\n        ),\n\n        # the properties below are optional\n        associate_wireless_device="associateWirelessDevice",\n        description="description",\n        disassociate_wireless_device="disassociateWirelessDevice",\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lo_ra_wan', 'associate_wireless_device', 'description', 'disassociate_wireless_device', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnMulticastGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnNetworkAnalyzerConfigurationProps
class CfnNetworkAnalyzerConfigurationPropsDef(BaseCfnProperty):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the network analyzer configuration.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.\n')
    trace_content: typing.Any = pydantic.Field(None, description='Trace content for your wireless gateway and wireless device resources.\n')
    wireless_devices: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Wireless device resources to add to the network analyzer configuration. Provide the ``WirelessDeviceId`` of the resource to add in the input array.\n')
    wireless_gateways: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Wireless gateway resources to add to the network analyzer configuration. Provide the ``WirelessGatewayId`` of the resource to add in the input array.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-networkanalyzerconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    # trace_content: Any\n\n    cfn_network_analyzer_configuration_props = iotwireless.CfnNetworkAnalyzerConfigurationProps(\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        trace_content=trace_content,\n        wireless_devices=["wirelessDevices"],\n        wireless_gateways=["wirelessGateways"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'description', 'tags', 'trace_content', 'wireless_devices', 'wireless_gateways']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnNetworkAnalyzerConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnPartnerAccountProps
class CfnPartnerAccountPropsDef(BaseCfnProperty):
    account_linked: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether the partner account is linked to the AWS account.\n')
    partner_account_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the partner account to update.\n')
    partner_type: typing.Optional[str] = pydantic.Field(None, description='The partner type.\n')
    sidewalk: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnPartnerAccount_SidewalkAccountInfoPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Sidewalk account credentials.\n')
    sidewalk_response: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnPartnerAccount_SidewalkAccountInfoWithFingerprintPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sidewalk_update: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnPartnerAccount_SidewalkUpdateAccountPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Sidewalk update.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-partneraccount.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_partner_account_props = iotwireless.CfnPartnerAccountProps(\n        account_linked=False,\n        partner_account_id="partnerAccountId",\n        partner_type="partnerType",\n        sidewalk=iotwireless.CfnPartnerAccount.SidewalkAccountInfoProperty(\n            app_server_private_key="appServerPrivateKey"\n        ),\n        sidewalk_response=iotwireless.CfnPartnerAccount.SidewalkAccountInfoWithFingerprintProperty(\n            amazon_id="amazonId",\n            arn="arn",\n            fingerprint="fingerprint"\n        ),\n        sidewalk_update=iotwireless.CfnPartnerAccount.SidewalkUpdateAccountProperty(\n            app_server_private_key="appServerPrivateKey"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['account_linked', 'partner_account_id', 'partner_type', 'sidewalk', 'sidewalk_response', 'sidewalk_update', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnPartnerAccountProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnServiceProfileProps
class CfnServiceProfilePropsDef(BaseCfnProperty):
    lo_ra_wan: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnServiceProfile_LoRaWANServiceProfilePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='LoRaWAN service profile object.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-serviceprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_service_profile_props = iotwireless.CfnServiceProfileProps(\n        lo_ra_wan=iotwireless.CfnServiceProfile.LoRaWANServiceProfileProperty(\n            add_gw_metadata=False,\n            channel_mask="channelMask",\n            dev_status_req_freq=123,\n            dl_bucket_size=123,\n            dl_rate=123,\n            dl_rate_policy="dlRatePolicy",\n            dr_max=123,\n            dr_min=123,\n            hr_allowed=False,\n            min_gw_diversity=123,\n            nwk_geo_loc=False,\n            pr_allowed=False,\n            ra_allowed=False,\n            report_dev_status_battery=False,\n            report_dev_status_margin=False,\n            target_per=123,\n            ul_bucket_size=123,\n            ul_rate=123,\n            ul_rate_policy="ulRatePolicy"\n        ),\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lo_ra_wan', 'name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnServiceProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnTaskDefinitionProps
class CfnTaskDefinitionPropsDef(BaseCfnProperty):
    auto_create_tasks: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Whether to automatically create tasks using this task definition for all gateways with the specified current version. If ``false`` , the task must be created by calling ``CreateWirelessGatewayTask`` .\n')
    lo_ra_wan_update_gateway_task_entry: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_LoRaWANUpdateGatewayTaskEntryPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='LoRaWANUpdateGatewayTaskEntry object.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n')
    task_definition_type: typing.Optional[str] = pydantic.Field(None, description='A filter to list only the wireless gateway task definitions that use this task definition type.\n')
    update: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnTaskDefinition_UpdateWirelessGatewayTaskCreatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the gateways to update.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-taskdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_task_definition_props = iotwireless.CfnTaskDefinitionProps(\n        auto_create_tasks=False,\n\n        # the properties below are optional\n        lo_ra_wan_update_gateway_task_entry=iotwireless.CfnTaskDefinition.LoRaWANUpdateGatewayTaskEntryProperty(\n            current_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n                model="model",\n                package_version="packageVersion",\n                station="station"\n            ),\n            update_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n                model="model",\n                package_version="packageVersion",\n                station="station"\n            )\n        ),\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        task_definition_type="taskDefinitionType",\n        update=iotwireless.CfnTaskDefinition.UpdateWirelessGatewayTaskCreateProperty(\n            lo_ra_wan=iotwireless.CfnTaskDefinition.LoRaWANUpdateGatewayTaskCreateProperty(\n                current_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n                    model="model",\n                    package_version="packageVersion",\n                    station="station"\n                ),\n                sig_key_crc=123,\n                update_signature="updateSignature",\n                update_version=iotwireless.CfnTaskDefinition.LoRaWANGatewayVersionProperty(\n                    model="model",\n                    package_version="packageVersion",\n                    station="station"\n                )\n            ),\n            update_data_role="updateDataRole",\n            update_data_source="updateDataSource"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auto_create_tasks', 'lo_ra_wan_update_gateway_task_entry', 'name', 'tags', 'task_definition_type', 'update']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnTaskDefinitionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDeviceImportTaskProps
class CfnWirelessDeviceImportTaskPropsDef(BaseCfnProperty):
    destination_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the destination that describes the IoT rule to route messages from the Sidewalk devices in the import task to other applications.\n')
    sidewalk: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDeviceImportTask_SidewalkPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Sidewalk-related information of the wireless device import task.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Adds to or modifies the tags of the given resource. Tags are metadata that you can use to manage a resource.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-wirelessdeviceimporttask.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_wireless_device_import_task_props = iotwireless.CfnWirelessDeviceImportTaskProps(\n        destination_name="destinationName",\n        sidewalk=iotwireless.CfnWirelessDeviceImportTask.SidewalkProperty(\n            device_creation_file="deviceCreationFile",\n            device_creation_file_list=["deviceCreationFileList"],\n            role="role",\n            sidewalk_manufacturing_sn="sidewalkManufacturingSn"\n        ),\n\n        # the properties below are optional\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination_name', 'sidewalk', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDeviceImportTaskProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessDeviceProps
class CfnWirelessDevicePropsDef(BaseCfnProperty):
    destination_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the destination to assign to the new wireless device. Can have only have alphanumeric, - (hyphen) and _ (underscore) characters and it can't have any spaces.\n")
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The wireless device type.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the new resource. Maximum length is 2048.\n')
    last_uplink_received_at: typing.Optional[str] = pydantic.Field(None, description='The date and time when the most recent uplink was received.\n')
    lo_ra_wan: typing.Union[models.UnsupportedResource, models.aws_iotwireless.CfnWirelessDevice_LoRaWANDevicePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The device configuration information to use to create the wireless device. Must be at least one of OtaaV10x, OtaaV11, AbpV11, or AbpV10x.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n')
    thing_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the thing to associate with the wireless device.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-wirelessdevice.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_wireless_device_props = iotwireless.CfnWirelessDeviceProps(\n        destination_name="destinationName",\n        type="type",\n\n        # the properties below are optional\n        description="description",\n        last_uplink_received_at="lastUplinkReceivedAt",\n        lo_ra_wan=iotwireless.CfnWirelessDevice.LoRaWANDeviceProperty(\n            abp_v10_x=iotwireless.CfnWirelessDevice.AbpV10xProperty(\n                dev_addr="devAddr",\n                session_keys=iotwireless.CfnWirelessDevice.SessionKeysAbpV10xProperty(\n                    app_sKey="appSKey",\n                    nwk_sKey="nwkSKey"\n                )\n            ),\n            abp_v11=iotwireless.CfnWirelessDevice.AbpV11Property(\n                dev_addr="devAddr",\n                session_keys=iotwireless.CfnWirelessDevice.SessionKeysAbpV11Property(\n                    app_sKey="appSKey",\n                    f_nwk_sInt_key="fNwkSIntKey",\n                    nwk_sEnc_key="nwkSEncKey",\n                    s_nwk_sInt_key="sNwkSIntKey"\n                )\n            ),\n            dev_eui="devEui",\n            device_profile_id="deviceProfileId",\n            otaa_v10_x=iotwireless.CfnWirelessDevice.OtaaV10xProperty(\n                app_eui="appEui",\n                app_key="appKey"\n            ),\n            otaa_v11=iotwireless.CfnWirelessDevice.OtaaV11Property(\n                app_key="appKey",\n                join_eui="joinEui",\n                nwk_key="nwkKey"\n            ),\n            service_profile_id="serviceProfileId"\n        ),\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        thing_arn="thingArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination_name', 'type', 'description', 'last_uplink_received_at', 'lo_ra_wan', 'name', 'tags', 'thing_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessDeviceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotwireless.CfnWirelessGatewayProps
class CfnWirelessGatewayPropsDef(BaseCfnProperty):
    lo_ra_wan: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotwireless.CfnWirelessGateway_LoRaWANGatewayPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The gateway configuration information to use to create the wireless gateway.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the new resource. The maximum length is 2048 characters.\n')
    last_uplink_received_at: typing.Optional[str] = pydantic.Field(None, description='The date and time when the most recent uplink was received.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the new resource.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags are an array of key-value pairs to attach to the specified resource. Tags can have a minimum of 0 and a maximum of 50 items.\n')
    thing_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the thing to associate with the wireless gateway.\n')
    thing_name: typing.Optional[str] = pydantic.Field(None, description='The name of the thing associated with the wireless gateway. The value is empty if a thing isn\'t associated with the gateway.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-wirelessgateway.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotwireless as iotwireless\n\n    cfn_wireless_gateway_props = iotwireless.CfnWirelessGatewayProps(\n        lo_ra_wan=iotwireless.CfnWirelessGateway.LoRaWANGatewayProperty(\n            gateway_eui="gatewayEui",\n            rf_region="rfRegion"\n        ),\n\n        # the properties below are optional\n        description="description",\n        last_uplink_received_at="lastUplinkReceivedAt",\n        name="name",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        thing_arn="thingArn",\n        thing_name="thingName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lo_ra_wan', 'description', 'last_uplink_received_at', 'name', 'tags', 'thing_arn', 'thing_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotwireless.CfnWirelessGatewayProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnDeviceProfile_LoRaWANDeviceProfileProperty: typing.Optional[dict[str, CfnDeviceProfile_LoRaWANDeviceProfilePropertyDef]] = pydantic.Field(None)
    CfnFuotaTask_LoRaWANProperty: typing.Optional[dict[str, CfnFuotaTask_LoRaWANPropertyDef]] = pydantic.Field(None)
    CfnMulticastGroup_LoRaWANProperty: typing.Optional[dict[str, CfnMulticastGroup_LoRaWANPropertyDef]] = pydantic.Field(None)
    CfnNetworkAnalyzerConfiguration_TraceContentProperty: typing.Optional[dict[str, CfnNetworkAnalyzerConfiguration_TraceContentPropertyDef]] = pydantic.Field(None)
    CfnPartnerAccount_SidewalkAccountInfoProperty: typing.Optional[dict[str, CfnPartnerAccount_SidewalkAccountInfoPropertyDef]] = pydantic.Field(None)
    CfnPartnerAccount_SidewalkAccountInfoWithFingerprintProperty: typing.Optional[dict[str, CfnPartnerAccount_SidewalkAccountInfoWithFingerprintPropertyDef]] = pydantic.Field(None)
    CfnPartnerAccount_SidewalkUpdateAccountProperty: typing.Optional[dict[str, CfnPartnerAccount_SidewalkUpdateAccountPropertyDef]] = pydantic.Field(None)
    CfnServiceProfile_LoRaWANServiceProfileProperty: typing.Optional[dict[str, CfnServiceProfile_LoRaWANServiceProfilePropertyDef]] = pydantic.Field(None)
    CfnTaskDefinition_LoRaWANGatewayVersionProperty: typing.Optional[dict[str, CfnTaskDefinition_LoRaWANGatewayVersionPropertyDef]] = pydantic.Field(None)
    CfnTaskDefinition_LoRaWANUpdateGatewayTaskCreateProperty: typing.Optional[dict[str, CfnTaskDefinition_LoRaWANUpdateGatewayTaskCreatePropertyDef]] = pydantic.Field(None)
    CfnTaskDefinition_LoRaWANUpdateGatewayTaskEntryProperty: typing.Optional[dict[str, CfnTaskDefinition_LoRaWANUpdateGatewayTaskEntryPropertyDef]] = pydantic.Field(None)
    CfnTaskDefinition_UpdateWirelessGatewayTaskCreateProperty: typing.Optional[dict[str, CfnTaskDefinition_UpdateWirelessGatewayTaskCreatePropertyDef]] = pydantic.Field(None)
    CfnWirelessDevice_AbpV10xProperty: typing.Optional[dict[str, CfnWirelessDevice_AbpV10xPropertyDef]] = pydantic.Field(None)
    CfnWirelessDevice_AbpV11Property: typing.Optional[dict[str, CfnWirelessDevice_AbpV11PropertyDef]] = pydantic.Field(None)
    CfnWirelessDevice_LoRaWANDeviceProperty: typing.Optional[dict[str, CfnWirelessDevice_LoRaWANDevicePropertyDef]] = pydantic.Field(None)
    CfnWirelessDevice_OtaaV10xProperty: typing.Optional[dict[str, CfnWirelessDevice_OtaaV10xPropertyDef]] = pydantic.Field(None)
    CfnWirelessDevice_OtaaV11Property: typing.Optional[dict[str, CfnWirelessDevice_OtaaV11PropertyDef]] = pydantic.Field(None)
    CfnWirelessDevice_SessionKeysAbpV10xProperty: typing.Optional[dict[str, CfnWirelessDevice_SessionKeysAbpV10xPropertyDef]] = pydantic.Field(None)
    CfnWirelessDevice_SessionKeysAbpV11Property: typing.Optional[dict[str, CfnWirelessDevice_SessionKeysAbpV11PropertyDef]] = pydantic.Field(None)
    CfnWirelessDeviceImportTask_SidewalkProperty: typing.Optional[dict[str, CfnWirelessDeviceImportTask_SidewalkPropertyDef]] = pydantic.Field(None)
    CfnWirelessGateway_LoRaWANGatewayProperty: typing.Optional[dict[str, CfnWirelessGateway_LoRaWANGatewayPropertyDef]] = pydantic.Field(None)
    CfnDestination: typing.Optional[dict[str, CfnDestinationDef]] = pydantic.Field(None)
    CfnDeviceProfile: typing.Optional[dict[str, CfnDeviceProfileDef]] = pydantic.Field(None)
    CfnFuotaTask: typing.Optional[dict[str, CfnFuotaTaskDef]] = pydantic.Field(None)
    CfnMulticastGroup: typing.Optional[dict[str, CfnMulticastGroupDef]] = pydantic.Field(None)
    CfnNetworkAnalyzerConfiguration: typing.Optional[dict[str, CfnNetworkAnalyzerConfigurationDef]] = pydantic.Field(None)
    CfnPartnerAccount: typing.Optional[dict[str, CfnPartnerAccountDef]] = pydantic.Field(None)
    CfnServiceProfile: typing.Optional[dict[str, CfnServiceProfileDef]] = pydantic.Field(None)
    CfnTaskDefinition: typing.Optional[dict[str, CfnTaskDefinitionDef]] = pydantic.Field(None)
    CfnWirelessDevice: typing.Optional[dict[str, CfnWirelessDeviceDef]] = pydantic.Field(None)
    CfnWirelessDeviceImportTask: typing.Optional[dict[str, CfnWirelessDeviceImportTaskDef]] = pydantic.Field(None)
    CfnWirelessGateway: typing.Optional[dict[str, CfnWirelessGatewayDef]] = pydantic.Field(None)
    CfnDestinationProps: typing.Optional[dict[str, CfnDestinationPropsDef]] = pydantic.Field(None)
    CfnDeviceProfileProps: typing.Optional[dict[str, CfnDeviceProfilePropsDef]] = pydantic.Field(None)
    CfnFuotaTaskProps: typing.Optional[dict[str, CfnFuotaTaskPropsDef]] = pydantic.Field(None)
    CfnMulticastGroupProps: typing.Optional[dict[str, CfnMulticastGroupPropsDef]] = pydantic.Field(None)
    CfnNetworkAnalyzerConfigurationProps: typing.Optional[dict[str, CfnNetworkAnalyzerConfigurationPropsDef]] = pydantic.Field(None)
    CfnPartnerAccountProps: typing.Optional[dict[str, CfnPartnerAccountPropsDef]] = pydantic.Field(None)
    CfnServiceProfileProps: typing.Optional[dict[str, CfnServiceProfilePropsDef]] = pydantic.Field(None)
    CfnTaskDefinitionProps: typing.Optional[dict[str, CfnTaskDefinitionPropsDef]] = pydantic.Field(None)
    CfnWirelessDeviceImportTaskProps: typing.Optional[dict[str, CfnWirelessDeviceImportTaskPropsDef]] = pydantic.Field(None)
    CfnWirelessDeviceProps: typing.Optional[dict[str, CfnWirelessDevicePropsDef]] = pydantic.Field(None)
    CfnWirelessGatewayProps: typing.Optional[dict[str, CfnWirelessGatewayPropsDef]] = pydantic.Field(None)
    ...
